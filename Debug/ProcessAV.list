
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b914  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef0  0800ba9c  0800ba9c  0000ca9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c98c  0800c98c  0000e068  2**0
                  CONTENTS
  4 .ARM          00000008  0800c98c  0800c98c  0000d98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c994  0800c994  0000e068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c994  0800c994  0000d994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c998  0800c998  0000d998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800c99c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e068  2**0
                  CONTENTS
 10 .bss          0000069c  20000068  20000068  0000e068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000704  20000704  0000e068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ec7  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d5b  00000000  00000000  00027f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  0002bcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000123f  00000000  00000000  0002d468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b3b  00000000  00000000  0002e6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f3ae  00000000  00000000  000541e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6a06  00000000  00000000  00073590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149f96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000671c  00000000  00000000  00149fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001506f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ba84 	.word	0x0800ba84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800ba84 	.word	0x0800ba84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <play_audio_file>:

static uint32_t *buffer; /*Buffer pentru redare audio folosit static in fisier*/


void play_audio_file(char *path)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af02      	add	r7, sp, #8
 80004be:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 80004c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004c4:	f00b f946 	bl	800b754 <malloc>
 80004c8:	4603      	mov	r3, r0
 80004ca:	461a      	mov	r2, r3
 80004cc:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <play_audio_file+0x98>)
 80004ce:	601a      	str	r2, [r3, #0]

	if(buffer == NULL)
 80004d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <play_audio_file+0x98>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d036      	beq.n	8000546 <play_audio_file+0x8e>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 80004d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <play_audio_file+0x98>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f001 ff6a 	bl	80023b8 <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <play_audio_file+0x98>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	2300      	movs	r3, #0
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004f0:	2100      	movs	r1, #0
 80004f2:	4818      	ldr	r0, [pc, #96]	@ (8000554 <play_audio_file+0x9c>)
 80004f4:	f002 ff44 	bl	8003380 <HAL_DAC_Start_DMA>

	while(1)
	{
		read_audio_file(path, buffer+1024);
 80004f8:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <play_audio_file+0x98>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000500:	4619      	mov	r1, r3
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f001 ff58 	bl	80023b8 <read_audio_file>
		while(flagDmaDAC == 0);
 8000508:	bf00      	nop
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <play_audio_file+0xa0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f083 0301 	eor.w	r3, r3, #1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f7      	bne.n	800050a <play_audio_file+0x52>
		flagDmaDAC = 0;
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <play_audio_file+0xa0>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer);
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <play_audio_file+0x98>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f001 ff46 	bl	80023b8 <read_audio_file>
		while(flagDmaDAC == 0);
 800052c:	bf00      	nop
 800052e:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <play_audio_file+0xa0>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1f7      	bne.n	800052e <play_audio_file+0x76>
		flagDmaDAC = 0;
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <play_audio_file+0xa0>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer+1024);
 8000544:	e7d8      	b.n	80004f8 <play_audio_file+0x40>
		return;
 8000546:	bf00      	nop

	}

	free(buffer);

}
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000084 	.word	0x20000084
 8000554:	20000088 	.word	0x20000088
 8000558:	2000032a 	.word	0x2000032a

0800055c <convert_color_16_to_18>:

extern SPI_HandleTypeDef hspi1;
volatile extern uint8_t flagDmaSpiTx;

void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	6039      	str	r1, [r7, #0]
 8000566:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	0adb      	lsrs	r3, r3, #11
 800056c:	b29b      	uxth	r3, r3
 800056e:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	115b      	asrs	r3, r3, #5
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800057a:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 031f 	and.w	r3, r3, #31
 8000584:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 8000586:	7bfa      	ldrb	r2, [r7, #15]
 8000588:	4613      	mov	r3, r2
 800058a:	019b      	lsls	r3, r3, #6
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <convert_color_16_to_18+0x8c>)
 8000590:	fb82 1203 	smull	r1, r2, r2, r3
 8000594:	441a      	add	r2, r3
 8000596:	1112      	asrs	r2, r2, #4
 8000598:	17db      	asrs	r3, r3, #31
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	b2db      	uxtb	r3, r3
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80005a2:	7bbb      	ldrb	r3, [r7, #14]
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 80005a8:	7b7a      	ldrb	r2, [r7, #13]
 80005aa:	4613      	mov	r3, r2
 80005ac:	019b      	lsls	r3, r3, #6
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <convert_color_16_to_18+0x8c>)
 80005b2:	fb82 1203 	smull	r1, r2, r2, r3
 80005b6:	441a      	add	r2, r3
 80005b8:	1112      	asrs	r2, r2, #4
 80005ba:	17db      	asrs	r3, r3, #31
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	7bfa      	ldrb	r2, [r7, #15]
 80005c8:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	7bba      	ldrb	r2, [r7, #14]
 80005d0:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	3302      	adds	r3, #2
 80005d6:	7b7a      	ldrb	r2, [r7, #13]
 80005d8:	701a      	strb	r2, [r3, #0]

}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	84210843 	.word	0x84210843

080005ec <write_color>:


void write_color(uint16_t color)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 80005f6:	f107 020c 	add.w	r2, r7, #12
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffac 	bl	800055c <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000604:	f107 010c 	add.w	r1, r7, #12
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	2203      	movs	r2, #3
 800060e:	4803      	ldr	r0, [pc, #12]	@ (800061c <write_color+0x30>)
 8000610:	f005 fae1 	bl	8005bd6 <HAL_SPI_Transmit>


}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000180 	.word	0x20000180

08000620 <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b085      	sub	sp, #20
 8000624:	af02      	add	r7, sp, #8
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
 800062a:	460b      	mov	r3, r1
 800062c:	80bb      	strh	r3, [r7, #4]
 800062e:	4613      	mov	r3, r2
 8000630:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 8000632:	88bb      	ldrh	r3, [r7, #4]
 8000634:	88fa      	ldrh	r2, [r7, #6]
 8000636:	88b9      	ldrh	r1, [r7, #4]
 8000638:	88f8      	ldrh	r0, [r7, #6]
 800063a:	2477      	movs	r4, #119	@ 0x77
 800063c:	9400      	str	r4, [sp, #0]
 800063e:	f000 ff65 	bl	800150c <set_adress_window>

	DC_DATA();
 8000642:	2201      	movs	r2, #1
 8000644:	2108      	movs	r1, #8
 8000646:	480a      	ldr	r0, [pc, #40]	@ (8000670 <draw_pixel+0x50>)
 8000648:	f003 fdf2 	bl	8004230 <HAL_GPIO_WritePin>
	CS_A();
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4807      	ldr	r0, [pc, #28]	@ (8000670 <draw_pixel+0x50>)
 8000652:	f003 fded 	bl	8004230 <HAL_GPIO_WritePin>

	write_color(color);
 8000656:	887b      	ldrh	r3, [r7, #2]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffc7 	bl	80005ec <write_color>

	CS_D();
 800065e:	2201      	movs	r2, #1
 8000660:	2110      	movs	r1, #16
 8000662:	4803      	ldr	r0, [pc, #12]	@ (8000670 <draw_pixel+0x50>)
 8000664:	f003 fde4 	bl	8004230 <HAL_GPIO_WritePin>

}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	40020c00 	.word	0x40020c00

08000674 <fill_screen1>:




void fill_screen1(uint16_t color)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 800067e:	f107 020c 	add.w	r2, r7, #12
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff68 	bl	800055c <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 800068c:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8000690:	f00b f860 	bl	800b754 <malloc>
 8000694:	4603      	mov	r3, r0
 8000696:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000698:	2377      	movs	r3, #119	@ 0x77
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	f240 13df 	movw	r3, #479	@ 0x1df
 80006a0:	f240 123f 	movw	r2, #319	@ 0x13f
 80006a4:	2100      	movs	r1, #0
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 ff30 	bl	800150c <set_adress_window>

	DC_DATA();
 80006ac:	2201      	movs	r2, #1
 80006ae:	2108      	movs	r1, #8
 80006b0:	481e      	ldr	r0, [pc, #120]	@ (800072c <fill_screen1+0xb8>)
 80006b2:	f003 fdbd 	bl	8004230 <HAL_GPIO_WritePin>
	CS_A();
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	481c      	ldr	r0, [pc, #112]	@ (800072c <fill_screen1+0xb8>)
 80006bc:	f003 fdb8 	bl	8004230 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	82fb      	strh	r3, [r7, #22]
 80006c4:	e00f      	b.n	80006e6 <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 80006c6:	8afa      	ldrh	r2, [r7, #22]
 80006c8:	4613      	mov	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	4413      	add	r3, r2
 80006d2:	461a      	mov	r2, r3
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	8819      	ldrh	r1, [r3, #0]
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	8011      	strh	r1, [r2, #0]
 80006de:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80006e0:	8afb      	ldrh	r3, [r7, #22]
 80006e2:	3301      	adds	r3, #1
 80006e4:	82fb      	strh	r3, [r7, #22]
 80006e6:	8afb      	ldrh	r3, [r7, #22]
 80006e8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006ec:	d3eb      	bcc.n	80006c6 <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	82bb      	strh	r3, [r7, #20]
 80006f2:	e00a      	b.n	800070a <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80006fc:	6939      	ldr	r1, [r7, #16]
 80006fe:	480c      	ldr	r0, [pc, #48]	@ (8000730 <fill_screen1+0xbc>)
 8000700:	f005 fa69 	bl	8005bd6 <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 8000704:	8abb      	ldrh	r3, [r7, #20]
 8000706:	3301      	adds	r3, #1
 8000708:	82bb      	strh	r3, [r7, #20]
 800070a:	8abb      	ldrh	r3, [r7, #20]
 800070c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000710:	d3f0      	bcc.n	80006f4 <fill_screen1+0x80>

	}

	free(line);
 8000712:	6938      	ldr	r0, [r7, #16]
 8000714:	f00b f826 	bl	800b764 <free>

	CS_D();
 8000718:	2201      	movs	r2, #1
 800071a:	2110      	movs	r1, #16
 800071c:	4803      	ldr	r0, [pc, #12]	@ (800072c <fill_screen1+0xb8>)
 800071e:	f003 fd87 	bl	8004230 <HAL_GPIO_WritePin>

}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40020c00 	.word	0x40020c00
 8000730:	20000180 	.word	0x20000180

08000734 <fill_screen2>:


void fill_screen2(uint16_t color)
{
 8000734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000738:	b08f      	sub	sp, #60	@ 0x3c
 800073a:	af02      	add	r7, sp, #8
 800073c:	4603      	mov	r3, r0
 800073e:	80fb      	strh	r3, [r7, #6]
 8000740:	466b      	mov	r3, sp
 8000742:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000744:	2377      	movs	r3, #119	@ 0x77
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	f240 13df 	movw	r3, #479	@ 0x1df
 800074c:	f240 123f 	movw	r2, #319	@ 0x13f
 8000750:	2100      	movs	r1, #0
 8000752:	2000      	movs	r0, #0
 8000754:	f000 feda 	bl	800150c <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 8000758:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 800075e:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8000762:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	0adb      	lsrs	r3, r3, #11
 8000768:	b29b      	uxth	r3, r3
 800076a:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	115b      	asrs	r3, r3, #5
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000776:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8000782:	7ffa      	ldrb	r2, [r7, #31]
 8000784:	4613      	mov	r3, r2
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	4a4f      	ldr	r2, [pc, #316]	@ (80008c8 <fill_screen2+0x194>)
 800078c:	fb82 1203 	smull	r1, r2, r2, r3
 8000790:	441a      	add	r2, r3
 8000792:	1112      	asrs	r2, r2, #4
 8000794:	17db      	asrs	r3, r3, #31
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 800079a:	7fba      	ldrb	r2, [r7, #30]
 800079c:	4613      	mov	r3, r2
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	1a9b      	subs	r3, r3, r2
 80007a2:	4a4a      	ldr	r2, [pc, #296]	@ (80008cc <fill_screen2+0x198>)
 80007a4:	fb82 1203 	smull	r1, r2, r2, r3
 80007a8:	441a      	add	r2, r3
 80007aa:	1152      	asrs	r2, r2, #5
 80007ac:	17db      	asrs	r3, r3, #31
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 80007b2:	7f7a      	ldrb	r2, [r7, #29]
 80007b4:	4613      	mov	r3, r2
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	1a9b      	subs	r3, r3, r2
 80007ba:	4a43      	ldr	r2, [pc, #268]	@ (80008c8 <fill_screen2+0x194>)
 80007bc:	fb82 1203 	smull	r1, r2, r2, r3
 80007c0:	441a      	add	r2, r3
 80007c2:	1112      	asrs	r2, r2, #4
 80007c4:	17db      	asrs	r3, r3, #31
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 80007ca:	2201      	movs	r2, #1
 80007cc:	2108      	movs	r1, #8
 80007ce:	4840      	ldr	r0, [pc, #256]	@ (80008d0 <fill_screen2+0x19c>)
 80007d0:	f003 fd2e 	bl	8004230 <HAL_GPIO_WritePin>
	CS_A();
 80007d4:	2200      	movs	r2, #0
 80007d6:	2110      	movs	r1, #16
 80007d8:	483d      	ldr	r0, [pc, #244]	@ (80008d0 <fill_screen2+0x19c>)
 80007da:	f003 fd29 	bl	8004230 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80007de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007e0:	460b      	mov	r3, r1
 80007e2:	3b01      	subs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	2300      	movs	r3, #0
 80007e8:	4688      	mov	r8, r1
 80007ea:	4699      	mov	r9, r3
 80007ec:	f04f 0200 	mov.w	r2, #0
 80007f0:	f04f 0300 	mov.w	r3, #0
 80007f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000800:	2300      	movs	r3, #0
 8000802:	460c      	mov	r4, r1
 8000804:	461d      	mov	r5, r3
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	00eb      	lsls	r3, r5, #3
 8000810:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000814:	00e2      	lsls	r2, r4, #3
 8000816:	1dcb      	adds	r3, r1, #7
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	ebad 0d03 	sub.w	sp, sp, r3
 8000820:	ab02      	add	r3, sp, #8
 8000822:	3300      	adds	r3, #0
 8000824:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800082a:	e011      	b.n	8000850 <fill_screen2+0x11c>
	{
		frame[j] = r;
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000830:	4413      	add	r3, r2
 8000832:	7ffa      	ldrb	r2, [r7, #31]
 8000834:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 8000836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000838:	3301      	adds	r3, #1
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	7fb9      	ldrb	r1, [r7, #30]
 800083e:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8000840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000842:	3302      	adds	r3, #2
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	7f79      	ldrb	r1, [r7, #29]
 8000848:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 800084a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800084c:	3303      	adds	r3, #3
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	429a      	cmp	r2, r3
 8000856:	d3e9      	bcc.n	800082c <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 8000858:	6a3a      	ldr	r2, [r7, #32]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000866:	fbb2 f3f3 	udiv	r3, r2, r3
 800086a:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 800086c:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <fill_screen2+0x1a0>)
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000876:	e012      	b.n	800089e <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 8000878:	bf00      	nop
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <fill_screen2+0x1a0>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0fa      	beq.n	800087a <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <fill_screen2+0x1a0>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 800088a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088c:	b29b      	uxth	r3, r3
 800088e:	461a      	mov	r2, r3
 8000890:	6979      	ldr	r1, [r7, #20]
 8000892:	4811      	ldr	r0, [pc, #68]	@ (80008d8 <fill_screen2+0x1a4>)
 8000894:	f005 fda6 	bl	80063e4 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 8000898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089a:	3301      	adds	r3, #1
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800089e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d3e8      	bcc.n	8000878 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 80008a6:	bf00      	nop
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <fill_screen2+0x1a0>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0fa      	beq.n	80008a8 <fill_screen2+0x174>
	CS_D();
 80008b2:	2201      	movs	r2, #1
 80008b4:	2110      	movs	r1, #16
 80008b6:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <fill_screen2+0x19c>)
 80008b8:	f003 fcba 	bl	8004230 <HAL_GPIO_WritePin>
 80008bc:	46b5      	mov	sp, r6
}
 80008be:	bf00      	nop
 80008c0:	3734      	adds	r7, #52	@ 0x34
 80008c2:	46bd      	mov	sp, r7
 80008c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008c8:	84210843 	.word	0x84210843
 80008cc:	82082083 	.word	0x82082083
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	20000328 	.word	0x20000328
 80008d8:	20000180 	.word	0x20000180

080008dc <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b089      	sub	sp, #36	@ 0x24
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	4623      	mov	r3, r4
 80008ec:	80fb      	strh	r3, [r7, #6]
 80008ee:	4603      	mov	r3, r0
 80008f0:	80bb      	strh	r3, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	70fb      	strb	r3, [r7, #3]
 80008f6:	4613      	mov	r3, r2
 80008f8:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 80008fa:	4b3a      	ldr	r3, [pc, #232]	@ (80009e4 <print_character+0x108>)
 80008fc:	889a      	ldrh	r2, [r3, #4]
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	4413      	add	r3, r2
 8000902:	b29b      	uxth	r3, r3
 8000904:	3b01      	subs	r3, #1
 8000906:	b29c      	uxth	r4, r3
 8000908:	4b36      	ldr	r3, [pc, #216]	@ (80009e4 <print_character+0x108>)
 800090a:	88da      	ldrh	r2, [r3, #6]
 800090c:	88bb      	ldrh	r3, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	3b01      	subs	r3, #1
 8000914:	b29b      	uxth	r3, r3
 8000916:	88b9      	ldrh	r1, [r7, #4]
 8000918:	88f8      	ldrh	r0, [r7, #6]
 800091a:	2277      	movs	r2, #119	@ 0x77
 800091c:	9200      	str	r2, [sp, #0]
 800091e:	4622      	mov	r2, r4
 8000920:	f000 fdf4 	bl	800150c <set_adress_window>

	uint16_t mask = 0x8000;
 8000924:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000928:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 800092e:	f107 020c 	add.w	r2, r7, #12
 8000932:	883b      	ldrh	r3, [r7, #0]
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fe10 	bl	800055c <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 800093c:	f107 0208 	add.w	r2, r7, #8
 8000940:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fe09 	bl	800055c <convert_color_16_to_18>


	DC_DATA();
 800094a:	2201      	movs	r2, #1
 800094c:	2108      	movs	r1, #8
 800094e:	4826      	ldr	r0, [pc, #152]	@ (80009e8 <print_character+0x10c>)
 8000950:	f003 fc6e 	bl	8004230 <HAL_GPIO_WritePin>
	CS_A();
 8000954:	2200      	movs	r2, #0
 8000956:	2110      	movs	r1, #16
 8000958:	4823      	ldr	r0, [pc, #140]	@ (80009e8 <print_character+0x10c>)
 800095a:	f003 fc69 	bl	8004230 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 800095e:	2300      	movs	r3, #0
 8000960:	75fb      	strb	r3, [r7, #23]
 8000962:	e030      	b.n	80009c6 <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <print_character+0x108>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	3b20      	subs	r3, #32
 800096c:	491d      	ldr	r1, [pc, #116]	@ (80009e4 <print_character+0x108>)
 800096e:	88c9      	ldrh	r1, [r1, #6]
 8000970:	fb03 f101 	mul.w	r1, r3, r1
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	440b      	add	r3, r1
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000980:	2300      	movs	r3, #0
 8000982:	75bb      	strb	r3, [r7, #22]
 8000984:	e016      	b.n	80009b4 <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 8000986:	8a7a      	ldrh	r2, [r7, #18]
 8000988:	7dbb      	ldrb	r3, [r7, #22]
 800098a:	409a      	lsls	r2, r3
 800098c:	8abb      	ldrh	r3, [r7, #20]
 800098e:	4013      	ands	r3, r2
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2103      	movs	r1, #3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fc1e 	bl	80011dc <LCD_send_data_multi>
 80009a0:	e005      	b.n	80009ae <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2103      	movs	r1, #3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fc17 	bl	80011dc <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 80009ae:	7dbb      	ldrb	r3, [r7, #22]
 80009b0:	3301      	adds	r3, #1
 80009b2:	75bb      	strb	r3, [r7, #22]
 80009b4:	7dbb      	ldrb	r3, [r7, #22]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <print_character+0x108>)
 80009ba:	889b      	ldrh	r3, [r3, #4]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d3e2      	bcc.n	8000986 <print_character+0xaa>
	for(i=0; i<font.height; i++)
 80009c0:	7dfb      	ldrb	r3, [r7, #23]
 80009c2:	3301      	adds	r3, #1
 80009c4:	75fb      	strb	r3, [r7, #23]
 80009c6:	7dfb      	ldrb	r3, [r7, #23]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <print_character+0x108>)
 80009cc:	88db      	ldrh	r3, [r3, #6]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d3c8      	bcc.n	8000964 <print_character+0x88>
			}
		}
	}

	CS_D();
 80009d2:	2201      	movs	r2, #1
 80009d4:	2110      	movs	r1, #16
 80009d6:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <print_character+0x10c>)
 80009d8:	f003 fc2a 	bl	8004230 <HAL_GPIO_WritePin>

}
 80009dc:	bf00      	nop
 80009de:	371c      	adds	r7, #28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	40020c00 	.word	0x40020c00

080009ec <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b089      	sub	sp, #36	@ 0x24
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	60ba      	str	r2, [r7, #8]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4603      	mov	r3, r0
 80009f8:	81fb      	strh	r3, [r7, #14]
 80009fa:	460b      	mov	r3, r1
 80009fc:	81bb      	strh	r3, [r7, #12]
 80009fe:	4613      	mov	r3, r2
 8000a00:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 8000a06:	e027      	b.n	8000a58 <print_string+0x6c>
	{
		if(x + font.width > 320)
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	4a19      	ldr	r2, [pc, #100]	@ (8000a70 <print_string+0x84>)
 8000a0c:	8892      	ldrh	r2, [r2, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a14:	dd07      	ble.n	8000a26 <print_string+0x3a>
		{
			x = font.width;
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <print_string+0x84>)
 8000a18:	889b      	ldrh	r3, [r3, #4]
 8000a1a:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <print_string+0x84>)
 8000a1e:	88da      	ldrh	r2, [r3, #6]
 8000a20:	89bb      	ldrh	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 8000a26:	89bb      	ldrh	r3, [r7, #12]
 8000a28:	4a11      	ldr	r2, [pc, #68]	@ (8000a70 <print_string+0x84>)
 8000a2a:	88d2      	ldrh	r2, [r2, #6]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a32:	dc18      	bgt.n	8000a66 <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000a3a:	89b9      	ldrh	r1, [r7, #12]
 8000a3c:	89f8      	ldrh	r0, [r7, #14]
 8000a3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	4623      	mov	r3, r4
 8000a44:	f7ff ff4a 	bl	80008dc <print_character>
		string++;
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <print_string+0x84>)
 8000a50:	889a      	ldrh	r2, [r3, #4]
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	4413      	add	r3, r2
 8000a56:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3d1      	bcc.n	8000a08 <print_string+0x1c>
 8000a64:	e000      	b.n	8000a68 <print_string+0x7c>
			return;
 8000a66:	bf00      	nop
	}

}
 8000a68:	371c      	adds	r7, #28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd90      	pop	{r4, r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000000 	.word	0x20000000

08000a74 <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4608      	mov	r0, r1
 8000a7e:	4611      	mov	r1, r2
 8000a80:	461a      	mov	r2, r3
 8000a82:	4623      	mov	r3, r4
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	4603      	mov	r3, r0
 8000a88:	80bb      	strh	r3, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	807b      	strh	r3, [r7, #2]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000a92:	88fa      	ldrh	r2, [r7, #6]
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	4413      	add	r3, r2
 8000a98:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	88bb      	ldrh	r3, [r7, #4]
 8000aa2:	88b9      	ldrh	r1, [r7, #4]
 8000aa4:	88f8      	ldrh	r0, [r7, #6]
 8000aa6:	2477      	movs	r4, #119	@ 0x77
 8000aa8:	9400      	str	r4, [sp, #0]
 8000aaa:	f000 fd2f 	bl	800150c <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000aae:	f107 0208 	add.w	r2, r7, #8
 8000ab2:	883b      	ldrh	r3, [r7, #0]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fd50 	bl	800055c <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	81fb      	strh	r3, [r7, #14]
 8000ac0:	e008      	b.n	8000ad4 <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2103      	movs	r1, #3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fb87 	bl	80011dc <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000ace:	89fb      	ldrh	r3, [r7, #14]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	81fb      	strh	r3, [r7, #14]
 8000ad4:	89fa      	ldrh	r2, [r7, #14]
 8000ad6:	8879      	ldrh	r1, [r7, #2]
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	1acb      	subs	r3, r1, r3
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbf0      	blt.n	8000ac2 <draw_horizontal_line+0x4e>
	}


}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}

08000aea <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000aea:	b590      	push	{r4, r7, lr}
 8000aec:	b087      	sub	sp, #28
 8000aee:	af02      	add	r7, sp, #8
 8000af0:	4604      	mov	r4, r0
 8000af2:	4608      	mov	r0, r1
 8000af4:	4611      	mov	r1, r2
 8000af6:	461a      	mov	r2, r3
 8000af8:	4623      	mov	r3, r4
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	4603      	mov	r3, r0
 8000afe:	80bb      	strh	r3, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
 8000b04:	4613      	mov	r3, r2
 8000b06:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000b08:	88ba      	ldrh	r2, [r7, #4]
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000b10:	887b      	ldrh	r3, [r7, #2]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	88fa      	ldrh	r2, [r7, #6]
 8000b18:	88b9      	ldrh	r1, [r7, #4]
 8000b1a:	88f8      	ldrh	r0, [r7, #6]
 8000b1c:	2477      	movs	r4, #119	@ 0x77
 8000b1e:	9400      	str	r4, [sp, #0]
 8000b20:	f000 fcf4 	bl	800150c <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000b24:	f107 0208 	add.w	r2, r7, #8
 8000b28:	883b      	ldrh	r3, [r7, #0]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fd15 	bl	800055c <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	81fb      	strh	r3, [r7, #14]
 8000b36:	e008      	b.n	8000b4a <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fb4c 	bl	80011dc <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000b44:	89fb      	ldrh	r3, [r7, #14]
 8000b46:	3301      	adds	r3, #1
 8000b48:	81fb      	strh	r3, [r7, #14]
 8000b4a:	89fa      	ldrh	r2, [r7, #14]
 8000b4c:	8879      	ldrh	r1, [r7, #2]
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	429a      	cmp	r2, r3
 8000b54:	dbf0      	blt.n	8000b38 <draw_vertical_line+0x4e>
	}


}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd90      	pop	{r4, r7, pc}

08000b60 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b089      	sub	sp, #36	@ 0x24
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	4604      	mov	r4, r0
 8000b68:	4608      	mov	r0, r1
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4623      	mov	r3, r4
 8000b70:	80fb      	strh	r3, [r7, #6]
 8000b72:	4603      	mov	r3, r0
 8000b74:	80bb      	strh	r3, [r7, #4]
 8000b76:	460b      	mov	r3, r1
 8000b78:	807b      	strh	r3, [r7, #2]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	883b      	ldrh	r3, [r7, #0]
 8000b82:	fb12 f303 	smulbb	r3, r2, r3
 8000b86:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8000b88:	f107 020c 	add.w	r2, r7, #12
 8000b8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fce3 	bl	800055c <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8000b96:	8aba      	ldrh	r2, [r7, #20]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00a fdd8 	bl	800b754 <malloc>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	82fb      	strh	r3, [r7, #22]
 8000bac:	e00f      	b.n	8000bce <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000bae:	8afa      	ldrh	r2, [r7, #22]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4413      	add	r3, r2
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	8819      	ldrh	r1, [r3, #0]
 8000bc2:	789b      	ldrb	r3, [r3, #2]
 8000bc4:	8011      	strh	r1, [r2, #0]
 8000bc6:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8000bc8:	8afb      	ldrh	r3, [r7, #22]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	82fb      	strh	r3, [r7, #22]
 8000bce:	8afa      	ldrh	r2, [r7, #22]
 8000bd0:	8abb      	ldrh	r3, [r7, #20]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d3eb      	bcc.n	8000bae <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8000bd6:	88fa      	ldrh	r2, [r7, #6]
 8000bd8:	887b      	ldrh	r3, [r7, #2]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b29c      	uxth	r4, r3
 8000be2:	88ba      	ldrh	r2, [r7, #4]
 8000be4:	883b      	ldrh	r3, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	3b01      	subs	r3, #1
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	88b9      	ldrh	r1, [r7, #4]
 8000bf0:	88f8      	ldrh	r0, [r7, #6]
 8000bf2:	2277      	movs	r2, #119	@ 0x77
 8000bf4:	9200      	str	r2, [sp, #0]
 8000bf6:	4622      	mov	r2, r4
 8000bf8:	f000 fc88 	bl	800150c <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000bfc:	8aba      	ldrh	r2, [r7, #20]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	4619      	mov	r1, r3
 8000c06:	6938      	ldr	r0, [r7, #16]
 8000c08:	f000 fae8 	bl	80011dc <LCD_send_data_multi>

	free(data);
 8000c0c:	6938      	ldr	r0, [r7, #16]
 8000c0e:	f00a fda9 	bl	800b764 <free>

}
 8000c12:	bf00      	nop
 8000c14:	371c      	adds	r7, #28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
	...

08000c1c <draw_entity>:


void draw_entity(ENTITY *entity, char *filePathName)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b089      	sub	sp, #36	@ 0x24
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]

	if((entity->id != 0) || (filePathName==NULL))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <draw_entity+0x1c>
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d163      	bne.n	8000d00 <draw_entity+0xe4>
	{
		/*Avem imagine monocolor sub 32x32 -> imagine nu se afla pe cardul SD!*/

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	fb12 f303 	smulbb	r3, r2, r3
 8000c4c:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->color, pixel);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	899b      	ldrh	r3, [r3, #12]
 8000c52:	f107 020c 	add.w	r2, r7, #12
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fc7f 	bl	800055c <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8000c5e:	8aba      	ldrh	r2, [r7, #20]
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f00a fd74 	bl	800b754 <malloc>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8000c70:	2300      	movs	r3, #0
 8000c72:	82fb      	strh	r3, [r7, #22]
 8000c74:	e00f      	b.n	8000c96 <draw_entity+0x7a>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000c76:	8afa      	ldrh	r2, [r7, #22]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4413      	add	r3, r2
 8000c82:	461a      	mov	r2, r3
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	8819      	ldrh	r1, [r3, #0]
 8000c8a:	789b      	ldrb	r3, [r3, #2]
 8000c8c:	8011      	strh	r1, [r2, #0]
 8000c8e:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8000c90:	8afb      	ldrh	r3, [r7, #22]
 8000c92:	3301      	adds	r3, #1
 8000c94:	82fb      	strh	r3, [r7, #22]
 8000c96:	8afa      	ldrh	r2, [r7, #22]
 8000c98:	8abb      	ldrh	r3, [r7, #20]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d3eb      	bcc.n	8000c76 <draw_entity+0x5a>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ca4:	b298      	uxth	r0, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cac:	b299      	uxth	r1, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	b29c      	uxth	r4, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	2277      	movs	r2, #119	@ 0x77
 8000ce0:	9200      	str	r2, [sp, #0]
 8000ce2:	4622      	mov	r2, r4
 8000ce4:	f000 fc12 	bl	800150c <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000ce8:	8aba      	ldrh	r2, [r7, #20]
 8000cea:	4613      	mov	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6938      	ldr	r0, [r7, #16]
 8000cf4:	f000 fa72 	bl	80011dc <LCD_send_data_multi>

		free(data);
 8000cf8:	6938      	ldr	r0, [r7, #16]
 8000cfa:	f00a fd33 	bl	800b764 <free>
	{
 8000cfe:	e084      	b.n	8000e0a <draw_entity+0x1ee>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 8000d00:	2300      	movs	r3, #0
 8000d02:	817b      	strh	r3, [r7, #10]

		read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000d04:	f107 030f 	add.w	r3, r7, #15
 8000d08:	f107 020a 	add.w	r2, r7, #10
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	6838      	ldr	r0, [r7, #0]
 8000d10:	f001 fc7e 	bl	8002610 <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d1a:	b298      	uxth	r0, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d22:	b299      	uxth	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	b29c      	uxth	r4, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	3b01      	subs	r3, #1
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	2277      	movs	r2, #119	@ 0x77
 8000d56:	9200      	str	r2, [sp, #0]
 8000d58:	4622      	mov	r2, r4
 8000d5a:	f000 fbd7 	bl	800150c <set_adress_window>

		DC_DATA();
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2108      	movs	r1, #8
 8000d62:	482b      	ldr	r0, [pc, #172]	@ (8000e10 <draw_entity+0x1f4>)
 8000d64:	f003 fa64 	bl	8004230 <HAL_GPIO_WritePin>
		CS_A();
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4828      	ldr	r0, [pc, #160]	@ (8000e10 <draw_entity+0x1f4>)
 8000d6e:	f003 fa5f 	bl	8004230 <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 8000d72:	897b      	ldrh	r3, [r7, #10]
 8000d74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000d78:	d20c      	bcs.n	8000d94 <draw_entity+0x178>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->data, byteNr);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	897a      	ldrh	r2, [r7, #10]
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fa2a 	bl	80011dc <LCD_send_data_multi>
			free(entity->data);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f00a fce9 	bl	800b764 <free>
 8000d92:	e03a      	b.n	8000e0a <draw_entity+0x1ee>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <draw_entity+0x1f8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	897a      	ldrh	r2, [r7, #10]
 8000da0:	4619      	mov	r1, r3
 8000da2:	481d      	ldr	r0, [pc, #116]	@ (8000e18 <draw_entity+0x1fc>)
 8000da4:	f005 fb1e 	bl	80063e4 <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d11c      	bne.n	8000de8 <draw_entity+0x1cc>
				{
					break;
				}

				read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000dae:	f107 030f 	add.w	r3, r7, #15
 8000db2:	f107 020a 	add.w	r2, r7, #10
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f001 fc29 	bl	8002610 <read_image_file>

				while(flagDmaSpiTx == 0);
 8000dbe:	bf00      	nop
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <draw_entity+0x1f8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0fa      	beq.n	8000dc0 <draw_entity+0x1a4>
				flagDmaSpiTx = 0;
 8000dca:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <draw_entity+0x1f8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	897a      	ldrh	r2, [r7, #10]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480f      	ldr	r0, [pc, #60]	@ (8000e18 <draw_entity+0x1fc>)
 8000dda:	f005 fb03 	bl	80063e4 <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8000dde:	897b      	ldrh	r3, [r7, #10]
 8000de0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000de4:	d2e0      	bcs.n	8000da8 <draw_entity+0x18c>
 8000de6:	e000      	b.n	8000dea <draw_entity+0x1ce>
					break;
 8000de8:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8000dea:	bf00      	nop
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <draw_entity+0x1f8>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0fa      	beq.n	8000dec <draw_entity+0x1d0>
		free(entity->data);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00a fcb2 	bl	800b764 <free>
		CS_D();
 8000e00:	2201      	movs	r2, #1
 8000e02:	2110      	movs	r1, #16
 8000e04:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <draw_entity+0x1f4>)
 8000e06:	f003 fa13 	bl	8004230 <HAL_GPIO_WritePin>

	}


}
 8000e0a:	371c      	adds	r7, #28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	40020c00 	.word	0x40020c00
 8000e14:	20000328 	.word	0x20000328
 8000e18:	20000180 	.word	0x20000180

08000e1c <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b08b      	sub	sp, #44	@ 0x2c
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	817b      	strh	r3, [r7, #10]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	813b      	strh	r3, [r7, #8]
 8000e32:	4613      	mov	r3, r2
 8000e34:	71fb      	strb	r3, [r7, #7]
	 * de afisat
	 * Momentan de rezumam la un exemplu simplu pentru a demonstra functionalitatea
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 8000e36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f2c0 80e4 	blt.w	8001008 <translation_entity+0x1ec>
 8000e40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e44:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e48:	f300 80de 	bgt.w	8001008 <translation_entity+0x1ec>
 8000e4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f2c0 80d9 	blt.w	8001008 <translation_entity+0x1ec>
 8000e56:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e5a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000e5e:	f300 80d3 	bgt.w	8001008 <translation_entity+0x1ec>

		return;
	}


	ENTITY temp = *entity;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f107 0410 	add.w	r4, r7, #16
 8000e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	entity->x0 = x;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	897a      	ldrh	r2, [r7, #10]
 8000e72:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	893a      	ldrh	r2, [r7, #8]
 8000e78:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8000e7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e7e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d157      	bne.n	8000f36 <translation_entity+0x11a>
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d054      	beq.n	8000f36 <translation_entity+0x11a>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8000e8c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e9a:	440b      	add	r3, r1
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	da1d      	bge.n	8000edc <translation_entity+0xc0>
 8000ea0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ea4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dd17      	ble.n	8000edc <translation_entity+0xc0>
		{
			/*Pentru cazul deplasarii pe +x*/
			draw_entity(entity, NULL);
 8000eac:	2100      	movs	r1, #0
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f7ff feb4 	bl	8000c1c <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, 0xFFFF); /*Culoare background*/
 8000eb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000eb8:	b298      	uxth	r0, r3
 8000eba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ebe:	b299      	uxth	r1, r3
 8000ec0:	897a      	ldrh	r2, [r7, #10]
 8000ec2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000ed6:	9400      	str	r4, [sp, #0]
 8000ed8:	f7ff fe42 	bl	8000b60 <draw_rectangle>
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000edc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ee0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	f280 8091 	bge.w	800100c <translation_entity+0x1f0>
 8000eea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000eee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	f340 8087 	ble.w	800100c <translation_entity+0x1f0>
		{
			/*Pentru cazul deplasarii pe -x*/
			draw_entity(entity, NULL);
 8000efe:	2100      	movs	r1, #0
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f7ff fe8b 	bl	8000c1c <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, 0xFFFF); /*Culoare background*/
 8000f06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	897b      	ldrh	r3, [r7, #10]
 8000f0e:	4413      	add	r3, r2
 8000f10:	b298      	uxth	r0, r3
 8000f12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f16:	b299      	uxth	r1, r3
 8000f18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	897b      	ldrh	r3, [r7, #10]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000f2e:	9400      	str	r4, [sp, #0]
 8000f30:	f7ff fe16 	bl	8000b60 <draw_rectangle>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000f34:	e06a      	b.n	800100c <translation_entity+0x1f0>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8000f36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f3a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d157      	bne.n	8000ff2 <translation_entity+0x1d6>
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d054      	beq.n	8000ff2 <translation_entity+0x1d6>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8000f48:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f56:	440b      	add	r3, r1
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	da1e      	bge.n	8000f9a <translation_entity+0x17e>
 8000f5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f60:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dd18      	ble.n	8000f9a <translation_entity+0x17e>
			{
				/*Pentru cazul deplasarii pe +y*/
				draw_entity(entity, NULL);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff fe56 	bl	8000c1c <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, 0xFFFF);
 8000f70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f74:	b298      	uxth	r0, r3
 8000f76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f7a:	b299      	uxth	r1, r3
 8000f7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f80:	b29c      	uxth	r4, r3
 8000f82:	893a      	ldrh	r2, [r7, #8]
 8000f84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f92:	9200      	str	r2, [sp, #0]
 8000f94:	4622      	mov	r2, r4
 8000f96:	f7ff fde3 	bl	8000b60 <draw_rectangle>
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8000f9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f9e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	da34      	bge.n	8001010 <translation_entity+0x1f4>
 8000fa6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000faa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000fae:	4413      	add	r3, r2
 8000fb0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	dd2b      	ble.n	8001010 <translation_entity+0x1f4>
			{
				/*Pentru cazul deplasarii pe -y*/
				draw_entity(entity, NULL);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f7ff fe2e 	bl	8000c1c <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, 0xFFFF);
 8000fc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fc4:	b298      	uxth	r0, r3
 8000fc6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	893b      	ldrh	r3, [r7, #8]
 8000fce:	4413      	add	r3, r2
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fd6:	b29c      	uxth	r4, r3
 8000fd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	893b      	ldrh	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fe8:	9200      	str	r2, [sp, #0]
 8000fea:	4622      	mov	r2, r4
 8000fec:	f7ff fdb8 	bl	8000b60 <draw_rectangle>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8000ff0:	e00e      	b.n	8001010 <translation_entity+0x1f4>

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/

			draw_entity(entity, NULL);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff fe11 	bl	8000c1c <draw_entity>
			draw_entity(&temp, NULL);
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fe0b 	bl	8000c1c <draw_entity>
 8001006:	e004      	b.n	8001012 <translation_entity+0x1f6>
		return;
 8001008:	bf00      	nop
 800100a:	e002      	b.n	8001012 <translation_entity+0x1f6>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 800100c:	bf00      	nop
 800100e:	e000      	b.n	8001012 <translation_entity+0x1f6>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001010:	bf00      	nop
		}


}
 8001012:	3724      	adds	r7, #36	@ 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd90      	pop	{r4, r7, pc}

08001018 <translation_test>:


void translation_test(ENTITY *entity, uint8_t step, uint16_t delay)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	803b      	strh	r3, [r7, #0]


	while(1)
	{
		while((entity->x0 + entity->x1) < LCD_Width)
 8001028:	e013      	b.n	8001052 <translation_test+0x3a>
		{
			translation_entity(entity, entity->x0+step, entity->y0, 1);//, color);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001030:	b29a      	uxth	r2, r3
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	b29b      	uxth	r3, r3
 8001036:	4413      	add	r3, r2
 8001038:	b29b      	uxth	r3, r3
 800103a:	b219      	sxth	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001042:	2301      	movs	r3, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fee9 	bl	8000e1c <translation_entity>
			HAL_Delay(delay);
 800104a:	883b      	ldrh	r3, [r7, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f002 f83f 	bl	80030d0 <HAL_Delay>
		while((entity->x0 + entity->x1) < LCD_Width)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001060:	4413      	add	r3, r2
 8001062:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001066:	dbe0      	blt.n	800102a <translation_test+0x12>
		}

		draw_entity(entity, NULL);
 8001068:	2100      	movs	r1, #0
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff fdd6 	bl	8000c1c <draw_entity>
		entity->x0 = LCD_Width - entity->x1;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001076:	b29b      	uxth	r3, r3
 8001078:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800107c:	b29b      	uxth	r3, r3
 800107e:	b21a      	sxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	805a      	strh	r2, [r3, #2]

		while((entity->y0 + entity->y1) < LCD_Length)
 8001084:	e013      	b.n	80010ae <translation_test+0x96>
		{

			translation_entity(entity, entity->x0, entity->y0+step, 1);//, color);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4413      	add	r3, r2
 800109a:	b29b      	uxth	r3, r3
 800109c:	b21a      	sxth	r2, r3
 800109e:	2301      	movs	r3, #1
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff febb 	bl	8000e1c <translation_entity>
			HAL_Delay(delay);
 80010a6:	883b      	ldrh	r3, [r7, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 f811 	bl	80030d0 <HAL_Delay>
		while((entity->y0 + entity->y1) < LCD_Length)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010b4:	461a      	mov	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010bc:	4413      	add	r3, r2
 80010be:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80010c2:	dbe0      	blt.n	8001086 <translation_test+0x6e>
		}

		draw_entity(entity, NULL);
 80010c4:	2100      	movs	r1, #0
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fda8 	bl	8000c1c <draw_entity>
		entity->y0 = LCD_Length - entity->y1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 80010d8:	b29b      	uxth	r3, r3
 80010da:	b21a      	sxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	809a      	strh	r2, [r3, #4]

		while((entity->x0 - step) > 0)
 80010e0:	e013      	b.n	800110a <translation_test+0xf2>
		{
			translation_entity(entity, entity->x0-step, entity->y0, 1);//, color);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b219      	sxth	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80010fa:	2301      	movs	r3, #1
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff fe8d 	bl	8000e1c <translation_entity>
			HAL_Delay(delay);
 8001102:	883b      	ldrh	r3, [r7, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f001 ffe3 	bl	80030d0 <HAL_Delay>
		while((entity->x0 - step) > 0)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001110:	461a      	mov	r2, r3
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	dce3      	bgt.n	80010e2 <translation_test+0xca>
		}

		entity->color = 0xFFFF;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001120:	819a      	strh	r2, [r3, #12]
		draw_entity(entity, NULL);
 8001122:	2100      	movs	r1, #0
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fd79 	bl	8000c1c <draw_entity>
		entity->color = 0xF100;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001130:	819a      	strh	r2, [r3, #12]
		entity->x0 = 0;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	805a      	strh	r2, [r3, #2]

		while((entity->y0 - step) > 0)
 8001138:	e013      	b.n	8001162 <translation_test+0x14a>
		{
			translation_entity(entity, entity->x0, entity->y0-step, 1);//, color);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001146:	b29a      	uxth	r2, r3
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	b29b      	uxth	r3, r3
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	b21a      	sxth	r2, r3
 8001152:	2301      	movs	r3, #1
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fe61 	bl	8000e1c <translation_entity>
			HAL_Delay(delay);
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f001 ffb7 	bl	80030d0 <HAL_Delay>
		while((entity->y0 - step) > 0)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001168:	461a      	mov	r2, r3
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	dce3      	bgt.n	800113a <translation_test+0x122>
		}
		entity->color = 0xFFFF;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001178:	819a      	strh	r2, [r3, #12]
		draw_entity(entity, NULL);
 800117a:	2100      	movs	r1, #0
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fd4d 	bl	8000c1c <draw_entity>
		entity->color = 0xF100;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001188:	819a      	strh	r2, [r3, #12]
		entity->y0 = 0;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	809a      	strh	r2, [r3, #4]
		while((entity->x0 + entity->x1) < LCD_Width)
 8001190:	e75f      	b.n	8001052 <translation_test+0x3a>
	...

08001194 <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 800119e:	2200      	movs	r2, #0
 80011a0:	2108      	movs	r1, #8
 80011a2:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <LCD_send_command+0x40>)
 80011a4:	f003 f844 	bl	8004230 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 80011a8:	2200      	movs	r2, #0
 80011aa:	2110      	movs	r1, #16
 80011ac:	4809      	ldr	r0, [pc, #36]	@ (80011d4 <LCD_send_command+0x40>)
 80011ae:	f003 f83f 	bl	8004230 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 80011b2:	1df9      	adds	r1, r7, #7
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	2201      	movs	r2, #1
 80011ba:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <LCD_send_command+0x44>)
 80011bc:	f004 fd0b 	bl	8005bd6 <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 80011c0:	2201      	movs	r2, #1
 80011c2:	2110      	movs	r1, #16
 80011c4:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <LCD_send_command+0x40>)
 80011c6:	f003 f833 	bl	8004230 <HAL_GPIO_WritePin>


}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	20000180 	.word	0x20000180

080011dc <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 80011e6:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 80011ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011f0:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	fbb3 f2f2 	udiv	r2, r3, r2
 8001204:	6939      	ldr	r1, [r7, #16]
 8001206:	fb01 f202 	mul.w	r2, r1, r2
 800120a:	1a9b      	subs	r3, r3, r2
 800120c:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 800120e:	2201      	movs	r2, #1
 8001210:	2108      	movs	r1, #8
 8001212:	482a      	ldr	r0, [pc, #168]	@ (80012bc <LCD_send_data_multi+0xe0>)
 8001214:	f003 f80c 	bl	8004230 <HAL_GPIO_WritePin>
	CS_A();
 8001218:	2200      	movs	r2, #0
 800121a:	2110      	movs	r1, #16
 800121c:	4827      	ldr	r0, [pc, #156]	@ (80012bc <LCD_send_data_multi+0xe0>)
 800121e:	f003 f807 	bl	8004230 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	429a      	cmp	r2, r3
 8001228:	d821      	bhi.n	800126e <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 800122a:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <LCD_send_data_multi+0xe4>)
 800123a:	f005 f8d3 	bl	80063e4 <HAL_SPI_Transmit_DMA>
 800123e:	e02c      	b.n	800129a <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 8001240:	bf00      	nop
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0fa      	beq.n	8001242 <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 800124c:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	b29b      	uxth	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4819      	ldr	r0, [pc, #100]	@ (80012c0 <LCD_send_data_multi+0xe4>)
 800125c:	f005 f8c2 	bl	80063e4 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4413      	add	r3, r2
 8001266:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3b01      	subs	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e5      	bne.n	8001240 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00f      	beq.n	800129a <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 800127a:	bf00      	nop
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0fa      	beq.n	800127c <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	480a      	ldr	r0, [pc, #40]	@ (80012c0 <LCD_send_data_multi+0xe4>)
 8001296:	f005 f8a5 	bl	80063e4 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 800129a:	bf00      	nop
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0fa      	beq.n	800129c <LCD_send_data_multi+0xc0>
	CS_D();
 80012a6:	2201      	movs	r2, #1
 80012a8:	2110      	movs	r1, #16
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <LCD_send_data_multi+0xe0>)
 80012ac:	f002 ffc0 	bl	8004230 <HAL_GPIO_WritePin>

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000328 	.word	0x20000328
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	20000180 	.word	0x20000180

080012c4 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 80012ce:	2201      	movs	r2, #1
 80012d0:	2108      	movs	r1, #8
 80012d2:	480c      	ldr	r0, [pc, #48]	@ (8001304 <LCD_send_data+0x40>)
 80012d4:	f002 ffac 	bl	8004230 <HAL_GPIO_WritePin>
	CS_A();
 80012d8:	2200      	movs	r2, #0
 80012da:	2110      	movs	r1, #16
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <LCD_send_data+0x40>)
 80012de:	f002 ffa7 	bl	8004230 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 80012e2:	1df9      	adds	r1, r7, #7
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	2201      	movs	r2, #1
 80012ea:	4807      	ldr	r0, [pc, #28]	@ (8001308 <LCD_send_data+0x44>)
 80012ec:	f004 fc73 	bl	8005bd6 <HAL_SPI_Transmit>

	CS_D();
 80012f0:	2201      	movs	r2, #1
 80012f2:	2110      	movs	r1, #16
 80012f4:	4803      	ldr	r0, [pc, #12]	@ (8001304 <LCD_send_data+0x40>)
 80012f6:	f002 ff9b 	bl	8004230 <HAL_GPIO_WritePin>

}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020c00 	.word	0x40020c00
 8001308:	20000180 	.word	0x20000180

0800130c <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8001310:	2200      	movs	r2, #0
 8001312:	2140      	movs	r1, #64	@ 0x40
 8001314:	487c      	ldr	r0, [pc, #496]	@ (8001508 <ILI9488_driver_init+0x1fc>)
 8001316:	f002 ff8b 	bl	8004230 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800131a:	200a      	movs	r0, #10
 800131c:	f001 fed8 	bl	80030d0 <HAL_Delay>
	RST_D();
 8001320:	2201      	movs	r2, #1
 8001322:	2140      	movs	r1, #64	@ 0x40
 8001324:	4878      	ldr	r0, [pc, #480]	@ (8001508 <ILI9488_driver_init+0x1fc>)
 8001326:	f002 ff83 	bl	8004230 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff ff32 	bl	8001194 <LCD_send_command>
	HAL_Delay(150);
 8001330:	2096      	movs	r0, #150	@ 0x96
 8001332:	f001 fecd 	bl	80030d0 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 8001336:	2011      	movs	r0, #17
 8001338:	f7ff ff2c 	bl	8001194 <LCD_send_command>
	HAL_Delay(255);
 800133c:	20ff      	movs	r0, #255	@ 0xff
 800133e:	f001 fec7 	bl	80030d0 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8001342:	20e0      	movs	r0, #224	@ 0xe0
 8001344:	f7ff ff26 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff ffbb 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0C);
 800134e:	200c      	movs	r0, #12
 8001350:	f7ff ffb8 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x05);
 8001354:	2005      	movs	r0, #5
 8001356:	f7ff ffb5 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x04);
 800135a:	2004      	movs	r0, #4
 800135c:	f7ff ffb2 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0F);
 8001360:	200f      	movs	r0, #15
 8001362:	f7ff ffaf 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x06);
 8001366:	2006      	movs	r0, #6
 8001368:	f7ff ffac 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x3A);
 800136c:	203a      	movs	r0, #58	@ 0x3a
 800136e:	f7ff ffa9 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x56);
 8001372:	2056      	movs	r0, #86	@ 0x56
 8001374:	f7ff ffa6 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x4D);
 8001378:	204d      	movs	r0, #77	@ 0x4d
 800137a:	f7ff ffa3 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x03);
 800137e:	2003      	movs	r0, #3
 8001380:	f7ff ffa0 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0A);
 8001384:	200a      	movs	r0, #10
 8001386:	f7ff ff9d 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x06);
 800138a:	2006      	movs	r0, #6
 800138c:	f7ff ff9a 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x30);
 8001390:	2030      	movs	r0, #48	@ 0x30
 8001392:	f7ff ff97 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x3E);
 8001396:	203e      	movs	r0, #62	@ 0x3e
 8001398:	f7ff ff94 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0F);
 800139c:	200f      	movs	r0, #15
 800139e:	f7ff ff91 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 80013a2:	20e1      	movs	r0, #225	@ 0xe1
 80013a4:	f7ff fef6 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x00);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ff8b 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x13);
 80013ae:	2013      	movs	r0, #19
 80013b0:	f7ff ff88 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x18);
 80013b4:	2018      	movs	r0, #24
 80013b6:	f7ff ff85 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x01);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff ff82 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x11);
 80013c0:	2011      	movs	r0, #17
 80013c2:	f7ff ff7f 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x06);
 80013c6:	2006      	movs	r0, #6
 80013c8:	f7ff ff7c 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x38);
 80013cc:	2038      	movs	r0, #56	@ 0x38
 80013ce:	f7ff ff79 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x34);
 80013d2:	2034      	movs	r0, #52	@ 0x34
 80013d4:	f7ff ff76 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x4D);
 80013d8:	204d      	movs	r0, #77	@ 0x4d
 80013da:	f7ff ff73 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x06);
 80013de:	2006      	movs	r0, #6
 80013e0:	f7ff ff70 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0D);
 80013e4:	200d      	movs	r0, #13
 80013e6:	f7ff ff6d 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0B);
 80013ea:	200b      	movs	r0, #11
 80013ec:	f7ff ff6a 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x31);
 80013f0:	2031      	movs	r0, #49	@ 0x31
 80013f2:	f7ff ff67 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x37);
 80013f6:	2037      	movs	r0, #55	@ 0x37
 80013f8:	f7ff ff64 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0F);
 80013fc:	200f      	movs	r0, #15
 80013fe:	f7ff ff61 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 8001402:	20c0      	movs	r0, #192	@ 0xc0
 8001404:	f7ff fec6 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x18);
 8001408:	2018      	movs	r0, #24
 800140a:	f7ff ff5b 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x16);
 800140e:	2016      	movs	r0, #22
 8001410:	f7ff ff58 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 8001414:	20c1      	movs	r0, #193	@ 0xc1
 8001416:	f7ff febd 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x45);
 800141a:	2045      	movs	r0, #69	@ 0x45
 800141c:	f7ff ff52 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8001420:	20c2      	movs	r0, #194	@ 0xc2
 8001422:	f7ff feb7 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x33);
 8001426:	2033      	movs	r0, #51	@ 0x33
 8001428:	f7ff ff4c 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 800142c:	20c3      	movs	r0, #195	@ 0xc3
 800142e:	f7ff feb1 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x33);
 8001432:	2033      	movs	r0, #51	@ 0x33
 8001434:	f7ff ff46 	bl	80012c4 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8001438:	2036      	movs	r0, #54	@ 0x36
 800143a:	f7ff feab 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 800143e:	205c      	movs	r0, #92	@ 0x5c
 8001440:	f7ff ff40 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8001444:	203a      	movs	r0, #58	@ 0x3a
 8001446:	f7ff fea5 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 800144a:	2006      	movs	r0, #6
 800144c:	f7ff ff3a 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff fe9f 	bl	8001194 <LCD_send_command>
	LCD_send_command(0x00);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fe9c 	bl	8001194 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 800145c:	20b0      	movs	r0, #176	@ 0xb0
 800145e:	f7ff fe99 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ff2e 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8001468:	20b1      	movs	r0, #177	@ 0xb1
 800146a:	f7ff fe93 	bl	8001194 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 800146e:	20a0      	movs	r0, #160	@ 0xa0
 8001470:	f7ff ff28 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8001474:	2011      	movs	r0, #17
 8001476:	f7ff ff25 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 800147a:	20b4      	movs	r0, #180	@ 0xb4
 800147c:	f7ff fe8a 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff ff1f 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8001486:	20b5      	movs	r0, #181	@ 0xb5
 8001488:	f7ff fe84 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x02);
 800148c:	2002      	movs	r0, #2
 800148e:	f7ff ff19 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x02);
 8001492:	2002      	movs	r0, #2
 8001494:	f7ff ff16 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0A);
 8001498:	200a      	movs	r0, #10
 800149a:	f7ff ff13 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x04);
 800149e:	2004      	movs	r0, #4
 80014a0:	f7ff ff10 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 80014a4:	20b6      	movs	r0, #182	@ 0xb6
 80014a6:	f7ff fe75 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x02);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f7ff ff0a 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x02);
 80014b0:	2002      	movs	r0, #2
 80014b2:	f7ff ff07 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x3B);
 80014b6:	203b      	movs	r0, #59	@ 0x3b
 80014b8:	f7ff ff04 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 80014bc:	20e9      	movs	r0, #233	@ 0xe9
 80014be:	f7ff fe69 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff fefe 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 80014c8:	20f7      	movs	r0, #247	@ 0xf7
 80014ca:	f7ff fe63 	bl	8001194 <LCD_send_command>
	LCD_send_data(0xA9);
 80014ce:	20a9      	movs	r0, #169	@ 0xa9
 80014d0:	f7ff fef8 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x51);
 80014d4:	2051      	movs	r0, #81	@ 0x51
 80014d6:	f7ff fef5 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x2C);
 80014da:	202c      	movs	r0, #44	@ 0x2c
 80014dc:	f7ff fef2 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x82);
 80014e0:	2082      	movs	r0, #130	@ 0x82
 80014e2:	f7ff feef 	bl	80012c4 <LCD_send_data>


	LCD_send_command(0x11);
 80014e6:	2011      	movs	r0, #17
 80014e8:	f7ff fe54 	bl	8001194 <LCD_send_command>
	HAL_Delay(255);
 80014ec:	20ff      	movs	r0, #255	@ 0xff
 80014ee:	f001 fdef 	bl	80030d0 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 80014f2:	2051      	movs	r0, #81	@ 0x51
 80014f4:	f7ff fe4e 	bl	8001194 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 80014f8:	20ff      	movs	r0, #255	@ 0xff
 80014fa:	f7ff fee3 	bl	80012c4 <LCD_send_data>
	LCD_send_command(0x29); //Display on
 80014fe:	2029      	movs	r0, #41	@ 0x29
 8001500:	f7ff fe48 	bl	8001194 <LCD_send_command>


}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40020c00 	.word	0x40020c00

0800150c <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	4604      	mov	r4, r0
 8001514:	4608      	mov	r0, r1
 8001516:	4611      	mov	r1, r2
 8001518:	461a      	mov	r2, r3
 800151a:	4623      	mov	r3, r4
 800151c:	80fb      	strh	r3, [r7, #6]
 800151e:	4603      	mov	r3, r0
 8001520:	80bb      	strh	r3, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]
 8001526:	4613      	mov	r3, r2
 8001528:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 800152a:	202a      	movs	r0, #42	@ 0x2a
 800152c:	f7ff fe32 	bl	8001194 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b29b      	uxth	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	733b      	strb	r3, [r7, #12]
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	b29b      	uxth	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	73bb      	strb	r3, [r7, #14]
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2104      	movs	r1, #4
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fe40 	bl	80011dc <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 800155c:	202b      	movs	r0, #43	@ 0x2b
 800155e:	f7ff fe19 	bl	8001194 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	b29b      	uxth	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	733b      	strb	r3, [r7, #12]
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8001572:	883b      	ldrh	r3, [r7, #0]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	73bb      	strb	r3, [r7, #14]
 800157c:	883b      	ldrh	r3, [r7, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	2104      	movs	r1, #4
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fe27 	bl	80011dc <LCD_send_data_multi>

	if(x == 'w')
 800158e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001592:	2b77      	cmp	r3, #119	@ 0x77
 8001594:	d102      	bne.n	800159c <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8001596:	202c      	movs	r0, #44	@ 0x2c
 8001598:	f7ff fdfc 	bl	8001194 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 800159c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a0:	2b72      	cmp	r3, #114	@ 0x72
 80015a2:	d102      	bne.n	80015aa <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 80015a4:	202e      	movs	r0, #46	@ 0x2e
 80015a6:	f7ff fdf5 	bl	8001194 <LCD_send_command>
	}


}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
	...

080015b4 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4604      	mov	r4, r0
 80015bc:	4608      	mov	r0, r1
 80015be:	4611      	mov	r1, r2
 80015c0:	461a      	mov	r2, r3
 80015c2:	4623      	mov	r3, r4
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	4603      	mov	r3, r0
 80015c8:	80bb      	strh	r3, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]
 80015ce:	4613      	mov	r3, r2
 80015d0:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 80015d2:	4b7d      	ldr	r3, [pc, #500]	@ (80017c8 <read_pixel_frame+0x214>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b7b      	ldr	r3, [pc, #492]	@ (80017c8 <read_pixel_frame+0x214>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015e0:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 80015e2:	4b79      	ldr	r3, [pc, #484]	@ (80017c8 <read_pixel_frame+0x214>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b77      	ldr	r3, [pc, #476]	@ (80017c8 <read_pixel_frame+0x214>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80015f0:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 80015f2:	4b75      	ldr	r3, [pc, #468]	@ (80017c8 <read_pixel_frame+0x214>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b73      	ldr	r3, [pc, #460]	@ (80017c8 <read_pixel_frame+0x214>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0210 	orr.w	r2, r2, #16
 8001600:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001602:	4b71      	ldr	r3, [pc, #452]	@ (80017c8 <read_pixel_frame+0x214>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b6f      	ldr	r3, [pc, #444]	@ (80017c8 <read_pixel_frame+0x214>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001610:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 8001612:	4b6e      	ldr	r3, [pc, #440]	@ (80017cc <read_pixel_frame+0x218>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 800161c:	887a      	ldrh	r2, [r7, #2]
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	bfb8      	it	lt
 8001626:	425b      	neglt	r3, r3
 8001628:	b29a      	uxth	r2, r3
 800162a:	8839      	ldrh	r1, [r7, #0]
 800162c:	88bb      	ldrh	r3, [r7, #4]
 800162e:	1acb      	subs	r3, r1, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	bfb8      	it	lt
 8001634:	425b      	neglt	r3, r3
 8001636:	b29b      	uxth	r3, r3
 8001638:	fb12 f303 	smulbb	r3, r2, r3
 800163c:	b29b      	uxth	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	0052      	lsls	r2, r2, #1
 8001642:	4413      	add	r3, r2
 8001644:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 8001646:	2300      	movs	r3, #0
 8001648:	753b      	strb	r3, [r7, #20]

    free(data);
 800164a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800164c:	f00a f88a 	bl	800b764 <free>
    data = malloc(byteNr);
 8001650:	8afb      	ldrh	r3, [r7, #22]
 8001652:	4618      	mov	r0, r3
 8001654:	f00a f87e 	bl	800b754 <malloc>
 8001658:	4603      	mov	r3, r0
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 800165c:	887b      	ldrh	r3, [r7, #2]
 800165e:	3b01      	subs	r3, #1
 8001660:	807b      	strh	r3, [r7, #2]
    y--;
 8001662:	883b      	ldrh	r3, [r7, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	743b      	strb	r3, [r7, #16]
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	747b      	strb	r3, [r7, #17]
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	b29b      	uxth	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	74bb      	strb	r3, [r7, #18]
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8001688:	88bb      	ldrh	r3, [r7, #4]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	b29b      	uxth	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	733b      	strb	r3, [r7, #12]
 8001692:	88bb      	ldrh	r3, [r7, #4]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	737b      	strb	r3, [r7, #13]
 8001698:	883b      	ldrh	r3, [r7, #0]
 800169a:	0a1b      	lsrs	r3, r3, #8
 800169c:	b29b      	uxth	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	73bb      	strb	r3, [r7, #14]
 80016a2:	883b      	ldrh	r3, [r7, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	73fb      	strb	r3, [r7, #15]

    CS_A();
 80016a8:	2200      	movs	r2, #0
 80016aa:	2110      	movs	r1, #16
 80016ac:	4848      	ldr	r0, [pc, #288]	@ (80017d0 <read_pixel_frame+0x21c>)
 80016ae:	f002 fdbf 	bl	8004230 <HAL_GPIO_WritePin>

    DC_COMMAND();
 80016b2:	2200      	movs	r2, #0
 80016b4:	2108      	movs	r1, #8
 80016b6:	4846      	ldr	r0, [pc, #280]	@ (80017d0 <read_pixel_frame+0x21c>)
 80016b8:	f002 fdba 	bl	8004230 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 80016bc:	232a      	movs	r3, #42	@ 0x2a
 80016be:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 80016c0:	f107 010b 	add.w	r1, r7, #11
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	2201      	movs	r2, #1
 80016ca:	483f      	ldr	r0, [pc, #252]	@ (80017c8 <read_pixel_frame+0x214>)
 80016cc:	f004 fa83 	bl	8005bd6 <HAL_SPI_Transmit>
    DC_DATA();
 80016d0:	2201      	movs	r2, #1
 80016d2:	2108      	movs	r1, #8
 80016d4:	483e      	ldr	r0, [pc, #248]	@ (80017d0 <read_pixel_frame+0x21c>)
 80016d6:	f002 fdab 	bl	8004230 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 80016da:	f107 0110 	add.w	r1, r7, #16
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	2204      	movs	r2, #4
 80016e4:	4838      	ldr	r0, [pc, #224]	@ (80017c8 <read_pixel_frame+0x214>)
 80016e6:	f004 fa76 	bl	8005bd6 <HAL_SPI_Transmit>

    DC_COMMAND();
 80016ea:	2200      	movs	r2, #0
 80016ec:	2108      	movs	r1, #8
 80016ee:	4838      	ldr	r0, [pc, #224]	@ (80017d0 <read_pixel_frame+0x21c>)
 80016f0:	f002 fd9e 	bl	8004230 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 80016f4:	232b      	movs	r3, #43	@ 0x2b
 80016f6:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 80016f8:	f107 010a 	add.w	r1, r7, #10
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	2201      	movs	r2, #1
 8001702:	4831      	ldr	r0, [pc, #196]	@ (80017c8 <read_pixel_frame+0x214>)
 8001704:	f004 fa67 	bl	8005bd6 <HAL_SPI_Transmit>
    DC_DATA();
 8001708:	2201      	movs	r2, #1
 800170a:	2108      	movs	r1, #8
 800170c:	4830      	ldr	r0, [pc, #192]	@ (80017d0 <read_pixel_frame+0x21c>)
 800170e:	f002 fd8f 	bl	8004230 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 8001712:	f107 010c 	add.w	r1, r7, #12
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	2204      	movs	r2, #4
 800171c:	482a      	ldr	r0, [pc, #168]	@ (80017c8 <read_pixel_frame+0x214>)
 800171e:	f004 fa5a 	bl	8005bd6 <HAL_SPI_Transmit>

    DC_COMMAND();
 8001722:	2200      	movs	r2, #0
 8001724:	2108      	movs	r1, #8
 8001726:	482a      	ldr	r0, [pc, #168]	@ (80017d0 <read_pixel_frame+0x21c>)
 8001728:	f002 fd82 	bl	8004230 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 800172c:	232e      	movs	r3, #46	@ 0x2e
 800172e:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 8001730:	f107 0109 	add.w	r1, r7, #9
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	2201      	movs	r2, #1
 800173a:	4823      	ldr	r0, [pc, #140]	@ (80017c8 <read_pixel_frame+0x214>)
 800173c:	f004 fa4b 	bl	8005bd6 <HAL_SPI_Transmit>
    DC_DATA();
 8001740:	2201      	movs	r2, #1
 8001742:	2108      	movs	r1, #8
 8001744:	4822      	ldr	r0, [pc, #136]	@ (80017d0 <read_pixel_frame+0x21c>)
 8001746:	f002 fd73 	bl	8004230 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 800174a:	f107 0114 	add.w	r1, r7, #20
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	2201      	movs	r2, #1
 8001754:	481c      	ldr	r0, [pc, #112]	@ (80017c8 <read_pixel_frame+0x214>)
 8001756:	f004 fb82 	bl	8005e5e <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 800175a:	8afb      	ldrh	r3, [r7, #22]
 800175c:	461a      	mov	r2, r3
 800175e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001760:	4819      	ldr	r0, [pc, #100]	@ (80017c8 <read_pixel_frame+0x214>)
 8001762:	f004 fef1 	bl	8006548 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 8001766:	bf00      	nop
 8001768:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <read_pixel_frame+0x218>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0fa      	beq.n	8001768 <read_pixel_frame+0x1b4>
    CS_D();
 8001772:	2201      	movs	r2, #1
 8001774:	2110      	movs	r1, #16
 8001776:	4816      	ldr	r0, [pc, #88]	@ (80017d0 <read_pixel_frame+0x21c>)
 8001778:	f002 fd5a 	bl	8004230 <HAL_GPIO_WritePin>

    free(data);
 800177c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800177e:	f009 fff1 	bl	800b764 <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <read_pixel_frame+0x214>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <read_pixel_frame+0x214>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001790:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <read_pixel_frame+0x214>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <read_pixel_frame+0x214>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80017a0:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <read_pixel_frame+0x214>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <read_pixel_frame+0x214>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <read_pixel_frame+0x214>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <read_pixel_frame+0x214>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017bc:	601a      	str	r2, [r3, #0]

}
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000180 	.word	0x20000180
 80017cc:	20000329 	.word	0x20000329
 80017d0:	40020c00 	.word	0x40020c00

080017d4 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


  void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	   * folosind DMA. Odata terminat transferul SPI prin DMA,
	   * aceasta functia de CallBack se va apela, setandu-ne un flag
	   * pentru a indica starea acestui transfer de date.
	   */

	  flagDmaSpiTx = 1;
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <HAL_SPI_TxCpltCallback+0x1c>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]

  }
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000328 	.word	0x20000328

080017f4 <HAL_SPI_RxCpltCallback>:


  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	  /*
	   * Functie de CallBack pentru terminarea receptiei datelor
	   * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	   */

	  flagDmaSpiRx = 1;
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <HAL_SPI_RxCpltCallback+0x1c>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]

  }
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000329 	.word	0x20000329

08001814 <HAL_DAC_ConvHalfCpltCallbackCh1>:


  void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
  {
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
      /*
       * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
       */

	  flagDmaDAC = 1;
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]

  }
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2000032a 	.word	0x2000032a

08001834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800183a:	b082      	sub	sp, #8
 800183c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183e:	f001 fbd5 	bl	8002fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001842:	f000 fb21 	bl	8001e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001846:	f000 fcbd 	bl	80021c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800184a:	f000 fc7d 	bl	8002148 <MX_DMA_Init>
  MX_SPI1_Init();
 800184e:	f000 fbcf 	bl	8001ff0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001852:	f000 fc4f 	bl	80020f4 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001856:	f000 fb81 	bl	8001f5c <MX_DAC_Init>
  MX_TIM2_Init();
 800185a:	f000 fbff 	bl	800205c <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 800185e:	f000 fba7 	bl	8001fb0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001862:	f007 fa71 	bl	8008d48 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 8001866:	f000 fd11 	bl	800228c <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 800186a:	f7ff fd4f 	bl	800130c <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 800186e:	48df      	ldr	r0, [pc, #892]	@ (8001bec <main+0x3b8>)
 8001870:	f005 fb28 	bl	8006ec4 <HAL_TIM_Base_Start>


  fill_screen1(0xF100);
 8001874:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001878:	f7fe fefc 	bl	8000674 <fill_screen1>
  HAL_Delay(1000);
 800187c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001880:	f001 fc26 	bl	80030d0 <HAL_Delay>
  fill_screen2(0xF00F);
 8001884:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8001888:	f7fe ff54 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 800188c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001890:	f001 fc1e 	bl	80030d0 <HAL_Delay>
  fill_screen2(0x3F51);
 8001894:	f643 7051 	movw	r0, #16209	@ 0x3f51
 8001898:	f7fe ff4c 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 800189c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018a0:	f001 fc16 	bl	80030d0 <HAL_Delay>

  unsigned int startTick = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80018aa:	f102 0218 	add.w	r2, r2, #24
 80018ae:	6013      	str	r3, [r2, #0]
  unsigned int endTick = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80018b6:	f102 0214 	add.w	r2, r2, #20
 80018ba:	6013      	str	r3, [r2, #0]
  unsigned int getTime = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80018c2:	f102 0210 	add.w	r2, r2, #16
 80018c6:	6013      	str	r3, [r2, #0]

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80018ce:	f102 021a 	add.w	r2, r2, #26
 80018d2:	8013      	strh	r3, [r2, #0]
  ent.y0 = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80018da:	f102 021c 	add.w	r2, r2, #28
 80018de:	8013      	strh	r3, [r2, #0]
  ent.id = 0x00;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80018e6:	f102 0218 	add.w	r2, r2, #24
 80018ea:	7013      	strb	r3, [r2, #0]
  draw_entity(&ent, "graphic/img5.bin");
 80018ec:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80018f0:	f103 0318 	add.w	r3, r3, #24
 80018f4:	49be      	ldr	r1, [pc, #760]	@ (8001bf0 <main+0x3bc>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f990 	bl	8000c1c <draw_entity>
  HAL_Delay(2000);
 80018fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001900:	f001 fbe6 	bl	80030d0 <HAL_Delay>
  draw_entity(&ent, "graphic/img6.bin");
 8001904:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001908:	f103 0318 	add.w	r3, r3, #24
 800190c:	49b9      	ldr	r1, [pc, #740]	@ (8001bf4 <main+0x3c0>)
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f984 	bl	8000c1c <draw_entity>
  HAL_Delay(2000);
 8001914:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001918:	f001 fbda 	bl	80030d0 <HAL_Delay>
  draw_entity(&ent, "graphic/img8.bin");
 800191c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001920:	f103 0318 	add.w	r3, r3, #24
 8001924:	49b4      	ldr	r1, [pc, #720]	@ (8001bf8 <main+0x3c4>)
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f978 	bl	8000c1c <draw_entity>
  HAL_Delay(2000);
 800192c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001930:	f001 fbce 	bl	80030d0 <HAL_Delay>
  startTick = HAL_GetTick();
 8001934:	f001 fbc0 	bl	80030b8 <HAL_GetTick>
 8001938:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800193c:	f103 0318 	add.w	r3, r3, #24
 8001940:	6018      	str	r0, [r3, #0]
  draw_entity(&ent, "graphic/img9.bin");
 8001942:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001946:	f103 0318 	add.w	r3, r3, #24
 800194a:	49ac      	ldr	r1, [pc, #688]	@ (8001bfc <main+0x3c8>)
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f965 	bl	8000c1c <draw_entity>
  endTick = HAL_GetTick();
 8001952:	f001 fbb1 	bl	80030b8 <HAL_GetTick>
 8001956:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800195a:	f103 0314 	add.w	r3, r3, #20
 800195e:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001960:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001964:	f103 0314 	add.w	r3, r3, #20
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800196e:	f103 0318 	add.w	r3, r3, #24
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800197a:	f102 0210 	add.w	r2, r2, #16
 800197e:	6013      	str	r3, [r2, #0]
  HAL_Delay(3000);
 8001980:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001984:	f001 fba4 	bl	80030d0 <HAL_Delay>

  //Test translation

  ENTITY entity;

  entity.x0 = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800198e:	f102 020a 	add.w	r2, r2, #10
 8001992:	8013      	strh	r3, [r2, #0]
  entity.y0 = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800199a:	f102 020c 	add.w	r2, r2, #12
 800199e:	8013      	strh	r3, [r2, #0]
  entity.x1 = 64;
 80019a0:	2340      	movs	r3, #64	@ 0x40
 80019a2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019a6:	f102 020e 	add.w	r2, r2, #14
 80019aa:	8013      	strh	r3, [r2, #0]
  entity.y1 = 64;
 80019ac:	2340      	movs	r3, #64	@ 0x40
 80019ae:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019b2:	f102 0210 	add.w	r2, r2, #16
 80019b6:	8013      	strh	r3, [r2, #0]
  entity.color = 0xF100;
 80019b8:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80019bc:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019c0:	f102 0214 	add.w	r2, r2, #20
 80019c4:	8013      	strh	r3, [r2, #0]

  //draw_entity(&entity,NULL);
  HAL_Delay(500);
 80019c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019ca:	f001 fb81 	bl	80030d0 <HAL_Delay>

  translation_test(&entity, 1, 0);
 80019ce:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80019d2:	f103 0308 	add.w	r3, r3, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	2101      	movs	r1, #1
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb1c 	bl	8001018 <translation_test>

  HAL_Delay(500);
 80019e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019e4:	f001 fb74 	bl	80030d0 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 1);//, 0xF100);
 80019e8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80019ec:	f103 030a 	add.w	r3, r3, #10
 80019f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3364      	adds	r3, #100	@ 0x64
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b219      	sxth	r1, r3
 80019fc:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a00:	f103 030c 	add.w	r3, r3, #12
 8001a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	3364      	adds	r3, #100	@ 0x64
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001a14:	f100 0008 	add.w	r0, r0, #8
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f7ff f9ff 	bl	8000e1c <translation_entity>
  HAL_Delay(2000);
 8001a1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a22:	f001 fb55 	bl	80030d0 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 1);//, 0xF100);
 8001a26:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a2a:	f103 030a 	add.w	r3, r3, #10
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3320      	adds	r3, #32
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	b219      	sxth	r1, r3
 8001a3a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a3e:	f103 030c 	add.w	r3, r3, #12
 8001a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3320      	adds	r3, #32
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001a52:	f100 0008 	add.w	r0, r0, #8
 8001a56:	2301      	movs	r3, #1
 8001a58:	f7ff f9e0 	bl	8000e1c <translation_entity>
  HAL_Delay(500);
 8001a5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a60:	f001 fb36 	bl	80030d0 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 1);//, 0xF100);
 8001a64:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a68:	f103 030a 	add.w	r3, r3, #10
 8001a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	330c      	adds	r3, #12
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b219      	sxth	r1, r3
 8001a78:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a7c:	f103 030c 	add.w	r3, r3, #12
 8001a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3320      	adds	r3, #32
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001a90:	f100 0008 	add.w	r0, r0, #8
 8001a94:	2301      	movs	r3, #1
 8001a96:	f7ff f9c1 	bl	8000e1c <translation_entity>
  HAL_Delay(500);
 8001a9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a9e:	f001 fb17 	bl	80030d0 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0, 1);//, 0xF100);
 8001aa2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001aa6:	f103 030a 	add.w	r3, r3, #10
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	330c      	adds	r3, #12
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b219      	sxth	r1, r3
 8001ab6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001aba:	f103 030c 	add.w	r3, r3, #12
 8001abe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ac2:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001ac6:	f100 0008 	add.w	r0, r0, #8
 8001aca:	2301      	movs	r3, #1
 8001acc:	f7ff f9a6 	bl	8000e1c <translation_entity>
  HAL_Delay(500);
 8001ad0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ad4:	f001 fafc 	bl	80030d0 <HAL_Delay>


  //Test_SD_Card();

  play_audio_file("audio/mine.txt"); //doremi mine songita song22
 8001ad8:	4849      	ldr	r0, [pc, #292]	@ (8001c00 <main+0x3cc>)
 8001ada:	f7fe fced 	bl	80004b8 <play_audio_file>

  char *fileData = NULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001ae4:	f102 020c 	add.w	r2, r2, #12
 8001ae8:	6013      	str	r3, [r2, #0]
  read_file("audio/text.txt", fileData);
 8001aea:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001aee:	f103 030c 	add.w	r3, r3, #12
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	4843      	ldr	r0, [pc, #268]	@ (8001c04 <main+0x3d0>)
 8001af6:	f000 fbd7 	bl	80022a8 <read_file>
  HAL_Delay(1000);
 8001afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001afe:	f001 fae7 	bl	80030d0 <HAL_Delay>

  uint32_t sampleData[1024]; /*23 de ms pentru redare DMA dintre care 7 ms pentru citire din fisier*/
  	  	  	  	  	  	  	 /*Vor ramane aproximativ 16 ms pentru prelucrarea frame-ului (pentru 1024 de esantioane)*/

  startTick = HAL_GetTick();
 8001b02:	f001 fad9 	bl	80030b8 <HAL_GetTick>
 8001b06:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b0a:	f103 0318 	add.w	r3, r3, #24
 8001b0e:	6018      	str	r0, [r3, #0]
  read_audio_file("audio/random.txt", sampleData);
 8001b10:	f107 0320 	add.w	r3, r7, #32
 8001b14:	3b18      	subs	r3, #24
 8001b16:	4619      	mov	r1, r3
 8001b18:	483b      	ldr	r0, [pc, #236]	@ (8001c08 <main+0x3d4>)
 8001b1a:	f000 fc4d 	bl	80023b8 <read_audio_file>
  endTick = HAL_GetTick();
 8001b1e:	f001 facb 	bl	80030b8 <HAL_GetTick>
 8001b22:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b26:	f103 0314 	add.w	r3, r3, #20
 8001b2a:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001b2c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b30:	f103 0314 	add.w	r3, r3, #20
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b3a:	f103 0318 	add.w	r3, r3, #24
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001b46:	f102 0210 	add.w	r2, r2, #16
 8001b4a:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001b4c:	2064      	movs	r0, #100	@ 0x64
 8001b4e:	f001 fabf 	bl	80030d0 <HAL_Delay>

  startTick = HAL_GetTick();
 8001b52:	f001 fab1 	bl	80030b8 <HAL_GetTick>
 8001b56:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b5a:	f103 0318 	add.w	r3, r3, #24
 8001b5e:	6018      	str	r0, [r3, #0]
  read_audio_file("audio/random.txt", sampleData);
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	3b18      	subs	r3, #24
 8001b66:	4619      	mov	r1, r3
 8001b68:	4827      	ldr	r0, [pc, #156]	@ (8001c08 <main+0x3d4>)
 8001b6a:	f000 fc25 	bl	80023b8 <read_audio_file>
  endTick = HAL_GetTick();
 8001b6e:	f001 faa3 	bl	80030b8 <HAL_GetTick>
 8001b72:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b76:	f103 0314 	add.w	r3, r3, #20
 8001b7a:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001b7c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b80:	f103 0314 	add.w	r3, r3, #20
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b8a:	f103 0318 	add.w	r3, r3, #24
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001b96:	f102 0210 	add.w	r2, r2, #16
 8001b9a:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001b9c:	2064      	movs	r0, #100	@ 0x64
 8001b9e:	f001 fa97 	bl	80030d0 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001ba2:	f107 0320 	add.w	r3, r7, #32
 8001ba6:	3b18      	subs	r3, #24
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4816      	ldr	r0, [pc, #88]	@ (8001c04 <main+0x3d0>)
 8001bac:	f000 fc04 	bl	80023b8 <read_audio_file>
  HAL_Delay(100);
 8001bb0:	2064      	movs	r0, #100	@ 0x64
 8001bb2:	f001 fa8d 	bl	80030d0 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	3b18      	subs	r3, #24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4811      	ldr	r0, [pc, #68]	@ (8001c04 <main+0x3d0>)
 8001bc0:	f000 fbfa 	bl	80023b8 <read_audio_file>
  HAL_Delay(100);
 8001bc4:	2064      	movs	r0, #100	@ 0x64
 8001bc6:	f001 fa83 	bl	80030d0 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001bca:	f107 0320 	add.w	r3, r7, #32
 8001bce:	3b18      	subs	r3, #24
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <main+0x3d0>)
 8001bd4:	f000 fbf0 	bl	80023b8 <read_audio_file>
  HAL_Delay(100);
 8001bd8:	2064      	movs	r0, #100	@ 0x64
 8001bda:	f001 fa79 	bl	80030d0 <HAL_Delay>

  for(uint8_t i=0;i<100;i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001be4:	f102 021f 	add.w	r2, r2, #31
 8001be8:	7013      	strb	r3, [r2, #0]
 8001bea:	e0ac      	b.n	8001d46 <main+0x512>
 8001bec:	20000298 	.word	0x20000298
 8001bf0:	0800ba9c 	.word	0x0800ba9c
 8001bf4:	0800bab0 	.word	0x0800bab0
 8001bf8:	0800bac4 	.word	0x0800bac4
 8001bfc:	0800bad8 	.word	0x0800bad8
 8001c00:	0800baec 	.word	0x0800baec
 8001c04:	0800bafc 	.word	0x0800bafc
 8001c08:	0800bb0c 	.word	0x0800bb0c
  {
	  for(uint8_t j=0; j<100;j++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c12:	f102 021e 	add.w	r2, r2, #30
 8001c16:	7013      	strb	r3, [r2, #0]
 8001c18:	e082      	b.n	8001d20 <main+0x4ec>
	  {

		  if(i==j)
 8001c1a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c1e:	f103 031f 	add.w	r3, r3, #31
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c28:	f103 031e 	add.w	r3, r3, #30
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d111      	bne.n	8001c56 <main+0x422>
		  {
			  draw_pixel(i,j,0xF100);
 8001c32:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c36:	f103 031f 	add.w	r3, r3, #31
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c42:	f102 021e 	add.w	r2, r2, #30
 8001c46:	7812      	ldrb	r2, [r2, #0]
 8001c48:	b291      	uxth	r1, r2
 8001c4a:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fce6 	bl	8000620 <draw_pixel>
			  continue;
 8001c54:	e059      	b.n	8001d0a <main+0x4d6>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8001c56:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c5a:	f103 031f 	add.w	r3, r3, #31
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b50      	cmp	r3, #80	@ 0x50
 8001c62:	d106      	bne.n	8001c72 <main+0x43e>
 8001c64:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c68:	f103 031e 	add.w	r3, r3, #30
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b14      	cmp	r3, #20
 8001c70:	d029      	beq.n	8001cc6 <main+0x492>
 8001c72:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c76:	f103 031f 	add.w	r3, r3, #31
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b50      	cmp	r3, #80	@ 0x50
 8001c7e:	d106      	bne.n	8001c8e <main+0x45a>
 8001c80:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c84:	f103 031e 	add.w	r3, r3, #30
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b13      	cmp	r3, #19
 8001c8c:	d01b      	beq.n	8001cc6 <main+0x492>
 8001c8e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c92:	f103 031f 	add.w	r3, r3, #31
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b51      	cmp	r3, #81	@ 0x51
 8001c9a:	d106      	bne.n	8001caa <main+0x476>
 8001c9c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ca0:	f103 031e 	add.w	r3, r3, #30
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b14      	cmp	r3, #20
 8001ca8:	d00d      	beq.n	8001cc6 <main+0x492>
 8001caa:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cae:	f103 031f 	add.w	r3, r3, #31
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b51      	cmp	r3, #81	@ 0x51
 8001cb6:	d117      	bne.n	8001ce8 <main+0x4b4>
 8001cb8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cbc:	f103 031e 	add.w	r3, r3, #30
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b13      	cmp	r3, #19
 8001cc4:	d110      	bne.n	8001ce8 <main+0x4b4>
		  {
			  draw_pixel(i,j,0x001F);
 8001cc6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cca:	f103 031f 	add.w	r3, r3, #31
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001cd6:	f102 021e 	add.w	r2, r2, #30
 8001cda:	7812      	ldrb	r2, [r2, #0]
 8001cdc:	b291      	uxth	r1, r2
 8001cde:	221f      	movs	r2, #31
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc9d 	bl	8000620 <draw_pixel>
			  continue;
 8001ce6:	e010      	b.n	8001d0a <main+0x4d6>
		  }


		  draw_pixel(i,j,0xFFFF);
 8001ce8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cec:	f103 031f 	add.w	r3, r3, #31
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001cf8:	f102 021e 	add.w	r2, r2, #30
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	b291      	uxth	r1, r2
 8001d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc8b 	bl	8000620 <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8001d0a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d0e:	f103 031e 	add.w	r3, r3, #30
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d1a:	f102 021e 	add.w	r2, r2, #30
 8001d1e:	7013      	strb	r3, [r2, #0]
 8001d20:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d24:	f103 031e 	add.w	r3, r3, #30
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b63      	cmp	r3, #99	@ 0x63
 8001d2c:	f67f af75 	bls.w	8001c1a <main+0x3e6>
  for(uint8_t i=0;i<100;i++)
 8001d30:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d34:	f103 031f 	add.w	r3, r3, #31
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d40:	f102 021f 	add.w	r2, r2, #31
 8001d44:	7013      	strb	r3, [r2, #0]
 8001d46:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d4a:	f103 031f 	add.w	r3, r3, #31
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b63      	cmp	r3, #99	@ 0x63
 8001d52:	f67f af5b 	bls.w	8001c0c <main+0x3d8>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8001d56:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001d5a:	f7fe fceb 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 8001d5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d62:	f001 f9b5 	bl	80030d0 <HAL_Delay>
  fill_screen2(0xF150);
 8001d66:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8001d6a:	f7fe fce3 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 8001d6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d72:	f001 f9ad 	bl	80030d0 <HAL_Delay>
  fill_screen2(0xF111);
 8001d76:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8001d7a:	f7fe fcdb 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 8001d7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d82:	f001 f9a5 	bl	80030d0 <HAL_Delay>
  fill_screen2(0xF10F);
 8001d86:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8001d8a:	f7fe fcd3 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 8001d8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d92:	f001 f99d 	bl	80030d0 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001d96:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d9a:	f7fe fccb 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 8001d9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001da2:	f001 f995 	bl	80030d0 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001da6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001daa:	f7fe fcc3 	bl	8000734 <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 8001dae:	231f      	movs	r3, #31
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	230c      	movs	r3, #12
 8001dba:	4a2f      	ldr	r2, [pc, #188]	@ (8001e78 <main+0x644>)
 8001dbc:	21c8      	movs	r1, #200	@ 0xc8
 8001dbe:	2024      	movs	r0, #36	@ 0x24
 8001dc0:	f7fe fe14 	bl	80009ec <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8001dc4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b2c      	ldr	r3, [pc, #176]	@ (8001e7c <main+0x648>)
 8001dcc:	f842 3c3c 	str.w	r3, [r2, #-60]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	3b1c      	subs	r3, #28
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4829      	ldr	r0, [pc, #164]	@ (8001e80 <main+0x64c>)
 8001ddc:	f004 fb02 	bl	80063e4 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 8001de0:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001de4:	2250      	movs	r2, #80	@ 0x50
 8001de6:	2114      	movs	r1, #20
 8001de8:	2014      	movs	r0, #20
 8001dea:	f7fe fe43 	bl	8000a74 <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 8001dee:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001df2:	2250      	movs	r2, #80	@ 0x50
 8001df4:	2114      	movs	r1, #20
 8001df6:	2014      	movs	r0, #20
 8001df8:	f7fe fe77 	bl	8000aea <draw_vertical_line>

  flagDmaSpiTx = 0;
 8001dfc:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <main+0x650>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 8001e02:	221f      	movs	r2, #31
 8001e04:	2100      	movs	r1, #0
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7fe fc0a 	bl	8000620 <draw_pixel>
  draw_pixel(1,0,0xF800);
 8001e0c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e10:	2100      	movs	r1, #0
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7fe fc04 	bl	8000620 <draw_pixel>
  draw_pixel(0,1,0x001F);
 8001e18:	221f      	movs	r2, #31
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7fe fbff 	bl	8000620 <draw_pixel>
  draw_pixel(1,1,0xF800);
 8001e22:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e26:	2101      	movs	r1, #1
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f7fe fbf9 	bl	8000620 <draw_pixel>

  HAL_Delay(50);
 8001e2e:	2032      	movs	r0, #50	@ 0x32
 8001e30:	f001 f94e 	bl	80030d0 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 8001e34:	2001      	movs	r0, #1
 8001e36:	f009 fc8d 	bl	800b754 <malloc>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001e40:	f102 0208 	add.w	r2, r2, #8
 8001e44:	6013      	str	r3, [r2, #0]
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 8001e46:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001e4a:	f103 0308 	add.w	r3, r3, #8
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2302      	movs	r3, #2
 8001e54:	2202      	movs	r2, #2
 8001e56:	2100      	movs	r1, #0
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fbab 	bl	80015b4 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 8001e5e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001e62:	f103 0308 	add.w	r3, r3, #8
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	f009 fc7c 	bl	800b764 <free>

  HAL_Delay(3000);
 8001e6c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001e70:	f001 f92e 	bl	80030d0 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <main+0x640>
 8001e78:	0800bb20 	.word	0x0800bb20
 8001e7c:	04030201 	.word	0x04030201
 8001e80:	20000180 	.word	0x20000180
 8001e84:	20000328 	.word	0x20000328

08001e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b094      	sub	sp, #80	@ 0x50
 8001e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8e:	f107 0320 	add.w	r3, r7, #32
 8001e92:	2230      	movs	r2, #48	@ 0x30
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f009 fd50 	bl	800b93c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	4b28      	ldr	r3, [pc, #160]	@ (8001f54 <SystemClock_Config+0xcc>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	4a27      	ldr	r2, [pc, #156]	@ (8001f54 <SystemClock_Config+0xcc>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ebc:	4b25      	ldr	r3, [pc, #148]	@ (8001f54 <SystemClock_Config+0xcc>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <SystemClock_Config+0xd0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a21      	ldr	r2, [pc, #132]	@ (8001f58 <SystemClock_Config+0xd0>)
 8001ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <SystemClock_Config+0xd0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ee8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ef2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001efc:	23a8      	movs	r3, #168	@ 0xa8
 8001efe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f00:	2302      	movs	r3, #2
 8001f02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f04:	2307      	movs	r3, #7
 8001f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f08:	f107 0320 	add.w	r3, r7, #32
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 f9a9 	bl	8004264 <HAL_RCC_OscConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f18:	f000 f9b2 	bl	8002280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f20:	2302      	movs	r3, #2
 8001f22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f28:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	2105      	movs	r1, #5
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 fc0a 	bl	8004754 <HAL_RCC_ClockConfig>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f46:	f000 f99b 	bl	8002280 <Error_Handler>
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3750      	adds	r7, #80	@ 0x50
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000

08001f5c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f62:	463b      	mov	r3, r7
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <MX_DAC_Init+0x4c>)
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fac <MX_DAC_Init+0x50>)
 8001f6e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001f70:	480d      	ldr	r0, [pc, #52]	@ (8001fa8 <MX_DAC_Init+0x4c>)
 8001f72:	f001 f9e2 	bl	800333a <HAL_DAC_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001f7c:	f000 f980 	bl	8002280 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001f80:	2324      	movs	r3, #36	@ 0x24
 8001f82:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4806      	ldr	r0, [pc, #24]	@ (8001fa8 <MX_DAC_Init+0x4c>)
 8001f90:	f001 facc 	bl	800352c <HAL_DAC_ConfigChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001f9a:	f000 f971 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000088 	.word	0x20000088
 8001fac:	40007400 	.word	0x40007400

08001fb0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <MX_SDIO_SD_Init+0x38>)
 8001fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8001fec <MX_SDIO_SD_Init+0x3c>)
 8001fb8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <MX_SDIO_SD_Init+0x38>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <MX_SDIO_SD_Init+0x38>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <MX_SDIO_SD_Init+0x38>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <MX_SDIO_SD_Init+0x38>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001fd2:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <MX_SDIO_SD_Init+0x38>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <MX_SDIO_SD_Init+0x38>)
 8001fda:	2208      	movs	r2, #8
 8001fdc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	200000fc 	.word	0x200000fc
 8001fec:	40012c00 	.word	0x40012c00

08001ff0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <MX_SPI1_Init+0x64>)
 8001ff6:	4a18      	ldr	r2, [pc, #96]	@ (8002058 <MX_SPI1_Init+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ffa:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <MX_SPI1_Init+0x64>)
 8001ffc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002000:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002002:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <MX_SPI1_Init+0x64>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002008:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <MX_SPI1_Init+0x64>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800200e:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_SPI1_Init+0x64>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002014:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <MX_SPI1_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_SPI1_Init+0x64>)
 800201c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002020:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002022:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_SPI1_Init+0x64>)
 8002024:	2200      	movs	r2, #0
 8002026:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002028:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <MX_SPI1_Init+0x64>)
 800202a:	2200      	movs	r2, #0
 800202c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_SPI1_Init+0x64>)
 8002030:	2200      	movs	r2, #0
 8002032:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002034:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <MX_SPI1_Init+0x64>)
 8002036:	2200      	movs	r2, #0
 8002038:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_SPI1_Init+0x64>)
 800203c:	220a      	movs	r2, #10
 800203e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	@ (8002054 <MX_SPI1_Init+0x64>)
 8002042:	f003 fd3f 	bl	8005ac4 <HAL_SPI_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800204c:	f000 f918 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000180 	.word	0x20000180
 8002058:	40013000 	.word	0x40013000

0800205c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002070:	463b      	mov	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002078:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <MX_TIM2_Init+0x94>)
 800207a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800207e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002080:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <MX_TIM2_Init+0x94>)
 8002082:	2253      	movs	r2, #83	@ 0x53
 8002084:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002086:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <MX_TIM2_Init+0x94>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23;
 800208c:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <MX_TIM2_Init+0x94>)
 800208e:	2217      	movs	r2, #23
 8002090:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002092:	4b17      	ldr	r3, [pc, #92]	@ (80020f0 <MX_TIM2_Init+0x94>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002098:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <MX_TIM2_Init+0x94>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800209e:	4814      	ldr	r0, [pc, #80]	@ (80020f0 <MX_TIM2_Init+0x94>)
 80020a0:	f004 fec0 	bl	8006e24 <HAL_TIM_Base_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80020aa:	f000 f8e9 	bl	8002280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	4619      	mov	r1, r3
 80020ba:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <MX_TIM2_Init+0x94>)
 80020bc:	f004 ff6a 	bl	8006f94 <HAL_TIM_ConfigClockSource>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80020c6:	f000 f8db 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020ca:	2320      	movs	r3, #32
 80020cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020d2:	463b      	mov	r3, r7
 80020d4:	4619      	mov	r1, r3
 80020d6:	4806      	ldr	r0, [pc, #24]	@ (80020f0 <MX_TIM2_Init+0x94>)
 80020d8:	f005 f96a 	bl	80073b0 <HAL_TIMEx_MasterConfigSynchronization>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80020e2:	f000 f8cd 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000298 	.word	0x20000298

080020f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020f8:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <MX_USART1_UART_Init+0x4c>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	@ (8002144 <MX_USART1_UART_Init+0x50>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <MX_USART1_UART_Init+0x4c>)
 8002100:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <MX_USART1_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <MX_USART1_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002112:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <MX_USART1_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002118:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <MX_USART1_UART_Init+0x4c>)
 800211a:	220c      	movs	r2, #12
 800211c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211e:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <MX_USART1_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <MX_USART1_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	@ (8002140 <MX_USART1_UART_Init+0x4c>)
 800212c:	f005 f9bc 	bl	80074a8 <HAL_UART_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002136:	f000 f8a3 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200002e0 	.word	0x200002e0
 8002144:	40011000 	.word	0x40011000

08002148 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b1b      	ldr	r3, [pc, #108]	@ (80021c0 <MX_DMA_Init+0x78>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	4a1a      	ldr	r2, [pc, #104]	@ (80021c0 <MX_DMA_Init+0x78>)
 8002158:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30
 800215e:	4b18      	ldr	r3, [pc, #96]	@ (80021c0 <MX_DMA_Init+0x78>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <MX_DMA_Init+0x78>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4a13      	ldr	r2, [pc, #76]	@ (80021c0 <MX_DMA_Init+0x78>)
 8002174:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002178:	6313      	str	r3, [r2, #48]	@ 0x30
 800217a:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <MX_DMA_Init+0x78>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	2010      	movs	r0, #16
 800218c:	f001 f89f 	bl	80032ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002190:	2010      	movs	r0, #16
 8002192:	f001 f8b8 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2038      	movs	r0, #56	@ 0x38
 800219c:	f001 f897 	bl	80032ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021a0:	2038      	movs	r0, #56	@ 0x38
 80021a2:	f001 f8b0 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	203b      	movs	r0, #59	@ 0x3b
 80021ac:	f001 f88f 	bl	80032ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80021b0:	203b      	movs	r0, #59	@ 0x3b
 80021b2:	f001 f8a8 	bl	8003306 <HAL_NVIC_EnableIRQ>

}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800

080021c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	@ 0x28
 80021c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b26      	ldr	r3, [pc, #152]	@ (8002278 <MX_GPIO_Init+0xb4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a25      	ldr	r2, [pc, #148]	@ (8002278 <MX_GPIO_Init+0xb4>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b23      	ldr	r3, [pc, #140]	@ (8002278 <MX_GPIO_Init+0xb4>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <MX_GPIO_Init+0xb4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002278 <MX_GPIO_Init+0xb4>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <MX_GPIO_Init+0xb4>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <MX_GPIO_Init+0xb4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a17      	ldr	r2, [pc, #92]	@ (8002278 <MX_GPIO_Init+0xb4>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <MX_GPIO_Init+0xb4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <MX_GPIO_Init+0xb4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <MX_GPIO_Init+0xb4>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <MX_GPIO_Init+0xb4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	2158      	movs	r1, #88	@ 0x58
 800224e:	480b      	ldr	r0, [pc, #44]	@ (800227c <MX_GPIO_Init+0xb8>)
 8002250:	f001 ffee 	bl	8004230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8002254:	2358      	movs	r3, #88	@ 0x58
 8002256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	4804      	ldr	r0, [pc, #16]	@ (800227c <MX_GPIO_Init+0xb8>)
 800226c:	f001 fe44 	bl	8003ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002270:	bf00      	nop
 8002272:	3728      	adds	r7, #40	@ 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	40020c00 	.word	0x40020c00

08002280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <Error_Handler+0x8>

0800228c <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 8002290:	2201      	movs	r2, #1
 8002292:	4903      	ldr	r1, [pc, #12]	@ (80022a0 <init_cardSD+0x14>)
 8002294:	4803      	ldr	r0, [pc, #12]	@ (80022a4 <init_cardSD+0x18>)
 8002296:	f008 fc11 	bl	800aabc <f_mount>

}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	0800bb30 	.word	0x0800bb30
 80022a4:	2000032c 	.word	0x2000032c

080022a8 <read_file>:



void read_file(char *filePathName, char*fileData)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80022b4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80022b8:	6018      	str	r0, [r3, #0]
 80022ba:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80022be:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80022c2:	6019      	str	r1, [r3, #0]

	FRESULT res;  //stocarea starii cardului SD (util pentru depanare)
	FIL file;  //stocarea informatiilor despre fisierul deschis
	UINT byteRead;  //contor pentru numarul total de octeti cititi efectivi

	fileData = (char*)malloc(128*sizeof(char));
 80022c4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80022c8:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 80022cc:	2080      	movs	r0, #128	@ 0x80
 80022ce:	f009 fa41 	bl	800b754 <malloc>
 80022d2:	4603      	mov	r3, r0
 80022d4:	6023      	str	r3, [r4, #0]

	res = f_open(&file, filePathName, FA_READ);
 80022d6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80022da:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80022de:	f107 000c 	add.w	r0, r7, #12
 80022e2:	2201      	movs	r2, #1
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	f008 fc2f 	bl	800ab48 <f_open>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

	if(res != FR_OK)
 80022f0:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d131      	bne.n	800235c <read_file+0xb4>
	{
		return;
	}

	f_read(&file, fileData, (sizeof(fileData)*128)-1, &byteRead);
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8002300:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8002304:	f107 000c 	add.w	r0, r7, #12
 8002308:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800230c:	6809      	ldr	r1, [r1, #0]
 800230e:	f008 fdd5 	bl	800aebc <f_read>
	fileData[byteRead] = '\0';
 8002312:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002316:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8002320:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	4413      	add	r3, r2
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]

	fileData = (char*)realloc(fileData, byteRead);
 800232c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002330:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800233a:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 800233e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002342:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002346:	4611      	mov	r1, r2
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	f009 fac1 	bl	800b8d0 <realloc>
 800234e:	6020      	str	r0, [r4, #0]

	f_close(&file);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	4618      	mov	r0, r3
 8002356:	f008 ff6e 	bl	800b236 <f_close>
 800235a:	e000      	b.n	800235e <read_file+0xb6>
		return;
 800235c:	bf00      	nop


}
 800235e:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8002362:	46bd      	mov	sp, r7
 8002364:	bd90      	pop	{r4, r7, pc}

08002366 <string_to_int>:
}



static uint16_t string_to_int(char *string)
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 8002372:	e015      	b.n	80023a0 <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b2f      	cmp	r3, #47	@ 0x2f
 800237a:	d90e      	bls.n	800239a <string_to_int+0x34>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b39      	cmp	r3, #57	@ 0x39
 8002382:	d80a      	bhi.n	800239a <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	461a      	mov	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4413      	add	r3, r2
 8002396:	3b30      	subs	r3, #48	@ 0x30
 8002398:	60fb      	str	r3, [r7, #12]
		}

		string++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3301      	adds	r3, #1
 800239e:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b0a      	cmp	r3, #10
 80023a6:	d1e5      	bne.n	8002374 <string_to_int+0xe>
	}

	return number;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	b29b      	uxth	r3, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <read_audio_file>:
}



void read_audio_file(char *filePathName, uint32_t *buffer)
{
 80023b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023bc:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80023c6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80023ca:	6018      	str	r0, [r3, #0]
 80023cc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80023d0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80023d4:	6019      	str	r1, [r3, #0]
 80023d6:	466b      	mov	r3, sp
 80023d8:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 80023da:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80023de:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80023e2:	f107 0018 	add.w	r0, r7, #24
 80023e6:	2201      	movs	r2, #1
 80023e8:	6819      	ldr	r1, [r3, #0]
 80023ea:	f008 fbad 	bl	800ab48 <f_open>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 80023f4:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f040 80fa 	bne.w	80025f2 <read_audio_file+0x23a>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 80023fe:	4b80      	ldr	r3, [pc, #512]	@ (8002600 <read_audio_file+0x248>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f107 0318 	add.w	r3, r7, #24
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f008 ff3e 	bl	800b28a <f_lseek>


	if(flagNewAudioFile == 1)
 800240e:	4b7d      	ldr	r3, [pc, #500]	@ (8002604 <read_audio_file+0x24c>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d017      	beq.n	8002446 <read_audio_file+0x8e>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 8002416:	4b7b      	ldr	r3, [pc, #492]	@ (8002604 <read_audio_file+0x24c>)
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 800241c:	4b7a      	ldr	r3, [pc, #488]	@ (8002608 <read_audio_file+0x250>)
 800241e:	2200      	movs	r2, #0
 8002420:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 8002422:	4b77      	ldr	r3, [pc, #476]	@ (8002600 <read_audio_file+0x248>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 8002428:	4b75      	ldr	r3, [pc, #468]	@ (8002600 <read_audio_file+0x248>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f107 0318 	add.w	r3, r7, #24
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f008 ff29 	bl	800b28a <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 8002438:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800243c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	4a72      	ldr	r2, [pc, #456]	@ (800260c <read_audio_file+0x254>)
 8002444:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 8002446:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800244a:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	unsigned int nrFrames = fileSize / n;
 800244e:	4b6f      	ldr	r3, [pc, #444]	@ (800260c <read_audio_file+0x254>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

	if(fileSize%n != 0)
 800245e:	4b6b      	ldr	r3, [pc, #428]	@ (800260c <read_audio_file+0x254>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8002466:	fbb3 f1f2 	udiv	r1, r3, r2
 800246a:	fb01 f202 	mul.w	r2, r1, r2
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <read_audio_file+0xc6>
	{
		nrFrames++;
 8002474:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8002478:	3301      	adds	r3, #1
 800247a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	}

	uint8_t index = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	char tempBuffer[n];
 8002484:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002488:	3b01      	subs	r3, #1
 800248a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800248e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002492:	2200      	movs	r2, #0
 8002494:	4698      	mov	r8, r3
 8002496:	4691      	mov	r9, r2
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ac:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80024b0:	2200      	movs	r2, #0
 80024b2:	461c      	mov	r4, r3
 80024b4:	4615      	mov	r5, r2
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	00eb      	lsls	r3, r5, #3
 80024c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024c4:	00e2      	lsls	r2, r4, #3
 80024c6:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80024ca:	3307      	adds	r3, #7
 80024cc:	08db      	lsrs	r3, r3, #3
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	ebad 0d03 	sub.w	sp, sp, r3
 80024d4:	466b      	mov	r3, sp
 80024d6:	3300      	adds	r3, #0
 80024d8:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 80024dc:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	f107 0018 	add.w	r0, r7, #24
 80024ea:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80024ee:	f008 fce5 	bl	800aebc <f_read>
	tempBuffer[byteRead] = '\n';
 80024f2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80024f6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8002500:	210a      	movs	r1, #10
 8002502:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 800250a:	e040      	b.n	800258e <read_audio_file+0x1d6>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 800250c:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 8002510:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8002514:	5cd3      	ldrb	r3, [r2, r3]
 8002516:	2b0a      	cmp	r3, #10
 8002518:	d011      	beq.n	800253e <read_audio_file+0x186>
		{
			nrCharBuffer[index] = tempBuffer[i];
 800251a:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 800251e:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 8002522:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8002526:	5c89      	ldrb	r1, [r1, r2]
 8002528:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800252c:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8002530:	54d1      	strb	r1, [r2, r3]
			index++;
 8002532:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 8002536:	3301      	adds	r3, #1
 8002538:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 800253c:	e022      	b.n	8002584 <read_audio_file+0x1cc>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 800253e:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 8002542:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002546:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 800254a:	210a      	movs	r1, #10
 800254c:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 800254e:	f107 030c 	add.w	r3, r7, #12
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff07 	bl	8002366 <string_to_int>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002560:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	601a      	str	r2, [r3, #0]
			buffer++;
 8002568:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800256c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002570:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002574:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	3204      	adds	r2, #4
 800257c:	601a      	str	r2, [r3, #0]

			index = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	for(uint16_t i=0; i< byteRead; i++)
 8002584:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 8002588:	3301      	adds	r3, #1
 800258a:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 800258e:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 8002592:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002596:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d3b5      	bcc.n	800250c <read_audio_file+0x154>


	}


	if(currentFrame == nrFrames)
 80025a0:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <read_audio_file+0x250>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d108      	bne.n	80025c0 <read_audio_file+0x208>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 80025ae:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <read_audio_file+0x24c>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 80025b4:	f107 0318 	add.w	r3, r7, #24
 80025b8:	4618      	mov	r0, r3
 80025ba:	f008 fe3c 	bl	800b236 <f_close>
		return;
 80025be:	e018      	b.n	80025f2 <read_audio_file+0x23a>
	}

	currentFrame++;
 80025c0:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <read_audio_file+0x250>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <read_audio_file+0x250>)
 80025ca:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 80025cc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80025d0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002600 <read_audio_file+0x248>)
 80025d8:	6013      	str	r3, [r2, #0]
	currentPosition++;
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <read_audio_file+0x248>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3301      	adds	r3, #1
 80025e0:	4a07      	ldr	r2, [pc, #28]	@ (8002600 <read_audio_file+0x248>)
 80025e2:	6013      	str	r3, [r2, #0]

	f_close(&file);
 80025e4:	f107 0318 	add.w	r3, r7, #24
 80025e8:	4618      	mov	r0, r3
 80025ea:	f008 fe24 	bl	800b236 <f_close>
 80025ee:	46b5      	mov	sp, r6
 80025f0:	e000      	b.n	80025f4 <read_audio_file+0x23c>
		return;
 80025f2:	46b5      	mov	sp, r6


}
 80025f4:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 80025f8:	46bd      	mov	sp, r7
 80025fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025fe:	bf00      	nop
 8002600:	2000055c 	.word	0x2000055c
 8002604:	20000008 	.word	0x20000008
 8002608:	20000560 	.word	0x20000560
 800260c:	20000564 	.word	0x20000564

08002610 <read_image_file>:


void read_image_file(char *filePathName, ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 8002610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002614:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8002618:	af00      	add	r7, sp, #0
 800261a:	f507 7616 	add.w	r6, r7, #600	@ 0x258
 800261e:	f5a6 7613 	sub.w	r6, r6, #588	@ 0x24c
 8002622:	6030      	str	r0, [r6, #0]
 8002624:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8002628:	f5a0 7014 	sub.w	r0, r0, #592	@ 0x250
 800262c:	6001      	str	r1, [r0, #0]
 800262e:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8002632:	f5a1 7115 	sub.w	r1, r1, #596	@ 0x254
 8002636:	600a      	str	r2, [r1, #0]
 8002638:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800263c:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	466b      	mov	r3, sp
 8002644:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8002646:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800264a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800264e:	f107 001c 	add.w	r0, r7, #28
 8002652:	2201      	movs	r2, #1
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	f008 fa77 	bl	800ab48 <f_open>
 800265a:	4603      	mov	r3, r0
 800265c:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 8002660:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 8002664:	2b00      	cmp	r3, #0
 8002666:	f040 81b0 	bne.w	80029ca <read_image_file+0x3ba>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 800266a:	4ba9      	ldr	r3, [pc, #676]	@ (8002910 <read_image_file+0x300>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80d6 	beq.w	8002820 <read_image_file+0x210>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8002674:	4ba7      	ldr	r3, [pc, #668]	@ (8002914 <read_image_file+0x304>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 800267a:	4ba6      	ldr	r3, [pc, #664]	@ (8002914 <read_image_file+0x304>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f008 fe00 	bl	800b28a <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 800268a:	f107 0318 	add.w	r3, r7, #24
 800268e:	f107 0114 	add.w	r1, r7, #20
 8002692:	f107 001c 	add.w	r0, r7, #28
 8002696:	2204      	movs	r2, #4
 8002698:	f008 fc10 	bl	800aebc <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 800269c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80026a0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 80026aa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80026ae:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2200      	movs	r2, #0
 80026b6:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 80026b8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80026bc:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80026cc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80026d0:	785b      	ldrb	r3, [r3, #1]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	b21a      	sxth	r2, r3
 80026d8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80026dc:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 80026e6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80026ea:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	430b      	orrs	r3, r1
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b21a      	sxth	r2, r3
 80026fa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80026fe:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8002706:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800270a:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002714:	461a      	mov	r2, r3
 8002716:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800271a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800271e:	78db      	ldrb	r3, [r3, #3]
 8002720:	4313      	orrs	r3, r2
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	b21a      	sxth	r2, r3
 8002726:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800272a:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8002734:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002738:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800273c:	789b      	ldrb	r3, [r3, #2]
 800273e:	b21b      	sxth	r3, r3
 8002740:	430b      	orrs	r3, r1
 8002742:	b21b      	sxth	r3, r3
 8002744:	4313      	orrs	r3, r2
 8002746:	b21a      	sxth	r2, r3
 8002748:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800274c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 8002754:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002758:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002762:	461a      	mov	r2, r3
 8002764:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002768:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277a:	da1f      	bge.n	80027bc <read_image_file+0x1ac>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 800277c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002780:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800278a:	461a      	mov	r2, r3
 800278c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002790:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800279a:	fb03 f202 	mul.w	r2, r3, r2
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f008 ffd5 	bl	800b754 <malloc>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461a      	mov	r2, r3
 80027ae:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80027b2:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	e00b      	b.n	80027d4 <read_image_file+0x1c4>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->data = malloc(sizeof(char)*3072);
 80027bc:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80027c0:	f008 ffc8 	bl	800b754 <malloc>
 80027c4:	4603      	mov	r3, r0
 80027c6:	461a      	mov	r2, r3
 80027c8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80027cc:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 80027d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002910 <read_image_file+0x300>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 80027da:	4b4f      	ldr	r3, [pc, #316]	@ (8002918 <read_image_file+0x308>)
 80027dc:	2200      	movs	r2, #0
 80027de:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 80027e0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80027e4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002914 <read_image_file+0x304>)
 80027ec:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 80027ee:	4b49      	ldr	r3, [pc, #292]	@ (8002914 <read_image_file+0x304>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f008 fd46 	bl	800b28a <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 80027fe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002802:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	3b04      	subs	r3, #4
 800280a:	4a44      	ldr	r2, [pc, #272]	@ (800291c <read_image_file+0x30c>)
 800280c:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 800280e:	4b43      	ldr	r3, [pc, #268]	@ (800291c <read_image_file+0x30c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a43      	ldr	r2, [pc, #268]	@ (8002920 <read_image_file+0x310>)
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	fbb3 f3f2 	udiv	r3, r3, r2
 800281a:	4a42      	ldr	r2, [pc, #264]	@ (8002924 <read_image_file+0x314>)
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e007      	b.n	8002830 <read_image_file+0x220>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8002820:	4b3c      	ldr	r3, [pc, #240]	@ (8002914 <read_image_file+0x304>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f008 fd2d 	bl	800b28a <f_lseek>
	}



	if(fileSize == n)
 8002830:	4b3a      	ldr	r3, [pc, #232]	@ (800291c <read_image_file+0x30c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a3a      	ldr	r2, [pc, #232]	@ (8002920 <read_image_file+0x310>)
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	4293      	cmp	r3, r2
 800283a:	d104      	bne.n	8002846 <read_image_file+0x236>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 800283c:	4b39      	ldr	r3, [pc, #228]	@ (8002924 <read_image_file+0x314>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3b01      	subs	r3, #1
 8002842:	4a38      	ldr	r2, [pc, #224]	@ (8002924 <read_image_file+0x314>)
 8002844:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 8002846:	4b35      	ldr	r3, [pc, #212]	@ (800291c <read_image_file+0x30c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a35      	ldr	r2, [pc, #212]	@ (8002920 <read_image_file+0x310>)
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002852:	fb01 f202 	mul.w	r2, r1, r2
 8002856:	1a9b      	subs	r3, r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <read_image_file+0x25e>
 800285c:	4b31      	ldr	r3, [pc, #196]	@ (8002924 <read_image_file+0x314>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <read_image_file+0x25e>
	{
		nrFrames++;
 8002864:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <read_image_file+0x314>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	4a2e      	ldr	r2, [pc, #184]	@ (8002924 <read_image_file+0x314>)
 800286c:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 800286e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002872:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2200      	movs	r2, #0
 800287a:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 800287c:	4b28      	ldr	r3, [pc, #160]	@ (8002920 <read_image_file+0x310>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3b01      	subs	r3, #1
 8002882:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8002886:	4b26      	ldr	r3, [pc, #152]	@ (8002920 <read_image_file+0x310>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	2300      	movs	r3, #0
 800288e:	4690      	mov	r8, r2
 8002890:	4699      	mov	r9, r3
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800289e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002920 <read_image_file+0x310>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	2300      	movs	r3, #0
 80028ae:	4614      	mov	r4, r2
 80028b0:	461d      	mov	r5, r3
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	00eb      	lsls	r3, r5, #3
 80028bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c0:	00e2      	lsls	r2, r4, #3
 80028c2:	4b17      	ldr	r3, [pc, #92]	@ (8002920 <read_image_file+0x310>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3307      	adds	r3, #7
 80028c8:	08db      	lsrs	r3, r3, #3
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	ebad 0d03 	sub.w	sp, sp, r3
 80028d0:	466b      	mov	r3, sp
 80028d2:	3300      	adds	r3, #0
 80028d4:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 80028d8:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <read_image_file+0x310>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	f107 0318 	add.w	r3, r7, #24
 80028e2:	f107 001c 	add.w	r0, r7, #28
 80028e6:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 80028ea:	f008 fae7 	bl	800aebc <f_read>
	(*indexFlag) = byteRead;
 80028ee:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028f2:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028fe:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 8002906:	2300      	movs	r3, #0
 8002908:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 800290c:	e020      	b.n	8002950 <read_image_file+0x340>
 800290e:	bf00      	nop
 8002910:	20000009 	.word	0x20000009
 8002914:	20000568 	.word	0x20000568
 8002918:	2000056c 	.word	0x2000056c
 800291c:	20000570 	.word	0x20000570
 8002920:	0800c8d4 	.word	0x0800c8d4
 8002924:	20000574 	.word	0x20000574
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->data[i] = tempBuffer[i];
 8002928:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 800292c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002930:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68d9      	ldr	r1, [r3, #12]
 8002938:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 800293c:	440b      	add	r3, r1
 800293e:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002942:	5c8a      	ldrb	r2, [r1, r2]
 8002944:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 8002946:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 800294a:	3301      	adds	r3, #1
 800294c:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8002950:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8002954:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002958:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d3e2      	bcc.n	8002928 <read_image_file+0x318>

	}


	currentFrame++;
 8002962:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <read_image_file+0x3c8>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	3301      	adds	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <read_image_file+0x3c8>)
 800296c:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 800296e:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <read_image_file+0x3c8>)
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <read_image_file+0x3cc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d208      	bcs.n	800298e <read_image_file+0x37e>
 800297c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002980:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800298c:	d20f      	bcs.n	80029ae <read_image_file+0x39e>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 800298e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002992:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 800299c:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <read_image_file+0x3d0>)
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	4618      	mov	r0, r3
 80029a8:	f008 fc45 	bl	800b236 <f_close>
		return;
 80029ac:	e00d      	b.n	80029ca <read_image_file+0x3ba>
	}


	currentPosition = f_tell(&file);
 80029ae:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029b2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4a0a      	ldr	r2, [pc, #40]	@ (80029e4 <read_image_file+0x3d4>)
 80029ba:	6013      	str	r3, [r2, #0]


	f_close(&file);
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	4618      	mov	r0, r3
 80029c2:	f008 fc38 	bl	800b236 <f_close>
 80029c6:	46b5      	mov	sp, r6
 80029c8:	e000      	b.n	80029cc <read_image_file+0x3bc>
		return;
 80029ca:	46b5      	mov	sp, r6


}
 80029cc:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 80029d0:	46bd      	mov	sp, r7
 80029d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029d6:	bf00      	nop
 80029d8:	2000056c 	.word	0x2000056c
 80029dc:	20000574 	.word	0x20000574
 80029e0:	20000009 	.word	0x20000009
 80029e4:	20000568 	.word	0x20000568

080029e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	4b10      	ldr	r3, [pc, #64]	@ (8002a34 <HAL_MspInit+0x4c>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002a34 <HAL_MspInit+0x4c>)
 80029f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002a34 <HAL_MspInit+0x4c>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <HAL_MspInit+0x4c>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	4a08      	ldr	r2, [pc, #32]	@ (8002a34 <HAL_MspInit+0x4c>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_MspInit+0x4c>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800

08002a38 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	@ 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a30      	ldr	r2, [pc, #192]	@ (8002b18 <HAL_DAC_MspInit+0xe0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d159      	bne.n	8002b0e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b1c <HAL_DAC_MspInit+0xe4>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	4a2e      	ldr	r2, [pc, #184]	@ (8002b1c <HAL_DAC_MspInit+0xe4>)
 8002a64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <HAL_DAC_MspInit+0xe4>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b28      	ldr	r3, [pc, #160]	@ (8002b1c <HAL_DAC_MspInit+0xe4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	4a27      	ldr	r2, [pc, #156]	@ (8002b1c <HAL_DAC_MspInit+0xe4>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a86:	4b25      	ldr	r3, [pc, #148]	@ (8002b1c <HAL_DAC_MspInit+0xe4>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a92:	2310      	movs	r3, #16
 8002a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a96:	2303      	movs	r3, #3
 8002a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	481e      	ldr	r0, [pc, #120]	@ (8002b20 <HAL_DAC_MspInit+0xe8>)
 8002aa6:	f001 fa27 	bl	8003ef8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002aac:	4a1e      	ldr	r2, [pc, #120]	@ (8002b28 <HAL_DAC_MspInit+0xf0>)
 8002aae:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002ab2:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002ab6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002aba:	2240      	movs	r2, #64	@ 0x40
 8002abc:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002abe:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002ac4:	4b17      	ldr	r3, [pc, #92]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aca:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002acc:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002ace:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ad2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ad4:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002ad6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ada:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002ade:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ae2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002ae6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002aea:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aec:	4b0d      	ldr	r3, [pc, #52]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002af2:	480c      	ldr	r0, [pc, #48]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002af4:	f000 fdfe 	bl	80036f4 <HAL_DMA_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002afe:	f7ff fbbf 	bl	8002280 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a07      	ldr	r2, [pc, #28]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	4a06      	ldr	r2, [pc, #24]	@ (8002b24 <HAL_DAC_MspInit+0xec>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002b0e:	bf00      	nop
 8002b10:	3728      	adds	r7, #40	@ 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40007400 	.word	0x40007400
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40020000 	.word	0x40020000
 8002b24:	2000009c 	.word	0x2000009c
 8002b28:	40026088 	.word	0x40026088

08002b2c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	@ 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a31      	ldr	r2, [pc, #196]	@ (8002c10 <HAL_SD_MspInit+0xe4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d15b      	bne.n	8002c06 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	4b30      	ldr	r3, [pc, #192]	@ (8002c14 <HAL_SD_MspInit+0xe8>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	4a2f      	ldr	r2, [pc, #188]	@ (8002c14 <HAL_SD_MspInit+0xe8>)
 8002b58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c14 <HAL_SD_MspInit+0xe8>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b29      	ldr	r3, [pc, #164]	@ (8002c14 <HAL_SD_MspInit+0xe8>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	4a28      	ldr	r2, [pc, #160]	@ (8002c14 <HAL_SD_MspInit+0xe8>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7a:	4b26      	ldr	r3, [pc, #152]	@ (8002c14 <HAL_SD_MspInit+0xe8>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <HAL_SD_MspInit+0xe8>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a21      	ldr	r2, [pc, #132]	@ (8002c14 <HAL_SD_MspInit+0xe8>)
 8002b90:	f043 0308 	orr.w	r3, r3, #8
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b1f      	ldr	r3, [pc, #124]	@ (8002c14 <HAL_SD_MspInit+0xe8>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bac:	2301      	movs	r3, #1
 8002bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002bb4:	230c      	movs	r3, #12
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4816      	ldr	r0, [pc, #88]	@ (8002c18 <HAL_SD_MspInit+0xec>)
 8002bc0:	f001 f99a 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002bd6:	230c      	movs	r3, #12
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	480d      	ldr	r0, [pc, #52]	@ (8002c18 <HAL_SD_MspInit+0xec>)
 8002be2:	f001 f989 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002be6:	2304      	movs	r3, #4
 8002be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002bf6:	230c      	movs	r3, #12
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4806      	ldr	r0, [pc, #24]	@ (8002c1c <HAL_SD_MspInit+0xf0>)
 8002c02:	f001 f979 	bl	8003ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002c06:	bf00      	nop
 8002c08:	3728      	adds	r7, #40	@ 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020800 	.word	0x40020800
 8002c1c:	40020c00 	.word	0x40020c00

08002c20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	@ 0x28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a47      	ldr	r2, [pc, #284]	@ (8002d5c <HAL_SPI_MspInit+0x13c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	f040 8088 	bne.w	8002d54 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	4b45      	ldr	r3, [pc, #276]	@ (8002d60 <HAL_SPI_MspInit+0x140>)
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4c:	4a44      	ldr	r2, [pc, #272]	@ (8002d60 <HAL_SPI_MspInit+0x140>)
 8002c4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c52:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c54:	4b42      	ldr	r3, [pc, #264]	@ (8002d60 <HAL_SPI_MspInit+0x140>)
 8002c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	4b3e      	ldr	r3, [pc, #248]	@ (8002d60 <HAL_SPI_MspInit+0x140>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	4a3d      	ldr	r2, [pc, #244]	@ (8002d60 <HAL_SPI_MspInit+0x140>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c70:	4b3b      	ldr	r3, [pc, #236]	@ (8002d60 <HAL_SPI_MspInit+0x140>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c7c:	23e0      	movs	r3, #224	@ 0xe0
 8002c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c8c:	2305      	movs	r3, #5
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	4619      	mov	r1, r3
 8002c96:	4833      	ldr	r0, [pc, #204]	@ (8002d64 <HAL_SPI_MspInit+0x144>)
 8002c98:	f001 f92e 	bl	8003ef8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002c9c:	4b32      	ldr	r3, [pc, #200]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002c9e:	4a33      	ldr	r2, [pc, #204]	@ (8002d6c <HAL_SPI_MspInit+0x14c>)
 8002ca0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002ca2:	4b31      	ldr	r3, [pc, #196]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002ca4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002ca8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002caa:	4b2f      	ldr	r3, [pc, #188]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002cac:	2240      	movs	r2, #64	@ 0x40
 8002cae:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002cb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cbc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cc4:	4b28      	ldr	r3, [pc, #160]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002cca:	4b27      	ldr	r3, [pc, #156]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cd0:	4b25      	ldr	r3, [pc, #148]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cd6:	4b24      	ldr	r3, [pc, #144]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002cdc:	4822      	ldr	r0, [pc, #136]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002cde:	f000 fd09 	bl	80036f4 <HAL_DMA_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002ce8:	f7ff faca 	bl	8002280 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a1e      	ldr	r2, [pc, #120]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002cf0:	649a      	str	r2, [r3, #72]	@ 0x48
 8002cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d68 <HAL_SPI_MspInit+0x148>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002d74 <HAL_SPI_MspInit+0x154>)
 8002cfc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d00:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002d04:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d06:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d0c:	4b18      	ldr	r3, [pc, #96]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d12:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d18:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d1a:	4b15      	ldr	r3, [pc, #84]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d20:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002d26:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d2c:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d32:	4b0f      	ldr	r3, [pc, #60]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002d38:	480d      	ldr	r0, [pc, #52]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d3a:	f000 fcdb 	bl	80036f4 <HAL_DMA_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002d44:	f7ff fa9c 	bl	8002280 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a09      	ldr	r2, [pc, #36]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d4c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d4e:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <HAL_SPI_MspInit+0x150>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d54:	bf00      	nop
 8002d56:	3728      	adds	r7, #40	@ 0x28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40013000 	.word	0x40013000
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40020000 	.word	0x40020000
 8002d68:	200001d8 	.word	0x200001d8
 8002d6c:	40026458 	.word	0x40026458
 8002d70:	20000238 	.word	0x20000238
 8002d74:	40026410 	.word	0x40026410

08002d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d88:	d10d      	bne.n	8002da6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <HAL_TIM_Base_MspInit+0x3c>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	4a08      	ldr	r2, [pc, #32]	@ (8002db4 <HAL_TIM_Base_MspInit+0x3c>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_TIM_Base_MspInit+0x3c>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	@ 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e4c <HAL_UART_MspInit+0x94>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d134      	bne.n	8002e44 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	4b1c      	ldr	r3, [pc, #112]	@ (8002e50 <HAL_UART_MspInit+0x98>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e50 <HAL_UART_MspInit+0x98>)
 8002de4:	f043 0310 	orr.w	r3, r3, #16
 8002de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dea:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <HAL_UART_MspInit+0x98>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <HAL_UART_MspInit+0x98>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	4a14      	ldr	r2, [pc, #80]	@ (8002e50 <HAL_UART_MspInit+0x98>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e06:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_UART_MspInit+0x98>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e12:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e20:	2303      	movs	r3, #3
 8002e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e24:	2307      	movs	r3, #7
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4809      	ldr	r0, [pc, #36]	@ (8002e54 <HAL_UART_MspInit+0x9c>)
 8002e30:	f001 f862 	bl	8003ef8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	2025      	movs	r0, #37	@ 0x25
 8002e3a:	f000 fa48 	bl	80032ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e3e:	2025      	movs	r0, #37	@ 0x25
 8002e40:	f000 fa61 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e44:	bf00      	nop
 8002e46:	3728      	adds	r7, #40	@ 0x28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40011000 	.word	0x40011000
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40020000 	.word	0x40020000

08002e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <NMI_Handler+0x4>

08002e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e64:	bf00      	nop
 8002e66:	e7fd      	b.n	8002e64 <HardFault_Handler+0x4>

08002e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e6c:	bf00      	nop
 8002e6e:	e7fd      	b.n	8002e6c <MemManage_Handler+0x4>

08002e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <BusFault_Handler+0x4>

08002e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e7c:	bf00      	nop
 8002e7e:	e7fd      	b.n	8002e7c <UsageFault_Handler+0x4>

08002e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eae:	f000 f8ef 	bl	8003090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002ebc:	4802      	ldr	r0, [pc, #8]	@ (8002ec8 <DMA1_Stream5_IRQHandler+0x10>)
 8002ebe:	f000 fdb1 	bl	8003a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	2000009c 	.word	0x2000009c

08002ecc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ed0:	4802      	ldr	r0, [pc, #8]	@ (8002edc <USART1_IRQHandler+0x10>)
 8002ed2:	f004 fb39 	bl	8007548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200002e0 	.word	0x200002e0

08002ee0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002ee4:	4802      	ldr	r0, [pc, #8]	@ (8002ef0 <DMA2_Stream0_IRQHandler+0x10>)
 8002ee6:	f000 fd9d 	bl	8003a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000238 	.word	0x20000238

08002ef4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002ef8:	4802      	ldr	r0, [pc, #8]	@ (8002f04 <DMA2_Stream3_IRQHandler+0x10>)
 8002efa:	f000 fd93 	bl	8003a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	200001d8 	.word	0x200001d8

08002f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f10:	4a14      	ldr	r2, [pc, #80]	@ (8002f64 <_sbrk+0x5c>)
 8002f12:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <_sbrk+0x60>)
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f1c:	4b13      	ldr	r3, [pc, #76]	@ (8002f6c <_sbrk+0x64>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f24:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <_sbrk+0x64>)
 8002f26:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <_sbrk+0x68>)
 8002f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f2a:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <_sbrk+0x64>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4413      	add	r3, r2
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d207      	bcs.n	8002f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f38:	f008 fd18 	bl	800b96c <__errno>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	220c      	movs	r2, #12
 8002f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	e009      	b.n	8002f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f48:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <_sbrk+0x64>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f4e:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <_sbrk+0x64>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	4a05      	ldr	r2, [pc, #20]	@ (8002f6c <_sbrk+0x64>)
 8002f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20020000 	.word	0x20020000
 8002f68:	00000400 	.word	0x00000400
 8002f6c:	20000578 	.word	0x20000578
 8002f70:	20000708 	.word	0x20000708

08002f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f78:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <SystemInit+0x20>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	4a05      	ldr	r2, [pc, #20]	@ (8002f94 <SystemInit+0x20>)
 8002f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f9c:	f7ff ffea 	bl	8002f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fa0:	480c      	ldr	r0, [pc, #48]	@ (8002fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fa2:	490d      	ldr	r1, [pc, #52]	@ (8002fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa8:	e002      	b.n	8002fb0 <LoopCopyDataInit>

08002faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fae:	3304      	adds	r3, #4

08002fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb4:	d3f9      	bcc.n	8002faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fbc:	e001      	b.n	8002fc2 <LoopFillZerobss>

08002fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc0:	3204      	adds	r2, #4

08002fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc4:	d3fb      	bcc.n	8002fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fc6:	f008 fcd7 	bl	800b978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fca:	f7fe fc33 	bl	8001834 <main>
  bx  lr    
 8002fce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002fdc:	0800c99c 	.word	0x0800c99c
  ldr r2, =_sbss
 8002fe0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002fe4:	20000704 	.word	0x20000704

08002fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe8:	e7fe      	b.n	8002fe8 <ADC_IRQHandler>
	...

08002fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <HAL_Init+0x40>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800302c <HAL_Init+0x40>)
 8002ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_Init+0x40>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0a      	ldr	r2, [pc, #40]	@ (800302c <HAL_Init+0x40>)
 8003002:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003008:	4b08      	ldr	r3, [pc, #32]	@ (800302c <HAL_Init+0x40>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a07      	ldr	r2, [pc, #28]	@ (800302c <HAL_Init+0x40>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003014:	2003      	movs	r0, #3
 8003016:	f000 f94f 	bl	80032b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800301a:	200f      	movs	r0, #15
 800301c:	f000 f808 	bl	8003030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003020:	f7ff fce2 	bl	80029e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023c00 	.word	0x40023c00

08003030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003038:	4b12      	ldr	r3, [pc, #72]	@ (8003084 <HAL_InitTick+0x54>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b12      	ldr	r3, [pc, #72]	@ (8003088 <HAL_InitTick+0x58>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4619      	mov	r1, r3
 8003042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003046:	fbb3 f3f1 	udiv	r3, r3, r1
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f967 	bl	8003322 <HAL_SYSTICK_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e00e      	b.n	800307c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b0f      	cmp	r3, #15
 8003062:	d80a      	bhi.n	800307a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003064:	2200      	movs	r2, #0
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f000 f92f 	bl	80032ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003070:	4a06      	ldr	r2, [pc, #24]	@ (800308c <HAL_InitTick+0x5c>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	2000000c 	.word	0x2000000c
 8003088:	20000014 	.word	0x20000014
 800308c:	20000010 	.word	0x20000010

08003090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003094:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_IncTick+0x20>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_IncTick+0x24>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	4a04      	ldr	r2, [pc, #16]	@ (80030b4 <HAL_IncTick+0x24>)
 80030a2:	6013      	str	r3, [r2, #0]
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000014 	.word	0x20000014
 80030b4:	2000057c 	.word	0x2000057c

080030b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return uwTick;
 80030bc:	4b03      	ldr	r3, [pc, #12]	@ (80030cc <HAL_GetTick+0x14>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	2000057c 	.word	0x2000057c

080030d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff ffee 	bl	80030b8 <HAL_GetTick>
 80030dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d005      	beq.n	80030f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <HAL_Delay+0x44>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030f6:	bf00      	nop
 80030f8:	f7ff ffde 	bl	80030b8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	429a      	cmp	r2, r3
 8003106:	d8f7      	bhi.n	80030f8 <HAL_Delay+0x28>
  {
  }
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000014 	.word	0x20000014

08003118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003128:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003134:	4013      	ands	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314a:	4a04      	ldr	r2, [pc, #16]	@ (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	60d3      	str	r3, [r2, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003164:	4b04      	ldr	r3, [pc, #16]	@ (8003178 <__NVIC_GetPriorityGrouping+0x18>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 0307 	and.w	r3, r3, #7
}
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db0b      	blt.n	80031a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	4907      	ldr	r1, [pc, #28]	@ (80031b4 <__NVIC_EnableIRQ+0x38>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2001      	movs	r0, #1
 800319e:	fa00 f202 	lsl.w	r2, r0, r2
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000e100 	.word	0xe000e100

080031b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	6039      	str	r1, [r7, #0]
 80031c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	db0a      	blt.n	80031e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	490c      	ldr	r1, [pc, #48]	@ (8003204 <__NVIC_SetPriority+0x4c>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	440b      	add	r3, r1
 80031dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e0:	e00a      	b.n	80031f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4908      	ldr	r1, [pc, #32]	@ (8003208 <__NVIC_SetPriority+0x50>)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	3b04      	subs	r3, #4
 80031f0:	0112      	lsls	r2, r2, #4
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	440b      	add	r3, r1
 80031f6:	761a      	strb	r2, [r3, #24]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000e100 	.word	0xe000e100
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	@ 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f1c3 0307 	rsb	r3, r3, #7
 8003226:	2b04      	cmp	r3, #4
 8003228:	bf28      	it	cs
 800322a:	2304      	movcs	r3, #4
 800322c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3304      	adds	r3, #4
 8003232:	2b06      	cmp	r3, #6
 8003234:	d902      	bls.n	800323c <NVIC_EncodePriority+0x30>
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3b03      	subs	r3, #3
 800323a:	e000      	b.n	800323e <NVIC_EncodePriority+0x32>
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	f04f 32ff 	mov.w	r2, #4294967295
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	401a      	ands	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003254:	f04f 31ff 	mov.w	r1, #4294967295
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	43d9      	mvns	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	4313      	orrs	r3, r2
         );
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	@ 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003284:	d301      	bcc.n	800328a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003286:	2301      	movs	r3, #1
 8003288:	e00f      	b.n	80032aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800328a:	4a0a      	ldr	r2, [pc, #40]	@ (80032b4 <SysTick_Config+0x40>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003292:	210f      	movs	r1, #15
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	f7ff ff8e 	bl	80031b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800329c:	4b05      	ldr	r3, [pc, #20]	@ (80032b4 <SysTick_Config+0x40>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032a2:	4b04      	ldr	r3, [pc, #16]	@ (80032b4 <SysTick_Config+0x40>)
 80032a4:	2207      	movs	r2, #7
 80032a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	e000e010 	.word	0xe000e010

080032b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ff29 	bl	8003118 <__NVIC_SetPriorityGrouping>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e0:	f7ff ff3e 	bl	8003160 <__NVIC_GetPriorityGrouping>
 80032e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	6978      	ldr	r0, [r7, #20]
 80032ec:	f7ff ff8e 	bl	800320c <NVIC_EncodePriority>
 80032f0:	4602      	mov	r2, r0
 80032f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff5d 	bl	80031b8 <__NVIC_SetPriority>
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff31 	bl	800317c <__NVIC_EnableIRQ>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ffa2 	bl	8003274 <SysTick_Config>
 8003330:	4603      	mov	r3, r0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e014      	b.n	8003376 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	791b      	ldrb	r3, [r3, #4]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fb6b 	bl	8002a38 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0a2      	b.n	80034e2 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	795b      	ldrb	r3, [r3, #5]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_DAC_Start_DMA+0x28>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e09c      	b.n	80034e2 <HAL_DAC_Start_DMA+0x162>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2202      	movs	r2, #2
 80033b2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d129      	bne.n	800340e <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	4a4b      	ldr	r2, [pc, #300]	@ (80034ec <HAL_DAC_Start_DMA+0x16c>)
 80033c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	4a4a      	ldr	r2, [pc, #296]	@ (80034f0 <HAL_DAC_Start_DMA+0x170>)
 80033c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	4a49      	ldr	r2, [pc, #292]	@ (80034f4 <HAL_DAC_Start_DMA+0x174>)
 80033d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033e0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_DAC_Start_DMA+0x70>
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d005      	beq.n	80033fa <HAL_DAC_Start_DMA+0x7a>
 80033ee:	e009      	b.n	8003404 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3308      	adds	r3, #8
 80033f6:	613b      	str	r3, [r7, #16]
        break;
 80033f8:	e033      	b.n	8003462 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	613b      	str	r3, [r7, #16]
        break;
 8003402:	e02e      	b.n	8003462 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3310      	adds	r3, #16
 800340a:	613b      	str	r3, [r7, #16]
        break;
 800340c:	e029      	b.n	8003462 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	4a39      	ldr	r2, [pc, #228]	@ (80034f8 <HAL_DAC_Start_DMA+0x178>)
 8003414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	4a38      	ldr	r2, [pc, #224]	@ (80034fc <HAL_DAC_Start_DMA+0x17c>)
 800341c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4a37      	ldr	r2, [pc, #220]	@ (8003500 <HAL_DAC_Start_DMA+0x180>)
 8003424:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003434:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_DAC_Start_DMA+0xc4>
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	2b04      	cmp	r3, #4
 8003440:	d005      	beq.n	800344e <HAL_DAC_Start_DMA+0xce>
 8003442:	e009      	b.n	8003458 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3314      	adds	r3, #20
 800344a:	613b      	str	r3, [r7, #16]
        break;
 800344c:	e009      	b.n	8003462 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3318      	adds	r3, #24
 8003454:	613b      	str	r3, [r7, #16]
        break;
 8003456:	e004      	b.n	8003462 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	331c      	adds	r3, #28
 800345e:	613b      	str	r3, [r7, #16]
        break;
 8003460:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d111      	bne.n	800348c <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003476:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6898      	ldr	r0, [r3, #8]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	f000 f9e5 	bl	8003850 <HAL_DMA_Start_IT>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]
 800348a:	e010      	b.n	80034ae <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800349a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68d8      	ldr	r0, [r3, #12]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	f000 f9d3 	bl	8003850 <HAL_DMA_Start_IT>
 80034aa:	4603      	mov	r3, r0
 80034ac:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10c      	bne.n	80034d4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2201      	movs	r2, #1
 80034c8:	409a      	lsls	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e005      	b.n	80034e0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f043 0204 	orr.w	r2, r3, #4
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	080035df 	.word	0x080035df
 80034f0:	08003601 	.word	0x08003601
 80034f4:	0800361d 	.word	0x0800361d
 80034f8:	08003687 	.word	0x08003687
 80034fc:	080036a9 	.word	0x080036a9
 8003500:	080036c5 	.word	0x080036c5

08003504 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	@ 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_DAC_ConfigChannel+0x1c>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e042      	b.n	80035d2 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	795b      	ldrb	r3, [r3, #5]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_DAC_ConfigChannel+0x2c>
 8003554:	2302      	movs	r3, #2
 8003556:	e03c      	b.n	80035d2 <HAL_DAC_ConfigChannel+0xa6>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2202      	movs	r2, #2
 8003562:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6819      	ldr	r1, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	22c0      	movs	r2, #192	@ 0xc0
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	400a      	ands	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80035d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	@ 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ea:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7ff ff89 	bl	8003504 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	711a      	strb	r2, [r3, #4]
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7fe f900 	bl	8001814 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003614:	bf00      	nop
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003628:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f043 0204 	orr.w	r2, r3, #4
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7ff ff6e 	bl	8003518 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	711a      	strb	r2, [r3, #4]
}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003692:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff ffd8 	bl	800364a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	711a      	strb	r2, [r3, #4]
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff ffd1 	bl	800365e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7ff ffc7 	bl	8003672 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	711a      	strb	r2, [r3, #4]
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003700:	f7ff fcda 	bl	80030b8 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e099      	b.n	8003844 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003730:	e00f      	b.n	8003752 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003732:	f7ff fcc1 	bl	80030b8 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b05      	cmp	r3, #5
 800373e:	d908      	bls.n	8003752 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2203      	movs	r2, #3
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e078      	b.n	8003844 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e8      	bne.n	8003732 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4b38      	ldr	r3, [pc, #224]	@ (800384c <HAL_DMA_Init+0x158>)
 800376c:	4013      	ands	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800377e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d107      	bne.n	80037bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	4313      	orrs	r3, r2
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 0307 	bic.w	r3, r3, #7
 80037d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d117      	bne.n	8003816 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00e      	beq.n	8003816 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fb01 	bl	8003e00 <DMA_CheckFifoParam>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2240      	movs	r2, #64	@ 0x40
 8003808:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003812:	2301      	movs	r3, #1
 8003814:	e016      	b.n	8003844 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fab8 	bl	8003d94 <DMA_CalcBaseAndBitshift>
 8003824:	4603      	mov	r3, r0
 8003826:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382c:	223f      	movs	r2, #63	@ 0x3f
 800382e:	409a      	lsls	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	f010803f 	.word	0xf010803f

08003850 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_DMA_Start_IT+0x26>
 8003872:	2302      	movs	r3, #2
 8003874:	e040      	b.n	80038f8 <HAL_DMA_Start_IT+0xa8>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d12f      	bne.n	80038ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fa4a 	bl	8003d38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	223f      	movs	r2, #63	@ 0x3f
 80038aa:	409a      	lsls	r2, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0216 	orr.w	r2, r2, #22
 80038be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0208 	orr.w	r2, r2, #8
 80038d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e005      	b.n	80038f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
 80038f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800390e:	f7ff fbd3 	bl	80030b8 <HAL_GetTick>
 8003912:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d008      	beq.n	8003932 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2280      	movs	r2, #128	@ 0x80
 8003924:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e052      	b.n	80039d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0216 	bic.w	r2, r2, #22
 8003940:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003950:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <HAL_DMA_Abort+0x62>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0208 	bic.w	r2, r2, #8
 8003970:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003982:	e013      	b.n	80039ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003984:	f7ff fb98 	bl	80030b8 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b05      	cmp	r3, #5
 8003990:	d90c      	bls.n	80039ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2203      	movs	r2, #3
 800399c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e015      	b.n	80039d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e4      	bne.n	8003984 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	223f      	movs	r2, #63	@ 0x3f
 80039c0:	409a      	lsls	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d004      	beq.n	80039fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2280      	movs	r2, #128	@ 0x80
 80039f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00c      	b.n	8003a18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2205      	movs	r2, #5
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0201 	bic.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a30:	4b8e      	ldr	r3, [pc, #568]	@ (8003c6c <HAL_DMA_IRQHandler+0x248>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a8e      	ldr	r2, [pc, #568]	@ (8003c70 <HAL_DMA_IRQHandler+0x24c>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0a9b      	lsrs	r3, r3, #10
 8003a3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	2208      	movs	r2, #8
 8003a50:	409a      	lsls	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01a      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a88:	f043 0201 	orr.w	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	2201      	movs	r2, #1
 8003a96:	409a      	lsls	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abe:	f043 0202 	orr.w	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aca:	2204      	movs	r2, #4
 8003acc:	409a      	lsls	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d012      	beq.n	8003afc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00b      	beq.n	8003afc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	2204      	movs	r2, #4
 8003aea:	409a      	lsls	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af4:	f043 0204 	orr.w	r2, r3, #4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b00:	2210      	movs	r2, #16
 8003b02:	409a      	lsls	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d043      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d03c      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1e:	2210      	movs	r2, #16
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d018      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d108      	bne.n	8003b54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d024      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
 8003b52:	e01f      	b.n	8003b94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01b      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
 8003b64:	e016      	b.n	8003b94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0208 	bic.w	r2, r2, #8
 8003b82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	2220      	movs	r2, #32
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 808f 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8087 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bba:	2220      	movs	r2, #32
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b05      	cmp	r3, #5
 8003bcc:	d136      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0216 	bic.w	r2, r2, #22
 8003bdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_DMA_IRQHandler+0x1da>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0208 	bic.w	r2, r2, #8
 8003c0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c12:	223f      	movs	r2, #63	@ 0x3f
 8003c14:	409a      	lsls	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d07e      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
        }
        return;
 8003c3a:	e079      	b.n	8003d30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01d      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10d      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d031      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
 8003c68:	e02c      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
 8003c6a:	bf00      	nop
 8003c6c:	2000000c 	.word	0x2000000c
 8003c70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d023      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4798      	blx	r3
 8003c84:	e01e      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0210 	bic.w	r2, r2, #16
 8003ca2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d032      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d022      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2205      	movs	r2, #5
 8003cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d307      	bcc.n	8003d0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f2      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0x2cc>
 8003d0a:	e000      	b.n	8003d0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
 8003d2e:	e000      	b.n	8003d32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d30:	bf00      	nop
    }
  }
}
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b40      	cmp	r3, #64	@ 0x40
 8003d64:	d108      	bne.n	8003d78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d76:	e007      	b.n	8003d88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	60da      	str	r2, [r3, #12]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	3b10      	subs	r3, #16
 8003da4:	4a14      	ldr	r2, [pc, #80]	@ (8003df8 <DMA_CalcBaseAndBitshift+0x64>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dae:	4a13      	ldr	r2, [pc, #76]	@ (8003dfc <DMA_CalcBaseAndBitshift+0x68>)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d909      	bls.n	8003dd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	1d1a      	adds	r2, r3, #4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003dd4:	e007      	b.n	8003de6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	aaaaaaab 	.word	0xaaaaaaab
 8003dfc:	0800c8f0 	.word	0x0800c8f0

08003e00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d11f      	bne.n	8003e5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d856      	bhi.n	8003ece <DMA_CheckFifoParam+0xce>
 8003e20:	a201      	add	r2, pc, #4	@ (adr r2, 8003e28 <DMA_CheckFifoParam+0x28>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e39 	.word	0x08003e39
 8003e2c:	08003e4b 	.word	0x08003e4b
 8003e30:	08003e39 	.word	0x08003e39
 8003e34:	08003ecf 	.word	0x08003ecf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d046      	beq.n	8003ed2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e48:	e043      	b.n	8003ed2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e52:	d140      	bne.n	8003ed6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e58:	e03d      	b.n	8003ed6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e62:	d121      	bne.n	8003ea8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d837      	bhi.n	8003eda <DMA_CheckFifoParam+0xda>
 8003e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e70 <DMA_CheckFifoParam+0x70>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e87 	.word	0x08003e87
 8003e78:	08003e81 	.word	0x08003e81
 8003e7c:	08003e99 	.word	0x08003e99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
      break;
 8003e84:	e030      	b.n	8003ee8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d025      	beq.n	8003ede <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e96:	e022      	b.n	8003ede <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ea0:	d11f      	bne.n	8003ee2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ea6:	e01c      	b.n	8003ee2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d903      	bls.n	8003eb6 <DMA_CheckFifoParam+0xb6>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d003      	beq.n	8003ebc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003eb4:	e018      	b.n	8003ee8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8003eba:	e015      	b.n	8003ee8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00e      	beq.n	8003ee6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ecc:	e00b      	b.n	8003ee6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e00a      	b.n	8003ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed2:	bf00      	nop
 8003ed4:	e008      	b.n	8003ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e006      	b.n	8003ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8003eda:	bf00      	nop
 8003edc:	e004      	b.n	8003ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ede:	bf00      	nop
 8003ee0:	e002      	b.n	8003ee8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ee2:	bf00      	nop
 8003ee4:	e000      	b.n	8003ee8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ee6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop

08003ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b089      	sub	sp, #36	@ 0x24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	e16b      	b.n	80041ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f14:	2201      	movs	r2, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	f040 815a 	bne.w	80041e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d005      	beq.n	8003f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d130      	bne.n	8003fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	2203      	movs	r2, #3
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f80:	2201      	movs	r2, #1
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 0201 	and.w	r2, r3, #1
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d017      	beq.n	8003fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d123      	bne.n	800403c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	08da      	lsrs	r2, r3, #3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3208      	adds	r2, #8
 8003ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	220f      	movs	r2, #15
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4013      	ands	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	08da      	lsrs	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3208      	adds	r2, #8
 8004036:	69b9      	ldr	r1, [r7, #24]
 8004038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	2203      	movs	r2, #3
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 0203 	and.w	r2, r3, #3
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 80b4 	beq.w	80041e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	4b60      	ldr	r3, [pc, #384]	@ (8004204 <HAL_GPIO_Init+0x30c>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	4a5f      	ldr	r2, [pc, #380]	@ (8004204 <HAL_GPIO_Init+0x30c>)
 8004088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800408c:	6453      	str	r3, [r2, #68]	@ 0x44
 800408e:	4b5d      	ldr	r3, [pc, #372]	@ (8004204 <HAL_GPIO_Init+0x30c>)
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800409a:	4a5b      	ldr	r2, [pc, #364]	@ (8004208 <HAL_GPIO_Init+0x310>)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	3302      	adds	r3, #2
 80040a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	220f      	movs	r2, #15
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a52      	ldr	r2, [pc, #328]	@ (800420c <HAL_GPIO_Init+0x314>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d02b      	beq.n	800411e <HAL_GPIO_Init+0x226>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a51      	ldr	r2, [pc, #324]	@ (8004210 <HAL_GPIO_Init+0x318>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d025      	beq.n	800411a <HAL_GPIO_Init+0x222>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a50      	ldr	r2, [pc, #320]	@ (8004214 <HAL_GPIO_Init+0x31c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01f      	beq.n	8004116 <HAL_GPIO_Init+0x21e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004218 <HAL_GPIO_Init+0x320>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d019      	beq.n	8004112 <HAL_GPIO_Init+0x21a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a4e      	ldr	r2, [pc, #312]	@ (800421c <HAL_GPIO_Init+0x324>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_GPIO_Init+0x216>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a4d      	ldr	r2, [pc, #308]	@ (8004220 <HAL_GPIO_Init+0x328>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00d      	beq.n	800410a <HAL_GPIO_Init+0x212>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a4c      	ldr	r2, [pc, #304]	@ (8004224 <HAL_GPIO_Init+0x32c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <HAL_GPIO_Init+0x20e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004228 <HAL_GPIO_Init+0x330>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_GPIO_Init+0x20a>
 80040fe:	2307      	movs	r3, #7
 8004100:	e00e      	b.n	8004120 <HAL_GPIO_Init+0x228>
 8004102:	2308      	movs	r3, #8
 8004104:	e00c      	b.n	8004120 <HAL_GPIO_Init+0x228>
 8004106:	2306      	movs	r3, #6
 8004108:	e00a      	b.n	8004120 <HAL_GPIO_Init+0x228>
 800410a:	2305      	movs	r3, #5
 800410c:	e008      	b.n	8004120 <HAL_GPIO_Init+0x228>
 800410e:	2304      	movs	r3, #4
 8004110:	e006      	b.n	8004120 <HAL_GPIO_Init+0x228>
 8004112:	2303      	movs	r3, #3
 8004114:	e004      	b.n	8004120 <HAL_GPIO_Init+0x228>
 8004116:	2302      	movs	r3, #2
 8004118:	e002      	b.n	8004120 <HAL_GPIO_Init+0x228>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_GPIO_Init+0x228>
 800411e:	2300      	movs	r3, #0
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	f002 0203 	and.w	r2, r2, #3
 8004126:	0092      	lsls	r2, r2, #2
 8004128:	4093      	lsls	r3, r2
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004130:	4935      	ldr	r1, [pc, #212]	@ (8004208 <HAL_GPIO_Init+0x310>)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	089b      	lsrs	r3, r3, #2
 8004136:	3302      	adds	r3, #2
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800413e:	4b3b      	ldr	r3, [pc, #236]	@ (800422c <HAL_GPIO_Init+0x334>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	43db      	mvns	r3, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4013      	ands	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004162:	4a32      	ldr	r2, [pc, #200]	@ (800422c <HAL_GPIO_Init+0x334>)
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004168:	4b30      	ldr	r3, [pc, #192]	@ (800422c <HAL_GPIO_Init+0x334>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	43db      	mvns	r3, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4013      	ands	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800418c:	4a27      	ldr	r2, [pc, #156]	@ (800422c <HAL_GPIO_Init+0x334>)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004192:	4b26      	ldr	r3, [pc, #152]	@ (800422c <HAL_GPIO_Init+0x334>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	43db      	mvns	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041b6:	4a1d      	ldr	r2, [pc, #116]	@ (800422c <HAL_GPIO_Init+0x334>)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041bc:	4b1b      	ldr	r3, [pc, #108]	@ (800422c <HAL_GPIO_Init+0x334>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4013      	ands	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041e0:	4a12      	ldr	r2, [pc, #72]	@ (800422c <HAL_GPIO_Init+0x334>)
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3301      	adds	r3, #1
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b0f      	cmp	r3, #15
 80041f0:	f67f ae90 	bls.w	8003f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	3724      	adds	r7, #36	@ 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800
 8004208:	40013800 	.word	0x40013800
 800420c:	40020000 	.word	0x40020000
 8004210:	40020400 	.word	0x40020400
 8004214:	40020800 	.word	0x40020800
 8004218:	40020c00 	.word	0x40020c00
 800421c:	40021000 	.word	0x40021000
 8004220:	40021400 	.word	0x40021400
 8004224:	40021800 	.word	0x40021800
 8004228:	40021c00 	.word	0x40021c00
 800422c:	40013c00 	.word	0x40013c00

08004230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
 800423c:	4613      	mov	r3, r2
 800423e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004240:	787b      	ldrb	r3, [r7, #1]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004246:	887a      	ldrh	r2, [r7, #2]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800424c:	e003      	b.n	8004256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800424e:	887b      	ldrh	r3, [r7, #2]
 8004250:	041a      	lsls	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	619a      	str	r2, [r3, #24]
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e267      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d075      	beq.n	800436e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004282:	4b88      	ldr	r3, [pc, #544]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b04      	cmp	r3, #4
 800428c:	d00c      	beq.n	80042a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800428e:	4b85      	ldr	r3, [pc, #532]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004296:	2b08      	cmp	r3, #8
 8004298:	d112      	bne.n	80042c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429a:	4b82      	ldr	r3, [pc, #520]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042a6:	d10b      	bne.n	80042c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	4b7e      	ldr	r3, [pc, #504]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d05b      	beq.n	800436c <HAL_RCC_OscConfig+0x108>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d157      	bne.n	800436c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e242      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c8:	d106      	bne.n	80042d8 <HAL_RCC_OscConfig+0x74>
 80042ca:	4b76      	ldr	r3, [pc, #472]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a75      	ldr	r2, [pc, #468]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e01d      	b.n	8004314 <HAL_RCC_OscConfig+0xb0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0x98>
 80042e2:	4b70      	ldr	r3, [pc, #448]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a6f      	ldr	r2, [pc, #444]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b6d      	ldr	r3, [pc, #436]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a6c      	ldr	r2, [pc, #432]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e00b      	b.n	8004314 <HAL_RCC_OscConfig+0xb0>
 80042fc:	4b69      	ldr	r3, [pc, #420]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a68      	ldr	r2, [pc, #416]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	4b66      	ldr	r3, [pc, #408]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a65      	ldr	r2, [pc, #404]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 800430e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d013      	beq.n	8004344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fe fecc 	bl	80030b8 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004324:	f7fe fec8 	bl	80030b8 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	@ 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e207      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b5b      	ldr	r3, [pc, #364]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0xc0>
 8004342:	e014      	b.n	800436e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fe feb8 	bl	80030b8 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434c:	f7fe feb4 	bl	80030b8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	@ 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1f3      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435e:	4b51      	ldr	r3, [pc, #324]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0xe8>
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d063      	beq.n	8004442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800437a:	4b4a      	ldr	r3, [pc, #296]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004386:	4b47      	ldr	r3, [pc, #284]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800438e:	2b08      	cmp	r3, #8
 8004390:	d11c      	bne.n	80043cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004392:	4b44      	ldr	r3, [pc, #272]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d116      	bne.n	80043cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_RCC_OscConfig+0x152>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e1c7      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b6:	4b3b      	ldr	r3, [pc, #236]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4937      	ldr	r1, [pc, #220]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	e03a      	b.n	8004442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d020      	beq.n	8004416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d4:	4b34      	ldr	r3, [pc, #208]	@ (80044a8 <HAL_RCC_OscConfig+0x244>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fe fe6d 	bl	80030b8 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e2:	f7fe fe69 	bl	80030b8 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e1a8      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f4:	4b2b      	ldr	r3, [pc, #172]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004400:	4b28      	ldr	r3, [pc, #160]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4925      	ldr	r1, [pc, #148]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]
 8004414:	e015      	b.n	8004442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004416:	4b24      	ldr	r3, [pc, #144]	@ (80044a8 <HAL_RCC_OscConfig+0x244>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fe fe4c 	bl	80030b8 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004424:	f7fe fe48 	bl	80030b8 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e187      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004436:	4b1b      	ldr	r3, [pc, #108]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d036      	beq.n	80044bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d016      	beq.n	8004484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004456:	4b15      	ldr	r3, [pc, #84]	@ (80044ac <HAL_RCC_OscConfig+0x248>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fe fe2c 	bl	80030b8 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004464:	f7fe fe28 	bl	80030b8 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e167      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004476:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <HAL_RCC_OscConfig+0x240>)
 8004478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x200>
 8004482:	e01b      	b.n	80044bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004484:	4b09      	ldr	r3, [pc, #36]	@ (80044ac <HAL_RCC_OscConfig+0x248>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448a:	f7fe fe15 	bl	80030b8 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004490:	e00e      	b.n	80044b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004492:	f7fe fe11 	bl	80030b8 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d907      	bls.n	80044b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e150      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
 80044a4:	40023800 	.word	0x40023800
 80044a8:	42470000 	.word	0x42470000
 80044ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b0:	4b88      	ldr	r3, [pc, #544]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 80044b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1ea      	bne.n	8004492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8097 	beq.w	80045f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ce:	4b81      	ldr	r3, [pc, #516]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10f      	bne.n	80044fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	4b7d      	ldr	r3, [pc, #500]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	4a7c      	ldr	r2, [pc, #496]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ea:	4b7a      	ldr	r3, [pc, #488]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fa:	4b77      	ldr	r3, [pc, #476]	@ (80046d8 <HAL_RCC_OscConfig+0x474>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d118      	bne.n	8004538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004506:	4b74      	ldr	r3, [pc, #464]	@ (80046d8 <HAL_RCC_OscConfig+0x474>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a73      	ldr	r2, [pc, #460]	@ (80046d8 <HAL_RCC_OscConfig+0x474>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004512:	f7fe fdd1 	bl	80030b8 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451a:	f7fe fdcd 	bl	80030b8 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e10c      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452c:	4b6a      	ldr	r3, [pc, #424]	@ (80046d8 <HAL_RCC_OscConfig+0x474>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x2ea>
 8004540:	4b64      	ldr	r3, [pc, #400]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004544:	4a63      	ldr	r2, [pc, #396]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6713      	str	r3, [r2, #112]	@ 0x70
 800454c:	e01c      	b.n	8004588 <HAL_RCC_OscConfig+0x324>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b05      	cmp	r3, #5
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x30c>
 8004556:	4b5f      	ldr	r3, [pc, #380]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	4a5e      	ldr	r2, [pc, #376]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 800455c:	f043 0304 	orr.w	r3, r3, #4
 8004560:	6713      	str	r3, [r2, #112]	@ 0x70
 8004562:	4b5c      	ldr	r3, [pc, #368]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004566:	4a5b      	ldr	r2, [pc, #364]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	6713      	str	r3, [r2, #112]	@ 0x70
 800456e:	e00b      	b.n	8004588 <HAL_RCC_OscConfig+0x324>
 8004570:	4b58      	ldr	r3, [pc, #352]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004574:	4a57      	ldr	r2, [pc, #348]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	6713      	str	r3, [r2, #112]	@ 0x70
 800457c:	4b55      	ldr	r3, [pc, #340]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004580:	4a54      	ldr	r2, [pc, #336]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004582:	f023 0304 	bic.w	r3, r3, #4
 8004586:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d015      	beq.n	80045bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fe fd92 	bl	80030b8 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004596:	e00a      	b.n	80045ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004598:	f7fe fd8e 	bl	80030b8 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0cb      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ae:	4b49      	ldr	r3, [pc, #292]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0ee      	beq.n	8004598 <HAL_RCC_OscConfig+0x334>
 80045ba:	e014      	b.n	80045e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045bc:	f7fe fd7c 	bl	80030b8 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c2:	e00a      	b.n	80045da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c4:	f7fe fd78 	bl	80030b8 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e0b5      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045da:	4b3e      	ldr	r3, [pc, #248]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1ee      	bne.n	80045c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d105      	bne.n	80045f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ec:	4b39      	ldr	r3, [pc, #228]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	4a38      	ldr	r2, [pc, #224]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 80045f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80a1 	beq.w	8004744 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004602:	4b34      	ldr	r3, [pc, #208]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b08      	cmp	r3, #8
 800460c:	d05c      	beq.n	80046c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d141      	bne.n	800469a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004616:	4b31      	ldr	r3, [pc, #196]	@ (80046dc <HAL_RCC_OscConfig+0x478>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fe fd4c 	bl	80030b8 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004624:	f7fe fd48 	bl	80030b8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e087      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004636:	4b27      	ldr	r3, [pc, #156]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	019b      	lsls	r3, r3, #6
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	3b01      	subs	r3, #1
 800465c:	041b      	lsls	r3, r3, #16
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004664:	061b      	lsls	r3, r3, #24
 8004666:	491b      	ldr	r1, [pc, #108]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800466c:	4b1b      	ldr	r3, [pc, #108]	@ (80046dc <HAL_RCC_OscConfig+0x478>)
 800466e:	2201      	movs	r2, #1
 8004670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fe fd21 	bl	80030b8 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467a:	f7fe fd1d 	bl	80030b8 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e05c      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468c:	4b11      	ldr	r3, [pc, #68]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0f0      	beq.n	800467a <HAL_RCC_OscConfig+0x416>
 8004698:	e054      	b.n	8004744 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469a:	4b10      	ldr	r3, [pc, #64]	@ (80046dc <HAL_RCC_OscConfig+0x478>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fe fd0a 	bl	80030b8 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fe fd06 	bl	80030b8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e045      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ba:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <HAL_RCC_OscConfig+0x470>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x444>
 80046c6:	e03d      	b.n	8004744 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d107      	bne.n	80046e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e038      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
 80046d4:	40023800 	.word	0x40023800
 80046d8:	40007000 	.word	0x40007000
 80046dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004750 <HAL_RCC_OscConfig+0x4ec>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d028      	beq.n	8004740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d121      	bne.n	8004740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d11a      	bne.n	8004740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004718:	4293      	cmp	r3, r2
 800471a:	d111      	bne.n	8004740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	3b01      	subs	r3, #1
 800472a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d107      	bne.n	8004740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800

08004754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0cc      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004768:	4b68      	ldr	r3, [pc, #416]	@ (800490c <HAL_RCC_ClockConfig+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d90c      	bls.n	8004790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b65      	ldr	r3, [pc, #404]	@ (800490c <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b63      	ldr	r3, [pc, #396]	@ (800490c <HAL_RCC_ClockConfig+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0b8      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a8:	4b59      	ldr	r3, [pc, #356]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	4a58      	ldr	r2, [pc, #352]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c0:	4b53      	ldr	r3, [pc, #332]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a52      	ldr	r2, [pc, #328]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047cc:	4b50      	ldr	r3, [pc, #320]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	494d      	ldr	r1, [pc, #308]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d044      	beq.n	8004874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f2:	4b47      	ldr	r3, [pc, #284]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d119      	bne.n	8004832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e07f      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d003      	beq.n	8004812 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480e:	2b03      	cmp	r3, #3
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004812:	4b3f      	ldr	r3, [pc, #252]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e06f      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004822:	4b3b      	ldr	r3, [pc, #236]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e067      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004832:	4b37      	ldr	r3, [pc, #220]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f023 0203 	bic.w	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4934      	ldr	r1, [pc, #208]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	4313      	orrs	r3, r2
 8004842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004844:	f7fe fc38 	bl	80030b8 <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484a:	e00a      	b.n	8004862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484c:	f7fe fc34 	bl	80030b8 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e04f      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	4b2b      	ldr	r3, [pc, #172]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 020c 	and.w	r2, r3, #12
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	429a      	cmp	r2, r3
 8004872:	d1eb      	bne.n	800484c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004874:	4b25      	ldr	r3, [pc, #148]	@ (800490c <HAL_RCC_ClockConfig+0x1b8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d20c      	bcs.n	800489c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004882:	4b22      	ldr	r3, [pc, #136]	@ (800490c <HAL_RCC_ClockConfig+0x1b8>)
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b20      	ldr	r3, [pc, #128]	@ (800490c <HAL_RCC_ClockConfig+0x1b8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e032      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a8:	4b19      	ldr	r3, [pc, #100]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4916      	ldr	r1, [pc, #88]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048c6:	4b12      	ldr	r3, [pc, #72]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	490e      	ldr	r1, [pc, #56]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048da:	f000 f821 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 80048de:	4602      	mov	r2, r0
 80048e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004910 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	490a      	ldr	r1, [pc, #40]	@ (8004914 <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	5ccb      	ldrb	r3, [r1, r3]
 80048ee:	fa22 f303 	lsr.w	r3, r2, r3
 80048f2:	4a09      	ldr	r2, [pc, #36]	@ (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048f6:	4b09      	ldr	r3, [pc, #36]	@ (800491c <HAL_RCC_ClockConfig+0x1c8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe fb98 	bl	8003030 <HAL_InitTick>

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40023c00 	.word	0x40023c00
 8004910:	40023800 	.word	0x40023800
 8004914:	0800c8d8 	.word	0x0800c8d8
 8004918:	2000000c 	.word	0x2000000c
 800491c:	20000010 	.word	0x20000010

08004920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004924:	b094      	sub	sp, #80	@ 0x50
 8004926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004938:	4b79      	ldr	r3, [pc, #484]	@ (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b08      	cmp	r3, #8
 8004942:	d00d      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x40>
 8004944:	2b08      	cmp	r3, #8
 8004946:	f200 80e1 	bhi.w	8004b0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x34>
 800494e:	2b04      	cmp	r3, #4
 8004950:	d003      	beq.n	800495a <HAL_RCC_GetSysClockFreq+0x3a>
 8004952:	e0db      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004954:	4b73      	ldr	r3, [pc, #460]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004956:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004958:	e0db      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495a:	4b73      	ldr	r3, [pc, #460]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x208>)
 800495c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800495e:	e0d8      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004960:	4b6f      	ldr	r3, [pc, #444]	@ (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004968:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800496a:	4b6d      	ldr	r3, [pc, #436]	@ (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d063      	beq.n	8004a3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004976:	4b6a      	ldr	r3, [pc, #424]	@ (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	099b      	lsrs	r3, r3, #6
 800497c:	2200      	movs	r2, #0
 800497e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004980:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004988:	633b      	str	r3, [r7, #48]	@ 0x30
 800498a:	2300      	movs	r3, #0
 800498c:	637b      	str	r3, [r7, #52]	@ 0x34
 800498e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004992:	4622      	mov	r2, r4
 8004994:	462b      	mov	r3, r5
 8004996:	f04f 0000 	mov.w	r0, #0
 800499a:	f04f 0100 	mov.w	r1, #0
 800499e:	0159      	lsls	r1, r3, #5
 80049a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a4:	0150      	lsls	r0, r2, #5
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4621      	mov	r1, r4
 80049ac:	1a51      	subs	r1, r2, r1
 80049ae:	6139      	str	r1, [r7, #16]
 80049b0:	4629      	mov	r1, r5
 80049b2:	eb63 0301 	sbc.w	r3, r3, r1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c4:	4659      	mov	r1, fp
 80049c6:	018b      	lsls	r3, r1, #6
 80049c8:	4651      	mov	r1, sl
 80049ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ce:	4651      	mov	r1, sl
 80049d0:	018a      	lsls	r2, r1, #6
 80049d2:	4651      	mov	r1, sl
 80049d4:	ebb2 0801 	subs.w	r8, r2, r1
 80049d8:	4659      	mov	r1, fp
 80049da:	eb63 0901 	sbc.w	r9, r3, r1
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f2:	4690      	mov	r8, r2
 80049f4:	4699      	mov	r9, r3
 80049f6:	4623      	mov	r3, r4
 80049f8:	eb18 0303 	adds.w	r3, r8, r3
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	462b      	mov	r3, r5
 8004a00:	eb49 0303 	adc.w	r3, r9, r3
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a12:	4629      	mov	r1, r5
 8004a14:	024b      	lsls	r3, r1, #9
 8004a16:	4621      	mov	r1, r4
 8004a18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	024a      	lsls	r2, r1, #9
 8004a20:	4610      	mov	r0, r2
 8004a22:	4619      	mov	r1, r3
 8004a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a26:	2200      	movs	r2, #0
 8004a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a30:	f7fb fbca 	bl	80001c8 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4613      	mov	r3, r2
 8004a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a3c:	e058      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3e:	4b38      	ldr	r3, [pc, #224]	@ (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	2200      	movs	r2, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	4611      	mov	r1, r2
 8004a4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	2300      	movs	r3, #0
 8004a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	f04f 0000 	mov.w	r0, #0
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	0159      	lsls	r1, r3, #5
 8004a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6a:	0150      	lsls	r0, r2, #5
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4641      	mov	r1, r8
 8004a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a76:	4649      	mov	r1, r9
 8004a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a90:	ebb2 040a 	subs.w	r4, r2, sl
 8004a94:	eb63 050b 	sbc.w	r5, r3, fp
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	00eb      	lsls	r3, r5, #3
 8004aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aa6:	00e2      	lsls	r2, r4, #3
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	461d      	mov	r5, r3
 8004aac:	4643      	mov	r3, r8
 8004aae:	18e3      	adds	r3, r4, r3
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	eb45 0303 	adc.w	r3, r5, r3
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	028b      	lsls	r3, r1, #10
 8004aca:	4621      	mov	r1, r4
 8004acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	028a      	lsls	r2, r1, #10
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ada:	2200      	movs	r2, #0
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	61fa      	str	r2, [r7, #28]
 8004ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae4:	f7fb fb70 	bl	80001c8 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4613      	mov	r3, r2
 8004aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004af0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	3301      	adds	r3, #1
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b0a:	e002      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3750      	adds	r7, #80	@ 0x50
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	00f42400 	.word	0x00f42400
 8004b28:	007a1200 	.word	0x007a1200

08004b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b30:	4b03      	ldr	r3, [pc, #12]	@ (8004b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b32:	681b      	ldr	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	2000000c 	.word	0x2000000c

08004b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b48:	f7ff fff0 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0a9b      	lsrs	r3, r3, #10
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	@ (8004b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	0800c8e8 	.word	0x0800c8e8

08004b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b70:	f7ff ffdc 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	0b5b      	lsrs	r3, r3, #13
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4903      	ldr	r1, [pc, #12]	@ (8004b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b82:	5ccb      	ldrb	r3, [r1, r3]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	0800c8e8 	.word	0x0800c8e8

08004b94 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e022      	b.n	8004bec <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d105      	bne.n	8004bbe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fd ffb7 	bl	8002b2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f814 	bl	8004bf4 <HAL_SD_InitCard>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e00a      	b.n	8004bec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004bf4:	b5b0      	push	{r4, r5, r7, lr}
 8004bf6:	b08e      	sub	sp, #56	@ 0x38
 8004bf8:	af04      	add	r7, sp, #16
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004c10:	2376      	movs	r3, #118	@ 0x76
 8004c12:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681d      	ldr	r5, [r3, #0]
 8004c18:	466c      	mov	r4, sp
 8004c1a:	f107 0314 	add.w	r3, r7, #20
 8004c1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c26:	f107 0308 	add.w	r3, r7, #8
 8004c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f003 fb59 	bl	80082e4 <SDIO_Init>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e04f      	b.n	8004ce4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004c44:	4b29      	ldr	r3, [pc, #164]	@ (8004cec <HAL_SD_InitCard+0xf8>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f003 fb91 	bl	8008376 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004c54:	4b25      	ldr	r3, [pc, #148]	@ (8004cec <HAL_SD_InitCard+0xf8>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004c5a:	2002      	movs	r0, #2
 8004c5c:	f7fe fa38 	bl	80030d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fe79 	bl	8005958 <SD_PowerON>
 8004c66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00b      	beq.n	8004c86 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e02e      	b.n	8004ce4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fd98 	bl	80057bc <SD_InitCard>
 8004c8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00b      	beq.n	8004cac <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e01b      	b.n	8004ce4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f003 fbf0 	bl	800849a <SDMMC_CmdBlockLength>
 8004cba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00f      	beq.n	8004ce2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf0 <HAL_SD_InitCard+0xfc>)
 8004cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3728      	adds	r7, #40	@ 0x28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bdb0      	pop	{r4, r5, r7, pc}
 8004cec:	422580a0 	.word	0x422580a0
 8004cf0:	004005ff 	.word	0x004005ff

08004cf4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b092      	sub	sp, #72	@ 0x48
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d02:	f7fe f9d9 	bl	80030b8 <HAL_GetTick>
 8004d06:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d107      	bne.n	8004d26 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e1c5      	b.n	80050b2 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	f040 81b8 	bne.w	80050a4 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	441a      	add	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d907      	bls.n	8004d58 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e1ac      	b.n	80050b2 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2200      	movs	r2, #0
 8004d66:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d002      	beq.n	8004d76 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d72:	025b      	lsls	r3, r3, #9
 8004d74:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d76:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	025b      	lsls	r3, r3, #9
 8004d80:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004d82:	2390      	movs	r3, #144	@ 0x90
 8004d84:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d86:	2302      	movs	r3, #2
 8004d88:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f107 0214 	add.w	r2, r7, #20
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f003 fb50 	bl	8008442 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d90a      	bls.n	8004dbe <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2202      	movs	r2, #2
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004db4:	4618      	mov	r0, r3
 8004db6:	f003 fbb4 	bl	8008522 <SDMMC_CmdReadMultiBlock>
 8004dba:	6478      	str	r0, [r7, #68]	@ 0x44
 8004dbc:	e009      	b.n	8004dd2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f003 fb87 	bl	80084de <SDMMC_CmdReadSingleBlock>
 8004dd0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d012      	beq.n	8004dfe <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a7e      	ldr	r2, [pc, #504]	@ (8004fd8 <HAL_SD_ReadBlocks+0x2e4>)
 8004dde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004de6:	431a      	orrs	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e159      	b.n	80050b2 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004e02:	e061      	b.n	8004ec8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d03c      	beq.n	8004e8c <HAL_SD_ReadBlocks+0x198>
 8004e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d039      	beq.n	8004e8c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004e18:	2300      	movs	r3, #0
 8004e1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e1c:	e033      	b.n	8004e86 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f003 fa89 	bl	800833a <SDIO_ReadFIFO>
 8004e28:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e34:	3301      	adds	r3, #1
 8004e36:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e46:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e50:	3b01      	subs	r3, #1
 8004e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e56:	0c1b      	lsrs	r3, r3, #16
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e60:	3301      	adds	r3, #1
 8004e62:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e66:	3b01      	subs	r3, #1
 8004e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e6c:	0e1b      	lsrs	r3, r3, #24
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e72:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e76:	3301      	adds	r3, #1
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8004e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e82:	3301      	adds	r3, #1
 8004e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e88:	2b07      	cmp	r3, #7
 8004e8a:	d9c8      	bls.n	8004e1e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004e8c:	f7fe f914 	bl	80030b8 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d902      	bls.n	8004ea2 <HAL_SD_ReadBlocks+0x1ae>
 8004e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d112      	bne.n	8004ec8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a4c      	ldr	r2, [pc, #304]	@ (8004fd8 <HAL_SD_ReadBlocks+0x2e4>)
 8004ea8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e0f4      	b.n	80050b2 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ece:	f240 332a 	movw	r3, #810	@ 0x32a
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d095      	beq.n	8004e04 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d022      	beq.n	8004f2c <HAL_SD_ReadBlocks+0x238>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d91f      	bls.n	8004f2c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d01b      	beq.n	8004f2c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f003 fb79 	bl	80085f0 <SDMMC_CmdStopTransfer>
 8004efe:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d012      	beq.n	8004f2c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a33      	ldr	r2, [pc, #204]	@ (8004fd8 <HAL_SD_ReadBlocks+0x2e4>)
 8004f0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0c2      	b.n	80050b2 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_SD_ReadBlocks+0x254>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d012      	beq.n	8004f6e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a22      	ldr	r2, [pc, #136]	@ (8004fd8 <HAL_SD_ReadBlocks+0x2e4>)
 8004f4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f54:	f043 0208 	orr.w	r2, r3, #8
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e0a1      	b.n	80050b2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d012      	beq.n	8004fa2 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a15      	ldr	r2, [pc, #84]	@ (8004fd8 <HAL_SD_ReadBlocks+0x2e4>)
 8004f82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	f043 0202 	orr.w	r2, r3, #2
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e087      	b.n	80050b2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d064      	beq.n	800507a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a08      	ldr	r2, [pc, #32]	@ (8004fd8 <HAL_SD_ReadBlocks+0x2e4>)
 8004fb6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbc:	f043 0220 	orr.w	r2, r3, #32
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e06d      	b.n	80050b2 <HAL_SD_ReadBlocks+0x3be>
 8004fd6:	bf00      	nop
 8004fd8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f003 f9aa 	bl	800833a <SDIO_ReadFIFO>
 8004fe6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffe:	0a1b      	lsrs	r3, r3, #8
 8005000:	b2da      	uxtb	r2, r3
 8005002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005004:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005008:	3301      	adds	r3, #1
 800500a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800500c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800500e:	3b01      	subs	r3, #1
 8005010:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005014:	0c1b      	lsrs	r3, r3, #16
 8005016:	b2da      	uxtb	r2, r3
 8005018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800501c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501e:	3301      	adds	r3, #1
 8005020:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005024:	3b01      	subs	r3, #1
 8005026:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502a:	0e1b      	lsrs	r3, r3, #24
 800502c:	b2da      	uxtb	r2, r3
 800502e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005030:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005034:	3301      	adds	r3, #1
 8005036:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800503a:	3b01      	subs	r3, #1
 800503c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800503e:	f7fe f83b 	bl	80030b8 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800504a:	429a      	cmp	r2, r3
 800504c:	d902      	bls.n	8005054 <HAL_SD_ReadBlocks+0x360>
 800504e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005050:	2b00      	cmp	r3, #0
 8005052:	d112      	bne.n	800507a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <HAL_SD_ReadBlocks+0x3c8>)
 800505a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005060:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e01b      	b.n	80050b2 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_SD_ReadBlocks+0x39a>
 8005088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1a6      	bne.n	8004fdc <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005096:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	e006      	b.n	80050b2 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3748      	adds	r7, #72	@ 0x48
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	004005ff 	.word	0x004005ff

080050c0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b092      	sub	sp, #72	@ 0x48
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80050ce:	f7fd fff3 	bl	80030b8 <HAL_GetTick>
 80050d2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e16d      	b.n	80053ce <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	f040 8160 	bne.w	80053c0 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005106:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	441a      	add	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	429a      	cmp	r2, r3
 8005112:	d907      	bls.n	8005124 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005118:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e154      	b.n	80053ce <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2203      	movs	r2, #3
 8005128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2200      	movs	r2, #0
 8005132:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005138:	2b01      	cmp	r3, #1
 800513a:	d002      	beq.n	8005142 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800513c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513e:	025b      	lsls	r3, r3, #9
 8005140:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005142:	f04f 33ff 	mov.w	r3, #4294967295
 8005146:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	025b      	lsls	r3, r3, #9
 800514c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800514e:	2390      	movs	r3, #144	@ 0x90
 8005150:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005156:	2300      	movs	r3, #0
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800515a:	2301      	movs	r3, #1
 800515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f107 0218 	add.w	r2, r7, #24
 8005166:	4611      	mov	r1, r2
 8005168:	4618      	mov	r0, r3
 800516a:	f003 f96a 	bl	8008442 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d90a      	bls.n	800518a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005180:	4618      	mov	r0, r3
 8005182:	f003 fa12 	bl	80085aa <SDMMC_CmdWriteMultiBlock>
 8005186:	6478      	str	r0, [r7, #68]	@ 0x44
 8005188:	e009      	b.n	800519e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2210      	movs	r2, #16
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005196:	4618      	mov	r0, r3
 8005198:	f003 f9e5 	bl	8008566 <SDMMC_CmdWriteSingleBlock>
 800519c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800519e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d012      	beq.n	80051ca <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a8b      	ldr	r2, [pc, #556]	@ (80053d8 <HAL_SD_WriteBlocks+0x318>)
 80051aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051b2:	431a      	orrs	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e101      	b.n	80053ce <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80051ce:	e065      	b.n	800529c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d040      	beq.n	8005260 <HAL_SD_WriteBlocks+0x1a0>
 80051de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d03d      	beq.n	8005260 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80051e4:	2300      	movs	r3, #0
 80051e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80051e8:	e037      	b.n	800525a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80051ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80051f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f2:	3301      	adds	r3, #1
 80051f4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80051f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f8:	3b01      	subs	r3, #1
 80051fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80051fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	021a      	lsls	r2, r3, #8
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520a:	3301      	adds	r3, #1
 800520c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800520e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005210:	3b01      	subs	r3, #1
 8005212:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	041a      	lsls	r2, r3, #16
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005222:	3301      	adds	r3, #1
 8005224:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005228:	3b01      	subs	r3, #1
 800522a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800522c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	061a      	lsls	r2, r3, #24
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523a:	3301      	adds	r3, #1
 800523c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800523e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005240:	3b01      	subs	r3, #1
 8005242:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f107 0214 	add.w	r2, r7, #20
 800524c:	4611      	mov	r1, r2
 800524e:	4618      	mov	r0, r3
 8005250:	f003 f880 	bl	8008354 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005256:	3301      	adds	r3, #1
 8005258:	643b      	str	r3, [r7, #64]	@ 0x40
 800525a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800525c:	2b07      	cmp	r3, #7
 800525e:	d9c4      	bls.n	80051ea <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005260:	f7fd ff2a 	bl	80030b8 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800526c:	429a      	cmp	r2, r3
 800526e:	d902      	bls.n	8005276 <HAL_SD_WriteBlocks+0x1b6>
 8005270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005272:	2b00      	cmp	r3, #0
 8005274:	d112      	bne.n	800529c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a57      	ldr	r2, [pc, #348]	@ (80053d8 <HAL_SD_WriteBlocks+0x318>)
 800527c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e098      	b.n	80053ce <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052a2:	f240 331a 	movw	r3, #794	@ 0x31a
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d091      	beq.n	80051d0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d022      	beq.n	8005300 <HAL_SD_WriteBlocks+0x240>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d91f      	bls.n	8005300 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d01b      	beq.n	8005300 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f003 f98f 	bl	80085f0 <SDMMC_CmdStopTransfer>
 80052d2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80052d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d012      	beq.n	8005300 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3e      	ldr	r2, [pc, #248]	@ (80053d8 <HAL_SD_WriteBlocks+0x318>)
 80052e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e8:	431a      	orrs	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e066      	b.n	80053ce <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_SD_WriteBlocks+0x25c>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005318:	2b00      	cmp	r3, #0
 800531a:	d012      	beq.n	8005342 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2d      	ldr	r2, [pc, #180]	@ (80053d8 <HAL_SD_WriteBlocks+0x318>)
 8005322:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005328:	f043 0208 	orr.w	r2, r3, #8
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e045      	b.n	80053ce <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d012      	beq.n	8005376 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a20      	ldr	r2, [pc, #128]	@ (80053d8 <HAL_SD_WriteBlocks+0x318>)
 8005356:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535c:	f043 0202 	orr.w	r2, r3, #2
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e02b      	b.n	80053ce <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	d012      	beq.n	80053aa <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a13      	ldr	r2, [pc, #76]	@ (80053d8 <HAL_SD_WriteBlocks+0x318>)
 800538a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	f043 0210 	orr.w	r2, r3, #16
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e011      	b.n	80053ce <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f240 523a 	movw	r2, #1338	@ 0x53a
 80053b2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	e006      	b.n	80053ce <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
  }
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3748      	adds	r7, #72	@ 0x48
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	004005ff 	.word	0x004005ff

080053dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053ea:	0f9b      	lsrs	r3, r3, #30
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053f6:	0e9b      	lsrs	r3, r3, #26
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005408:	0e1b      	lsrs	r3, r3, #24
 800540a:	b2db      	uxtb	r3, r3
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	b2da      	uxtb	r2, r3
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800541a:	0c1b      	lsrs	r3, r3, #16
 800541c:	b2da      	uxtb	r2, r3
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	b2da      	uxtb	r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005432:	b2da      	uxtb	r2, r3
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800543c:	0d1b      	lsrs	r3, r3, #20
 800543e:	b29a      	uxth	r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 030f 	and.w	r3, r3, #15
 8005450:	b2da      	uxtb	r2, r3
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800545a:	0bdb      	lsrs	r3, r3, #15
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	b2da      	uxtb	r2, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800546c:	0b9b      	lsrs	r3, r3, #14
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	b2da      	uxtb	r2, r3
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800547e:	0b5b      	lsrs	r3, r3, #13
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	b2da      	uxtb	r2, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005490:	0b1b      	lsrs	r3, r3, #12
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	b2da      	uxtb	r2, r3
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2200      	movs	r2, #0
 80054a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d163      	bne.n	8005574 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054b0:	009a      	lsls	r2, r3, #2
 80054b2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80054b6:	4013      	ands	r3, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80054bc:	0f92      	lsrs	r2, r2, #30
 80054be:	431a      	orrs	r2, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054c8:	0edb      	lsrs	r3, r3, #27
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054da:	0e1b      	lsrs	r3, r3, #24
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054ec:	0d5b      	lsrs	r3, r3, #21
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054fe:	0c9b      	lsrs	r3, r3, #18
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	b2da      	uxtb	r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005510:	0bdb      	lsrs	r3, r3, #15
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	b2da      	uxtb	r2, r3
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	7e1b      	ldrb	r3, [r3, #24]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	3302      	adds	r3, #2
 8005534:	2201      	movs	r2, #1
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800553e:	fb03 f202 	mul.w	r2, r3, r2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	7a1b      	ldrb	r3, [r3, #8]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	2201      	movs	r2, #1
 8005552:	409a      	lsls	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005560:	0a52      	lsrs	r2, r2, #9
 8005562:	fb03 f202 	mul.w	r2, r3, r2
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005570:	661a      	str	r2, [r3, #96]	@ 0x60
 8005572:	e031      	b.n	80055d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005578:	2b01      	cmp	r3, #1
 800557a:	d11d      	bne.n	80055b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005580:	041b      	lsls	r3, r3, #16
 8005582:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800558a:	0c1b      	lsrs	r3, r3, #16
 800558c:	431a      	orrs	r2, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	3301      	adds	r3, #1
 8005598:	029a      	lsls	r2, r3, #10
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80055b6:	e00f      	b.n	80055d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a58      	ldr	r2, [pc, #352]	@ (8005720 <HAL_SD_GetCardCSD+0x344>)
 80055be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e09d      	b.n	8005714 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055dc:	0b9b      	lsrs	r3, r3, #14
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ee:	09db      	lsrs	r3, r3, #7
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005600:	b2db      	uxtb	r3, r3
 8005602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005606:	b2da      	uxtb	r2, r3
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005610:	0fdb      	lsrs	r3, r3, #31
 8005612:	b2da      	uxtb	r2, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561c:	0f5b      	lsrs	r3, r3, #29
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	b2da      	uxtb	r2, r3
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562e:	0e9b      	lsrs	r3, r3, #26
 8005630:	b2db      	uxtb	r3, r3
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	b2da      	uxtb	r2, r3
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005640:	0d9b      	lsrs	r3, r3, #22
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	b2da      	uxtb	r2, r3
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005652:	0d5b      	lsrs	r3, r3, #21
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	b2da      	uxtb	r2, r3
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566e:	0c1b      	lsrs	r3, r3, #16
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005682:	0bdb      	lsrs	r3, r3, #15
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	b2da      	uxtb	r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005696:	0b9b      	lsrs	r3, r3, #14
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056aa:	0b5b      	lsrs	r3, r3, #13
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056be:	0b1b      	lsrs	r3, r3, #12
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d2:	0a9b      	lsrs	r3, r3, #10
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e6:	0a1b      	lsrs	r3, r3, #8
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005702:	b2da      	uxtb	r2, r3
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	004005ff 	.word	0x004005ff

08005724 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005788:	f107 030c 	add.w	r3, r7, #12
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f970 	bl	8005a74 <SD_SendStatus>
 8005794:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	0a5b      	lsrs	r3, r3, #9
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80057b2:	693b      	ldr	r3, [r7, #16]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80057bc:	b5b0      	push	{r4, r5, r7, lr}
 80057be:	b094      	sub	sp, #80	@ 0x50
 80057c0:	af04      	add	r7, sp, #16
 80057c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80057c4:	2301      	movs	r3, #1
 80057c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f002 fde0 	bl	8008392 <SDIO_GetPowerState>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80057d8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80057dc:	e0b8      	b.n	8005950 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d02f      	beq.n	8005846 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f002 ffc7 	bl	800877e <SDMMC_CmdSendCID>
 80057f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80057f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <SD_InitCard+0x40>
    {
      return errorstate;
 80057f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057fa:	e0a9      	b.n	8005950 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f002 fe0a 	bl	800841c <SDIO_GetResponse>
 8005808:	4602      	mov	r2, r0
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2104      	movs	r1, #4
 8005814:	4618      	mov	r0, r3
 8005816:	f002 fe01 	bl	800841c <SDIO_GetResponse>
 800581a:	4602      	mov	r2, r0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2108      	movs	r1, #8
 8005826:	4618      	mov	r0, r3
 8005828:	f002 fdf8 	bl	800841c <SDIO_GetResponse>
 800582c:	4602      	mov	r2, r0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	210c      	movs	r1, #12
 8005838:	4618      	mov	r0, r3
 800583a:	f002 fdef 	bl	800841c <SDIO_GetResponse>
 800583e:	4602      	mov	r2, r0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584a:	2b03      	cmp	r3, #3
 800584c:	d00d      	beq.n	800586a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f107 020e 	add.w	r2, r7, #14
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f002 ffcd 	bl	80087f8 <SDMMC_CmdSetRelAdd>
 800585e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <SD_InitCard+0xae>
    {
      return errorstate;
 8005866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005868:	e072      	b.n	8005950 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	2b03      	cmp	r3, #3
 8005870:	d036      	beq.n	80058e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005872:	89fb      	ldrh	r3, [r7, #14]
 8005874:	461a      	mov	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005882:	041b      	lsls	r3, r3, #16
 8005884:	4619      	mov	r1, r3
 8005886:	4610      	mov	r0, r2
 8005888:	f002 ff97 	bl	80087ba <SDMMC_CmdSendCSD>
 800588c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800588e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005896:	e05b      	b.n	8005950 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f002 fdbc 	bl	800841c <SDIO_GetResponse>
 80058a4:	4602      	mov	r2, r0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2104      	movs	r1, #4
 80058b0:	4618      	mov	r0, r3
 80058b2:	f002 fdb3 	bl	800841c <SDIO_GetResponse>
 80058b6:	4602      	mov	r2, r0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2108      	movs	r1, #8
 80058c2:	4618      	mov	r0, r3
 80058c4:	f002 fdaa 	bl	800841c <SDIO_GetResponse>
 80058c8:	4602      	mov	r2, r0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	210c      	movs	r1, #12
 80058d4:	4618      	mov	r0, r3
 80058d6:	f002 fda1 	bl	800841c <SDIO_GetResponse>
 80058da:	4602      	mov	r2, r0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2104      	movs	r1, #4
 80058e6:	4618      	mov	r0, r3
 80058e8:	f002 fd98 	bl	800841c <SDIO_GetResponse>
 80058ec:	4603      	mov	r3, r0
 80058ee:	0d1a      	lsrs	r2, r3, #20
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80058f4:	f107 0310 	add.w	r3, r7, #16
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff fd6e 	bl	80053dc <HAL_SD_GetCardCSD>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005906:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800590a:	e021      	b.n	8005950 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005914:	041b      	lsls	r3, r3, #16
 8005916:	2200      	movs	r2, #0
 8005918:	461c      	mov	r4, r3
 800591a:	4615      	mov	r5, r2
 800591c:	4622      	mov	r2, r4
 800591e:	462b      	mov	r3, r5
 8005920:	4608      	mov	r0, r1
 8005922:	f002 fe87 	bl	8008634 <SDMMC_CmdSelDesel>
 8005926:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <SD_InitCard+0x176>
  {
    return errorstate;
 800592e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005930:	e00e      	b.n	8005950 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681d      	ldr	r5, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	466c      	mov	r4, sp
 800593a:	f103 0210 	add.w	r2, r3, #16
 800593e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005944:	3304      	adds	r3, #4
 8005946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005948:	4628      	mov	r0, r5
 800594a:	f002 fccb 	bl	80082e4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3740      	adds	r7, #64	@ 0x40
 8005954:	46bd      	mov	sp, r7
 8005956:	bdb0      	pop	{r4, r5, r7, pc}

08005958 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	2300      	movs	r3, #0
 800596a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f002 fe82 	bl	800867a <SDMMC_CmdGoIdleState>
 8005976:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <SD_PowerON+0x2a>
  {
    return errorstate;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	e072      	b.n	8005a68 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f002 fe95 	bl	80086b6 <SDMMC_CmdOperCond>
 800598c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f002 fe6b 	bl	800867a <SDMMC_CmdGoIdleState>
 80059a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	e05b      	b.n	8005a68 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d137      	bne.n	8005a2e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2100      	movs	r1, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f002 fe95 	bl	80086f4 <SDMMC_CmdAppCommand>
 80059ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d02d      	beq.n	8005a2e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80059d6:	e047      	b.n	8005a68 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f002 fe88 	bl	80086f4 <SDMMC_CmdAppCommand>
 80059e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	e03b      	b.n	8005a68 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	491e      	ldr	r1, [pc, #120]	@ (8005a70 <SD_PowerON+0x118>)
 80059f6:	4618      	mov	r0, r3
 80059f8:	f002 fe9e 	bl	8008738 <SDMMC_CmdAppOperCommand>
 80059fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005a08:	e02e      	b.n	8005a68 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f002 fd03 	bl	800841c <SDIO_GetResponse>
 8005a16:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	0fdb      	lsrs	r3, r3, #31
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <SD_PowerON+0xcc>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <SD_PowerON+0xce>
 8005a24:	2300      	movs	r3, #0
 8005a26:	613b      	str	r3, [r7, #16]

    count++;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d802      	bhi.n	8005a3e <SD_PowerON+0xe6>
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0cc      	beq.n	80059d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d902      	bls.n	8005a4e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005a48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a4c:	e00c      	b.n	8005a68 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a5e:	e002      	b.n	8005a66 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	c1100000 	.word	0xc1100000

08005a74 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005a84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a88:	e018      	b.n	8005abc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a92:	041b      	lsls	r3, r3, #16
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f002 fecf 	bl	800883a <SDMMC_CmdSendStatus>
 8005a9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	e009      	b.n	8005abc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2100      	movs	r1, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f002 fcb4 	bl	800841c <SDIO_GetResponse>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e07b      	b.n	8005bce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d108      	bne.n	8005af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ae6:	d009      	beq.n	8005afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	61da      	str	r2, [r3, #28]
 8005aee:	e005      	b.n	8005afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fd f882 	bl	8002c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b80:	ea42 0103 	orr.w	r1, r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	f003 0104 	and.w	r1, r3, #4
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba2:	f003 0210 	and.w	r2, r3, #16
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b088      	sub	sp, #32
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be6:	f7fd fa67 	bl	80030b8 <HAL_GetTick>
 8005bea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d001      	beq.n	8005c00 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e12a      	b.n	8005e56 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_SPI_Transmit+0x36>
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e122      	b.n	8005e56 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_SPI_Transmit+0x48>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e11b      	b.n	8005e56 <HAL_SPI_Transmit+0x280>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2203      	movs	r2, #3
 8005c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	88fa      	ldrh	r2, [r7, #6]
 8005c44:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c6c:	d10f      	bne.n	8005c8e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c98:	2b40      	cmp	r3, #64	@ 0x40
 8005c9a:	d007      	beq.n	8005cac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005caa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cb4:	d152      	bne.n	8005d5c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_SPI_Transmit+0xee>
 8005cbe:	8b7b      	ldrh	r3, [r7, #26]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d145      	bne.n	8005d50 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc8:	881a      	ldrh	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd4:	1c9a      	adds	r2, r3, #2
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ce8:	e032      	b.n	8005d50 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d112      	bne.n	8005d1e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfc:	881a      	ldrh	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d08:	1c9a      	adds	r2, r3, #2
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005d1c:	e018      	b.n	8005d50 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d1e:	f7fd f9cb 	bl	80030b8 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d803      	bhi.n	8005d36 <HAL_SPI_Transmit+0x160>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d102      	bne.n	8005d3c <HAL_SPI_Transmit+0x166>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e082      	b.n	8005e56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1c7      	bne.n	8005cea <HAL_SPI_Transmit+0x114>
 8005d5a:	e053      	b.n	8005e04 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_SPI_Transmit+0x194>
 8005d64:	8b7b      	ldrh	r3, [r7, #26]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d147      	bne.n	8005dfa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d90:	e033      	b.n	8005dfa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d113      	bne.n	8005dc8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	7812      	ldrb	r2, [r2, #0]
 8005dac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005dc6:	e018      	b.n	8005dfa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc8:	f7fd f976 	bl	80030b8 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d803      	bhi.n	8005de0 <HAL_SPI_Transmit+0x20a>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d102      	bne.n	8005de6 <HAL_SPI_Transmit+0x210>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e02d      	b.n	8005e56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1c6      	bne.n	8005d92 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 ffb7 	bl	8006d7c <SPI_EndRxTxTransaction>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e22:	2300      	movs	r3, #0
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005e54:	2300      	movs	r3, #0
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b088      	sub	sp, #32
 8005e62:	af02      	add	r7, sp, #8
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d001      	beq.n	8005e7e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e104      	b.n	8006088 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e86:	d112      	bne.n	8005eae <HAL_SPI_Receive+0x50>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10e      	bne.n	8005eae <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2204      	movs	r2, #4
 8005e94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f8f3 	bl	8006090 <HAL_SPI_TransmitReceive>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	e0ec      	b.n	8006088 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eae:	f7fd f903 	bl	80030b8 <HAL_GetTick>
 8005eb2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_SPI_Receive+0x62>
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0e1      	b.n	8006088 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_SPI_Receive+0x74>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e0da      	b.n	8006088 <HAL_SPI_Receive+0x22a>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2204      	movs	r2, #4
 8005ede:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	88fa      	ldrh	r2, [r7, #6]
 8005ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f20:	d10f      	bne.n	8005f42 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f4c:	2b40      	cmp	r3, #64	@ 0x40
 8005f4e:	d007      	beq.n	8005f60 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d170      	bne.n	800604a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f68:	e035      	b.n	8005fd6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d115      	bne.n	8005fa4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f103 020c 	add.w	r2, r3, #12
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f84:	7812      	ldrb	r2, [r2, #0]
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fa2:	e018      	b.n	8005fd6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fa4:	f7fd f888 	bl	80030b8 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d803      	bhi.n	8005fbc <HAL_SPI_Receive+0x15e>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	d102      	bne.n	8005fc2 <HAL_SPI_Receive+0x164>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d109      	bne.n	8005fd6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e058      	b.n	8006088 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1c4      	bne.n	8005f6a <HAL_SPI_Receive+0x10c>
 8005fe0:	e038      	b.n	8006054 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d113      	bne.n	8006018 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	b292      	uxth	r2, r2
 8005ffc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006002:	1c9a      	adds	r2, r3, #2
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006016:	e018      	b.n	800604a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006018:	f7fd f84e 	bl	80030b8 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d803      	bhi.n	8006030 <HAL_SPI_Receive+0x1d2>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d102      	bne.n	8006036 <HAL_SPI_Receive+0x1d8>
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e01e      	b.n	8006088 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1c6      	bne.n	8005fe2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fe29 	bl	8006cb0 <SPI_EndRxTransaction>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2220      	movs	r2, #32
 8006068:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006086:	2300      	movs	r3, #0
  }
}
 8006088:	4618      	mov	r0, r3
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	@ 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800609e:	2301      	movs	r3, #1
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a2:	f7fd f809 	bl	80030b8 <HAL_GetTick>
 80060a6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060ae:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80060b6:	887b      	ldrh	r3, [r7, #2]
 80060b8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060ba:	7ffb      	ldrb	r3, [r7, #31]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d00c      	beq.n	80060da <HAL_SPI_TransmitReceive+0x4a>
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060c6:	d106      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x46>
 80060d0:	7ffb      	ldrb	r3, [r7, #31]
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d001      	beq.n	80060da <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80060d6:	2302      	movs	r3, #2
 80060d8:	e17f      	b.n	80063da <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x5c>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x5c>
 80060e6:	887b      	ldrh	r3, [r7, #2]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e174      	b.n	80063da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <HAL_SPI_TransmitReceive+0x6e>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e16d      	b.n	80063da <HAL_SPI_TransmitReceive+0x34a>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b04      	cmp	r3, #4
 8006110:	d003      	beq.n	800611a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2205      	movs	r2, #5
 8006116:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	887a      	ldrh	r2, [r7, #2]
 800612a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	887a      	ldrh	r2, [r7, #2]
 8006130:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	887a      	ldrh	r2, [r7, #2]
 800613c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	887a      	ldrh	r2, [r7, #2]
 8006142:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615a:	2b40      	cmp	r3, #64	@ 0x40
 800615c:	d007      	beq.n	800616e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800616c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006176:	d17e      	bne.n	8006276 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_SPI_TransmitReceive+0xf6>
 8006180:	8afb      	ldrh	r3, [r7, #22]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d16c      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618a:	881a      	ldrh	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006196:	1c9a      	adds	r2, r3, #2
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061aa:	e059      	b.n	8006260 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d11b      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x162>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d016      	beq.n	80061f2 <HAL_SPI_TransmitReceive+0x162>
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d113      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ce:	881a      	ldrh	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061da:	1c9a      	adds	r2, r3, #2
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d119      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x1a4>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d014      	beq.n	8006234 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006214:	b292      	uxth	r2, r2
 8006216:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621c:	1c9a      	adds	r2, r3, #2
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006230:	2301      	movs	r3, #1
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006234:	f7fc ff40 	bl	80030b8 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006240:	429a      	cmp	r2, r3
 8006242:	d80d      	bhi.n	8006260 <HAL_SPI_TransmitReceive+0x1d0>
 8006244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d009      	beq.n	8006260 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e0bc      	b.n	80063da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1a0      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x11c>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d19b      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x11c>
 8006274:	e082      	b.n	800637c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x1f4>
 800627e:	8afb      	ldrh	r3, [r7, #22]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d171      	bne.n	8006368 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	7812      	ldrb	r2, [r2, #0]
 8006290:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062aa:	e05d      	b.n	8006368 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d11c      	bne.n	80062f4 <HAL_SPI_TransmitReceive+0x264>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d017      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0x264>
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d114      	bne.n	80062f4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	330c      	adds	r3, #12
 80062d4:	7812      	ldrb	r2, [r2, #0]
 80062d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d119      	bne.n	8006336 <HAL_SPI_TransmitReceive+0x2a6>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d014      	beq.n	8006336 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006332:	2301      	movs	r3, #1
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006336:	f7fc febf 	bl	80030b8 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006342:	429a      	cmp	r2, r3
 8006344:	d803      	bhi.n	800634e <HAL_SPI_TransmitReceive+0x2be>
 8006346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d102      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x2c4>
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	2b00      	cmp	r3, #0
 8006352:	d109      	bne.n	8006368 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e038      	b.n	80063da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d19c      	bne.n	80062ac <HAL_SPI_TransmitReceive+0x21c>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d197      	bne.n	80062ac <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800637c:	6a3a      	ldr	r2, [r7, #32]
 800637e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fcfb 	bl	8006d7c <SPI_EndRxTxTransaction>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e01d      	b.n	80063da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
  }
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3728      	adds	r7, #40	@ 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d001      	beq.n	8006402 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80063fe:	2302      	movs	r3, #2
 8006400:	e097      	b.n	8006532 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <HAL_SPI_Transmit_DMA+0x2a>
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e08f      	b.n	8006532 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_SPI_Transmit_DMA+0x3c>
 800641c:	2302      	movs	r3, #2
 800641e:	e088      	b.n	8006532 <HAL_SPI_Transmit_DMA+0x14e>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2203      	movs	r2, #3
 800642c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	88fa      	ldrh	r2, [r7, #6]
 8006446:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800646e:	d10f      	bne.n	8006490 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800647e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800648e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006494:	4a29      	ldr	r2, [pc, #164]	@ (800653c <HAL_SPI_Transmit_DMA+0x158>)
 8006496:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800649c:	4a28      	ldr	r2, [pc, #160]	@ (8006540 <HAL_SPI_Transmit_DMA+0x15c>)
 800649e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a4:	4a27      	ldr	r2, [pc, #156]	@ (8006544 <HAL_SPI_Transmit_DMA+0x160>)
 80064a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ac:	2200      	movs	r2, #0
 80064ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b8:	4619      	mov	r1, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80064c8:	f7fd f9c2 	bl	8003850 <HAL_DMA_Start_IT>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00b      	beq.n	80064ea <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d6:	f043 0210 	orr.w	r2, r3, #16
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e023      	b.n	8006532 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f4:	2b40      	cmp	r3, #64	@ 0x40
 80064f6:	d007      	beq.n	8006508 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006506:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0220 	orr.w	r2, r2, #32
 800651e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0202 	orr.w	r2, r2, #2
 800652e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	08006b0d 	.word	0x08006b0d
 8006540:	0800692d 	.word	0x0800692d
 8006544:	08006b61 	.word	0x08006b61

08006548 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	d001      	beq.n	8006566 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
 8006564:	e0a9      	b.n	80066ba <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d110      	bne.n	8006590 <HAL_SPI_Receive_DMA+0x48>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006576:	d10b      	bne.n	8006590 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2204      	movs	r2, #4
 800657c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006580:	88fb      	ldrh	r3, [r7, #6]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	68b9      	ldr	r1, [r7, #8]
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 f8a2 	bl	80066d0 <HAL_SPI_TransmitReceive_DMA>
 800658c:	4603      	mov	r3, r0
 800658e:	e094      	b.n	80066ba <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_SPI_Receive_DMA+0x54>
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e08c      	b.n	80066ba <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_SPI_Receive_DMA+0x66>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e085      	b.n	80066ba <HAL_SPI_Receive_DMA+0x172>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2204      	movs	r2, #4
 80065ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	88fa      	ldrh	r2, [r7, #6]
 80065ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065f6:	d10f      	bne.n	8006618 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006606:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006616:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661c:	4a29      	ldr	r2, [pc, #164]	@ (80066c4 <HAL_SPI_Receive_DMA+0x17c>)
 800661e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006624:	4a28      	ldr	r2, [pc, #160]	@ (80066c8 <HAL_SPI_Receive_DMA+0x180>)
 8006626:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800662c:	4a27      	ldr	r2, [pc, #156]	@ (80066cc <HAL_SPI_Receive_DMA+0x184>)
 800662e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006634:	2200      	movs	r2, #0
 8006636:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	4619      	mov	r1, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006648:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800664e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006650:	f7fd f8fe 	bl	8003850 <HAL_DMA_Start_IT>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00b      	beq.n	8006672 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665e:	f043 0210 	orr.w	r2, r3, #16
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e023      	b.n	80066ba <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667c:	2b40      	cmp	r3, #64	@ 0x40
 800667e:	d007      	beq.n	8006690 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800668e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0220 	orr.w	r2, r2, #32
 80066a6:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	08006b29 	.word	0x08006b29
 80066c8:	080069d5 	.word	0x080069d5
 80066cc:	08006b61 	.word	0x08006b61

080066d0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066e4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d00c      	beq.n	800670c <HAL_SPI_TransmitReceive_DMA+0x3c>
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066f8:	d106      	bne.n	8006708 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d102      	bne.n	8006708 <HAL_SPI_TransmitReceive_DMA+0x38>
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	2b04      	cmp	r3, #4
 8006706:	d001      	beq.n	800670c <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8006708:	2302      	movs	r3, #2
 800670a:	e0cf      	b.n	80068ac <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006718:	887b      	ldrh	r3, [r7, #2]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e0c4      	b.n	80068ac <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_SPI_TransmitReceive_DMA+0x60>
 800672c:	2302      	movs	r3, #2
 800672e:	e0bd      	b.n	80068ac <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b04      	cmp	r3, #4
 8006742:	d003      	beq.n	800674c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2205      	movs	r2, #5
 8006748:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	887a      	ldrh	r2, [r7, #2]
 800675c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	887a      	ldrh	r2, [r7, #2]
 8006762:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	887a      	ldrh	r2, [r7, #2]
 800676e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	887a      	ldrh	r2, [r7, #2]
 8006774:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b04      	cmp	r3, #4
 800678c:	d108      	bne.n	80067a0 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006792:	4a48      	ldr	r2, [pc, #288]	@ (80068b4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006794:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800679a:	4a47      	ldr	r2, [pc, #284]	@ (80068b8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800679c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800679e:	e007      	b.n	80067b0 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a4:	4a45      	ldr	r2, [pc, #276]	@ (80068bc <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80067a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ac:	4a44      	ldr	r2, [pc, #272]	@ (80068c0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80067ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067b4:	4a43      	ldr	r2, [pc, #268]	@ (80068c4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80067b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067bc:	2200      	movs	r2, #0
 80067be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330c      	adds	r3, #12
 80067ca:	4619      	mov	r1, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80067d8:	f7fd f83a 	bl	8003850 <HAL_DMA_Start_IT>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00b      	beq.n	80067fa <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e6:	f043 0210 	orr.w	r2, r3, #16
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e058      	b.n	80068ac <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f042 0201 	orr.w	r2, r2, #1
 8006808:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800680e:	2200      	movs	r2, #0
 8006810:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006816:	2200      	movs	r2, #0
 8006818:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800681e:	2200      	movs	r2, #0
 8006820:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006826:	2200      	movs	r2, #0
 8006828:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006832:	4619      	mov	r1, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	330c      	adds	r3, #12
 800683a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006840:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006842:	f7fd f805 	bl	8003850 <HAL_DMA_Start_IT>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00b      	beq.n	8006864 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006850:	f043 0210 	orr.w	r2, r3, #16
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e023      	b.n	80068ac <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686e:	2b40      	cmp	r3, #64	@ 0x40
 8006870:	d007      	beq.n	8006882 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006880:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0220 	orr.w	r2, r2, #32
 8006898:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0202 	orr.w	r2, r2, #2
 80068a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	08006b29 	.word	0x08006b29
 80068b8:	080069d5 	.word	0x080069d5
 80068bc:	08006b45 	.word	0x08006b45
 80068c0:	08006a7d 	.word	0x08006a7d
 80068c4:	08006b61 	.word	0x08006b61

080068c8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006938:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800693a:	f7fc fbbd 	bl	80030b8 <HAL_GetTick>
 800693e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800694a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800694e:	d03b      	beq.n	80069c8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0220 	bic.w	r2, r2, #32
 800695e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0202 	bic.w	r2, r2, #2
 800696e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	2164      	movs	r1, #100	@ 0x64
 8006974:	6978      	ldr	r0, [r7, #20]
 8006976:	f000 fa01 	bl	8006d7c <SPI_EndRxTxTransaction>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006984:	f043 0220 	orr.w	r2, r3, #32
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2200      	movs	r2, #0
 80069ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80069c0:	6978      	ldr	r0, [r7, #20]
 80069c2:	f7ff ffa9 	bl	8006918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80069c6:	e002      	b.n	80069ce <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80069c8:	6978      	ldr	r0, [r7, #20]
 80069ca:	f7fa ff03 	bl	80017d4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069e2:	f7fc fb69 	bl	80030b8 <HAL_GetTick>
 80069e6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069f6:	d03b      	beq.n	8006a70 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0220 	bic.w	r2, r2, #32
 8006a06:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10d      	bne.n	8006a2c <SPI_DMAReceiveCplt+0x58>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a18:	d108      	bne.n	8006a2c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0203 	bic.w	r2, r2, #3
 8006a28:	605a      	str	r2, [r3, #4]
 8006a2a:	e007      	b.n	8006a3c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0201 	bic.w	r2, r2, #1
 8006a3a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	2164      	movs	r1, #100	@ 0x64
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f935 	bl	8006cb0 <SPI_EndRxTransaction>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f7ff ff55 	bl	8006918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a6e:	e002      	b.n	8006a76 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f7fa febf 	bl	80017f4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a88:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a8a:	f7fc fb15 	bl	80030b8 <HAL_GetTick>
 8006a8e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a9e:	d02f      	beq.n	8006b00 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0220 	bic.w	r2, r2, #32
 8006aae:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	2164      	movs	r1, #100	@ 0x64
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f961 	bl	8006d7c <SPI_EndRxTxTransaction>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac4:	f043 0220 	orr.w	r2, r3, #32
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0203 	bic.w	r2, r2, #3
 8006ada:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f7ff ff0d 	bl	8006918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006afe:	e002      	b.n	8006b06 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f7ff fee1 	bl	80068c8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b18:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7ff fede 	bl	80068dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff feda 	bl	80068f0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7ff fed6 	bl	8006904 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0203 	bic.w	r2, r2, #3
 8006b7c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b82:	f043 0210 	orr.w	r2, r3, #16
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff fec0 	bl	8006918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bb0:	f7fc fa82 	bl	80030b8 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb8:	1a9b      	subs	r3, r3, r2
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bc0:	f7fc fa7a 	bl	80030b8 <HAL_GetTick>
 8006bc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bc6:	4b39      	ldr	r3, [pc, #228]	@ (8006cac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	015b      	lsls	r3, r3, #5
 8006bcc:	0d1b      	lsrs	r3, r3, #20
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	fb02 f303 	mul.w	r3, r2, r3
 8006bd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bd6:	e054      	b.n	8006c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d050      	beq.n	8006c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006be0:	f7fc fa6a 	bl	80030b8 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d902      	bls.n	8006bf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d13d      	bne.n	8006c72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c0e:	d111      	bne.n	8006c34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c18:	d004      	beq.n	8006c24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c22:	d107      	bne.n	8006c34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c3c:	d10f      	bne.n	8006c5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e017      	b.n	8006ca2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	bf0c      	ite	eq
 8006c92:	2301      	moveq	r3, #1
 8006c94:	2300      	movne	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d19b      	bne.n	8006bd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	2000000c 	.word	0x2000000c

08006cb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cc4:	d111      	bne.n	8006cea <SPI_EndRxTransaction+0x3a>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cce:	d004      	beq.n	8006cda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd8:	d107      	bne.n	8006cea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ce8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cf2:	d12a      	bne.n	8006d4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cfc:	d012      	beq.n	8006d24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2200      	movs	r2, #0
 8006d06:	2180      	movs	r1, #128	@ 0x80
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f7ff ff49 	bl	8006ba0 <SPI_WaitFlagStateUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d02d      	beq.n	8006d70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d18:	f043 0220 	orr.w	r2, r3, #32
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e026      	b.n	8006d72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff ff36 	bl	8006ba0 <SPI_WaitFlagStateUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01a      	beq.n	8006d70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d3e:	f043 0220 	orr.w	r2, r3, #32
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e013      	b.n	8006d72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2200      	movs	r2, #0
 8006d52:	2101      	movs	r1, #1
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f7ff ff23 	bl	8006ba0 <SPI_WaitFlagStateUntilTimeout>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d64:	f043 0220 	orr.w	r2, r3, #32
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e000      	b.n	8006d72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	2102      	movs	r1, #2
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7ff ff04 	bl	8006ba0 <SPI_WaitFlagStateUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da2:	f043 0220 	orr.w	r2, r3, #32
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e032      	b.n	8006e14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006dae:	4b1b      	ldr	r3, [pc, #108]	@ (8006e1c <SPI_EndRxTxTransaction+0xa0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e20 <SPI_EndRxTxTransaction+0xa4>)
 8006db4:	fba2 2303 	umull	r2, r3, r2, r3
 8006db8:	0d5b      	lsrs	r3, r3, #21
 8006dba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dcc:	d112      	bne.n	8006df4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2180      	movs	r1, #128	@ 0x80
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f7ff fee1 	bl	8006ba0 <SPI_WaitFlagStateUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d016      	beq.n	8006e12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de8:	f043 0220 	orr.w	r2, r3, #32
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e00f      	b.n	8006e14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0a:	2b80      	cmp	r3, #128	@ 0x80
 8006e0c:	d0f2      	beq.n	8006df4 <SPI_EndRxTxTransaction+0x78>
 8006e0e:	e000      	b.n	8006e12 <SPI_EndRxTxTransaction+0x96>
        break;
 8006e10:	bf00      	nop
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	2000000c 	.word	0x2000000c
 8006e20:	165e9f81 	.word	0x165e9f81

08006e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e041      	b.n	8006eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d106      	bne.n	8006e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fb ff94 	bl	8002d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	4619      	mov	r1, r3
 8006e62:	4610      	mov	r0, r2
 8006e64:	f000 f95e 	bl	8007124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d001      	beq.n	8006edc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e046      	b.n	8006f6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a23      	ldr	r2, [pc, #140]	@ (8006f78 <HAL_TIM_Base_Start+0xb4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d022      	beq.n	8006f34 <HAL_TIM_Base_Start+0x70>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef6:	d01d      	beq.n	8006f34 <HAL_TIM_Base_Start+0x70>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1f      	ldr	r2, [pc, #124]	@ (8006f7c <HAL_TIM_Base_Start+0xb8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d018      	beq.n	8006f34 <HAL_TIM_Base_Start+0x70>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1e      	ldr	r2, [pc, #120]	@ (8006f80 <HAL_TIM_Base_Start+0xbc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d013      	beq.n	8006f34 <HAL_TIM_Base_Start+0x70>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1c      	ldr	r2, [pc, #112]	@ (8006f84 <HAL_TIM_Base_Start+0xc0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d00e      	beq.n	8006f34 <HAL_TIM_Base_Start+0x70>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006f88 <HAL_TIM_Base_Start+0xc4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d009      	beq.n	8006f34 <HAL_TIM_Base_Start+0x70>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a19      	ldr	r2, [pc, #100]	@ (8006f8c <HAL_TIM_Base_Start+0xc8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d004      	beq.n	8006f34 <HAL_TIM_Base_Start+0x70>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a18      	ldr	r2, [pc, #96]	@ (8006f90 <HAL_TIM_Base_Start+0xcc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d111      	bne.n	8006f58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b06      	cmp	r3, #6
 8006f44:	d010      	beq.n	8006f68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0201 	orr.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f56:	e007      	b.n	8006f68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40010000 	.word	0x40010000
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40010400 	.word	0x40010400
 8006f8c:	40014000 	.word	0x40014000
 8006f90:	40001800 	.word	0x40001800

08006f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e0b4      	b.n	800711a <HAL_TIM_ConfigClockSource+0x186>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe8:	d03e      	beq.n	8007068 <HAL_TIM_ConfigClockSource+0xd4>
 8006fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fee:	f200 8087 	bhi.w	8007100 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ff6:	f000 8086 	beq.w	8007106 <HAL_TIM_ConfigClockSource+0x172>
 8006ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ffe:	d87f      	bhi.n	8007100 <HAL_TIM_ConfigClockSource+0x16c>
 8007000:	2b70      	cmp	r3, #112	@ 0x70
 8007002:	d01a      	beq.n	800703a <HAL_TIM_ConfigClockSource+0xa6>
 8007004:	2b70      	cmp	r3, #112	@ 0x70
 8007006:	d87b      	bhi.n	8007100 <HAL_TIM_ConfigClockSource+0x16c>
 8007008:	2b60      	cmp	r3, #96	@ 0x60
 800700a:	d050      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x11a>
 800700c:	2b60      	cmp	r3, #96	@ 0x60
 800700e:	d877      	bhi.n	8007100 <HAL_TIM_ConfigClockSource+0x16c>
 8007010:	2b50      	cmp	r3, #80	@ 0x50
 8007012:	d03c      	beq.n	800708e <HAL_TIM_ConfigClockSource+0xfa>
 8007014:	2b50      	cmp	r3, #80	@ 0x50
 8007016:	d873      	bhi.n	8007100 <HAL_TIM_ConfigClockSource+0x16c>
 8007018:	2b40      	cmp	r3, #64	@ 0x40
 800701a:	d058      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x13a>
 800701c:	2b40      	cmp	r3, #64	@ 0x40
 800701e:	d86f      	bhi.n	8007100 <HAL_TIM_ConfigClockSource+0x16c>
 8007020:	2b30      	cmp	r3, #48	@ 0x30
 8007022:	d064      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x15a>
 8007024:	2b30      	cmp	r3, #48	@ 0x30
 8007026:	d86b      	bhi.n	8007100 <HAL_TIM_ConfigClockSource+0x16c>
 8007028:	2b20      	cmp	r3, #32
 800702a:	d060      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x15a>
 800702c:	2b20      	cmp	r3, #32
 800702e:	d867      	bhi.n	8007100 <HAL_TIM_ConfigClockSource+0x16c>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d05c      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x15a>
 8007034:	2b10      	cmp	r3, #16
 8007036:	d05a      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x15a>
 8007038:	e062      	b.n	8007100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800704a:	f000 f991 	bl	8007370 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800705c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	609a      	str	r2, [r3, #8]
      break;
 8007066:	e04f      	b.n	8007108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007078:	f000 f97a 	bl	8007370 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800708a:	609a      	str	r2, [r3, #8]
      break;
 800708c:	e03c      	b.n	8007108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800709a:	461a      	mov	r2, r3
 800709c:	f000 f8ee 	bl	800727c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2150      	movs	r1, #80	@ 0x50
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 f947 	bl	800733a <TIM_ITRx_SetConfig>
      break;
 80070ac:	e02c      	b.n	8007108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ba:	461a      	mov	r2, r3
 80070bc:	f000 f90d 	bl	80072da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2160      	movs	r1, #96	@ 0x60
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f937 	bl	800733a <TIM_ITRx_SetConfig>
      break;
 80070cc:	e01c      	b.n	8007108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070da:	461a      	mov	r2, r3
 80070dc:	f000 f8ce 	bl	800727c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2140      	movs	r1, #64	@ 0x40
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 f927 	bl	800733a <TIM_ITRx_SetConfig>
      break;
 80070ec:	e00c      	b.n	8007108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4619      	mov	r1, r3
 80070f8:	4610      	mov	r0, r2
 80070fa:	f000 f91e 	bl	800733a <TIM_ITRx_SetConfig>
      break;
 80070fe:	e003      	b.n	8007108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]
      break;
 8007104:	e000      	b.n	8007108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a46      	ldr	r2, [pc, #280]	@ (8007250 <TIM_Base_SetConfig+0x12c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007142:	d00f      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a43      	ldr	r2, [pc, #268]	@ (8007254 <TIM_Base_SetConfig+0x130>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00b      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a42      	ldr	r2, [pc, #264]	@ (8007258 <TIM_Base_SetConfig+0x134>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d007      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a41      	ldr	r2, [pc, #260]	@ (800725c <TIM_Base_SetConfig+0x138>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a40      	ldr	r2, [pc, #256]	@ (8007260 <TIM_Base_SetConfig+0x13c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d108      	bne.n	8007176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800716a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a35      	ldr	r2, [pc, #212]	@ (8007250 <TIM_Base_SetConfig+0x12c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d02b      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007184:	d027      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a32      	ldr	r2, [pc, #200]	@ (8007254 <TIM_Base_SetConfig+0x130>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d023      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a31      	ldr	r2, [pc, #196]	@ (8007258 <TIM_Base_SetConfig+0x134>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d01f      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a30      	ldr	r2, [pc, #192]	@ (800725c <TIM_Base_SetConfig+0x138>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d01b      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2f      	ldr	r2, [pc, #188]	@ (8007260 <TIM_Base_SetConfig+0x13c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d017      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a2e      	ldr	r2, [pc, #184]	@ (8007264 <TIM_Base_SetConfig+0x140>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007268 <TIM_Base_SetConfig+0x144>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00f      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a2c      	ldr	r2, [pc, #176]	@ (800726c <TIM_Base_SetConfig+0x148>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00b      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007270 <TIM_Base_SetConfig+0x14c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d007      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a2a      	ldr	r2, [pc, #168]	@ (8007274 <TIM_Base_SetConfig+0x150>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a29      	ldr	r2, [pc, #164]	@ (8007278 <TIM_Base_SetConfig+0x154>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d108      	bne.n	80071e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a10      	ldr	r2, [pc, #64]	@ (8007250 <TIM_Base_SetConfig+0x12c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_Base_SetConfig+0xf8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a12      	ldr	r2, [pc, #72]	@ (8007260 <TIM_Base_SetConfig+0x13c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d103      	bne.n	8007224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	691a      	ldr	r2, [r3, #16]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b01      	cmp	r3, #1
 8007234:	d105      	bne.n	8007242 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f023 0201 	bic.w	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	611a      	str	r2, [r3, #16]
  }
}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40010000 	.word	0x40010000
 8007254:	40000400 	.word	0x40000400
 8007258:	40000800 	.word	0x40000800
 800725c:	40000c00 	.word	0x40000c00
 8007260:	40010400 	.word	0x40010400
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800
 8007270:	40001800 	.word	0x40001800
 8007274:	40001c00 	.word	0x40001c00
 8007278:	40002000 	.word	0x40002000

0800727c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	f023 0201 	bic.w	r2, r3, #1
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f023 030a 	bic.w	r3, r3, #10
 80072b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	4313      	orrs	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	621a      	str	r2, [r3, #32]
}
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072da:	b480      	push	{r7}
 80072dc:	b087      	sub	sp, #28
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	f023 0210 	bic.w	r2, r3, #16
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007304:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	031b      	lsls	r3, r3, #12
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007316:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	621a      	str	r2, [r3, #32]
}
 800732e:	bf00      	nop
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4313      	orrs	r3, r2
 8007358:	f043 0307 	orr.w	r3, r3, #7
 800735c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	609a      	str	r2, [r3, #8]
}
 8007364:	bf00      	nop
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800738a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	021a      	lsls	r2, r3, #8
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	431a      	orrs	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	4313      	orrs	r3, r2
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	609a      	str	r2, [r3, #8]
}
 80073a4:	bf00      	nop
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d101      	bne.n	80073c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073c4:	2302      	movs	r3, #2
 80073c6:	e05a      	b.n	800747e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a21      	ldr	r2, [pc, #132]	@ (800748c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d022      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007414:	d01d      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1d      	ldr	r2, [pc, #116]	@ (8007490 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d018      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1b      	ldr	r2, [pc, #108]	@ (8007494 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1a      	ldr	r2, [pc, #104]	@ (8007498 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00e      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a18      	ldr	r2, [pc, #96]	@ (800749c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d009      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a17      	ldr	r2, [pc, #92]	@ (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d004      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a15      	ldr	r2, [pc, #84]	@ (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10c      	bne.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	4313      	orrs	r3, r2
 8007462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40010000 	.word	0x40010000
 8007490:	40000400 	.word	0x40000400
 8007494:	40000800 	.word	0x40000800
 8007498:	40000c00 	.word	0x40000c00
 800749c:	40010400 	.word	0x40010400
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40001800 	.word	0x40001800

080074a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e042      	b.n	8007540 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fb fc72 	bl	8002db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2224      	movs	r2, #36	@ 0x24
 80074d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fc85 	bl	8007dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	691a      	ldr	r2, [r3, #16]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695a      	ldr	r2, [r3, #20]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b0ba      	sub	sp, #232	@ 0xe8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800756e:	2300      	movs	r3, #0
 8007570:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007574:	2300      	movs	r3, #0
 8007576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800757a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10f      	bne.n	80075ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800758e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <HAL_UART_IRQHandler+0x66>
 800759a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fb69 	bl	8007c7e <UART_Receive_IT>
      return;
 80075ac:	e25b      	b.n	8007a66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 80de 	beq.w	8007774 <HAL_UART_IRQHandler+0x22c>
 80075b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d106      	bne.n	80075d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 80d1 	beq.w	8007774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <HAL_UART_IRQHandler+0xae>
 80075de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ee:	f043 0201 	orr.w	r2, r3, #1
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00b      	beq.n	800761a <HAL_UART_IRQHandler+0xd2>
 8007602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007612:	f043 0202 	orr.w	r2, r3, #2
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800761a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00b      	beq.n	800763e <HAL_UART_IRQHandler+0xf6>
 8007626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d005      	beq.n	800763e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007636:	f043 0204 	orr.w	r2, r3, #4
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800763e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d011      	beq.n	800766e <HAL_UART_IRQHandler+0x126>
 800764a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	d105      	bne.n	8007662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007666:	f043 0208 	orr.w	r2, r3, #8
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 81f2 	beq.w	8007a5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <HAL_UART_IRQHandler+0x14e>
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 faf4 	bl	8007c7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a0:	2b40      	cmp	r3, #64	@ 0x40
 80076a2:	bf0c      	ite	eq
 80076a4:	2301      	moveq	r3, #1
 80076a6:	2300      	movne	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d103      	bne.n	80076c2 <HAL_UART_IRQHandler+0x17a>
 80076ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d04f      	beq.n	8007762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f9fc 	bl	8007ac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d2:	2b40      	cmp	r3, #64	@ 0x40
 80076d4:	d141      	bne.n	800775a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3314      	adds	r3, #20
 80076dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80076ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3314      	adds	r3, #20
 80076fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007702:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007706:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800770e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800771a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1d9      	bne.n	80076d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007726:	2b00      	cmp	r3, #0
 8007728:	d013      	beq.n	8007752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772e:	4a7e      	ldr	r2, [pc, #504]	@ (8007928 <HAL_UART_IRQHandler+0x3e0>)
 8007730:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007736:	4618      	mov	r0, r3
 8007738:	f7fc f952 	bl	80039e0 <HAL_DMA_Abort_IT>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d016      	beq.n	8007770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007750:	e00e      	b.n	8007770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f99e 	bl	8007a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007758:	e00a      	b.n	8007770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f99a 	bl	8007a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007760:	e006      	b.n	8007770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f996 	bl	8007a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800776e:	e175      	b.n	8007a5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007770:	bf00      	nop
    return;
 8007772:	e173      	b.n	8007a5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007778:	2b01      	cmp	r3, #1
 800777a:	f040 814f 	bne.w	8007a1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800777e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8148 	beq.w	8007a1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800778c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007790:	f003 0310 	and.w	r3, r3, #16
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8141 	beq.w	8007a1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800779a:	2300      	movs	r3, #0
 800779c:	60bb      	str	r3, [r7, #8]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	60bb      	str	r3, [r7, #8]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	60bb      	str	r3, [r7, #8]
 80077ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ba:	2b40      	cmp	r3, #64	@ 0x40
 80077bc:	f040 80b6 	bne.w	800792c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 8145 	beq.w	8007a60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077de:	429a      	cmp	r2, r3
 80077e0:	f080 813e 	bcs.w	8007a60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077f6:	f000 8088 	beq.w	800790a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	330c      	adds	r3, #12
 8007800:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007810:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007818:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	330c      	adds	r3, #12
 8007822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007826:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800782a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007832:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800783e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1d9      	bne.n	80077fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3314      	adds	r3, #20
 800784c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007856:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3314      	adds	r3, #20
 8007866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800786a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800786e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007872:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800787c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e1      	bne.n	8007846 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3314      	adds	r3, #20
 8007888:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007898:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3314      	adds	r3, #20
 80078a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80078a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80078a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80078ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80078b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e3      	bne.n	8007882 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	330c      	adds	r3, #12
 80078ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078da:	f023 0310 	bic.w	r3, r3, #16
 80078de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	330c      	adds	r3, #12
 80078e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80078ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80078ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078f4:	e841 2300 	strex	r3, r2, [r1]
 80078f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e3      	bne.n	80078c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007904:	4618      	mov	r0, r3
 8007906:	f7fb fffb 	bl	8003900 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2202      	movs	r2, #2
 800790e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007918:	b29b      	uxth	r3, r3
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	b29b      	uxth	r3, r3
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f8c1 	bl	8007aa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007926:	e09b      	b.n	8007a60 <HAL_UART_IRQHandler+0x518>
 8007928:	08007b87 	.word	0x08007b87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007934:	b29b      	uxth	r3, r3
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 808e 	beq.w	8007a64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 8089 	beq.w	8007a64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	330c      	adds	r3, #12
 8007958:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007964:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007968:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007976:	647a      	str	r2, [r7, #68]	@ 0x44
 8007978:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800797c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e3      	bne.n	8007952 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3314      	adds	r3, #20
 8007990:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	623b      	str	r3, [r7, #32]
   return(result);
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	f023 0301 	bic.w	r3, r3, #1
 80079a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3314      	adds	r3, #20
 80079aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80079ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80079b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e3      	bne.n	800798a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2220      	movs	r2, #32
 80079c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	330c      	adds	r3, #12
 80079d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0310 	bic.w	r3, r3, #16
 80079e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	330c      	adds	r3, #12
 80079f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80079f4:	61fa      	str	r2, [r7, #28]
 80079f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	69b9      	ldr	r1, [r7, #24]
 80079fa:	69fa      	ldr	r2, [r7, #28]
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	617b      	str	r3, [r7, #20]
   return(result);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e3      	bne.n	80079d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f847 	bl	8007aa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a1a:	e023      	b.n	8007a64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d009      	beq.n	8007a3c <HAL_UART_IRQHandler+0x4f4>
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f8ba 	bl	8007bae <UART_Transmit_IT>
    return;
 8007a3a:	e014      	b.n	8007a66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00e      	beq.n	8007a66 <HAL_UART_IRQHandler+0x51e>
 8007a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d008      	beq.n	8007a66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f8fa 	bl	8007c4e <UART_EndTransmit_IT>
    return;
 8007a5a:	e004      	b.n	8007a66 <HAL_UART_IRQHandler+0x51e>
    return;
 8007a5c:	bf00      	nop
 8007a5e:	e002      	b.n	8007a66 <HAL_UART_IRQHandler+0x51e>
      return;
 8007a60:	bf00      	nop
 8007a62:	e000      	b.n	8007a66 <HAL_UART_IRQHandler+0x51e>
      return;
 8007a64:	bf00      	nop
  }
}
 8007a66:	37e8      	adds	r7, #232	@ 0xe8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b095      	sub	sp, #84	@ 0x54
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	330c      	adds	r3, #12
 8007ace:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	330c      	adds	r3, #12
 8007ae6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ae8:	643a      	str	r2, [r7, #64]	@ 0x40
 8007aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007af0:	e841 2300 	strex	r3, r2, [r1]
 8007af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e5      	bne.n	8007ac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3314      	adds	r3, #20
 8007b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f023 0301 	bic.w	r3, r3, #1
 8007b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3314      	adds	r3, #20
 8007b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e5      	bne.n	8007afc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d119      	bne.n	8007b6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	330c      	adds	r3, #12
 8007b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	e853 3f00 	ldrex	r3, [r3]
 8007b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f023 0310 	bic.w	r3, r3, #16
 8007b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	330c      	adds	r3, #12
 8007b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b58:	61ba      	str	r2, [r7, #24]
 8007b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5c:	6979      	ldr	r1, [r7, #20]
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	e841 2300 	strex	r3, r2, [r1]
 8007b64:	613b      	str	r3, [r7, #16]
   return(result);
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e5      	bne.n	8007b38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b7a:	bf00      	nop
 8007b7c:	3754      	adds	r7, #84	@ 0x54
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f7ff ff77 	bl	8007a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ba6:	bf00      	nop
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b21      	cmp	r3, #33	@ 0x21
 8007bc0:	d13e      	bne.n	8007c40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bca:	d114      	bne.n	8007bf6 <UART_Transmit_IT+0x48>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d110      	bne.n	8007bf6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007be8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	1c9a      	adds	r2, r3, #2
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	621a      	str	r2, [r3, #32]
 8007bf4:	e008      	b.n	8007c08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	1c59      	adds	r1, r3, #1
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	6211      	str	r1, [r2, #32]
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	4619      	mov	r1, r3
 8007c16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10f      	bne.n	8007c3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e000      	b.n	8007c42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c40:	2302      	movs	r3, #2
  }
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68da      	ldr	r2, [r3, #12]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff fefc 	bl	8007a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b08c      	sub	sp, #48	@ 0x30
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b22      	cmp	r3, #34	@ 0x22
 8007c90:	f040 80ae 	bne.w	8007df0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c9c:	d117      	bne.n	8007cce <UART_Receive_IT+0x50>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d113      	bne.n	8007cce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc6:	1c9a      	adds	r2, r3, #2
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ccc:	e026      	b.n	8007d1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce0:	d007      	beq.n	8007cf2 <UART_Receive_IT+0x74>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10a      	bne.n	8007d00 <UART_Receive_IT+0x82>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d106      	bne.n	8007d00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfc:	701a      	strb	r2, [r3, #0]
 8007cfe:	e008      	b.n	8007d12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d15d      	bne.n	8007dec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0220 	bic.w	r2, r2, #32
 8007d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695a      	ldr	r2, [r3, #20]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0201 	bic.w	r2, r2, #1
 8007d5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d135      	bne.n	8007de2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	330c      	adds	r3, #12
 8007d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	e853 3f00 	ldrex	r3, [r3]
 8007d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f023 0310 	bic.w	r3, r3, #16
 8007d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d9c:	623a      	str	r2, [r7, #32]
 8007d9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	69f9      	ldr	r1, [r7, #28]
 8007da2:	6a3a      	ldr	r2, [r7, #32]
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e5      	bne.n	8007d7c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0310 	and.w	r3, r3, #16
 8007dba:	2b10      	cmp	r3, #16
 8007dbc:	d10a      	bne.n	8007dd4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60fb      	str	r3, [r7, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff fe64 	bl	8007aa8 <HAL_UARTEx_RxEventCallback>
 8007de0:	e002      	b.n	8007de8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff fe4c 	bl	8007a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	e002      	b.n	8007df2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	e000      	b.n	8007df2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007df0:	2302      	movs	r3, #2
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3730      	adds	r7, #48	@ 0x30
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e00:	b0c0      	sub	sp, #256	@ 0x100
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e18:	68d9      	ldr	r1, [r3, #12]
 8007e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	ea40 0301 	orr.w	r3, r0, r1
 8007e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	431a      	orrs	r2, r3
 8007e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007e54:	f021 010c 	bic.w	r1, r1, #12
 8007e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e62:	430b      	orrs	r3, r1
 8007e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e76:	6999      	ldr	r1, [r3, #24]
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	ea40 0301 	orr.w	r3, r0, r1
 8007e82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4b8f      	ldr	r3, [pc, #572]	@ (80080c8 <UART_SetConfig+0x2cc>)
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d005      	beq.n	8007e9c <UART_SetConfig+0xa0>
 8007e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4b8d      	ldr	r3, [pc, #564]	@ (80080cc <UART_SetConfig+0x2d0>)
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d104      	bne.n	8007ea6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e9c:	f7fc fe66 	bl	8004b6c <HAL_RCC_GetPCLK2Freq>
 8007ea0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ea4:	e003      	b.n	8007eae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ea6:	f7fc fe4d 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8007eaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eb8:	f040 810c 	bne.w	80080d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ec6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007eca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ece:	4622      	mov	r2, r4
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	1891      	adds	r1, r2, r2
 8007ed4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007ed6:	415b      	adcs	r3, r3
 8007ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007eda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ede:	4621      	mov	r1, r4
 8007ee0:	eb12 0801 	adds.w	r8, r2, r1
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	eb43 0901 	adc.w	r9, r3, r1
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	f04f 0300 	mov.w	r3, #0
 8007ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007efe:	4690      	mov	r8, r2
 8007f00:	4699      	mov	r9, r3
 8007f02:	4623      	mov	r3, r4
 8007f04:	eb18 0303 	adds.w	r3, r8, r3
 8007f08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	eb49 0303 	adc.w	r3, r9, r3
 8007f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	18db      	adds	r3, r3, r3
 8007f2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f30:	4613      	mov	r3, r2
 8007f32:	eb42 0303 	adc.w	r3, r2, r3
 8007f36:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007f3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007f40:	f7f8 f942 	bl	80001c8 <__aeabi_uldivmod>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4b61      	ldr	r3, [pc, #388]	@ (80080d0 <UART_SetConfig+0x2d4>)
 8007f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f4e:	095b      	lsrs	r3, r3, #5
 8007f50:	011c      	lsls	r4, r3, #4
 8007f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007f60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007f64:	4642      	mov	r2, r8
 8007f66:	464b      	mov	r3, r9
 8007f68:	1891      	adds	r1, r2, r2
 8007f6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007f6c:	415b      	adcs	r3, r3
 8007f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007f74:	4641      	mov	r1, r8
 8007f76:	eb12 0a01 	adds.w	sl, r2, r1
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	eb43 0b01 	adc.w	fp, r3, r1
 8007f80:	f04f 0200 	mov.w	r2, #0
 8007f84:	f04f 0300 	mov.w	r3, #0
 8007f88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f94:	4692      	mov	sl, r2
 8007f96:	469b      	mov	fp, r3
 8007f98:	4643      	mov	r3, r8
 8007f9a:	eb1a 0303 	adds.w	r3, sl, r3
 8007f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	eb4b 0303 	adc.w	r3, fp, r3
 8007fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007fbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	18db      	adds	r3, r3, r3
 8007fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	eb42 0303 	adc.w	r3, r2, r3
 8007fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007fd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007fd6:	f7f8 f8f7 	bl	80001c8 <__aeabi_uldivmod>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80080d0 <UART_SetConfig+0x2d4>)
 8007fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8007fe6:	095b      	lsrs	r3, r3, #5
 8007fe8:	2264      	movs	r2, #100	@ 0x64
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	1acb      	subs	r3, r1, r3
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ff6:	4b36      	ldr	r3, [pc, #216]	@ (80080d0 <UART_SetConfig+0x2d4>)
 8007ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8007ffc:	095b      	lsrs	r3, r3, #5
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008004:	441c      	add	r4, r3
 8008006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800800a:	2200      	movs	r2, #0
 800800c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008010:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008014:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008018:	4642      	mov	r2, r8
 800801a:	464b      	mov	r3, r9
 800801c:	1891      	adds	r1, r2, r2
 800801e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008020:	415b      	adcs	r3, r3
 8008022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008028:	4641      	mov	r1, r8
 800802a:	1851      	adds	r1, r2, r1
 800802c:	6339      	str	r1, [r7, #48]	@ 0x30
 800802e:	4649      	mov	r1, r9
 8008030:	414b      	adcs	r3, r1
 8008032:	637b      	str	r3, [r7, #52]	@ 0x34
 8008034:	f04f 0200 	mov.w	r2, #0
 8008038:	f04f 0300 	mov.w	r3, #0
 800803c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008040:	4659      	mov	r1, fp
 8008042:	00cb      	lsls	r3, r1, #3
 8008044:	4651      	mov	r1, sl
 8008046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800804a:	4651      	mov	r1, sl
 800804c:	00ca      	lsls	r2, r1, #3
 800804e:	4610      	mov	r0, r2
 8008050:	4619      	mov	r1, r3
 8008052:	4603      	mov	r3, r0
 8008054:	4642      	mov	r2, r8
 8008056:	189b      	adds	r3, r3, r2
 8008058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800805c:	464b      	mov	r3, r9
 800805e:	460a      	mov	r2, r1
 8008060:	eb42 0303 	adc.w	r3, r2, r3
 8008064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008074:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800807c:	460b      	mov	r3, r1
 800807e:	18db      	adds	r3, r3, r3
 8008080:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008082:	4613      	mov	r3, r2
 8008084:	eb42 0303 	adc.w	r3, r2, r3
 8008088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800808a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800808e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008092:	f7f8 f899 	bl	80001c8 <__aeabi_uldivmod>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4b0d      	ldr	r3, [pc, #52]	@ (80080d0 <UART_SetConfig+0x2d4>)
 800809c:	fba3 1302 	umull	r1, r3, r3, r2
 80080a0:	095b      	lsrs	r3, r3, #5
 80080a2:	2164      	movs	r1, #100	@ 0x64
 80080a4:	fb01 f303 	mul.w	r3, r1, r3
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	3332      	adds	r3, #50	@ 0x32
 80080ae:	4a08      	ldr	r2, [pc, #32]	@ (80080d0 <UART_SetConfig+0x2d4>)
 80080b0:	fba2 2303 	umull	r2, r3, r2, r3
 80080b4:	095b      	lsrs	r3, r3, #5
 80080b6:	f003 0207 	and.w	r2, r3, #7
 80080ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4422      	add	r2, r4
 80080c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080c4:	e106      	b.n	80082d4 <UART_SetConfig+0x4d8>
 80080c6:	bf00      	nop
 80080c8:	40011000 	.word	0x40011000
 80080cc:	40011400 	.word	0x40011400
 80080d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080d8:	2200      	movs	r2, #0
 80080da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80080de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80080e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80080e6:	4642      	mov	r2, r8
 80080e8:	464b      	mov	r3, r9
 80080ea:	1891      	adds	r1, r2, r2
 80080ec:	6239      	str	r1, [r7, #32]
 80080ee:	415b      	adcs	r3, r3
 80080f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80080f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080f6:	4641      	mov	r1, r8
 80080f8:	1854      	adds	r4, r2, r1
 80080fa:	4649      	mov	r1, r9
 80080fc:	eb43 0501 	adc.w	r5, r3, r1
 8008100:	f04f 0200 	mov.w	r2, #0
 8008104:	f04f 0300 	mov.w	r3, #0
 8008108:	00eb      	lsls	r3, r5, #3
 800810a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800810e:	00e2      	lsls	r2, r4, #3
 8008110:	4614      	mov	r4, r2
 8008112:	461d      	mov	r5, r3
 8008114:	4643      	mov	r3, r8
 8008116:	18e3      	adds	r3, r4, r3
 8008118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800811c:	464b      	mov	r3, r9
 800811e:	eb45 0303 	adc.w	r3, r5, r3
 8008122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008132:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008136:	f04f 0200 	mov.w	r2, #0
 800813a:	f04f 0300 	mov.w	r3, #0
 800813e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008142:	4629      	mov	r1, r5
 8008144:	008b      	lsls	r3, r1, #2
 8008146:	4621      	mov	r1, r4
 8008148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800814c:	4621      	mov	r1, r4
 800814e:	008a      	lsls	r2, r1, #2
 8008150:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008154:	f7f8 f838 	bl	80001c8 <__aeabi_uldivmod>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4b60      	ldr	r3, [pc, #384]	@ (80082e0 <UART_SetConfig+0x4e4>)
 800815e:	fba3 2302 	umull	r2, r3, r3, r2
 8008162:	095b      	lsrs	r3, r3, #5
 8008164:	011c      	lsls	r4, r3, #4
 8008166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800816a:	2200      	movs	r2, #0
 800816c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008170:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008174:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008178:	4642      	mov	r2, r8
 800817a:	464b      	mov	r3, r9
 800817c:	1891      	adds	r1, r2, r2
 800817e:	61b9      	str	r1, [r7, #24]
 8008180:	415b      	adcs	r3, r3
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008188:	4641      	mov	r1, r8
 800818a:	1851      	adds	r1, r2, r1
 800818c:	6139      	str	r1, [r7, #16]
 800818e:	4649      	mov	r1, r9
 8008190:	414b      	adcs	r3, r1
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	f04f 0200 	mov.w	r2, #0
 8008198:	f04f 0300 	mov.w	r3, #0
 800819c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081a0:	4659      	mov	r1, fp
 80081a2:	00cb      	lsls	r3, r1, #3
 80081a4:	4651      	mov	r1, sl
 80081a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081aa:	4651      	mov	r1, sl
 80081ac:	00ca      	lsls	r2, r1, #3
 80081ae:	4610      	mov	r0, r2
 80081b0:	4619      	mov	r1, r3
 80081b2:	4603      	mov	r3, r0
 80081b4:	4642      	mov	r2, r8
 80081b6:	189b      	adds	r3, r3, r2
 80081b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081bc:	464b      	mov	r3, r9
 80081be:	460a      	mov	r2, r1
 80081c0:	eb42 0303 	adc.w	r3, r2, r3
 80081c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 0300 	mov.w	r3, #0
 80081dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80081e0:	4649      	mov	r1, r9
 80081e2:	008b      	lsls	r3, r1, #2
 80081e4:	4641      	mov	r1, r8
 80081e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081ea:	4641      	mov	r1, r8
 80081ec:	008a      	lsls	r2, r1, #2
 80081ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80081f2:	f7f7 ffe9 	bl	80001c8 <__aeabi_uldivmod>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	4b38      	ldr	r3, [pc, #224]	@ (80082e0 <UART_SetConfig+0x4e4>)
 80081fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	2264      	movs	r2, #100	@ 0x64
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	1acb      	subs	r3, r1, r3
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	3332      	adds	r3, #50	@ 0x32
 8008210:	4a33      	ldr	r2, [pc, #204]	@ (80082e0 <UART_SetConfig+0x4e4>)
 8008212:	fba2 2303 	umull	r2, r3, r2, r3
 8008216:	095b      	lsrs	r3, r3, #5
 8008218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800821c:	441c      	add	r4, r3
 800821e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008222:	2200      	movs	r2, #0
 8008224:	673b      	str	r3, [r7, #112]	@ 0x70
 8008226:	677a      	str	r2, [r7, #116]	@ 0x74
 8008228:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800822c:	4642      	mov	r2, r8
 800822e:	464b      	mov	r3, r9
 8008230:	1891      	adds	r1, r2, r2
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	415b      	adcs	r3, r3
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800823c:	4641      	mov	r1, r8
 800823e:	1851      	adds	r1, r2, r1
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	4649      	mov	r1, r9
 8008244:	414b      	adcs	r3, r1
 8008246:	607b      	str	r3, [r7, #4]
 8008248:	f04f 0200 	mov.w	r2, #0
 800824c:	f04f 0300 	mov.w	r3, #0
 8008250:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008254:	4659      	mov	r1, fp
 8008256:	00cb      	lsls	r3, r1, #3
 8008258:	4651      	mov	r1, sl
 800825a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800825e:	4651      	mov	r1, sl
 8008260:	00ca      	lsls	r2, r1, #3
 8008262:	4610      	mov	r0, r2
 8008264:	4619      	mov	r1, r3
 8008266:	4603      	mov	r3, r0
 8008268:	4642      	mov	r2, r8
 800826a:	189b      	adds	r3, r3, r2
 800826c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800826e:	464b      	mov	r3, r9
 8008270:	460a      	mov	r2, r1
 8008272:	eb42 0303 	adc.w	r3, r2, r3
 8008276:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	663b      	str	r3, [r7, #96]	@ 0x60
 8008282:	667a      	str	r2, [r7, #100]	@ 0x64
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	f04f 0300 	mov.w	r3, #0
 800828c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008290:	4649      	mov	r1, r9
 8008292:	008b      	lsls	r3, r1, #2
 8008294:	4641      	mov	r1, r8
 8008296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800829a:	4641      	mov	r1, r8
 800829c:	008a      	lsls	r2, r1, #2
 800829e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80082a2:	f7f7 ff91 	bl	80001c8 <__aeabi_uldivmod>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4b0d      	ldr	r3, [pc, #52]	@ (80082e0 <UART_SetConfig+0x4e4>)
 80082ac:	fba3 1302 	umull	r1, r3, r3, r2
 80082b0:	095b      	lsrs	r3, r3, #5
 80082b2:	2164      	movs	r1, #100	@ 0x64
 80082b4:	fb01 f303 	mul.w	r3, r1, r3
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	3332      	adds	r3, #50	@ 0x32
 80082be:	4a08      	ldr	r2, [pc, #32]	@ (80082e0 <UART_SetConfig+0x4e4>)
 80082c0:	fba2 2303 	umull	r2, r3, r2, r3
 80082c4:	095b      	lsrs	r3, r3, #5
 80082c6:	f003 020f 	and.w	r2, r3, #15
 80082ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4422      	add	r2, r4
 80082d2:	609a      	str	r2, [r3, #8]
}
 80082d4:	bf00      	nop
 80082d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80082da:	46bd      	mov	sp, r7
 80082dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082e0:	51eb851f 	.word	0x51eb851f

080082e4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80082e4:	b084      	sub	sp, #16
 80082e6:	b480      	push	{r7}
 80082e8:	b085      	sub	sp, #20
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	f107 001c 	add.w	r0, r7, #28
 80082f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80082fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80082fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80082fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008302:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008306:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800830a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800830c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800830e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	4313      	orrs	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800831e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	b004      	add	sp, #16
 8008338:	4770      	bx	lr

0800833a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2203      	movs	r2, #3
 8008382:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0303 	and.w	r3, r3, #3
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80083cc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80083d2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80083d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4313      	orrs	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80083e8:	f023 030f 	bic.w	r3, r3, #15
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	431a      	orrs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	b2db      	uxtb	r3, r3
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3314      	adds	r3, #20
 800842a:	461a      	mov	r2, r3
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	4413      	add	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
}  
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008442:	b480      	push	{r7}
 8008444:	b085      	sub	sp, #20
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008468:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800846e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008474:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008480:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800848c:	2300      	movs	r3, #0

}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b088      	sub	sp, #32
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80084a8:	2310      	movs	r3, #16
 80084aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084ac:	2340      	movs	r3, #64	@ 0x40
 80084ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084ba:	f107 0308 	add.w	r3, r7, #8
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff ff74 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80084c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084ca:	2110      	movs	r1, #16
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f9d7 	bl	8008880 <SDMMC_GetCmdResp1>
 80084d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084d4:	69fb      	ldr	r3, [r7, #28]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3720      	adds	r7, #32
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b088      	sub	sp, #32
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80084ec:	2311      	movs	r3, #17
 80084ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084f0:	2340      	movs	r3, #64	@ 0x40
 80084f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084f4:	2300      	movs	r3, #0
 80084f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084fe:	f107 0308 	add.w	r3, r7, #8
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff ff52 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800850a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800850e:	2111      	movs	r1, #17
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f9b5 	bl	8008880 <SDMMC_GetCmdResp1>
 8008516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008518:	69fb      	ldr	r3, [r7, #28]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3720      	adds	r7, #32
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b088      	sub	sp, #32
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008530:	2312      	movs	r3, #18
 8008532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008534:	2340      	movs	r3, #64	@ 0x40
 8008536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008538:	2300      	movs	r3, #0
 800853a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800853c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008540:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008542:	f107 0308 	add.w	r3, r7, #8
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff ff30 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800854e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008552:	2112      	movs	r1, #18
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f993 	bl	8008880 <SDMMC_GetCmdResp1>
 800855a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800855c:	69fb      	ldr	r3, [r7, #28]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b088      	sub	sp, #32
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008574:	2318      	movs	r3, #24
 8008576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008578:	2340      	movs	r3, #64	@ 0x40
 800857a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008584:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008586:	f107 0308 	add.w	r3, r7, #8
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff ff0e 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008596:	2118      	movs	r1, #24
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f971 	bl	8008880 <SDMMC_GetCmdResp1>
 800859e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085a0:	69fb      	ldr	r3, [r7, #28]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3720      	adds	r7, #32
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b088      	sub	sp, #32
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80085b8:	2319      	movs	r3, #25
 80085ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085bc:	2340      	movs	r3, #64	@ 0x40
 80085be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085ca:	f107 0308 	add.w	r3, r7, #8
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7ff feec 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80085d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085da:	2119      	movs	r1, #25
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f94f 	bl	8008880 <SDMMC_GetCmdResp1>
 80085e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085e4:	69fb      	ldr	r3, [r7, #28]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80085fc:	230c      	movs	r3, #12
 80085fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008600:	2340      	movs	r3, #64	@ 0x40
 8008602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008604:	2300      	movs	r3, #0
 8008606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800860c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800860e:	f107 0308 	add.w	r3, r7, #8
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff feca 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800861a:	4a05      	ldr	r2, [pc, #20]	@ (8008630 <SDMMC_CmdStopTransfer+0x40>)
 800861c:	210c      	movs	r1, #12
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f92e 	bl	8008880 <SDMMC_GetCmdResp1>
 8008624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008626:	69fb      	ldr	r3, [r7, #28]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3720      	adds	r7, #32
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	05f5e100 	.word	0x05f5e100

08008634 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08a      	sub	sp, #40	@ 0x28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008644:	2307      	movs	r3, #7
 8008646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008648:	2340      	movs	r3, #64	@ 0x40
 800864a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800864c:	2300      	movs	r3, #0
 800864e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008654:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008656:	f107 0310 	add.w	r3, r7, #16
 800865a:	4619      	mov	r1, r3
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f7ff fea6 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008666:	2107      	movs	r1, #7
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 f909 	bl	8008880 <SDMMC_GetCmdResp1>
 800866e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008672:	4618      	mov	r0, r3
 8008674:	3728      	adds	r7, #40	@ 0x28
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b088      	sub	sp, #32
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800868a:	2300      	movs	r3, #0
 800868c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800868e:	2300      	movs	r3, #0
 8008690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008696:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008698:	f107 0308 	add.w	r3, r7, #8
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff fe85 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fb23 	bl	8008cf0 <SDMMC_GetCmdError>
 80086aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086ac:	69fb      	ldr	r3, [r7, #28]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3720      	adds	r7, #32
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b088      	sub	sp, #32
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80086be:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80086c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80086c4:	2308      	movs	r3, #8
 80086c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086c8:	2340      	movs	r3, #64	@ 0x40
 80086ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086cc:	2300      	movs	r3, #0
 80086ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086d6:	f107 0308 	add.w	r3, r7, #8
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff fe66 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fab6 	bl	8008c54 <SDMMC_GetCmdResp7>
 80086e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086ea:	69fb      	ldr	r3, [r7, #28]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3720      	adds	r7, #32
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008702:	2337      	movs	r3, #55	@ 0x37
 8008704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008706:	2340      	movs	r3, #64	@ 0x40
 8008708:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800870e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008712:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008714:	f107 0308 	add.w	r3, r7, #8
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff fe47 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008724:	2137      	movs	r1, #55	@ 0x37
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f8aa 	bl	8008880 <SDMMC_GetCmdResp1>
 800872c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800872e:	69fb      	ldr	r3, [r7, #28]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3720      	adds	r7, #32
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008748:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800874c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800874e:	2329      	movs	r3, #41	@ 0x29
 8008750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008752:	2340      	movs	r3, #64	@ 0x40
 8008754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800875a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800875e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008760:	f107 0308 	add.w	r3, r7, #8
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff fe21 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f9bd 	bl	8008aec <SDMMC_GetCmdResp3>
 8008772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008774:	69fb      	ldr	r3, [r7, #28]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3720      	adds	r7, #32
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b088      	sub	sp, #32
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800878a:	2302      	movs	r3, #2
 800878c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800878e:	23c0      	movs	r3, #192	@ 0xc0
 8008790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800879a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800879c:	f107 0308 	add.w	r3, r7, #8
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff fe03 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f957 	bl	8008a5c <SDMMC_GetCmdResp2>
 80087ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087b0:	69fb      	ldr	r3, [r7, #28]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3720      	adds	r7, #32
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b088      	sub	sp, #32
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80087c8:	2309      	movs	r3, #9
 80087ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80087cc:	23c0      	movs	r3, #192	@ 0xc0
 80087ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087da:	f107 0308 	add.w	r3, r7, #8
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff fde4 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f938 	bl	8008a5c <SDMMC_GetCmdResp2>
 80087ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087ee:	69fb      	ldr	r3, [r7, #28]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3720      	adds	r7, #32
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008806:	2303      	movs	r3, #3
 8008808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800880a:	2340      	movs	r3, #64	@ 0x40
 800880c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800880e:	2300      	movs	r3, #0
 8008810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008816:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008818:	f107 0308 	add.w	r3, r7, #8
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff fdc5 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	2103      	movs	r1, #3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f99d 	bl	8008b68 <SDMMC_GetCmdResp6>
 800882e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008830:	69fb      	ldr	r3, [r7, #28]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3720      	adds	r7, #32
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b088      	sub	sp, #32
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008848:	230d      	movs	r3, #13
 800884a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800884c:	2340      	movs	r3, #64	@ 0x40
 800884e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008850:	2300      	movs	r3, #0
 8008852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008858:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800885a:	f107 0308 	add.w	r3, r7, #8
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff fda4 	bl	80083ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800886a:	210d      	movs	r1, #13
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f807 	bl	8008880 <SDMMC_GetCmdResp1>
 8008872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008874:	69fb      	ldr	r3, [r7, #28]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3720      	adds	r7, #32
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b088      	sub	sp, #32
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	460b      	mov	r3, r1
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800888e:	4b70      	ldr	r3, [pc, #448]	@ (8008a50 <SDMMC_GetCmdResp1+0x1d0>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a70      	ldr	r2, [pc, #448]	@ (8008a54 <SDMMC_GetCmdResp1+0x1d4>)
 8008894:	fba2 2303 	umull	r2, r3, r2, r3
 8008898:	0a5a      	lsrs	r2, r3, #9
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	fb02 f303 	mul.w	r3, r2, r3
 80088a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	1e5a      	subs	r2, r3, #1
 80088a6:	61fa      	str	r2, [r7, #28]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d102      	bne.n	80088b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80088b0:	e0c9      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0ef      	beq.n	80088a2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1ea      	bne.n	80088a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d004      	beq.n	80088e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2204      	movs	r2, #4
 80088dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088de:	2304      	movs	r3, #4
 80088e0:	e0b1      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d004      	beq.n	80088f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2201      	movs	r2, #1
 80088f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e0a6      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	22c5      	movs	r2, #197	@ 0xc5
 80088fc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff fd7f 	bl	8008402 <SDIO_GetCommandResponse>
 8008904:	4603      	mov	r3, r0
 8008906:	461a      	mov	r2, r3
 8008908:	7afb      	ldrb	r3, [r7, #11]
 800890a:	4293      	cmp	r3, r2
 800890c:	d001      	beq.n	8008912 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800890e:	2301      	movs	r3, #1
 8008910:	e099      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008912:	2100      	movs	r1, #0
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f7ff fd81 	bl	800841c <SDIO_GetResponse>
 800891a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4b4e      	ldr	r3, [pc, #312]	@ (8008a58 <SDMMC_GetCmdResp1+0x1d8>)
 8008920:	4013      	ands	r3, r2
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008926:	2300      	movs	r3, #0
 8008928:	e08d      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2b00      	cmp	r3, #0
 800892e:	da02      	bge.n	8008936 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008930:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008934:	e087      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008940:	2340      	movs	r3, #64	@ 0x40
 8008942:	e080      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800894e:	2380      	movs	r3, #128	@ 0x80
 8008950:	e079      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800895c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008960:	e071      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800896c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008970:	e069      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800897c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008980:	e061      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800898c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008990:	e059      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800899c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089a0:	e051      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80089b0:	e049      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80089bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80089c0:	e041      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80089cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089d0:	e039      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80089dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80089e0:	e031      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80089ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80089f0:	e029      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80089fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008a00:	e021      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008a0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008a10:	e019      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008a1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008a20:	e011      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008a2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008a30:	e009      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f003 0308 	and.w	r3, r3, #8
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008a3c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008a40:	e001      	b.n	8008a46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3720      	adds	r7, #32
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	2000000c 	.word	0x2000000c
 8008a54:	10624dd3 	.word	0x10624dd3
 8008a58:	fdffe008 	.word	0xfdffe008

08008a5c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a64:	4b1f      	ldr	r3, [pc, #124]	@ (8008ae4 <SDMMC_GetCmdResp2+0x88>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a1f      	ldr	r2, [pc, #124]	@ (8008ae8 <SDMMC_GetCmdResp2+0x8c>)
 8008a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6e:	0a5b      	lsrs	r3, r3, #9
 8008a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a74:	fb02 f303 	mul.w	r3, r2, r3
 8008a78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	1e5a      	subs	r2, r3, #1
 8008a7e:	60fa      	str	r2, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d102      	bne.n	8008a8a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a88:	e026      	b.n	8008ad8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0ef      	beq.n	8008a7a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1ea      	bne.n	8008a7a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aa8:	f003 0304 	and.w	r3, r3, #4
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d004      	beq.n	8008aba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ab6:	2304      	movs	r3, #4
 8008ab8:	e00e      	b.n	8008ad8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e003      	b.n	8008ad8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	22c5      	movs	r2, #197	@ 0xc5
 8008ad4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	2000000c 	.word	0x2000000c
 8008ae8:	10624dd3 	.word	0x10624dd3

08008aec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008af4:	4b1a      	ldr	r3, [pc, #104]	@ (8008b60 <SDMMC_GetCmdResp3+0x74>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a1a      	ldr	r2, [pc, #104]	@ (8008b64 <SDMMC_GetCmdResp3+0x78>)
 8008afa:	fba2 2303 	umull	r2, r3, r2, r3
 8008afe:	0a5b      	lsrs	r3, r3, #9
 8008b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b04:	fb02 f303 	mul.w	r3, r2, r3
 8008b08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	1e5a      	subs	r2, r3, #1
 8008b0e:	60fa      	str	r2, [r7, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d102      	bne.n	8008b1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008b18:	e01b      	b.n	8008b52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0ef      	beq.n	8008b0a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1ea      	bne.n	8008b0a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d004      	beq.n	8008b4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2204      	movs	r2, #4
 8008b44:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b46:	2304      	movs	r3, #4
 8008b48:	e003      	b.n	8008b52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	22c5      	movs	r2, #197	@ 0xc5
 8008b4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	2000000c 	.word	0x2000000c
 8008b64:	10624dd3 	.word	0x10624dd3

08008b68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	460b      	mov	r3, r1
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b76:	4b35      	ldr	r3, [pc, #212]	@ (8008c4c <SDMMC_GetCmdResp6+0xe4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a35      	ldr	r2, [pc, #212]	@ (8008c50 <SDMMC_GetCmdResp6+0xe8>)
 8008b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b80:	0a5b      	lsrs	r3, r3, #9
 8008b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b86:	fb02 f303 	mul.w	r3, r2, r3
 8008b8a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	1e5a      	subs	r2, r3, #1
 8008b90:	61fa      	str	r2, [r7, #28]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d102      	bne.n	8008b9c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b96:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008b9a:	e052      	b.n	8008c42 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d0ef      	beq.n	8008b8c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1ea      	bne.n	8008b8c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bba:	f003 0304 	and.w	r3, r3, #4
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2204      	movs	r2, #4
 8008bc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bc8:	2304      	movs	r3, #4
 8008bca:	e03a      	b.n	8008c42 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d004      	beq.n	8008be2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e02f      	b.n	8008c42 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f7ff fc0d 	bl	8008402 <SDIO_GetCommandResponse>
 8008be8:	4603      	mov	r3, r0
 8008bea:	461a      	mov	r2, r3
 8008bec:	7afb      	ldrb	r3, [r7, #11]
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d001      	beq.n	8008bf6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e025      	b.n	8008c42 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	22c5      	movs	r2, #197	@ 0xc5
 8008bfa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff fc0c 	bl	800841c <SDIO_GetResponse>
 8008c04:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d106      	bne.n	8008c1e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	0c1b      	lsrs	r3, r3, #16
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e011      	b.n	8008c42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008c2c:	e009      	b.n	8008c42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c3c:	e001      	b.n	8008c42 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3720      	adds	r7, #32
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	2000000c 	.word	0x2000000c
 8008c50:	10624dd3 	.word	0x10624dd3

08008c54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c5c:	4b22      	ldr	r3, [pc, #136]	@ (8008ce8 <SDMMC_GetCmdResp7+0x94>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a22      	ldr	r2, [pc, #136]	@ (8008cec <SDMMC_GetCmdResp7+0x98>)
 8008c62:	fba2 2303 	umull	r2, r3, r2, r3
 8008c66:	0a5b      	lsrs	r3, r3, #9
 8008c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c6c:	fb02 f303 	mul.w	r3, r2, r3
 8008c70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	1e5a      	subs	r2, r3, #1
 8008c76:	60fa      	str	r2, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008c80:	e02c      	b.n	8008cdc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0ef      	beq.n	8008c72 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1ea      	bne.n	8008c72 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d004      	beq.n	8008cb2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2204      	movs	r2, #4
 8008cac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cae:	2304      	movs	r3, #4
 8008cb0:	e014      	b.n	8008cdc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e009      	b.n	8008cdc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2240      	movs	r2, #64	@ 0x40
 8008cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008cda:	2300      	movs	r3, #0
  
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	2000000c 	.word	0x2000000c
 8008cec:	10624dd3 	.word	0x10624dd3

08008cf0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cf8:	4b11      	ldr	r3, [pc, #68]	@ (8008d40 <SDMMC_GetCmdError+0x50>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a11      	ldr	r2, [pc, #68]	@ (8008d44 <SDMMC_GetCmdError+0x54>)
 8008cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008d02:	0a5b      	lsrs	r3, r3, #9
 8008d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d08:	fb02 f303 	mul.w	r3, r2, r3
 8008d0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	1e5a      	subs	r2, r3, #1
 8008d12:	60fa      	str	r2, [r7, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d102      	bne.n	8008d1e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008d1c:	e009      	b.n	8008d32 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d0f1      	beq.n	8008d0e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	22c5      	movs	r2, #197	@ 0xc5
 8008d2e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	2000000c 	.word	0x2000000c
 8008d44:	10624dd3 	.word	0x10624dd3

08008d48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008d4c:	4904      	ldr	r1, [pc, #16]	@ (8008d60 <MX_FATFS_Init+0x18>)
 8008d4e:	4805      	ldr	r0, [pc, #20]	@ (8008d64 <MX_FATFS_Init+0x1c>)
 8008d50:	f002 fcf0 	bl	800b734 <FATFS_LinkDriver>
 8008d54:	4603      	mov	r3, r0
 8008d56:	461a      	mov	r2, r3
 8008d58:	4b03      	ldr	r3, [pc, #12]	@ (8008d68 <MX_FATFS_Init+0x20>)
 8008d5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d5c:	bf00      	nop
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	20000584 	.word	0x20000584
 8008d64:	0800c8f8 	.word	0x0800c8f8
 8008d68:	20000580 	.word	0x20000580

08008d6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008d70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008d86:	f000 f86b 	bl	8008e60 <BSP_SD_IsDetected>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d001      	beq.n	8008d94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e005      	b.n	8008da0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008d94:	4804      	ldr	r0, [pc, #16]	@ (8008da8 <BSP_SD_Init+0x2c>)
 8008d96:	f7fb fefd 	bl	8004b94 <HAL_SD_Init>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	200000fc 	.word	0x200000fc

08008dac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	4806      	ldr	r0, [pc, #24]	@ (8008de4 <BSP_SD_ReadBlocks+0x38>)
 8008dca:	f7fb ff93 	bl	8004cf4 <HAL_SD_ReadBlocks>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	200000fc 	.word	0x200000fc

08008de8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	68f9      	ldr	r1, [r7, #12]
 8008e04:	4806      	ldr	r0, [pc, #24]	@ (8008e20 <BSP_SD_WriteBlocks+0x38>)
 8008e06:	f7fc f95b 	bl	80050c0 <HAL_SD_WriteBlocks>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	200000fc 	.word	0x200000fc

08008e24 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008e28:	4805      	ldr	r0, [pc, #20]	@ (8008e40 <BSP_SD_GetCardState+0x1c>)
 8008e2a:	f7fc fca7 	bl	800577c <HAL_SD_GetCardState>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	bf14      	ite	ne
 8008e34:	2301      	movne	r3, #1
 8008e36:	2300      	moveq	r3, #0
 8008e38:	b2db      	uxtb	r3, r3
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	200000fc 	.word	0x200000fc

08008e44 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008e4c:	6879      	ldr	r1, [r7, #4]
 8008e4e:	4803      	ldr	r0, [pc, #12]	@ (8008e5c <BSP_SD_GetCardInfo+0x18>)
 8008e50:	f7fc fc68 	bl	8005724 <HAL_SD_GetCardInfo>
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	200000fc 	.word	0x200000fc

08008e60 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008e66:	2301      	movs	r3, #1
 8008e68:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8008e6a:	79fb      	ldrb	r3, [r7, #7]
 8008e6c:	b2db      	uxtb	r3, r3
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
	...

08008e7c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008e86:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb4 <SD_CheckStatus+0x38>)
 8008e88:	2201      	movs	r2, #1
 8008e8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008e8c:	f7ff ffca 	bl	8008e24 <BSP_SD_GetCardState>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d107      	bne.n	8008ea6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008e96:	4b07      	ldr	r3, [pc, #28]	@ (8008eb4 <SD_CheckStatus+0x38>)
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	f023 0301 	bic.w	r3, r3, #1
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	4b04      	ldr	r3, [pc, #16]	@ (8008eb4 <SD_CheckStatus+0x38>)
 8008ea4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008ea6:	4b03      	ldr	r3, [pc, #12]	@ (8008eb4 <SD_CheckStatus+0x38>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	b2db      	uxtb	r3, r3
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20000015 	.word	0x20000015

08008eb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef0 <SD_initialize+0x38>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008ec8:	f7ff ff58 	bl	8008d7c <BSP_SD_Init>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d107      	bne.n	8008ee2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff ffd1 	bl	8008e7c <SD_CheckStatus>
 8008eda:	4603      	mov	r3, r0
 8008edc:	461a      	mov	r2, r3
 8008ede:	4b04      	ldr	r3, [pc, #16]	@ (8008ef0 <SD_initialize+0x38>)
 8008ee0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008ee2:	4b03      	ldr	r3, [pc, #12]	@ (8008ef0 <SD_initialize+0x38>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	b2db      	uxtb	r3, r3
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20000015 	.word	0x20000015

08008ef4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7ff ffbb 	bl	8008e7c <SD_CheckStatus>
 8008f06:	4603      	mov	r3, r0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	607a      	str	r2, [r7, #4]
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008f24:	f04f 33ff 	mov.w	r3, #4294967295
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	6879      	ldr	r1, [r7, #4]
 8008f2c:	68b8      	ldr	r0, [r7, #8]
 8008f2e:	f7ff ff3d 	bl	8008dac <BSP_SD_ReadBlocks>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d107      	bne.n	8008f48 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008f38:	bf00      	nop
 8008f3a:	f7ff ff73 	bl	8008e24 <BSP_SD_GetCardState>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1fa      	bne.n	8008f3a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b086      	sub	sp, #24
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	603b      	str	r3, [r7, #0]
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008f66:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	68b8      	ldr	r0, [r7, #8]
 8008f70:	f7ff ff3a 	bl	8008de8 <BSP_SD_WriteBlocks>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d107      	bne.n	8008f8a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008f7a:	bf00      	nop
 8008f7c:	f7ff ff52 	bl	8008e24 <BSP_SD_GetCardState>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1fa      	bne.n	8008f7c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08c      	sub	sp, #48	@ 0x30
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	603a      	str	r2, [r7, #0]
 8008f9e:	71fb      	strb	r3, [r7, #7]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008faa:	4b25      	ldr	r3, [pc, #148]	@ (8009040 <SD_ioctl+0xac>)
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <SD_ioctl+0x28>
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e03c      	b.n	8009036 <SD_ioctl+0xa2>

  switch (cmd)
 8008fbc:	79bb      	ldrb	r3, [r7, #6]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d834      	bhi.n	800902c <SD_ioctl+0x98>
 8008fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc8 <SD_ioctl+0x34>)
 8008fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc8:	08008fd9 	.word	0x08008fd9
 8008fcc:	08008fe1 	.word	0x08008fe1
 8008fd0:	08008ff9 	.word	0x08008ff9
 8008fd4:	08009013 	.word	0x08009013
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008fde:	e028      	b.n	8009032 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff ff2d 	bl	8008e44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008ff6:	e01c      	b.n	8009032 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008ff8:	f107 030c 	add.w	r3, r7, #12
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7ff ff21 	bl	8008e44 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009004:	b29a      	uxth	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009010:	e00f      	b.n	8009032 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009012:	f107 030c 	add.w	r3, r7, #12
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff ff14 	bl	8008e44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800901c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901e:	0a5a      	lsrs	r2, r3, #9
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800902a:	e002      	b.n	8009032 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800902c:	2304      	movs	r3, #4
 800902e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009032:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009036:	4618      	mov	r0, r3
 8009038:	3730      	adds	r7, #48	@ 0x30
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	20000015 	.word	0x20000015

08009044 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800904e:	79fb      	ldrb	r3, [r7, #7]
 8009050:	4a08      	ldr	r2, [pc, #32]	@ (8009074 <disk_status+0x30>)
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	79fa      	ldrb	r2, [r7, #7]
 800905c:	4905      	ldr	r1, [pc, #20]	@ (8009074 <disk_status+0x30>)
 800905e:	440a      	add	r2, r1
 8009060:	7a12      	ldrb	r2, [r2, #8]
 8009062:	4610      	mov	r0, r2
 8009064:	4798      	blx	r3
 8009066:	4603      	mov	r3, r0
 8009068:	73fb      	strb	r3, [r7, #15]
  return stat;
 800906a:	7bfb      	ldrb	r3, [r7, #15]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	200005b0 	.word	0x200005b0

08009078 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	4a0e      	ldr	r2, [pc, #56]	@ (80090c4 <disk_initialize+0x4c>)
 800908a:	5cd3      	ldrb	r3, [r2, r3]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d114      	bne.n	80090ba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009090:	79fb      	ldrb	r3, [r7, #7]
 8009092:	4a0c      	ldr	r2, [pc, #48]	@ (80090c4 <disk_initialize+0x4c>)
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	79fa      	ldrb	r2, [r7, #7]
 800909e:	4909      	ldr	r1, [pc, #36]	@ (80090c4 <disk_initialize+0x4c>)
 80090a0:	440a      	add	r2, r1
 80090a2:	7a12      	ldrb	r2, [r2, #8]
 80090a4:	4610      	mov	r0, r2
 80090a6:	4798      	blx	r3
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d103      	bne.n	80090ba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	4a03      	ldr	r2, [pc, #12]	@ (80090c4 <disk_initialize+0x4c>)
 80090b6:	2101      	movs	r1, #1
 80090b8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	200005b0 	.word	0x200005b0

080090c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80090c8:	b590      	push	{r4, r7, lr}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
 80090d2:	603b      	str	r3, [r7, #0]
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	4a0a      	ldr	r2, [pc, #40]	@ (8009104 <disk_read+0x3c>)
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	689c      	ldr	r4, [r3, #8]
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	4a07      	ldr	r2, [pc, #28]	@ (8009104 <disk_read+0x3c>)
 80090e8:	4413      	add	r3, r2
 80090ea:	7a18      	ldrb	r0, [r3, #8]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	68b9      	ldr	r1, [r7, #8]
 80090f2:	47a0      	blx	r4
 80090f4:	4603      	mov	r3, r0
 80090f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd90      	pop	{r4, r7, pc}
 8009102:	bf00      	nop
 8009104:	200005b0 	.word	0x200005b0

08009108 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009108:	b590      	push	{r4, r7, lr}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	60b9      	str	r1, [r7, #8]
 8009110:	607a      	str	r2, [r7, #4]
 8009112:	603b      	str	r3, [r7, #0]
 8009114:	4603      	mov	r3, r0
 8009116:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	4a0a      	ldr	r2, [pc, #40]	@ (8009144 <disk_write+0x3c>)
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	68dc      	ldr	r4, [r3, #12]
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	4a07      	ldr	r2, [pc, #28]	@ (8009144 <disk_write+0x3c>)
 8009128:	4413      	add	r3, r2
 800912a:	7a18      	ldrb	r0, [r3, #8]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	47a0      	blx	r4
 8009134:	4603      	mov	r3, r0
 8009136:	75fb      	strb	r3, [r7, #23]
  return res;
 8009138:	7dfb      	ldrb	r3, [r7, #23]
}
 800913a:	4618      	mov	r0, r3
 800913c:	371c      	adds	r7, #28
 800913e:	46bd      	mov	sp, r7
 8009140:	bd90      	pop	{r4, r7, pc}
 8009142:	bf00      	nop
 8009144:	200005b0 	.word	0x200005b0

08009148 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	603a      	str	r2, [r7, #0]
 8009152:	71fb      	strb	r3, [r7, #7]
 8009154:	460b      	mov	r3, r1
 8009156:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	4a09      	ldr	r2, [pc, #36]	@ (8009180 <disk_ioctl+0x38>)
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	79fa      	ldrb	r2, [r7, #7]
 8009166:	4906      	ldr	r1, [pc, #24]	@ (8009180 <disk_ioctl+0x38>)
 8009168:	440a      	add	r2, r1
 800916a:	7a10      	ldrb	r0, [r2, #8]
 800916c:	79b9      	ldrb	r1, [r7, #6]
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	4798      	blx	r3
 8009172:	4603      	mov	r3, r0
 8009174:	73fb      	strb	r3, [r7, #15]
  return res;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	200005b0 	.word	0x200005b0

08009184 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3301      	adds	r3, #1
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009194:	89fb      	ldrh	r3, [r7, #14]
 8009196:	021b      	lsls	r3, r3, #8
 8009198:	b21a      	sxth	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	b21b      	sxth	r3, r3
 80091a0:	4313      	orrs	r3, r2
 80091a2:	b21b      	sxth	r3, r3
 80091a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80091a6:	89fb      	ldrh	r3, [r7, #14]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3303      	adds	r3, #3
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	3202      	adds	r2, #2
 80091cc:	7812      	ldrb	r2, [r2, #0]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	3201      	adds	r2, #1
 80091da:	7812      	ldrb	r2, [r2, #0]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	7812      	ldrb	r2, [r2, #0]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80091ec:	68fb      	ldr	r3, [r7, #12]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	460b      	mov	r3, r1
 8009204:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	887a      	ldrh	r2, [r7, #2]
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	701a      	strb	r2, [r3, #0]
 8009212:	887b      	ldrh	r3, [r7, #2]
 8009214:	0a1b      	lsrs	r3, r3, #8
 8009216:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	607a      	str	r2, [r7, #4]
 800921e:	887a      	ldrh	r2, [r7, #2]
 8009220:	b2d2      	uxtb	r2, r2
 8009222:	701a      	strb	r2, [r3, #0]
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	b2d2      	uxtb	r2, r2
 8009244:	701a      	strb	r2, [r3, #0]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	0a1b      	lsrs	r3, r3, #8
 800924a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	1c5a      	adds	r2, r3, #1
 8009250:	607a      	str	r2, [r7, #4]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	b2d2      	uxtb	r2, r2
 8009256:	701a      	strb	r2, [r3, #0]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	0a1b      	lsrs	r3, r3, #8
 800925c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	701a      	strb	r2, [r3, #0]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	607a      	str	r2, [r7, #4]
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	b2d2      	uxtb	r2, r2
 800927a:	701a      	strb	r2, [r3, #0]
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00d      	beq.n	80092be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	1c53      	adds	r3, r2, #1
 80092a6:	613b      	str	r3, [r7, #16]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	1c59      	adds	r1, r3, #1
 80092ac:	6179      	str	r1, [r7, #20]
 80092ae:	7812      	ldrb	r2, [r2, #0]
 80092b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	607b      	str	r3, [r7, #4]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1f1      	bne.n	80092a2 <mem_cpy+0x1a>
	}
}
 80092be:	bf00      	nop
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80092ca:	b480      	push	{r7}
 80092cc:	b087      	sub	sp, #28
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	1c5a      	adds	r2, r3, #1
 80092de:	617a      	str	r2, [r7, #20]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	b2d2      	uxtb	r2, r2
 80092e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	607b      	str	r3, [r7, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1f3      	bne.n	80092da <mem_set+0x10>
}
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009300:	b480      	push	{r7}
 8009302:	b089      	sub	sp, #36	@ 0x24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	61fb      	str	r3, [r7, #28]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	61fa      	str	r2, [r7, #28]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	4619      	mov	r1, r3
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	61ba      	str	r2, [r7, #24]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	1acb      	subs	r3, r1, r3
 800932c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3b01      	subs	r3, #1
 8009332:	607b      	str	r3, [r7, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <mem_cmp+0x40>
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d0eb      	beq.n	8009318 <mem_cmp+0x18>

	return r;
 8009340:	697b      	ldr	r3, [r7, #20]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3724      	adds	r7, #36	@ 0x24
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800934e:	b480      	push	{r7}
 8009350:	b083      	sub	sp, #12
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009358:	e002      	b.n	8009360 <chk_chr+0x12>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	3301      	adds	r3, #1
 800935e:	607b      	str	r3, [r7, #4]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <chk_chr+0x26>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	4293      	cmp	r3, r2
 8009372:	d1f2      	bne.n	800935a <chk_chr+0xc>
	return *str;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	781b      	ldrb	r3, [r3, #0]
}
 8009378:	4618      	mov	r0, r3
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800938e:	2300      	movs	r3, #0
 8009390:	60bb      	str	r3, [r7, #8]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	e029      	b.n	80093ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009398:	4a27      	ldr	r2, [pc, #156]	@ (8009438 <chk_lock+0xb4>)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	4413      	add	r3, r2
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01d      	beq.n	80093e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80093a6:	4a24      	ldr	r2, [pc, #144]	@ (8009438 <chk_lock+0xb4>)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	011b      	lsls	r3, r3, #4
 80093ac:	4413      	add	r3, r2
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d116      	bne.n	80093e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80093b8:	4a1f      	ldr	r2, [pc, #124]	@ (8009438 <chk_lock+0xb4>)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	011b      	lsls	r3, r3, #4
 80093be:	4413      	add	r3, r2
 80093c0:	3304      	adds	r3, #4
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d10c      	bne.n	80093e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80093cc:	4a1a      	ldr	r2, [pc, #104]	@ (8009438 <chk_lock+0xb4>)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	011b      	lsls	r3, r3, #4
 80093d2:	4413      	add	r3, r2
 80093d4:	3308      	adds	r3, #8
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80093dc:	429a      	cmp	r2, r3
 80093de:	d102      	bne.n	80093e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80093e0:	e007      	b.n	80093f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80093e2:	2301      	movs	r3, #1
 80093e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d9d2      	bls.n	8009398 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d109      	bne.n	800940c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d102      	bne.n	8009404 <chk_lock+0x80>
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	2b02      	cmp	r3, #2
 8009402:	d101      	bne.n	8009408 <chk_lock+0x84>
 8009404:	2300      	movs	r3, #0
 8009406:	e010      	b.n	800942a <chk_lock+0xa6>
 8009408:	2312      	movs	r3, #18
 800940a:	e00e      	b.n	800942a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d108      	bne.n	8009424 <chk_lock+0xa0>
 8009412:	4a09      	ldr	r2, [pc, #36]	@ (8009438 <chk_lock+0xb4>)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	011b      	lsls	r3, r3, #4
 8009418:	4413      	add	r3, r2
 800941a:	330c      	adds	r3, #12
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009422:	d101      	bne.n	8009428 <chk_lock+0xa4>
 8009424:	2310      	movs	r3, #16
 8009426:	e000      	b.n	800942a <chk_lock+0xa6>
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20000590 	.word	0x20000590

0800943c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009442:	2300      	movs	r3, #0
 8009444:	607b      	str	r3, [r7, #4]
 8009446:	e002      	b.n	800944e <enq_lock+0x12>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3301      	adds	r3, #1
 800944c:	607b      	str	r3, [r7, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d806      	bhi.n	8009462 <enq_lock+0x26>
 8009454:	4a09      	ldr	r2, [pc, #36]	@ (800947c <enq_lock+0x40>)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	4413      	add	r3, r2
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1f2      	bne.n	8009448 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b02      	cmp	r3, #2
 8009466:	bf14      	ite	ne
 8009468:	2301      	movne	r3, #1
 800946a:	2300      	moveq	r3, #0
 800946c:	b2db      	uxtb	r3, r3
}
 800946e:	4618      	mov	r0, r3
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	20000590 	.word	0x20000590

08009480 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
 800948e:	e01f      	b.n	80094d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009490:	4a41      	ldr	r2, [pc, #260]	@ (8009598 <inc_lock+0x118>)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	011b      	lsls	r3, r3, #4
 8009496:	4413      	add	r3, r2
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d113      	bne.n	80094ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80094a2:	4a3d      	ldr	r2, [pc, #244]	@ (8009598 <inc_lock+0x118>)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	011b      	lsls	r3, r3, #4
 80094a8:	4413      	add	r3, r2
 80094aa:	3304      	adds	r3, #4
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d109      	bne.n	80094ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80094b6:	4a38      	ldr	r2, [pc, #224]	@ (8009598 <inc_lock+0x118>)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	4413      	add	r3, r2
 80094be:	3308      	adds	r3, #8
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d006      	beq.n	80094d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3301      	adds	r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d9dc      	bls.n	8009490 <inc_lock+0x10>
 80094d6:	e000      	b.n	80094da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80094d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d132      	bne.n	8009546 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80094e0:	2300      	movs	r3, #0
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	e002      	b.n	80094ec <inc_lock+0x6c>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3301      	adds	r3, #1
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d806      	bhi.n	8009500 <inc_lock+0x80>
 80094f2:	4a29      	ldr	r2, [pc, #164]	@ (8009598 <inc_lock+0x118>)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	4413      	add	r3, r2
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f2      	bne.n	80094e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b02      	cmp	r3, #2
 8009504:	d101      	bne.n	800950a <inc_lock+0x8a>
 8009506:	2300      	movs	r3, #0
 8009508:	e040      	b.n	800958c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	4922      	ldr	r1, [pc, #136]	@ (8009598 <inc_lock+0x118>)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	440b      	add	r3, r1
 8009516:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	491e      	ldr	r1, [pc, #120]	@ (8009598 <inc_lock+0x118>)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	011b      	lsls	r3, r3, #4
 8009522:	440b      	add	r3, r1
 8009524:	3304      	adds	r3, #4
 8009526:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	695a      	ldr	r2, [r3, #20]
 800952c:	491a      	ldr	r1, [pc, #104]	@ (8009598 <inc_lock+0x118>)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	440b      	add	r3, r1
 8009534:	3308      	adds	r3, #8
 8009536:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009538:	4a17      	ldr	r2, [pc, #92]	@ (8009598 <inc_lock+0x118>)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	011b      	lsls	r3, r3, #4
 800953e:	4413      	add	r3, r2
 8009540:	330c      	adds	r3, #12
 8009542:	2200      	movs	r2, #0
 8009544:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d009      	beq.n	8009560 <inc_lock+0xe0>
 800954c:	4a12      	ldr	r2, [pc, #72]	@ (8009598 <inc_lock+0x118>)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	011b      	lsls	r3, r3, #4
 8009552:	4413      	add	r3, r2
 8009554:	330c      	adds	r3, #12
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <inc_lock+0xe0>
 800955c:	2300      	movs	r3, #0
 800955e:	e015      	b.n	800958c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d108      	bne.n	8009578 <inc_lock+0xf8>
 8009566:	4a0c      	ldr	r2, [pc, #48]	@ (8009598 <inc_lock+0x118>)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	011b      	lsls	r3, r3, #4
 800956c:	4413      	add	r3, r2
 800956e:	330c      	adds	r3, #12
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	3301      	adds	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	e001      	b.n	800957c <inc_lock+0xfc>
 8009578:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800957c:	4906      	ldr	r1, [pc, #24]	@ (8009598 <inc_lock+0x118>)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	011b      	lsls	r3, r3, #4
 8009582:	440b      	add	r3, r1
 8009584:	330c      	adds	r3, #12
 8009586:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	3301      	adds	r3, #1
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	20000590 	.word	0x20000590

0800959c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	607b      	str	r3, [r7, #4]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d825      	bhi.n	80095fc <dec_lock+0x60>
		n = Files[i].ctr;
 80095b0:	4a17      	ldr	r2, [pc, #92]	@ (8009610 <dec_lock+0x74>)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	011b      	lsls	r3, r3, #4
 80095b6:	4413      	add	r3, r2
 80095b8:	330c      	adds	r3, #12
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80095be:	89fb      	ldrh	r3, [r7, #14]
 80095c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095c4:	d101      	bne.n	80095ca <dec_lock+0x2e>
 80095c6:	2300      	movs	r3, #0
 80095c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80095ca:	89fb      	ldrh	r3, [r7, #14]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d002      	beq.n	80095d6 <dec_lock+0x3a>
 80095d0:	89fb      	ldrh	r3, [r7, #14]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80095d6:	4a0e      	ldr	r2, [pc, #56]	@ (8009610 <dec_lock+0x74>)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	011b      	lsls	r3, r3, #4
 80095dc:	4413      	add	r3, r2
 80095de:	330c      	adds	r3, #12
 80095e0:	89fa      	ldrh	r2, [r7, #14]
 80095e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80095e4:	89fb      	ldrh	r3, [r7, #14]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <dec_lock+0x5a>
 80095ea:	4a09      	ldr	r2, [pc, #36]	@ (8009610 <dec_lock+0x74>)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	011b      	lsls	r3, r3, #4
 80095f0:	4413      	add	r3, r2
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	737b      	strb	r3, [r7, #13]
 80095fa:	e001      	b.n	8009600 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80095fc:	2302      	movs	r3, #2
 80095fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009600:	7b7b      	ldrb	r3, [r7, #13]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	20000590 	.word	0x20000590

08009614 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800961c:	2300      	movs	r3, #0
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	e010      	b.n	8009644 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009622:	4a0d      	ldr	r2, [pc, #52]	@ (8009658 <clear_lock+0x44>)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	011b      	lsls	r3, r3, #4
 8009628:	4413      	add	r3, r2
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	429a      	cmp	r2, r3
 8009630:	d105      	bne.n	800963e <clear_lock+0x2a>
 8009632:	4a09      	ldr	r2, [pc, #36]	@ (8009658 <clear_lock+0x44>)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	011b      	lsls	r3, r3, #4
 8009638:	4413      	add	r3, r2
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3301      	adds	r3, #1
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d9eb      	bls.n	8009622 <clear_lock+0xe>
	}
}
 800964a:	bf00      	nop
 800964c:	bf00      	nop
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	20000590 	.word	0x20000590

0800965c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	78db      	ldrb	r3, [r3, #3]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d034      	beq.n	80096da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009674:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7858      	ldrb	r0, [r3, #1]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009680:	2301      	movs	r3, #1
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	f7ff fd40 	bl	8009108 <disk_write>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <sync_window+0x38>
			res = FR_DISK_ERR;
 800968e:	2301      	movs	r3, #1
 8009690:	73fb      	strb	r3, [r7, #15]
 8009692:	e022      	b.n	80096da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	1ad2      	subs	r2, r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d217      	bcs.n	80096da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	789b      	ldrb	r3, [r3, #2]
 80096ae:	613b      	str	r3, [r7, #16]
 80096b0:	e010      	b.n	80096d4 <sync_window+0x78>
					wsect += fs->fsize;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	4413      	add	r3, r2
 80096ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	7858      	ldrb	r0, [r3, #1]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80096c6:	2301      	movs	r3, #1
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	f7ff fd1d 	bl	8009108 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d8eb      	bhi.n	80096b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d01b      	beq.n	8009734 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff ffad 	bl	800965c <sync_window>
 8009702:	4603      	mov	r3, r0
 8009704:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d113      	bne.n	8009734 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	7858      	ldrb	r0, [r3, #1]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009716:	2301      	movs	r3, #1
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	f7ff fcd5 	bl	80090c8 <disk_read>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d004      	beq.n	800972e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009724:	f04f 33ff 	mov.w	r3, #4294967295
 8009728:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800972a:	2301      	movs	r3, #1
 800972c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8009734:	7bfb      	ldrb	r3, [r7, #15]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7ff ff87 	bl	800965c <sync_window>
 800974e:	4603      	mov	r3, r0
 8009750:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009752:	7bfb      	ldrb	r3, [r7, #15]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d158      	bne.n	800980a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b03      	cmp	r3, #3
 800975e:	d148      	bne.n	80097f2 <sync_fs+0xb2>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	791b      	ldrb	r3, [r3, #4]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d144      	bne.n	80097f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3330      	adds	r3, #48	@ 0x30
 800976c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff fda9 	bl	80092ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	3330      	adds	r3, #48	@ 0x30
 800977c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009780:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff fd38 	bl	80091fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3330      	adds	r3, #48	@ 0x30
 800978e:	4921      	ldr	r1, [pc, #132]	@ (8009814 <sync_fs+0xd4>)
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff fd4d 	bl	8009230 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	3330      	adds	r3, #48	@ 0x30
 800979a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800979e:	491e      	ldr	r1, [pc, #120]	@ (8009818 <sync_fs+0xd8>)
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff fd45 	bl	8009230 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	3330      	adds	r3, #48	@ 0x30
 80097aa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	4619      	mov	r1, r3
 80097b4:	4610      	mov	r0, r2
 80097b6:	f7ff fd3b 	bl	8009230 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	3330      	adds	r3, #48	@ 0x30
 80097be:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	4619      	mov	r1, r3
 80097c8:	4610      	mov	r0, r2
 80097ca:	f7ff fd31 	bl	8009230 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	7858      	ldrb	r0, [r3, #1]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097e6:	2301      	movs	r3, #1
 80097e8:	f7ff fc8e 	bl	8009108 <disk_write>
			fs->fsi_flag = 0;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	785b      	ldrb	r3, [r3, #1]
 80097f6:	2200      	movs	r2, #0
 80097f8:	2100      	movs	r1, #0
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7ff fca4 	bl	8009148 <disk_ioctl>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <sync_fs+0xca>
 8009806:	2301      	movs	r3, #1
 8009808:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800980a:	7bfb      	ldrb	r3, [r7, #15]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	41615252 	.word	0x41615252
 8009818:	61417272 	.word	0x61417272

0800981c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	3b02      	subs	r3, #2
 800982a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	3b02      	subs	r3, #2
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	429a      	cmp	r2, r3
 8009836:	d301      	bcc.n	800983c <clust2sect+0x20>
 8009838:	2300      	movs	r3, #0
 800983a:	e008      	b.n	800984e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	895b      	ldrh	r3, [r3, #10]
 8009840:	461a      	mov	r2, r3
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	fb03 f202 	mul.w	r2, r3, r2
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984c:	4413      	add	r3, r2
}
 800984e:	4618      	mov	r0, r3
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b086      	sub	sp, #24
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d904      	bls.n	800987a <get_fat+0x20>
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d302      	bcc.n	8009880 <get_fat+0x26>
		val = 1;	/* Internal error */
 800987a:	2301      	movs	r3, #1
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	e08e      	b.n	800999e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009880:	f04f 33ff 	mov.w	r3, #4294967295
 8009884:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	2b03      	cmp	r3, #3
 800988c:	d061      	beq.n	8009952 <get_fat+0xf8>
 800988e:	2b03      	cmp	r3, #3
 8009890:	dc7b      	bgt.n	800998a <get_fat+0x130>
 8009892:	2b01      	cmp	r3, #1
 8009894:	d002      	beq.n	800989c <get_fat+0x42>
 8009896:	2b02      	cmp	r3, #2
 8009898:	d041      	beq.n	800991e <get_fat+0xc4>
 800989a:	e076      	b.n	800998a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	085b      	lsrs	r3, r3, #1
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	4413      	add	r3, r2
 80098a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	6a1a      	ldr	r2, [r3, #32]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	0a5b      	lsrs	r3, r3, #9
 80098b2:	4413      	add	r3, r2
 80098b4:	4619      	mov	r1, r3
 80098b6:	6938      	ldr	r0, [r7, #16]
 80098b8:	f7ff ff14 	bl	80096e4 <move_window>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d166      	bne.n	8009990 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	1c5a      	adds	r2, r3, #1
 80098c6:	60fa      	str	r2, [r7, #12]
 80098c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	4413      	add	r3, r2
 80098d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80098d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	6a1a      	ldr	r2, [r3, #32]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	0a5b      	lsrs	r3, r3, #9
 80098de:	4413      	add	r3, r2
 80098e0:	4619      	mov	r1, r3
 80098e2:	6938      	ldr	r0, [r7, #16]
 80098e4:	f7ff fefe 	bl	80096e4 <move_window>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d152      	bne.n	8009994 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	4413      	add	r3, r2
 80098f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80098fc:	021b      	lsls	r3, r3, #8
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	4313      	orrs	r3, r2
 8009902:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <get_fat+0xba>
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	091b      	lsrs	r3, r3, #4
 8009912:	e002      	b.n	800991a <get_fat+0xc0>
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800991a:	617b      	str	r3, [r7, #20]
			break;
 800991c:	e03f      	b.n	800999e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	6a1a      	ldr	r2, [r3, #32]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	0a1b      	lsrs	r3, r3, #8
 8009926:	4413      	add	r3, r2
 8009928:	4619      	mov	r1, r3
 800992a:	6938      	ldr	r0, [r7, #16]
 800992c:	f7ff feda 	bl	80096e4 <move_window>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d130      	bne.n	8009998 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009944:	4413      	add	r3, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff fc1c 	bl	8009184 <ld_word>
 800994c:	4603      	mov	r3, r0
 800994e:	617b      	str	r3, [r7, #20]
			break;
 8009950:	e025      	b.n	800999e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	6a1a      	ldr	r2, [r3, #32]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	09db      	lsrs	r3, r3, #7
 800995a:	4413      	add	r3, r2
 800995c:	4619      	mov	r1, r3
 800995e:	6938      	ldr	r0, [r7, #16]
 8009960:	f7ff fec0 	bl	80096e4 <move_window>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d118      	bne.n	800999c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009978:	4413      	add	r3, r2
 800997a:	4618      	mov	r0, r3
 800997c:	f7ff fc1a 	bl	80091b4 <ld_dword>
 8009980:	4603      	mov	r3, r0
 8009982:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009986:	617b      	str	r3, [r7, #20]
			break;
 8009988:	e009      	b.n	800999e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800998a:	2301      	movs	r3, #1
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	e006      	b.n	800999e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009990:	bf00      	nop
 8009992:	e004      	b.n	800999e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009994:	bf00      	nop
 8009996:	e002      	b.n	800999e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009998:	bf00      	nop
 800999a:	e000      	b.n	800999e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800999c:	bf00      	nop
		}
	}

	return val;
 800999e:	697b      	ldr	r3, [r7, #20]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80099a8:	b590      	push	{r4, r7, lr}
 80099aa:	b089      	sub	sp, #36	@ 0x24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80099b4:	2302      	movs	r3, #2
 80099b6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	f240 80d9 	bls.w	8009b72 <put_fat+0x1ca>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	f080 80d3 	bcs.w	8009b72 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	f000 8096 	beq.w	8009b02 <put_fat+0x15a>
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	f300 80cb 	bgt.w	8009b72 <put_fat+0x1ca>
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d002      	beq.n	80099e6 <put_fat+0x3e>
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d06e      	beq.n	8009ac2 <put_fat+0x11a>
 80099e4:	e0c5      	b.n	8009b72 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	61bb      	str	r3, [r7, #24]
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	085b      	lsrs	r3, r3, #1
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	4413      	add	r3, r2
 80099f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6a1a      	ldr	r2, [r3, #32]
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	0a5b      	lsrs	r3, r3, #9
 80099fc:	4413      	add	r3, r2
 80099fe:	4619      	mov	r1, r3
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f7ff fe6f 	bl	80096e4 <move_window>
 8009a06:	4603      	mov	r3, r0
 8009a08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a0a:	7ffb      	ldrb	r3, [r7, #31]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f040 80a9 	bne.w	8009b64 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	1c59      	adds	r1, r3, #1
 8009a1c:	61b9      	str	r1, [r7, #24]
 8009a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a22:	4413      	add	r3, r2
 8009a24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00d      	beq.n	8009a4c <put_fat+0xa4>
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	b25b      	sxtb	r3, r3
 8009a36:	f003 030f 	and.w	r3, r3, #15
 8009a3a:	b25a      	sxtb	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	011b      	lsls	r3, r3, #4
 8009a42:	b25b      	sxtb	r3, r3
 8009a44:	4313      	orrs	r3, r2
 8009a46:	b25b      	sxtb	r3, r3
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	e001      	b.n	8009a50 <put_fat+0xa8>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2201      	movs	r2, #1
 8009a58:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6a1a      	ldr	r2, [r3, #32]
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	0a5b      	lsrs	r3, r3, #9
 8009a62:	4413      	add	r3, r2
 8009a64:	4619      	mov	r1, r3
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7ff fe3c 	bl	80096e4 <move_window>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a70:	7ffb      	ldrb	r3, [r7, #31]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d178      	bne.n	8009b68 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a82:	4413      	add	r3, r2
 8009a84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d003      	beq.n	8009a98 <put_fat+0xf0>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	091b      	lsrs	r3, r3, #4
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	e00e      	b.n	8009ab6 <put_fat+0x10e>
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	b25b      	sxtb	r3, r3
 8009a9e:	f023 030f 	bic.w	r3, r3, #15
 8009aa2:	b25a      	sxtb	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	0a1b      	lsrs	r3, r3, #8
 8009aa8:	b25b      	sxtb	r3, r3
 8009aaa:	f003 030f 	and.w	r3, r3, #15
 8009aae:	b25b      	sxtb	r3, r3
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	b25b      	sxtb	r3, r3
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2201      	movs	r2, #1
 8009abe:	70da      	strb	r2, [r3, #3]
			break;
 8009ac0:	e057      	b.n	8009b72 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6a1a      	ldr	r2, [r3, #32]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	0a1b      	lsrs	r3, r3, #8
 8009aca:	4413      	add	r3, r2
 8009acc:	4619      	mov	r1, r3
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f7ff fe08 	bl	80096e4 <move_window>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ad8:	7ffb      	ldrb	r3, [r7, #31]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d146      	bne.n	8009b6c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009aec:	4413      	add	r3, r2
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	b292      	uxth	r2, r2
 8009af2:	4611      	mov	r1, r2
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7ff fb80 	bl	80091fa <st_word>
			fs->wflag = 1;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2201      	movs	r2, #1
 8009afe:	70da      	strb	r2, [r3, #3]
			break;
 8009b00:	e037      	b.n	8009b72 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6a1a      	ldr	r2, [r3, #32]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	09db      	lsrs	r3, r3, #7
 8009b0a:	4413      	add	r3, r2
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7ff fde8 	bl	80096e4 <move_window>
 8009b14:	4603      	mov	r3, r0
 8009b16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b18:	7ffb      	ldrb	r3, [r7, #31]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d128      	bne.n	8009b70 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009b32:	4413      	add	r3, r2
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7ff fb3d 	bl	80091b4 <ld_dword>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009b40:	4323      	orrs	r3, r4
 8009b42:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009b52:	4413      	add	r3, r2
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7ff fb6a 	bl	8009230 <st_dword>
			fs->wflag = 1;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	70da      	strb	r2, [r3, #3]
			break;
 8009b62:	e006      	b.n	8009b72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009b64:	bf00      	nop
 8009b66:	e004      	b.n	8009b72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009b68:	bf00      	nop
 8009b6a:	e002      	b.n	8009b72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009b6c:	bf00      	nop
 8009b6e:	e000      	b.n	8009b72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009b70:	bf00      	nop
		}
	}
	return res;
 8009b72:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3724      	adds	r7, #36	@ 0x24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd90      	pop	{r4, r7, pc}

08009b7c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d904      	bls.n	8009ba2 <remove_chain+0x26>
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d301      	bcc.n	8009ba6 <remove_chain+0x2a>
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	e04b      	b.n	8009c3e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00c      	beq.n	8009bc6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009bac:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb0:	6879      	ldr	r1, [r7, #4]
 8009bb2:	69b8      	ldr	r0, [r7, #24]
 8009bb4:	f7ff fef8 	bl	80099a8 <put_fat>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009bbc:	7ffb      	ldrb	r3, [r7, #31]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <remove_chain+0x4a>
 8009bc2:	7ffb      	ldrb	r3, [r7, #31]
 8009bc4:	e03b      	b.n	8009c3e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009bc6:	68b9      	ldr	r1, [r7, #8]
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff fe46 	bl	800985a <get_fat>
 8009bce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d031      	beq.n	8009c3a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d101      	bne.n	8009be0 <remove_chain+0x64>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e02e      	b.n	8009c3e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be6:	d101      	bne.n	8009bec <remove_chain+0x70>
 8009be8:	2301      	movs	r3, #1
 8009bea:	e028      	b.n	8009c3e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009bec:	2200      	movs	r2, #0
 8009bee:	68b9      	ldr	r1, [r7, #8]
 8009bf0:	69b8      	ldr	r0, [r7, #24]
 8009bf2:	f7ff fed9 	bl	80099a8 <put_fat>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009bfa:	7ffb      	ldrb	r3, [r7, #31]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <remove_chain+0x88>
 8009c00:	7ffb      	ldrb	r3, [r7, #31]
 8009c02:	e01c      	b.n	8009c3e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	691a      	ldr	r2, [r3, #16]
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	3b02      	subs	r3, #2
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d20b      	bcs.n	8009c2a <remove_chain+0xae>
			fs->free_clst++;
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	791b      	ldrb	r3, [r3, #4]
 8009c20:	f043 0301 	orr.w	r3, r3, #1
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d3c6      	bcc.n	8009bc6 <remove_chain+0x4a>
 8009c38:	e000      	b.n	8009c3c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009c3a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3720      	adds	r7, #32
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b088      	sub	sp, #32
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10d      	bne.n	8009c78 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d004      	beq.n	8009c72 <create_chain+0x2c>
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d31b      	bcc.n	8009caa <create_chain+0x64>
 8009c72:	2301      	movs	r3, #1
 8009c74:	61bb      	str	r3, [r7, #24]
 8009c76:	e018      	b.n	8009caa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7ff fded 	bl	800985a <get_fat>
 8009c80:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d801      	bhi.n	8009c8c <create_chain+0x46>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e070      	b.n	8009d6e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c92:	d101      	bne.n	8009c98 <create_chain+0x52>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	e06a      	b.n	8009d6e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d201      	bcs.n	8009ca6 <create_chain+0x60>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	e063      	b.n	8009d6e <create_chain+0x128>
		scl = clst;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d307      	bcc.n	8009cce <create_chain+0x88>
				ncl = 2;
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d901      	bls.n	8009cce <create_chain+0x88>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e04f      	b.n	8009d6e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009cce:	69f9      	ldr	r1, [r7, #28]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7ff fdc2 	bl	800985a <get_fat>
 8009cd6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00e      	beq.n	8009cfc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d003      	beq.n	8009cec <create_chain+0xa6>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cea:	d101      	bne.n	8009cf0 <create_chain+0xaa>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	e03e      	b.n	8009d6e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009cf0:	69fa      	ldr	r2, [r7, #28]
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d1da      	bne.n	8009cae <create_chain+0x68>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	e038      	b.n	8009d6e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009cfc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009d02:	69f9      	ldr	r1, [r7, #28]
 8009d04:	6938      	ldr	r0, [r7, #16]
 8009d06:	f7ff fe4f 	bl	80099a8 <put_fat>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d109      	bne.n	8009d28 <create_chain+0xe2>
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d006      	beq.n	8009d28 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009d1a:	69fa      	ldr	r2, [r7, #28]
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6938      	ldr	r0, [r7, #16]
 8009d20:	f7ff fe42 	bl	80099a8 <put_fat>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d116      	bne.n	8009d5c <create_chain+0x116>
		fs->last_clst = ncl;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	69fa      	ldr	r2, [r7, #28]
 8009d32:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	691a      	ldr	r2, [r3, #16]
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	3b02      	subs	r3, #2
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d804      	bhi.n	8009d4c <create_chain+0x106>
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	1e5a      	subs	r2, r3, #1
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	791b      	ldrb	r3, [r3, #4]
 8009d50:	f043 0301 	orr.w	r3, r3, #1
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	711a      	strb	r2, [r3, #4]
 8009d5a:	e007      	b.n	8009d6c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d102      	bne.n	8009d68 <create_chain+0x122>
 8009d62:	f04f 33ff 	mov.w	r3, #4294967295
 8009d66:	e000      	b.n	8009d6a <create_chain+0x124>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009d6c:	69fb      	ldr	r3, [r7, #28]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3720      	adds	r7, #32
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b087      	sub	sp, #28
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	0a5b      	lsrs	r3, r3, #9
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	8952      	ldrh	r2, [r2, #10]
 8009d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d9a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	1d1a      	adds	r2, r3, #4
 8009da0:	613a      	str	r2, [r7, #16]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <clmt_clust+0x3a>
 8009dac:	2300      	movs	r3, #0
 8009dae:	e010      	b.n	8009dd2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009db0:	697a      	ldr	r2, [r7, #20]
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d307      	bcc.n	8009dc8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	617b      	str	r3, [r7, #20]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009dc6:	e7e9      	b.n	8009d9c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009dc8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	4413      	add	r3, r2
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b086      	sub	sp, #24
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009df4:	d204      	bcs.n	8009e00 <dir_sdi+0x22>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	f003 031f 	and.w	r3, r3, #31
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009e00:	2302      	movs	r3, #2
 8009e02:	e063      	b.n	8009ecc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d106      	bne.n	8009e24 <dir_sdi+0x46>
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d902      	bls.n	8009e24 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e22:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10c      	bne.n	8009e44 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	095b      	lsrs	r3, r3, #5
 8009e2e:	693a      	ldr	r2, [r7, #16]
 8009e30:	8912      	ldrh	r2, [r2, #8]
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d301      	bcc.n	8009e3a <dir_sdi+0x5c>
 8009e36:	2302      	movs	r3, #2
 8009e38:	e048      	b.n	8009ecc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	61da      	str	r2, [r3, #28]
 8009e42:	e029      	b.n	8009e98 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	895b      	ldrh	r3, [r3, #10]
 8009e48:	025b      	lsls	r3, r3, #9
 8009e4a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e4c:	e019      	b.n	8009e82 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6979      	ldr	r1, [r7, #20]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7ff fd01 	bl	800985a <get_fat>
 8009e58:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e60:	d101      	bne.n	8009e66 <dir_sdi+0x88>
 8009e62:	2301      	movs	r3, #1
 8009e64:	e032      	b.n	8009ecc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d904      	bls.n	8009e76 <dir_sdi+0x98>
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d301      	bcc.n	8009e7a <dir_sdi+0x9c>
 8009e76:	2302      	movs	r3, #2
 8009e78:	e028      	b.n	8009ecc <dir_sdi+0xee>
			ofs -= csz;
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d2e1      	bcs.n	8009e4e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009e8a:	6979      	ldr	r1, [r7, #20]
 8009e8c:	6938      	ldr	r0, [r7, #16]
 8009e8e:	f7ff fcc5 	bl	800981c <clust2sect>
 8009e92:	4602      	mov	r2, r0
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	69db      	ldr	r3, [r3, #28]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d101      	bne.n	8009eaa <dir_sdi+0xcc>
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	e010      	b.n	8009ecc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	69da      	ldr	r2, [r3, #28]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	0a5b      	lsrs	r3, r3, #9
 8009eb2:	441a      	add	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec4:	441a      	add	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	3320      	adds	r3, #32
 8009eea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d003      	beq.n	8009efc <dir_next+0x28>
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009efa:	d301      	bcc.n	8009f00 <dir_next+0x2c>
 8009efc:	2304      	movs	r3, #4
 8009efe:	e0aa      	b.n	800a056 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f040 8098 	bne.w	800a03c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	69db      	ldr	r3, [r3, #28]
 8009f10:	1c5a      	adds	r2, r3, #1
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10b      	bne.n	8009f36 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	095b      	lsrs	r3, r3, #5
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	8912      	ldrh	r2, [r2, #8]
 8009f26:	4293      	cmp	r3, r2
 8009f28:	f0c0 8088 	bcc.w	800a03c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	61da      	str	r2, [r3, #28]
 8009f32:	2304      	movs	r3, #4
 8009f34:	e08f      	b.n	800a056 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	0a5b      	lsrs	r3, r3, #9
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	8952      	ldrh	r2, [r2, #10]
 8009f3e:	3a01      	subs	r2, #1
 8009f40:	4013      	ands	r3, r2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d17a      	bne.n	800a03c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4610      	mov	r0, r2
 8009f50:	f7ff fc83 	bl	800985a <get_fat>
 8009f54:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d801      	bhi.n	8009f60 <dir_next+0x8c>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e07a      	b.n	800a056 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f66:	d101      	bne.n	8009f6c <dir_next+0x98>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e074      	b.n	800a056 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d358      	bcc.n	800a028 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d104      	bne.n	8009f86 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	61da      	str	r2, [r3, #28]
 8009f82:	2304      	movs	r3, #4
 8009f84:	e067      	b.n	800a056 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4610      	mov	r0, r2
 8009f90:	f7ff fe59 	bl	8009c46 <create_chain>
 8009f94:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d101      	bne.n	8009fa0 <dir_next+0xcc>
 8009f9c:	2307      	movs	r3, #7
 8009f9e:	e05a      	b.n	800a056 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d101      	bne.n	8009faa <dir_next+0xd6>
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e055      	b.n	800a056 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb0:	d101      	bne.n	8009fb6 <dir_next+0xe2>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e04f      	b.n	800a056 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff fb50 	bl	800965c <sync_window>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <dir_next+0xf2>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e047      	b.n	800a056 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3330      	adds	r3, #48	@ 0x30
 8009fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009fce:	2100      	movs	r1, #0
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7ff f97a 	bl	80092ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	613b      	str	r3, [r7, #16]
 8009fda:	6979      	ldr	r1, [r7, #20]
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f7ff fc1d 	bl	800981c <clust2sect>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009fe8:	e012      	b.n	800a010 <dir_next+0x13c>
						fs->wflag = 1;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2201      	movs	r2, #1
 8009fee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f7ff fb33 	bl	800965c <sync_window>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <dir_next+0x12c>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e02a      	b.n	800a056 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	3301      	adds	r3, #1
 800a004:	613b      	str	r3, [r7, #16]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	895b      	ldrh	r3, [r3, #10]
 800a014:	461a      	mov	r2, r3
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	4293      	cmp	r3, r2
 800a01a:	d3e6      	bcc.n	8009fea <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	1ad2      	subs	r2, r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a02e:	6979      	ldr	r1, [r7, #20]
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f7ff fbf3 	bl	800981c <clust2sect>
 800a036:	4602      	mov	r2, r0
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04e:	441a      	add	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b086      	sub	sp, #24
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a06e:	2100      	movs	r1, #0
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f7ff feb4 	bl	8009dde <dir_sdi>
 800a076:	4603      	mov	r3, r0
 800a078:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d12b      	bne.n	800a0d8 <dir_alloc+0x7a>
		n = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	4619      	mov	r1, r3
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f7ff fb2a 	bl	80096e4 <move_window>
 800a090:	4603      	mov	r3, r0
 800a092:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d11d      	bne.n	800a0d6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2be5      	cmp	r3, #229	@ 0xe5
 800a0a2:	d004      	beq.n	800a0ae <dir_alloc+0x50>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d107      	bne.n	800a0be <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d102      	bne.n	800a0c2 <dir_alloc+0x64>
 800a0bc:	e00c      	b.n	800a0d8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a0be:	2300      	movs	r3, #0
 800a0c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7ff ff05 	bl	8009ed4 <dir_next>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d0d7      	beq.n	800a084 <dir_alloc+0x26>
 800a0d4:	e000      	b.n	800a0d8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a0d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d101      	bne.n	800a0e2 <dir_alloc+0x84>
 800a0de:	2307      	movs	r3, #7
 800a0e0:	75fb      	strb	r3, [r7, #23]
	return res;
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3718      	adds	r7, #24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	331a      	adds	r3, #26
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7ff f842 	bl	8009184 <ld_word>
 800a100:	4603      	mov	r3, r0
 800a102:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d109      	bne.n	800a120 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	3314      	adds	r3, #20
 800a110:	4618      	mov	r0, r3
 800a112:	f7ff f837 	bl	8009184 <ld_word>
 800a116:	4603      	mov	r3, r0
 800a118:	041b      	lsls	r3, r3, #16
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a120:	68fb      	ldr	r3, [r7, #12]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	60b9      	str	r1, [r7, #8]
 800a134:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	331a      	adds	r3, #26
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	b292      	uxth	r2, r2
 800a13e:	4611      	mov	r1, r2
 800a140:	4618      	mov	r0, r3
 800a142:	f7ff f85a 	bl	80091fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d109      	bne.n	800a162 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	f103 0214 	add.w	r2, r3, #20
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	0c1b      	lsrs	r3, r3, #16
 800a158:	b29b      	uxth	r3, r3
 800a15a:	4619      	mov	r1, r3
 800a15c:	4610      	mov	r0, r2
 800a15e:	f7ff f84c 	bl	80091fa <st_word>
	}
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b086      	sub	sp, #24
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a178:	2100      	movs	r1, #0
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7ff fe2f 	bl	8009dde <dir_sdi>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a184:	7dfb      	ldrb	r3, [r7, #23]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <dir_find+0x24>
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	e03e      	b.n	800a20c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	4619      	mov	r1, r3
 800a194:	6938      	ldr	r0, [r7, #16]
 800a196:	f7ff faa5 	bl	80096e4 <move_window>
 800a19a:	4603      	mov	r3, r0
 800a19c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d12f      	bne.n	800a204 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d102      	bne.n	800a1b8 <dir_find+0x4e>
 800a1b2:	2304      	movs	r3, #4
 800a1b4:	75fb      	strb	r3, [r7, #23]
 800a1b6:	e028      	b.n	800a20a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	330b      	adds	r3, #11
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1c4:	b2da      	uxtb	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	330b      	adds	r3, #11
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	f003 0308 	and.w	r3, r3, #8
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10a      	bne.n	800a1f0 <dir_find+0x86>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a18      	ldr	r0, [r3, #32]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	3324      	adds	r3, #36	@ 0x24
 800a1e2:	220b      	movs	r2, #11
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f7ff f88b 	bl	8009300 <mem_cmp>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00b      	beq.n	800a208 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7ff fe6e 	bl	8009ed4 <dir_next>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0c5      	beq.n	800a18e <dir_find+0x24>
 800a202:	e002      	b.n	800a20a <dir_find+0xa0>
		if (res != FR_OK) break;
 800a204:	bf00      	nop
 800a206:	e000      	b.n	800a20a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a208:	bf00      	nop

	return res;
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3718      	adds	r7, #24
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a222:	2101      	movs	r1, #1
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff ff1a 	bl	800a05e <dir_alloc>
 800a22a:	4603      	mov	r3, r0
 800a22c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d11c      	bne.n	800a26e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	4619      	mov	r1, r3
 800a23a:	68b8      	ldr	r0, [r7, #8]
 800a23c:	f7ff fa52 	bl	80096e4 <move_window>
 800a240:	4603      	mov	r3, r0
 800a242:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a244:	7bfb      	ldrb	r3, [r7, #15]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d111      	bne.n	800a26e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	2220      	movs	r2, #32
 800a250:	2100      	movs	r1, #0
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff f839 	bl	80092ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a18      	ldr	r0, [r3, #32]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3324      	adds	r3, #36	@ 0x24
 800a260:	220b      	movs	r2, #11
 800a262:	4619      	mov	r1, r3
 800a264:	f7ff f810 	bl	8009288 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2201      	movs	r2, #1
 800a26c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	60fb      	str	r3, [r7, #12]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3324      	adds	r3, #36	@ 0x24
 800a28c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a28e:	220b      	movs	r2, #11
 800a290:	2120      	movs	r1, #32
 800a292:	68b8      	ldr	r0, [r7, #8]
 800a294:	f7ff f819 	bl	80092ca <mem_set>
	si = i = 0; ni = 8;
 800a298:	2300      	movs	r3, #0
 800a29a:	613b      	str	r3, [r7, #16]
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	61fb      	str	r3, [r7, #28]
 800a2a0:	2308      	movs	r3, #8
 800a2a2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	61fa      	str	r2, [r7, #28]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a2b2:	7efb      	ldrb	r3, [r7, #27]
 800a2b4:	2b20      	cmp	r3, #32
 800a2b6:	d94e      	bls.n	800a356 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a2b8:	7efb      	ldrb	r3, [r7, #27]
 800a2ba:	2b2f      	cmp	r3, #47	@ 0x2f
 800a2bc:	d006      	beq.n	800a2cc <create_name+0x54>
 800a2be:	7efb      	ldrb	r3, [r7, #27]
 800a2c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800a2c2:	d110      	bne.n	800a2e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a2c4:	e002      	b.n	800a2cc <create_name+0x54>
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	61fb      	str	r3, [r7, #28]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800a2d6:	d0f6      	beq.n	800a2c6 <create_name+0x4e>
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	4413      	add	r3, r2
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b5c      	cmp	r3, #92	@ 0x5c
 800a2e2:	d0f0      	beq.n	800a2c6 <create_name+0x4e>
			break;
 800a2e4:	e038      	b.n	800a358 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a2e6:	7efb      	ldrb	r3, [r7, #27]
 800a2e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2ea:	d003      	beq.n	800a2f4 <create_name+0x7c>
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d30c      	bcc.n	800a30e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2b0b      	cmp	r3, #11
 800a2f8:	d002      	beq.n	800a300 <create_name+0x88>
 800a2fa:	7efb      	ldrb	r3, [r7, #27]
 800a2fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2fe:	d001      	beq.n	800a304 <create_name+0x8c>
 800a300:	2306      	movs	r3, #6
 800a302:	e044      	b.n	800a38e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a304:	2308      	movs	r3, #8
 800a306:	613b      	str	r3, [r7, #16]
 800a308:	230b      	movs	r3, #11
 800a30a:	617b      	str	r3, [r7, #20]
			continue;
 800a30c:	e022      	b.n	800a354 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a30e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a312:	2b00      	cmp	r3, #0
 800a314:	da04      	bge.n	800a320 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a316:	7efb      	ldrb	r3, [r7, #27]
 800a318:	3b80      	subs	r3, #128	@ 0x80
 800a31a:	4a1f      	ldr	r2, [pc, #124]	@ (800a398 <create_name+0x120>)
 800a31c:	5cd3      	ldrb	r3, [r2, r3]
 800a31e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a320:	7efb      	ldrb	r3, [r7, #27]
 800a322:	4619      	mov	r1, r3
 800a324:	481d      	ldr	r0, [pc, #116]	@ (800a39c <create_name+0x124>)
 800a326:	f7ff f812 	bl	800934e <chk_chr>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <create_name+0xbc>
 800a330:	2306      	movs	r3, #6
 800a332:	e02c      	b.n	800a38e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a334:	7efb      	ldrb	r3, [r7, #27]
 800a336:	2b60      	cmp	r3, #96	@ 0x60
 800a338:	d905      	bls.n	800a346 <create_name+0xce>
 800a33a:	7efb      	ldrb	r3, [r7, #27]
 800a33c:	2b7a      	cmp	r3, #122	@ 0x7a
 800a33e:	d802      	bhi.n	800a346 <create_name+0xce>
 800a340:	7efb      	ldrb	r3, [r7, #27]
 800a342:	3b20      	subs	r3, #32
 800a344:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	613a      	str	r2, [r7, #16]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	4413      	add	r3, r2
 800a350:	7efa      	ldrb	r2, [r7, #27]
 800a352:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a354:	e7a6      	b.n	800a2a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a356:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	441a      	add	r2, r3
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <create_name+0xf4>
 800a368:	2306      	movs	r3, #6
 800a36a:	e010      	b.n	800a38e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	2be5      	cmp	r3, #229	@ 0xe5
 800a372:	d102      	bne.n	800a37a <create_name+0x102>
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	2205      	movs	r2, #5
 800a378:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a37a:	7efb      	ldrb	r3, [r7, #27]
 800a37c:	2b20      	cmp	r3, #32
 800a37e:	d801      	bhi.n	800a384 <create_name+0x10c>
 800a380:	2204      	movs	r2, #4
 800a382:	e000      	b.n	800a386 <create_name+0x10e>
 800a384:	2200      	movs	r2, #0
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	330b      	adds	r3, #11
 800a38a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a38c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3720      	adds	r7, #32
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	0800c90c 	.word	0x0800c90c
 800a39c:	0800bb34 	.word	0x0800bb34

0800a3a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a3b4:	e002      	b.n	800a3bc <follow_path+0x1c>
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	2b2f      	cmp	r3, #47	@ 0x2f
 800a3c2:	d0f8      	beq.n	800a3b6 <follow_path+0x16>
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b5c      	cmp	r3, #92	@ 0x5c
 800a3ca:	d0f4      	beq.n	800a3b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	2b1f      	cmp	r3, #31
 800a3d8:	d80a      	bhi.n	800a3f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2280      	movs	r2, #128	@ 0x80
 800a3de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff fcfa 	bl	8009dde <dir_sdi>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	75fb      	strb	r3, [r7, #23]
 800a3ee:	e043      	b.n	800a478 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a3f0:	463b      	mov	r3, r7
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7ff ff3f 	bl	800a278 <create_name>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d134      	bne.n	800a46e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7ff feb0 	bl	800a16a <dir_find>
 800a40a:	4603      	mov	r3, r0
 800a40c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a414:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00a      	beq.n	800a432 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
 800a41e:	2b04      	cmp	r3, #4
 800a420:	d127      	bne.n	800a472 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a422:	7afb      	ldrb	r3, [r7, #11]
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d122      	bne.n	800a472 <follow_path+0xd2>
 800a42c:	2305      	movs	r3, #5
 800a42e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a430:	e01f      	b.n	800a472 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a432:	7afb      	ldrb	r3, [r7, #11]
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d11c      	bne.n	800a476 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	799b      	ldrb	r3, [r3, #6]
 800a440:	f003 0310 	and.w	r3, r3, #16
 800a444:	2b00      	cmp	r3, #0
 800a446:	d102      	bne.n	800a44e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a448:	2305      	movs	r3, #5
 800a44a:	75fb      	strb	r3, [r7, #23]
 800a44c:	e014      	b.n	800a478 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a45c:	4413      	add	r3, r2
 800a45e:	4619      	mov	r1, r3
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f7ff fe43 	bl	800a0ec <ld_clust>
 800a466:	4602      	mov	r2, r0
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a46c:	e7c0      	b.n	800a3f0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a46e:	bf00      	nop
 800a470:	e002      	b.n	800a478 <follow_path+0xd8>
				break;
 800a472:	bf00      	nop
 800a474:	e000      	b.n	800a478 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a476:	bf00      	nop
			}
		}
	}

	return res;
 800a478:	7dfb      	ldrb	r3, [r7, #23]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a482:	b480      	push	{r7}
 800a484:	b087      	sub	sp, #28
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a48a:	f04f 33ff 	mov.w	r3, #4294967295
 800a48e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d031      	beq.n	800a4fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	617b      	str	r3, [r7, #20]
 800a49e:	e002      	b.n	800a4a6 <get_ldnumber+0x24>
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	617b      	str	r3, [r7, #20]
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	2b20      	cmp	r3, #32
 800a4ac:	d903      	bls.n	800a4b6 <get_ldnumber+0x34>
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	2b3a      	cmp	r3, #58	@ 0x3a
 800a4b4:	d1f4      	bne.n	800a4a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b3a      	cmp	r3, #58	@ 0x3a
 800a4bc:	d11c      	bne.n	800a4f8 <get_ldnumber+0x76>
			tp = *path;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	1c5a      	adds	r2, r3, #1
 800a4c8:	60fa      	str	r2, [r7, #12]
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	3b30      	subs	r3, #48	@ 0x30
 800a4ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2b09      	cmp	r3, #9
 800a4d4:	d80e      	bhi.n	800a4f4 <get_ldnumber+0x72>
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d10a      	bne.n	800a4f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d107      	bne.n	800a4f4 <get_ldnumber+0x72>
					vol = (int)i;
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	617b      	str	r3, [r7, #20]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	e002      	b.n	800a4fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a4fc:	693b      	ldr	r3, [r7, #16]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	371c      	adds	r7, #28
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
	...

0800a50c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	70da      	strb	r2, [r3, #3]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f04f 32ff 	mov.w	r2, #4294967295
 800a522:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7ff f8dc 	bl	80096e4 <move_window>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <check_fs+0x2a>
 800a532:	2304      	movs	r3, #4
 800a534:	e038      	b.n	800a5a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	3330      	adds	r3, #48	@ 0x30
 800a53a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fe20 	bl	8009184 <ld_word>
 800a544:	4603      	mov	r3, r0
 800a546:	461a      	mov	r2, r3
 800a548:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d001      	beq.n	800a554 <check_fs+0x48>
 800a550:	2303      	movs	r3, #3
 800a552:	e029      	b.n	800a5a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a55a:	2be9      	cmp	r3, #233	@ 0xe9
 800a55c:	d009      	beq.n	800a572 <check_fs+0x66>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a564:	2beb      	cmp	r3, #235	@ 0xeb
 800a566:	d11e      	bne.n	800a5a6 <check_fs+0x9a>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a56e:	2b90      	cmp	r3, #144	@ 0x90
 800a570:	d119      	bne.n	800a5a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	3330      	adds	r3, #48	@ 0x30
 800a576:	3336      	adds	r3, #54	@ 0x36
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe fe1b 	bl	80091b4 <ld_dword>
 800a57e:	4603      	mov	r3, r0
 800a580:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a584:	4a0a      	ldr	r2, [pc, #40]	@ (800a5b0 <check_fs+0xa4>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d101      	bne.n	800a58e <check_fs+0x82>
 800a58a:	2300      	movs	r3, #0
 800a58c:	e00c      	b.n	800a5a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	3330      	adds	r3, #48	@ 0x30
 800a592:	3352      	adds	r3, #82	@ 0x52
 800a594:	4618      	mov	r0, r3
 800a596:	f7fe fe0d 	bl	80091b4 <ld_dword>
 800a59a:	4603      	mov	r3, r0
 800a59c:	4a05      	ldr	r2, [pc, #20]	@ (800a5b4 <check_fs+0xa8>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d101      	bne.n	800a5a6 <check_fs+0x9a>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e000      	b.n	800a5a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a5a6:	2302      	movs	r3, #2
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	00544146 	.word	0x00544146
 800a5b4:	33544146 	.word	0x33544146

0800a5b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b096      	sub	sp, #88	@ 0x58
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f7ff ff58 	bl	800a482 <get_ldnumber>
 800a5d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	da01      	bge.n	800a5de <find_volume+0x26>
 800a5da:	230b      	movs	r3, #11
 800a5dc:	e22d      	b.n	800aa3a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a5de:	4aa1      	ldr	r2, [pc, #644]	@ (800a864 <find_volume+0x2ac>)
 800a5e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d101      	bne.n	800a5f2 <find_volume+0x3a>
 800a5ee:	230c      	movs	r3, #12
 800a5f0:	e223      	b.n	800aa3a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a5f8:	79fb      	ldrb	r3, [r7, #7]
 800a5fa:	f023 0301 	bic.w	r3, r3, #1
 800a5fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01a      	beq.n	800a63e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60a:	785b      	ldrb	r3, [r3, #1]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fe fd19 	bl	8009044 <disk_status>
 800a612:	4603      	mov	r3, r0
 800a614:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a618:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10c      	bne.n	800a63e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d007      	beq.n	800a63a <find_volume+0x82>
 800a62a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a62e:	f003 0304 	and.w	r3, r3, #4
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a636:	230a      	movs	r3, #10
 800a638:	e1ff      	b.n	800aa3a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a63a:	2300      	movs	r3, #0
 800a63c:	e1fd      	b.n	800aa3a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a640:	2200      	movs	r2, #0
 800a642:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a646:	b2da      	uxtb	r2, r3
 800a648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64e:	785b      	ldrb	r3, [r3, #1]
 800a650:	4618      	mov	r0, r3
 800a652:	f7fe fd11 	bl	8009078 <disk_initialize>
 800a656:	4603      	mov	r3, r0
 800a658:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a65c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a668:	2303      	movs	r3, #3
 800a66a:	e1e6      	b.n	800aa3a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d007      	beq.n	800a682 <find_volume+0xca>
 800a672:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a67e:	230a      	movs	r3, #10
 800a680:	e1db      	b.n	800aa3a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a686:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a688:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a68a:	f7ff ff3f 	bl	800a50c <check_fs>
 800a68e:	4603      	mov	r3, r0
 800a690:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a694:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d149      	bne.n	800a730 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a69c:	2300      	movs	r3, #0
 800a69e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6a0:	e01e      	b.n	800a6e0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a6a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6aa:	011b      	lsls	r3, r3, #4
 800a6ac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a6b0:	4413      	add	r3, r2
 800a6b2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d006      	beq.n	800a6cc <find_volume+0x114>
 800a6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fe fd76 	bl	80091b4 <ld_dword>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	e000      	b.n	800a6ce <find_volume+0x116>
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	3358      	adds	r3, #88	@ 0x58
 800a6d4:	443b      	add	r3, r7
 800a6d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6dc:	3301      	adds	r3, #1
 800a6de:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d9dd      	bls.n	800a6a2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a6ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <find_volume+0x13e>
 800a6f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a6f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	3358      	adds	r3, #88	@ 0x58
 800a6fc:	443b      	add	r3, r7
 800a6fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a702:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a706:	2b00      	cmp	r3, #0
 800a708:	d005      	beq.n	800a716 <find_volume+0x15e>
 800a70a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a70c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a70e:	f7ff fefd 	bl	800a50c <check_fs>
 800a712:	4603      	mov	r3, r0
 800a714:	e000      	b.n	800a718 <find_volume+0x160>
 800a716:	2303      	movs	r3, #3
 800a718:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a71c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a720:	2b01      	cmp	r3, #1
 800a722:	d905      	bls.n	800a730 <find_volume+0x178>
 800a724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a726:	3301      	adds	r3, #1
 800a728:	643b      	str	r3, [r7, #64]	@ 0x40
 800a72a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d9e2      	bls.n	800a6f6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a730:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a734:	2b04      	cmp	r3, #4
 800a736:	d101      	bne.n	800a73c <find_volume+0x184>
 800a738:	2301      	movs	r3, #1
 800a73a:	e17e      	b.n	800aa3a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a73c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a740:	2b01      	cmp	r3, #1
 800a742:	d901      	bls.n	800a748 <find_volume+0x190>
 800a744:	230d      	movs	r3, #13
 800a746:	e178      	b.n	800aa3a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74a:	3330      	adds	r3, #48	@ 0x30
 800a74c:	330b      	adds	r3, #11
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fe fd18 	bl	8009184 <ld_word>
 800a754:	4603      	mov	r3, r0
 800a756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a75a:	d001      	beq.n	800a760 <find_volume+0x1a8>
 800a75c:	230d      	movs	r3, #13
 800a75e:	e16c      	b.n	800aa3a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a762:	3330      	adds	r3, #48	@ 0x30
 800a764:	3316      	adds	r3, #22
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe fd0c 	bl	8009184 <ld_word>
 800a76c:	4603      	mov	r3, r0
 800a76e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a772:	2b00      	cmp	r3, #0
 800a774:	d106      	bne.n	800a784 <find_volume+0x1cc>
 800a776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a778:	3330      	adds	r3, #48	@ 0x30
 800a77a:	3324      	adds	r3, #36	@ 0x24
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fe fd19 	bl	80091b4 <ld_dword>
 800a782:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a788:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a792:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a796:	789b      	ldrb	r3, [r3, #2]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d005      	beq.n	800a7a8 <find_volume+0x1f0>
 800a79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79e:	789b      	ldrb	r3, [r3, #2]
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d001      	beq.n	800a7a8 <find_volume+0x1f0>
 800a7a4:	230d      	movs	r3, #13
 800a7a6:	e148      	b.n	800aa3a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7aa:	789b      	ldrb	r3, [r3, #2]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7b0:	fb02 f303 	mul.w	r3, r2, r3
 800a7b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7bc:	461a      	mov	r2, r3
 800a7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c4:	895b      	ldrh	r3, [r3, #10]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d008      	beq.n	800a7dc <find_volume+0x224>
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7cc:	895b      	ldrh	r3, [r3, #10]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d2:	895b      	ldrh	r3, [r3, #10]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d001      	beq.n	800a7e0 <find_volume+0x228>
 800a7dc:	230d      	movs	r3, #13
 800a7de:	e12c      	b.n	800aa3a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e2:	3330      	adds	r3, #48	@ 0x30
 800a7e4:	3311      	adds	r3, #17
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fccc 	bl	8009184 <ld_word>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f6:	891b      	ldrh	r3, [r3, #8]
 800a7f8:	f003 030f 	and.w	r3, r3, #15
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <find_volume+0x24e>
 800a802:	230d      	movs	r3, #13
 800a804:	e119      	b.n	800aa3a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a808:	3330      	adds	r3, #48	@ 0x30
 800a80a:	3313      	adds	r3, #19
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7fe fcb9 	bl	8009184 <ld_word>
 800a812:	4603      	mov	r3, r0
 800a814:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d106      	bne.n	800a82a <find_volume+0x272>
 800a81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81e:	3330      	adds	r3, #48	@ 0x30
 800a820:	3320      	adds	r3, #32
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe fcc6 	bl	80091b4 <ld_dword>
 800a828:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82c:	3330      	adds	r3, #48	@ 0x30
 800a82e:	330e      	adds	r3, #14
 800a830:	4618      	mov	r0, r3
 800a832:	f7fe fca7 	bl	8009184 <ld_word>
 800a836:	4603      	mov	r3, r0
 800a838:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a83a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <find_volume+0x28c>
 800a840:	230d      	movs	r3, #13
 800a842:	e0fa      	b.n	800aa3a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a844:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a848:	4413      	add	r3, r2
 800a84a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a84c:	8912      	ldrh	r2, [r2, #8]
 800a84e:	0912      	lsrs	r2, r2, #4
 800a850:	b292      	uxth	r2, r2
 800a852:	4413      	add	r3, r2
 800a854:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a856:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d204      	bcs.n	800a868 <find_volume+0x2b0>
 800a85e:	230d      	movs	r3, #13
 800a860:	e0eb      	b.n	800aa3a <find_volume+0x482>
 800a862:	bf00      	nop
 800a864:	20000588 	.word	0x20000588
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a870:	8952      	ldrh	r2, [r2, #10]
 800a872:	fbb3 f3f2 	udiv	r3, r3, r2
 800a876:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <find_volume+0x2ca>
 800a87e:	230d      	movs	r3, #13
 800a880:	e0db      	b.n	800aa3a <find_volume+0x482>
		fmt = FS_FAT32;
 800a882:	2303      	movs	r3, #3
 800a884:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a88e:	4293      	cmp	r3, r2
 800a890:	d802      	bhi.n	800a898 <find_volume+0x2e0>
 800a892:	2302      	movs	r3, #2
 800a894:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d802      	bhi.n	800a8a8 <find_volume+0x2f0>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8aa:	1c9a      	adds	r2, r3, #2
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ae:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8b4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a8b6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a8b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8ba:	441a      	add	r2, r3
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8be:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a8c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c4:	441a      	add	r2, r3
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800a8ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d11e      	bne.n	800a910 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d4:	3330      	adds	r3, #48	@ 0x30
 800a8d6:	332a      	adds	r3, #42	@ 0x2a
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fe fc53 	bl	8009184 <ld_word>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d001      	beq.n	800a8e8 <find_volume+0x330>
 800a8e4:	230d      	movs	r3, #13
 800a8e6:	e0a8      	b.n	800aa3a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ea:	891b      	ldrh	r3, [r3, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <find_volume+0x33c>
 800a8f0:	230d      	movs	r3, #13
 800a8f2:	e0a2      	b.n	800aa3a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f6:	3330      	adds	r3, #48	@ 0x30
 800a8f8:	332c      	adds	r3, #44	@ 0x2c
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fe fc5a 	bl	80091b4 <ld_dword>
 800a900:	4602      	mov	r2, r0
 800a902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a904:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a90e:	e01f      	b.n	800a950 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a912:	891b      	ldrh	r3, [r3, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d101      	bne.n	800a91c <find_volume+0x364>
 800a918:	230d      	movs	r3, #13
 800a91a:	e08e      	b.n	800aa3a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91e:	6a1a      	ldr	r2, [r3, #32]
 800a920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a922:	441a      	add	r2, r3
 800a924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a926:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a928:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d103      	bne.n	800a938 <find_volume+0x380>
 800a930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	e00a      	b.n	800a94e <find_volume+0x396>
 800a938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93a:	695a      	ldr	r2, [r3, #20]
 800a93c:	4613      	mov	r3, r2
 800a93e:	005b      	lsls	r3, r3, #1
 800a940:	4413      	add	r3, r2
 800a942:	085a      	lsrs	r2, r3, #1
 800a944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	f003 0301 	and.w	r3, r3, #1
 800a94c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a94e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a952:	699a      	ldr	r2, [r3, #24]
 800a954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a956:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a95a:	0a5b      	lsrs	r3, r3, #9
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d201      	bcs.n	800a964 <find_volume+0x3ac>
 800a960:	230d      	movs	r3, #13
 800a962:	e06a      	b.n	800aa3a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a966:	f04f 32ff 	mov.w	r2, #4294967295
 800a96a:	611a      	str	r2, [r3, #16]
 800a96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96e:	691a      	ldr	r2, [r3, #16]
 800a970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a972:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a976:	2280      	movs	r2, #128	@ 0x80
 800a978:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a97a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d149      	bne.n	800aa16 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a984:	3330      	adds	r3, #48	@ 0x30
 800a986:	3330      	adds	r3, #48	@ 0x30
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fe fbfb 	bl	8009184 <ld_word>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b01      	cmp	r3, #1
 800a992:	d140      	bne.n	800aa16 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a996:	3301      	adds	r3, #1
 800a998:	4619      	mov	r1, r3
 800a99a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a99c:	f7fe fea2 	bl	80096e4 <move_window>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d137      	bne.n	800aa16 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ae:	3330      	adds	r3, #48	@ 0x30
 800a9b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe fbe5 	bl	8009184 <ld_word>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	461a      	mov	r2, r3
 800a9be:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d127      	bne.n	800aa16 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c8:	3330      	adds	r3, #48	@ 0x30
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe fbf2 	bl	80091b4 <ld_dword>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	4a1c      	ldr	r2, [pc, #112]	@ (800aa44 <find_volume+0x48c>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d11e      	bne.n	800aa16 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9da:	3330      	adds	r3, #48	@ 0x30
 800a9dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fe fbe7 	bl	80091b4 <ld_dword>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	4a17      	ldr	r2, [pc, #92]	@ (800aa48 <find_volume+0x490>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d113      	bne.n	800aa16 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f0:	3330      	adds	r3, #48	@ 0x30
 800a9f2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fe fbdc 	bl	80091b4 <ld_dword>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa00:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aa02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa04:	3330      	adds	r3, #48	@ 0x30
 800aa06:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fe fbd2 	bl	80091b4 <ld_dword>
 800aa10:	4602      	mov	r2, r0
 800aa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa14:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa18:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800aa1c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aa1e:	4b0b      	ldr	r3, [pc, #44]	@ (800aa4c <find_volume+0x494>)
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	3301      	adds	r3, #1
 800aa24:	b29a      	uxth	r2, r3
 800aa26:	4b09      	ldr	r3, [pc, #36]	@ (800aa4c <find_volume+0x494>)
 800aa28:	801a      	strh	r2, [r3, #0]
 800aa2a:	4b08      	ldr	r3, [pc, #32]	@ (800aa4c <find_volume+0x494>)
 800aa2c:	881a      	ldrh	r2, [r3, #0]
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa30:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aa32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aa34:	f7fe fdee 	bl	8009614 <clear_lock>
#endif
	return FR_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3758      	adds	r7, #88	@ 0x58
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	41615252 	.word	0x41615252
 800aa48:	61417272 	.word	0x61417272
 800aa4c:	2000058c 	.word	0x2000058c

0800aa50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aa5a:	2309      	movs	r3, #9
 800aa5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d01c      	beq.n	800aa9e <validate+0x4e>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d018      	beq.n	800aa9e <validate+0x4e>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d013      	beq.n	800aa9e <validate+0x4e>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	889a      	ldrh	r2, [r3, #4]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	88db      	ldrh	r3, [r3, #6]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d10c      	bne.n	800aa9e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	785b      	ldrb	r3, [r3, #1]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fe fada 	bl	8009044 <disk_status>
 800aa90:	4603      	mov	r3, r0
 800aa92:	f003 0301 	and.w	r3, r3, #1
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <validate+0x4e>
			res = FR_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d102      	bne.n	800aaaa <validate+0x5a>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	e000      	b.n	800aaac <validate+0x5c>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	6013      	str	r3, [r2, #0]
	return res;
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
	...

0800aabc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b088      	sub	sp, #32
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	4613      	mov	r3, r2
 800aac8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aace:	f107 0310 	add.w	r3, r7, #16
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff fcd5 	bl	800a482 <get_ldnumber>
 800aad8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	da01      	bge.n	800aae4 <f_mount+0x28>
 800aae0:	230b      	movs	r3, #11
 800aae2:	e02b      	b.n	800ab3c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aae4:	4a17      	ldr	r2, [pc, #92]	@ (800ab44 <f_mount+0x88>)
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d005      	beq.n	800ab00 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800aaf4:	69b8      	ldr	r0, [r7, #24]
 800aaf6:	f7fe fd8d 	bl	8009614 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	2200      	movs	r2, #0
 800aafe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d002      	beq.n	800ab0c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	490d      	ldr	r1, [pc, #52]	@ (800ab44 <f_mount+0x88>)
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <f_mount+0x66>
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d001      	beq.n	800ab26 <f_mount+0x6a>
 800ab22:	2300      	movs	r3, #0
 800ab24:	e00a      	b.n	800ab3c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ab26:	f107 010c 	add.w	r1, r7, #12
 800ab2a:	f107 0308 	add.w	r3, r7, #8
 800ab2e:	2200      	movs	r2, #0
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff fd41 	bl	800a5b8 <find_volume>
 800ab36:	4603      	mov	r3, r0
 800ab38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	20000588 	.word	0x20000588

0800ab48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b098      	sub	sp, #96	@ 0x60
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	4613      	mov	r3, r2
 800ab54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d101      	bne.n	800ab60 <f_open+0x18>
 800ab5c:	2309      	movs	r3, #9
 800ab5e:	e1a9      	b.n	800aeb4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ab60:	79fb      	ldrb	r3, [r7, #7]
 800ab62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ab68:	79fa      	ldrb	r2, [r7, #7]
 800ab6a:	f107 0110 	add.w	r1, r7, #16
 800ab6e:	f107 0308 	add.w	r3, r7, #8
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7ff fd20 	bl	800a5b8 <find_volume>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ab7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f040 818d 	bne.w	800aea2 <f_open+0x35a>
		dj.obj.fs = fs;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	f107 0314 	add.w	r3, r7, #20
 800ab92:	4611      	mov	r1, r2
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7ff fc03 	bl	800a3a0 <follow_path>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800aba0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d118      	bne.n	800abda <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800aba8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800abac:	b25b      	sxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	da03      	bge.n	800abba <f_open+0x72>
				res = FR_INVALID_NAME;
 800abb2:	2306      	movs	r3, #6
 800abb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800abb8:	e00f      	b.n	800abda <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abba:	79fb      	ldrb	r3, [r7, #7]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	bf8c      	ite	hi
 800abc0:	2301      	movhi	r3, #1
 800abc2:	2300      	movls	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	461a      	mov	r2, r3
 800abc8:	f107 0314 	add.w	r3, r7, #20
 800abcc:	4611      	mov	r1, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fe fbd8 	bl	8009384 <chk_lock>
 800abd4:	4603      	mov	r3, r0
 800abd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800abda:	79fb      	ldrb	r3, [r7, #7]
 800abdc:	f003 031c 	and.w	r3, r3, #28
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d07f      	beq.n	800ace4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800abe4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d017      	beq.n	800ac1c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800abec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	d10e      	bne.n	800ac12 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800abf4:	f7fe fc22 	bl	800943c <enq_lock>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d006      	beq.n	800ac0c <f_open+0xc4>
 800abfe:	f107 0314 	add.w	r3, r7, #20
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7ff fb06 	bl	800a214 <dir_register>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	e000      	b.n	800ac0e <f_open+0xc6>
 800ac0c:	2312      	movs	r3, #18
 800ac0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ac12:	79fb      	ldrb	r3, [r7, #7]
 800ac14:	f043 0308 	orr.w	r3, r3, #8
 800ac18:	71fb      	strb	r3, [r7, #7]
 800ac1a:	e010      	b.n	800ac3e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ac1c:	7ebb      	ldrb	r3, [r7, #26]
 800ac1e:	f003 0311 	and.w	r3, r3, #17
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <f_open+0xe6>
					res = FR_DENIED;
 800ac26:	2307      	movs	r3, #7
 800ac28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ac2c:	e007      	b.n	800ac3e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d002      	beq.n	800ac3e <f_open+0xf6>
 800ac38:	2308      	movs	r3, #8
 800ac3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d168      	bne.n	800ad18 <f_open+0x1d0>
 800ac46:	79fb      	ldrb	r3, [r7, #7]
 800ac48:	f003 0308 	and.w	r3, r3, #8
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d063      	beq.n	800ad18 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ac50:	f7fe f88c 	bl	8008d6c <get_fattime>
 800ac54:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ac56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac58:	330e      	adds	r3, #14
 800ac5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fe fae7 	bl	8009230 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ac62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac64:	3316      	adds	r3, #22
 800ac66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fe fae1 	bl	8009230 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ac6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac70:	330b      	adds	r3, #11
 800ac72:	2220      	movs	r2, #32
 800ac74:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7ff fa35 	bl	800a0ec <ld_clust>
 800ac82:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ac88:	2200      	movs	r2, #0
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7ff fa4d 	bl	800a12a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ac90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac92:	331c      	adds	r3, #28
 800ac94:	2100      	movs	r1, #0
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fe faca 	bl	8009230 <st_dword>
					fs->wflag = 1;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d037      	beq.n	800ad18 <f_open+0x1d0>
						dw = fs->winsect;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acac:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800acae:	f107 0314 	add.w	r3, r7, #20
 800acb2:	2200      	movs	r2, #0
 800acb4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe ff60 	bl	8009b7c <remove_chain>
 800acbc:	4603      	mov	r3, r0
 800acbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800acc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d126      	bne.n	800ad18 <f_open+0x1d0>
							res = move_window(fs, dw);
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe fd08 	bl	80096e4 <move_window>
 800acd4:	4603      	mov	r3, r0
 800acd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800acde:	3a01      	subs	r2, #1
 800ace0:	60da      	str	r2, [r3, #12]
 800ace2:	e019      	b.n	800ad18 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ace4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d115      	bne.n	800ad18 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800acec:	7ebb      	ldrb	r3, [r7, #26]
 800acee:	f003 0310 	and.w	r3, r3, #16
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <f_open+0x1b6>
					res = FR_NO_FILE;
 800acf6:	2304      	movs	r3, #4
 800acf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800acfc:	e00c      	b.n	800ad18 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	f003 0302 	and.w	r3, r3, #2
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d007      	beq.n	800ad18 <f_open+0x1d0>
 800ad08:	7ebb      	ldrb	r3, [r7, #26]
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d002      	beq.n	800ad18 <f_open+0x1d0>
						res = FR_DENIED;
 800ad12:	2307      	movs	r3, #7
 800ad14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ad18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d126      	bne.n	800ad6e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	f003 0308 	and.w	r3, r3, #8
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ad2a:	79fb      	ldrb	r3, [r7, #7]
 800ad2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad30:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ad3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	bf8c      	ite	hi
 800ad46:	2301      	movhi	r3, #1
 800ad48:	2300      	movls	r3, #0
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	f107 0314 	add.w	r3, r7, #20
 800ad52:	4611      	mov	r1, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fe fb93 	bl	8009480 <inc_lock>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d102      	bne.n	800ad6e <f_open+0x226>
 800ad68:	2302      	movs	r3, #2
 800ad6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ad6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f040 8095 	bne.w	800aea2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff f9b4 	bl	800a0ec <ld_clust>
 800ad84:	4602      	mov	r2, r0
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad8c:	331c      	adds	r3, #28
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fe fa10 	bl	80091b4 <ld_dword>
 800ad94:	4602      	mov	r2, r0
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	88da      	ldrh	r2, [r3, #6]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	79fa      	ldrb	r2, [r7, #7]
 800adb2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3330      	adds	r3, #48	@ 0x30
 800adca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adce:	2100      	movs	r1, #0
 800add0:	4618      	mov	r0, r3
 800add2:	f7fe fa7a 	bl	80092ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800add6:	79fb      	ldrb	r3, [r7, #7]
 800add8:	f003 0320 	and.w	r3, r3, #32
 800addc:	2b00      	cmp	r3, #0
 800adde:	d060      	beq.n	800aea2 <f_open+0x35a>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d05c      	beq.n	800aea2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	68da      	ldr	r2, [r3, #12]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	895b      	ldrh	r3, [r3, #10]
 800adf4:	025b      	lsls	r3, r3, #9
 800adf6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae04:	e016      	b.n	800ae34 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe fd25 	bl	800985a <get_fat>
 800ae10:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ae12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d802      	bhi.n	800ae1e <f_open+0x2d6>
 800ae18:	2302      	movs	r3, #2
 800ae1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ae1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae24:	d102      	bne.n	800ae2c <f_open+0x2e4>
 800ae26:	2301      	movs	r3, #1
 800ae28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d103      	bne.n	800ae44 <f_open+0x2fc>
 800ae3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d8e0      	bhi.n	800ae06 <f_open+0x2be>
				}
				fp->clust = clst;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ae4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d127      	bne.n	800aea2 <f_open+0x35a>
 800ae52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d022      	beq.n	800aea2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7fe fcdb 	bl	800981c <clust2sect>
 800ae66:	6478      	str	r0, [r7, #68]	@ 0x44
 800ae68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d103      	bne.n	800ae76 <f_open+0x32e>
						res = FR_INT_ERR;
 800ae6e:	2302      	movs	r3, #2
 800ae70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ae74:	e015      	b.n	800aea2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ae76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae78:	0a5a      	lsrs	r2, r3, #9
 800ae7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae7c:	441a      	add	r2, r3
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	7858      	ldrb	r0, [r3, #1]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6a1a      	ldr	r2, [r3, #32]
 800ae90:	2301      	movs	r3, #1
 800ae92:	f7fe f919 	bl	80090c8 <disk_read>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <f_open+0x35a>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aea2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d002      	beq.n	800aeb0 <f_open+0x368>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aeb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3760      	adds	r7, #96	@ 0x60
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08e      	sub	sp, #56	@ 0x38
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f107 0214 	add.w	r2, r7, #20
 800aeda:	4611      	mov	r1, r2
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff fdb7 	bl	800aa50 <validate>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aee8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d107      	bne.n	800af00 <f_read+0x44>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	7d5b      	ldrb	r3, [r3, #21]
 800aef4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aef8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <f_read+0x4a>
 800af00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af04:	e115      	b.n	800b132 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	7d1b      	ldrb	r3, [r3, #20]
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d101      	bne.n	800af16 <f_read+0x5a>
 800af12:	2307      	movs	r3, #7
 800af14:	e10d      	b.n	800b132 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	68da      	ldr	r2, [r3, #12]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	429a      	cmp	r2, r3
 800af28:	f240 80fe 	bls.w	800b128 <f_read+0x26c>
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800af30:	e0fa      	b.n	800b128 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f040 80c6 	bne.w	800b0cc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	0a5b      	lsrs	r3, r3, #9
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	8952      	ldrh	r2, [r2, #10]
 800af4a:	3a01      	subs	r2, #1
 800af4c:	4013      	ands	r3, r2
 800af4e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d12f      	bne.n	800afb6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d103      	bne.n	800af66 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	633b      	str	r3, [r7, #48]	@ 0x30
 800af64:	e013      	b.n	800af8e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d007      	beq.n	800af7e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	4619      	mov	r1, r3
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7fe fefe 	bl	8009d76 <clmt_clust>
 800af7a:	6338      	str	r0, [r7, #48]	@ 0x30
 800af7c:	e007      	b.n	800af8e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	69db      	ldr	r3, [r3, #28]
 800af84:	4619      	mov	r1, r3
 800af86:	4610      	mov	r0, r2
 800af88:	f7fe fc67 	bl	800985a <get_fat>
 800af8c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800af8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af90:	2b01      	cmp	r3, #1
 800af92:	d804      	bhi.n	800af9e <f_read+0xe2>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2202      	movs	r2, #2
 800af98:	755a      	strb	r2, [r3, #21]
 800af9a:	2302      	movs	r3, #2
 800af9c:	e0c9      	b.n	800b132 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800af9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa4:	d104      	bne.n	800afb0 <f_read+0xf4>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2201      	movs	r2, #1
 800afaa:	755a      	strb	r2, [r3, #21]
 800afac:	2301      	movs	r3, #1
 800afae:	e0c0      	b.n	800b132 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afb4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	69db      	ldr	r3, [r3, #28]
 800afbc:	4619      	mov	r1, r3
 800afbe:	4610      	mov	r0, r2
 800afc0:	f7fe fc2c 	bl	800981c <clust2sect>
 800afc4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <f_read+0x11a>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2202      	movs	r2, #2
 800afd0:	755a      	strb	r2, [r3, #21]
 800afd2:	2302      	movs	r3, #2
 800afd4:	e0ad      	b.n	800b132 <f_read+0x276>
			sect += csect;
 800afd6:	69ba      	ldr	r2, [r7, #24]
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	4413      	add	r3, r2
 800afdc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	0a5b      	lsrs	r3, r3, #9
 800afe2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800afe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d039      	beq.n	800b05e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800afea:	69fa      	ldr	r2, [r7, #28]
 800afec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afee:	4413      	add	r3, r2
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	8952      	ldrh	r2, [r2, #10]
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d905      	bls.n	800b004 <f_read+0x148>
					cc = fs->csize - csect;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	895b      	ldrh	r3, [r3, #10]
 800affc:	461a      	mov	r2, r3
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	7858      	ldrb	r0, [r3, #1]
 800b008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00a:	69ba      	ldr	r2, [r7, #24]
 800b00c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b00e:	f7fe f85b 	bl	80090c8 <disk_read>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d004      	beq.n	800b022 <f_read+0x166>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2201      	movs	r2, #1
 800b01c:	755a      	strb	r2, [r3, #21]
 800b01e:	2301      	movs	r3, #1
 800b020:	e087      	b.n	800b132 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	7d1b      	ldrb	r3, [r3, #20]
 800b026:	b25b      	sxtb	r3, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	da14      	bge.n	800b056 <f_read+0x19a>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6a1a      	ldr	r2, [r3, #32]
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b036:	429a      	cmp	r2, r3
 800b038:	d90d      	bls.n	800b056 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6a1a      	ldr	r2, [r3, #32]
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	025b      	lsls	r3, r3, #9
 800b044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b046:	18d0      	adds	r0, r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	3330      	adds	r3, #48	@ 0x30
 800b04c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b050:	4619      	mov	r1, r3
 800b052:	f7fe f919 	bl	8009288 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b058:	025b      	lsls	r3, r3, #9
 800b05a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800b05c:	e050      	b.n	800b100 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	69ba      	ldr	r2, [r7, #24]
 800b064:	429a      	cmp	r2, r3
 800b066:	d02e      	beq.n	800b0c6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	7d1b      	ldrb	r3, [r3, #20]
 800b06c:	b25b      	sxtb	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	da18      	bge.n	800b0a4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	7858      	ldrb	r0, [r3, #1]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6a1a      	ldr	r2, [r3, #32]
 800b080:	2301      	movs	r3, #1
 800b082:	f7fe f841 	bl	8009108 <disk_write>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d004      	beq.n	800b096 <f_read+0x1da>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2201      	movs	r2, #1
 800b090:	755a      	strb	r2, [r3, #21]
 800b092:	2301      	movs	r3, #1
 800b094:	e04d      	b.n	800b132 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	7d1b      	ldrb	r3, [r3, #20]
 800b09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	7858      	ldrb	r0, [r3, #1]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	69ba      	ldr	r2, [r7, #24]
 800b0b2:	f7fe f809 	bl	80090c8 <disk_read>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d004      	beq.n	800b0c6 <f_read+0x20a>
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	755a      	strb	r2, [r3, #21]
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e035      	b.n	800b132 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	69ba      	ldr	r2, [r7, #24]
 800b0ca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	699b      	ldr	r3, [r3, #24]
 800b0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b0da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d901      	bls.n	800b0e6 <f_read+0x22a>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	699b      	ldr	r3, [r3, #24]
 800b0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f4:	4413      	add	r3, r2
 800b0f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0fc:	f7fe f8c4 	bl	8009288 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b104:	4413      	add	r3, r2
 800b106:	627b      	str	r3, [r7, #36]	@ 0x24
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	699a      	ldr	r2, [r3, #24]
 800b10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b10e:	441a      	add	r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	619a      	str	r2, [r3, #24]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11a:	441a      	add	r2, r3
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f47f af01 	bne.w	800af32 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3738      	adds	r7, #56	@ 0x38
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b086      	sub	sp, #24
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f107 0208 	add.w	r2, r7, #8
 800b148:	4611      	mov	r1, r2
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7ff fc80 	bl	800aa50 <validate>
 800b150:	4603      	mov	r3, r0
 800b152:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b154:	7dfb      	ldrb	r3, [r7, #23]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d168      	bne.n	800b22c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	7d1b      	ldrb	r3, [r3, #20]
 800b15e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b162:	2b00      	cmp	r3, #0
 800b164:	d062      	beq.n	800b22c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	7d1b      	ldrb	r3, [r3, #20]
 800b16a:	b25b      	sxtb	r3, r3
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	da15      	bge.n	800b19c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	7858      	ldrb	r0, [r3, #1]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a1a      	ldr	r2, [r3, #32]
 800b17e:	2301      	movs	r3, #1
 800b180:	f7fd ffc2 	bl	8009108 <disk_write>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <f_sync+0x54>
 800b18a:	2301      	movs	r3, #1
 800b18c:	e04f      	b.n	800b22e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	7d1b      	ldrb	r3, [r3, #20]
 800b192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b196:	b2da      	uxtb	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b19c:	f7fd fde6 	bl	8008d6c <get_fattime>
 800b1a0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4610      	mov	r0, r2
 800b1ac:	f7fe fa9a 	bl	80096e4 <move_window>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b1b4:	7dfb      	ldrb	r3, [r7, #23]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d138      	bne.n	800b22c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1be:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	330b      	adds	r3, #11
 800b1c4:	781a      	ldrb	r2, [r3, #0]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	330b      	adds	r3, #11
 800b1ca:	f042 0220 	orr.w	r2, r2, #32
 800b1ce:	b2d2      	uxtb	r2, r2
 800b1d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6818      	ldr	r0, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	68f9      	ldr	r1, [r7, #12]
 800b1de:	f7fe ffa4 	bl	800a12a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f103 021c 	add.w	r2, r3, #28
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	f7fe f81e 	bl	8009230 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	3316      	adds	r3, #22
 800b1f8:	6939      	ldr	r1, [r7, #16]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe f818 	bl	8009230 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	3312      	adds	r3, #18
 800b204:	2100      	movs	r1, #0
 800b206:	4618      	mov	r0, r3
 800b208:	f7fd fff7 	bl	80091fa <st_word>
					fs->wflag = 1;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2201      	movs	r2, #1
 800b210:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	4618      	mov	r0, r3
 800b216:	f7fe fa93 	bl	8009740 <sync_fs>
 800b21a:	4603      	mov	r3, r0
 800b21c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	7d1b      	ldrb	r3, [r3, #20]
 800b222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b226:	b2da      	uxtb	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b084      	sub	sp, #16
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7ff ff7b 	bl	800b13a <f_sync>
 800b244:	4603      	mov	r3, r0
 800b246:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b248:	7bfb      	ldrb	r3, [r7, #15]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d118      	bne.n	800b280 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f107 0208 	add.w	r2, r7, #8
 800b254:	4611      	mov	r1, r2
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff fbfa 	bl	800aa50 <validate>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10c      	bne.n	800b280 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe f996 	bl	800959c <dec_lock>
 800b270:	4603      	mov	r3, r0
 800b272:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b274:	7bfb      	ldrb	r3, [r7, #15]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b280:	7bfb      	ldrb	r3, [r7, #15]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b090      	sub	sp, #64	@ 0x40
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f107 0208 	add.w	r2, r7, #8
 800b29a:	4611      	mov	r1, r2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff fbd7 	bl	800aa50 <validate>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b2a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d103      	bne.n	800b2b8 <f_lseek+0x2e>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	7d5b      	ldrb	r3, [r3, #21]
 800b2b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b2b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <f_lseek+0x3c>
 800b2c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b2c4:	e1e6      	b.n	800b694 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f000 80d1 	beq.w	800b472 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d6:	d15a      	bne.n	800b38e <f_lseek+0x104>
			tbl = fp->cltbl;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2dc:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e0:	1d1a      	adds	r2, r3, #4
 800b2e2:	627a      	str	r2, [r7, #36]	@ 0x24
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	617b      	str	r3, [r7, #20]
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d03a      	beq.n	800b36e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fa:	613b      	str	r3, [r7, #16]
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b302:	3302      	adds	r3, #2
 800b304:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800b306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b308:	60fb      	str	r3, [r7, #12]
 800b30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b30c:	3301      	adds	r3, #1
 800b30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b314:	4618      	mov	r0, r3
 800b316:	f7fe faa0 	bl	800985a <get_fat>
 800b31a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d804      	bhi.n	800b32c <f_lseek+0xa2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2202      	movs	r2, #2
 800b326:	755a      	strb	r2, [r3, #21]
 800b328:	2302      	movs	r3, #2
 800b32a:	e1b3      	b.n	800b694 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b332:	d104      	bne.n	800b33e <f_lseek+0xb4>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	755a      	strb	r2, [r3, #21]
 800b33a:	2301      	movs	r3, #1
 800b33c:	e1aa      	b.n	800b694 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3301      	adds	r3, #1
 800b342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b344:	429a      	cmp	r2, r3
 800b346:	d0de      	beq.n	800b306 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d809      	bhi.n	800b364 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b352:	1d1a      	adds	r2, r3, #4
 800b354:	627a      	str	r2, [r7, #36]	@ 0x24
 800b356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b358:	601a      	str	r2, [r3, #0]
 800b35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35c:	1d1a      	adds	r2, r3, #4
 800b35e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b360:	693a      	ldr	r2, [r7, #16]
 800b362:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	695b      	ldr	r3, [r3, #20]
 800b368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d3c4      	bcc.n	800b2f8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b374:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d803      	bhi.n	800b386 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	e184      	b.n	800b690 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b386:	2311      	movs	r3, #17
 800b388:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b38c:	e180      	b.n	800b690 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	429a      	cmp	r2, r3
 800b396:	d902      	bls.n	800b39e <f_lseek+0x114>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	683a      	ldr	r2, [r7, #0]
 800b3a2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f000 8172 	beq.w	800b690 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7fe fcdf 	bl	8009d76 <clmt_clust>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	69db      	ldr	r3, [r3, #28]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	f7fe fa28 	bl	800981c <clust2sect>
 800b3cc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d104      	bne.n	800b3de <f_lseek+0x154>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	755a      	strb	r2, [r3, #21]
 800b3da:	2302      	movs	r3, #2
 800b3dc:	e15a      	b.n	800b694 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	0a5b      	lsrs	r3, r3, #9
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	8952      	ldrh	r2, [r2, #10]
 800b3e8:	3a01      	subs	r2, #1
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	69ba      	ldr	r2, [r7, #24]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	699b      	ldr	r3, [r3, #24]
 800b3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 8148 	beq.w	800b690 <f_lseek+0x406>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a1b      	ldr	r3, [r3, #32]
 800b404:	69ba      	ldr	r2, [r7, #24]
 800b406:	429a      	cmp	r2, r3
 800b408:	f000 8142 	beq.w	800b690 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7d1b      	ldrb	r3, [r3, #20]
 800b410:	b25b      	sxtb	r3, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	da18      	bge.n	800b448 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	7858      	ldrb	r0, [r3, #1]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a1a      	ldr	r2, [r3, #32]
 800b424:	2301      	movs	r3, #1
 800b426:	f7fd fe6f 	bl	8009108 <disk_write>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d004      	beq.n	800b43a <f_lseek+0x1b0>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	755a      	strb	r2, [r3, #21]
 800b436:	2301      	movs	r3, #1
 800b438:	e12c      	b.n	800b694 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	7d1b      	ldrb	r3, [r3, #20]
 800b43e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b442:	b2da      	uxtb	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	7858      	ldrb	r0, [r3, #1]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b452:	2301      	movs	r3, #1
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	f7fd fe37 	bl	80090c8 <disk_read>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d004      	beq.n	800b46a <f_lseek+0x1e0>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	755a      	strb	r2, [r3, #21]
 800b466:	2301      	movs	r3, #1
 800b468:	e114      	b.n	800b694 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	69ba      	ldr	r2, [r7, #24]
 800b46e:	621a      	str	r2, [r3, #32]
 800b470:	e10e      	b.n	800b690 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d908      	bls.n	800b48e <f_lseek+0x204>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7d1b      	ldrb	r3, [r3, #20]
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d102      	bne.n	800b48e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b494:	2300      	movs	r3, #0
 800b496:	637b      	str	r3, [r7, #52]	@ 0x34
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b49c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 80a7 	beq.w	800b5f4 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	895b      	ldrh	r3, [r3, #10]
 800b4aa:	025b      	lsls	r3, r3, #9
 800b4ac:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d01b      	beq.n	800b4ec <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	1e5a      	subs	r2, r3, #1
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	1e59      	subs	r1, r3, #1
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d30f      	bcc.n	800b4ec <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b4cc:	6a3b      	ldr	r3, [r7, #32]
 800b4ce:	1e5a      	subs	r2, r3, #1
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	425b      	negs	r3, r3
 800b4d4:	401a      	ands	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	69db      	ldr	r3, [r3, #28]
 800b4e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4ea:	e022      	b.n	800b532 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d119      	bne.n	800b52c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fe fba2 	bl	8009c46 <create_chain>
 800b502:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b506:	2b01      	cmp	r3, #1
 800b508:	d104      	bne.n	800b514 <f_lseek+0x28a>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2202      	movs	r2, #2
 800b50e:	755a      	strb	r2, [r3, #21]
 800b510:	2302      	movs	r3, #2
 800b512:	e0bf      	b.n	800b694 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b51a:	d104      	bne.n	800b526 <f_lseek+0x29c>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	755a      	strb	r2, [r3, #21]
 800b522:	2301      	movs	r3, #1
 800b524:	e0b6      	b.n	800b694 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b52a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b530:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b534:	2b00      	cmp	r3, #0
 800b536:	d05d      	beq.n	800b5f4 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800b538:	e03a      	b.n	800b5b0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	603b      	str	r3, [r7, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	699a      	ldr	r2, [r3, #24]
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	441a      	add	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	7d1b      	ldrb	r3, [r3, #20]
 800b552:	f003 0302 	and.w	r3, r3, #2
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00b      	beq.n	800b572 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe fb71 	bl	8009c46 <create_chain>
 800b564:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d108      	bne.n	800b57e <f_lseek+0x2f4>
							ofs = 0; break;
 800b56c:	2300      	movs	r3, #0
 800b56e:	603b      	str	r3, [r7, #0]
 800b570:	e022      	b.n	800b5b8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe f96f 	bl	800985a <get_fat>
 800b57c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b584:	d104      	bne.n	800b590 <f_lseek+0x306>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2201      	movs	r2, #1
 800b58a:	755a      	strb	r2, [r3, #21]
 800b58c:	2301      	movs	r3, #1
 800b58e:	e081      	b.n	800b694 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b592:	2b01      	cmp	r3, #1
 800b594:	d904      	bls.n	800b5a0 <f_lseek+0x316>
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d304      	bcc.n	800b5aa <f_lseek+0x320>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	755a      	strb	r2, [r3, #21]
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e074      	b.n	800b694 <f_lseek+0x40a>
					fp->clust = clst;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5ae:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d8c0      	bhi.n	800b53a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	699a      	ldr	r2, [r3, #24]
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	441a      	add	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d012      	beq.n	800b5f4 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fe f922 	bl	800981c <clust2sect>
 800b5d8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b5da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d104      	bne.n	800b5ea <f_lseek+0x360>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	755a      	strb	r2, [r3, #21]
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	e054      	b.n	800b694 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	0a5b      	lsrs	r3, r3, #9
 800b5ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5f0:	4413      	add	r3, r2
 800b5f2:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	699a      	ldr	r2, [r3, #24]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d90a      	bls.n	800b616 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	699a      	ldr	r2, [r3, #24]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	7d1b      	ldrb	r3, [r3, #20]
 800b60c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b610:	b2da      	uxtb	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d036      	beq.n	800b690 <f_lseek+0x406>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b628:	429a      	cmp	r2, r3
 800b62a:	d031      	beq.n	800b690 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	7d1b      	ldrb	r3, [r3, #20]
 800b630:	b25b      	sxtb	r3, r3
 800b632:	2b00      	cmp	r3, #0
 800b634:	da18      	bge.n	800b668 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	7858      	ldrb	r0, [r3, #1]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a1a      	ldr	r2, [r3, #32]
 800b644:	2301      	movs	r3, #1
 800b646:	f7fd fd5f 	bl	8009108 <disk_write>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d004      	beq.n	800b65a <f_lseek+0x3d0>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	755a      	strb	r2, [r3, #21]
 800b656:	2301      	movs	r3, #1
 800b658:	e01c      	b.n	800b694 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	7d1b      	ldrb	r3, [r3, #20]
 800b65e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b662:	b2da      	uxtb	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	7858      	ldrb	r0, [r3, #1]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b672:	2301      	movs	r3, #1
 800b674:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b676:	f7fd fd27 	bl	80090c8 <disk_read>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d004      	beq.n	800b68a <f_lseek+0x400>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	755a      	strb	r2, [r3, #21]
 800b686:	2301      	movs	r3, #1
 800b688:	e004      	b.n	800b694 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b68e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b690:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b694:	4618      	mov	r0, r3
 800b696:	3740      	adds	r7, #64	@ 0x40
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b087      	sub	sp, #28
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b6b2:	4b1f      	ldr	r3, [pc, #124]	@ (800b730 <FATFS_LinkDriverEx+0x94>)
 800b6b4:	7a5b      	ldrb	r3, [r3, #9]
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d131      	bne.n	800b720 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b6bc:	4b1c      	ldr	r3, [pc, #112]	@ (800b730 <FATFS_LinkDriverEx+0x94>)
 800b6be:	7a5b      	ldrb	r3, [r3, #9]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b730 <FATFS_LinkDriverEx+0x94>)
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b6ca:	4b19      	ldr	r3, [pc, #100]	@ (800b730 <FATFS_LinkDriverEx+0x94>)
 800b6cc:	7a5b      	ldrb	r3, [r3, #9]
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	4a17      	ldr	r2, [pc, #92]	@ (800b730 <FATFS_LinkDriverEx+0x94>)
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	4413      	add	r3, r2
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b6da:	4b15      	ldr	r3, [pc, #84]	@ (800b730 <FATFS_LinkDriverEx+0x94>)
 800b6dc:	7a5b      	ldrb	r3, [r3, #9]
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	4b13      	ldr	r3, [pc, #76]	@ (800b730 <FATFS_LinkDriverEx+0x94>)
 800b6e4:	4413      	add	r3, r2
 800b6e6:	79fa      	ldrb	r2, [r7, #7]
 800b6e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b6ea:	4b11      	ldr	r3, [pc, #68]	@ (800b730 <FATFS_LinkDriverEx+0x94>)
 800b6ec:	7a5b      	ldrb	r3, [r3, #9]
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	1c5a      	adds	r2, r3, #1
 800b6f2:	b2d1      	uxtb	r1, r2
 800b6f4:	4a0e      	ldr	r2, [pc, #56]	@ (800b730 <FATFS_LinkDriverEx+0x94>)
 800b6f6:	7251      	strb	r1, [r2, #9]
 800b6f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b6fa:	7dbb      	ldrb	r3, [r7, #22]
 800b6fc:	3330      	adds	r3, #48	@ 0x30
 800b6fe:	b2da      	uxtb	r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	3301      	adds	r3, #1
 800b708:	223a      	movs	r2, #58	@ 0x3a
 800b70a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	3302      	adds	r3, #2
 800b710:	222f      	movs	r2, #47	@ 0x2f
 800b712:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	3303      	adds	r3, #3
 800b718:	2200      	movs	r2, #0
 800b71a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b71c:	2300      	movs	r3, #0
 800b71e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b720:	7dfb      	ldrb	r3, [r7, #23]
}
 800b722:	4618      	mov	r0, r3
 800b724:	371c      	adds	r7, #28
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	200005b0 	.word	0x200005b0

0800b734 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b73e:	2200      	movs	r2, #0
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7ff ffaa 	bl	800b69c <FATFS_LinkDriverEx>
 800b748:	4603      	mov	r3, r0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
	...

0800b754 <malloc>:
 800b754:	4b02      	ldr	r3, [pc, #8]	@ (800b760 <malloc+0xc>)
 800b756:	4601      	mov	r1, r0
 800b758:	6818      	ldr	r0, [r3, #0]
 800b75a:	f000 b82d 	b.w	800b7b8 <_malloc_r>
 800b75e:	bf00      	nop
 800b760:	20000018 	.word	0x20000018

0800b764 <free>:
 800b764:	4b02      	ldr	r3, [pc, #8]	@ (800b770 <free+0xc>)
 800b766:	4601      	mov	r1, r0
 800b768:	6818      	ldr	r0, [r3, #0]
 800b76a:	f000 b939 	b.w	800b9e0 <_free_r>
 800b76e:	bf00      	nop
 800b770:	20000018 	.word	0x20000018

0800b774 <sbrk_aligned>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	4e0f      	ldr	r6, [pc, #60]	@ (800b7b4 <sbrk_aligned+0x40>)
 800b778:	460c      	mov	r4, r1
 800b77a:	6831      	ldr	r1, [r6, #0]
 800b77c:	4605      	mov	r5, r0
 800b77e:	b911      	cbnz	r1, 800b786 <sbrk_aligned+0x12>
 800b780:	f000 f8e4 	bl	800b94c <_sbrk_r>
 800b784:	6030      	str	r0, [r6, #0]
 800b786:	4621      	mov	r1, r4
 800b788:	4628      	mov	r0, r5
 800b78a:	f000 f8df 	bl	800b94c <_sbrk_r>
 800b78e:	1c43      	adds	r3, r0, #1
 800b790:	d103      	bne.n	800b79a <sbrk_aligned+0x26>
 800b792:	f04f 34ff 	mov.w	r4, #4294967295
 800b796:	4620      	mov	r0, r4
 800b798:	bd70      	pop	{r4, r5, r6, pc}
 800b79a:	1cc4      	adds	r4, r0, #3
 800b79c:	f024 0403 	bic.w	r4, r4, #3
 800b7a0:	42a0      	cmp	r0, r4
 800b7a2:	d0f8      	beq.n	800b796 <sbrk_aligned+0x22>
 800b7a4:	1a21      	subs	r1, r4, r0
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f000 f8d0 	bl	800b94c <_sbrk_r>
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	d1f2      	bne.n	800b796 <sbrk_aligned+0x22>
 800b7b0:	e7ef      	b.n	800b792 <sbrk_aligned+0x1e>
 800b7b2:	bf00      	nop
 800b7b4:	200005bc 	.word	0x200005bc

0800b7b8 <_malloc_r>:
 800b7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7bc:	1ccd      	adds	r5, r1, #3
 800b7be:	f025 0503 	bic.w	r5, r5, #3
 800b7c2:	3508      	adds	r5, #8
 800b7c4:	2d0c      	cmp	r5, #12
 800b7c6:	bf38      	it	cc
 800b7c8:	250c      	movcc	r5, #12
 800b7ca:	2d00      	cmp	r5, #0
 800b7cc:	4606      	mov	r6, r0
 800b7ce:	db01      	blt.n	800b7d4 <_malloc_r+0x1c>
 800b7d0:	42a9      	cmp	r1, r5
 800b7d2:	d904      	bls.n	800b7de <_malloc_r+0x26>
 800b7d4:	230c      	movs	r3, #12
 800b7d6:	6033      	str	r3, [r6, #0]
 800b7d8:	2000      	movs	r0, #0
 800b7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8b4 <_malloc_r+0xfc>
 800b7e2:	f000 f869 	bl	800b8b8 <__malloc_lock>
 800b7e6:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ea:	461c      	mov	r4, r3
 800b7ec:	bb44      	cbnz	r4, 800b840 <_malloc_r+0x88>
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f7ff ffbf 	bl	800b774 <sbrk_aligned>
 800b7f6:	1c43      	adds	r3, r0, #1
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	d158      	bne.n	800b8ae <_malloc_r+0xf6>
 800b7fc:	f8d8 4000 	ldr.w	r4, [r8]
 800b800:	4627      	mov	r7, r4
 800b802:	2f00      	cmp	r7, #0
 800b804:	d143      	bne.n	800b88e <_malloc_r+0xd6>
 800b806:	2c00      	cmp	r4, #0
 800b808:	d04b      	beq.n	800b8a2 <_malloc_r+0xea>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	4639      	mov	r1, r7
 800b80e:	4630      	mov	r0, r6
 800b810:	eb04 0903 	add.w	r9, r4, r3
 800b814:	f000 f89a 	bl	800b94c <_sbrk_r>
 800b818:	4581      	cmp	r9, r0
 800b81a:	d142      	bne.n	800b8a2 <_malloc_r+0xea>
 800b81c:	6821      	ldr	r1, [r4, #0]
 800b81e:	1a6d      	subs	r5, r5, r1
 800b820:	4629      	mov	r1, r5
 800b822:	4630      	mov	r0, r6
 800b824:	f7ff ffa6 	bl	800b774 <sbrk_aligned>
 800b828:	3001      	adds	r0, #1
 800b82a:	d03a      	beq.n	800b8a2 <_malloc_r+0xea>
 800b82c:	6823      	ldr	r3, [r4, #0]
 800b82e:	442b      	add	r3, r5
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	f8d8 3000 	ldr.w	r3, [r8]
 800b836:	685a      	ldr	r2, [r3, #4]
 800b838:	bb62      	cbnz	r2, 800b894 <_malloc_r+0xdc>
 800b83a:	f8c8 7000 	str.w	r7, [r8]
 800b83e:	e00f      	b.n	800b860 <_malloc_r+0xa8>
 800b840:	6822      	ldr	r2, [r4, #0]
 800b842:	1b52      	subs	r2, r2, r5
 800b844:	d420      	bmi.n	800b888 <_malloc_r+0xd0>
 800b846:	2a0b      	cmp	r2, #11
 800b848:	d917      	bls.n	800b87a <_malloc_r+0xc2>
 800b84a:	1961      	adds	r1, r4, r5
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	6025      	str	r5, [r4, #0]
 800b850:	bf18      	it	ne
 800b852:	6059      	strne	r1, [r3, #4]
 800b854:	6863      	ldr	r3, [r4, #4]
 800b856:	bf08      	it	eq
 800b858:	f8c8 1000 	streq.w	r1, [r8]
 800b85c:	5162      	str	r2, [r4, r5]
 800b85e:	604b      	str	r3, [r1, #4]
 800b860:	4630      	mov	r0, r6
 800b862:	f000 f82f 	bl	800b8c4 <__malloc_unlock>
 800b866:	f104 000b 	add.w	r0, r4, #11
 800b86a:	1d23      	adds	r3, r4, #4
 800b86c:	f020 0007 	bic.w	r0, r0, #7
 800b870:	1ac2      	subs	r2, r0, r3
 800b872:	bf1c      	itt	ne
 800b874:	1a1b      	subne	r3, r3, r0
 800b876:	50a3      	strne	r3, [r4, r2]
 800b878:	e7af      	b.n	800b7da <_malloc_r+0x22>
 800b87a:	6862      	ldr	r2, [r4, #4]
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	bf0c      	ite	eq
 800b880:	f8c8 2000 	streq.w	r2, [r8]
 800b884:	605a      	strne	r2, [r3, #4]
 800b886:	e7eb      	b.n	800b860 <_malloc_r+0xa8>
 800b888:	4623      	mov	r3, r4
 800b88a:	6864      	ldr	r4, [r4, #4]
 800b88c:	e7ae      	b.n	800b7ec <_malloc_r+0x34>
 800b88e:	463c      	mov	r4, r7
 800b890:	687f      	ldr	r7, [r7, #4]
 800b892:	e7b6      	b.n	800b802 <_malloc_r+0x4a>
 800b894:	461a      	mov	r2, r3
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	42a3      	cmp	r3, r4
 800b89a:	d1fb      	bne.n	800b894 <_malloc_r+0xdc>
 800b89c:	2300      	movs	r3, #0
 800b89e:	6053      	str	r3, [r2, #4]
 800b8a0:	e7de      	b.n	800b860 <_malloc_r+0xa8>
 800b8a2:	230c      	movs	r3, #12
 800b8a4:	6033      	str	r3, [r6, #0]
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f000 f80c 	bl	800b8c4 <__malloc_unlock>
 800b8ac:	e794      	b.n	800b7d8 <_malloc_r+0x20>
 800b8ae:	6005      	str	r5, [r0, #0]
 800b8b0:	e7d6      	b.n	800b860 <_malloc_r+0xa8>
 800b8b2:	bf00      	nop
 800b8b4:	200005c0 	.word	0x200005c0

0800b8b8 <__malloc_lock>:
 800b8b8:	4801      	ldr	r0, [pc, #4]	@ (800b8c0 <__malloc_lock+0x8>)
 800b8ba:	f000 b881 	b.w	800b9c0 <__retarget_lock_acquire_recursive>
 800b8be:	bf00      	nop
 800b8c0:	20000700 	.word	0x20000700

0800b8c4 <__malloc_unlock>:
 800b8c4:	4801      	ldr	r0, [pc, #4]	@ (800b8cc <__malloc_unlock+0x8>)
 800b8c6:	f000 b87c 	b.w	800b9c2 <__retarget_lock_release_recursive>
 800b8ca:	bf00      	nop
 800b8cc:	20000700 	.word	0x20000700

0800b8d0 <realloc>:
 800b8d0:	4b02      	ldr	r3, [pc, #8]	@ (800b8dc <realloc+0xc>)
 800b8d2:	460a      	mov	r2, r1
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	6818      	ldr	r0, [r3, #0]
 800b8d8:	f000 b802 	b.w	800b8e0 <_realloc_r>
 800b8dc:	20000018 	.word	0x20000018

0800b8e0 <_realloc_r>:
 800b8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e4:	4680      	mov	r8, r0
 800b8e6:	4615      	mov	r5, r2
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	b921      	cbnz	r1, 800b8f6 <_realloc_r+0x16>
 800b8ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	f7ff bf61 	b.w	800b7b8 <_malloc_r>
 800b8f6:	b92a      	cbnz	r2, 800b904 <_realloc_r+0x24>
 800b8f8:	f000 f872 	bl	800b9e0 <_free_r>
 800b8fc:	2400      	movs	r4, #0
 800b8fe:	4620      	mov	r0, r4
 800b900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b904:	f000 f8b6 	bl	800ba74 <_malloc_usable_size_r>
 800b908:	4285      	cmp	r5, r0
 800b90a:	4606      	mov	r6, r0
 800b90c:	d802      	bhi.n	800b914 <_realloc_r+0x34>
 800b90e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b912:	d8f4      	bhi.n	800b8fe <_realloc_r+0x1e>
 800b914:	4629      	mov	r1, r5
 800b916:	4640      	mov	r0, r8
 800b918:	f7ff ff4e 	bl	800b7b8 <_malloc_r>
 800b91c:	4607      	mov	r7, r0
 800b91e:	2800      	cmp	r0, #0
 800b920:	d0ec      	beq.n	800b8fc <_realloc_r+0x1c>
 800b922:	42b5      	cmp	r5, r6
 800b924:	462a      	mov	r2, r5
 800b926:	4621      	mov	r1, r4
 800b928:	bf28      	it	cs
 800b92a:	4632      	movcs	r2, r6
 800b92c:	f000 f84a 	bl	800b9c4 <memcpy>
 800b930:	4621      	mov	r1, r4
 800b932:	4640      	mov	r0, r8
 800b934:	f000 f854 	bl	800b9e0 <_free_r>
 800b938:	463c      	mov	r4, r7
 800b93a:	e7e0      	b.n	800b8fe <_realloc_r+0x1e>

0800b93c <memset>:
 800b93c:	4402      	add	r2, r0
 800b93e:	4603      	mov	r3, r0
 800b940:	4293      	cmp	r3, r2
 800b942:	d100      	bne.n	800b946 <memset+0xa>
 800b944:	4770      	bx	lr
 800b946:	f803 1b01 	strb.w	r1, [r3], #1
 800b94a:	e7f9      	b.n	800b940 <memset+0x4>

0800b94c <_sbrk_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d06      	ldr	r5, [pc, #24]	@ (800b968 <_sbrk_r+0x1c>)
 800b950:	2300      	movs	r3, #0
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	602b      	str	r3, [r5, #0]
 800b958:	f7f7 fad6 	bl	8002f08 <_sbrk>
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d102      	bne.n	800b966 <_sbrk_r+0x1a>
 800b960:	682b      	ldr	r3, [r5, #0]
 800b962:	b103      	cbz	r3, 800b966 <_sbrk_r+0x1a>
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	bd38      	pop	{r3, r4, r5, pc}
 800b968:	200006fc 	.word	0x200006fc

0800b96c <__errno>:
 800b96c:	4b01      	ldr	r3, [pc, #4]	@ (800b974 <__errno+0x8>)
 800b96e:	6818      	ldr	r0, [r3, #0]
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	20000018 	.word	0x20000018

0800b978 <__libc_init_array>:
 800b978:	b570      	push	{r4, r5, r6, lr}
 800b97a:	4d0d      	ldr	r5, [pc, #52]	@ (800b9b0 <__libc_init_array+0x38>)
 800b97c:	4c0d      	ldr	r4, [pc, #52]	@ (800b9b4 <__libc_init_array+0x3c>)
 800b97e:	1b64      	subs	r4, r4, r5
 800b980:	10a4      	asrs	r4, r4, #2
 800b982:	2600      	movs	r6, #0
 800b984:	42a6      	cmp	r6, r4
 800b986:	d109      	bne.n	800b99c <__libc_init_array+0x24>
 800b988:	4d0b      	ldr	r5, [pc, #44]	@ (800b9b8 <__libc_init_array+0x40>)
 800b98a:	4c0c      	ldr	r4, [pc, #48]	@ (800b9bc <__libc_init_array+0x44>)
 800b98c:	f000 f87a 	bl	800ba84 <_init>
 800b990:	1b64      	subs	r4, r4, r5
 800b992:	10a4      	asrs	r4, r4, #2
 800b994:	2600      	movs	r6, #0
 800b996:	42a6      	cmp	r6, r4
 800b998:	d105      	bne.n	800b9a6 <__libc_init_array+0x2e>
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a0:	4798      	blx	r3
 800b9a2:	3601      	adds	r6, #1
 800b9a4:	e7ee      	b.n	800b984 <__libc_init_array+0xc>
 800b9a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9aa:	4798      	blx	r3
 800b9ac:	3601      	adds	r6, #1
 800b9ae:	e7f2      	b.n	800b996 <__libc_init_array+0x1e>
 800b9b0:	0800c994 	.word	0x0800c994
 800b9b4:	0800c994 	.word	0x0800c994
 800b9b8:	0800c994 	.word	0x0800c994
 800b9bc:	0800c998 	.word	0x0800c998

0800b9c0 <__retarget_lock_acquire_recursive>:
 800b9c0:	4770      	bx	lr

0800b9c2 <__retarget_lock_release_recursive>:
 800b9c2:	4770      	bx	lr

0800b9c4 <memcpy>:
 800b9c4:	440a      	add	r2, r1
 800b9c6:	4291      	cmp	r1, r2
 800b9c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9cc:	d100      	bne.n	800b9d0 <memcpy+0xc>
 800b9ce:	4770      	bx	lr
 800b9d0:	b510      	push	{r4, lr}
 800b9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9da:	4291      	cmp	r1, r2
 800b9dc:	d1f9      	bne.n	800b9d2 <memcpy+0xe>
 800b9de:	bd10      	pop	{r4, pc}

0800b9e0 <_free_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	d041      	beq.n	800ba6c <_free_r+0x8c>
 800b9e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ec:	1f0c      	subs	r4, r1, #4
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	bfb8      	it	lt
 800b9f2:	18e4      	addlt	r4, r4, r3
 800b9f4:	f7ff ff60 	bl	800b8b8 <__malloc_lock>
 800b9f8:	4a1d      	ldr	r2, [pc, #116]	@ (800ba70 <_free_r+0x90>)
 800b9fa:	6813      	ldr	r3, [r2, #0]
 800b9fc:	b933      	cbnz	r3, 800ba0c <_free_r+0x2c>
 800b9fe:	6063      	str	r3, [r4, #4]
 800ba00:	6014      	str	r4, [r2, #0]
 800ba02:	4628      	mov	r0, r5
 800ba04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba08:	f7ff bf5c 	b.w	800b8c4 <__malloc_unlock>
 800ba0c:	42a3      	cmp	r3, r4
 800ba0e:	d908      	bls.n	800ba22 <_free_r+0x42>
 800ba10:	6820      	ldr	r0, [r4, #0]
 800ba12:	1821      	adds	r1, r4, r0
 800ba14:	428b      	cmp	r3, r1
 800ba16:	bf01      	itttt	eq
 800ba18:	6819      	ldreq	r1, [r3, #0]
 800ba1a:	685b      	ldreq	r3, [r3, #4]
 800ba1c:	1809      	addeq	r1, r1, r0
 800ba1e:	6021      	streq	r1, [r4, #0]
 800ba20:	e7ed      	b.n	800b9fe <_free_r+0x1e>
 800ba22:	461a      	mov	r2, r3
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	b10b      	cbz	r3, 800ba2c <_free_r+0x4c>
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	d9fa      	bls.n	800ba22 <_free_r+0x42>
 800ba2c:	6811      	ldr	r1, [r2, #0]
 800ba2e:	1850      	adds	r0, r2, r1
 800ba30:	42a0      	cmp	r0, r4
 800ba32:	d10b      	bne.n	800ba4c <_free_r+0x6c>
 800ba34:	6820      	ldr	r0, [r4, #0]
 800ba36:	4401      	add	r1, r0
 800ba38:	1850      	adds	r0, r2, r1
 800ba3a:	4283      	cmp	r3, r0
 800ba3c:	6011      	str	r1, [r2, #0]
 800ba3e:	d1e0      	bne.n	800ba02 <_free_r+0x22>
 800ba40:	6818      	ldr	r0, [r3, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	6053      	str	r3, [r2, #4]
 800ba46:	4408      	add	r0, r1
 800ba48:	6010      	str	r0, [r2, #0]
 800ba4a:	e7da      	b.n	800ba02 <_free_r+0x22>
 800ba4c:	d902      	bls.n	800ba54 <_free_r+0x74>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	602b      	str	r3, [r5, #0]
 800ba52:	e7d6      	b.n	800ba02 <_free_r+0x22>
 800ba54:	6820      	ldr	r0, [r4, #0]
 800ba56:	1821      	adds	r1, r4, r0
 800ba58:	428b      	cmp	r3, r1
 800ba5a:	bf04      	itt	eq
 800ba5c:	6819      	ldreq	r1, [r3, #0]
 800ba5e:	685b      	ldreq	r3, [r3, #4]
 800ba60:	6063      	str	r3, [r4, #4]
 800ba62:	bf04      	itt	eq
 800ba64:	1809      	addeq	r1, r1, r0
 800ba66:	6021      	streq	r1, [r4, #0]
 800ba68:	6054      	str	r4, [r2, #4]
 800ba6a:	e7ca      	b.n	800ba02 <_free_r+0x22>
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
 800ba6e:	bf00      	nop
 800ba70:	200005c0 	.word	0x200005c0

0800ba74 <_malloc_usable_size_r>:
 800ba74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba78:	1f18      	subs	r0, r3, #4
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	bfbc      	itt	lt
 800ba7e:	580b      	ldrlt	r3, [r1, r0]
 800ba80:	18c0      	addlt	r0, r0, r3
 800ba82:	4770      	bx	lr

0800ba84 <_init>:
 800ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba86:	bf00      	nop
 800ba88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8a:	bc08      	pop	{r3}
 800ba8c:	469e      	mov	lr, r3
 800ba8e:	4770      	bx	lr

0800ba90 <_fini>:
 800ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba92:	bf00      	nop
 800ba94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba96:	bc08      	pop	{r3}
 800ba98:	469e      	mov	lr, r3
 800ba9a:	4770      	bx	lr
