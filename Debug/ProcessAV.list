
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad08  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f7c  0800ae90  0800ae90  0000be90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be0c  0800be0c  0000d068  2**0
                  CONTENTS
  4 .ARM          00000008  0800be0c  0800be0c  0000ce0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be14  0800be14  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be14  0800be14  0000ce14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be18  0800be18  0000ce18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800be1c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d068  2**0
                  CONTENTS
 10 .bss          00000818  20000068  20000068  0000d068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000880  20000880  0000d068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192d5  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ad8  00000000  00000000  0002636d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  00029e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248d0  00000000  00000000  0002b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e142  00000000  00000000  0004fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6c08  00000000  00000000  0006dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144bb2  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000011fb  00000000  00000000  00144bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006658  00000000  00000000  00145df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0014c448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ae78 	.word	0x0800ae78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800ae78 	.word	0x0800ae78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <convert_color_16_to_18>:

#include "graphics.h"


void convert_color_16_to_18(uint16_t color, uint8_t *pixel)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	0adb      	lsrs	r3, r3, #11
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	115b      	asrs	r3, r3, #5
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80004d6:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	f003 031f 	and.w	r3, r3, #31
 80004e0:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 80004e2:	7bfa      	ldrb	r2, [r7, #15]
 80004e4:	4613      	mov	r3, r2
 80004e6:	019b      	lsls	r3, r3, #6
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4a16      	ldr	r2, [pc, #88]	@ (8000544 <convert_color_16_to_18+0x8c>)
 80004ec:	fb82 1203 	smull	r1, r2, r2, r3
 80004f0:	441a      	add	r2, r3
 80004f2:	1112      	asrs	r2, r2, #4
 80004f4:	17db      	asrs	r3, r3, #31
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8000504:	7b7a      	ldrb	r2, [r7, #13]
 8000506:	4613      	mov	r3, r2
 8000508:	019b      	lsls	r3, r3, #6
 800050a:	1a9b      	subs	r3, r3, r2
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <convert_color_16_to_18+0x8c>)
 800050e:	fb82 1203 	smull	r1, r2, r2, r3
 8000512:	441a      	add	r2, r3
 8000514:	1112      	asrs	r2, r2, #4
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	7bfa      	ldrb	r2, [r7, #15]
 8000524:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	7bba      	ldrb	r2, [r7, #14]
 800052c:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	3302      	adds	r3, #2
 8000532:	7b7a      	ldrb	r2, [r7, #13]
 8000534:	701a      	strb	r2, [r3, #0]

}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	84210843 	.word	0x84210843

08000548 <write_color>:


void write_color(uint16_t color)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 8000552:	f107 020c 	add.w	r2, r7, #12
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ffac 	bl	80004b8 <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000560:	f107 010c 	add.w	r1, r7, #12
 8000564:	f04f 33ff 	mov.w	r3, #4294967295
 8000568:	2203      	movs	r2, #3
 800056a:	4803      	ldr	r0, [pc, #12]	@ (8000578 <write_color+0x30>)
 800056c:	f004 fc67 	bl	8004e3e <HAL_SPI_Transmit>


}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000017c 	.word	0x2000017c

0800057c <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
 8000586:	460b      	mov	r3, r1
 8000588:	80bb      	strh	r3, [r7, #4]
 800058a:	4613      	mov	r3, r2
 800058c:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 800058e:	88bb      	ldrh	r3, [r7, #4]
 8000590:	88fa      	ldrh	r2, [r7, #6]
 8000592:	88b9      	ldrh	r1, [r7, #4]
 8000594:	88f8      	ldrh	r0, [r7, #6]
 8000596:	2477      	movs	r4, #119	@ 0x77
 8000598:	9400      	str	r4, [sp, #0]
 800059a:	f000 fc65 	bl	8000e68 <set_adress_window>

	DC_DATA();
 800059e:	2201      	movs	r2, #1
 80005a0:	2108      	movs	r1, #8
 80005a2:	480a      	ldr	r0, [pc, #40]	@ (80005cc <draw_pixel+0x50>)
 80005a4:	f002 ff78 	bl	8003498 <HAL_GPIO_WritePin>
	CS_A();
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	4807      	ldr	r0, [pc, #28]	@ (80005cc <draw_pixel+0x50>)
 80005ae:	f002 ff73 	bl	8003498 <HAL_GPIO_WritePin>

	write_color(color);
 80005b2:	887b      	ldrh	r3, [r7, #2]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffc7 	bl	8000548 <write_color>

	CS_D();
 80005ba:	2201      	movs	r2, #1
 80005bc:	2110      	movs	r1, #16
 80005be:	4803      	ldr	r0, [pc, #12]	@ (80005cc <draw_pixel+0x50>)
 80005c0:	f002 ff6a 	bl	8003498 <HAL_GPIO_WritePin>

}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	40020c00 	.word	0x40020c00

080005d0 <fill_screen1>:




void fill_screen1(uint16_t color)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	 * Input: Culoare pe 16 biti
	 * Output: Void
	 */
	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	0adb      	lsrs	r3, r3, #11
 80005de:	b29b      	uxth	r3, r3
 80005e0:	74fb      	strb	r3, [r7, #19]
	g = (color & 0x07E0) >> 5;
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	115b      	asrs	r3, r3, #5
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005ec:	74bb      	strb	r3, [r7, #18]
	b = color & 0x001F;
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f003 031f 	and.w	r3, r3, #31
 80005f6:	747b      	strb	r3, [r7, #17]

	r = (255*r)/31;
 80005f8:	7cfa      	ldrb	r2, [r7, #19]
 80005fa:	4613      	mov	r3, r2
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	4a3a      	ldr	r2, [pc, #232]	@ (80006ec <fill_screen1+0x11c>)
 8000602:	fb82 1203 	smull	r1, r2, r2, r3
 8000606:	441a      	add	r2, r3
 8000608:	1112      	asrs	r2, r2, #4
 800060a:	17db      	asrs	r3, r3, #31
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	74fb      	strb	r3, [r7, #19]
	g = (255*g)/63;
 8000610:	7cba      	ldrb	r2, [r7, #18]
 8000612:	4613      	mov	r3, r2
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	4a35      	ldr	r2, [pc, #212]	@ (80006f0 <fill_screen1+0x120>)
 800061a:	fb82 1203 	smull	r1, r2, r2, r3
 800061e:	441a      	add	r2, r3
 8000620:	1152      	asrs	r2, r2, #5
 8000622:	17db      	asrs	r3, r3, #31
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	74bb      	strb	r3, [r7, #18]
	b = (255*b)/31;
 8000628:	7c7a      	ldrb	r2, [r7, #17]
 800062a:	4613      	mov	r3, r2
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	4a2e      	ldr	r2, [pc, #184]	@ (80006ec <fill_screen1+0x11c>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	441a      	add	r2, r3
 8000638:	1112      	asrs	r2, r2, #4
 800063a:	17db      	asrs	r3, r3, #31
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	747b      	strb	r3, [r7, #17]

	uint8_t pixel[] = {r,g,b};
 8000640:	7cfb      	ldrb	r3, [r7, #19]
 8000642:	723b      	strb	r3, [r7, #8]
 8000644:	7cbb      	ldrb	r3, [r7, #18]
 8000646:	727b      	strb	r3, [r7, #9]
 8000648:	7c7b      	ldrb	r3, [r7, #17]
 800064a:	72bb      	strb	r3, [r7, #10]
	uint8_t *line = malloc(320*sizeof(pixel));
 800064c:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8000650:	f00a f9f6 	bl	800aa40 <malloc>
 8000654:	4603      	mov	r3, r0
 8000656:	60fb      	str	r3, [r7, #12]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000658:	2377      	movs	r3, #119	@ 0x77
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	f240 13df 	movw	r3, #479	@ 0x1df
 8000660:	f240 123f 	movw	r2, #319	@ 0x13f
 8000664:	2100      	movs	r1, #0
 8000666:	2000      	movs	r0, #0
 8000668:	f000 fbfe 	bl	8000e68 <set_adress_window>

	DC_DATA();
 800066c:	2201      	movs	r2, #1
 800066e:	2108      	movs	r1, #8
 8000670:	4820      	ldr	r0, [pc, #128]	@ (80006f4 <fill_screen1+0x124>)
 8000672:	f002 ff11 	bl	8003498 <HAL_GPIO_WritePin>
	CS_A();
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	481e      	ldr	r0, [pc, #120]	@ (80006f4 <fill_screen1+0x124>)
 800067c:	f002 ff0c 	bl	8003498 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8000680:	2300      	movs	r3, #0
 8000682:	82fb      	strh	r3, [r7, #22]
 8000684:	e00f      	b.n	80006a6 <fill_screen1+0xd6>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 8000686:	8afa      	ldrh	r2, [r7, #22]
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	461a      	mov	r2, r3
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	8819      	ldrh	r1, [r3, #0]
 800069a:	789b      	ldrb	r3, [r3, #2]
 800069c:	8011      	strh	r1, [r2, #0]
 800069e:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80006a0:	8afb      	ldrh	r3, [r7, #22]
 80006a2:	3301      	adds	r3, #1
 80006a4:	82fb      	strh	r3, [r7, #22]
 80006a6:	8afb      	ldrh	r3, [r7, #22]
 80006a8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006ac:	d3eb      	bcc.n	8000686 <fill_screen1+0xb6>
	}

	for(uint16_t y=0; y<480; y++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	82bb      	strh	r3, [r7, #20]
 80006b2:	e00a      	b.n	80006ca <fill_screen1+0xfa>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80006bc:	68f9      	ldr	r1, [r7, #12]
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <fill_screen1+0x128>)
 80006c0:	f004 fbbd 	bl	8004e3e <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 80006c4:	8abb      	ldrh	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	82bb      	strh	r3, [r7, #20]
 80006ca:	8abb      	ldrh	r3, [r7, #20]
 80006cc:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80006d0:	d3f0      	bcc.n	80006b4 <fill_screen1+0xe4>

	}

	free(line);
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f00a f9bc 	bl	800aa50 <free>

	CS_D();
 80006d8:	2201      	movs	r2, #1
 80006da:	2110      	movs	r1, #16
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <fill_screen1+0x124>)
 80006de:	f002 fedb 	bl	8003498 <HAL_GPIO_WritePin>

}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	84210843 	.word	0x84210843
 80006f0:	82082083 	.word	0x82082083
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	2000017c 	.word	0x2000017c

080006fc <fill_screen2>:


void fill_screen2(uint16_t color)
{
 80006fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000700:	b08f      	sub	sp, #60	@ 0x3c
 8000702:	af02      	add	r7, sp, #8
 8000704:	4603      	mov	r3, r0
 8000706:	80fb      	strh	r3, [r7, #6]
 8000708:	466b      	mov	r3, sp
 800070a:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 800070c:	2377      	movs	r3, #119	@ 0x77
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	f240 13df 	movw	r3, #479	@ 0x1df
 8000714:	f240 123f 	movw	r2, #319	@ 0x13f
 8000718:	2100      	movs	r1, #0
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fba4 	bl	8000e68 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 8000720:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8000726:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 800072a:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	0adb      	lsrs	r3, r3, #11
 8000730:	b29b      	uxth	r3, r3
 8000732:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	115b      	asrs	r3, r3, #5
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800073e:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 031f 	and.w	r3, r3, #31
 8000748:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 800074a:	7ffa      	ldrb	r2, [r7, #31]
 800074c:	4613      	mov	r3, r2
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	4a4f      	ldr	r2, [pc, #316]	@ (8000890 <fill_screen2+0x194>)
 8000754:	fb82 1203 	smull	r1, r2, r2, r3
 8000758:	441a      	add	r2, r3
 800075a:	1112      	asrs	r2, r2, #4
 800075c:	17db      	asrs	r3, r3, #31
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 8000762:	7fba      	ldrb	r2, [r7, #30]
 8000764:	4613      	mov	r3, r2
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	4a4a      	ldr	r2, [pc, #296]	@ (8000894 <fill_screen2+0x198>)
 800076c:	fb82 1203 	smull	r1, r2, r2, r3
 8000770:	441a      	add	r2, r3
 8000772:	1152      	asrs	r2, r2, #5
 8000774:	17db      	asrs	r3, r3, #31
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 800077a:	7f7a      	ldrb	r2, [r7, #29]
 800077c:	4613      	mov	r3, r2
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	4a43      	ldr	r2, [pc, #268]	@ (8000890 <fill_screen2+0x194>)
 8000784:	fb82 1203 	smull	r1, r2, r2, r3
 8000788:	441a      	add	r2, r3
 800078a:	1112      	asrs	r2, r2, #4
 800078c:	17db      	asrs	r3, r3, #31
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 8000792:	2201      	movs	r2, #1
 8000794:	2108      	movs	r1, #8
 8000796:	4840      	ldr	r0, [pc, #256]	@ (8000898 <fill_screen2+0x19c>)
 8000798:	f002 fe7e 	bl	8003498 <HAL_GPIO_WritePin>
	CS_A();
 800079c:	2200      	movs	r2, #0
 800079e:	2110      	movs	r1, #16
 80007a0:	483d      	ldr	r0, [pc, #244]	@ (8000898 <fill_screen2+0x19c>)
 80007a2:	f002 fe79 	bl	8003498 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80007a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007a8:	460b      	mov	r3, r1
 80007aa:	3b01      	subs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	2300      	movs	r3, #0
 80007b0:	4688      	mov	r8, r1
 80007b2:	4699      	mov	r9, r3
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007c8:	2300      	movs	r3, #0
 80007ca:	460c      	mov	r4, r1
 80007cc:	461d      	mov	r5, r3
 80007ce:	f04f 0200 	mov.w	r2, #0
 80007d2:	f04f 0300 	mov.w	r3, #0
 80007d6:	00eb      	lsls	r3, r5, #3
 80007d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007dc:	00e2      	lsls	r2, r4, #3
 80007de:	1dcb      	adds	r3, r1, #7
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	ebad 0d03 	sub.w	sp, sp, r3
 80007e8:	ab02      	add	r3, sp, #8
 80007ea:	3300      	adds	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007f2:	e011      	b.n	8000818 <fill_screen2+0x11c>
	{
		frame[j] = r;
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f8:	4413      	add	r3, r2
 80007fa:	7ffa      	ldrb	r2, [r7, #31]
 80007fc:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 80007fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000800:	3301      	adds	r3, #1
 8000802:	697a      	ldr	r2, [r7, #20]
 8000804:	7fb9      	ldrb	r1, [r7, #30]
 8000806:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8000808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800080a:	3302      	adds	r3, #2
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	7f79      	ldrb	r1, [r7, #29]
 8000810:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 8000812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000814:	3303      	adds	r3, #3
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081c:	429a      	cmp	r2, r3
 800081e:	d3e9      	bcc.n	80007f4 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 8000820:	6a3a      	ldr	r2, [r7, #32]
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <fill_screen2+0x1a0>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800083e:	e012      	b.n	8000866 <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 8000840:	bf00      	nop
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <fill_screen2+0x1a0>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0fa      	beq.n	8000842 <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 800084c:	4b13      	ldr	r3, [pc, #76]	@ (800089c <fill_screen2+0x1a0>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	6979      	ldr	r1, [r7, #20]
 800085a:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <fill_screen2+0x1a4>)
 800085c:	f004 fef6 	bl	800564c <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 8000860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000862:	3301      	adds	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	429a      	cmp	r2, r3
 800086c:	d3e8      	bcc.n	8000840 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 800086e:	bf00      	nop
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <fill_screen2+0x1a0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0fa      	beq.n	8000870 <fill_screen2+0x174>
	CS_D();
 800087a:	2201      	movs	r2, #1
 800087c:	2110      	movs	r1, #16
 800087e:	4806      	ldr	r0, [pc, #24]	@ (8000898 <fill_screen2+0x19c>)
 8000880:	f002 fe0a 	bl	8003498 <HAL_GPIO_WritePin>
 8000884:	46b5      	mov	sp, r6
}
 8000886:	bf00      	nop
 8000888:	3734      	adds	r7, #52	@ 0x34
 800088a:	46bd      	mov	sp, r7
 800088c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000890:	84210843 	.word	0x84210843
 8000894:	82082083 	.word	0x82082083
 8000898:	40020c00 	.word	0x40020c00
 800089c:	20000324 	.word	0x20000324
 80008a0:	2000017c 	.word	0x2000017c

080008a4 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	@ 0x24
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	4604      	mov	r4, r0
 80008ac:	4608      	mov	r0, r1
 80008ae:	4611      	mov	r1, r2
 80008b0:	461a      	mov	r2, r3
 80008b2:	4623      	mov	r3, r4
 80008b4:	80fb      	strh	r3, [r7, #6]
 80008b6:	4603      	mov	r3, r0
 80008b8:	80bb      	strh	r3, [r7, #4]
 80008ba:	460b      	mov	r3, r1
 80008bc:	70fb      	strb	r3, [r7, #3]
 80008be:	4613      	mov	r3, r2
 80008c0:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 80008c2:	4b3a      	ldr	r3, [pc, #232]	@ (80009ac <print_character+0x108>)
 80008c4:	889a      	ldrh	r2, [r3, #4]
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	4413      	add	r3, r2
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	3b01      	subs	r3, #1
 80008ce:	b29c      	uxth	r4, r3
 80008d0:	4b36      	ldr	r3, [pc, #216]	@ (80009ac <print_character+0x108>)
 80008d2:	88da      	ldrh	r2, [r3, #6]
 80008d4:	88bb      	ldrh	r3, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	b29b      	uxth	r3, r3
 80008da:	3b01      	subs	r3, #1
 80008dc:	b29b      	uxth	r3, r3
 80008de:	88b9      	ldrh	r1, [r7, #4]
 80008e0:	88f8      	ldrh	r0, [r7, #6]
 80008e2:	2277      	movs	r2, #119	@ 0x77
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	4622      	mov	r2, r4
 80008e8:	f000 fabe 	bl	8000e68 <set_adress_window>

	uint16_t mask = 0x8000;
 80008ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f0:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 80008f6:	f107 020c 	add.w	r2, r7, #12
 80008fa:	883b      	ldrh	r3, [r7, #0]
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fdda 	bl	80004b8 <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 8000904:	f107 0208 	add.w	r2, r7, #8
 8000908:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fdd3 	bl	80004b8 <convert_color_16_to_18>


	DC_DATA();
 8000912:	2201      	movs	r2, #1
 8000914:	2108      	movs	r1, #8
 8000916:	4826      	ldr	r0, [pc, #152]	@ (80009b0 <print_character+0x10c>)
 8000918:	f002 fdbe 	bl	8003498 <HAL_GPIO_WritePin>
	CS_A();
 800091c:	2200      	movs	r2, #0
 800091e:	2110      	movs	r1, #16
 8000920:	4823      	ldr	r0, [pc, #140]	@ (80009b0 <print_character+0x10c>)
 8000922:	f002 fdb9 	bl	8003498 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 8000926:	2300      	movs	r3, #0
 8000928:	75fb      	strb	r3, [r7, #23]
 800092a:	e030      	b.n	800098e <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 800092c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <print_character+0x108>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	3b20      	subs	r3, #32
 8000934:	491d      	ldr	r1, [pc, #116]	@ (80009ac <print_character+0x108>)
 8000936:	88c9      	ldrh	r1, [r1, #6]
 8000938:	fb03 f101 	mul.w	r1, r3, r1
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	440b      	add	r3, r1
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000948:	2300      	movs	r3, #0
 800094a:	75bb      	strb	r3, [r7, #22]
 800094c:	e016      	b.n	800097c <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 800094e:	8a7a      	ldrh	r2, [r7, #18]
 8000950:	7dbb      	ldrb	r3, [r7, #22]
 8000952:	409a      	lsls	r2, r3
 8000954:	8abb      	ldrh	r3, [r7, #20]
 8000956:	4013      	ands	r3, r2
 8000958:	2b00      	cmp	r3, #0
 800095a:	d006      	beq.n	800096a <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2103      	movs	r1, #3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f904 	bl	8000b70 <LCD_send_data_multi>
 8000968:	e005      	b.n	8000976 <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2103      	movs	r1, #3
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f8fd 	bl	8000b70 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 8000976:	7dbb      	ldrb	r3, [r7, #22]
 8000978:	3301      	adds	r3, #1
 800097a:	75bb      	strb	r3, [r7, #22]
 800097c:	7dbb      	ldrb	r3, [r7, #22]
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <print_character+0x108>)
 8000982:	889b      	ldrh	r3, [r3, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	d3e2      	bcc.n	800094e <print_character+0xaa>
	for(i=0; i<font.height; i++)
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	3301      	adds	r3, #1
 800098c:	75fb      	strb	r3, [r7, #23]
 800098e:	7dfb      	ldrb	r3, [r7, #23]
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <print_character+0x108>)
 8000994:	88db      	ldrh	r3, [r3, #6]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3c8      	bcc.n	800092c <print_character+0x88>
			}
		}
	}

	CS_D();
 800099a:	2201      	movs	r2, #1
 800099c:	2110      	movs	r1, #16
 800099e:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <print_character+0x10c>)
 80009a0:	f002 fd7a 	bl	8003498 <HAL_GPIO_WritePin>

}
 80009a4:	bf00      	nop
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd90      	pop	{r4, r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	40020c00 	.word	0x40020c00

080009b4 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b089      	sub	sp, #36	@ 0x24
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	60ba      	str	r2, [r7, #8]
 80009bc:	461a      	mov	r2, r3
 80009be:	4603      	mov	r3, r0
 80009c0:	81fb      	strh	r3, [r7, #14]
 80009c2:	460b      	mov	r3, r1
 80009c4:	81bb      	strh	r3, [r7, #12]
 80009c6:	4613      	mov	r3, r2
 80009c8:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 80009ce:	e027      	b.n	8000a20 <print_string+0x6c>
	{
		if(x + font.width > 320)
 80009d0:	89fb      	ldrh	r3, [r7, #14]
 80009d2:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <print_string+0x84>)
 80009d4:	8892      	ldrh	r2, [r2, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009dc:	dd07      	ble.n	80009ee <print_string+0x3a>
		{
			x = font.width;
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <print_string+0x84>)
 80009e0:	889b      	ldrh	r3, [r3, #4]
 80009e2:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <print_string+0x84>)
 80009e6:	88da      	ldrh	r2, [r3, #6]
 80009e8:	89bb      	ldrh	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 80009ee:	89bb      	ldrh	r3, [r7, #12]
 80009f0:	4a11      	ldr	r2, [pc, #68]	@ (8000a38 <print_string+0x84>)
 80009f2:	88d2      	ldrh	r2, [r2, #6]
 80009f4:	4413      	add	r3, r2
 80009f6:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80009fa:	dc18      	bgt.n	8000a2e <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000a02:	89b9      	ldrh	r1, [r7, #12]
 8000a04:	89f8      	ldrh	r0, [r7, #14]
 8000a06:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	4623      	mov	r3, r4
 8000a0c:	f7ff ff4a 	bl	80008a4 <print_character>
		string++;
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <print_string+0x84>)
 8000a18:	889a      	ldrh	r2, [r3, #4]
 8000a1a:	89fb      	ldrh	r3, [r7, #14]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	4413      	add	r3, r2
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d3d1      	bcc.n	80009d0 <print_string+0x1c>
 8000a2c:	e000      	b.n	8000a30 <print_string+0x7c>
			return;
 8000a2e:	bf00      	nop
	}

}
 8000a30:	371c      	adds	r7, #28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd90      	pop	{r4, r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000

08000a3c <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	4604      	mov	r4, r0
 8000a44:	4608      	mov	r0, r1
 8000a46:	4611      	mov	r1, r2
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4623      	mov	r3, r4
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80bb      	strh	r3, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	807b      	strh	r3, [r7, #2]
 8000a56:	4613      	mov	r3, r2
 8000a58:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	887b      	ldrh	r3, [r7, #2]
 8000a5e:	4413      	add	r3, r2
 8000a60:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	88b9      	ldrh	r1, [r7, #4]
 8000a6c:	88f8      	ldrh	r0, [r7, #6]
 8000a6e:	2477      	movs	r4, #119	@ 0x77
 8000a70:	9400      	str	r4, [sp, #0]
 8000a72:	f000 f9f9 	bl	8000e68 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000a76:	f107 0208 	add.w	r2, r7, #8
 8000a7a:	883b      	ldrh	r3, [r7, #0]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fd1a 	bl	80004b8 <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	81fb      	strh	r3, [r7, #14]
 8000a88:	e008      	b.n	8000a9c <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	2103      	movs	r1, #3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f86d 	bl	8000b70 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	81fb      	strh	r3, [r7, #14]
 8000a9c:	89fa      	ldrh	r2, [r7, #14]
 8000a9e:	8879      	ldrh	r1, [r7, #2]
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	1acb      	subs	r3, r1, r3
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf0      	blt.n	8000a8a <draw_horizontal_line+0x4e>
	}


}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}

08000ab2 <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000ab2:	b590      	push	{r4, r7, lr}
 8000ab4:	b087      	sub	sp, #28
 8000ab6:	af02      	add	r7, sp, #8
 8000ab8:	4604      	mov	r4, r0
 8000aba:	4608      	mov	r0, r1
 8000abc:	4611      	mov	r1, r2
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	80fb      	strh	r3, [r7, #6]
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	80bb      	strh	r3, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
 8000acc:	4613      	mov	r3, r2
 8000ace:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000ad0:	88ba      	ldrh	r2, [r7, #4]
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	88fa      	ldrh	r2, [r7, #6]
 8000ae0:	88b9      	ldrh	r1, [r7, #4]
 8000ae2:	88f8      	ldrh	r0, [r7, #6]
 8000ae4:	2477      	movs	r4, #119	@ 0x77
 8000ae6:	9400      	str	r4, [sp, #0]
 8000ae8:	f000 f9be 	bl	8000e68 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000aec:	f107 0208 	add.w	r2, r7, #8
 8000af0:	883b      	ldrh	r3, [r7, #0]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fcdf 	bl	80004b8 <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	81fb      	strh	r3, [r7, #14]
 8000afe:	e008      	b.n	8000b12 <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2103      	movs	r1, #3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f832 	bl	8000b70 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	81fb      	strh	r3, [r7, #14]
 8000b12:	89fa      	ldrh	r2, [r7, #14]
 8000b14:	8879      	ldrh	r1, [r7, #2]
 8000b16:	88bb      	ldrh	r3, [r7, #4]
 8000b18:	1acb      	subs	r3, r1, r3
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf0      	blt.n	8000b00 <draw_vertical_line+0x4e>
	}


}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}

08000b28 <LCD_send_command>:
#include "lcd.h"


void LCD_send_command(uint8_t cmd)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 8000b32:	2200      	movs	r2, #0
 8000b34:	2108      	movs	r1, #8
 8000b36:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <LCD_send_command+0x40>)
 8000b38:	f002 fcae 	bl	8003498 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2110      	movs	r1, #16
 8000b40:	4809      	ldr	r0, [pc, #36]	@ (8000b68 <LCD_send_command+0x40>)
 8000b42:	f002 fca9 	bl	8003498 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 8000b46:	1df9      	adds	r1, r7, #7
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <LCD_send_command+0x44>)
 8000b50:	f004 f975 	bl	8004e3e <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8000b54:	2201      	movs	r2, #1
 8000b56:	2110      	movs	r1, #16
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <LCD_send_command+0x40>)
 8000b5a:	f002 fc9d 	bl	8003498 <HAL_GPIO_WritePin>


}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	2000017c 	.word	0x2000017c

08000b70 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	 * Output: Void
	 */

	//flagDmaSpiTx = 1;

	unsigned int valMaxFrame = 1024; //numarul maxim de octeti pe frame
 8000b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7e:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b88:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b92:	6939      	ldr	r1, [r7, #16]
 8000b94:	fb01 f202 	mul.w	r2, r1, r2
 8000b98:	1a9b      	subs	r3, r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	481d      	ldr	r0, [pc, #116]	@ (8000c18 <LCD_send_data_multi+0xa8>)
 8000ba2:	f002 fc79 	bl	8003498 <HAL_GPIO_WritePin>
	CS_A();
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	481b      	ldr	r0, [pc, #108]	@ (8000c18 <LCD_send_data_multi+0xa8>)
 8000bac:	f002 fc74 	bl	8003498 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d817      	bhi.n	8000be8 <LCD_send_data_multi+0x78>
	{
		//flagDmaSpiTx = 0;
		//HAL_SPI_Transmit_DMA(&hspi1, data, size);
		HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	4816      	ldr	r0, [pc, #88]	@ (8000c1c <LCD_send_data_multi+0xac>)
 8000bc4:	f004 f93b 	bl	8004e3e <HAL_SPI_Transmit>
 8000bc8:	e01c      	b.n	8000c04 <LCD_send_data_multi+0x94>
		while(nrFrames != 0)
		{
			//while(flagDmaSpiTx == 0);
			//flagDmaSpiTx = 0;
			//HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
			HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <LCD_send_data_multi+0xac>)
 8000bd6:	f004 f932 	bl	8004e3e <HAL_SPI_Transmit>
			data = data+valMaxFrame;
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4413      	add	r3, r2
 8000be0:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1ed      	bne.n	8000bca <LCD_send_data_multi+0x5a>
		}

		if(remainder != 0)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d007      	beq.n	8000c04 <LCD_send_data_multi+0x94>
		{
			//while(flagDmaSpiTx == 0);
			//flagDmaSpiTx = 0;
			//HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
			HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <LCD_send_data_multi+0xac>)
 8000c00:	f004 f91d 	bl	8004e3e <HAL_SPI_Transmit>

		}
	}

	//while(flagDmaSpiTx == 0);
	CS_D();
 8000c04:	2201      	movs	r2, #1
 8000c06:	2110      	movs	r1, #16
 8000c08:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <LCD_send_data_multi+0xa8>)
 8000c0a:	f002 fc45 	bl	8003498 <HAL_GPIO_WritePin>

}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020c00 	.word	0x40020c00
 8000c1c:	2000017c 	.word	0x2000017c

08000c20 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LCD_send_data+0x40>)
 8000c30:	f002 fc32 	bl	8003498 <HAL_GPIO_WritePin>
	CS_A();
 8000c34:	2200      	movs	r2, #0
 8000c36:	2110      	movs	r1, #16
 8000c38:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <LCD_send_data+0x40>)
 8000c3a:	f002 fc2d 	bl	8003498 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8000c3e:	1df9      	adds	r1, r7, #7
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	2201      	movs	r2, #1
 8000c46:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <LCD_send_data+0x44>)
 8000c48:	f004 f8f9 	bl	8004e3e <HAL_SPI_Transmit>

	CS_D();
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2110      	movs	r1, #16
 8000c50:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <LCD_send_data+0x40>)
 8000c52:	f002 fc21 	bl	8003498 <HAL_GPIO_WritePin>

}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	2000017c 	.word	0x2000017c

08000c68 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2140      	movs	r1, #64	@ 0x40
 8000c70:	487c      	ldr	r0, [pc, #496]	@ (8000e64 <ILI9488_driver_init+0x1fc>)
 8000c72:	f002 fc11 	bl	8003498 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c76:	200a      	movs	r0, #10
 8000c78:	f001 fb54 	bl	8002324 <HAL_Delay>
	RST_D();
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2140      	movs	r1, #64	@ 0x40
 8000c80:	4878      	ldr	r0, [pc, #480]	@ (8000e64 <ILI9488_driver_init+0x1fc>)
 8000c82:	f002 fc09 	bl	8003498 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff ff4e 	bl	8000b28 <LCD_send_command>
	HAL_Delay(150);
 8000c8c:	2096      	movs	r0, #150	@ 0x96
 8000c8e:	f001 fb49 	bl	8002324 <HAL_Delay>
	LCD_send_command(ILI9488_SLPOUT); //scoatem sistemul din sleep
 8000c92:	2011      	movs	r0, #17
 8000c94:	f7ff ff48 	bl	8000b28 <LCD_send_command>
	HAL_Delay(255);
 8000c98:	20ff      	movs	r0, #255	@ 0xff
 8000c9a:	f001 fb43 	bl	8002324 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8000c9e:	20e0      	movs	r0, #224	@ 0xe0
 8000ca0:	f7ff ff42 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff ffbb 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0C);
 8000caa:	200c      	movs	r0, #12
 8000cac:	f7ff ffb8 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x05);
 8000cb0:	2005      	movs	r0, #5
 8000cb2:	f7ff ffb5 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x04);
 8000cb6:	2004      	movs	r0, #4
 8000cb8:	f7ff ffb2 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0F);
 8000cbc:	200f      	movs	r0, #15
 8000cbe:	f7ff ffaf 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000cc2:	2006      	movs	r0, #6
 8000cc4:	f7ff ffac 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x3A);
 8000cc8:	203a      	movs	r0, #58	@ 0x3a
 8000cca:	f7ff ffa9 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x56);
 8000cce:	2056      	movs	r0, #86	@ 0x56
 8000cd0:	f7ff ffa6 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x4D);
 8000cd4:	204d      	movs	r0, #77	@ 0x4d
 8000cd6:	f7ff ffa3 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x03);
 8000cda:	2003      	movs	r0, #3
 8000cdc:	f7ff ffa0 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0A);
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f7ff ff9d 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000ce6:	2006      	movs	r0, #6
 8000ce8:	f7ff ff9a 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x30);
 8000cec:	2030      	movs	r0, #48	@ 0x30
 8000cee:	f7ff ff97 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x3E);
 8000cf2:	203e      	movs	r0, #62	@ 0x3e
 8000cf4:	f7ff ff94 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0F);
 8000cf8:	200f      	movs	r0, #15
 8000cfa:	f7ff ff91 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 8000cfe:	20e1      	movs	r0, #225	@ 0xe1
 8000d00:	f7ff ff12 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff ff8b 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x13);
 8000d0a:	2013      	movs	r0, #19
 8000d0c:	f7ff ff88 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x18);
 8000d10:	2018      	movs	r0, #24
 8000d12:	f7ff ff85 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x01);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff ff82 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x11);
 8000d1c:	2011      	movs	r0, #17
 8000d1e:	f7ff ff7f 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000d22:	2006      	movs	r0, #6
 8000d24:	f7ff ff7c 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x38);
 8000d28:	2038      	movs	r0, #56	@ 0x38
 8000d2a:	f7ff ff79 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x34);
 8000d2e:	2034      	movs	r0, #52	@ 0x34
 8000d30:	f7ff ff76 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x4D);
 8000d34:	204d      	movs	r0, #77	@ 0x4d
 8000d36:	f7ff ff73 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000d3a:	2006      	movs	r0, #6
 8000d3c:	f7ff ff70 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0D);
 8000d40:	200d      	movs	r0, #13
 8000d42:	f7ff ff6d 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0B);
 8000d46:	200b      	movs	r0, #11
 8000d48:	f7ff ff6a 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x31);
 8000d4c:	2031      	movs	r0, #49	@ 0x31
 8000d4e:	f7ff ff67 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x37);
 8000d52:	2037      	movs	r0, #55	@ 0x37
 8000d54:	f7ff ff64 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0F);
 8000d58:	200f      	movs	r0, #15
 8000d5a:	f7ff ff61 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 8000d5e:	20c0      	movs	r0, #192	@ 0xc0
 8000d60:	f7ff fee2 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x18);
 8000d64:	2018      	movs	r0, #24
 8000d66:	f7ff ff5b 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x16);
 8000d6a:	2016      	movs	r0, #22
 8000d6c:	f7ff ff58 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 8000d70:	20c1      	movs	r0, #193	@ 0xc1
 8000d72:	f7ff fed9 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x45);
 8000d76:	2045      	movs	r0, #69	@ 0x45
 8000d78:	f7ff ff52 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8000d7c:	20c2      	movs	r0, #194	@ 0xc2
 8000d7e:	f7ff fed3 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x33);
 8000d82:	2033      	movs	r0, #51	@ 0x33
 8000d84:	f7ff ff4c 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 8000d88:	20c3      	movs	r0, #195	@ 0xc3
 8000d8a:	f7ff fecd 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x33);
 8000d8e:	2033      	movs	r0, #51	@ 0x33
 8000d90:	f7ff ff46 	bl	8000c20 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8000d94:	2036      	movs	r0, #54	@ 0x36
 8000d96:	f7ff fec7 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 8000d9a:	205c      	movs	r0, #92	@ 0x5c
 8000d9c:	f7ff ff40 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8000da0:	203a      	movs	r0, #58	@ 0x3a
 8000da2:	f7ff fec1 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 8000da6:	2006      	movs	r0, #6
 8000da8:	f7ff ff3a 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff febb 	bl	8000b28 <LCD_send_command>
	LCD_send_command(0x00);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff feb8 	bl	8000b28 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 8000db8:	20b0      	movs	r0, #176	@ 0xb0
 8000dba:	f7ff feb5 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff ff2e 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8000dc4:	20b1      	movs	r0, #177	@ 0xb1
 8000dc6:	f7ff feaf 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 8000dca:	20a0      	movs	r0, #160	@ 0xa0
 8000dcc:	f7ff ff28 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8000dd0:	2011      	movs	r0, #17
 8000dd2:	f7ff ff25 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8000dd6:	20b4      	movs	r0, #180	@ 0xb4
 8000dd8:	f7ff fea6 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f7ff ff1f 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8000de2:	20b5      	movs	r0, #181	@ 0xb5
 8000de4:	f7ff fea0 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x02);
 8000de8:	2002      	movs	r0, #2
 8000dea:	f7ff ff19 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x02);
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff ff16 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0A);
 8000df4:	200a      	movs	r0, #10
 8000df6:	f7ff ff13 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x04);
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f7ff ff10 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8000e00:	20b6      	movs	r0, #182	@ 0xb6
 8000e02:	f7ff fe91 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x02);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f7ff ff0a 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x02);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff ff07 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x3B);
 8000e12:	203b      	movs	r0, #59	@ 0x3b
 8000e14:	f7ff ff04 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8000e18:	20e9      	movs	r0, #233	@ 0xe9
 8000e1a:	f7ff fe85 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fefe 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8000e24:	20f7      	movs	r0, #247	@ 0xf7
 8000e26:	f7ff fe7f 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0xA9);
 8000e2a:	20a9      	movs	r0, #169	@ 0xa9
 8000e2c:	f7ff fef8 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x51);
 8000e30:	2051      	movs	r0, #81	@ 0x51
 8000e32:	f7ff fef5 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x2C);
 8000e36:	202c      	movs	r0, #44	@ 0x2c
 8000e38:	f7ff fef2 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x82);
 8000e3c:	2082      	movs	r0, #130	@ 0x82
 8000e3e:	f7ff feef 	bl	8000c20 <LCD_send_data>


	LCD_send_command(ILI9488_SLPOUT);
 8000e42:	2011      	movs	r0, #17
 8000e44:	f7ff fe70 	bl	8000b28 <LCD_send_command>
	HAL_Delay(255);
 8000e48:	20ff      	movs	r0, #255	@ 0xff
 8000e4a:	f001 fa6b 	bl	8002324 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 8000e4e:	2051      	movs	r0, #81	@ 0x51
 8000e50:	f7ff fe6a 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8000e54:	20ff      	movs	r0, #255	@ 0xff
 8000e56:	f7ff fee3 	bl	8000c20 <LCD_send_data>
	LCD_send_command(ILI9488_DISPON);
 8000e5a:	2029      	movs	r0, #41	@ 0x29
 8000e5c:	f7ff fe64 	bl	8000b28 <LCD_send_command>


}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40020c00 	.word	0x40020c00

08000e68 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4604      	mov	r4, r0
 8000e70:	4608      	mov	r0, r1
 8000e72:	4611      	mov	r1, r2
 8000e74:	461a      	mov	r2, r3
 8000e76:	4623      	mov	r3, r4
 8000e78:	80fb      	strh	r3, [r7, #6]
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80bb      	strh	r3, [r7, #4]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	807b      	strh	r3, [r7, #2]
 8000e82:	4613      	mov	r3, r2
 8000e84:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 8000e86:	202a      	movs	r0, #42	@ 0x2a
 8000e88:	f7ff fe4e 	bl	8000b28 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	733b      	strb	r3, [r7, #12]
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	73bb      	strb	r3, [r7, #14]
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fe5c 	bl	8000b70 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 8000eb8:	202b      	movs	r0, #43	@ 0x2b
 8000eba:	f7ff fe35 	bl	8000b28 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	733b      	strb	r3, [r7, #12]
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8000ece:	883b      	ldrh	r3, [r7, #0]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73bb      	strb	r3, [r7, #14]
 8000ed8:	883b      	ldrh	r3, [r7, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe43 	bl	8000b70 <LCD_send_data_multi>

	if(x == 'w')
 8000eea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eee:	2b77      	cmp	r3, #119	@ 0x77
 8000ef0:	d102      	bne.n	8000ef8 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8000ef2:	202c      	movs	r0, #44	@ 0x2c
 8000ef4:	f7ff fe18 	bl	8000b28 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8000ef8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000efc:	2b72      	cmp	r3, #114	@ 0x72
 8000efe:	d102      	bne.n	8000f06 <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8000f00:	202e      	movs	r0, #46	@ 0x2e
 8000f02:	f7ff fe11 	bl	8000b28 <LCD_send_command>
	}


}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}
	...

08000f10 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4604      	mov	r4, r0
 8000f18:	4608      	mov	r0, r1
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4623      	mov	r3, r4
 8000f20:	80fb      	strh	r3, [r7, #6]
 8000f22:	4603      	mov	r3, r0
 8000f24:	80bb      	strh	r3, [r7, #4]
 8000f26:	460b      	mov	r3, r1
 8000f28:	807b      	strh	r3, [r7, #2]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 8000f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800111c <read_pixel_frame+0x20c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b79      	ldr	r3, [pc, #484]	@ (800111c <read_pixel_frame+0x20c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f3c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 8000f3e:	4b77      	ldr	r3, [pc, #476]	@ (800111c <read_pixel_frame+0x20c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b75      	ldr	r3, [pc, #468]	@ (800111c <read_pixel_frame+0x20c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8000f4c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 8000f4e:	4b73      	ldr	r3, [pc, #460]	@ (800111c <read_pixel_frame+0x20c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b71      	ldr	r3, [pc, #452]	@ (800111c <read_pixel_frame+0x20c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0210 	orr.w	r2, r2, #16
 8000f5c:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8000f5e:	4b6f      	ldr	r3, [pc, #444]	@ (800111c <read_pixel_frame+0x20c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b6d      	ldr	r3, [pc, #436]	@ (800111c <read_pixel_frame+0x20c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f6c:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 8000f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8001120 <read_pixel_frame+0x210>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 8000f78:	887a      	ldrh	r2, [r7, #2]
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bfb8      	it	lt
 8000f82:	425b      	neglt	r3, r3
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	8839      	ldrh	r1, [r7, #0]
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	1acb      	subs	r3, r1, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bfb8      	it	lt
 8000f90:	425b      	neglt	r3, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	fb12 f303 	smulbb	r3, r2, r3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	0052      	lsls	r2, r2, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	753b      	strb	r3, [r7, #20]

    free(data);
 8000fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000fa8:	f009 fd52 	bl	800aa50 <free>
    data = malloc(byteNr);
 8000fac:	8afb      	ldrh	r3, [r7, #22]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f009 fd46 	bl	800aa40 <malloc>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	807b      	strh	r3, [r7, #2]
    y--;
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	743b      	strb	r3, [r7, #16]
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	747b      	strb	r3, [r7, #17]
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	74bb      	strb	r3, [r7, #18]
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8000fe4:	88bb      	ldrh	r3, [r7, #4]
 8000fe6:	0a1b      	lsrs	r3, r3, #8
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	733b      	strb	r3, [r7, #12]
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	737b      	strb	r3, [r7, #13]
 8000ff4:	883b      	ldrh	r3, [r7, #0]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73bb      	strb	r3, [r7, #14]
 8000ffe:	883b      	ldrh	r3, [r7, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8001004:	2200      	movs	r2, #0
 8001006:	2110      	movs	r1, #16
 8001008:	4846      	ldr	r0, [pc, #280]	@ (8001124 <read_pixel_frame+0x214>)
 800100a:	f002 fa45 	bl	8003498 <HAL_GPIO_WritePin>

    DC_COMMAND();
 800100e:	2200      	movs	r2, #0
 8001010:	2108      	movs	r1, #8
 8001012:	4844      	ldr	r0, [pc, #272]	@ (8001124 <read_pixel_frame+0x214>)
 8001014:	f002 fa40 	bl	8003498 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 8001018:	232a      	movs	r3, #42	@ 0x2a
 800101a:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 800101c:	f107 010b 	add.w	r1, r7, #11
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	2201      	movs	r2, #1
 8001026:	483d      	ldr	r0, [pc, #244]	@ (800111c <read_pixel_frame+0x20c>)
 8001028:	f003 ff09 	bl	8004e3e <HAL_SPI_Transmit>
    DC_DATA();
 800102c:	2201      	movs	r2, #1
 800102e:	2108      	movs	r1, #8
 8001030:	483c      	ldr	r0, [pc, #240]	@ (8001124 <read_pixel_frame+0x214>)
 8001032:	f002 fa31 	bl	8003498 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 8001036:	f107 0110 	add.w	r1, r7, #16
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	2204      	movs	r2, #4
 8001040:	4836      	ldr	r0, [pc, #216]	@ (800111c <read_pixel_frame+0x20c>)
 8001042:	f003 fefc 	bl	8004e3e <HAL_SPI_Transmit>

    DC_COMMAND();
 8001046:	2200      	movs	r2, #0
 8001048:	2108      	movs	r1, #8
 800104a:	4836      	ldr	r0, [pc, #216]	@ (8001124 <read_pixel_frame+0x214>)
 800104c:	f002 fa24 	bl	8003498 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 8001050:	232b      	movs	r3, #43	@ 0x2b
 8001052:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 8001054:	f107 010a 	add.w	r1, r7, #10
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	2201      	movs	r2, #1
 800105e:	482f      	ldr	r0, [pc, #188]	@ (800111c <read_pixel_frame+0x20c>)
 8001060:	f003 feed 	bl	8004e3e <HAL_SPI_Transmit>
    DC_DATA();
 8001064:	2201      	movs	r2, #1
 8001066:	2108      	movs	r1, #8
 8001068:	482e      	ldr	r0, [pc, #184]	@ (8001124 <read_pixel_frame+0x214>)
 800106a:	f002 fa15 	bl	8003498 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 800106e:	f107 010c 	add.w	r1, r7, #12
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	2204      	movs	r2, #4
 8001078:	4828      	ldr	r0, [pc, #160]	@ (800111c <read_pixel_frame+0x20c>)
 800107a:	f003 fee0 	bl	8004e3e <HAL_SPI_Transmit>

    DC_COMMAND();
 800107e:	2200      	movs	r2, #0
 8001080:	2108      	movs	r1, #8
 8001082:	4828      	ldr	r0, [pc, #160]	@ (8001124 <read_pixel_frame+0x214>)
 8001084:	f002 fa08 	bl	8003498 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 8001088:	232e      	movs	r3, #46	@ 0x2e
 800108a:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 800108c:	f107 0109 	add.w	r1, r7, #9
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	2201      	movs	r2, #1
 8001096:	4821      	ldr	r0, [pc, #132]	@ (800111c <read_pixel_frame+0x20c>)
 8001098:	f003 fed1 	bl	8004e3e <HAL_SPI_Transmit>
    DC_DATA();
 800109c:	2201      	movs	r2, #1
 800109e:	2108      	movs	r1, #8
 80010a0:	4820      	ldr	r0, [pc, #128]	@ (8001124 <read_pixel_frame+0x214>)
 80010a2:	f002 f9f9 	bl	8003498 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 80010a6:	f107 0114 	add.w	r1, r7, #20
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	2201      	movs	r2, #1
 80010b0:	481a      	ldr	r0, [pc, #104]	@ (800111c <read_pixel_frame+0x20c>)
 80010b2:	f004 f808 	bl	80050c6 <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 80010b6:	8afb      	ldrh	r3, [r7, #22]
 80010b8:	461a      	mov	r2, r3
 80010ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <read_pixel_frame+0x20c>)
 80010be:	f004 fb77 	bl	80057b0 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 80010c2:	bf00      	nop
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <read_pixel_frame+0x210>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0fa      	beq.n	80010c4 <read_pixel_frame+0x1b4>
    CS_D();
 80010ce:	2201      	movs	r2, #1
 80010d0:	2110      	movs	r1, #16
 80010d2:	4814      	ldr	r0, [pc, #80]	@ (8001124 <read_pixel_frame+0x214>)
 80010d4:	f002 f9e0 	bl	8003498 <HAL_GPIO_WritePin>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <read_pixel_frame+0x20c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <read_pixel_frame+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010e6:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <read_pixel_frame+0x20c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <read_pixel_frame+0x20c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80010f6:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <read_pixel_frame+0x20c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <read_pixel_frame+0x20c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <read_pixel_frame+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b04      	ldr	r3, [pc, #16]	@ (800111c <read_pixel_frame+0x20c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001112:	601a      	str	r2, [r3, #0]

}
 8001114:	bf00      	nop
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	2000017c 	.word	0x2000017c
 8001120:	20000325 	.word	0x20000325
 8001124:	40020c00 	.word	0x40020c00

08001128 <HAL_SPI_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	flagDmaSpiTx = 1;
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <HAL_SPI_TxCpltCallback+0x1c>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]

}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000324 	.word	0x20000324

08001148 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	flagDmaSpiRx = 1;
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <HAL_SPI_RxCpltCallback+0x1c>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]

}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000325 	.word	0x20000325

08001168 <get_sine>:
  uint32_t var;
  uint32_t sin_val[100];
  #define pi 3.1415926

  void get_sine()
  {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
      for (int i = 0; i < 100; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	e011      	b.n	8001198 <get_sine+0x30>
      {

          if (i < 50)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b31      	cmp	r3, #49	@ 0x31
 8001178:	dc06      	bgt.n	8001188 <get_sine+0x20>
              sin_val[i] = 4095;
 800117a:	4a0c      	ldr	r2, [pc, #48]	@ (80011ac <get_sine+0x44>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001182:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001186:	e004      	b.n	8001192 <get_sine+0x2a>
          else
              sin_val[i] = 0;
 8001188:	4a08      	ldr	r2, [pc, #32]	@ (80011ac <get_sine+0x44>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2100      	movs	r1, #0
 800118e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      for (int i = 0; i < 100; i++)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3301      	adds	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b63      	cmp	r3, #99	@ 0x63
 800119c:	ddea      	ble.n	8001174 <get_sine+0xc>
      }
  }
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000328 	.word	0x20000328

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ba:	f001 f841 	bl	8002240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011be:	f000 f9b5 	bl	800152c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c2:	f000 fb51 	bl	8001868 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c6:	f000 fb11 	bl	80017ec <MX_DMA_Init>
  MX_SPI1_Init();
 80011ca:	f000 fa63 	bl	8001694 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011ce:	f000 fae3 	bl	8001798 <MX_USART1_UART_Init>
  MX_DAC_Init();
 80011d2:	f000 fa15 	bl	8001600 <MX_DAC_Init>
  MX_TIM2_Init();
 80011d6:	f000 fa93 	bl	8001700 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 80011da:	f000 fa3b 	bl	8001654 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80011de:	f006 fee7 	bl	8007fb0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 80011e2:	f000 fba5 	bl	8001930 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 80011e6:	f7ff fd3f 	bl	8000c68 <ILI9488_driver_init>

  HAL_TIM_Base_Start(&htim2);
 80011ea:	48c8      	ldr	r0, [pc, #800]	@ (800150c <main+0x35c>)
 80011ec:	f004 ff9e 	bl	800612c <HAL_TIM_Base_Start>
  get_sine();
 80011f0:	f7ff ffba 	bl	8001168 <get_sine>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);
 80011f4:	2300      	movs	r3, #0
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2364      	movs	r3, #100	@ 0x64
 80011fa:	4ac5      	ldr	r2, [pc, #788]	@ (8001510 <main+0x360>)
 80011fc:	2100      	movs	r1, #0
 80011fe:	48c5      	ldr	r0, [pc, #788]	@ (8001514 <main+0x364>)
 8001200:	f001 f9e8 	bl	80025d4 <HAL_DAC_Start_DMA>


  fill_screen1(0xF100);
 8001204:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001208:	f7ff f9e2 	bl	80005d0 <fill_screen1>
  HAL_Delay(1000);
 800120c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001210:	f001 f888 	bl	8002324 <HAL_Delay>
  fill_screen2(0xF00F);
 8001214:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8001218:	f7ff fa70 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 800121c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001220:	f001 f880 	bl	8002324 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001224:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001228:	f7ff fa68 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 800122c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001230:	f001 f878 	bl	8002324 <HAL_Delay>
  fill_screen2(0x3F51);
 8001234:	f643 7051 	movw	r0, #16209	@ 0x3f51
 8001238:	f7ff fa60 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 800123c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001240:	f001 f870 	bl	8002324 <HAL_Delay>

  //Test_SD_Card();
  char *fileData = NULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800124a:	f102 0208 	add.w	r2, r2, #8
 800124e:	6013      	str	r3, [r2, #0]
  read_file("audio/text.txt", fileData);
 8001250:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001254:	f103 0308 	add.w	r3, r3, #8
 8001258:	6819      	ldr	r1, [r3, #0]
 800125a:	48af      	ldr	r0, [pc, #700]	@ (8001518 <main+0x368>)
 800125c:	f000 fb76 	bl	800194c <read_file>
  HAL_Delay(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001264:	f001 f85e 	bl	8002324 <HAL_Delay>

  uint16_t sampleData[2048];

  read_audio_file("audio/text.txt", sampleData);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	3b0c      	subs	r3, #12
 800126e:	4619      	mov	r1, r3
 8001270:	48a9      	ldr	r0, [pc, #676]	@ (8001518 <main+0x368>)
 8001272:	f000 fc01 	bl	8001a78 <read_audio_file>
  HAL_Delay(100);
 8001276:	2064      	movs	r0, #100	@ 0x64
 8001278:	f001 f854 	bl	8002324 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	3b0c      	subs	r3, #12
 8001282:	4619      	mov	r1, r3
 8001284:	48a4      	ldr	r0, [pc, #656]	@ (8001518 <main+0x368>)
 8001286:	f000 fbf7 	bl	8001a78 <read_audio_file>
  HAL_Delay(100);
 800128a:	2064      	movs	r0, #100	@ 0x64
 800128c:	f001 f84a 	bl	8002324 <HAL_Delay>

  for(uint8_t i=0;i<100;i++)
 8001290:	2300      	movs	r3, #0
 8001292:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001296:	f102 020f 	add.w	r2, r2, #15
 800129a:	7013      	strb	r3, [r2, #0]
 800129c:	e09c      	b.n	80013d8 <main+0x228>
  {
	  for(uint8_t j=0; j<100;j++)
 800129e:	2300      	movs	r3, #0
 80012a0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012a4:	f102 020e 	add.w	r2, r2, #14
 80012a8:	7013      	strb	r3, [r2, #0]
 80012aa:	e082      	b.n	80013b2 <main+0x202>
	  {

		  if(i==j)
 80012ac:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012b0:	f103 030f 	add.w	r3, r3, #15
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012ba:	f103 030e 	add.w	r3, r3, #14
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d111      	bne.n	80012e8 <main+0x138>
		  {
			  draw_pixel(i,j,0xF100);
 80012c4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012c8:	f103 030f 	add.w	r3, r3, #15
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012d4:	f102 020e 	add.w	r2, r2, #14
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	b291      	uxth	r1, r2
 80012dc:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f94b 	bl	800057c <draw_pixel>
			  continue;
 80012e6:	e059      	b.n	800139c <main+0x1ec>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 80012e8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012ec:	f103 030f 	add.w	r3, r3, #15
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b50      	cmp	r3, #80	@ 0x50
 80012f4:	d106      	bne.n	8001304 <main+0x154>
 80012f6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012fa:	f103 030e 	add.w	r3, r3, #14
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b14      	cmp	r3, #20
 8001302:	d029      	beq.n	8001358 <main+0x1a8>
 8001304:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001308:	f103 030f 	add.w	r3, r3, #15
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b50      	cmp	r3, #80	@ 0x50
 8001310:	d106      	bne.n	8001320 <main+0x170>
 8001312:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001316:	f103 030e 	add.w	r3, r3, #14
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b13      	cmp	r3, #19
 800131e:	d01b      	beq.n	8001358 <main+0x1a8>
 8001320:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001324:	f103 030f 	add.w	r3, r3, #15
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b51      	cmp	r3, #81	@ 0x51
 800132c:	d106      	bne.n	800133c <main+0x18c>
 800132e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001332:	f103 030e 	add.w	r3, r3, #14
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b14      	cmp	r3, #20
 800133a:	d00d      	beq.n	8001358 <main+0x1a8>
 800133c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001340:	f103 030f 	add.w	r3, r3, #15
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b51      	cmp	r3, #81	@ 0x51
 8001348:	d117      	bne.n	800137a <main+0x1ca>
 800134a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800134e:	f103 030e 	add.w	r3, r3, #14
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b13      	cmp	r3, #19
 8001356:	d110      	bne.n	800137a <main+0x1ca>
		  {
			  draw_pixel(i,j,0x001F);
 8001358:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800135c:	f103 030f 	add.w	r3, r3, #15
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001368:	f102 020e 	add.w	r2, r2, #14
 800136c:	7812      	ldrb	r2, [r2, #0]
 800136e:	b291      	uxth	r1, r2
 8001370:	221f      	movs	r2, #31
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f902 	bl	800057c <draw_pixel>
			  continue;
 8001378:	e010      	b.n	800139c <main+0x1ec>
		  }


		  draw_pixel(i,j,0xFFFF);
 800137a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800137e:	f103 030f 	add.w	r3, r3, #15
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b29b      	uxth	r3, r3
 8001386:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800138a:	f102 020e 	add.w	r2, r2, #14
 800138e:	7812      	ldrb	r2, [r2, #0]
 8001390:	b291      	uxth	r1, r2
 8001392:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8f0 	bl	800057c <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 800139c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80013a0:	f103 030e 	add.w	r3, r3, #14
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80013ac:	f102 020e 	add.w	r2, r2, #14
 80013b0:	7013      	strb	r3, [r2, #0]
 80013b2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80013b6:	f103 030e 	add.w	r3, r3, #14
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b63      	cmp	r3, #99	@ 0x63
 80013be:	f67f af75 	bls.w	80012ac <main+0xfc>
  for(uint8_t i=0;i<100;i++)
 80013c2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80013c6:	f103 030f 	add.w	r3, r3, #15
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80013d2:	f102 020f 	add.w	r2, r2, #15
 80013d6:	7013      	strb	r3, [r2, #0]
 80013d8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80013dc:	f103 030f 	add.w	r3, r3, #15
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b63      	cmp	r3, #99	@ 0x63
 80013e4:	f67f af5b 	bls.w	800129e <main+0xee>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 80013e8:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 80013ec:	f7ff f986 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 80013f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013f4:	f000 ff96 	bl	8002324 <HAL_Delay>
  fill_screen2(0xF150);
 80013f8:	f24f 1050 	movw	r0, #61776	@ 0xf150
 80013fc:	f7ff f97e 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001400:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001404:	f000 ff8e 	bl	8002324 <HAL_Delay>
  fill_screen2(0xF111);
 8001408:	f24f 1011 	movw	r0, #61713	@ 0xf111
 800140c:	f7ff f976 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001410:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001414:	f000 ff86 	bl	8002324 <HAL_Delay>
  fill_screen2(0xF10F);
 8001418:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 800141c:	f7ff f96e 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001420:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001424:	f000 ff7e 	bl	8002324 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001428:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800142c:	f7ff f966 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001430:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001434:	f000 ff76 	bl	8002324 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001438:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800143c:	f7ff f95e 	bl	80006fc <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 8001440:	231f      	movs	r3, #31
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	230c      	movs	r3, #12
 800144c:	4a33      	ldr	r2, [pc, #204]	@ (800151c <main+0x36c>)
 800144e:	21c8      	movs	r1, #200	@ 0xc8
 8001450:	2024      	movs	r0, #36	@ 0x24
 8001452:	f7ff faaf 	bl	80009b4 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	461a      	mov	r2, r3
 800145c:	4b30      	ldr	r3, [pc, #192]	@ (8001520 <main+0x370>)
 800145e:	f842 3c10 	str.w	r3, [r2, #-16]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	3b10      	subs	r3, #16
 8001468:	2204      	movs	r2, #4
 800146a:	4619      	mov	r1, r3
 800146c:	482d      	ldr	r0, [pc, #180]	@ (8001524 <main+0x374>)
 800146e:	f004 f8ed 	bl	800564c <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 8001472:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001476:	2250      	movs	r2, #80	@ 0x50
 8001478:	2114      	movs	r1, #20
 800147a:	2014      	movs	r0, #20
 800147c:	f7ff fade 	bl	8000a3c <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 8001480:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001484:	2250      	movs	r2, #80	@ 0x50
 8001486:	2114      	movs	r1, #20
 8001488:	2014      	movs	r0, #20
 800148a:	f7ff fb12 	bl	8000ab2 <draw_vertical_line>

  flagDmaSpiTx = 0;
 800148e:	4b26      	ldr	r3, [pc, #152]	@ (8001528 <main+0x378>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 8001494:	221f      	movs	r2, #31
 8001496:	2100      	movs	r1, #0
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff f86f 	bl	800057c <draw_pixel>
  draw_pixel(1,0,0xF800);
 800149e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80014a2:	2100      	movs	r1, #0
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff f869 	bl	800057c <draw_pixel>
  draw_pixel(0,1,0x001F);
 80014aa:	221f      	movs	r2, #31
 80014ac:	2101      	movs	r1, #1
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff f864 	bl	800057c <draw_pixel>
  draw_pixel(1,1,0xF800);
 80014b4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80014b8:	2101      	movs	r1, #1
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff f85e 	bl	800057c <draw_pixel>

  HAL_Delay(50);
 80014c0:	2032      	movs	r0, #50	@ 0x32
 80014c2:	f000 ff2f 	bl	8002324 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 80014c6:	2001      	movs	r0, #1
 80014c8:	f009 faba 	bl	800aa40 <malloc>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80014d2:	f102 0204 	add.w	r2, r2, #4
 80014d6:	6013      	str	r3, [r2, #0]
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 80014d8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80014dc:	f103 0304 	add.w	r3, r3, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2302      	movs	r3, #2
 80014e6:	2202      	movs	r2, #2
 80014e8:	2100      	movs	r1, #0
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff fd10 	bl	8000f10 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 80014f0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80014f4:	f103 0304 	add.w	r3, r3, #4
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	f009 faa9 	bl	800aa50 <free>

  HAL_Delay(3000);
 80014fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001502:	f000 ff0f 	bl	8002324 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001506:	bf00      	nop
 8001508:	e7fd      	b.n	8001506 <main+0x356>
 800150a:	bf00      	nop
 800150c:	20000294 	.word	0x20000294
 8001510:	20000328 	.word	0x20000328
 8001514:	20000084 	.word	0x20000084
 8001518:	0800ae90 	.word	0x0800ae90
 800151c:	0800aea0 	.word	0x0800aea0
 8001520:	04030201 	.word	0x04030201
 8001524:	2000017c 	.word	0x2000017c
 8001528:	20000324 	.word	0x20000324

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	@ 0x50
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2230      	movs	r2, #48	@ 0x30
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f009 fbf8 	bl	800ad30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <SystemClock_Config+0xcc>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	4a27      	ldr	r2, [pc, #156]	@ (80015f8 <SystemClock_Config+0xcc>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <SystemClock_Config+0xcc>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <SystemClock_Config+0xd0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <SystemClock_Config+0xd0>)
 8001576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <SystemClock_Config+0xd0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001588:	2301      	movs	r3, #1
 800158a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001592:	2302      	movs	r3, #2
 8001594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001596:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800159a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800159c:	2304      	movs	r3, #4
 800159e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015a0:	23a8      	movs	r3, #168	@ 0xa8
 80015a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015a8:	2307      	movs	r3, #7
 80015aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 ff8b 	bl	80034cc <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015bc:	f000 f9b2 	bl	8001924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2105      	movs	r1, #5
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 f9ec 	bl	80039bc <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015ea:	f000 f99b 	bl	8001924 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	3750      	adds	r7, #80	@ 0x50
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001606:	463b      	mov	r3, r7
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800160e:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <MX_DAC_Init+0x4c>)
 8001610:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <MX_DAC_Init+0x50>)
 8001612:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001614:	480d      	ldr	r0, [pc, #52]	@ (800164c <MX_DAC_Init+0x4c>)
 8001616:	f000 ffba 	bl	800258e <HAL_DAC_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001620:	f000 f980 	bl	8001924 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001624:	2324      	movs	r3, #36	@ 0x24
 8001626:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	2200      	movs	r2, #0
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	@ (800164c <MX_DAC_Init+0x4c>)
 8001634:	f001 f8ae 	bl	8002794 <HAL_DAC_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800163e:	f000 f971 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000084 	.word	0x20000084
 8001650:	40007400 	.word	0x40007400

08001654 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_SDIO_SD_Init+0x38>)
 800165a:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <MX_SDIO_SD_Init+0x3c>)
 800165c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800165e:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <MX_SDIO_SD_Init+0x38>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_SDIO_SD_Init+0x38>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <MX_SDIO_SD_Init+0x38>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_SDIO_SD_Init+0x38>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001676:	4b05      	ldr	r3, [pc, #20]	@ (800168c <MX_SDIO_SD_Init+0x38>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <MX_SDIO_SD_Init+0x38>)
 800167e:	2208      	movs	r2, #8
 8001680:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	200000f8 	.word	0x200000f8
 8001690:	40012c00 	.word	0x40012c00

08001694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001698:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <MX_SPI1_Init+0x64>)
 800169a:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <MX_SPI1_Init+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b2:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016be:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016e0:	220a      	movs	r2, #10
 80016e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <MX_SPI1_Init+0x64>)
 80016e6:	f003 fb21 	bl	8004d2c <HAL_SPI_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016f0:	f000 f918 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000017c 	.word	0x2000017c
 80016fc:	40013000 	.word	0x40013000

08001700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	463b      	mov	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <MX_TIM2_Init+0x94>)
 800171e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001722:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <MX_TIM2_Init+0x94>)
 8001726:	2253      	movs	r2, #83	@ 0x53
 8001728:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <MX_TIM2_Init+0x94>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8001730:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <MX_TIM2_Init+0x94>)
 8001732:	2209      	movs	r2, #9
 8001734:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <MX_TIM2_Init+0x94>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173c:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <MX_TIM2_Init+0x94>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001742:	4814      	ldr	r0, [pc, #80]	@ (8001794 <MX_TIM2_Init+0x94>)
 8001744:	f004 fca2 	bl	800608c <HAL_TIM_Base_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800174e:	f000 f8e9 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001752:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	4619      	mov	r1, r3
 800175e:	480d      	ldr	r0, [pc, #52]	@ (8001794 <MX_TIM2_Init+0x94>)
 8001760:	f004 fd4c 	bl	80061fc <HAL_TIM_ConfigClockSource>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800176a:	f000 f8db 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800176e:	2320      	movs	r3, #32
 8001770:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001776:	463b      	mov	r3, r7
 8001778:	4619      	mov	r1, r3
 800177a:	4806      	ldr	r0, [pc, #24]	@ (8001794 <MX_TIM2_Init+0x94>)
 800177c:	f004 ff4c 	bl	8006618 <HAL_TIMEx_MasterConfigSynchronization>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001786:	f000 f8cd 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000294 	.word	0x20000294

08001798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800179c:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 800179e:	4a12      	ldr	r2, [pc, #72]	@ (80017e8 <MX_USART1_UART_Init+0x50>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017d0:	f004 ff9e 	bl	8006710 <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017da:	f000 f8a3 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002dc 	.word	0x200002dc
 80017e8:	40011000 	.word	0x40011000

080017ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <MX_DMA_Init+0x78>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001864 <MX_DMA_Init+0x78>)
 80017fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <MX_DMA_Init+0x78>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <MX_DMA_Init+0x78>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a13      	ldr	r2, [pc, #76]	@ (8001864 <MX_DMA_Init+0x78>)
 8001818:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <MX_DMA_Init+0x78>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2010      	movs	r0, #16
 8001830:	f000 fe77 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001834:	2010      	movs	r0, #16
 8001836:	f000 fe90 	bl	800255a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2038      	movs	r0, #56	@ 0x38
 8001840:	f000 fe6f 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001844:	2038      	movs	r0, #56	@ 0x38
 8001846:	f000 fe88 	bl	800255a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	203b      	movs	r0, #59	@ 0x3b
 8001850:	f000 fe67 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001854:	203b      	movs	r0, #59	@ 0x3b
 8001856:	f000 fe80 	bl	800255a <HAL_NVIC_EnableIRQ>

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b26      	ldr	r3, [pc, #152]	@ (800191c <MX_GPIO_Init+0xb4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a25      	ldr	r2, [pc, #148]	@ (800191c <MX_GPIO_Init+0xb4>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b23      	ldr	r3, [pc, #140]	@ (800191c <MX_GPIO_Init+0xb4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <MX_GPIO_Init+0xb4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a1e      	ldr	r2, [pc, #120]	@ (800191c <MX_GPIO_Init+0xb4>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_GPIO_Init+0xb4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <MX_GPIO_Init+0xb4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a17      	ldr	r2, [pc, #92]	@ (800191c <MX_GPIO_Init+0xb4>)
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <MX_GPIO_Init+0xb4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_GPIO_Init+0xb4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a10      	ldr	r2, [pc, #64]	@ (800191c <MX_GPIO_Init+0xb4>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <MX_GPIO_Init+0xb4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2158      	movs	r1, #88	@ 0x58
 80018f2:	480b      	ldr	r0, [pc, #44]	@ (8001920 <MX_GPIO_Init+0xb8>)
 80018f4:	f001 fdd0 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 80018f8:	2358      	movs	r3, #88	@ 0x58
 80018fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	4804      	ldr	r0, [pc, #16]	@ (8001920 <MX_GPIO_Init+0xb8>)
 8001910:	f001 fc26 	bl	8003160 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001914:	bf00      	nop
 8001916:	3728      	adds	r7, #40	@ 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40020c00 	.word	0x40020c00

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <Error_Handler+0x8>

08001930 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	/*
	 * Functie pentru initializarea cardului SD. Se va monta
	 * sistemul de fisiere prin variabila fs declarata static
	 */

	f_mount(&fs, "", 1);
 8001934:	2201      	movs	r2, #1
 8001936:	4903      	ldr	r1, [pc, #12]	@ (8001944 <init_cardSD+0x14>)
 8001938:	4803      	ldr	r0, [pc, #12]	@ (8001948 <init_cardSD+0x18>)
 800193a:	f008 f9f3 	bl	8009d24 <f_mount>

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	0800aeb0 	.word	0x0800aeb0
 8001948:	200004b8 	.word	0x200004b8

0800194c <read_file>:



void read_file(char *filePathName, char*fileData)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8001952:	af00      	add	r7, sp, #0
 8001954:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001958:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800195c:	6018      	str	r0, [r3, #0]
 800195e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001962:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001966:	6019      	str	r1, [r3, #0]

	FRESULT res;  //stocarea starii cardului SD (util pentru depanare)
	FIL file;  //stocarea informatiilor despre fisierul deschis
	UINT byteRead;  //contor pentru numarul total de octeti cititi efectivi

	fileData = (char*)malloc(128*sizeof(char));
 8001968:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800196c:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 8001970:	2080      	movs	r0, #128	@ 0x80
 8001972:	f009 f865 	bl	800aa40 <malloc>
 8001976:	4603      	mov	r3, r0
 8001978:	6023      	str	r3, [r4, #0]

	res = f_open(&file, filePathName, FA_READ);
 800197a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800197e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001982:	f107 000c 	add.w	r0, r7, #12
 8001986:	2201      	movs	r2, #1
 8001988:	6819      	ldr	r1, [r3, #0]
 800198a:	f008 fa11 	bl	8009db0 <f_open>
 800198e:	4603      	mov	r3, r0
 8001990:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

	if(res != FR_OK)
 8001994:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001998:	2b00      	cmp	r3, #0
 800199a:	d131      	bne.n	8001a00 <read_file+0xb4>
	{
		return;
	}

	f_read(&file, fileData, (sizeof(fileData)*128)-1, &byteRead);
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 80019a4:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 80019a8:	f107 000c 	add.w	r0, r7, #12
 80019ac:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80019b0:	6809      	ldr	r1, [r1, #0]
 80019b2:	f008 fbb7 	bl	800a124 <f_read>
	fileData[byteRead] = '\0';
 80019b6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80019ba:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 80019c4:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]

	fileData = (char*)realloc(fileData, byteRead);
 80019d0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80019d4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80019de:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 80019e2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80019e6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80019ea:	4611      	mov	r1, r2
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	f009 f8e5 	bl	800abbc <realloc>
 80019f2:	6020      	str	r0, [r4, #0]

	f_close(&file);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4618      	mov	r0, r3
 80019fa:	f008 fd50 	bl	800a49e <f_close>
 80019fe:	e000      	b.n	8001a02 <read_file+0xb6>
		return;
 8001a00:	bf00      	nop


}
 8001a02:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}

08001a0a <return_int_value_first_line>:


unsigned int return_int_value_first_line(char *filePathName, FIL *file)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b08a      	sub	sp, #40	@ 0x28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]

	int nrLines = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]

	UINT byteRead;

	char buffer[12];
	uint8_t index = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	while(index < sizeof(buffer))
 8001a1e:	e01c      	b.n	8001a5a <return_int_value_first_line+0x50>
	{
		char c;

		f_read(file, &c, 1, &byteRead);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	f107 010f 	add.w	r1, r7, #15
 8001a28:	2201      	movs	r2, #1
 8001a2a:	6838      	ldr	r0, [r7, #0]
 8001a2c:	f008 fb7a 	bl	800a124 <f_read>

		if(c == '\n')
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	2b0a      	cmp	r3, #10
 8001a34:	d107      	bne.n	8001a46 <return_int_value_first_line+0x3c>
		{
			nrLines = (unsigned int)atoi(buffer);
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f008 fffb 	bl	800aa36 <atoi>
 8001a40:	6238      	str	r0, [r7, #32]
			return nrLines;
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	e014      	b.n	8001a70 <return_int_value_first_line+0x66>
		}

		buffer[index++] = c;
 8001a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	3328      	adds	r3, #40	@ 0x28
 8001a54:	443b      	add	r3, r7
 8001a56:	f803 2c18 	strb.w	r2, [r3, #-24]
	while(index < sizeof(buffer))
 8001a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a5e:	2b0b      	cmp	r3, #11
 8001a60:	d9de      	bls.n	8001a20 <return_int_value_first_line+0x16>

	}

	nrLines = (unsigned int)atoi(buffer);
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	4618      	mov	r0, r3
 8001a68:	f008 ffe5 	bl	800aa36 <atoi>
 8001a6c:	6238      	str	r0, [r7, #32]

	return nrLines;
 8001a6e:	6a3b      	ldr	r3, [r7, #32]


}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3728      	adds	r7, #40	@ 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <read_audio_file>:



void read_audio_file(char *filePathName, uint16_t *buffer)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001a84:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001a88:	6018      	str	r0, [r3, #0]
 8001a8a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001a8e:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8001a92:	6019      	str	r1, [r3, #0]

	FRESULT res;
	FIL file;
	//UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8001a94:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001a98:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001a9c:	f107 0018 	add.w	r0, r7, #24
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	f008 f984 	bl	8009db0 <f_open>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f887 324c 	strb.w	r3, [r7, #588]	@ 0x24c

	if(res != FR_OK)
 8001aae:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 80b6 	bne.w	8001c24 <read_audio_file+0x1ac>

	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;
	static unsigned int nrLines = 0;

	f_lseek (&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8001ab8:	4b5d      	ldr	r3, [pc, #372]	@ (8001c30 <read_audio_file+0x1b8>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	f107 0318 	add.w	r3, r7, #24
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f008 fd15 	bl	800a4f2 <f_lseek>


	if(flagNewAudioFile == 1)
 8001ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c34 <read_audio_file+0x1bc>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d015      	beq.n	8001afc <read_audio_file+0x84>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		 */

		flagNewAudioFile = 0;
 8001ad0:	4b58      	ldr	r3, [pc, #352]	@ (8001c34 <read_audio_file+0x1bc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8001ad6:	4b58      	ldr	r3, [pc, #352]	@ (8001c38 <read_audio_file+0x1c0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	801a      	strh	r2, [r3, #0]
		currentPosition = 0;
 8001adc:	4b54      	ldr	r3, [pc, #336]	@ (8001c30 <read_audio_file+0x1b8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
		nrLines = return_int_value_first_line(filePathName, &file);
 8001ae2:	f107 0218 	add.w	r2, r7, #24
 8001ae6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001aea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001aee:	4611      	mov	r1, r2
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	f7ff ff8a 	bl	8001a0a <return_int_value_first_line>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4a50      	ldr	r2, [pc, #320]	@ (8001c3c <read_audio_file+0x1c4>)
 8001afa:	6013      	str	r3, [r2, #0]
	}

	uint16_t n = 2048;
 8001afc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b00:	f8a7 324e 	strh.w	r3, [r7, #590]	@ 0x24e
	int nrFrames = nrLines / n;
 8001b04:	4b4d      	ldr	r3, [pc, #308]	@ (8001c3c <read_audio_file+0x1c4>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	f8b7 324e 	ldrh.w	r3, [r7, #590]	@ 0x24e
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
	uint8_t reminder = nrLines % n;
 8001b14:	4b49      	ldr	r3, [pc, #292]	@ (8001c3c <read_audio_file+0x1c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8b7 224e 	ldrh.w	r2, [r7, #590]	@ 0x24e
 8001b1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b20:	fb01 f202 	mul.w	r2, r1, r2
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	f887 324d 	strb.w	r3, [r7, #589]	@ 0x24d

	char tempBuffer[10];

	if(currentFrame == nrFrames)
 8001b2a:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <read_audio_file+0x1c0>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d156      	bne.n	8001be6 <read_audio_file+0x16e>
	{
		if(reminder != 0)
 8001b38:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d029      	beq.n	8001b94 <read_audio_file+0x11c>
		{
			while(reminder)
 8001b40:	e024      	b.n	8001b8c <read_audio_file+0x114>
			{
				f_gets(tempBuffer,sizeof(tempBuffer),&file);
 8001b42:	f107 0218 	add.w	r2, r7, #24
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	210a      	movs	r1, #10
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f008 fed9 	bl	800a904 <f_gets>

				(*buffer) = (uint16_t)atoi(tempBuffer);
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4618      	mov	r0, r3
 8001b58:	f008 ff6d 	bl	800aa36 <atoi>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001b64:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	801a      	strh	r2, [r3, #0]
				buffer++;
 8001b6c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001b70:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8001b74:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8001b78:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	3202      	adds	r2, #2
 8001b80:	601a      	str	r2, [r3, #0]

				reminder--;
 8001b82:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f887 324d 	strb.w	r3, [r7, #589]	@ 0x24d
			while(reminder)
 8001b8c:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1d6      	bne.n	8001b42 <read_audio_file+0xca>

			}
		}


		flagNewAudioFile = 1;
 8001b94:	4b27      	ldr	r3, [pc, #156]	@ (8001c34 <read_audio_file+0x1bc>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]

	}

	while(n!=0)
 8001b9a:	e024      	b.n	8001be6 <read_audio_file+0x16e>
		/*
		 * Ne vom popula bufferul cu valorile esantioanelor
		 * audio ale melodiei alese.
		 */

		f_gets(tempBuffer,sizeof(tempBuffer),&file);
 8001b9c:	f107 0218 	add.w	r2, r7, #24
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	210a      	movs	r1, #10
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f008 feac 	bl	800a904 <f_gets>

		(*buffer) = (uint16_t)atoi(tempBuffer);
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f008 ff40 	bl	800aa36 <atoi>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001bbe:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	801a      	strh	r2, [r3, #0]
		buffer++;
 8001bc6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001bca:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8001bce:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8001bd2:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	3202      	adds	r2, #2
 8001bda:	601a      	str	r2, [r3, #0]

		n--;
 8001bdc:	f8b7 324e 	ldrh.w	r3, [r7, #590]	@ 0x24e
 8001be0:	3b01      	subs	r3, #1
 8001be2:	f8a7 324e 	strh.w	r3, [r7, #590]	@ 0x24e
	while(n!=0)
 8001be6:	f8b7 324e 	ldrh.w	r3, [r7, #590]	@ 0x24e
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1d6      	bne.n	8001b9c <read_audio_file+0x124>

	}

	currentFrame++;
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <read_audio_file+0x1c0>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <read_audio_file+0x1c0>)
 8001bf8:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 8001bfa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001bfe:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <read_audio_file+0x1b8>)
 8001c06:	6013      	str	r3, [r2, #0]
	f_lseek (&file, currentPosition);
 8001c08:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <read_audio_file+0x1b8>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f107 0318 	add.w	r3, r7, #24
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f008 fc6d 	bl	800a4f2 <f_lseek>


	f_close(&file);
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f008 fc3e 	bl	800a49e <f_close>
 8001c22:	e000      	b.n	8001c26 <read_audio_file+0x1ae>
		return;
 8001c24:	bf00      	nop


}
 8001c26:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200006e8 	.word	0x200006e8
 8001c34:	20000008 	.word	0x20000008
 8001c38:	200006ec 	.word	0x200006ec
 8001c3c:	200006f0 	.word	0x200006f0

08001c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c8c <HAL_MspInit+0x4c>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <HAL_MspInit+0x4c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	4a08      	ldr	r2, [pc, #32]	@ (8001c8c <HAL_MspInit+0x4c>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800

08001c90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a2f      	ldr	r2, [pc, #188]	@ (8001d6c <HAL_DAC_MspInit+0xdc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d158      	bne.n	8001d64 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d70 <HAL_DAC_MspInit+0xe0>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a2d      	ldr	r2, [pc, #180]	@ (8001d70 <HAL_DAC_MspInit+0xe0>)
 8001cbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d70 <HAL_DAC_MspInit+0xe0>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b27      	ldr	r3, [pc, #156]	@ (8001d70 <HAL_DAC_MspInit+0xe0>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	4a26      	ldr	r2, [pc, #152]	@ (8001d70 <HAL_DAC_MspInit+0xe0>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cde:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <HAL_DAC_MspInit+0xe0>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cea:	2310      	movs	r3, #16
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481d      	ldr	r0, [pc, #116]	@ (8001d74 <HAL_DAC_MspInit+0xe4>)
 8001cfe:	f001 fa2f 	bl	8003160 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001d02:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d04:	4a1d      	ldr	r2, [pc, #116]	@ (8001d7c <HAL_DAC_MspInit+0xec>)
 8001d06:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d0a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001d0e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d10:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d12:	2240      	movs	r2, #64	@ 0x40
 8001d14:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d16:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d22:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d2a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d2c:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d32:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001d34:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d3a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d42:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001d48:	480b      	ldr	r0, [pc, #44]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d4a:	f000 fe07 	bl	800295c <HAL_DMA_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001d54:	f7ff fde6 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	4a06      	ldr	r2, [pc, #24]	@ (8001d78 <HAL_DAC_MspInit+0xe8>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	@ 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40007400 	.word	0x40007400
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	20000098 	.word	0x20000098
 8001d7c:	40026088 	.word	0x40026088

08001d80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a31      	ldr	r2, [pc, #196]	@ (8001e64 <HAL_SD_MspInit+0xe4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d15b      	bne.n	8001e5a <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b30      	ldr	r3, [pc, #192]	@ (8001e68 <HAL_SD_MspInit+0xe8>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a2f      	ldr	r2, [pc, #188]	@ (8001e68 <HAL_SD_MspInit+0xe8>)
 8001dac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e68 <HAL_SD_MspInit+0xe8>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <HAL_SD_MspInit+0xe8>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a28      	ldr	r2, [pc, #160]	@ (8001e68 <HAL_SD_MspInit+0xe8>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b26      	ldr	r3, [pc, #152]	@ (8001e68 <HAL_SD_MspInit+0xe8>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <HAL_SD_MspInit+0xe8>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a21      	ldr	r2, [pc, #132]	@ (8001e68 <HAL_SD_MspInit+0xe8>)
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <HAL_SD_MspInit+0xe8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001df6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e08:	230c      	movs	r3, #12
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4816      	ldr	r0, [pc, #88]	@ (8001e6c <HAL_SD_MspInit+0xec>)
 8001e14:	f001 f9a4 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	480d      	ldr	r0, [pc, #52]	@ (8001e6c <HAL_SD_MspInit+0xec>)
 8001e36:	f001 f993 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e42:	2301      	movs	r3, #1
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	4806      	ldr	r0, [pc, #24]	@ (8001e70 <HAL_SD_MspInit+0xf0>)
 8001e56:	f001 f983 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	@ 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40012c00 	.word	0x40012c00
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020c00 	.word	0x40020c00

08001e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	@ 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a47      	ldr	r2, [pc, #284]	@ (8001fb0 <HAL_SPI_MspInit+0x13c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	f040 8088 	bne.w	8001fa8 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	4b45      	ldr	r3, [pc, #276]	@ (8001fb4 <HAL_SPI_MspInit+0x140>)
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea0:	4a44      	ldr	r2, [pc, #272]	@ (8001fb4 <HAL_SPI_MspInit+0x140>)
 8001ea2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ea6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea8:	4b42      	ldr	r3, [pc, #264]	@ (8001fb4 <HAL_SPI_MspInit+0x140>)
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <HAL_SPI_MspInit+0x140>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebc:	4a3d      	ldr	r2, [pc, #244]	@ (8001fb4 <HAL_SPI_MspInit+0x140>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb4 <HAL_SPI_MspInit+0x140>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ed0:	23e0      	movs	r3, #224	@ 0xe0
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ee0:	2305      	movs	r3, #5
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4833      	ldr	r0, [pc, #204]	@ (8001fb8 <HAL_SPI_MspInit+0x144>)
 8001eec:	f001 f938 	bl	8003160 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001ef0:	4b32      	ldr	r3, [pc, #200]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001ef2:	4a33      	ldr	r2, [pc, #204]	@ (8001fc0 <HAL_SPI_MspInit+0x14c>)
 8001ef4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001ef6:	4b31      	ldr	r3, [pc, #196]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001ef8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001efc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001efe:	4b2f      	ldr	r3, [pc, #188]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001f00:	2240      	movs	r2, #64	@ 0x40
 8001f02:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f04:	4b2d      	ldr	r3, [pc, #180]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001f0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f10:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f12:	4b2a      	ldr	r3, [pc, #168]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f18:	4b28      	ldr	r3, [pc, #160]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001f1e:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f24:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2a:	4b24      	ldr	r3, [pc, #144]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001f30:	4822      	ldr	r0, [pc, #136]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001f32:	f000 fd13 	bl	800295c <HAL_DMA_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001f3c:	f7ff fcf2 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a1e      	ldr	r2, [pc, #120]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001f44:	649a      	str	r2, [r3, #72]	@ 0x48
 8001f46:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <HAL_SPI_MspInit+0x148>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc8 <HAL_SPI_MspInit+0x154>)
 8001f50:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001f54:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001f58:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f60:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f66:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001f68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f6c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f80:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f86:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001f8c:	480d      	ldr	r0, [pc, #52]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001f8e:	f000 fce5 	bl	800295c <HAL_DMA_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001f98:	f7ff fcc4 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a09      	ldr	r2, [pc, #36]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001fa0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001fa2:	4a08      	ldr	r2, [pc, #32]	@ (8001fc4 <HAL_SPI_MspInit+0x150>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	@ 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40013000 	.word	0x40013000
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	200001d4 	.word	0x200001d4
 8001fc0:	40026458 	.word	0x40026458
 8001fc4:	20000234 	.word	0x20000234
 8001fc8:	40026410 	.word	0x40026410

08001fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fdc:	d10d      	bne.n	8001ffa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_TIM_Base_MspInit+0x3c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4a08      	ldr	r2, [pc, #32]	@ (8002008 <HAL_TIM_Base_MspInit+0x3c>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_TIM_Base_MspInit+0x3c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	@ 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1d      	ldr	r2, [pc, #116]	@ (80020a0 <HAL_UART_MspInit+0x94>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d134      	bne.n	8002098 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b1c      	ldr	r3, [pc, #112]	@ (80020a4 <HAL_UART_MspInit+0x98>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	4a1b      	ldr	r2, [pc, #108]	@ (80020a4 <HAL_UART_MspInit+0x98>)
 8002038:	f043 0310 	orr.w	r3, r3, #16
 800203c:	6453      	str	r3, [r2, #68]	@ 0x44
 800203e:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_UART_MspInit+0x98>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <HAL_UART_MspInit+0x98>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a14      	ldr	r2, [pc, #80]	@ (80020a4 <HAL_UART_MspInit+0x98>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_UART_MspInit+0x98>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002066:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002078:	2307      	movs	r3, #7
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4809      	ldr	r0, [pc, #36]	@ (80020a8 <HAL_UART_MspInit+0x9c>)
 8002084:	f001 f86c 	bl	8003160 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2025      	movs	r0, #37	@ 0x25
 800208e:	f000 fa48 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002092:	2025      	movs	r0, #37	@ 0x25
 8002094:	f000 fa61 	bl	800255a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	@ 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40011000 	.word	0x40011000
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020000 	.word	0x40020000

080020ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <NMI_Handler+0x4>

080020b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <HardFault_Handler+0x4>

080020bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <MemManage_Handler+0x4>

080020c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <BusFault_Handler+0x4>

080020cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <UsageFault_Handler+0x4>

080020d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002102:	f000 f8ef 	bl	80022e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002110:	4802      	ldr	r0, [pc, #8]	@ (800211c <DMA1_Stream5_IRQHandler+0x10>)
 8002112:	f000 fdbb 	bl	8002c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000098 	.word	0x20000098

08002120 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002124:	4802      	ldr	r0, [pc, #8]	@ (8002130 <USART1_IRQHandler+0x10>)
 8002126:	f004 fb43 	bl	80067b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200002dc 	.word	0x200002dc

08002134 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002138:	4802      	ldr	r0, [pc, #8]	@ (8002144 <DMA2_Stream0_IRQHandler+0x10>)
 800213a:	f000 fda7 	bl	8002c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000234 	.word	0x20000234

08002148 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800214c:	4802      	ldr	r0, [pc, #8]	@ (8002158 <DMA2_Stream3_IRQHandler+0x10>)
 800214e:	f000 fd9d 	bl	8002c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200001d4 	.word	0x200001d4

0800215c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002164:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <_sbrk+0x5c>)
 8002166:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <_sbrk+0x60>)
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002170:	4b13      	ldr	r3, [pc, #76]	@ (80021c0 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <_sbrk+0x64>)
 800217a:	4a12      	ldr	r2, [pc, #72]	@ (80021c4 <_sbrk+0x68>)
 800217c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217e:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <_sbrk+0x64>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	429a      	cmp	r2, r3
 800218a:	d207      	bcs.n	800219c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800218c:	f008 fde8 	bl	800ad60 <__errno>
 8002190:	4603      	mov	r3, r0
 8002192:	220c      	movs	r2, #12
 8002194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	e009      	b.n	80021b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800219c:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a2:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	4a05      	ldr	r2, [pc, #20]	@ (80021c0 <_sbrk+0x64>)
 80021ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ae:	68fb      	ldr	r3, [r7, #12]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20020000 	.word	0x20020000
 80021bc:	00000400 	.word	0x00000400
 80021c0:	200006f4 	.word	0x200006f4
 80021c4:	20000880 	.word	0x20000880

080021c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <SystemInit+0x20>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d2:	4a05      	ldr	r2, [pc, #20]	@ (80021e8 <SystemInit+0x20>)
 80021d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002224 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021f0:	f7ff ffea 	bl	80021c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f4:	480c      	ldr	r0, [pc, #48]	@ (8002228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021f6:	490d      	ldr	r1, [pc, #52]	@ (800222c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021fc:	e002      	b.n	8002204 <LoopCopyDataInit>

080021fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002202:	3304      	adds	r3, #4

08002204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002208:	d3f9      	bcc.n	80021fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800220c:	4c0a      	ldr	r4, [pc, #40]	@ (8002238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002210:	e001      	b.n	8002216 <LoopFillZerobss>

08002212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002214:	3204      	adds	r2, #4

08002216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002218:	d3fb      	bcc.n	8002212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800221a:	f008 fda7 	bl	800ad6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221e:	f7fe ffc7 	bl	80011b0 <main>
  bx  lr    
 8002222:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800222c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002230:	0800be1c 	.word	0x0800be1c
  ldr r2, =_sbss
 8002234:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002238:	20000880 	.word	0x20000880

0800223c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800223c:	e7fe      	b.n	800223c <ADC_IRQHandler>
	...

08002240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002244:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0d      	ldr	r2, [pc, #52]	@ (8002280 <HAL_Init+0x40>)
 800224a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800224e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002250:	4b0b      	ldr	r3, [pc, #44]	@ (8002280 <HAL_Init+0x40>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <HAL_Init+0x40>)
 8002256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800225a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800225c:	4b08      	ldr	r3, [pc, #32]	@ (8002280 <HAL_Init+0x40>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a07      	ldr	r2, [pc, #28]	@ (8002280 <HAL_Init+0x40>)
 8002262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002268:	2003      	movs	r0, #3
 800226a:	f000 f94f 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226e:	200f      	movs	r0, #15
 8002270:	f000 f808 	bl	8002284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002274:	f7ff fce4 	bl	8001c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023c00 	.word	0x40023c00

08002284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800228c:	4b12      	ldr	r3, [pc, #72]	@ (80022d8 <HAL_InitTick+0x54>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_InitTick+0x58>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f967 	bl	8002576 <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00e      	b.n	80022d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d80a      	bhi.n	80022ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f000 f92f 	bl	8002522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c4:	4a06      	ldr	r2, [pc, #24]	@ (80022e0 <HAL_InitTick+0x5c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000000c 	.word	0x2000000c
 80022dc:	20000014 	.word	0x20000014
 80022e0:	20000010 	.word	0x20000010

080022e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e8:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_IncTick+0x20>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_IncTick+0x24>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <HAL_IncTick+0x24>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000014 	.word	0x20000014
 8002308:	200006f8 	.word	0x200006f8

0800230c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return uwTick;
 8002310:	4b03      	ldr	r3, [pc, #12]	@ (8002320 <HAL_GetTick+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	200006f8 	.word	0x200006f8

08002324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff ffee 	bl	800230c <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d005      	beq.n	800234a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233e:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <HAL_Delay+0x44>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800234a:	bf00      	nop
 800234c:	f7ff ffde 	bl	800230c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f7      	bhi.n	800234c <HAL_Delay+0x28>
  {
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000014 	.word	0x20000014

0800236c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002394:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	@ (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b8:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <__NVIC_GetPriorityGrouping+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 0307 	and.w	r3, r3, #7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db0b      	blt.n	80023fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4907      	ldr	r1, [pc, #28]	@ (8002408 <__NVIC_EnableIRQ+0x38>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000e100 	.word	0xe000e100

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	@ (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	@ (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	@ 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	@ 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff8e 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff29 	bl	800236c <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff3e 	bl	80023b4 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff8e 	bl	8002460 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5d 	bl	800240c <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff31 	bl	80023d0 <__NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffa2 	bl	80024c8 <SysTick_Config>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e014      	b.n	80025ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	791b      	ldrb	r3, [r3, #4]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff fb6d 	bl	8001c90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0a2      	b.n	8002736 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	795b      	ldrb	r3, [r3, #5]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_DAC_Start_DMA+0x28>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e09c      	b.n	8002736 <HAL_DAC_Start_DMA+0x162>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2202      	movs	r2, #2
 8002606:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d129      	bne.n	8002662 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4a4b      	ldr	r2, [pc, #300]	@ (8002740 <HAL_DAC_Start_DMA+0x16c>)
 8002614:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	4a4a      	ldr	r2, [pc, #296]	@ (8002744 <HAL_DAC_Start_DMA+0x170>)
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	4a49      	ldr	r2, [pc, #292]	@ (8002748 <HAL_DAC_Start_DMA+0x174>)
 8002624:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002634:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_DAC_Start_DMA+0x70>
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	2b04      	cmp	r3, #4
 8002640:	d005      	beq.n	800264e <HAL_DAC_Start_DMA+0x7a>
 8002642:	e009      	b.n	8002658 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3308      	adds	r3, #8
 800264a:	613b      	str	r3, [r7, #16]
        break;
 800264c:	e033      	b.n	80026b6 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	330c      	adds	r3, #12
 8002654:	613b      	str	r3, [r7, #16]
        break;
 8002656:	e02e      	b.n	80026b6 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3310      	adds	r3, #16
 800265e:	613b      	str	r3, [r7, #16]
        break;
 8002660:	e029      	b.n	80026b6 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4a39      	ldr	r2, [pc, #228]	@ (800274c <HAL_DAC_Start_DMA+0x178>)
 8002668:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	4a38      	ldr	r2, [pc, #224]	@ (8002750 <HAL_DAC_Start_DMA+0x17c>)
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	4a37      	ldr	r2, [pc, #220]	@ (8002754 <HAL_DAC_Start_DMA+0x180>)
 8002678:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002688:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_DAC_Start_DMA+0xc4>
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	2b04      	cmp	r3, #4
 8002694:	d005      	beq.n	80026a2 <HAL_DAC_Start_DMA+0xce>
 8002696:	e009      	b.n	80026ac <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3314      	adds	r3, #20
 800269e:	613b      	str	r3, [r7, #16]
        break;
 80026a0:	e009      	b.n	80026b6 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3318      	adds	r3, #24
 80026a8:	613b      	str	r3, [r7, #16]
        break;
 80026aa:	e004      	b.n	80026b6 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	331c      	adds	r3, #28
 80026b2:	613b      	str	r3, [r7, #16]
        break;
 80026b4:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d111      	bne.n	80026e0 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6898      	ldr	r0, [r3, #8]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	f000 f9ef 	bl	8002ab8 <HAL_DMA_Start_IT>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]
 80026de:	e010      	b.n	8002702 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80026ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	68d8      	ldr	r0, [r3, #12]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	f000 f9dd 	bl	8002ab8 <HAL_DMA_Start_IT>
 80026fe:	4603      	mov	r3, r0
 8002700:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10c      	bne.n	8002728 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6819      	ldr	r1, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2201      	movs	r2, #1
 800271c:	409a      	lsls	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e005      	b.n	8002734 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f043 0204 	orr.w	r2, r3, #4
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002734:	7dfb      	ldrb	r3, [r7, #23]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	08002847 	.word	0x08002847
 8002744:	08002869 	.word	0x08002869
 8002748:	08002885 	.word	0x08002885
 800274c:	080028ef 	.word	0x080028ef
 8002750:	08002911 	.word	0x08002911
 8002754:	0800292d 	.word	0x0800292d

08002758 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_DAC_ConfigChannel+0x1c>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e042      	b.n	800283a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	795b      	ldrb	r3, [r3, #5]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_DAC_ConfigChannel+0x2c>
 80027bc:	2302      	movs	r3, #2
 80027be:	e03c      	b.n	800283a <HAL_DAC_ConfigChannel+0xa6>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2202      	movs	r2, #2
 80027ca:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6819      	ldr	r1, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	22c0      	movs	r2, #192	@ 0xc0
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	400a      	ands	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002838:	7ffb      	ldrb	r3, [r7, #31]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002852:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff ff7f 	bl	8002758 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	711a      	strb	r2, [r3, #4]
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002874:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff ff78 	bl	800276c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002890:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f043 0204 	orr.w	r2, r3, #4
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff ff6e 	bl	8002780 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	711a      	strb	r2, [r3, #4]
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff ffd8 	bl	80028b2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	711a      	strb	r2, [r3, #4]
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff ffd1 	bl	80028c6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002938:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f043 0204 	orr.w	r2, r3, #4
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff ffc7 	bl	80028da <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	711a      	strb	r2, [r3, #4]
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff fcd0 	bl	800230c <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e099      	b.n	8002aac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002998:	e00f      	b.n	80029ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800299a:	f7ff fcb7 	bl	800230c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d908      	bls.n	80029ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2203      	movs	r2, #3
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e078      	b.n	8002aac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e8      	bne.n	800299a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4b38      	ldr	r3, [pc, #224]	@ (8002ab4 <HAL_DMA_Init+0x158>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0307 	bic.w	r3, r3, #7
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d117      	bne.n	8002a7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fb01 	bl	8003068 <DMA_CheckFifoParam>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2240      	movs	r2, #64	@ 0x40
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e016      	b.n	8002aac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fab8 	bl	8002ffc <DMA_CalcBaseAndBitshift>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a94:	223f      	movs	r2, #63	@ 0x3f
 8002a96:	409a      	lsls	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	f010803f 	.word	0xf010803f

08002ab8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ace:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_DMA_Start_IT+0x26>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e040      	b.n	8002b60 <HAL_DMA_Start_IT+0xa8>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d12f      	bne.n	8002b52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fa4a 	bl	8002fa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	223f      	movs	r2, #63	@ 0x3f
 8002b12:	409a      	lsls	r2, r3
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0216 	orr.w	r2, r2, #22
 8002b26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0208 	orr.w	r2, r2, #8
 8002b3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e005      	b.n	8002b5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b76:	f7ff fbc9 	bl	800230c <HAL_GetTick>
 8002b7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d008      	beq.n	8002b9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	@ 0x80
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e052      	b.n	8002c40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0216 	bic.w	r2, r2, #22
 8002ba8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <HAL_DMA_Abort+0x62>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0208 	bic.w	r2, r2, #8
 8002bd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bea:	e013      	b.n	8002c14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bec:	f7ff fb8e 	bl	800230c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d90c      	bls.n	8002c14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2203      	movs	r2, #3
 8002c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e015      	b.n	8002c40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e4      	bne.n	8002bec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c26:	223f      	movs	r2, #63	@ 0x3f
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d004      	beq.n	8002c66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2280      	movs	r2, #128	@ 0x80
 8002c60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00c      	b.n	8002c80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2205      	movs	r2, #5
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c98:	4b8e      	ldr	r3, [pc, #568]	@ (8002ed4 <HAL_DMA_IRQHandler+0x248>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a8e      	ldr	r2, [pc, #568]	@ (8002ed8 <HAL_DMA_IRQHandler+0x24c>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	0a9b      	lsrs	r3, r3, #10
 8002ca4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002caa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0204 	bic.w	r2, r2, #4
 8002cde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d012      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d26:	f043 0202 	orr.w	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	2204      	movs	r2, #4
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d012      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	2204      	movs	r2, #4
 8002d52:	409a      	lsls	r2, r3
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d68:	2210      	movs	r2, #16
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d043      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d03c      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	2210      	movs	r2, #16
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d018      	beq.n	8002dce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d108      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d024      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
 8002dba:	e01f      	b.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
 8002dcc:	e016      	b.n	8002dfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0208 	bic.w	r2, r2, #8
 8002dea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e00:	2220      	movs	r2, #32
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 808f 	beq.w	8002f2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8087 	beq.w	8002f2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	2220      	movs	r2, #32
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d136      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0216 	bic.w	r2, r2, #22
 8002e44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <HAL_DMA_IRQHandler+0x1da>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0208 	bic.w	r2, r2, #8
 8002e74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	223f      	movs	r2, #63	@ 0x3f
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d07e      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
        }
        return;
 8002ea2:	e079      	b.n	8002f98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d031      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
 8002ed0:	e02c      	b.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
 8002ed2:	bf00      	nop
 8002ed4:	2000000c 	.word	0x2000000c
 8002ed8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d023      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
 8002eec:	e01e      	b.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10f      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0210 	bic.w	r2, r2, #16
 8002f0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d032      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d022      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2205      	movs	r2, #5
 8002f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d307      	bcc.n	8002f74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f2      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x2cc>
 8002f72:	e000      	b.n	8002f76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
 8002f96:	e000      	b.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f98:	bf00      	nop
    }
  }
}
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b40      	cmp	r3, #64	@ 0x40
 8002fcc:	d108      	bne.n	8002fe0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fde:	e007      	b.n	8002ff0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	60da      	str	r2, [r3, #12]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3b10      	subs	r3, #16
 800300c:	4a14      	ldr	r2, [pc, #80]	@ (8003060 <DMA_CalcBaseAndBitshift+0x64>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003016:	4a13      	ldr	r2, [pc, #76]	@ (8003064 <DMA_CalcBaseAndBitshift+0x68>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d909      	bls.n	800303e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	1d1a      	adds	r2, r3, #4
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	659a      	str	r2, [r3, #88]	@ 0x58
 800303c:	e007      	b.n	800304e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	aaaaaaab 	.word	0xaaaaaaab
 8003064:	0800bc6c 	.word	0x0800bc6c

08003068 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11f      	bne.n	80030c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d856      	bhi.n	8003136 <DMA_CheckFifoParam+0xce>
 8003088:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <DMA_CheckFifoParam+0x28>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030b3 	.word	0x080030b3
 8003098:	080030a1 	.word	0x080030a1
 800309c:	08003137 	.word	0x08003137
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d046      	beq.n	800313a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e043      	b.n	800313a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030ba:	d140      	bne.n	800313e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c0:	e03d      	b.n	800313e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ca:	d121      	bne.n	8003110 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d837      	bhi.n	8003142 <DMA_CheckFifoParam+0xda>
 80030d2:	a201      	add	r2, pc, #4	@ (adr r2, 80030d8 <DMA_CheckFifoParam+0x70>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030ef 	.word	0x080030ef
 80030e0:	080030e9 	.word	0x080030e9
 80030e4:	08003101 	.word	0x08003101
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e030      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d025      	beq.n	8003146 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fe:	e022      	b.n	8003146 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003108:	d11f      	bne.n	800314a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800310e:	e01c      	b.n	800314a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d903      	bls.n	800311e <DMA_CheckFifoParam+0xb6>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d003      	beq.n	8003124 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800311c:	e018      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
      break;
 8003122:	e015      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00e      	beq.n	800314e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e00b      	b.n	800314e <DMA_CheckFifoParam+0xe6>
      break;
 8003136:	bf00      	nop
 8003138:	e00a      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800313a:	bf00      	nop
 800313c:	e008      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
 8003140:	e006      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 8003142:	bf00      	nop
 8003144:	e004      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;   
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800314e:	bf00      	nop
    }
  } 
  
  return status; 
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	@ 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e16b      	b.n	8003454 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800317c:	2201      	movs	r2, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	429a      	cmp	r2, r3
 8003196:	f040 815a 	bne.w	800344e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d005      	beq.n	80031b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d130      	bne.n	8003214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b03      	cmp	r3, #3
 800321e:	d017      	beq.n	8003250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d123      	bne.n	80032a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0203 	and.w	r2, r3, #3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80b4 	beq.w	800344e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b60      	ldr	r3, [pc, #384]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	4a5f      	ldr	r2, [pc, #380]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032f6:	4b5d      	ldr	r3, [pc, #372]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003302:	4a5b      	ldr	r2, [pc, #364]	@ (8003470 <HAL_GPIO_Init+0x310>)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a52      	ldr	r2, [pc, #328]	@ (8003474 <HAL_GPIO_Init+0x314>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02b      	beq.n	8003386 <HAL_GPIO_Init+0x226>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a51      	ldr	r2, [pc, #324]	@ (8003478 <HAL_GPIO_Init+0x318>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d025      	beq.n	8003382 <HAL_GPIO_Init+0x222>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a50      	ldr	r2, [pc, #320]	@ (800347c <HAL_GPIO_Init+0x31c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <HAL_GPIO_Init+0x21e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4f      	ldr	r2, [pc, #316]	@ (8003480 <HAL_GPIO_Init+0x320>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d019      	beq.n	800337a <HAL_GPIO_Init+0x21a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4e      	ldr	r2, [pc, #312]	@ (8003484 <HAL_GPIO_Init+0x324>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_GPIO_Init+0x216>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4d      	ldr	r2, [pc, #308]	@ (8003488 <HAL_GPIO_Init+0x328>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00d      	beq.n	8003372 <HAL_GPIO_Init+0x212>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4c      	ldr	r2, [pc, #304]	@ (800348c <HAL_GPIO_Init+0x32c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <HAL_GPIO_Init+0x20e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4b      	ldr	r2, [pc, #300]	@ (8003490 <HAL_GPIO_Init+0x330>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_GPIO_Init+0x20a>
 8003366:	2307      	movs	r3, #7
 8003368:	e00e      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800336a:	2308      	movs	r3, #8
 800336c:	e00c      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800336e:	2306      	movs	r3, #6
 8003370:	e00a      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003372:	2305      	movs	r3, #5
 8003374:	e008      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003376:	2304      	movs	r3, #4
 8003378:	e006      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800337a:	2303      	movs	r3, #3
 800337c:	e004      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800337e:	2302      	movs	r3, #2
 8003380:	e002      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003386:	2300      	movs	r3, #0
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f002 0203 	and.w	r2, r2, #3
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	4093      	lsls	r3, r2
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003398:	4935      	ldr	r1, [pc, #212]	@ (8003470 <HAL_GPIO_Init+0x310>)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ca:	4a32      	ldr	r2, [pc, #200]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d0:	4b30      	ldr	r3, [pc, #192]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f4:	4a27      	ldr	r2, [pc, #156]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033fa:	4b26      	ldr	r3, [pc, #152]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800341e:	4a1d      	ldr	r2, [pc, #116]	@ (8003494 <HAL_GPIO_Init+0x334>)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003424:	4b1b      	ldr	r3, [pc, #108]	@ (8003494 <HAL_GPIO_Init+0x334>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003448:	4a12      	ldr	r2, [pc, #72]	@ (8003494 <HAL_GPIO_Init+0x334>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	f67f ae90 	bls.w	800317c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3724      	adds	r7, #36	@ 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40013800 	.word	0x40013800
 8003474:	40020000 	.word	0x40020000
 8003478:	40020400 	.word	0x40020400
 800347c:	40020800 	.word	0x40020800
 8003480:	40020c00 	.word	0x40020c00
 8003484:	40021000 	.word	0x40021000
 8003488:	40021400 	.word	0x40021400
 800348c:	40021800 	.word	0x40021800
 8003490:	40021c00 	.word	0x40021c00
 8003494:	40013c00 	.word	0x40013c00

08003498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a8:	787b      	ldrb	r3, [r7, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034b4:	e003      	b.n	80034be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	041a      	lsls	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	619a      	str	r2, [r3, #24]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e267      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d075      	beq.n	80035d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034ea:	4b88      	ldr	r3, [pc, #544]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d00c      	beq.n	8003510 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f6:	4b85      	ldr	r3, [pc, #532]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d112      	bne.n	8003528 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003502:	4b82      	ldr	r3, [pc, #520]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800350a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800350e:	d10b      	bne.n	8003528 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	4b7e      	ldr	r3, [pc, #504]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d05b      	beq.n	80035d4 <HAL_RCC_OscConfig+0x108>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d157      	bne.n	80035d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e242      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003530:	d106      	bne.n	8003540 <HAL_RCC_OscConfig+0x74>
 8003532:	4b76      	ldr	r3, [pc, #472]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a75      	ldr	r2, [pc, #468]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e01d      	b.n	800357c <HAL_RCC_OscConfig+0xb0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x98>
 800354a:	4b70      	ldr	r3, [pc, #448]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a6f      	ldr	r2, [pc, #444]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4b6d      	ldr	r3, [pc, #436]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6c      	ldr	r2, [pc, #432]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0xb0>
 8003564:	4b69      	ldr	r3, [pc, #420]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a68      	ldr	r2, [pc, #416]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800356a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b66      	ldr	r3, [pc, #408]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a65      	ldr	r2, [pc, #404]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800357a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d013      	beq.n	80035ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe fec2 	bl	800230c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800358c:	f7fe febe 	bl	800230c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	@ 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e207      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	4b5b      	ldr	r3, [pc, #364]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0xc0>
 80035aa:	e014      	b.n	80035d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fe feae 	bl	800230c <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe feaa 	bl	800230c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	@ 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e1f3      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c6:	4b51      	ldr	r3, [pc, #324]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0xe8>
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d063      	beq.n	80036aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035e2:	4b4a      	ldr	r3, [pc, #296]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b47      	ldr	r3, [pc, #284]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d11c      	bne.n	8003634 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fa:	4b44      	ldr	r3, [pc, #272]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d116      	bne.n	8003634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	4b41      	ldr	r3, [pc, #260]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_RCC_OscConfig+0x152>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e1c7      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b3b      	ldr	r3, [pc, #236]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4937      	ldr	r1, [pc, #220]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	e03a      	b.n	80036aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800363c:	4b34      	ldr	r3, [pc, #208]	@ (8003710 <HAL_RCC_OscConfig+0x244>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003642:	f7fe fe63 	bl	800230c <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364a:	f7fe fe5f 	bl	800230c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e1a8      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365c:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	4b28      	ldr	r3, [pc, #160]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4925      	ldr	r1, [pc, #148]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
 800367c:	e015      	b.n	80036aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367e:	4b24      	ldr	r3, [pc, #144]	@ (8003710 <HAL_RCC_OscConfig+0x244>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe fe42 	bl	800230c <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368c:	f7fe fe3e 	bl	800230c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e187      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	4b1b      	ldr	r3, [pc, #108]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d036      	beq.n	8003724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <HAL_RCC_OscConfig+0x248>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe fe22 	bl	800230c <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7fe fe1e 	bl	800230c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e167      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80036e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x200>
 80036ea:	e01b      	b.n	8003724 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCC_OscConfig+0x248>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7fe fe0b 	bl	800230c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f8:	e00e      	b.n	8003718 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fa:	f7fe fe07 	bl	800230c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d907      	bls.n	8003718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e150      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
 800370c:	40023800 	.word	0x40023800
 8003710:	42470000 	.word	0x42470000
 8003714:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	4b88      	ldr	r3, [pc, #544]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800371a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ea      	bne.n	80036fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8097 	beq.w	8003860 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003736:	4b81      	ldr	r3, [pc, #516]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10f      	bne.n	8003762 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b7d      	ldr	r3, [pc, #500]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	4a7c      	ldr	r2, [pc, #496]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	@ 0x40
 8003752:	4b7a      	ldr	r3, [pc, #488]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003762:	4b77      	ldr	r3, [pc, #476]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d118      	bne.n	80037a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376e:	4b74      	ldr	r3, [pc, #464]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a73      	ldr	r2, [pc, #460]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377a:	f7fe fdc7 	bl	800230c <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003782:	f7fe fdc3 	bl	800230c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e10c      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	4b6a      	ldr	r3, [pc, #424]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_OscConfig+0x2ea>
 80037a8:	4b64      	ldr	r3, [pc, #400]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ac:	4a63      	ldr	r2, [pc, #396]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b4:	e01c      	b.n	80037f0 <HAL_RCC_OscConfig+0x324>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x30c>
 80037be:	4b5f      	ldr	r3, [pc, #380]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	4a5e      	ldr	r2, [pc, #376]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 0304 	orr.w	r3, r3, #4
 80037c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ca:	4b5c      	ldr	r3, [pc, #368]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ce:	4a5b      	ldr	r2, [pc, #364]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d6:	e00b      	b.n	80037f0 <HAL_RCC_OscConfig+0x324>
 80037d8:	4b58      	ldr	r3, [pc, #352]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a57      	ldr	r2, [pc, #348]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e4:	4b55      	ldr	r3, [pc, #340]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e8:	4a54      	ldr	r2, [pc, #336]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037ea:	f023 0304 	bic.w	r3, r3, #4
 80037ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d015      	beq.n	8003824 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fe fd88 	bl	800230c <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fe fd84 	bl	800230c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0cb      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	4b49      	ldr	r3, [pc, #292]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ee      	beq.n	8003800 <HAL_RCC_OscConfig+0x334>
 8003822:	e014      	b.n	800384e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003824:	f7fe fd72 	bl	800230c <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fe fd6e 	bl	800230c <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0b5      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003842:	4b3e      	ldr	r3, [pc, #248]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1ee      	bne.n	800382c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d105      	bne.n	8003860 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003854:	4b39      	ldr	r3, [pc, #228]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	4a38      	ldr	r2, [pc, #224]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800385a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800385e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a1 	beq.w	80039ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800386a:	4b34      	ldr	r3, [pc, #208]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b08      	cmp	r3, #8
 8003874:	d05c      	beq.n	8003930 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d141      	bne.n	8003902 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387e:	4b31      	ldr	r3, [pc, #196]	@ (8003944 <HAL_RCC_OscConfig+0x478>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fe fd42 	bl	800230c <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388c:	f7fe fd3e 	bl	800230c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e087      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	4b27      	ldr	r3, [pc, #156]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	019b      	lsls	r3, r3, #6
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	3b01      	subs	r3, #1
 80038c4:	041b      	lsls	r3, r3, #16
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	491b      	ldr	r1, [pc, #108]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_RCC_OscConfig+0x478>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fe fd17 	bl	800230c <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e2:	f7fe fd13 	bl	800230c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e05c      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x416>
 8003900:	e054      	b.n	80039ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003902:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <HAL_RCC_OscConfig+0x478>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fe fd00 	bl	800230c <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fe fcfc 	bl	800230c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e045      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x444>
 800392e:	e03d      	b.n	80039ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d107      	bne.n	8003948 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e038      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
 800393c:	40023800 	.word	0x40023800
 8003940:	40007000 	.word	0x40007000
 8003944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003948:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x4ec>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d028      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d121      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d11a      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003978:	4013      	ands	r3, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800397e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003980:	4293      	cmp	r3, r2
 8003982:	d111      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	3b01      	subs	r3, #1
 8003992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800

080039bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0cc      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d0:	4b68      	ldr	r3, [pc, #416]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d90c      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039de:	4b65      	ldr	r3, [pc, #404]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b63      	ldr	r3, [pc, #396]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0b8      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a10:	4b59      	ldr	r3, [pc, #356]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4a58      	ldr	r2, [pc, #352]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a28:	4b53      	ldr	r3, [pc, #332]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a52      	ldr	r2, [pc, #328]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b50      	ldr	r3, [pc, #320]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	494d      	ldr	r1, [pc, #308]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d044      	beq.n	8003adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b47      	ldr	r3, [pc, #284]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d119      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e07f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e06f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e067      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a9a:	4b37      	ldr	r3, [pc, #220]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f023 0203 	bic.w	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4934      	ldr	r1, [pc, #208]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aac:	f7fe fc2e 	bl	800230c <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab4:	f7fe fc2a 	bl	800230c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e04f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	4b2b      	ldr	r3, [pc, #172]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 020c 	and.w	r2, r3, #12
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1eb      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003adc:	4b25      	ldr	r3, [pc, #148]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d20c      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b22      	ldr	r3, [pc, #136]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b20      	ldr	r3, [pc, #128]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e032      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b10:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4916      	ldr	r1, [pc, #88]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	490e      	ldr	r1, [pc, #56]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b42:	f000 f821 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b46:	4602      	mov	r2, r0
 8003b48:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	490a      	ldr	r1, [pc, #40]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	5ccb      	ldrb	r3, [r1, r3]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	4a09      	ldr	r2, [pc, #36]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b5e:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fb8e 	bl	8002284 <HAL_InitTick>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023c00 	.word	0x40023c00
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	0800bc54 	.word	0x0800bc54
 8003b80:	2000000c 	.word	0x2000000c
 8003b84:	20000010 	.word	0x20000010

08003b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b8c:	b094      	sub	sp, #80	@ 0x50
 8003b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba0:	4b79      	ldr	r3, [pc, #484]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d00d      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	f200 80e1 	bhi.w	8003d74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x34>
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bba:	e0db      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bbc:	4b73      	ldr	r3, [pc, #460]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bc0:	e0db      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bc2:	4b73      	ldr	r3, [pc, #460]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bc6:	e0d8      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d063      	beq.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bde:	4b6a      	ldr	r3, [pc, #424]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	099b      	lsrs	r3, r3, #6
 8003be4:	2200      	movs	r2, #0
 8003be6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003be8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	f04f 0000 	mov.w	r0, #0
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	0159      	lsls	r1, r3, #5
 8003c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c0c:	0150      	lsls	r0, r2, #5
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4621      	mov	r1, r4
 8003c14:	1a51      	subs	r1, r2, r1
 8003c16:	6139      	str	r1, [r7, #16]
 8003c18:	4629      	mov	r1, r5
 8003c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	018b      	lsls	r3, r1, #6
 8003c30:	4651      	mov	r1, sl
 8003c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c36:	4651      	mov	r1, sl
 8003c38:	018a      	lsls	r2, r1, #6
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c40:	4659      	mov	r1, fp
 8003c42:	eb63 0901 	sbc.w	r9, r3, r1
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c5a:	4690      	mov	r8, r2
 8003c5c:	4699      	mov	r9, r3
 8003c5e:	4623      	mov	r3, r4
 8003c60:	eb18 0303 	adds.w	r3, r8, r3
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	462b      	mov	r3, r5
 8003c68:	eb49 0303 	adc.w	r3, r9, r3
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	024b      	lsls	r3, r1, #9
 8003c7e:	4621      	mov	r1, r4
 8003c80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c84:	4621      	mov	r1, r4
 8003c86:	024a      	lsls	r2, r1, #9
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c8e:	2200      	movs	r2, #0
 8003c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c98:	f7fc fa96 	bl	80001c8 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ca4:	e058      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca6:	4b38      	ldr	r3, [pc, #224]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	099b      	lsrs	r3, r3, #6
 8003cac:	2200      	movs	r2, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cb6:	623b      	str	r3, [r7, #32]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	f04f 0000 	mov.w	r0, #0
 8003cc8:	f04f 0100 	mov.w	r1, #0
 8003ccc:	0159      	lsls	r1, r3, #5
 8003cce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd2:	0150      	lsls	r0, r2, #5
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4641      	mov	r1, r8
 8003cda:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cde:	4649      	mov	r1, r9
 8003ce0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cf8:	ebb2 040a 	subs.w	r4, r2, sl
 8003cfc:	eb63 050b 	sbc.w	r5, r3, fp
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	00eb      	lsls	r3, r5, #3
 8003d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0e:	00e2      	lsls	r2, r4, #3
 8003d10:	4614      	mov	r4, r2
 8003d12:	461d      	mov	r5, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	18e3      	adds	r3, r4, r3
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	eb45 0303 	adc.w	r3, r5, r3
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	028b      	lsls	r3, r1, #10
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d38:	4621      	mov	r1, r4
 8003d3a:	028a      	lsls	r2, r1, #10
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d42:	2200      	movs	r2, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	61fa      	str	r2, [r7, #28]
 8003d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d4c:	f7fc fa3c 	bl	80001c8 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d58:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	3301      	adds	r3, #1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d72:	e002      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d74:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3750      	adds	r7, #80	@ 0x50
 8003d80:	46bd      	mov	sp, r7
 8003d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	007a1200 	.word	0x007a1200

08003d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d98:	4b03      	ldr	r3, [pc, #12]	@ (8003da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	2000000c 	.word	0x2000000c

08003dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003db0:	f7ff fff0 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	0a9b      	lsrs	r3, r3, #10
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4903      	ldr	r1, [pc, #12]	@ (8003dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	0800bc64 	.word	0x0800bc64

08003dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dd8:	f7ff ffdc 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0b5b      	lsrs	r3, r3, #13
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4903      	ldr	r1, [pc, #12]	@ (8003df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40023800 	.word	0x40023800
 8003df8:	0800bc64 	.word	0x0800bc64

08003dfc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e022      	b.n	8003e54 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d105      	bne.n	8003e26 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7fd ffad 	bl	8001d80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f814 	bl	8003e5c <HAL_SD_InitCard>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e00a      	b.n	8003e54 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e5c:	b5b0      	push	{r4, r5, r7, lr}
 8003e5e:	b08e      	sub	sp, #56	@ 0x38
 8003e60:	af04      	add	r7, sp, #16
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003e78:	2376      	movs	r3, #118	@ 0x76
 8003e7a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681d      	ldr	r5, [r3, #0]
 8003e80:	466c      	mov	r4, sp
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e8e:	f107 0308 	add.w	r3, r7, #8
 8003e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e94:	4628      	mov	r0, r5
 8003e96:	f003 fb59 	bl	800754c <SDIO_Init>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e04f      	b.n	8003f4c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003eac:	4b29      	ldr	r3, [pc, #164]	@ (8003f54 <HAL_SD_InitCard+0xf8>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f003 fb91 	bl	80075de <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003ebc:	4b25      	ldr	r3, [pc, #148]	@ (8003f54 <HAL_SD_InitCard+0xf8>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f7fe fa2e 	bl	8002324 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fe79 	bl	8004bc0 <SD_PowerON>
 8003ece:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e02e      	b.n	8003f4c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fd98 	bl	8004a24 <SD_InitCard>
 8003ef4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e01b      	b.n	8003f4c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f003 fbf0 	bl	8007702 <SDMMC_CmdBlockLength>
 8003f22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00f      	beq.n	8003f4a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f58 <HAL_SD_InitCard+0xfc>)
 8003f30:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3728      	adds	r7, #40	@ 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bdb0      	pop	{r4, r5, r7, pc}
 8003f54:	422580a0 	.word	0x422580a0
 8003f58:	004005ff 	.word	0x004005ff

08003f5c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b092      	sub	sp, #72	@ 0x48
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003f6a:	f7fe f9cf 	bl	800230c <HAL_GetTick>
 8003f6e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e1c5      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	f040 81b8 	bne.w	800430c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003fa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	441a      	add	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d907      	bls.n	8003fc0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e1ac      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d002      	beq.n	8003fde <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fda:	025b      	lsls	r3, r3, #9
 8003fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	025b      	lsls	r3, r3, #9
 8003fe8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003fea:	2390      	movs	r3, #144	@ 0x90
 8003fec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f107 0214 	add.w	r2, r7, #20
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f003 fb50 	bl	80076aa <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d90a      	bls.n	8004026 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2202      	movs	r2, #2
 8004014:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800401c:	4618      	mov	r0, r3
 800401e:	f003 fbb4 	bl	800778a <SDMMC_CmdReadMultiBlock>
 8004022:	6478      	str	r0, [r7, #68]	@ 0x44
 8004024:	e009      	b.n	800403a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004032:	4618      	mov	r0, r3
 8004034:	f003 fb87 	bl	8007746 <SDMMC_CmdReadSingleBlock>
 8004038:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800403a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800403c:	2b00      	cmp	r3, #0
 800403e:	d012      	beq.n	8004066 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a7e      	ldr	r2, [pc, #504]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 8004046:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800404c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800404e:	431a      	orrs	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e159      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800406a:	e061      	b.n	8004130 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004072:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d03c      	beq.n	80040f4 <HAL_SD_ReadBlocks+0x198>
 800407a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d039      	beq.n	80040f4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004080:	2300      	movs	r3, #0
 8004082:	643b      	str	r3, [r7, #64]	@ 0x40
 8004084:	e033      	b.n	80040ee <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f003 fa89 	bl	80075a2 <SDIO_ReadFIFO>
 8004090:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004094:	b2da      	uxtb	r2, r3
 8004096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004098:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800409a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409c:	3301      	adds	r3, #1
 800409e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a2:	3b01      	subs	r3, #1
 80040a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80040a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a8:	0a1b      	lsrs	r3, r3, #8
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80040b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b2:	3301      	adds	r3, #1
 80040b4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b8:	3b01      	subs	r3, #1
 80040ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80040bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040be:	0c1b      	lsrs	r3, r3, #16
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	3301      	adds	r3, #1
 80040ca:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ce:	3b01      	subs	r3, #1
 80040d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80040d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d4:	0e1b      	lsrs	r3, r3, #24
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80040dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040de:	3301      	adds	r3, #1
 80040e0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e4:	3b01      	subs	r3, #1
 80040e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80040e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ea:	3301      	adds	r3, #1
 80040ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80040ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040f0:	2b07      	cmp	r3, #7
 80040f2:	d9c8      	bls.n	8004086 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80040f4:	f7fe f90a 	bl	800230c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004100:	429a      	cmp	r2, r3
 8004102:	d902      	bls.n	800410a <HAL_SD_ReadBlocks+0x1ae>
 8004104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004106:	2b00      	cmp	r3, #0
 8004108:	d112      	bne.n	8004130 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a4c      	ldr	r2, [pc, #304]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 8004110:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004116:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e0f4      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004136:	f240 332a 	movw	r3, #810	@ 0x32a
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d095      	beq.n	800406c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d022      	beq.n	8004194 <HAL_SD_ReadBlocks+0x238>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d91f      	bls.n	8004194 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004158:	2b03      	cmp	r3, #3
 800415a:	d01b      	beq.n	8004194 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f003 fb79 	bl	8007858 <SDMMC_CmdStopTransfer>
 8004166:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800416a:	2b00      	cmp	r3, #0
 800416c:	d012      	beq.n	8004194 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a33      	ldr	r2, [pc, #204]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 8004174:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800417a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800417c:	431a      	orrs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0c2      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_SD_ReadBlocks+0x254>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a22      	ldr	r2, [pc, #136]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 80041b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041bc:	f043 0208 	orr.w	r2, r3, #8
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0a1      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d012      	beq.n	800420a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a15      	ldr	r2, [pc, #84]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 80041ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	f043 0202 	orr.w	r2, r3, #2
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e087      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d064      	beq.n	80042e2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a08      	ldr	r2, [pc, #32]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 800421e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e06d      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
 800423e:	bf00      	nop
 8004240:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f003 f9aa 	bl	80075a2 <SDIO_ReadFIFO>
 800424e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004252:	b2da      	uxtb	r2, r3
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425a:	3301      	adds	r3, #1
 800425c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800425e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004260:	3b01      	subs	r3, #1
 8004262:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	b2da      	uxtb	r2, r3
 800426a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800426e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004270:	3301      	adds	r3, #1
 8004272:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004276:	3b01      	subs	r3, #1
 8004278:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800427a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	b2da      	uxtb	r2, r3
 8004280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004282:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004286:	3301      	adds	r3, #1
 8004288:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800428a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428c:	3b01      	subs	r3, #1
 800428e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004292:	0e1b      	lsrs	r3, r3, #24
 8004294:	b2da      	uxtb	r2, r3
 8004296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004298:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429c:	3301      	adds	r3, #1
 800429e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80042a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a2:	3b01      	subs	r3, #1
 80042a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80042a6:	f7fe f831 	bl	800230c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d902      	bls.n	80042bc <HAL_SD_ReadBlocks+0x360>
 80042b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d112      	bne.n	80042e2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <HAL_SD_ReadBlocks+0x3c8>)
 80042c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e01b      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_SD_ReadBlocks+0x39a>
 80042f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1a6      	bne.n	8004244 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 80042fe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e006      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004310:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
  }
}
 800431a:	4618      	mov	r0, r3
 800431c:	3748      	adds	r7, #72	@ 0x48
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	004005ff 	.word	0x004005ff

08004328 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b092      	sub	sp, #72	@ 0x48
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004336:	f7fd ffe9 	bl	800230c <HAL_GetTick>
 800433a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d107      	bne.n	800435a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e16d      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	f040 8160 	bne.w	8004628 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800436e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	441a      	add	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004378:	429a      	cmp	r2, r3
 800437a:	d907      	bls.n	800438c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e154      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2203      	movs	r2, #3
 8004390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2200      	movs	r2, #0
 800439a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d002      	beq.n	80043aa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80043a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a6:	025b      	lsls	r3, r3, #9
 80043a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295
 80043ae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	025b      	lsls	r3, r3, #9
 80043b4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80043b6:	2390      	movs	r3, #144	@ 0x90
 80043b8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80043ba:	2300      	movs	r3, #0
 80043bc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80043be:	2300      	movs	r3, #0
 80043c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80043c2:	2301      	movs	r3, #1
 80043c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f107 0218 	add.w	r2, r7, #24
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f003 f96a 	bl	80076aa <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d90a      	bls.n	80043f2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043e8:	4618      	mov	r0, r3
 80043ea:	f003 fa12 	bl	8007812 <SDMMC_CmdWriteMultiBlock>
 80043ee:	6478      	str	r0, [r7, #68]	@ 0x44
 80043f0:	e009      	b.n	8004406 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2210      	movs	r2, #16
 80043f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043fe:	4618      	mov	r0, r3
 8004400:	f003 f9e5 	bl	80077ce <SDMMC_CmdWriteSingleBlock>
 8004404:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004408:	2b00      	cmp	r3, #0
 800440a:	d012      	beq.n	8004432 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a8b      	ldr	r2, [pc, #556]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 8004412:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800441a:	431a      	orrs	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e101      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004436:	e065      	b.n	8004504 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d040      	beq.n	80044c8 <HAL_SD_WriteBlocks+0x1a0>
 8004446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d03d      	beq.n	80044c8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800444c:	2300      	movs	r3, #0
 800444e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004450:	e037      	b.n	80044c2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8004452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445a:	3301      	adds	r3, #1
 800445c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800445e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004460:	3b01      	subs	r3, #1
 8004462:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	021a      	lsls	r2, r3, #8
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	3301      	adds	r3, #1
 8004474:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004478:	3b01      	subs	r3, #1
 800447a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800447c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	041a      	lsls	r2, r3, #16
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448a:	3301      	adds	r3, #1
 800448c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800448e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004490:	3b01      	subs	r3, #1
 8004492:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	061a      	lsls	r2, r3, #24
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80044a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a2:	3301      	adds	r3, #1
 80044a4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80044a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a8:	3b01      	subs	r3, #1
 80044aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f107 0214 	add.w	r2, r7, #20
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f003 f880 	bl	80075bc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80044bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044be:	3301      	adds	r3, #1
 80044c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80044c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	d9c4      	bls.n	8004452 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80044c8:	f7fd ff20 	bl	800230c <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d902      	bls.n	80044de <HAL_SD_WriteBlocks+0x1b6>
 80044d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d112      	bne.n	8004504 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a57      	ldr	r2, [pc, #348]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 80044e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ec:	431a      	orrs	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e098      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800450a:	f240 331a 	movw	r3, #794	@ 0x31a
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d091      	beq.n	8004438 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d022      	beq.n	8004568 <HAL_SD_WriteBlocks+0x240>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d91f      	bls.n	8004568 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452c:	2b03      	cmp	r3, #3
 800452e:	d01b      	beq.n	8004568 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f003 f98f 	bl	8007858 <SDMMC_CmdStopTransfer>
 800453a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800453c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800453e:	2b00      	cmp	r3, #0
 8004540:	d012      	beq.n	8004568 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a3e      	ldr	r2, [pc, #248]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 8004548:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800454e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e066      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_SD_WriteBlocks+0x25c>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004580:	2b00      	cmp	r3, #0
 8004582:	d012      	beq.n	80045aa <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2d      	ldr	r2, [pc, #180]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 800458a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004590:	f043 0208 	orr.w	r2, r3, #8
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e045      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d012      	beq.n	80045de <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a20      	ldr	r2, [pc, #128]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 80045be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c4:	f043 0202 	orr.w	r2, r3, #2
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e02b      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d012      	beq.n	8004612 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a13      	ldr	r2, [pc, #76]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 80045f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	f043 0210 	orr.w	r2, r3, #16
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e011      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f240 523a 	movw	r2, #1338	@ 0x53a
 800461a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	e006      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3748      	adds	r7, #72	@ 0x48
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	004005ff 	.word	0x004005ff

08004644 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004652:	0f9b      	lsrs	r3, r3, #30
 8004654:	b2da      	uxtb	r2, r3
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800465e:	0e9b      	lsrs	r3, r3, #26
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	b2da      	uxtb	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	b2da      	uxtb	r2, r3
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004682:	0c1b      	lsrs	r3, r3, #16
 8004684:	b2da      	uxtb	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	b2da      	uxtb	r2, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800469a:	b2da      	uxtb	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046a4:	0d1b      	lsrs	r3, r3, #20
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c2:	0bdb      	lsrs	r3, r3, #15
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046d4:	0b9b      	lsrs	r3, r3, #14
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046e6:	0b5b      	lsrs	r3, r3, #13
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046f8:	0b1b      	lsrs	r3, r3, #12
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	b2da      	uxtb	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004710:	2b00      	cmp	r3, #0
 8004712:	d163      	bne.n	80047dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004718:	009a      	lsls	r2, r3, #2
 800471a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800471e:	4013      	ands	r3, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004724:	0f92      	lsrs	r2, r2, #30
 8004726:	431a      	orrs	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004730:	0edb      	lsrs	r3, r3, #27
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	b2da      	uxtb	r2, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004742:	0e1b      	lsrs	r3, r3, #24
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	b2da      	uxtb	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004754:	0d5b      	lsrs	r3, r3, #21
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	b2da      	uxtb	r2, r3
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004766:	0c9b      	lsrs	r3, r3, #18
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	b2da      	uxtb	r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004778:	0bdb      	lsrs	r3, r3, #15
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	b2da      	uxtb	r2, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	7e1b      	ldrb	r3, [r3, #24]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	3302      	adds	r3, #2
 800479c:	2201      	movs	r2, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80047a6:	fb03 f202 	mul.w	r2, r3, r2
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	7a1b      	ldrb	r3, [r3, #8]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	2201      	movs	r2, #1
 80047ba:	409a      	lsls	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80047c8:	0a52      	lsrs	r2, r2, #9
 80047ca:	fb03 f202 	mul.w	r2, r3, r2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80047da:	e031      	b.n	8004840 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d11d      	bne.n	8004820 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047f2:	0c1b      	lsrs	r3, r3, #16
 80047f4:	431a      	orrs	r2, r3
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	3301      	adds	r3, #1
 8004800:	029a      	lsls	r2, r3, #10
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004814:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	661a      	str	r2, [r3, #96]	@ 0x60
 800481e:	e00f      	b.n	8004840 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a58      	ldr	r2, [pc, #352]	@ (8004988 <HAL_SD_GetCardCSD+0x344>)
 8004826:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e09d      	b.n	800497c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004844:	0b9b      	lsrs	r3, r3, #14
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	b2da      	uxtb	r2, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004856:	09db      	lsrs	r3, r3, #7
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800485e:	b2da      	uxtb	r2, r3
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800486e:	b2da      	uxtb	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004878:	0fdb      	lsrs	r3, r3, #31
 800487a:	b2da      	uxtb	r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004884:	0f5b      	lsrs	r3, r3, #29
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	b2da      	uxtb	r2, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004896:	0e9b      	lsrs	r3, r3, #26
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a8:	0d9b      	lsrs	r3, r3, #22
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	0d5b      	lsrs	r3, r3, #21
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ea:	0bdb      	lsrs	r3, r3, #15
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	0b9b      	lsrs	r3, r3, #14
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	b2da      	uxtb	r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	0b5b      	lsrs	r3, r3, #13
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	b2da      	uxtb	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004926:	0b1b      	lsrs	r3, r3, #12
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493a:	0a9b      	lsrs	r3, r3, #10
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	b2da      	uxtb	r2, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494e:	0a1b      	lsrs	r3, r3, #8
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	b2da      	uxtb	r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800496a:	b2da      	uxtb	r2, r3
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	004005ff 	.word	0x004005ff

0800498c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80049f0:	f107 030c 	add.w	r3, r7, #12
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f970 	bl	8004cdc <SD_SendStatus>
 80049fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	0a5b      	lsrs	r3, r3, #9
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004a1a:	693b      	ldr	r3, [r7, #16]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004a24:	b5b0      	push	{r4, r5, r7, lr}
 8004a26:	b094      	sub	sp, #80	@ 0x50
 8004a28:	af04      	add	r7, sp, #16
 8004a2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f002 fde0 	bl	80075fa <SDIO_GetPowerState>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a40:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004a44:	e0b8      	b.n	8004bb8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d02f      	beq.n	8004aae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f002 ffc7 	bl	80079e6 <SDMMC_CmdSendCID>
 8004a58:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <SD_InitCard+0x40>
    {
      return errorstate;
 8004a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a62:	e0a9      	b.n	8004bb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f002 fe0a 	bl	8007684 <SDIO_GetResponse>
 8004a70:	4602      	mov	r2, r0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f002 fe01 	bl	8007684 <SDIO_GetResponse>
 8004a82:	4602      	mov	r2, r0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2108      	movs	r1, #8
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f002 fdf8 	bl	8007684 <SDIO_GetResponse>
 8004a94:	4602      	mov	r2, r0
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	210c      	movs	r1, #12
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f002 fdef 	bl	8007684 <SDIO_GetResponse>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d00d      	beq.n	8004ad2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f107 020e 	add.w	r2, r7, #14
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f002 ffcd 	bl	8007a60 <SDMMC_CmdSetRelAdd>
 8004ac6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <SD_InitCard+0xae>
    {
      return errorstate;
 8004ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad0:	e072      	b.n	8004bb8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d036      	beq.n	8004b48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004ada:	89fb      	ldrh	r3, [r7, #14]
 8004adc:	461a      	mov	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f002 ff97 	bl	8007a22 <SDMMC_CmdSendCSD>
 8004af4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afe:	e05b      	b.n	8004bb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f002 fdbc 	bl	8007684 <SDIO_GetResponse>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2104      	movs	r1, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f002 fdb3 	bl	8007684 <SDIO_GetResponse>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2108      	movs	r1, #8
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f002 fdaa 	bl	8007684 <SDIO_GetResponse>
 8004b30:	4602      	mov	r2, r0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	210c      	movs	r1, #12
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f002 fda1 	bl	8007684 <SDIO_GetResponse>
 8004b42:	4602      	mov	r2, r0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f002 fd98 	bl	8007684 <SDIO_GetResponse>
 8004b54:	4603      	mov	r3, r0
 8004b56:	0d1a      	lsrs	r2, r3, #20
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004b5c:	f107 0310 	add.w	r3, r7, #16
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff fd6e 	bl	8004644 <HAL_SD_GetCardCSD>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b6e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004b72:	e021      	b.n	8004bb8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6819      	ldr	r1, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	2200      	movs	r2, #0
 8004b80:	461c      	mov	r4, r3
 8004b82:	4615      	mov	r5, r2
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	4608      	mov	r0, r1
 8004b8a:	f002 fe87 	bl	800789c <SDMMC_CmdSelDesel>
 8004b8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <SD_InitCard+0x176>
  {
    return errorstate;
 8004b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b98:	e00e      	b.n	8004bb8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	466c      	mov	r4, sp
 8004ba2:	f103 0210 	add.w	r2, r3, #16
 8004ba6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ba8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004bac:	3304      	adds	r3, #4
 8004bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f002 fccb 	bl	800754c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3740      	adds	r7, #64	@ 0x40
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bdb0      	pop	{r4, r5, r7, pc}

08004bc0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f002 fe82 	bl	80078e2 <SDMMC_CmdGoIdleState>
 8004bde:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <SD_PowerON+0x2a>
  {
    return errorstate;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	e072      	b.n	8004cd0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f002 fe95 	bl	800791e <SDMMC_CmdOperCond>
 8004bf4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00d      	beq.n	8004c18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f002 fe6b 	bl	80078e2 <SDMMC_CmdGoIdleState>
 8004c0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	e05b      	b.n	8004cd0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d137      	bne.n	8004c96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f002 fe95 	bl	800795c <SDMMC_CmdAppCommand>
 8004c32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d02d      	beq.n	8004c96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004c3e:	e047      	b.n	8004cd0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2100      	movs	r1, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f002 fe88 	bl	800795c <SDMMC_CmdAppCommand>
 8004c4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <SD_PowerON+0x98>
    {
      return errorstate;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	e03b      	b.n	8004cd0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	491e      	ldr	r1, [pc, #120]	@ (8004cd8 <SD_PowerON+0x118>)
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f002 fe9e 	bl	80079a0 <SDMMC_CmdAppOperCommand>
 8004c64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c6c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004c70:	e02e      	b.n	8004cd0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f002 fd03 	bl	8007684 <SDIO_GetResponse>
 8004c7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	0fdb      	lsrs	r3, r3, #31
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <SD_PowerON+0xcc>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <SD_PowerON+0xce>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]

    count++;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	3301      	adds	r3, #1
 8004c94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d802      	bhi.n	8004ca6 <SD_PowerON+0xe6>
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0cc      	beq.n	8004c40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d902      	bls.n	8004cb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cb4:	e00c      	b.n	8004cd0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004cc6:	e002      	b.n	8004cce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	c1100000 	.word	0xc1100000

08004cdc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004cec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cf0:	e018      	b.n	8004d24 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f002 fecf 	bl	8007aa2 <SDMMC_CmdSendStatus>
 8004d04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	e009      	b.n	8004d24 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f002 fcb4 	bl	8007684 <SDIO_GetResponse>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07b      	b.n	8004e36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d108      	bne.n	8004d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d4e:	d009      	beq.n	8004d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	61da      	str	r2, [r3, #28]
 8004d56:	e005      	b.n	8004d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fd f878 	bl	8001e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de8:	ea42 0103 	orr.w	r1, r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	f003 0104 	and.w	r1, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	f003 0210 	and.w	r2, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b088      	sub	sp, #32
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e4e:	f7fd fa5d 	bl	800230c <HAL_GetTick>
 8004e52:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d001      	beq.n	8004e68 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
 8004e66:	e12a      	b.n	80050be <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_SPI_Transmit+0x36>
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e122      	b.n	80050be <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_SPI_Transmit+0x48>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e11b      	b.n	80050be <HAL_SPI_Transmit+0x280>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2203      	movs	r2, #3
 8004e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	88fa      	ldrh	r2, [r7, #6]
 8004ea6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ed4:	d10f      	bne.n	8004ef6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ee4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ef4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	d007      	beq.n	8004f14 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f1c:	d152      	bne.n	8004fc4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_SPI_Transmit+0xee>
 8004f26:	8b7b      	ldrh	r3, [r7, #26]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d145      	bne.n	8004fb8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	881a      	ldrh	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	1c9a      	adds	r2, r3, #2
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f50:	e032      	b.n	8004fb8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d112      	bne.n	8004f86 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f64:	881a      	ldrh	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	1c9a      	adds	r2, r3, #2
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f84:	e018      	b.n	8004fb8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f86:	f7fd f9c1 	bl	800230c <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d803      	bhi.n	8004f9e <HAL_SPI_Transmit+0x160>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d102      	bne.n	8004fa4 <HAL_SPI_Transmit+0x166>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d109      	bne.n	8004fb8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e082      	b.n	80050be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1c7      	bne.n	8004f52 <HAL_SPI_Transmit+0x114>
 8004fc2:	e053      	b.n	800506c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <HAL_SPI_Transmit+0x194>
 8004fcc:	8b7b      	ldrh	r3, [r7, #26]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d147      	bne.n	8005062 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	330c      	adds	r3, #12
 8004fdc:	7812      	ldrb	r2, [r2, #0]
 8004fde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ff8:	e033      	b.n	8005062 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b02      	cmp	r3, #2
 8005006:	d113      	bne.n	8005030 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	7812      	ldrb	r2, [r2, #0]
 8005014:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800502e:	e018      	b.n	8005062 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005030:	f7fd f96c 	bl	800230c <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d803      	bhi.n	8005048 <HAL_SPI_Transmit+0x20a>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d102      	bne.n	800504e <HAL_SPI_Transmit+0x210>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e02d      	b.n	80050be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1c6      	bne.n	8004ffa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 ffb7 	bl	8005fe4 <SPI_EndRxTxTransaction>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
  }
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b088      	sub	sp, #32
 80050ca:	af02      	add	r7, sp, #8
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d001      	beq.n	80050e6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
 80050e4:	e104      	b.n	80052f0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ee:	d112      	bne.n	8005116 <HAL_SPI_Receive+0x50>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10e      	bne.n	8005116 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2204      	movs	r2, #4
 80050fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	4613      	mov	r3, r2
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f8f3 	bl	80052f8 <HAL_SPI_TransmitReceive>
 8005112:	4603      	mov	r3, r0
 8005114:	e0ec      	b.n	80052f0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005116:	f7fd f8f9 	bl	800230c <HAL_GetTick>
 800511a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <HAL_SPI_Receive+0x62>
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0e1      	b.n	80052f0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_SPI_Receive+0x74>
 8005136:	2302      	movs	r3, #2
 8005138:	e0da      	b.n	80052f0 <HAL_SPI_Receive+0x22a>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2204      	movs	r2, #4
 8005146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	88fa      	ldrh	r2, [r7, #6]
 800515a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	88fa      	ldrh	r2, [r7, #6]
 8005160:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005188:	d10f      	bne.n	80051aa <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005198:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b4:	2b40      	cmp	r3, #64	@ 0x40
 80051b6:	d007      	beq.n	80051c8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d170      	bne.n	80052b2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051d0:	e035      	b.n	800523e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d115      	bne.n	800520c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f103 020c 	add.w	r2, r3, #12
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	7812      	ldrb	r2, [r2, #0]
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800520a:	e018      	b.n	800523e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800520c:	f7fd f87e 	bl	800230c <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d803      	bhi.n	8005224 <HAL_SPI_Receive+0x15e>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d102      	bne.n	800522a <HAL_SPI_Receive+0x164>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e058      	b.n	80052f0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1c4      	bne.n	80051d2 <HAL_SPI_Receive+0x10c>
 8005248:	e038      	b.n	80052bc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b01      	cmp	r3, #1
 8005256:	d113      	bne.n	8005280 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005262:	b292      	uxth	r2, r2
 8005264:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	1c9a      	adds	r2, r3, #2
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800527e:	e018      	b.n	80052b2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005280:	f7fd f844 	bl	800230c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d803      	bhi.n	8005298 <HAL_SPI_Receive+0x1d2>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d102      	bne.n	800529e <HAL_SPI_Receive+0x1d8>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e01e      	b.n	80052f0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1c6      	bne.n	800524a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 fe29 	bl	8005f18 <SPI_EndRxTransaction>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80052ee:	2300      	movs	r3, #0
  }
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	@ 0x28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005306:	2301      	movs	r3, #1
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800530a:	f7fc ffff 	bl	800230c <HAL_GetTick>
 800530e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005316:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800531e:	887b      	ldrh	r3, [r7, #2]
 8005320:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005322:	7ffb      	ldrb	r3, [r7, #31]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d00c      	beq.n	8005342 <HAL_SPI_TransmitReceive+0x4a>
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800532e:	d106      	bne.n	800533e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <HAL_SPI_TransmitReceive+0x46>
 8005338:	7ffb      	ldrb	r3, [r7, #31]
 800533a:	2b04      	cmp	r3, #4
 800533c:	d001      	beq.n	8005342 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800533e:	2302      	movs	r3, #2
 8005340:	e17f      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x5c>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x5c>
 800534e:	887b      	ldrh	r3, [r7, #2]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e174      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_SPI_TransmitReceive+0x6e>
 8005362:	2302      	movs	r3, #2
 8005364:	e16d      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34a>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b04      	cmp	r3, #4
 8005378:	d003      	beq.n	8005382 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2205      	movs	r2, #5
 800537e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	887a      	ldrh	r2, [r7, #2]
 8005392:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	887a      	ldrh	r2, [r7, #2]
 8005398:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	887a      	ldrh	r2, [r7, #2]
 80053a4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	887a      	ldrh	r2, [r7, #2]
 80053aa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c2:	2b40      	cmp	r3, #64	@ 0x40
 80053c4:	d007      	beq.n	80053d6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053de:	d17e      	bne.n	80054de <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <HAL_SPI_TransmitReceive+0xf6>
 80053e8:	8afb      	ldrh	r3, [r7, #22]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d16c      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f2:	881a      	ldrh	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	1c9a      	adds	r2, r3, #2
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005412:	e059      	b.n	80054c8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b02      	cmp	r3, #2
 8005420:	d11b      	bne.n	800545a <HAL_SPI_TransmitReceive+0x162>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d016      	beq.n	800545a <HAL_SPI_TransmitReceive+0x162>
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	2b01      	cmp	r3, #1
 8005430:	d113      	bne.n	800545a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005442:	1c9a      	adds	r2, r3, #2
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b01      	cmp	r3, #1
 8005466:	d119      	bne.n	800549c <HAL_SPI_TransmitReceive+0x1a4>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d014      	beq.n	800549c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547c:	b292      	uxth	r2, r2
 800547e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	1c9a      	adds	r2, r3, #2
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005498:	2301      	movs	r3, #1
 800549a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800549c:	f7fc ff36 	bl	800230c <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d80d      	bhi.n	80054c8 <HAL_SPI_TransmitReceive+0x1d0>
 80054ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b2:	d009      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e0bc      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1a0      	bne.n	8005414 <HAL_SPI_TransmitReceive+0x11c>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d19b      	bne.n	8005414 <HAL_SPI_TransmitReceive+0x11c>
 80054dc:	e082      	b.n	80055e4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x1f4>
 80054e6:	8afb      	ldrh	r3, [r7, #22]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d171      	bne.n	80055d0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005512:	e05d      	b.n	80055d0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d11c      	bne.n	800555c <HAL_SPI_TransmitReceive+0x264>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d017      	beq.n	800555c <HAL_SPI_TransmitReceive+0x264>
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	2b01      	cmp	r3, #1
 8005530:	d114      	bne.n	800555c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	7812      	ldrb	r2, [r2, #0]
 800553e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b01      	cmp	r3, #1
 8005568:	d119      	bne.n	800559e <HAL_SPI_TransmitReceive+0x2a6>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d014      	beq.n	800559e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b01      	subs	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800559a:	2301      	movs	r3, #1
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800559e:	f7fc feb5 	bl	800230c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d803      	bhi.n	80055b6 <HAL_SPI_TransmitReceive+0x2be>
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d102      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x2c4>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d109      	bne.n	80055d0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e038      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d19c      	bne.n	8005514 <HAL_SPI_TransmitReceive+0x21c>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055de:	b29b      	uxth	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d197      	bne.n	8005514 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055e4:	6a3a      	ldr	r2, [r7, #32]
 80055e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 fcfb 	bl	8005fe4 <SPI_EndRxTxTransaction>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2220      	movs	r2, #32
 80055f8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e01d      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005640:	2300      	movs	r3, #0
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3728      	adds	r7, #40	@ 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	4613      	mov	r3, r2
 8005658:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d001      	beq.n	800566a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005666:	2302      	movs	r3, #2
 8005668:	e097      	b.n	800579a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_SPI_Transmit_DMA+0x2a>
 8005670:	88fb      	ldrh	r3, [r7, #6]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e08f      	b.n	800579a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_SPI_Transmit_DMA+0x3c>
 8005684:	2302      	movs	r3, #2
 8005686:	e088      	b.n	800579a <HAL_SPI_Transmit_DMA+0x14e>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2203      	movs	r2, #3
 8005694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	88fa      	ldrh	r2, [r7, #6]
 80056ae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d6:	d10f      	bne.n	80056f8 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056fc:	4a29      	ldr	r2, [pc, #164]	@ (80057a4 <HAL_SPI_Transmit_DMA+0x158>)
 80056fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005704:	4a28      	ldr	r2, [pc, #160]	@ (80057a8 <HAL_SPI_Transmit_DMA+0x15c>)
 8005706:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800570c:	4a27      	ldr	r2, [pc, #156]	@ (80057ac <HAL_SPI_Transmit_DMA+0x160>)
 800570e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005714:	2200      	movs	r2, #0
 8005716:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005720:	4619      	mov	r1, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800572e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005730:	f7fd f9c2 	bl	8002ab8 <HAL_DMA_Start_IT>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573e:	f043 0210 	orr.w	r2, r3, #16
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e023      	b.n	800579a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575c:	2b40      	cmp	r3, #64	@ 0x40
 800575e:	d007      	beq.n	8005770 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800576e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0220 	orr.w	r2, r2, #32
 8005786:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0202 	orr.w	r2, r2, #2
 8005796:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	08005d75 	.word	0x08005d75
 80057a8:	08005b95 	.word	0x08005b95
 80057ac:	08005dc9 	.word	0x08005dc9

080057b0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d001      	beq.n	80057ce <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 80057ca:	2302      	movs	r3, #2
 80057cc:	e0a9      	b.n	8005922 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d110      	bne.n	80057f8 <HAL_SPI_Receive_DMA+0x48>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057de:	d10b      	bne.n	80057f8 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2204      	movs	r2, #4
 80057e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f8a2 	bl	8005938 <HAL_SPI_TransmitReceive_DMA>
 80057f4:	4603      	mov	r3, r0
 80057f6:	e094      	b.n	8005922 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_SPI_Receive_DMA+0x54>
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e08c      	b.n	8005922 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_SPI_Receive_DMA+0x66>
 8005812:	2302      	movs	r3, #2
 8005814:	e085      	b.n	8005922 <HAL_SPI_Receive_DMA+0x172>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2204      	movs	r2, #4
 8005822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	88fa      	ldrh	r2, [r7, #6]
 8005836:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800585e:	d10f      	bne.n	8005880 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800586e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800587e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005884:	4a29      	ldr	r2, [pc, #164]	@ (800592c <HAL_SPI_Receive_DMA+0x17c>)
 8005886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588c:	4a28      	ldr	r2, [pc, #160]	@ (8005930 <HAL_SPI_Receive_DMA+0x180>)
 800588e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005894:	4a27      	ldr	r2, [pc, #156]	@ (8005934 <HAL_SPI_Receive_DMA+0x184>)
 8005896:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800589c:	2200      	movs	r2, #0
 800589e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	4619      	mov	r1, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80058b8:	f7fd f8fe 	bl	8002ab8 <HAL_DMA_Start_IT>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c6:	f043 0210 	orr.w	r2, r3, #16
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e023      	b.n	8005922 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e4:	2b40      	cmp	r3, #64	@ 0x40
 80058e6:	d007      	beq.n	80058f8 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058f6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0220 	orr.w	r2, r2, #32
 800590e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	08005d91 	.word	0x08005d91
 8005930:	08005c3d 	.word	0x08005c3d
 8005934:	08005dc9 	.word	0x08005dc9

08005938 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800594c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005954:	7dfb      	ldrb	r3, [r7, #23]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d00c      	beq.n	8005974 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005960:	d106      	bne.n	8005970 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d102      	bne.n	8005970 <HAL_SPI_TransmitReceive_DMA+0x38>
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	2b04      	cmp	r3, #4
 800596e:	d001      	beq.n	8005974 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
 8005972:	e0cf      	b.n	8005b14 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005980:	887b      	ldrh	r3, [r7, #2]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e0c4      	b.n	8005b14 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_SPI_TransmitReceive_DMA+0x60>
 8005994:	2302      	movs	r3, #2
 8005996:	e0bd      	b.n	8005b14 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d003      	beq.n	80059b4 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2205      	movs	r2, #5
 80059b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	887a      	ldrh	r2, [r7, #2]
 80059c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	887a      	ldrh	r2, [r7, #2]
 80059ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	887a      	ldrh	r2, [r7, #2]
 80059d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	887a      	ldrh	r2, [r7, #2]
 80059dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d108      	bne.n	8005a08 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fa:	4a48      	ldr	r2, [pc, #288]	@ (8005b1c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80059fc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a02:	4a47      	ldr	r2, [pc, #284]	@ (8005b20 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005a04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a06:	e007      	b.n	8005a18 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0c:	4a45      	ldr	r2, [pc, #276]	@ (8005b24 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005a0e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a14:	4a44      	ldr	r2, [pc, #272]	@ (8005b28 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005a16:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1c:	4a43      	ldr	r2, [pc, #268]	@ (8005b2c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005a1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a24:	2200      	movs	r2, #0
 8005a26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	4619      	mov	r1, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a38:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a40:	f7fd f83a 	bl	8002ab8 <HAL_DMA_Start_IT>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4e:	f043 0210 	orr.w	r2, r3, #16
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e058      	b.n	8005b14 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0201 	orr.w	r2, r2, #1
 8005a70:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a76:	2200      	movs	r2, #0
 8005a78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a7e:	2200      	movs	r2, #0
 8005a80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a86:	2200      	movs	r2, #0
 8005a88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a8e:	2200      	movs	r2, #0
 8005a90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005aaa:	f7fd f805 	bl	8002ab8 <HAL_DMA_Start_IT>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab8:	f043 0210 	orr.w	r2, r3, #16
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e023      	b.n	8005b14 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad6:	2b40      	cmp	r3, #64	@ 0x40
 8005ad8:	d007      	beq.n	8005aea <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ae8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0220 	orr.w	r2, r2, #32
 8005b00:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0202 	orr.w	r2, r2, #2
 8005b10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	08005d91 	.word	0x08005d91
 8005b20:	08005c3d 	.word	0x08005c3d
 8005b24:	08005dad 	.word	0x08005dad
 8005b28:	08005ce5 	.word	0x08005ce5
 8005b2c:	08005dc9 	.word	0x08005dc9

08005b30 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ba2:	f7fc fbb3 	bl	800230c <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb6:	d03b      	beq.n	8005c30 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0220 	bic.w	r2, r2, #32
 8005bc6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0202 	bic.w	r2, r2, #2
 8005bd6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	2164      	movs	r1, #100	@ 0x64
 8005bdc:	6978      	ldr	r0, [r7, #20]
 8005bde:	f000 fa01 	bl	8005fe4 <SPI_EndRxTxTransaction>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bec:	f043 0220 	orr.w	r2, r3, #32
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c28:	6978      	ldr	r0, [r7, #20]
 8005c2a:	f7ff ffa9 	bl	8005b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c2e:	e002      	b.n	8005c36 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005c30:	6978      	ldr	r0, [r7, #20]
 8005c32:	f7fb fa79 	bl	8001128 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c48:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c4a:	f7fc fb5f 	bl	800230c <HAL_GetTick>
 8005c4e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5e:	d03b      	beq.n	8005cd8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0220 	bic.w	r2, r2, #32
 8005c6e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10d      	bne.n	8005c94 <SPI_DMAReceiveCplt+0x58>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c80:	d108      	bne.n	8005c94 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0203 	bic.w	r2, r2, #3
 8005c90:	605a      	str	r2, [r3, #4]
 8005c92:	e007      	b.n	8005ca4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	2164      	movs	r1, #100	@ 0x64
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f935 	bl	8005f18 <SPI_EndRxTransaction>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff ff55 	bl	8005b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005cd6:	e002      	b.n	8005cde <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7fb fa35 	bl	8001148 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cf2:	f7fc fb0b 	bl	800230c <HAL_GetTick>
 8005cf6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d06:	d02f      	beq.n	8005d68 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0220 	bic.w	r2, r2, #32
 8005d16:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	2164      	movs	r1, #100	@ 0x64
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f961 	bl	8005fe4 <SPI_EndRxTxTransaction>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0203 	bic.w	r2, r2, #3
 8005d42:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f7ff ff0d 	bl	8005b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005d66:	e002      	b.n	8005d6e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff fee1 	bl	8005b30 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff fede 	bl	8005b44 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d88:	bf00      	nop
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f7ff feda 	bl	8005b58 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff fed6 	bl	8005b6c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0203 	bic.w	r2, r2, #3
 8005de4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dea:	f043 0210 	orr.w	r2, r3, #16
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff fec0 	bl	8005b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	4613      	mov	r3, r2
 8005e16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e18:	f7fc fa78 	bl	800230c <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	4413      	add	r3, r2
 8005e26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e28:	f7fc fa70 	bl	800230c <HAL_GetTick>
 8005e2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e2e:	4b39      	ldr	r3, [pc, #228]	@ (8005f14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	015b      	lsls	r3, r3, #5
 8005e34:	0d1b      	lsrs	r3, r3, #20
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	fb02 f303 	mul.w	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e3e:	e054      	b.n	8005eea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	d050      	beq.n	8005eea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e48:	f7fc fa60 	bl	800230c <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d902      	bls.n	8005e5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d13d      	bne.n	8005eda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e76:	d111      	bne.n	8005e9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e80:	d004      	beq.n	8005e8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e8a:	d107      	bne.n	8005e9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea4:	d10f      	bne.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ec4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e017      	b.n	8005f0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	bf0c      	ite	eq
 8005efa:	2301      	moveq	r3, #1
 8005efc:	2300      	movne	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d19b      	bne.n	8005e40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	2000000c 	.word	0x2000000c

08005f18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f2c:	d111      	bne.n	8005f52 <SPI_EndRxTransaction+0x3a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f36:	d004      	beq.n	8005f42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f40:	d107      	bne.n	8005f52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f50:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f5a:	d12a      	bne.n	8005fb2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f64:	d012      	beq.n	8005f8c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2180      	movs	r1, #128	@ 0x80
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff ff49 	bl	8005e08 <SPI_WaitFlagStateUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d02d      	beq.n	8005fd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f80:	f043 0220 	orr.w	r2, r3, #32
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e026      	b.n	8005fda <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2200      	movs	r2, #0
 8005f94:	2101      	movs	r1, #1
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff ff36 	bl	8005e08 <SPI_WaitFlagStateUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01a      	beq.n	8005fd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa6:	f043 0220 	orr.w	r2, r3, #32
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e013      	b.n	8005fda <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2101      	movs	r1, #1
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff ff23 	bl	8005e08 <SPI_WaitFlagStateUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e000      	b.n	8005fda <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	2102      	movs	r1, #2
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff ff04 	bl	8005e08 <SPI_WaitFlagStateUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600a:	f043 0220 	orr.w	r2, r3, #32
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e032      	b.n	800607c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006016:	4b1b      	ldr	r3, [pc, #108]	@ (8006084 <SPI_EndRxTxTransaction+0xa0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1b      	ldr	r2, [pc, #108]	@ (8006088 <SPI_EndRxTxTransaction+0xa4>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	0d5b      	lsrs	r3, r3, #21
 8006022:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006034:	d112      	bne.n	800605c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2200      	movs	r2, #0
 800603e:	2180      	movs	r1, #128	@ 0x80
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff fee1 	bl	8005e08 <SPI_WaitFlagStateUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d016      	beq.n	800607a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e00f      	b.n	800607c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	3b01      	subs	r3, #1
 8006066:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006072:	2b80      	cmp	r3, #128	@ 0x80
 8006074:	d0f2      	beq.n	800605c <SPI_EndRxTxTransaction+0x78>
 8006076:	e000      	b.n	800607a <SPI_EndRxTxTransaction+0x96>
        break;
 8006078:	bf00      	nop
  }

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	2000000c 	.word	0x2000000c
 8006088:	165e9f81 	.word	0x165e9f81

0800608c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e041      	b.n	8006122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fb ff8a 	bl	8001fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 f95e 	bl	800638c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d001      	beq.n	8006144 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e046      	b.n	80061d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a23      	ldr	r2, [pc, #140]	@ (80061e0 <HAL_TIM_Base_Start+0xb4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d022      	beq.n	800619c <HAL_TIM_Base_Start+0x70>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800615e:	d01d      	beq.n	800619c <HAL_TIM_Base_Start+0x70>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1f      	ldr	r2, [pc, #124]	@ (80061e4 <HAL_TIM_Base_Start+0xb8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d018      	beq.n	800619c <HAL_TIM_Base_Start+0x70>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1e      	ldr	r2, [pc, #120]	@ (80061e8 <HAL_TIM_Base_Start+0xbc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d013      	beq.n	800619c <HAL_TIM_Base_Start+0x70>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1c      	ldr	r2, [pc, #112]	@ (80061ec <HAL_TIM_Base_Start+0xc0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00e      	beq.n	800619c <HAL_TIM_Base_Start+0x70>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1b      	ldr	r2, [pc, #108]	@ (80061f0 <HAL_TIM_Base_Start+0xc4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d009      	beq.n	800619c <HAL_TIM_Base_Start+0x70>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a19      	ldr	r2, [pc, #100]	@ (80061f4 <HAL_TIM_Base_Start+0xc8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_TIM_Base_Start+0x70>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a18      	ldr	r2, [pc, #96]	@ (80061f8 <HAL_TIM_Base_Start+0xcc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d111      	bne.n	80061c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b06      	cmp	r3, #6
 80061ac:	d010      	beq.n	80061d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0201 	orr.w	r2, r2, #1
 80061bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061be:	e007      	b.n	80061d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40000400 	.word	0x40000400
 80061e8:	40000800 	.word	0x40000800
 80061ec:	40000c00 	.word	0x40000c00
 80061f0:	40010400 	.word	0x40010400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40001800 	.word	0x40001800

080061fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_TIM_ConfigClockSource+0x1c>
 8006214:	2302      	movs	r3, #2
 8006216:	e0b4      	b.n	8006382 <HAL_TIM_ConfigClockSource+0x186>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800623e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006250:	d03e      	beq.n	80062d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006256:	f200 8087 	bhi.w	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 800625a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625e:	f000 8086 	beq.w	800636e <HAL_TIM_ConfigClockSource+0x172>
 8006262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006266:	d87f      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006268:	2b70      	cmp	r3, #112	@ 0x70
 800626a:	d01a      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0xa6>
 800626c:	2b70      	cmp	r3, #112	@ 0x70
 800626e:	d87b      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006270:	2b60      	cmp	r3, #96	@ 0x60
 8006272:	d050      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x11a>
 8006274:	2b60      	cmp	r3, #96	@ 0x60
 8006276:	d877      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006278:	2b50      	cmp	r3, #80	@ 0x50
 800627a:	d03c      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0xfa>
 800627c:	2b50      	cmp	r3, #80	@ 0x50
 800627e:	d873      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006280:	2b40      	cmp	r3, #64	@ 0x40
 8006282:	d058      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x13a>
 8006284:	2b40      	cmp	r3, #64	@ 0x40
 8006286:	d86f      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006288:	2b30      	cmp	r3, #48	@ 0x30
 800628a:	d064      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
 800628c:	2b30      	cmp	r3, #48	@ 0x30
 800628e:	d86b      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006290:	2b20      	cmp	r3, #32
 8006292:	d060      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
 8006294:	2b20      	cmp	r3, #32
 8006296:	d867      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006298:	2b00      	cmp	r3, #0
 800629a:	d05c      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
 800629c:	2b10      	cmp	r3, #16
 800629e:	d05a      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
 80062a0:	e062      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062b2:	f000 f991 	bl	80065d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	609a      	str	r2, [r3, #8]
      break;
 80062ce:	e04f      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062e0:	f000 f97a 	bl	80065d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062f2:	609a      	str	r2, [r3, #8]
      break;
 80062f4:	e03c      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006302:	461a      	mov	r2, r3
 8006304:	f000 f8ee 	bl	80064e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2150      	movs	r1, #80	@ 0x50
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f947 	bl	80065a2 <TIM_ITRx_SetConfig>
      break;
 8006314:	e02c      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006322:	461a      	mov	r2, r3
 8006324:	f000 f90d 	bl	8006542 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2160      	movs	r1, #96	@ 0x60
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f937 	bl	80065a2 <TIM_ITRx_SetConfig>
      break;
 8006334:	e01c      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006342:	461a      	mov	r2, r3
 8006344:	f000 f8ce 	bl	80064e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2140      	movs	r1, #64	@ 0x40
 800634e:	4618      	mov	r0, r3
 8006350:	f000 f927 	bl	80065a2 <TIM_ITRx_SetConfig>
      break;
 8006354:	e00c      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4619      	mov	r1, r3
 8006360:	4610      	mov	r0, r2
 8006362:	f000 f91e 	bl	80065a2 <TIM_ITRx_SetConfig>
      break;
 8006366:	e003      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
      break;
 800636c:	e000      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800636e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a46      	ldr	r2, [pc, #280]	@ (80064b8 <TIM_Base_SetConfig+0x12c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d013      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063aa:	d00f      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a43      	ldr	r2, [pc, #268]	@ (80064bc <TIM_Base_SetConfig+0x130>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00b      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a42      	ldr	r2, [pc, #264]	@ (80064c0 <TIM_Base_SetConfig+0x134>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d007      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a41      	ldr	r2, [pc, #260]	@ (80064c4 <TIM_Base_SetConfig+0x138>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a40      	ldr	r2, [pc, #256]	@ (80064c8 <TIM_Base_SetConfig+0x13c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d108      	bne.n	80063de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a35      	ldr	r2, [pc, #212]	@ (80064b8 <TIM_Base_SetConfig+0x12c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d02b      	beq.n	800643e <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ec:	d027      	beq.n	800643e <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a32      	ldr	r2, [pc, #200]	@ (80064bc <TIM_Base_SetConfig+0x130>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d023      	beq.n	800643e <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a31      	ldr	r2, [pc, #196]	@ (80064c0 <TIM_Base_SetConfig+0x134>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d01f      	beq.n	800643e <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a30      	ldr	r2, [pc, #192]	@ (80064c4 <TIM_Base_SetConfig+0x138>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d01b      	beq.n	800643e <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2f      	ldr	r2, [pc, #188]	@ (80064c8 <TIM_Base_SetConfig+0x13c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d017      	beq.n	800643e <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2e      	ldr	r2, [pc, #184]	@ (80064cc <TIM_Base_SetConfig+0x140>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2d      	ldr	r2, [pc, #180]	@ (80064d0 <TIM_Base_SetConfig+0x144>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00f      	beq.n	800643e <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2c      	ldr	r2, [pc, #176]	@ (80064d4 <TIM_Base_SetConfig+0x148>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00b      	beq.n	800643e <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a2b      	ldr	r2, [pc, #172]	@ (80064d8 <TIM_Base_SetConfig+0x14c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d007      	beq.n	800643e <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a2a      	ldr	r2, [pc, #168]	@ (80064dc <TIM_Base_SetConfig+0x150>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d003      	beq.n	800643e <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a29      	ldr	r2, [pc, #164]	@ (80064e0 <TIM_Base_SetConfig+0x154>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d108      	bne.n	8006450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a10      	ldr	r2, [pc, #64]	@ (80064b8 <TIM_Base_SetConfig+0x12c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_Base_SetConfig+0xf8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a12      	ldr	r2, [pc, #72]	@ (80064c8 <TIM_Base_SetConfig+0x13c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d103      	bne.n	800648c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b01      	cmp	r3, #1
 800649c:	d105      	bne.n	80064aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f023 0201 	bic.w	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	611a      	str	r2, [r3, #16]
  }
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40000c00 	.word	0x40000c00
 80064c8:	40010400 	.word	0x40010400
 80064cc:	40014000 	.word	0x40014000
 80064d0:	40014400 	.word	0x40014400
 80064d4:	40014800 	.word	0x40014800
 80064d8:	40001800 	.word	0x40001800
 80064dc:	40001c00 	.word	0x40001c00
 80064e0:	40002000 	.word	0x40002000

080064e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f023 0201 	bic.w	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800650e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f023 030a 	bic.w	r3, r3, #10
 8006520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006542:	b480      	push	{r7}
 8006544:	b087      	sub	sp, #28
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	f023 0210 	bic.w	r2, r3, #16
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800656c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	031b      	lsls	r3, r3, #12
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800657e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	621a      	str	r2, [r3, #32]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	f043 0307 	orr.w	r3, r3, #7
 80065c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	609a      	str	r2, [r3, #8]
}
 80065cc:	bf00      	nop
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	021a      	lsls	r2, r3, #8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4313      	orrs	r3, r2
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	609a      	str	r2, [r3, #8]
}
 800660c:	bf00      	nop
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800662c:	2302      	movs	r3, #2
 800662e:	e05a      	b.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a21      	ldr	r2, [pc, #132]	@ (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d022      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800667c:	d01d      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1d      	ldr	r2, [pc, #116]	@ (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d018      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1b      	ldr	r2, [pc, #108]	@ (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d013      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1a      	ldr	r2, [pc, #104]	@ (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00e      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a18      	ldr	r2, [pc, #96]	@ (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d009      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a17      	ldr	r2, [pc, #92]	@ (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d004      	beq.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a15      	ldr	r2, [pc, #84]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d10c      	bne.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40010000 	.word	0x40010000
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800
 8006700:	40000c00 	.word	0x40000c00
 8006704:	40010400 	.word	0x40010400
 8006708:	40014000 	.word	0x40014000
 800670c:	40001800 	.word	0x40001800

08006710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e042      	b.n	80067a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fb fc68 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2224      	movs	r2, #36	@ 0x24
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fc85 	bl	8007064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695a      	ldr	r2, [r3, #20]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b0ba      	sub	sp, #232	@ 0xe8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80067dc:	2300      	movs	r3, #0
 80067de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80067ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10f      	bne.n	8006816 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <HAL_UART_IRQHandler+0x66>
 8006802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fb69 	bl	8006ee6 <UART_Receive_IT>
      return;
 8006814:	e25b      	b.n	8006cce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80de 	beq.w	80069dc <HAL_UART_IRQHandler+0x22c>
 8006820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800682c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006830:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80d1 	beq.w	80069dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <HAL_UART_IRQHandler+0xae>
 8006846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800684a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006856:	f043 0201 	orr.w	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006862:	f003 0304 	and.w	r3, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <HAL_UART_IRQHandler+0xd2>
 800686a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687a:	f043 0202 	orr.w	r2, r3, #2
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <HAL_UART_IRQHandler+0xf6>
 800688e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689e:	f043 0204 	orr.w	r2, r3, #4
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d011      	beq.n	80068d6 <HAL_UART_IRQHandler+0x126>
 80068b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d105      	bne.n	80068ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ce:	f043 0208 	orr.w	r2, r3, #8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 81f2 	beq.w	8006cc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_UART_IRQHandler+0x14e>
 80068ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 faf4 	bl	8006ee6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006908:	2b40      	cmp	r3, #64	@ 0x40
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <HAL_UART_IRQHandler+0x17a>
 8006922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006926:	2b00      	cmp	r3, #0
 8006928:	d04f      	beq.n	80069ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f9fc 	bl	8006d28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693a:	2b40      	cmp	r3, #64	@ 0x40
 800693c:	d141      	bne.n	80069c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006954:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800695c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3314      	adds	r3, #20
 8006966:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800696a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800696e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006976:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1d9      	bne.n	800693e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d013      	beq.n	80069ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006996:	4a7e      	ldr	r2, [pc, #504]	@ (8006b90 <HAL_UART_IRQHandler+0x3e0>)
 8006998:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fc f952 	bl	8002c48 <HAL_DMA_Abort_IT>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d016      	beq.n	80069d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80069b4:	4610      	mov	r0, r2
 80069b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b8:	e00e      	b.n	80069d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f99e 	bl	8006cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c0:	e00a      	b.n	80069d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f99a 	bl	8006cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c8:	e006      	b.n	80069d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f996 	bl	8006cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80069d6:	e175      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d8:	bf00      	nop
    return;
 80069da:	e173      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	f040 814f 	bne.w	8006c84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ea:	f003 0310 	and.w	r3, r3, #16
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 8148 	beq.w	8006c84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8141 	beq.w	8006c84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a02:	2300      	movs	r3, #0
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60bb      	str	r3, [r7, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a22:	2b40      	cmp	r3, #64	@ 0x40
 8006a24:	f040 80b6 	bne.w	8006b94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8145 	beq.w	8006cc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a46:	429a      	cmp	r2, r3
 8006a48:	f080 813e 	bcs.w	8006cc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a5e:	f000 8088 	beq.w	8006b72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006a8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1d9      	bne.n	8006a62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3314      	adds	r3, #20
 8006ab4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006abe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3314      	adds	r3, #20
 8006ace:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ad2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006ad6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ada:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ae4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e1      	bne.n	8006aae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3314      	adds	r3, #20
 8006af0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006afa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3314      	adds	r3, #20
 8006b0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e3      	bne.n	8006aea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	330c      	adds	r3, #12
 8006b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b42:	f023 0310 	bic.w	r3, r3, #16
 8006b46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006b54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e3      	bne.n	8006b30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fb fffb 	bl	8002b68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f8c1 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b8e:	e09b      	b.n	8006cc8 <HAL_UART_IRQHandler+0x518>
 8006b90:	08006def 	.word	0x08006def
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 808e 	beq.w	8006ccc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8089 	beq.w	8006ccc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006bde:	647a      	str	r2, [r7, #68]	@ 0x44
 8006be0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006be4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e3      	bne.n	8006bba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3314      	adds	r3, #20
 8006bf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	623b      	str	r3, [r7, #32]
   return(result);
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	f023 0301 	bic.w	r3, r3, #1
 8006c08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3314      	adds	r3, #20
 8006c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c16:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e3      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	330c      	adds	r3, #12
 8006c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0310 	bic.w	r3, r3, #16
 8006c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	330c      	adds	r3, #12
 8006c58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c5c:	61fa      	str	r2, [r7, #28]
 8006c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	69b9      	ldr	r1, [r7, #24]
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	617b      	str	r3, [r7, #20]
   return(result);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e3      	bne.n	8006c38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f847 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c82:	e023      	b.n	8006ccc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d009      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x4f4>
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f8ba 	bl	8006e16 <UART_Transmit_IT>
    return;
 8006ca2:	e014      	b.n	8006cce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00e      	beq.n	8006cce <HAL_UART_IRQHandler+0x51e>
 8006cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d008      	beq.n	8006cce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f8fa 	bl	8006eb6 <UART_EndTransmit_IT>
    return;
 8006cc2:	e004      	b.n	8006cce <HAL_UART_IRQHandler+0x51e>
    return;
 8006cc4:	bf00      	nop
 8006cc6:	e002      	b.n	8006cce <HAL_UART_IRQHandler+0x51e>
      return;
 8006cc8:	bf00      	nop
 8006cca:	e000      	b.n	8006cce <HAL_UART_IRQHandler+0x51e>
      return;
 8006ccc:	bf00      	nop
  }
}
 8006cce:	37e8      	adds	r7, #232	@ 0xe8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b095      	sub	sp, #84	@ 0x54
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	330c      	adds	r3, #12
 8006d36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d50:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e5      	bne.n	8006d30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3314      	adds	r3, #20
 8006d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3314      	adds	r3, #20
 8006d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d119      	bne.n	8006dd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	330c      	adds	r3, #12
 8006da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f023 0310 	bic.w	r3, r3, #16
 8006db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dc0:	61ba      	str	r2, [r7, #24]
 8006dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6979      	ldr	r1, [r7, #20]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e5      	bne.n	8006da0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006de2:	bf00      	nop
 8006de4:	3754      	adds	r7, #84	@ 0x54
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7ff ff77 	bl	8006cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b21      	cmp	r3, #33	@ 0x21
 8006e28:	d13e      	bne.n	8006ea8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e32:	d114      	bne.n	8006e5e <UART_Transmit_IT+0x48>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d110      	bne.n	8006e5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	1c9a      	adds	r2, r3, #2
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	621a      	str	r2, [r3, #32]
 8006e5c:	e008      	b.n	8006e70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6211      	str	r1, [r2, #32]
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10f      	bne.n	8006ea4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ea2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e000      	b.n	8006eaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ea8:	2302      	movs	r3, #2
  }
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b082      	sub	sp, #8
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ecc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff fefc 	bl	8006cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b08c      	sub	sp, #48	@ 0x30
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b22      	cmp	r3, #34	@ 0x22
 8006ef8:	f040 80ae 	bne.w	8007058 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f04:	d117      	bne.n	8006f36 <UART_Receive_IT+0x50>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d113      	bne.n	8006f36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f34:	e026      	b.n	8006f84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f48:	d007      	beq.n	8006f5a <UART_Receive_IT+0x74>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <UART_Receive_IT+0x82>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d106      	bne.n	8006f68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	e008      	b.n	8006f7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4619      	mov	r1, r3
 8006f92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d15d      	bne.n	8007054 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0220 	bic.w	r2, r2, #32
 8006fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695a      	ldr	r2, [r3, #20]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0201 	bic.w	r2, r2, #1
 8006fc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d135      	bne.n	800704a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f023 0310 	bic.w	r3, r3, #16
 8006ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007004:	623a      	str	r2, [r7, #32]
 8007006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	69f9      	ldr	r1, [r7, #28]
 800700a:	6a3a      	ldr	r2, [r7, #32]
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	61bb      	str	r3, [r7, #24]
   return(result);
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e5      	bne.n	8006fe4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0310 	and.w	r3, r3, #16
 8007022:	2b10      	cmp	r3, #16
 8007024:	d10a      	bne.n	800703c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff fe64 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
 8007048:	e002      	b.n	8007050 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff fe4c 	bl	8006ce8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	e002      	b.n	800705a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	e000      	b.n	800705a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007058:	2302      	movs	r3, #2
  }
}
 800705a:	4618      	mov	r0, r3
 800705c:	3730      	adds	r7, #48	@ 0x30
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007068:	b0c0      	sub	sp, #256	@ 0x100
 800706a:	af00      	add	r7, sp, #0
 800706c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800707c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007080:	68d9      	ldr	r1, [r3, #12]
 8007082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	ea40 0301 	orr.w	r3, r0, r1
 800708c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800708e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	431a      	orrs	r2, r3
 800709c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80070bc:	f021 010c 	bic.w	r1, r1, #12
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070ca:	430b      	orrs	r3, r1
 80070cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80070da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070de:	6999      	ldr	r1, [r3, #24]
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	ea40 0301 	orr.w	r3, r0, r1
 80070ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4b8f      	ldr	r3, [pc, #572]	@ (8007330 <UART_SetConfig+0x2cc>)
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d005      	beq.n	8007104 <UART_SetConfig+0xa0>
 80070f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4b8d      	ldr	r3, [pc, #564]	@ (8007334 <UART_SetConfig+0x2d0>)
 8007100:	429a      	cmp	r2, r3
 8007102:	d104      	bne.n	800710e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007104:	f7fc fe66 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 8007108:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800710c:	e003      	b.n	8007116 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800710e:	f7fc fe4d 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8007112:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007120:	f040 810c 	bne.w	800733c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007128:	2200      	movs	r2, #0
 800712a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800712e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007136:	4622      	mov	r2, r4
 8007138:	462b      	mov	r3, r5
 800713a:	1891      	adds	r1, r2, r2
 800713c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800713e:	415b      	adcs	r3, r3
 8007140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007142:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007146:	4621      	mov	r1, r4
 8007148:	eb12 0801 	adds.w	r8, r2, r1
 800714c:	4629      	mov	r1, r5
 800714e:	eb43 0901 	adc.w	r9, r3, r1
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800715e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007166:	4690      	mov	r8, r2
 8007168:	4699      	mov	r9, r3
 800716a:	4623      	mov	r3, r4
 800716c:	eb18 0303 	adds.w	r3, r8, r3
 8007170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007174:	462b      	mov	r3, r5
 8007176:	eb49 0303 	adc.w	r3, r9, r3
 800717a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800718a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800718e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007192:	460b      	mov	r3, r1
 8007194:	18db      	adds	r3, r3, r3
 8007196:	653b      	str	r3, [r7, #80]	@ 0x50
 8007198:	4613      	mov	r3, r2
 800719a:	eb42 0303 	adc.w	r3, r2, r3
 800719e:	657b      	str	r3, [r7, #84]	@ 0x54
 80071a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80071a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80071a8:	f7f9 f80e 	bl	80001c8 <__aeabi_uldivmod>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4b61      	ldr	r3, [pc, #388]	@ (8007338 <UART_SetConfig+0x2d4>)
 80071b2:	fba3 2302 	umull	r2, r3, r3, r2
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	011c      	lsls	r4, r3, #4
 80071ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80071c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80071cc:	4642      	mov	r2, r8
 80071ce:	464b      	mov	r3, r9
 80071d0:	1891      	adds	r1, r2, r2
 80071d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80071d4:	415b      	adcs	r3, r3
 80071d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80071dc:	4641      	mov	r1, r8
 80071de:	eb12 0a01 	adds.w	sl, r2, r1
 80071e2:	4649      	mov	r1, r9
 80071e4:	eb43 0b01 	adc.w	fp, r3, r1
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071fc:	4692      	mov	sl, r2
 80071fe:	469b      	mov	fp, r3
 8007200:	4643      	mov	r3, r8
 8007202:	eb1a 0303 	adds.w	r3, sl, r3
 8007206:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800720a:	464b      	mov	r3, r9
 800720c:	eb4b 0303 	adc.w	r3, fp, r3
 8007210:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007220:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007224:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007228:	460b      	mov	r3, r1
 800722a:	18db      	adds	r3, r3, r3
 800722c:	643b      	str	r3, [r7, #64]	@ 0x40
 800722e:	4613      	mov	r3, r2
 8007230:	eb42 0303 	adc.w	r3, r2, r3
 8007234:	647b      	str	r3, [r7, #68]	@ 0x44
 8007236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800723a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800723e:	f7f8 ffc3 	bl	80001c8 <__aeabi_uldivmod>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4611      	mov	r1, r2
 8007248:	4b3b      	ldr	r3, [pc, #236]	@ (8007338 <UART_SetConfig+0x2d4>)
 800724a:	fba3 2301 	umull	r2, r3, r3, r1
 800724e:	095b      	lsrs	r3, r3, #5
 8007250:	2264      	movs	r2, #100	@ 0x64
 8007252:	fb02 f303 	mul.w	r3, r2, r3
 8007256:	1acb      	subs	r3, r1, r3
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800725e:	4b36      	ldr	r3, [pc, #216]	@ (8007338 <UART_SetConfig+0x2d4>)
 8007260:	fba3 2302 	umull	r2, r3, r3, r2
 8007264:	095b      	lsrs	r3, r3, #5
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800726c:	441c      	add	r4, r3
 800726e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007272:	2200      	movs	r2, #0
 8007274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007278:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800727c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007280:	4642      	mov	r2, r8
 8007282:	464b      	mov	r3, r9
 8007284:	1891      	adds	r1, r2, r2
 8007286:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007288:	415b      	adcs	r3, r3
 800728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800728c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007290:	4641      	mov	r1, r8
 8007292:	1851      	adds	r1, r2, r1
 8007294:	6339      	str	r1, [r7, #48]	@ 0x30
 8007296:	4649      	mov	r1, r9
 8007298:	414b      	adcs	r3, r1
 800729a:	637b      	str	r3, [r7, #52]	@ 0x34
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80072a8:	4659      	mov	r1, fp
 80072aa:	00cb      	lsls	r3, r1, #3
 80072ac:	4651      	mov	r1, sl
 80072ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072b2:	4651      	mov	r1, sl
 80072b4:	00ca      	lsls	r2, r1, #3
 80072b6:	4610      	mov	r0, r2
 80072b8:	4619      	mov	r1, r3
 80072ba:	4603      	mov	r3, r0
 80072bc:	4642      	mov	r2, r8
 80072be:	189b      	adds	r3, r3, r2
 80072c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072c4:	464b      	mov	r3, r9
 80072c6:	460a      	mov	r2, r1
 80072c8:	eb42 0303 	adc.w	r3, r2, r3
 80072cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80072e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80072e4:	460b      	mov	r3, r1
 80072e6:	18db      	adds	r3, r3, r3
 80072e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072ea:	4613      	mov	r3, r2
 80072ec:	eb42 0303 	adc.w	r3, r2, r3
 80072f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80072f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80072fa:	f7f8 ff65 	bl	80001c8 <__aeabi_uldivmod>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4b0d      	ldr	r3, [pc, #52]	@ (8007338 <UART_SetConfig+0x2d4>)
 8007304:	fba3 1302 	umull	r1, r3, r3, r2
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	2164      	movs	r1, #100	@ 0x64
 800730c:	fb01 f303 	mul.w	r3, r1, r3
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	3332      	adds	r3, #50	@ 0x32
 8007316:	4a08      	ldr	r2, [pc, #32]	@ (8007338 <UART_SetConfig+0x2d4>)
 8007318:	fba2 2303 	umull	r2, r3, r2, r3
 800731c:	095b      	lsrs	r3, r3, #5
 800731e:	f003 0207 	and.w	r2, r3, #7
 8007322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4422      	add	r2, r4
 800732a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800732c:	e106      	b.n	800753c <UART_SetConfig+0x4d8>
 800732e:	bf00      	nop
 8007330:	40011000 	.word	0x40011000
 8007334:	40011400 	.word	0x40011400
 8007338:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800733c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007340:	2200      	movs	r2, #0
 8007342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007346:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800734a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800734e:	4642      	mov	r2, r8
 8007350:	464b      	mov	r3, r9
 8007352:	1891      	adds	r1, r2, r2
 8007354:	6239      	str	r1, [r7, #32]
 8007356:	415b      	adcs	r3, r3
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
 800735a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800735e:	4641      	mov	r1, r8
 8007360:	1854      	adds	r4, r2, r1
 8007362:	4649      	mov	r1, r9
 8007364:	eb43 0501 	adc.w	r5, r3, r1
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	00eb      	lsls	r3, r5, #3
 8007372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007376:	00e2      	lsls	r2, r4, #3
 8007378:	4614      	mov	r4, r2
 800737a:	461d      	mov	r5, r3
 800737c:	4643      	mov	r3, r8
 800737e:	18e3      	adds	r3, r4, r3
 8007380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007384:	464b      	mov	r3, r9
 8007386:	eb45 0303 	adc.w	r3, r5, r3
 800738a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800738e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800739a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80073aa:	4629      	mov	r1, r5
 80073ac:	008b      	lsls	r3, r1, #2
 80073ae:	4621      	mov	r1, r4
 80073b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073b4:	4621      	mov	r1, r4
 80073b6:	008a      	lsls	r2, r1, #2
 80073b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80073bc:	f7f8 ff04 	bl	80001c8 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4b60      	ldr	r3, [pc, #384]	@ (8007548 <UART_SetConfig+0x4e4>)
 80073c6:	fba3 2302 	umull	r2, r3, r3, r2
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	011c      	lsls	r4, r3, #4
 80073ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80073d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80073dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	1891      	adds	r1, r2, r2
 80073e6:	61b9      	str	r1, [r7, #24]
 80073e8:	415b      	adcs	r3, r3
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073f0:	4641      	mov	r1, r8
 80073f2:	1851      	adds	r1, r2, r1
 80073f4:	6139      	str	r1, [r7, #16]
 80073f6:	4649      	mov	r1, r9
 80073f8:	414b      	adcs	r3, r1
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007408:	4659      	mov	r1, fp
 800740a:	00cb      	lsls	r3, r1, #3
 800740c:	4651      	mov	r1, sl
 800740e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007412:	4651      	mov	r1, sl
 8007414:	00ca      	lsls	r2, r1, #3
 8007416:	4610      	mov	r0, r2
 8007418:	4619      	mov	r1, r3
 800741a:	4603      	mov	r3, r0
 800741c:	4642      	mov	r2, r8
 800741e:	189b      	adds	r3, r3, r2
 8007420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007424:	464b      	mov	r3, r9
 8007426:	460a      	mov	r2, r1
 8007428:	eb42 0303 	adc.w	r3, r2, r3
 800742c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	67bb      	str	r3, [r7, #120]	@ 0x78
 800743a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007448:	4649      	mov	r1, r9
 800744a:	008b      	lsls	r3, r1, #2
 800744c:	4641      	mov	r1, r8
 800744e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007452:	4641      	mov	r1, r8
 8007454:	008a      	lsls	r2, r1, #2
 8007456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800745a:	f7f8 feb5 	bl	80001c8 <__aeabi_uldivmod>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4611      	mov	r1, r2
 8007464:	4b38      	ldr	r3, [pc, #224]	@ (8007548 <UART_SetConfig+0x4e4>)
 8007466:	fba3 2301 	umull	r2, r3, r3, r1
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	2264      	movs	r2, #100	@ 0x64
 800746e:	fb02 f303 	mul.w	r3, r2, r3
 8007472:	1acb      	subs	r3, r1, r3
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	3332      	adds	r3, #50	@ 0x32
 8007478:	4a33      	ldr	r2, [pc, #204]	@ (8007548 <UART_SetConfig+0x4e4>)
 800747a:	fba2 2303 	umull	r2, r3, r2, r3
 800747e:	095b      	lsrs	r3, r3, #5
 8007480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007484:	441c      	add	r4, r3
 8007486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800748a:	2200      	movs	r2, #0
 800748c:	673b      	str	r3, [r7, #112]	@ 0x70
 800748e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007490:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007494:	4642      	mov	r2, r8
 8007496:	464b      	mov	r3, r9
 8007498:	1891      	adds	r1, r2, r2
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	415b      	adcs	r3, r3
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074a4:	4641      	mov	r1, r8
 80074a6:	1851      	adds	r1, r2, r1
 80074a8:	6039      	str	r1, [r7, #0]
 80074aa:	4649      	mov	r1, r9
 80074ac:	414b      	adcs	r3, r1
 80074ae:	607b      	str	r3, [r7, #4]
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074bc:	4659      	mov	r1, fp
 80074be:	00cb      	lsls	r3, r1, #3
 80074c0:	4651      	mov	r1, sl
 80074c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074c6:	4651      	mov	r1, sl
 80074c8:	00ca      	lsls	r2, r1, #3
 80074ca:	4610      	mov	r0, r2
 80074cc:	4619      	mov	r1, r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	4642      	mov	r2, r8
 80074d2:	189b      	adds	r3, r3, r2
 80074d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074d6:	464b      	mov	r3, r9
 80074d8:	460a      	mov	r2, r1
 80074da:	eb42 0303 	adc.w	r3, r2, r3
 80074de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80074ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	f04f 0300 	mov.w	r3, #0
 80074f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80074f8:	4649      	mov	r1, r9
 80074fa:	008b      	lsls	r3, r1, #2
 80074fc:	4641      	mov	r1, r8
 80074fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007502:	4641      	mov	r1, r8
 8007504:	008a      	lsls	r2, r1, #2
 8007506:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800750a:	f7f8 fe5d 	bl	80001c8 <__aeabi_uldivmod>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4b0d      	ldr	r3, [pc, #52]	@ (8007548 <UART_SetConfig+0x4e4>)
 8007514:	fba3 1302 	umull	r1, r3, r3, r2
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	2164      	movs	r1, #100	@ 0x64
 800751c:	fb01 f303 	mul.w	r3, r1, r3
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	3332      	adds	r3, #50	@ 0x32
 8007526:	4a08      	ldr	r2, [pc, #32]	@ (8007548 <UART_SetConfig+0x4e4>)
 8007528:	fba2 2303 	umull	r2, r3, r2, r3
 800752c:	095b      	lsrs	r3, r3, #5
 800752e:	f003 020f 	and.w	r2, r3, #15
 8007532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4422      	add	r2, r4
 800753a:	609a      	str	r2, [r3, #8]
}
 800753c:	bf00      	nop
 800753e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007542:	46bd      	mov	sp, r7
 8007544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007548:	51eb851f 	.word	0x51eb851f

0800754c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800754c:	b084      	sub	sp, #16
 800754e:	b480      	push	{r7}
 8007550:	b085      	sub	sp, #20
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	f107 001c 	add.w	r0, r7, #28
 800755a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007562:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007564:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007566:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800756a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800756c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800756e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8007572:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8007576:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8007586:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	431a      	orrs	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	b004      	add	sp, #16
 80075a0:	4770      	bx	lr

080075a2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2203      	movs	r2, #3
 80075ea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0303 	and.w	r3, r3, #3
}
 800760a:	4618      	mov	r0, r3
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007634:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800763a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007640:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007650:	f023 030f 	bic.w	r3, r3, #15
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	b2db      	uxtb	r3, r3
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3314      	adds	r3, #20
 8007692:	461a      	mov	r2, r3
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	4413      	add	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
}  
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b085      	sub	sp, #20
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076d0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80076d6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80076dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0

}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b088      	sub	sp, #32
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007710:	2310      	movs	r3, #16
 8007712:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007714:	2340      	movs	r3, #64	@ 0x40
 8007716:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007718:	2300      	movs	r3, #0
 800771a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800771c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007720:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007722:	f107 0308 	add.w	r3, r7, #8
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff ff74 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800772e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007732:	2110      	movs	r1, #16
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f9d7 	bl	8007ae8 <SDMMC_GetCmdResp1>
 800773a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800773c:	69fb      	ldr	r3, [r7, #28]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3720      	adds	r7, #32
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b088      	sub	sp, #32
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007754:	2311      	movs	r3, #17
 8007756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007758:	2340      	movs	r3, #64	@ 0x40
 800775a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800775c:	2300      	movs	r3, #0
 800775e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007764:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007766:	f107 0308 	add.w	r3, r7, #8
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff ff52 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007776:	2111      	movs	r1, #17
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f9b5 	bl	8007ae8 <SDMMC_GetCmdResp1>
 800777e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007780:	69fb      	ldr	r3, [r7, #28]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3720      	adds	r7, #32
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b088      	sub	sp, #32
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007798:	2312      	movs	r3, #18
 800779a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800779c:	2340      	movs	r3, #64	@ 0x40
 800779e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077aa:	f107 0308 	add.w	r3, r7, #8
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff ff30 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80077b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077ba:	2112      	movs	r1, #18
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f993 	bl	8007ae8 <SDMMC_GetCmdResp1>
 80077c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077c4:	69fb      	ldr	r3, [r7, #28]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3720      	adds	r7, #32
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b088      	sub	sp, #32
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80077dc:	2318      	movs	r3, #24
 80077de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077e0:	2340      	movs	r3, #64	@ 0x40
 80077e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077ee:	f107 0308 	add.w	r3, r7, #8
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff ff0e 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80077fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077fe:	2118      	movs	r1, #24
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f971 	bl	8007ae8 <SDMMC_GetCmdResp1>
 8007806:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007808:	69fb      	ldr	r3, [r7, #28]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b088      	sub	sp, #32
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007820:	2319      	movs	r3, #25
 8007822:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007824:	2340      	movs	r3, #64	@ 0x40
 8007826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800782c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007830:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007832:	f107 0308 	add.w	r3, r7, #8
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff feec 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800783e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007842:	2119      	movs	r1, #25
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f94f 	bl	8007ae8 <SDMMC_GetCmdResp1>
 800784a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800784c:	69fb      	ldr	r3, [r7, #28]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3720      	adds	r7, #32
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007864:	230c      	movs	r3, #12
 8007866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007868:	2340      	movs	r3, #64	@ 0x40
 800786a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007874:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007876:	f107 0308 	add.w	r3, r7, #8
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff feca 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007882:	4a05      	ldr	r2, [pc, #20]	@ (8007898 <SDMMC_CmdStopTransfer+0x40>)
 8007884:	210c      	movs	r1, #12
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f92e 	bl	8007ae8 <SDMMC_GetCmdResp1>
 800788c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800788e:	69fb      	ldr	r3, [r7, #28]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3720      	adds	r7, #32
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	05f5e100 	.word	0x05f5e100

0800789c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08a      	sub	sp, #40	@ 0x28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80078ac:	2307      	movs	r3, #7
 80078ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078b0:	2340      	movs	r3, #64	@ 0x40
 80078b2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078bc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078be:	f107 0310 	add.w	r3, r7, #16
 80078c2:	4619      	mov	r1, r3
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f7ff fea6 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80078ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ce:	2107      	movs	r1, #7
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f909 	bl	8007ae8 <SDMMC_GetCmdResp1>
 80078d6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3728      	adds	r7, #40	@ 0x28
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b088      	sub	sp, #32
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80078f2:	2300      	movs	r3, #0
 80078f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007900:	f107 0308 	add.w	r3, r7, #8
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fe85 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fb23 	bl	8007f58 <SDMMC_GetCmdError>
 8007912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007914:	69fb      	ldr	r3, [r7, #28]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b088      	sub	sp, #32
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007926:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800792a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800792c:	2308      	movs	r3, #8
 800792e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007930:	2340      	movs	r3, #64	@ 0x40
 8007932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800793c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800793e:	f107 0308 	add.w	r3, r7, #8
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fe66 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fab6 	bl	8007ebc <SDMMC_GetCmdResp7>
 8007950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007952:	69fb      	ldr	r3, [r7, #28]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800796a:	2337      	movs	r3, #55	@ 0x37
 800796c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800796e:	2340      	movs	r3, #64	@ 0x40
 8007970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800797a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800797c:	f107 0308 	add.w	r3, r7, #8
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff fe47 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800798c:	2137      	movs	r1, #55	@ 0x37
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f8aa 	bl	8007ae8 <SDMMC_GetCmdResp1>
 8007994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007996:	69fb      	ldr	r3, [r7, #28]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3720      	adds	r7, #32
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80079b6:	2329      	movs	r3, #41	@ 0x29
 80079b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079ba:	2340      	movs	r3, #64	@ 0x40
 80079bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079c8:	f107 0308 	add.w	r3, r7, #8
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff fe21 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f9bd 	bl	8007d54 <SDMMC_GetCmdResp3>
 80079da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079dc:	69fb      	ldr	r3, [r7, #28]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b088      	sub	sp, #32
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80079f2:	2302      	movs	r3, #2
 80079f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80079f6:	23c0      	movs	r3, #192	@ 0xc0
 80079f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a04:	f107 0308 	add.w	r3, r7, #8
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff fe03 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f957 	bl	8007cc4 <SDMMC_GetCmdResp2>
 8007a16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a18:	69fb      	ldr	r3, [r7, #28]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3720      	adds	r7, #32
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b088      	sub	sp, #32
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007a30:	2309      	movs	r3, #9
 8007a32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a34:	23c0      	movs	r3, #192	@ 0xc0
 8007a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a42:	f107 0308 	add.w	r3, r7, #8
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff fde4 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f938 	bl	8007cc4 <SDMMC_GetCmdResp2>
 8007a54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a56:	69fb      	ldr	r3, [r7, #28]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3720      	adds	r7, #32
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a72:	2340      	movs	r3, #64	@ 0x40
 8007a74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a76:	2300      	movs	r3, #0
 8007a78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a80:	f107 0308 	add.w	r3, r7, #8
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff fdc5 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	2103      	movs	r1, #3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f99d 	bl	8007dd0 <SDMMC_GetCmdResp6>
 8007a96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a98:	69fb      	ldr	r3, [r7, #28]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3720      	adds	r7, #32
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b088      	sub	sp, #32
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007ab0:	230d      	movs	r3, #13
 8007ab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ab4:	2340      	movs	r3, #64	@ 0x40
 8007ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ac0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ac2:	f107 0308 	add.w	r3, r7, #8
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff fda4 	bl	8007616 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ad2:	210d      	movs	r1, #13
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f807 	bl	8007ae8 <SDMMC_GetCmdResp1>
 8007ada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007adc:	69fb      	ldr	r3, [r7, #28]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3720      	adds	r7, #32
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	460b      	mov	r3, r1
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007af6:	4b70      	ldr	r3, [pc, #448]	@ (8007cb8 <SDMMC_GetCmdResp1+0x1d0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a70      	ldr	r2, [pc, #448]	@ (8007cbc <SDMMC_GetCmdResp1+0x1d4>)
 8007afc:	fba2 2303 	umull	r2, r3, r2, r3
 8007b00:	0a5a      	lsrs	r2, r3, #9
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	fb02 f303 	mul.w	r3, r2, r3
 8007b08:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	1e5a      	subs	r2, r3, #1
 8007b0e:	61fa      	str	r2, [r7, #28]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d102      	bne.n	8007b1a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007b18:	e0c9      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b1e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0ef      	beq.n	8007b0a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1ea      	bne.n	8007b0a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d004      	beq.n	8007b4a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2204      	movs	r2, #4
 8007b44:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b46:	2304      	movs	r3, #4
 8007b48:	e0b1      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d004      	beq.n	8007b60 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e0a6      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	22c5      	movs	r2, #197	@ 0xc5
 8007b64:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f7ff fd7f 	bl	800766a <SDIO_GetCommandResponse>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	461a      	mov	r2, r3
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d001      	beq.n	8007b7a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e099      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f7ff fd81 	bl	8007684 <SDIO_GetResponse>
 8007b82:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4b4e      	ldr	r3, [pc, #312]	@ (8007cc0 <SDMMC_GetCmdResp1+0x1d8>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e08d      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da02      	bge.n	8007b9e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007b98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b9c:	e087      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007ba8:	2340      	movs	r3, #64	@ 0x40
 8007baa:	e080      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007bb6:	2380      	movs	r3, #128	@ 0x80
 8007bb8:	e079      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007bc8:	e071      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d002      	beq.n	8007bda <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007bd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bd8:	e069      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007be8:	e061      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007bf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007bf8:	e059      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c08:	e051      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c18:	e049      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007c24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007c28:	e041      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007c34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c38:	e039      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007c44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007c48:	e031      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007c54:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007c58:	e029      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007c64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007c68:	e021      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007c74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007c78:	e019      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007c84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007c88:	e011      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007c94:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007c98:	e009      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007ca4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007ca8:	e001      	b.n	8007cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007caa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3720      	adds	r7, #32
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	2000000c 	.word	0x2000000c
 8007cbc:	10624dd3 	.word	0x10624dd3
 8007cc0:	fdffe008 	.word	0xfdffe008

08007cc4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8007d4c <SDMMC_GetCmdResp2+0x88>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d50 <SDMMC_GetCmdResp2+0x8c>)
 8007cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd6:	0a5b      	lsrs	r3, r3, #9
 8007cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cdc:	fb02 f303 	mul.w	r3, r2, r3
 8007ce0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	1e5a      	subs	r2, r3, #1
 8007ce6:	60fa      	str	r2, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d102      	bne.n	8007cf2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007cf0:	e026      	b.n	8007d40 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0ef      	beq.n	8007ce2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1ea      	bne.n	8007ce2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2204      	movs	r2, #4
 8007d1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d1e:	2304      	movs	r3, #4
 8007d20:	e00e      	b.n	8007d40 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e003      	b.n	8007d40 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	22c5      	movs	r2, #197	@ 0xc5
 8007d3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	2000000c 	.word	0x2000000c
 8007d50:	10624dd3 	.word	0x10624dd3

08007d54 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <SDMMC_GetCmdResp3+0x74>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a1a      	ldr	r2, [pc, #104]	@ (8007dcc <SDMMC_GetCmdResp3+0x78>)
 8007d62:	fba2 2303 	umull	r2, r3, r2, r3
 8007d66:	0a5b      	lsrs	r3, r3, #9
 8007d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d6c:	fb02 f303 	mul.w	r3, r2, r3
 8007d70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	1e5a      	subs	r2, r3, #1
 8007d76:	60fa      	str	r2, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007d80:	e01b      	b.n	8007dba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0ef      	beq.n	8007d72 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1ea      	bne.n	8007d72 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d004      	beq.n	8007db2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2204      	movs	r2, #4
 8007dac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007dae:	2304      	movs	r3, #4
 8007db0:	e003      	b.n	8007dba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	22c5      	movs	r2, #197	@ 0xc5
 8007db6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	2000000c 	.word	0x2000000c
 8007dcc:	10624dd3 	.word	0x10624dd3

08007dd0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007dde:	4b35      	ldr	r3, [pc, #212]	@ (8007eb4 <SDMMC_GetCmdResp6+0xe4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a35      	ldr	r2, [pc, #212]	@ (8007eb8 <SDMMC_GetCmdResp6+0xe8>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	0a5b      	lsrs	r3, r3, #9
 8007dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dee:	fb02 f303 	mul.w	r3, r2, r3
 8007df2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	1e5a      	subs	r2, r3, #1
 8007df8:	61fa      	str	r2, [r7, #28]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d102      	bne.n	8007e04 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007dfe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007e02:	e052      	b.n	8007eaa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e08:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0ef      	beq.n	8007df4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1ea      	bne.n	8007df4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d004      	beq.n	8007e34 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2204      	movs	r2, #4
 8007e2e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e30:	2304      	movs	r3, #4
 8007e32:	e03a      	b.n	8007eaa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e02f      	b.n	8007eaa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7ff fc0d 	bl	800766a <SDIO_GetCommandResponse>
 8007e50:	4603      	mov	r3, r0
 8007e52:	461a      	mov	r2, r3
 8007e54:	7afb      	ldrb	r3, [r7, #11]
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d001      	beq.n	8007e5e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e025      	b.n	8007eaa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	22c5      	movs	r2, #197	@ 0xc5
 8007e62:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007e64:	2100      	movs	r1, #0
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f7ff fc0c 	bl	8007684 <SDIO_GetResponse>
 8007e6c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	0c1b      	lsrs	r3, r3, #16
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e011      	b.n	8007eaa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007e94:	e009      	b.n	8007eaa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ea4:	e001      	b.n	8007eaa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007ea6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3720      	adds	r7, #32
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	2000000c 	.word	0x2000000c
 8007eb8:	10624dd3 	.word	0x10624dd3

08007ebc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ec4:	4b22      	ldr	r3, [pc, #136]	@ (8007f50 <SDMMC_GetCmdResp7+0x94>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a22      	ldr	r2, [pc, #136]	@ (8007f54 <SDMMC_GetCmdResp7+0x98>)
 8007eca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ece:	0a5b      	lsrs	r3, r3, #9
 8007ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ed4:	fb02 f303 	mul.w	r3, r2, r3
 8007ed8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	1e5a      	subs	r2, r3, #1
 8007ede:	60fa      	str	r2, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d102      	bne.n	8007eea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ee4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007ee8:	e02c      	b.n	8007f44 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0ef      	beq.n	8007eda <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1ea      	bne.n	8007eda <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2204      	movs	r2, #4
 8007f14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f16:	2304      	movs	r3, #4
 8007f18:	e014      	b.n	8007f44 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d004      	beq.n	8007f30 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e009      	b.n	8007f44 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2240      	movs	r2, #64	@ 0x40
 8007f40:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f42:	2300      	movs	r3, #0
  
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	2000000c 	.word	0x2000000c
 8007f54:	10624dd3 	.word	0x10624dd3

08007f58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f60:	4b11      	ldr	r3, [pc, #68]	@ (8007fa8 <SDMMC_GetCmdError+0x50>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a11      	ldr	r2, [pc, #68]	@ (8007fac <SDMMC_GetCmdError+0x54>)
 8007f66:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6a:	0a5b      	lsrs	r3, r3, #9
 8007f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f70:	fb02 f303 	mul.w	r3, r2, r3
 8007f74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	1e5a      	subs	r2, r3, #1
 8007f7a:	60fa      	str	r2, [r7, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f84:	e009      	b.n	8007f9a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0f1      	beq.n	8007f76 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	22c5      	movs	r2, #197	@ 0xc5
 8007f96:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	2000000c 	.word	0x2000000c
 8007fac:	10624dd3 	.word	0x10624dd3

08007fb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007fb4:	4904      	ldr	r1, [pc, #16]	@ (8007fc8 <MX_FATFS_Init+0x18>)
 8007fb6:	4805      	ldr	r0, [pc, #20]	@ (8007fcc <MX_FATFS_Init+0x1c>)
 8007fb8:	f002 fd2e 	bl	800aa18 <FATFS_LinkDriver>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4b03      	ldr	r3, [pc, #12]	@ (8007fd0 <MX_FATFS_Init+0x20>)
 8007fc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007fc4:	bf00      	nop
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	20000700 	.word	0x20000700
 8007fcc:	0800bc74 	.word	0x0800bc74
 8007fd0:	200006fc 	.word	0x200006fc

08007fd4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007fd8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007fee:	f000 f86b 	bl	80080c8 <BSP_SD_IsDetected>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d001      	beq.n	8007ffc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e005      	b.n	8008008 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007ffc:	4804      	ldr	r0, [pc, #16]	@ (8008010 <BSP_SD_Init+0x2c>)
 8007ffe:	f7fb fefd 	bl	8003dfc <HAL_SD_Init>
 8008002:	4603      	mov	r3, r0
 8008004:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008006:	79fb      	ldrb	r3, [r7, #7]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	200000f8 	.word	0x200000f8

08008014 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af02      	add	r7, sp, #8
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	4806      	ldr	r0, [pc, #24]	@ (800804c <BSP_SD_ReadBlocks+0x38>)
 8008032:	f7fb ff93 	bl	8003f5c <HAL_SD_ReadBlocks>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008040:	7dfb      	ldrb	r3, [r7, #23]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	200000f8 	.word	0x200000f8

08008050 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	4806      	ldr	r0, [pc, #24]	@ (8008088 <BSP_SD_WriteBlocks+0x38>)
 800806e:	f7fc f95b 	bl	8004328 <HAL_SD_WriteBlocks>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800807c:	7dfb      	ldrb	r3, [r7, #23]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	200000f8 	.word	0x200000f8

0800808c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008090:	4805      	ldr	r0, [pc, #20]	@ (80080a8 <BSP_SD_GetCardState+0x1c>)
 8008092:	f7fc fca7 	bl	80049e4 <HAL_SD_GetCardState>
 8008096:	4603      	mov	r3, r0
 8008098:	2b04      	cmp	r3, #4
 800809a:	bf14      	ite	ne
 800809c:	2301      	movne	r3, #1
 800809e:	2300      	moveq	r3, #0
 80080a0:	b2db      	uxtb	r3, r3
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	200000f8 	.word	0x200000f8

080080ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	4803      	ldr	r0, [pc, #12]	@ (80080c4 <BSP_SD_GetCardInfo+0x18>)
 80080b8:	f7fc fc68 	bl	800498c <HAL_SD_GetCardInfo>
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	200000f8 	.word	0x200000f8

080080c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80080ce:	2301      	movs	r3, #1
 80080d0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80080d2:	79fb      	ldrb	r3, [r7, #7]
 80080d4:	b2db      	uxtb	r3, r3
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
	...

080080e4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80080ee:	4b0b      	ldr	r3, [pc, #44]	@ (800811c <SD_CheckStatus+0x38>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80080f4:	f7ff ffca 	bl	800808c <BSP_SD_GetCardState>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d107      	bne.n	800810e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80080fe:	4b07      	ldr	r3, [pc, #28]	@ (800811c <SD_CheckStatus+0x38>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	b2da      	uxtb	r2, r3
 800810a:	4b04      	ldr	r3, [pc, #16]	@ (800811c <SD_CheckStatus+0x38>)
 800810c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800810e:	4b03      	ldr	r3, [pc, #12]	@ (800811c <SD_CheckStatus+0x38>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b2db      	uxtb	r3, r3
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	20000015 	.word	0x20000015

08008120 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800812a:	4b0b      	ldr	r3, [pc, #44]	@ (8008158 <SD_initialize+0x38>)
 800812c:	2201      	movs	r2, #1
 800812e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008130:	f7ff ff58 	bl	8007fe4 <BSP_SD_Init>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d107      	bne.n	800814a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff ffd1 	bl	80080e4 <SD_CheckStatus>
 8008142:	4603      	mov	r3, r0
 8008144:	461a      	mov	r2, r3
 8008146:	4b04      	ldr	r3, [pc, #16]	@ (8008158 <SD_initialize+0x38>)
 8008148:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800814a:	4b03      	ldr	r3, [pc, #12]	@ (8008158 <SD_initialize+0x38>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b2db      	uxtb	r3, r3
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20000015 	.word	0x20000015

0800815c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008166:	79fb      	ldrb	r3, [r7, #7]
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff ffbb 	bl	80080e4 <SD_CheckStatus>
 800816e:	4603      	mov	r3, r0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	607a      	str	r2, [r7, #4]
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800818c:	f04f 33ff 	mov.w	r3, #4294967295
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	68b8      	ldr	r0, [r7, #8]
 8008196:	f7ff ff3d 	bl	8008014 <BSP_SD_ReadBlocks>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d107      	bne.n	80081b0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80081a0:	bf00      	nop
 80081a2:	f7ff ff73 	bl	800808c <BSP_SD_GetCardState>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1fa      	bne.n	80081a2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b086      	sub	sp, #24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
 80081c6:	4603      	mov	r3, r0
 80081c8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80081ce:	f04f 33ff 	mov.w	r3, #4294967295
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	6879      	ldr	r1, [r7, #4]
 80081d6:	68b8      	ldr	r0, [r7, #8]
 80081d8:	f7ff ff3a 	bl	8008050 <BSP_SD_WriteBlocks>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d107      	bne.n	80081f2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80081e2:	bf00      	nop
 80081e4:	f7ff ff52 	bl	800808c <BSP_SD_GetCardState>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1fa      	bne.n	80081e4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08c      	sub	sp, #48	@ 0x30
 8008200:	af00      	add	r7, sp, #0
 8008202:	4603      	mov	r3, r0
 8008204:	603a      	str	r2, [r7, #0]
 8008206:	71fb      	strb	r3, [r7, #7]
 8008208:	460b      	mov	r3, r1
 800820a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008212:	4b25      	ldr	r3, [pc, #148]	@ (80082a8 <SD_ioctl+0xac>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <SD_ioctl+0x28>
 8008220:	2303      	movs	r3, #3
 8008222:	e03c      	b.n	800829e <SD_ioctl+0xa2>

  switch (cmd)
 8008224:	79bb      	ldrb	r3, [r7, #6]
 8008226:	2b03      	cmp	r3, #3
 8008228:	d834      	bhi.n	8008294 <SD_ioctl+0x98>
 800822a:	a201      	add	r2, pc, #4	@ (adr r2, 8008230 <SD_ioctl+0x34>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	08008241 	.word	0x08008241
 8008234:	08008249 	.word	0x08008249
 8008238:	08008261 	.word	0x08008261
 800823c:	0800827b 	.word	0x0800827b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008246:	e028      	b.n	800829a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008248:	f107 030c 	add.w	r3, r7, #12
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff ff2d 	bl	80080ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800825e:	e01c      	b.n	800829a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008260:	f107 030c 	add.w	r3, r7, #12
 8008264:	4618      	mov	r0, r3
 8008266:	f7ff ff21 	bl	80080ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800826a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826c:	b29a      	uxth	r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008278:	e00f      	b.n	800829a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800827a:	f107 030c 	add.w	r3, r7, #12
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff ff14 	bl	80080ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008286:	0a5a      	lsrs	r2, r3, #9
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008292:	e002      	b.n	800829a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008294:	2304      	movs	r3, #4
 8008296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800829a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3730      	adds	r7, #48	@ 0x30
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000015 	.word	0x20000015

080082ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	4a08      	ldr	r2, [pc, #32]	@ (80082dc <disk_status+0x30>)
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	79fa      	ldrb	r2, [r7, #7]
 80082c4:	4905      	ldr	r1, [pc, #20]	@ (80082dc <disk_status+0x30>)
 80082c6:	440a      	add	r2, r1
 80082c8:	7a12      	ldrb	r2, [r2, #8]
 80082ca:	4610      	mov	r0, r2
 80082cc:	4798      	blx	r3
 80082ce:	4603      	mov	r3, r0
 80082d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	2000072c 	.word	0x2000072c

080082e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	4a0e      	ldr	r2, [pc, #56]	@ (800832c <disk_initialize+0x4c>)
 80082f2:	5cd3      	ldrb	r3, [r2, r3]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d114      	bne.n	8008322 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80082f8:	79fb      	ldrb	r3, [r7, #7]
 80082fa:	4a0c      	ldr	r2, [pc, #48]	@ (800832c <disk_initialize+0x4c>)
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	79fa      	ldrb	r2, [r7, #7]
 8008306:	4909      	ldr	r1, [pc, #36]	@ (800832c <disk_initialize+0x4c>)
 8008308:	440a      	add	r2, r1
 800830a:	7a12      	ldrb	r2, [r2, #8]
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d103      	bne.n	8008322 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	4a03      	ldr	r2, [pc, #12]	@ (800832c <disk_initialize+0x4c>)
 800831e:	2101      	movs	r1, #1
 8008320:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008322:	7bfb      	ldrb	r3, [r7, #15]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	2000072c 	.word	0x2000072c

08008330 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008330:	b590      	push	{r4, r7, lr}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	4603      	mov	r3, r0
 800833e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	4a0a      	ldr	r2, [pc, #40]	@ (800836c <disk_read+0x3c>)
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	689c      	ldr	r4, [r3, #8]
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	4a07      	ldr	r2, [pc, #28]	@ (800836c <disk_read+0x3c>)
 8008350:	4413      	add	r3, r2
 8008352:	7a18      	ldrb	r0, [r3, #8]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	68b9      	ldr	r1, [r7, #8]
 800835a:	47a0      	blx	r4
 800835c:	4603      	mov	r3, r0
 800835e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
}
 8008362:	4618      	mov	r0, r3
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	bd90      	pop	{r4, r7, pc}
 800836a:	bf00      	nop
 800836c:	2000072c 	.word	0x2000072c

08008370 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008370:	b590      	push	{r4, r7, lr}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	4a0a      	ldr	r2, [pc, #40]	@ (80083ac <disk_write+0x3c>)
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	68dc      	ldr	r4, [r3, #12]
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	4a07      	ldr	r2, [pc, #28]	@ (80083ac <disk_write+0x3c>)
 8008390:	4413      	add	r3, r2
 8008392:	7a18      	ldrb	r0, [r3, #8]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	47a0      	blx	r4
 800839c:	4603      	mov	r3, r0
 800839e:	75fb      	strb	r3, [r7, #23]
  return res;
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd90      	pop	{r4, r7, pc}
 80083aa:	bf00      	nop
 80083ac:	2000072c 	.word	0x2000072c

080083b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	603a      	str	r2, [r7, #0]
 80083ba:	71fb      	strb	r3, [r7, #7]
 80083bc:	460b      	mov	r3, r1
 80083be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	4a09      	ldr	r2, [pc, #36]	@ (80083e8 <disk_ioctl+0x38>)
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	79fa      	ldrb	r2, [r7, #7]
 80083ce:	4906      	ldr	r1, [pc, #24]	@ (80083e8 <disk_ioctl+0x38>)
 80083d0:	440a      	add	r2, r1
 80083d2:	7a10      	ldrb	r0, [r2, #8]
 80083d4:	79b9      	ldrb	r1, [r7, #6]
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80083de:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	2000072c 	.word	0x2000072c

080083ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3301      	adds	r3, #1
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80083fc:	89fb      	ldrh	r3, [r7, #14]
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	b21a      	sxth	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	b21b      	sxth	r3, r3
 8008408:	4313      	orrs	r3, r2
 800840a:	b21b      	sxth	r3, r3
 800840c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800840e:	89fb      	ldrh	r3, [r7, #14]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3303      	adds	r3, #3
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	3202      	adds	r2, #2
 8008434:	7812      	ldrb	r2, [r2, #0]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	3201      	adds	r2, #1
 8008442:	7812      	ldrb	r2, [r2, #0]
 8008444:	4313      	orrs	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	021b      	lsls	r3, r3, #8
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	7812      	ldrb	r2, [r2, #0]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
	return rv;
 8008454:	68fb      	ldr	r3, [r7, #12]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	887a      	ldrh	r2, [r7, #2]
 8008476:	b2d2      	uxtb	r2, r2
 8008478:	701a      	strb	r2, [r3, #0]
 800847a:	887b      	ldrh	r3, [r7, #2]
 800847c:	0a1b      	lsrs	r3, r3, #8
 800847e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	887a      	ldrh	r2, [r7, #2]
 8008488:	b2d2      	uxtb	r2, r2
 800848a:	701a      	strb	r2, [r3, #0]
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	0a1b      	lsrs	r3, r3, #8
 80084b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	b2d2      	uxtb	r2, r2
 80084be:	701a      	strb	r2, [r3, #0]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	0a1b      	lsrs	r3, r3, #8
 80084c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	b2d2      	uxtb	r2, r2
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	0a1b      	lsrs	r3, r3, #8
 80084d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	607a      	str	r2, [r7, #4]
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	b2d2      	uxtb	r2, r2
 80084e2:	701a      	strb	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00d      	beq.n	8008526 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	1c53      	adds	r3, r2, #1
 800850e:	613b      	str	r3, [r7, #16]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	1c59      	adds	r1, r3, #1
 8008514:	6179      	str	r1, [r7, #20]
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3b01      	subs	r3, #1
 800851e:	607b      	str	r3, [r7, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1f1      	bne.n	800850a <mem_cpy+0x1a>
	}
}
 8008526:	bf00      	nop
 8008528:	371c      	adds	r7, #28
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008532:	b480      	push	{r7}
 8008534:	b087      	sub	sp, #28
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	617a      	str	r2, [r7, #20]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	b2d2      	uxtb	r2, r2
 800854c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3b01      	subs	r3, #1
 8008552:	607b      	str	r3, [r7, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1f3      	bne.n	8008542 <mem_set+0x10>
}
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	371c      	adds	r7, #28
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008568:	b480      	push	{r7}
 800856a:	b089      	sub	sp, #36	@ 0x24
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	61fb      	str	r3, [r7, #28]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	61fa      	str	r2, [r7, #28]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	4619      	mov	r1, r3
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	61ba      	str	r2, [r7, #24]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	1acb      	subs	r3, r1, r3
 8008594:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3b01      	subs	r3, #1
 800859a:	607b      	str	r3, [r7, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <mem_cmp+0x40>
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0eb      	beq.n	8008580 <mem_cmp+0x18>

	return r;
 80085a8:	697b      	ldr	r3, [r7, #20]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3724      	adds	r7, #36	@ 0x24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80085c0:	e002      	b.n	80085c8 <chk_chr+0x12>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3301      	adds	r3, #1
 80085c6:	607b      	str	r3, [r7, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d005      	beq.n	80085dc <chk_chr+0x26>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	461a      	mov	r2, r3
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	4293      	cmp	r3, r2
 80085da:	d1f2      	bne.n	80085c2 <chk_chr+0xc>
	return *str;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	781b      	ldrb	r3, [r3, #0]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80085f6:	2300      	movs	r3, #0
 80085f8:	60bb      	str	r3, [r7, #8]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	e029      	b.n	8008654 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008600:	4a27      	ldr	r2, [pc, #156]	@ (80086a0 <chk_lock+0xb4>)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	011b      	lsls	r3, r3, #4
 8008606:	4413      	add	r3, r2
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01d      	beq.n	800864a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800860e:	4a24      	ldr	r2, [pc, #144]	@ (80086a0 <chk_lock+0xb4>)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	011b      	lsls	r3, r3, #4
 8008614:	4413      	add	r3, r2
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d116      	bne.n	800864e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008620:	4a1f      	ldr	r2, [pc, #124]	@ (80086a0 <chk_lock+0xb4>)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	011b      	lsls	r3, r3, #4
 8008626:	4413      	add	r3, r2
 8008628:	3304      	adds	r3, #4
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008630:	429a      	cmp	r2, r3
 8008632:	d10c      	bne.n	800864e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008634:	4a1a      	ldr	r2, [pc, #104]	@ (80086a0 <chk_lock+0xb4>)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	4413      	add	r3, r2
 800863c:	3308      	adds	r3, #8
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008644:	429a      	cmp	r2, r3
 8008646:	d102      	bne.n	800864e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008648:	e007      	b.n	800865a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800864a:	2301      	movs	r3, #1
 800864c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3301      	adds	r3, #1
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d9d2      	bls.n	8008600 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d109      	bne.n	8008674 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <chk_lock+0x80>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d101      	bne.n	8008670 <chk_lock+0x84>
 800866c:	2300      	movs	r3, #0
 800866e:	e010      	b.n	8008692 <chk_lock+0xa6>
 8008670:	2312      	movs	r3, #18
 8008672:	e00e      	b.n	8008692 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d108      	bne.n	800868c <chk_lock+0xa0>
 800867a:	4a09      	ldr	r2, [pc, #36]	@ (80086a0 <chk_lock+0xb4>)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	4413      	add	r3, r2
 8008682:	330c      	adds	r3, #12
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800868a:	d101      	bne.n	8008690 <chk_lock+0xa4>
 800868c:	2310      	movs	r3, #16
 800868e:	e000      	b.n	8008692 <chk_lock+0xa6>
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	2000070c 	.word	0x2000070c

080086a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80086aa:	2300      	movs	r3, #0
 80086ac:	607b      	str	r3, [r7, #4]
 80086ae:	e002      	b.n	80086b6 <enq_lock+0x12>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3301      	adds	r3, #1
 80086b4:	607b      	str	r3, [r7, #4]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d806      	bhi.n	80086ca <enq_lock+0x26>
 80086bc:	4a09      	ldr	r2, [pc, #36]	@ (80086e4 <enq_lock+0x40>)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	011b      	lsls	r3, r3, #4
 80086c2:	4413      	add	r3, r2
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1f2      	bne.n	80086b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	bf14      	ite	ne
 80086d0:	2301      	movne	r3, #1
 80086d2:	2300      	moveq	r3, #0
 80086d4:	b2db      	uxtb	r3, r3
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	2000070c 	.word	0x2000070c

080086e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	e01f      	b.n	8008738 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80086f8:	4a41      	ldr	r2, [pc, #260]	@ (8008800 <inc_lock+0x118>)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	011b      	lsls	r3, r3, #4
 80086fe:	4413      	add	r3, r2
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	429a      	cmp	r2, r3
 8008708:	d113      	bne.n	8008732 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800870a:	4a3d      	ldr	r2, [pc, #244]	@ (8008800 <inc_lock+0x118>)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	4413      	add	r3, r2
 8008712:	3304      	adds	r3, #4
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800871a:	429a      	cmp	r2, r3
 800871c:	d109      	bne.n	8008732 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800871e:	4a38      	ldr	r2, [pc, #224]	@ (8008800 <inc_lock+0x118>)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	011b      	lsls	r3, r3, #4
 8008724:	4413      	add	r3, r2
 8008726:	3308      	adds	r3, #8
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800872e:	429a      	cmp	r2, r3
 8008730:	d006      	beq.n	8008740 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3301      	adds	r3, #1
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d9dc      	bls.n	80086f8 <inc_lock+0x10>
 800873e:	e000      	b.n	8008742 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008740:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b02      	cmp	r3, #2
 8008746:	d132      	bne.n	80087ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	e002      	b.n	8008754 <inc_lock+0x6c>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d806      	bhi.n	8008768 <inc_lock+0x80>
 800875a:	4a29      	ldr	r2, [pc, #164]	@ (8008800 <inc_lock+0x118>)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	4413      	add	r3, r2
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1f2      	bne.n	800874e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d101      	bne.n	8008772 <inc_lock+0x8a>
 800876e:	2300      	movs	r3, #0
 8008770:	e040      	b.n	80087f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	4922      	ldr	r1, [pc, #136]	@ (8008800 <inc_lock+0x118>)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	440b      	add	r3, r1
 800877e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	491e      	ldr	r1, [pc, #120]	@ (8008800 <inc_lock+0x118>)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	440b      	add	r3, r1
 800878c:	3304      	adds	r3, #4
 800878e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	695a      	ldr	r2, [r3, #20]
 8008794:	491a      	ldr	r1, [pc, #104]	@ (8008800 <inc_lock+0x118>)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	011b      	lsls	r3, r3, #4
 800879a:	440b      	add	r3, r1
 800879c:	3308      	adds	r3, #8
 800879e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80087a0:	4a17      	ldr	r2, [pc, #92]	@ (8008800 <inc_lock+0x118>)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	011b      	lsls	r3, r3, #4
 80087a6:	4413      	add	r3, r2
 80087a8:	330c      	adds	r3, #12
 80087aa:	2200      	movs	r2, #0
 80087ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <inc_lock+0xe0>
 80087b4:	4a12      	ldr	r2, [pc, #72]	@ (8008800 <inc_lock+0x118>)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	4413      	add	r3, r2
 80087bc:	330c      	adds	r3, #12
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <inc_lock+0xe0>
 80087c4:	2300      	movs	r3, #0
 80087c6:	e015      	b.n	80087f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d108      	bne.n	80087e0 <inc_lock+0xf8>
 80087ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008800 <inc_lock+0x118>)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	4413      	add	r3, r2
 80087d6:	330c      	adds	r3, #12
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	3301      	adds	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	e001      	b.n	80087e4 <inc_lock+0xfc>
 80087e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087e4:	4906      	ldr	r1, [pc, #24]	@ (8008800 <inc_lock+0x118>)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	011b      	lsls	r3, r3, #4
 80087ea:	440b      	add	r3, r1
 80087ec:	330c      	adds	r3, #12
 80087ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3301      	adds	r3, #1
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	2000070c 	.word	0x2000070c

08008804 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3b01      	subs	r3, #1
 8008810:	607b      	str	r3, [r7, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d825      	bhi.n	8008864 <dec_lock+0x60>
		n = Files[i].ctr;
 8008818:	4a17      	ldr	r2, [pc, #92]	@ (8008878 <dec_lock+0x74>)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	4413      	add	r3, r2
 8008820:	330c      	adds	r3, #12
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008826:	89fb      	ldrh	r3, [r7, #14]
 8008828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800882c:	d101      	bne.n	8008832 <dec_lock+0x2e>
 800882e:	2300      	movs	r3, #0
 8008830:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008832:	89fb      	ldrh	r3, [r7, #14]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <dec_lock+0x3a>
 8008838:	89fb      	ldrh	r3, [r7, #14]
 800883a:	3b01      	subs	r3, #1
 800883c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800883e:	4a0e      	ldr	r2, [pc, #56]	@ (8008878 <dec_lock+0x74>)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	4413      	add	r3, r2
 8008846:	330c      	adds	r3, #12
 8008848:	89fa      	ldrh	r2, [r7, #14]
 800884a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800884c:	89fb      	ldrh	r3, [r7, #14]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d105      	bne.n	800885e <dec_lock+0x5a>
 8008852:	4a09      	ldr	r2, [pc, #36]	@ (8008878 <dec_lock+0x74>)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	4413      	add	r3, r2
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	737b      	strb	r3, [r7, #13]
 8008862:	e001      	b.n	8008868 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008864:	2302      	movs	r3, #2
 8008866:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008868:	7b7b      	ldrb	r3, [r7, #13]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	2000070c 	.word	0x2000070c

0800887c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e010      	b.n	80088ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800888a:	4a0d      	ldr	r2, [pc, #52]	@ (80088c0 <clear_lock+0x44>)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	4413      	add	r3, r2
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	429a      	cmp	r2, r3
 8008898:	d105      	bne.n	80088a6 <clear_lock+0x2a>
 800889a:	4a09      	ldr	r2, [pc, #36]	@ (80088c0 <clear_lock+0x44>)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	4413      	add	r3, r2
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3301      	adds	r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d9eb      	bls.n	800888a <clear_lock+0xe>
	}
}
 80088b2:	bf00      	nop
 80088b4:	bf00      	nop
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	2000070c 	.word	0x2000070c

080088c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	78db      	ldrb	r3, [r3, #3]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d034      	beq.n	8008942 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	7858      	ldrb	r0, [r3, #1]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80088e8:	2301      	movs	r3, #1
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	f7ff fd40 	bl	8008370 <disk_write>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	73fb      	strb	r3, [r7, #15]
 80088fa:	e022      	b.n	8008942 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	1ad2      	subs	r2, r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	429a      	cmp	r2, r3
 8008910:	d217      	bcs.n	8008942 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	789b      	ldrb	r3, [r3, #2]
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	e010      	b.n	800893c <sync_window+0x78>
					wsect += fs->fsize;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	4413      	add	r3, r2
 8008922:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7858      	ldrb	r0, [r3, #1]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800892e:	2301      	movs	r3, #1
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	f7ff fd1d 	bl	8008370 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	3b01      	subs	r3, #1
 800893a:	613b      	str	r3, [r7, #16]
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d8eb      	bhi.n	800891a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	429a      	cmp	r2, r3
 8008962:	d01b      	beq.n	800899c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff ffad 	bl	80088c4 <sync_window>
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d113      	bne.n	800899c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	7858      	ldrb	r0, [r3, #1]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800897e:	2301      	movs	r3, #1
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	f7ff fcd5 	bl	8008330 <disk_read>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d004      	beq.n	8008996 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008992:	2301      	movs	r3, #1
 8008994:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
	...

080089a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff ff87 	bl	80088c4 <sync_window>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d158      	bne.n	8008a72 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d148      	bne.n	8008a5a <sync_fs+0xb2>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	791b      	ldrb	r3, [r3, #4]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d144      	bne.n	8008a5a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3330      	adds	r3, #48	@ 0x30
 80089d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089d8:	2100      	movs	r1, #0
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff fda9 	bl	8008532 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3330      	adds	r3, #48	@ 0x30
 80089e4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80089e8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7ff fd38 	bl	8008462 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3330      	adds	r3, #48	@ 0x30
 80089f6:	4921      	ldr	r1, [pc, #132]	@ (8008a7c <sync_fs+0xd4>)
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fd4d 	bl	8008498 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3330      	adds	r3, #48	@ 0x30
 8008a02:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008a06:	491e      	ldr	r1, [pc, #120]	@ (8008a80 <sync_fs+0xd8>)
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7ff fd45 	bl	8008498 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3330      	adds	r3, #48	@ 0x30
 8008a12:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	f7ff fd3b 	bl	8008498 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3330      	adds	r3, #48	@ 0x30
 8008a26:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f7ff fd31 	bl	8008498 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	7858      	ldrb	r0, [r3, #1]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f7ff fc8e 	bl	8008370 <disk_write>
			fs->fsi_flag = 0;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2100      	movs	r1, #0
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff fca4 	bl	80083b0 <disk_ioctl>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <sync_fs+0xca>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	41615252 	.word	0x41615252
 8008a80:	61417272 	.word	0x61417272

08008a84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	3b02      	subs	r3, #2
 8008a92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	3b02      	subs	r3, #2
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d301      	bcc.n	8008aa4 <clust2sect+0x20>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e008      	b.n	8008ab6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	895b      	ldrh	r3, [r3, #10]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	fb03 f202 	mul.w	r2, r3, r2
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab4:	4413      	add	r3, r2
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b086      	sub	sp, #24
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d904      	bls.n	8008ae2 <get_fat+0x20>
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d302      	bcc.n	8008ae8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	e08e      	b.n	8008c06 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8008aec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d061      	beq.n	8008bba <get_fat+0xf8>
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	dc7b      	bgt.n	8008bf2 <get_fat+0x130>
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d002      	beq.n	8008b04 <get_fat+0x42>
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d041      	beq.n	8008b86 <get_fat+0xc4>
 8008b02:	e076      	b.n	8008bf2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	085b      	lsrs	r3, r3, #1
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	6a1a      	ldr	r2, [r3, #32]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	0a5b      	lsrs	r3, r3, #9
 8008b1a:	4413      	add	r3, r2
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6938      	ldr	r0, [r7, #16]
 8008b20:	f7ff ff14 	bl	800894c <move_window>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d166      	bne.n	8008bf8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	1c5a      	adds	r2, r3, #1
 8008b2e:	60fa      	str	r2, [r7, #12]
 8008b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	4413      	add	r3, r2
 8008b38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008b3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	6a1a      	ldr	r2, [r3, #32]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	0a5b      	lsrs	r3, r3, #9
 8008b46:	4413      	add	r3, r2
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6938      	ldr	r0, [r7, #16]
 8008b4c:	f7ff fefe 	bl	800894c <move_window>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d152      	bne.n	8008bfc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <get_fat+0xba>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	091b      	lsrs	r3, r3, #4
 8008b7a:	e002      	b.n	8008b82 <get_fat+0xc0>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b82:	617b      	str	r3, [r7, #20]
			break;
 8008b84:	e03f      	b.n	8008c06 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6a1a      	ldr	r2, [r3, #32]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	0a1b      	lsrs	r3, r3, #8
 8008b8e:	4413      	add	r3, r2
 8008b90:	4619      	mov	r1, r3
 8008b92:	6938      	ldr	r0, [r7, #16]
 8008b94:	f7ff feda 	bl	800894c <move_window>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d130      	bne.n	8008c00 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008bac:	4413      	add	r3, r2
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff fc1c 	bl	80083ec <ld_word>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	617b      	str	r3, [r7, #20]
			break;
 8008bb8:	e025      	b.n	8008c06 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	6a1a      	ldr	r2, [r3, #32]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	09db      	lsrs	r3, r3, #7
 8008bc2:	4413      	add	r3, r2
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6938      	ldr	r0, [r7, #16]
 8008bc8:	f7ff fec0 	bl	800894c <move_window>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d118      	bne.n	8008c04 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008be0:	4413      	add	r3, r2
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff fc1a 	bl	800841c <ld_dword>
 8008be8:	4603      	mov	r3, r0
 8008bea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008bee:	617b      	str	r3, [r7, #20]
			break;
 8008bf0:	e009      	b.n	8008c06 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	617b      	str	r3, [r7, #20]
 8008bf6:	e006      	b.n	8008c06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008bf8:	bf00      	nop
 8008bfa:	e004      	b.n	8008c06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008bfc:	bf00      	nop
 8008bfe:	e002      	b.n	8008c06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c00:	bf00      	nop
 8008c02:	e000      	b.n	8008c06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c04:	bf00      	nop
		}
	}

	return val;
 8008c06:	697b      	ldr	r3, [r7, #20]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008c10:	b590      	push	{r4, r7, lr}
 8008c12:	b089      	sub	sp, #36	@ 0x24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	f240 80d9 	bls.w	8008dda <put_fat+0x1ca>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	f080 80d3 	bcs.w	8008dda <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	f000 8096 	beq.w	8008d6a <put_fat+0x15a>
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	f300 80cb 	bgt.w	8008dda <put_fat+0x1ca>
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d002      	beq.n	8008c4e <put_fat+0x3e>
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d06e      	beq.n	8008d2a <put_fat+0x11a>
 8008c4c:	e0c5      	b.n	8008dda <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	61bb      	str	r3, [r7, #24]
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	085b      	lsrs	r3, r3, #1
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	4413      	add	r3, r2
 8008c5a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a1a      	ldr	r2, [r3, #32]
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	0a5b      	lsrs	r3, r3, #9
 8008c64:	4413      	add	r3, r2
 8008c66:	4619      	mov	r1, r3
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f7ff fe6f 	bl	800894c <move_window>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c72:	7ffb      	ldrb	r3, [r7, #31]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 80a9 	bne.w	8008dcc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	1c59      	adds	r1, r3, #1
 8008c84:	61b9      	str	r1, [r7, #24]
 8008c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8a:	4413      	add	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00d      	beq.n	8008cb4 <put_fat+0xa4>
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	b25b      	sxtb	r3, r3
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	b25a      	sxtb	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	b25b      	sxtb	r3, r3
 8008cac:	4313      	orrs	r3, r2
 8008cae:	b25b      	sxtb	r3, r3
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	e001      	b.n	8008cb8 <put_fat+0xa8>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1a      	ldr	r2, [r3, #32]
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	0a5b      	lsrs	r3, r3, #9
 8008cca:	4413      	add	r3, r2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7ff fe3c 	bl	800894c <move_window>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008cd8:	7ffb      	ldrb	r3, [r7, #31]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d178      	bne.n	8008dd0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cea:	4413      	add	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <put_fat+0xf0>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	091b      	lsrs	r3, r3, #4
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	e00e      	b.n	8008d1e <put_fat+0x10e>
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	b25b      	sxtb	r3, r3
 8008d06:	f023 030f 	bic.w	r3, r3, #15
 8008d0a:	b25a      	sxtb	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	0a1b      	lsrs	r3, r3, #8
 8008d10:	b25b      	sxtb	r3, r3
 8008d12:	f003 030f 	and.w	r3, r3, #15
 8008d16:	b25b      	sxtb	r3, r3
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	b25b      	sxtb	r3, r3
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2201      	movs	r2, #1
 8008d26:	70da      	strb	r2, [r3, #3]
			break;
 8008d28:	e057      	b.n	8008dda <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a1a      	ldr	r2, [r3, #32]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	0a1b      	lsrs	r3, r3, #8
 8008d32:	4413      	add	r3, r2
 8008d34:	4619      	mov	r1, r3
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f7ff fe08 	bl	800894c <move_window>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d40:	7ffb      	ldrb	r3, [r7, #31]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d146      	bne.n	8008dd4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008d54:	4413      	add	r3, r2
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	b292      	uxth	r2, r2
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff fb80 	bl	8008462 <st_word>
			fs->wflag = 1;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	70da      	strb	r2, [r3, #3]
			break;
 8008d68:	e037      	b.n	8008dda <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1a      	ldr	r2, [r3, #32]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	09db      	lsrs	r3, r3, #7
 8008d72:	4413      	add	r3, r2
 8008d74:	4619      	mov	r1, r3
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7ff fde8 	bl	800894c <move_window>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d80:	7ffb      	ldrb	r3, [r7, #31]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d128      	bne.n	8008dd8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008d9a:	4413      	add	r3, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7ff fb3d 	bl	800841c <ld_dword>
 8008da2:	4603      	mov	r3, r0
 8008da4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008da8:	4323      	orrs	r3, r4
 8008daa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008dba:	4413      	add	r3, r2
 8008dbc:	6879      	ldr	r1, [r7, #4]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff fb6a 	bl	8008498 <st_dword>
			fs->wflag = 1;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	70da      	strb	r2, [r3, #3]
			break;
 8008dca:	e006      	b.n	8008dda <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008dcc:	bf00      	nop
 8008dce:	e004      	b.n	8008dda <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008dd0:	bf00      	nop
 8008dd2:	e002      	b.n	8008dda <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008dd4:	bf00      	nop
 8008dd6:	e000      	b.n	8008dda <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008dd8:	bf00      	nop
		}
	}
	return res;
 8008dda:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3724      	adds	r7, #36	@ 0x24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd90      	pop	{r4, r7, pc}

08008de4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b088      	sub	sp, #32
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d904      	bls.n	8008e0a <remove_chain+0x26>
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d301      	bcc.n	8008e0e <remove_chain+0x2a>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	e04b      	b.n	8008ea6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00c      	beq.n	8008e2e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008e14:	f04f 32ff 	mov.w	r2, #4294967295
 8008e18:	6879      	ldr	r1, [r7, #4]
 8008e1a:	69b8      	ldr	r0, [r7, #24]
 8008e1c:	f7ff fef8 	bl	8008c10 <put_fat>
 8008e20:	4603      	mov	r3, r0
 8008e22:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008e24:	7ffb      	ldrb	r3, [r7, #31]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <remove_chain+0x4a>
 8008e2a:	7ffb      	ldrb	r3, [r7, #31]
 8008e2c:	e03b      	b.n	8008ea6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f7ff fe46 	bl	8008ac2 <get_fat>
 8008e36:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d031      	beq.n	8008ea2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d101      	bne.n	8008e48 <remove_chain+0x64>
 8008e44:	2302      	movs	r3, #2
 8008e46:	e02e      	b.n	8008ea6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4e:	d101      	bne.n	8008e54 <remove_chain+0x70>
 8008e50:	2301      	movs	r3, #1
 8008e52:	e028      	b.n	8008ea6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008e54:	2200      	movs	r2, #0
 8008e56:	68b9      	ldr	r1, [r7, #8]
 8008e58:	69b8      	ldr	r0, [r7, #24]
 8008e5a:	f7ff fed9 	bl	8008c10 <put_fat>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008e62:	7ffb      	ldrb	r3, [r7, #31]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <remove_chain+0x88>
 8008e68:	7ffb      	ldrb	r3, [r7, #31]
 8008e6a:	e01c      	b.n	8008ea6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	691a      	ldr	r2, [r3, #16]
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	3b02      	subs	r3, #2
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d20b      	bcs.n	8008e92 <remove_chain+0xae>
			fs->free_clst++;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	791b      	ldrb	r3, [r3, #4]
 8008e88:	f043 0301 	orr.w	r3, r3, #1
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d3c6      	bcc.n	8008e2e <remove_chain+0x4a>
 8008ea0:	e000      	b.n	8008ea4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008ea2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3720      	adds	r7, #32
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b088      	sub	sp, #32
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10d      	bne.n	8008ee0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <create_chain+0x2c>
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d31b      	bcc.n	8008f12 <create_chain+0x64>
 8008eda:	2301      	movs	r3, #1
 8008edc:	61bb      	str	r3, [r7, #24]
 8008ede:	e018      	b.n	8008f12 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff fded 	bl	8008ac2 <get_fat>
 8008ee8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d801      	bhi.n	8008ef4 <create_chain+0x46>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e070      	b.n	8008fd6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efa:	d101      	bne.n	8008f00 <create_chain+0x52>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	e06a      	b.n	8008fd6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d201      	bcs.n	8008f0e <create_chain+0x60>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	e063      	b.n	8008fd6 <create_chain+0x128>
		scl = clst;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	69fa      	ldr	r2, [r7, #28]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d307      	bcc.n	8008f36 <create_chain+0x88>
				ncl = 2;
 8008f26:	2302      	movs	r3, #2
 8008f28:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d901      	bls.n	8008f36 <create_chain+0x88>
 8008f32:	2300      	movs	r3, #0
 8008f34:	e04f      	b.n	8008fd6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008f36:	69f9      	ldr	r1, [r7, #28]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff fdc2 	bl	8008ac2 <get_fat>
 8008f3e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00e      	beq.n	8008f64 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d003      	beq.n	8008f54 <create_chain+0xa6>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f52:	d101      	bne.n	8008f58 <create_chain+0xaa>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	e03e      	b.n	8008fd6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008f58:	69fa      	ldr	r2, [r7, #28]
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d1da      	bne.n	8008f16 <create_chain+0x68>
 8008f60:	2300      	movs	r3, #0
 8008f62:	e038      	b.n	8008fd6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008f64:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008f66:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6a:	69f9      	ldr	r1, [r7, #28]
 8008f6c:	6938      	ldr	r0, [r7, #16]
 8008f6e:	f7ff fe4f 	bl	8008c10 <put_fat>
 8008f72:	4603      	mov	r3, r0
 8008f74:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d109      	bne.n	8008f90 <create_chain+0xe2>
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d006      	beq.n	8008f90 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008f82:	69fa      	ldr	r2, [r7, #28]
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6938      	ldr	r0, [r7, #16]
 8008f88:	f7ff fe42 	bl	8008c10 <put_fat>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d116      	bne.n	8008fc4 <create_chain+0x116>
		fs->last_clst = ncl;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	69fa      	ldr	r2, [r7, #28]
 8008f9a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	691a      	ldr	r2, [r3, #16]
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	695b      	ldr	r3, [r3, #20]
 8008fa4:	3b02      	subs	r3, #2
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d804      	bhi.n	8008fb4 <create_chain+0x106>
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	1e5a      	subs	r2, r3, #1
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	791b      	ldrb	r3, [r3, #4]
 8008fb8:	f043 0301 	orr.w	r3, r3, #1
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	711a      	strb	r2, [r3, #4]
 8008fc2:	e007      	b.n	8008fd4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d102      	bne.n	8008fd0 <create_chain+0x122>
 8008fca:	f04f 33ff 	mov.w	r3, #4294967295
 8008fce:	e000      	b.n	8008fd2 <create_chain+0x124>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008fd4:	69fb      	ldr	r3, [r7, #28]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b087      	sub	sp, #28
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	0a5b      	lsrs	r3, r3, #9
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	8952      	ldrh	r2, [r2, #10]
 8008ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009002:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	1d1a      	adds	r2, r3, #4
 8009008:	613a      	str	r2, [r7, #16]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <clmt_clust+0x3a>
 8009014:	2300      	movs	r3, #0
 8009016:	e010      	b.n	800903a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	429a      	cmp	r2, r3
 800901e:	d307      	bcc.n	8009030 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	617b      	str	r3, [r7, #20]
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	3304      	adds	r3, #4
 800902c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800902e:	e7e9      	b.n	8009004 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009030:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	4413      	add	r3, r2
}
 800903a:	4618      	mov	r0, r3
 800903c:	371c      	adds	r7, #28
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b086      	sub	sp, #24
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800905c:	d204      	bcs.n	8009068 <dir_sdi+0x22>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	f003 031f 	and.w	r3, r3, #31
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <dir_sdi+0x26>
		return FR_INT_ERR;
 8009068:	2302      	movs	r3, #2
 800906a:	e063      	b.n	8009134 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d106      	bne.n	800908c <dir_sdi+0x46>
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2b02      	cmp	r3, #2
 8009084:	d902      	bls.n	800908c <dir_sdi+0x46>
		clst = fs->dirbase;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10c      	bne.n	80090ac <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	095b      	lsrs	r3, r3, #5
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	8912      	ldrh	r2, [r2, #8]
 800909a:	4293      	cmp	r3, r2
 800909c:	d301      	bcc.n	80090a2 <dir_sdi+0x5c>
 800909e:	2302      	movs	r3, #2
 80090a0:	e048      	b.n	8009134 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	61da      	str	r2, [r3, #28]
 80090aa:	e029      	b.n	8009100 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	895b      	ldrh	r3, [r3, #10]
 80090b0:	025b      	lsls	r3, r3, #9
 80090b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80090b4:	e019      	b.n	80090ea <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6979      	ldr	r1, [r7, #20]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff fd01 	bl	8008ac2 <get_fat>
 80090c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c8:	d101      	bne.n	80090ce <dir_sdi+0x88>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e032      	b.n	8009134 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d904      	bls.n	80090de <dir_sdi+0x98>
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d301      	bcc.n	80090e2 <dir_sdi+0x9c>
 80090de:	2302      	movs	r3, #2
 80090e0:	e028      	b.n	8009134 <dir_sdi+0xee>
			ofs -= csz;
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d2e1      	bcs.n	80090b6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80090f2:	6979      	ldr	r1, [r7, #20]
 80090f4:	6938      	ldr	r0, [r7, #16]
 80090f6:	f7ff fcc5 	bl	8008a84 <clust2sect>
 80090fa:	4602      	mov	r2, r0
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <dir_sdi+0xcc>
 800910e:	2302      	movs	r3, #2
 8009110:	e010      	b.n	8009134 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69da      	ldr	r2, [r3, #28]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	0a5b      	lsrs	r3, r3, #9
 800911a:	441a      	add	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912c:	441a      	add	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	3320      	adds	r3, #32
 8009152:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <dir_next+0x28>
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009162:	d301      	bcc.n	8009168 <dir_next+0x2c>
 8009164:	2304      	movs	r3, #4
 8009166:	e0aa      	b.n	80092be <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916e:	2b00      	cmp	r3, #0
 8009170:	f040 8098 	bne.w	80092a4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	095b      	lsrs	r3, r3, #5
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	8912      	ldrh	r2, [r2, #8]
 800918e:	4293      	cmp	r3, r2
 8009190:	f0c0 8088 	bcc.w	80092a4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	61da      	str	r2, [r3, #28]
 800919a:	2304      	movs	r3, #4
 800919c:	e08f      	b.n	80092be <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	0a5b      	lsrs	r3, r3, #9
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	8952      	ldrh	r2, [r2, #10]
 80091a6:	3a01      	subs	r2, #1
 80091a8:	4013      	ands	r3, r2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d17a      	bne.n	80092a4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	4619      	mov	r1, r3
 80091b6:	4610      	mov	r0, r2
 80091b8:	f7ff fc83 	bl	8008ac2 <get_fat>
 80091bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d801      	bhi.n	80091c8 <dir_next+0x8c>
 80091c4:	2302      	movs	r3, #2
 80091c6:	e07a      	b.n	80092be <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ce:	d101      	bne.n	80091d4 <dir_next+0x98>
 80091d0:	2301      	movs	r3, #1
 80091d2:	e074      	b.n	80092be <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d358      	bcc.n	8009290 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d104      	bne.n	80091ee <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	61da      	str	r2, [r3, #28]
 80091ea:	2304      	movs	r3, #4
 80091ec:	e067      	b.n	80092be <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	f7ff fe59 	bl	8008eae <create_chain>
 80091fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d101      	bne.n	8009208 <dir_next+0xcc>
 8009204:	2307      	movs	r3, #7
 8009206:	e05a      	b.n	80092be <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d101      	bne.n	8009212 <dir_next+0xd6>
 800920e:	2302      	movs	r3, #2
 8009210:	e055      	b.n	80092be <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009218:	d101      	bne.n	800921e <dir_next+0xe2>
 800921a:	2301      	movs	r3, #1
 800921c:	e04f      	b.n	80092be <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f7ff fb50 	bl	80088c4 <sync_window>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <dir_next+0xf2>
 800922a:	2301      	movs	r3, #1
 800922c:	e047      	b.n	80092be <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3330      	adds	r3, #48	@ 0x30
 8009232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff f97a 	bl	8008532 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800923e:	2300      	movs	r3, #0
 8009240:	613b      	str	r3, [r7, #16]
 8009242:	6979      	ldr	r1, [r7, #20]
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f7ff fc1d 	bl	8008a84 <clust2sect>
 800924a:	4602      	mov	r2, r0
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009250:	e012      	b.n	8009278 <dir_next+0x13c>
						fs->wflag = 1;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2201      	movs	r2, #1
 8009256:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f7ff fb33 	bl	80088c4 <sync_window>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <dir_next+0x12c>
 8009264:	2301      	movs	r3, #1
 8009266:	e02a      	b.n	80092be <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	3301      	adds	r3, #1
 800926c:	613b      	str	r3, [r7, #16]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	895b      	ldrh	r3, [r3, #10]
 800927c:	461a      	mov	r2, r3
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	4293      	cmp	r3, r2
 8009282:	d3e6      	bcc.n	8009252 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	1ad2      	subs	r2, r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009296:	6979      	ldr	r1, [r7, #20]
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f7ff fbf3 	bl	8008a84 <clust2sect>
 800929e:	4602      	mov	r2, r0
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b6:	441a      	add	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3718      	adds	r7, #24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b086      	sub	sp, #24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80092d6:	2100      	movs	r1, #0
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7ff feb4 	bl	8009046 <dir_sdi>
 80092de:	4603      	mov	r3, r0
 80092e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d12b      	bne.n	8009340 <dir_alloc+0x7a>
		n = 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	4619      	mov	r1, r3
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f7ff fb2a 	bl	800894c <move_window>
 80092f8:	4603      	mov	r3, r0
 80092fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d11d      	bne.n	800933e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	2be5      	cmp	r3, #229	@ 0xe5
 800930a:	d004      	beq.n	8009316 <dir_alloc+0x50>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d107      	bne.n	8009326 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	3301      	adds	r3, #1
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d102      	bne.n	800932a <dir_alloc+0x64>
 8009324:	e00c      	b.n	8009340 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009326:	2300      	movs	r3, #0
 8009328:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800932a:	2101      	movs	r1, #1
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff ff05 	bl	800913c <dir_next>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0d7      	beq.n	80092ec <dir_alloc+0x26>
 800933c:	e000      	b.n	8009340 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800933e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	2b04      	cmp	r3, #4
 8009344:	d101      	bne.n	800934a <dir_alloc+0x84>
 8009346:	2307      	movs	r3, #7
 8009348:	75fb      	strb	r3, [r7, #23]
	return res;
 800934a:	7dfb      	ldrb	r3, [r7, #23]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	331a      	adds	r3, #26
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff f842 	bl	80083ec <ld_word>
 8009368:	4603      	mov	r3, r0
 800936a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b03      	cmp	r3, #3
 8009372:	d109      	bne.n	8009388 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	3314      	adds	r3, #20
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff f837 	bl	80083ec <ld_word>
 800937e:	4603      	mov	r3, r0
 8009380:	041b      	lsls	r3, r3, #16
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	4313      	orrs	r3, r2
 8009386:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009388:	68fb      	ldr	r3, [r7, #12]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b084      	sub	sp, #16
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	331a      	adds	r3, #26
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	b292      	uxth	r2, r2
 80093a6:	4611      	mov	r1, r2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff f85a 	bl	8008462 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d109      	bne.n	80093ca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	f103 0214 	add.w	r2, r3, #20
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	0c1b      	lsrs	r3, r3, #16
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7ff f84c 	bl	8008462 <st_word>
	}
}
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b086      	sub	sp, #24
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80093e0:	2100      	movs	r1, #0
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff fe2f 	bl	8009046 <dir_sdi>
 80093e8:	4603      	mov	r3, r0
 80093ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80093ec:	7dfb      	ldrb	r3, [r7, #23]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <dir_find+0x24>
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
 80093f4:	e03e      	b.n	8009474 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	69db      	ldr	r3, [r3, #28]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6938      	ldr	r0, [r7, #16]
 80093fe:	f7ff faa5 	bl	800894c <move_window>
 8009402:	4603      	mov	r3, r0
 8009404:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d12f      	bne.n	800946c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a1b      	ldr	r3, [r3, #32]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009414:	7bfb      	ldrb	r3, [r7, #15]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d102      	bne.n	8009420 <dir_find+0x4e>
 800941a:	2304      	movs	r3, #4
 800941c:	75fb      	strb	r3, [r7, #23]
 800941e:	e028      	b.n	8009472 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	330b      	adds	r3, #11
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800942c:	b2da      	uxtb	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	330b      	adds	r3, #11
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	f003 0308 	and.w	r3, r3, #8
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10a      	bne.n	8009458 <dir_find+0x86>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a18      	ldr	r0, [r3, #32]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3324      	adds	r3, #36	@ 0x24
 800944a:	220b      	movs	r2, #11
 800944c:	4619      	mov	r1, r3
 800944e:	f7ff f88b 	bl	8008568 <mem_cmp>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009458:	2100      	movs	r1, #0
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff fe6e 	bl	800913c <dir_next>
 8009460:	4603      	mov	r3, r0
 8009462:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d0c5      	beq.n	80093f6 <dir_find+0x24>
 800946a:	e002      	b.n	8009472 <dir_find+0xa0>
		if (res != FR_OK) break;
 800946c:	bf00      	nop
 800946e:	e000      	b.n	8009472 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009470:	bf00      	nop

	return res;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800948a:	2101      	movs	r1, #1
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7ff ff1a 	bl	80092c6 <dir_alloc>
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d11c      	bne.n	80094d6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	4619      	mov	r1, r3
 80094a2:	68b8      	ldr	r0, [r7, #8]
 80094a4:	f7ff fa52 	bl	800894c <move_window>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d111      	bne.n	80094d6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	2220      	movs	r2, #32
 80094b8:	2100      	movs	r1, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff f839 	bl	8008532 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a18      	ldr	r0, [r3, #32]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3324      	adds	r3, #36	@ 0x24
 80094c8:	220b      	movs	r2, #11
 80094ca:	4619      	mov	r1, r3
 80094cc:	f7ff f810 	bl	80084f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2201      	movs	r2, #1
 80094d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80094d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3324      	adds	r3, #36	@ 0x24
 80094f4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80094f6:	220b      	movs	r2, #11
 80094f8:	2120      	movs	r1, #32
 80094fa:	68b8      	ldr	r0, [r7, #8]
 80094fc:	f7ff f819 	bl	8008532 <mem_set>
	si = i = 0; ni = 8;
 8009500:	2300      	movs	r3, #0
 8009502:	613b      	str	r3, [r7, #16]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	61fb      	str	r3, [r7, #28]
 8009508:	2308      	movs	r3, #8
 800950a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	61fa      	str	r2, [r7, #28]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	4413      	add	r3, r2
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800951a:	7efb      	ldrb	r3, [r7, #27]
 800951c:	2b20      	cmp	r3, #32
 800951e:	d94e      	bls.n	80095be <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009520:	7efb      	ldrb	r3, [r7, #27]
 8009522:	2b2f      	cmp	r3, #47	@ 0x2f
 8009524:	d006      	beq.n	8009534 <create_name+0x54>
 8009526:	7efb      	ldrb	r3, [r7, #27]
 8009528:	2b5c      	cmp	r3, #92	@ 0x5c
 800952a:	d110      	bne.n	800954e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800952c:	e002      	b.n	8009534 <create_name+0x54>
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	3301      	adds	r3, #1
 8009532:	61fb      	str	r3, [r7, #28]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	4413      	add	r3, r2
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	2b2f      	cmp	r3, #47	@ 0x2f
 800953e:	d0f6      	beq.n	800952e <create_name+0x4e>
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	4413      	add	r3, r2
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	2b5c      	cmp	r3, #92	@ 0x5c
 800954a:	d0f0      	beq.n	800952e <create_name+0x4e>
			break;
 800954c:	e038      	b.n	80095c0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800954e:	7efb      	ldrb	r3, [r7, #27]
 8009550:	2b2e      	cmp	r3, #46	@ 0x2e
 8009552:	d003      	beq.n	800955c <create_name+0x7c>
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	429a      	cmp	r2, r3
 800955a:	d30c      	bcc.n	8009576 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2b0b      	cmp	r3, #11
 8009560:	d002      	beq.n	8009568 <create_name+0x88>
 8009562:	7efb      	ldrb	r3, [r7, #27]
 8009564:	2b2e      	cmp	r3, #46	@ 0x2e
 8009566:	d001      	beq.n	800956c <create_name+0x8c>
 8009568:	2306      	movs	r3, #6
 800956a:	e044      	b.n	80095f6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800956c:	2308      	movs	r3, #8
 800956e:	613b      	str	r3, [r7, #16]
 8009570:	230b      	movs	r3, #11
 8009572:	617b      	str	r3, [r7, #20]
			continue;
 8009574:	e022      	b.n	80095bc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009576:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800957a:	2b00      	cmp	r3, #0
 800957c:	da04      	bge.n	8009588 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800957e:	7efb      	ldrb	r3, [r7, #27]
 8009580:	3b80      	subs	r3, #128	@ 0x80
 8009582:	4a1f      	ldr	r2, [pc, #124]	@ (8009600 <create_name+0x120>)
 8009584:	5cd3      	ldrb	r3, [r2, r3]
 8009586:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009588:	7efb      	ldrb	r3, [r7, #27]
 800958a:	4619      	mov	r1, r3
 800958c:	481d      	ldr	r0, [pc, #116]	@ (8009604 <create_name+0x124>)
 800958e:	f7ff f812 	bl	80085b6 <chk_chr>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <create_name+0xbc>
 8009598:	2306      	movs	r3, #6
 800959a:	e02c      	b.n	80095f6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800959c:	7efb      	ldrb	r3, [r7, #27]
 800959e:	2b60      	cmp	r3, #96	@ 0x60
 80095a0:	d905      	bls.n	80095ae <create_name+0xce>
 80095a2:	7efb      	ldrb	r3, [r7, #27]
 80095a4:	2b7a      	cmp	r3, #122	@ 0x7a
 80095a6:	d802      	bhi.n	80095ae <create_name+0xce>
 80095a8:	7efb      	ldrb	r3, [r7, #27]
 80095aa:	3b20      	subs	r3, #32
 80095ac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	613a      	str	r2, [r7, #16]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	4413      	add	r3, r2
 80095b8:	7efa      	ldrb	r2, [r7, #27]
 80095ba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80095bc:	e7a6      	b.n	800950c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80095be:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	441a      	add	r2, r3
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <create_name+0xf4>
 80095d0:	2306      	movs	r3, #6
 80095d2:	e010      	b.n	80095f6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2be5      	cmp	r3, #229	@ 0xe5
 80095da:	d102      	bne.n	80095e2 <create_name+0x102>
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2205      	movs	r2, #5
 80095e0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80095e2:	7efb      	ldrb	r3, [r7, #27]
 80095e4:	2b20      	cmp	r3, #32
 80095e6:	d801      	bhi.n	80095ec <create_name+0x10c>
 80095e8:	2204      	movs	r2, #4
 80095ea:	e000      	b.n	80095ee <create_name+0x10e>
 80095ec:	2200      	movs	r2, #0
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	330b      	adds	r3, #11
 80095f2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80095f4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3720      	adds	r7, #32
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	0800bc88 	.word	0x0800bc88
 8009604:	0800aeb4 	.word	0x0800aeb4

08009608 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800961c:	e002      	b.n	8009624 <follow_path+0x1c>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	3301      	adds	r3, #1
 8009622:	603b      	str	r3, [r7, #0]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	2b2f      	cmp	r3, #47	@ 0x2f
 800962a:	d0f8      	beq.n	800961e <follow_path+0x16>
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2b5c      	cmp	r3, #92	@ 0x5c
 8009632:	d0f4      	beq.n	800961e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	2200      	movs	r2, #0
 8009638:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b1f      	cmp	r3, #31
 8009640:	d80a      	bhi.n	8009658 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2280      	movs	r2, #128	@ 0x80
 8009646:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800964a:	2100      	movs	r1, #0
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff fcfa 	bl	8009046 <dir_sdi>
 8009652:	4603      	mov	r3, r0
 8009654:	75fb      	strb	r3, [r7, #23]
 8009656:	e043      	b.n	80096e0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009658:	463b      	mov	r3, r7
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7ff ff3f 	bl	80094e0 <create_name>
 8009662:	4603      	mov	r3, r0
 8009664:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d134      	bne.n	80096d6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff feb0 	bl	80093d2 <dir_find>
 8009672:	4603      	mov	r3, r0
 8009674:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800967c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800967e:	7dfb      	ldrb	r3, [r7, #23]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00a      	beq.n	800969a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009684:	7dfb      	ldrb	r3, [r7, #23]
 8009686:	2b04      	cmp	r3, #4
 8009688:	d127      	bne.n	80096da <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800968a:	7afb      	ldrb	r3, [r7, #11]
 800968c:	f003 0304 	and.w	r3, r3, #4
 8009690:	2b00      	cmp	r3, #0
 8009692:	d122      	bne.n	80096da <follow_path+0xd2>
 8009694:	2305      	movs	r3, #5
 8009696:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009698:	e01f      	b.n	80096da <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800969a:	7afb      	ldrb	r3, [r7, #11]
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d11c      	bne.n	80096de <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	799b      	ldrb	r3, [r3, #6]
 80096a8:	f003 0310 	and.w	r3, r3, #16
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d102      	bne.n	80096b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80096b0:	2305      	movs	r3, #5
 80096b2:	75fb      	strb	r3, [r7, #23]
 80096b4:	e014      	b.n	80096e0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c4:	4413      	add	r3, r2
 80096c6:	4619      	mov	r1, r3
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f7ff fe43 	bl	8009354 <ld_clust>
 80096ce:	4602      	mov	r2, r0
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80096d4:	e7c0      	b.n	8009658 <follow_path+0x50>
			if (res != FR_OK) break;
 80096d6:	bf00      	nop
 80096d8:	e002      	b.n	80096e0 <follow_path+0xd8>
				break;
 80096da:	bf00      	nop
 80096dc:	e000      	b.n	80096e0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80096de:	bf00      	nop
			}
		}
	}

	return res;
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b087      	sub	sp, #28
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80096f2:	f04f 33ff 	mov.w	r3, #4294967295
 80096f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d031      	beq.n	8009764 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	617b      	str	r3, [r7, #20]
 8009706:	e002      	b.n	800970e <get_ldnumber+0x24>
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	3301      	adds	r3, #1
 800970c:	617b      	str	r3, [r7, #20]
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b20      	cmp	r3, #32
 8009714:	d903      	bls.n	800971e <get_ldnumber+0x34>
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b3a      	cmp	r3, #58	@ 0x3a
 800971c:	d1f4      	bne.n	8009708 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b3a      	cmp	r3, #58	@ 0x3a
 8009724:	d11c      	bne.n	8009760 <get_ldnumber+0x76>
			tp = *path;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	60fa      	str	r2, [r7, #12]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	3b30      	subs	r3, #48	@ 0x30
 8009736:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b09      	cmp	r3, #9
 800973c:	d80e      	bhi.n	800975c <get_ldnumber+0x72>
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	429a      	cmp	r2, r3
 8009744:	d10a      	bne.n	800975c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d107      	bne.n	800975c <get_ldnumber+0x72>
					vol = (int)i;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	3301      	adds	r3, #1
 8009754:	617b      	str	r3, [r7, #20]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	e002      	b.n	8009766 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009760:	2300      	movs	r3, #0
 8009762:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009764:	693b      	ldr	r3, [r7, #16]
}
 8009766:	4618      	mov	r0, r3
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
	...

08009774 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	70da      	strb	r2, [r3, #3]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f04f 32ff 	mov.w	r2, #4294967295
 800978a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff f8dc 	bl	800894c <move_window>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <check_fs+0x2a>
 800979a:	2304      	movs	r3, #4
 800979c:	e038      	b.n	8009810 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3330      	adds	r3, #48	@ 0x30
 80097a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe fe20 	bl	80083ec <ld_word>
 80097ac:	4603      	mov	r3, r0
 80097ae:	461a      	mov	r2, r3
 80097b0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d001      	beq.n	80097bc <check_fs+0x48>
 80097b8:	2303      	movs	r3, #3
 80097ba:	e029      	b.n	8009810 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80097c2:	2be9      	cmp	r3, #233	@ 0xe9
 80097c4:	d009      	beq.n	80097da <check_fs+0x66>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80097cc:	2beb      	cmp	r3, #235	@ 0xeb
 80097ce:	d11e      	bne.n	800980e <check_fs+0x9a>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80097d6:	2b90      	cmp	r3, #144	@ 0x90
 80097d8:	d119      	bne.n	800980e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3330      	adds	r3, #48	@ 0x30
 80097de:	3336      	adds	r3, #54	@ 0x36
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fe fe1b 	bl	800841c <ld_dword>
 80097e6:	4603      	mov	r3, r0
 80097e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80097ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009818 <check_fs+0xa4>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d101      	bne.n	80097f6 <check_fs+0x82>
 80097f2:	2300      	movs	r3, #0
 80097f4:	e00c      	b.n	8009810 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3330      	adds	r3, #48	@ 0x30
 80097fa:	3352      	adds	r3, #82	@ 0x52
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fe0d 	bl	800841c <ld_dword>
 8009802:	4603      	mov	r3, r0
 8009804:	4a05      	ldr	r2, [pc, #20]	@ (800981c <check_fs+0xa8>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d101      	bne.n	800980e <check_fs+0x9a>
 800980a:	2300      	movs	r3, #0
 800980c:	e000      	b.n	8009810 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800980e:	2302      	movs	r3, #2
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	00544146 	.word	0x00544146
 800981c:	33544146 	.word	0x33544146

08009820 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b096      	sub	sp, #88	@ 0x58
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	4613      	mov	r3, r2
 800982c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2200      	movs	r2, #0
 8009832:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff ff58 	bl	80096ea <get_ldnumber>
 800983a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800983c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800983e:	2b00      	cmp	r3, #0
 8009840:	da01      	bge.n	8009846 <find_volume+0x26>
 8009842:	230b      	movs	r3, #11
 8009844:	e22d      	b.n	8009ca2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009846:	4aa1      	ldr	r2, [pc, #644]	@ (8009acc <find_volume+0x2ac>)
 8009848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800984a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800984e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <find_volume+0x3a>
 8009856:	230c      	movs	r3, #12
 8009858:	e223      	b.n	8009ca2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800985e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	f023 0301 	bic.w	r3, r3, #1
 8009866:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d01a      	beq.n	80098a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009872:	785b      	ldrb	r3, [r3, #1]
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe fd19 	bl	80082ac <disk_status>
 800987a:	4603      	mov	r3, r0
 800987c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009880:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10c      	bne.n	80098a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d007      	beq.n	80098a2 <find_volume+0x82>
 8009892:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800989e:	230a      	movs	r3, #10
 80098a0:	e1ff      	b.n	8009ca2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80098a2:	2300      	movs	r3, #0
 80098a4:	e1fd      	b.n	8009ca2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80098a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80098ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80098b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b6:	785b      	ldrb	r3, [r3, #1]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fe fd11 	bl	80082e0 <disk_initialize>
 80098be:	4603      	mov	r3, r0
 80098c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80098c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80098d0:	2303      	movs	r3, #3
 80098d2:	e1e6      	b.n	8009ca2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d007      	beq.n	80098ea <find_volume+0xca>
 80098da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80098de:	f003 0304 	and.w	r3, r3, #4
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80098e6:	230a      	movs	r3, #10
 80098e8:	e1db      	b.n	8009ca2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80098ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80098f2:	f7ff ff3f 	bl	8009774 <check_fs>
 80098f6:	4603      	mov	r3, r0
 80098f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80098fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009900:	2b02      	cmp	r3, #2
 8009902:	d149      	bne.n	8009998 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009904:	2300      	movs	r3, #0
 8009906:	643b      	str	r3, [r7, #64]	@ 0x40
 8009908:	e01e      	b.n	8009948 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800990a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009912:	011b      	lsls	r3, r3, #4
 8009914:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009918:	4413      	add	r3, r2
 800991a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	3304      	adds	r3, #4
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d006      	beq.n	8009934 <find_volume+0x114>
 8009926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009928:	3308      	adds	r3, #8
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fd76 	bl	800841c <ld_dword>
 8009930:	4602      	mov	r2, r0
 8009932:	e000      	b.n	8009936 <find_volume+0x116>
 8009934:	2200      	movs	r2, #0
 8009936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	3358      	adds	r3, #88	@ 0x58
 800993c:	443b      	add	r3, r7
 800993e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009944:	3301      	adds	r3, #1
 8009946:	643b      	str	r3, [r7, #64]	@ 0x40
 8009948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800994a:	2b03      	cmp	r3, #3
 800994c:	d9dd      	bls.n	800990a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800994e:	2300      	movs	r3, #0
 8009950:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009954:	2b00      	cmp	r3, #0
 8009956:	d002      	beq.n	800995e <find_volume+0x13e>
 8009958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800995a:	3b01      	subs	r3, #1
 800995c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800995e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	3358      	adds	r3, #88	@ 0x58
 8009964:	443b      	add	r3, r7
 8009966:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800996a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800996c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800996e:	2b00      	cmp	r3, #0
 8009970:	d005      	beq.n	800997e <find_volume+0x15e>
 8009972:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009974:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009976:	f7ff fefd 	bl	8009774 <check_fs>
 800997a:	4603      	mov	r3, r0
 800997c:	e000      	b.n	8009980 <find_volume+0x160>
 800997e:	2303      	movs	r3, #3
 8009980:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009984:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009988:	2b01      	cmp	r3, #1
 800998a:	d905      	bls.n	8009998 <find_volume+0x178>
 800998c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800998e:	3301      	adds	r3, #1
 8009990:	643b      	str	r3, [r7, #64]	@ 0x40
 8009992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009994:	2b03      	cmp	r3, #3
 8009996:	d9e2      	bls.n	800995e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009998:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800999c:	2b04      	cmp	r3, #4
 800999e:	d101      	bne.n	80099a4 <find_volume+0x184>
 80099a0:	2301      	movs	r3, #1
 80099a2:	e17e      	b.n	8009ca2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80099a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d901      	bls.n	80099b0 <find_volume+0x190>
 80099ac:	230d      	movs	r3, #13
 80099ae:	e178      	b.n	8009ca2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80099b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b2:	3330      	adds	r3, #48	@ 0x30
 80099b4:	330b      	adds	r3, #11
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fd18 	bl	80083ec <ld_word>
 80099bc:	4603      	mov	r3, r0
 80099be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099c2:	d001      	beq.n	80099c8 <find_volume+0x1a8>
 80099c4:	230d      	movs	r3, #13
 80099c6:	e16c      	b.n	8009ca2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80099c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ca:	3330      	adds	r3, #48	@ 0x30
 80099cc:	3316      	adds	r3, #22
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe fd0c 	bl	80083ec <ld_word>
 80099d4:	4603      	mov	r3, r0
 80099d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80099d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d106      	bne.n	80099ec <find_volume+0x1cc>
 80099de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e0:	3330      	adds	r3, #48	@ 0x30
 80099e2:	3324      	adds	r3, #36	@ 0x24
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe fd19 	bl	800841c <ld_dword>
 80099ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80099ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099f0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80099f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80099f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80099fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fe:	789b      	ldrb	r3, [r3, #2]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d005      	beq.n	8009a10 <find_volume+0x1f0>
 8009a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a06:	789b      	ldrb	r3, [r3, #2]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d001      	beq.n	8009a10 <find_volume+0x1f0>
 8009a0c:	230d      	movs	r3, #13
 8009a0e:	e148      	b.n	8009ca2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a12:	789b      	ldrb	r3, [r3, #2]
 8009a14:	461a      	mov	r2, r3
 8009a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a18:	fb02 f303 	mul.w	r3, r2, r3
 8009a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a24:	461a      	mov	r2, r3
 8009a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a28:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2c:	895b      	ldrh	r3, [r3, #10]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d008      	beq.n	8009a44 <find_volume+0x224>
 8009a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a34:	895b      	ldrh	r3, [r3, #10]
 8009a36:	461a      	mov	r2, r3
 8009a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3a:	895b      	ldrh	r3, [r3, #10]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	4013      	ands	r3, r2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <find_volume+0x228>
 8009a44:	230d      	movs	r3, #13
 8009a46:	e12c      	b.n	8009ca2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4a:	3330      	adds	r3, #48	@ 0x30
 8009a4c:	3311      	adds	r3, #17
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fe fccc 	bl	80083ec <ld_word>
 8009a54:	4603      	mov	r3, r0
 8009a56:	461a      	mov	r2, r3
 8009a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5e:	891b      	ldrh	r3, [r3, #8]
 8009a60:	f003 030f 	and.w	r3, r3, #15
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <find_volume+0x24e>
 8009a6a:	230d      	movs	r3, #13
 8009a6c:	e119      	b.n	8009ca2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a70:	3330      	adds	r3, #48	@ 0x30
 8009a72:	3313      	adds	r3, #19
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe fcb9 	bl	80083ec <ld_word>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d106      	bne.n	8009a92 <find_volume+0x272>
 8009a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a86:	3330      	adds	r3, #48	@ 0x30
 8009a88:	3320      	adds	r3, #32
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe fcc6 	bl	800841c <ld_dword>
 8009a90:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a94:	3330      	adds	r3, #48	@ 0x30
 8009a96:	330e      	adds	r3, #14
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe fca7 	bl	80083ec <ld_word>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009aa2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d101      	bne.n	8009aac <find_volume+0x28c>
 8009aa8:	230d      	movs	r3, #13
 8009aaa:	e0fa      	b.n	8009ca2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009aac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ab0:	4413      	add	r3, r2
 8009ab2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ab4:	8912      	ldrh	r2, [r2, #8]
 8009ab6:	0912      	lsrs	r2, r2, #4
 8009ab8:	b292      	uxth	r2, r2
 8009aba:	4413      	add	r3, r2
 8009abc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009abe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d204      	bcs.n	8009ad0 <find_volume+0x2b0>
 8009ac6:	230d      	movs	r3, #13
 8009ac8:	e0eb      	b.n	8009ca2 <find_volume+0x482>
 8009aca:	bf00      	nop
 8009acc:	20000704 	.word	0x20000704
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ad8:	8952      	ldrh	r2, [r2, #10]
 8009ada:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ade:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <find_volume+0x2ca>
 8009ae6:	230d      	movs	r3, #13
 8009ae8:	e0db      	b.n	8009ca2 <find_volume+0x482>
		fmt = FS_FAT32;
 8009aea:	2303      	movs	r3, #3
 8009aec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d802      	bhi.n	8009b00 <find_volume+0x2e0>
 8009afa:	2302      	movs	r3, #2
 8009afc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d802      	bhi.n	8009b10 <find_volume+0x2f0>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b12:	1c9a      	adds	r2, r3, #2
 8009b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b16:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b1c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009b1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b22:	441a      	add	r2, r3
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009b28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2c:	441a      	add	r2, r3
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b30:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8009b32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d11e      	bne.n	8009b78 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3c:	3330      	adds	r3, #48	@ 0x30
 8009b3e:	332a      	adds	r3, #42	@ 0x2a
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fc53 	bl	80083ec <ld_word>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <find_volume+0x330>
 8009b4c:	230d      	movs	r3, #13
 8009b4e:	e0a8      	b.n	8009ca2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b52:	891b      	ldrh	r3, [r3, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <find_volume+0x33c>
 8009b58:	230d      	movs	r3, #13
 8009b5a:	e0a2      	b.n	8009ca2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5e:	3330      	adds	r3, #48	@ 0x30
 8009b60:	332c      	adds	r3, #44	@ 0x2c
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe fc5a 	bl	800841c <ld_dword>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b76:	e01f      	b.n	8009bb8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7a:	891b      	ldrh	r3, [r3, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d101      	bne.n	8009b84 <find_volume+0x364>
 8009b80:	230d      	movs	r3, #13
 8009b82:	e08e      	b.n	8009ca2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b86:	6a1a      	ldr	r2, [r3, #32]
 8009b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b8a:	441a      	add	r2, r3
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009b90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d103      	bne.n	8009ba0 <find_volume+0x380>
 8009b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	005b      	lsls	r3, r3, #1
 8009b9e:	e00a      	b.n	8009bb6 <find_volume+0x396>
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba2:	695a      	ldr	r2, [r3, #20]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	005b      	lsls	r3, r3, #1
 8009ba8:	4413      	add	r3, r2
 8009baa:	085a      	lsrs	r2, r3, #1
 8009bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009bb6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bba:	699a      	ldr	r2, [r3, #24]
 8009bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bbe:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009bc2:	0a5b      	lsrs	r3, r3, #9
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d201      	bcs.n	8009bcc <find_volume+0x3ac>
 8009bc8:	230d      	movs	r3, #13
 8009bca:	e06a      	b.n	8009ca2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bce:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd2:	611a      	str	r2, [r3, #16]
 8009bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd6:	691a      	ldr	r2, [r3, #16]
 8009bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bda:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bde:	2280      	movs	r2, #128	@ 0x80
 8009be0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009be2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009be6:	2b03      	cmp	r3, #3
 8009be8:	d149      	bne.n	8009c7e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bec:	3330      	adds	r3, #48	@ 0x30
 8009bee:	3330      	adds	r3, #48	@ 0x30
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fe fbfb 	bl	80083ec <ld_word>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d140      	bne.n	8009c7e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bfe:	3301      	adds	r3, #1
 8009c00:	4619      	mov	r1, r3
 8009c02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c04:	f7fe fea2 	bl	800894c <move_window>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d137      	bne.n	8009c7e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c10:	2200      	movs	r2, #0
 8009c12:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	3330      	adds	r3, #48	@ 0x30
 8009c18:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe fbe5 	bl	80083ec <ld_word>
 8009c22:	4603      	mov	r3, r0
 8009c24:	461a      	mov	r2, r3
 8009c26:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d127      	bne.n	8009c7e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c30:	3330      	adds	r3, #48	@ 0x30
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fbf2 	bl	800841c <ld_dword>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8009cac <find_volume+0x48c>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d11e      	bne.n	8009c7e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c42:	3330      	adds	r3, #48	@ 0x30
 8009c44:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fe fbe7 	bl	800841c <ld_dword>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	4a17      	ldr	r2, [pc, #92]	@ (8009cb0 <find_volume+0x490>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d113      	bne.n	8009c7e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c58:	3330      	adds	r3, #48	@ 0x30
 8009c5a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe fbdc 	bl	800841c <ld_dword>
 8009c64:	4602      	mov	r2, r0
 8009c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c68:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6c:	3330      	adds	r3, #48	@ 0x30
 8009c6e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fbd2 	bl	800841c <ld_dword>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c80:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009c84:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009c86:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb4 <find_volume+0x494>)
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	4b09      	ldr	r3, [pc, #36]	@ (8009cb4 <find_volume+0x494>)
 8009c90:	801a      	strh	r2, [r3, #0]
 8009c92:	4b08      	ldr	r3, [pc, #32]	@ (8009cb4 <find_volume+0x494>)
 8009c94:	881a      	ldrh	r2, [r3, #0]
 8009c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c98:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009c9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c9c:	f7fe fdee 	bl	800887c <clear_lock>
#endif
	return FR_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3758      	adds	r7, #88	@ 0x58
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	41615252 	.word	0x41615252
 8009cb0:	61417272 	.word	0x61417272
 8009cb4:	20000708 	.word	0x20000708

08009cb8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009cc2:	2309      	movs	r3, #9
 8009cc4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01c      	beq.n	8009d06 <validate+0x4e>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d018      	beq.n	8009d06 <validate+0x4e>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d013      	beq.n	8009d06 <validate+0x4e>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	889a      	ldrh	r2, [r3, #4]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	88db      	ldrh	r3, [r3, #6]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d10c      	bne.n	8009d06 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	785b      	ldrb	r3, [r3, #1]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe fada 	bl	80082ac <disk_status>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <validate+0x4e>
			res = FR_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <validate+0x5a>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	e000      	b.n	8009d14 <validate+0x5c>
 8009d12:	2300      	movs	r3, #0
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	6013      	str	r3, [r2, #0]
	return res;
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
	...

08009d24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b088      	sub	sp, #32
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009d36:	f107 0310 	add.w	r3, r7, #16
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7ff fcd5 	bl	80096ea <get_ldnumber>
 8009d40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	da01      	bge.n	8009d4c <f_mount+0x28>
 8009d48:	230b      	movs	r3, #11
 8009d4a:	e02b      	b.n	8009da4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009d4c:	4a17      	ldr	r2, [pc, #92]	@ (8009dac <f_mount+0x88>)
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d005      	beq.n	8009d68 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009d5c:	69b8      	ldr	r0, [r7, #24]
 8009d5e:	f7fe fd8d 	bl	800887c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	490d      	ldr	r1, [pc, #52]	@ (8009dac <f_mount+0x88>)
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <f_mount+0x66>
 8009d84:	79fb      	ldrb	r3, [r7, #7]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d001      	beq.n	8009d8e <f_mount+0x6a>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	e00a      	b.n	8009da4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009d8e:	f107 010c 	add.w	r1, r7, #12
 8009d92:	f107 0308 	add.w	r3, r7, #8
 8009d96:	2200      	movs	r2, #0
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7ff fd41 	bl	8009820 <find_volume>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3720      	adds	r7, #32
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20000704 	.word	0x20000704

08009db0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b098      	sub	sp, #96	@ 0x60
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <f_open+0x18>
 8009dc4:	2309      	movs	r3, #9
 8009dc6:	e1a9      	b.n	800a11c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009dc8:	79fb      	ldrb	r3, [r7, #7]
 8009dca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009dd0:	79fa      	ldrb	r2, [r7, #7]
 8009dd2:	f107 0110 	add.w	r1, r7, #16
 8009dd6:	f107 0308 	add.w	r3, r7, #8
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7ff fd20 	bl	8009820 <find_volume>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009de6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f040 818d 	bne.w	800a10a <f_open+0x35a>
		dj.obj.fs = fs;
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	f107 0314 	add.w	r3, r7, #20
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff fc03 	bl	8009608 <follow_path>
 8009e02:	4603      	mov	r3, r0
 8009e04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009e08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d118      	bne.n	8009e42 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009e10:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e14:	b25b      	sxtb	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	da03      	bge.n	8009e22 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009e1a:	2306      	movs	r3, #6
 8009e1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009e20:	e00f      	b.n	8009e42 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009e22:	79fb      	ldrb	r3, [r7, #7]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	bf8c      	ite	hi
 8009e28:	2301      	movhi	r3, #1
 8009e2a:	2300      	movls	r3, #0
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f107 0314 	add.w	r3, r7, #20
 8009e34:	4611      	mov	r1, r2
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fe fbd8 	bl	80085ec <chk_lock>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009e42:	79fb      	ldrb	r3, [r7, #7]
 8009e44:	f003 031c 	and.w	r3, r3, #28
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d07f      	beq.n	8009f4c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d017      	beq.n	8009e84 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009e54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e58:	2b04      	cmp	r3, #4
 8009e5a:	d10e      	bne.n	8009e7a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009e5c:	f7fe fc22 	bl	80086a4 <enq_lock>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d006      	beq.n	8009e74 <f_open+0xc4>
 8009e66:	f107 0314 	add.w	r3, r7, #20
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7ff fb06 	bl	800947c <dir_register>
 8009e70:	4603      	mov	r3, r0
 8009e72:	e000      	b.n	8009e76 <f_open+0xc6>
 8009e74:	2312      	movs	r3, #18
 8009e76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009e7a:	79fb      	ldrb	r3, [r7, #7]
 8009e7c:	f043 0308 	orr.w	r3, r3, #8
 8009e80:	71fb      	strb	r3, [r7, #7]
 8009e82:	e010      	b.n	8009ea6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009e84:	7ebb      	ldrb	r3, [r7, #26]
 8009e86:	f003 0311 	and.w	r3, r3, #17
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <f_open+0xe6>
					res = FR_DENIED;
 8009e8e:	2307      	movs	r3, #7
 8009e90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009e94:	e007      	b.n	8009ea6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	f003 0304 	and.w	r3, r3, #4
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <f_open+0xf6>
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009ea6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d168      	bne.n	8009f80 <f_open+0x1d0>
 8009eae:	79fb      	ldrb	r3, [r7, #7]
 8009eb0:	f003 0308 	and.w	r3, r3, #8
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d063      	beq.n	8009f80 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009eb8:	f7fe f88c 	bl	8007fd4 <get_fattime>
 8009ebc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec0:	330e      	adds	r3, #14
 8009ec2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fe fae7 	bl	8008498 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ecc:	3316      	adds	r3, #22
 8009ece:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fe fae1 	bl	8008498 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed8:	330b      	adds	r3, #11
 8009eda:	2220      	movs	r2, #32
 8009edc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7ff fa35 	bl	8009354 <ld_clust>
 8009eea:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff fa4d 	bl	8009392 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009efa:	331c      	adds	r3, #28
 8009efc:	2100      	movs	r1, #0
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe faca 	bl	8008498 <st_dword>
					fs->wflag = 1;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2201      	movs	r2, #1
 8009f08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d037      	beq.n	8009f80 <f_open+0x1d0>
						dw = fs->winsect;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f14:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009f16:	f107 0314 	add.w	r3, r7, #20
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe ff60 	bl	8008de4 <remove_chain>
 8009f24:	4603      	mov	r3, r0
 8009f26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009f2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d126      	bne.n	8009f80 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fd08 	bl	800894c <move_window>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f46:	3a01      	subs	r2, #1
 8009f48:	60da      	str	r2, [r3, #12]
 8009f4a:	e019      	b.n	8009f80 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d115      	bne.n	8009f80 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009f54:	7ebb      	ldrb	r3, [r7, #26]
 8009f56:	f003 0310 	and.w	r3, r3, #16
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <f_open+0x1b6>
					res = FR_NO_FILE;
 8009f5e:	2304      	movs	r3, #4
 8009f60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009f64:	e00c      	b.n	8009f80 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009f66:	79fb      	ldrb	r3, [r7, #7]
 8009f68:	f003 0302 	and.w	r3, r3, #2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d007      	beq.n	8009f80 <f_open+0x1d0>
 8009f70:	7ebb      	ldrb	r3, [r7, #26]
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d002      	beq.n	8009f80 <f_open+0x1d0>
						res = FR_DENIED;
 8009f7a:	2307      	movs	r3, #7
 8009f7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009f80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d126      	bne.n	8009fd6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009f88:	79fb      	ldrb	r3, [r7, #7]
 8009f8a:	f003 0308 	and.w	r3, r3, #8
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009fa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009fa8:	79fb      	ldrb	r3, [r7, #7]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	bf8c      	ite	hi
 8009fae:	2301      	movhi	r3, #1
 8009fb0:	2300      	movls	r3, #0
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	f107 0314 	add.w	r3, r7, #20
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fe fb93 	bl	80086e8 <inc_lock>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d102      	bne.n	8009fd6 <f_open+0x226>
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009fd6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f040 8095 	bne.w	800a10a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff f9b4 	bl	8009354 <ld_clust>
 8009fec:	4602      	mov	r2, r0
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff4:	331c      	adds	r3, #28
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fe fa10 	bl	800841c <ld_dword>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a008:	693a      	ldr	r2, [r7, #16]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	88da      	ldrh	r2, [r3, #6]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	79fa      	ldrb	r2, [r7, #7]
 800a01a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3330      	adds	r3, #48	@ 0x30
 800a032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a036:	2100      	movs	r1, #0
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fe fa7a 	bl	8008532 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a03e:	79fb      	ldrb	r3, [r7, #7]
 800a040:	f003 0320 	and.w	r3, r3, #32
 800a044:	2b00      	cmp	r3, #0
 800a046:	d060      	beq.n	800a10a <f_open+0x35a>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d05c      	beq.n	800a10a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	895b      	ldrh	r3, [r3, #10]
 800a05c:	025b      	lsls	r3, r3, #9
 800a05e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a06c:	e016      	b.n	800a09c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fd25 	bl	8008ac2 <get_fat>
 800a078:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a07a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d802      	bhi.n	800a086 <f_open+0x2d6>
 800a080:	2302      	movs	r3, #2
 800a082:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08c:	d102      	bne.n	800a094 <f_open+0x2e4>
 800a08e:	2301      	movs	r3, #1
 800a090:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a094:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a09c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d103      	bne.n	800a0ac <f_open+0x2fc>
 800a0a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a0a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d8e0      	bhi.n	800a06e <f_open+0x2be>
				}
				fp->clust = clst;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a0b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d127      	bne.n	800a10a <f_open+0x35a>
 800a0ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d022      	beq.n	800a10a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fe fcdb 	bl	8008a84 <clust2sect>
 800a0ce:	6478      	str	r0, [r7, #68]	@ 0x44
 800a0d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d103      	bne.n	800a0de <f_open+0x32e>
						res = FR_INT_ERR;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a0dc:	e015      	b.n	800a10a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a0de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0e0:	0a5a      	lsrs	r2, r3, #9
 800a0e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0e4:	441a      	add	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	7858      	ldrb	r0, [r3, #1]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6a1a      	ldr	r2, [r3, #32]
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	f7fe f919 	bl	8008330 <disk_read>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <f_open+0x35a>
 800a104:	2301      	movs	r3, #1
 800a106:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a10a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <f_open+0x368>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a118:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3760      	adds	r7, #96	@ 0x60
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08e      	sub	sp, #56	@ 0x38
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
 800a130:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f107 0214 	add.w	r2, r7, #20
 800a142:	4611      	mov	r1, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f7ff fdb7 	bl	8009cb8 <validate>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a150:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a154:	2b00      	cmp	r3, #0
 800a156:	d107      	bne.n	800a168 <f_read+0x44>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	7d5b      	ldrb	r3, [r3, #21]
 800a15c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a160:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <f_read+0x4a>
 800a168:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a16c:	e115      	b.n	800a39a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	7d1b      	ldrb	r3, [r3, #20]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <f_read+0x5a>
 800a17a:	2307      	movs	r3, #7
 800a17c:	e10d      	b.n	800a39a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	68da      	ldr	r2, [r3, #12]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	429a      	cmp	r2, r3
 800a190:	f240 80fe 	bls.w	800a390 <f_read+0x26c>
 800a194:	6a3b      	ldr	r3, [r7, #32]
 800a196:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a198:	e0fa      	b.n	800a390 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f040 80c6 	bne.w	800a334 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	0a5b      	lsrs	r3, r3, #9
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	8952      	ldrh	r2, [r2, #10]
 800a1b2:	3a01      	subs	r2, #1
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d12f      	bne.n	800a21e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d103      	bne.n	800a1ce <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1cc:	e013      	b.n	800a1f6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d007      	beq.n	800a1e6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7fe fefe 	bl	8008fde <clmt_clust>
 800a1e2:	6338      	str	r0, [r7, #48]	@ 0x30
 800a1e4:	e007      	b.n	800a1f6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	69db      	ldr	r3, [r3, #28]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	f7fe fc67 	bl	8008ac2 <get_fat>
 800a1f4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d804      	bhi.n	800a206 <f_read+0xe2>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2202      	movs	r2, #2
 800a200:	755a      	strb	r2, [r3, #21]
 800a202:	2302      	movs	r3, #2
 800a204:	e0c9      	b.n	800a39a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20c:	d104      	bne.n	800a218 <f_read+0xf4>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2201      	movs	r2, #1
 800a212:	755a      	strb	r2, [r3, #21]
 800a214:	2301      	movs	r3, #1
 800a216:	e0c0      	b.n	800a39a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a21c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	4619      	mov	r1, r3
 800a226:	4610      	mov	r0, r2
 800a228:	f7fe fc2c 	bl	8008a84 <clust2sect>
 800a22c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d104      	bne.n	800a23e <f_read+0x11a>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2202      	movs	r2, #2
 800a238:	755a      	strb	r2, [r3, #21]
 800a23a:	2302      	movs	r3, #2
 800a23c:	e0ad      	b.n	800a39a <f_read+0x276>
			sect += csect;
 800a23e:	69ba      	ldr	r2, [r7, #24]
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	4413      	add	r3, r2
 800a244:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	0a5b      	lsrs	r3, r3, #9
 800a24a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d039      	beq.n	800a2c6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a252:	69fa      	ldr	r2, [r7, #28]
 800a254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a256:	4413      	add	r3, r2
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	8952      	ldrh	r2, [r2, #10]
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d905      	bls.n	800a26c <f_read+0x148>
					cc = fs->csize - csect;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	895b      	ldrh	r3, [r3, #10]
 800a264:	461a      	mov	r2, r3
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	7858      	ldrb	r0, [r3, #1]
 800a270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a272:	69ba      	ldr	r2, [r7, #24]
 800a274:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a276:	f7fe f85b 	bl	8008330 <disk_read>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d004      	beq.n	800a28a <f_read+0x166>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2201      	movs	r2, #1
 800a284:	755a      	strb	r2, [r3, #21]
 800a286:	2301      	movs	r3, #1
 800a288:	e087      	b.n	800a39a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	7d1b      	ldrb	r3, [r3, #20]
 800a28e:	b25b      	sxtb	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	da14      	bge.n	800a2be <f_read+0x19a>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6a1a      	ldr	r2, [r3, #32]
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d90d      	bls.n	800a2be <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6a1a      	ldr	r2, [r3, #32]
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	025b      	lsls	r3, r3, #9
 800a2ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2ae:	18d0      	adds	r0, r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3330      	adds	r3, #48	@ 0x30
 800a2b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	f7fe f919 	bl	80084f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c0:	025b      	lsls	r3, r3, #9
 800a2c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a2c4:	e050      	b.n	800a368 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d02e      	beq.n	800a32e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	7d1b      	ldrb	r3, [r3, #20]
 800a2d4:	b25b      	sxtb	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	da18      	bge.n	800a30c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	7858      	ldrb	r0, [r3, #1]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6a1a      	ldr	r2, [r3, #32]
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	f7fe f841 	bl	8008370 <disk_write>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d004      	beq.n	800a2fe <f_read+0x1da>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	755a      	strb	r2, [r3, #21]
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e04d      	b.n	800a39a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	7d1b      	ldrb	r3, [r3, #20]
 800a302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a306:	b2da      	uxtb	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	7858      	ldrb	r0, [r3, #1]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a316:	2301      	movs	r3, #1
 800a318:	69ba      	ldr	r2, [r7, #24]
 800a31a:	f7fe f809 	bl	8008330 <disk_read>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <f_read+0x20a>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2201      	movs	r2, #1
 800a328:	755a      	strb	r2, [r3, #21]
 800a32a:	2301      	movs	r3, #1
 800a32c:	e035      	b.n	800a39a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	69ba      	ldr	r2, [r7, #24]
 800a332:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a340:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	429a      	cmp	r2, r3
 800a348:	d901      	bls.n	800a34e <f_read+0x22a>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35c:	4413      	add	r3, r2
 800a35e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a360:	4619      	mov	r1, r3
 800a362:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a364:	f7fe f8c4 	bl	80084f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a36c:	4413      	add	r3, r2
 800a36e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	699a      	ldr	r2, [r3, #24]
 800a374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a376:	441a      	add	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	619a      	str	r2, [r3, #24]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a382:	441a      	add	r2, r3
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	f47f af01 	bne.w	800a19a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3738      	adds	r7, #56	@ 0x38
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b086      	sub	sp, #24
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f107 0208 	add.w	r2, r7, #8
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7ff fc80 	bl	8009cb8 <validate>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d168      	bne.n	800a494 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	7d1b      	ldrb	r3, [r3, #20]
 800a3c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d062      	beq.n	800a494 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	7d1b      	ldrb	r3, [r3, #20]
 800a3d2:	b25b      	sxtb	r3, r3
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	da15      	bge.n	800a404 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	7858      	ldrb	r0, [r3, #1]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1a      	ldr	r2, [r3, #32]
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	f7fd ffc2 	bl	8008370 <disk_write>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <f_sync+0x54>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e04f      	b.n	800a496 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	7d1b      	ldrb	r3, [r3, #20]
 800a3fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a404:	f7fd fde6 	bl	8007fd4 <get_fattime>
 800a408:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a410:	4619      	mov	r1, r3
 800a412:	4610      	mov	r0, r2
 800a414:	f7fe fa9a 	bl	800894c <move_window>
 800a418:	4603      	mov	r3, r0
 800a41a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d138      	bne.n	800a494 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a426:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	330b      	adds	r3, #11
 800a42c:	781a      	ldrb	r2, [r3, #0]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	330b      	adds	r3, #11
 800a432:	f042 0220 	orr.w	r2, r2, #32
 800a436:	b2d2      	uxtb	r2, r2
 800a438:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	461a      	mov	r2, r3
 800a444:	68f9      	ldr	r1, [r7, #12]
 800a446:	f7fe ffa4 	bl	8009392 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f103 021c 	add.w	r2, r3, #28
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	4619      	mov	r1, r3
 800a456:	4610      	mov	r0, r2
 800a458:	f7fe f81e 	bl	8008498 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3316      	adds	r3, #22
 800a460:	6939      	ldr	r1, [r7, #16]
 800a462:	4618      	mov	r0, r3
 800a464:	f7fe f818 	bl	8008498 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	3312      	adds	r3, #18
 800a46c:	2100      	movs	r1, #0
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fd fff7 	bl	8008462 <st_word>
					fs->wflag = 1;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2201      	movs	r2, #1
 800a478:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fe fa93 	bl	80089a8 <sync_fs>
 800a482:	4603      	mov	r3, r0
 800a484:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	7d1b      	ldrb	r3, [r3, #20]
 800a48a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a494:	7dfb      	ldrb	r3, [r7, #23]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff ff7b 	bl	800a3a2 <f_sync>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d118      	bne.n	800a4e8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f107 0208 	add.w	r2, r7, #8
 800a4bc:	4611      	mov	r1, r2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff fbfa 	bl	8009cb8 <validate>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10c      	bne.n	800a4e8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fe f996 	bl	8008804 <dec_lock>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d102      	bne.n	800a4e8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b090      	sub	sp, #64	@ 0x40
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f107 0208 	add.w	r2, r7, #8
 800a502:	4611      	mov	r1, r2
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff fbd7 	bl	8009cb8 <validate>
 800a50a:	4603      	mov	r3, r0
 800a50c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a510:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a514:	2b00      	cmp	r3, #0
 800a516:	d103      	bne.n	800a520 <f_lseek+0x2e>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	7d5b      	ldrb	r3, [r3, #21]
 800a51c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a520:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <f_lseek+0x3c>
 800a528:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a52c:	e1e6      	b.n	800a8fc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 80d1 	beq.w	800a6da <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53e:	d15a      	bne.n	800a5f6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a544:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a548:	1d1a      	adds	r2, r3, #4
 800a54a:	627a      	str	r2, [r7, #36]	@ 0x24
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	2302      	movs	r3, #2
 800a552:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d03a      	beq.n	800a5d6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a562:	613b      	str	r3, [r7, #16]
 800a564:	2300      	movs	r3, #0
 800a566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56a:	3302      	adds	r3, #2
 800a56c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a570:	60fb      	str	r3, [r7, #12]
 800a572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a574:	3301      	adds	r3, #1
 800a576:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fe faa0 	bl	8008ac2 <get_fat>
 800a582:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a586:	2b01      	cmp	r3, #1
 800a588:	d804      	bhi.n	800a594 <f_lseek+0xa2>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2202      	movs	r2, #2
 800a58e:	755a      	strb	r2, [r3, #21]
 800a590:	2302      	movs	r3, #2
 800a592:	e1b3      	b.n	800a8fc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59a:	d104      	bne.n	800a5a6 <f_lseek+0xb4>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	755a      	strb	r2, [r3, #21]
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e1aa      	b.n	800a8fc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d0de      	beq.n	800a56e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a5b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d809      	bhi.n	800a5cc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ba:	1d1a      	adds	r2, r3, #4
 800a5bc:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c4:	1d1a      	adds	r2, r3, #4
 800a5c6:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d3c4      	bcc.n	800a560 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a5de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d803      	bhi.n	800a5ee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]
 800a5ec:	e184      	b.n	800a8f8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a5ee:	2311      	movs	r3, #17
 800a5f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a5f4:	e180      	b.n	800a8f8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d902      	bls.n	800a606 <f_lseek+0x114>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f000 8172 	beq.w	800a8f8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	3b01      	subs	r3, #1
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f7fe fcdf 	bl	8008fde <clmt_clust>
 800a620:	4602      	mov	r2, r0
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	69db      	ldr	r3, [r3, #28]
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7fe fa28 	bl	8008a84 <clust2sect>
 800a634:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d104      	bne.n	800a646 <f_lseek+0x154>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2202      	movs	r2, #2
 800a640:	755a      	strb	r2, [r3, #21]
 800a642:	2302      	movs	r3, #2
 800a644:	e15a      	b.n	800a8fc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	3b01      	subs	r3, #1
 800a64a:	0a5b      	lsrs	r3, r3, #9
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	8952      	ldrh	r2, [r2, #10]
 800a650:	3a01      	subs	r2, #1
 800a652:	4013      	ands	r3, r2
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	4413      	add	r3, r2
 800a658:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 8148 	beq.w	800a8f8 <f_lseek+0x406>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a1b      	ldr	r3, [r3, #32]
 800a66c:	69ba      	ldr	r2, [r7, #24]
 800a66e:	429a      	cmp	r2, r3
 800a670:	f000 8142 	beq.w	800a8f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	7d1b      	ldrb	r3, [r3, #20]
 800a678:	b25b      	sxtb	r3, r3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	da18      	bge.n	800a6b0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	7858      	ldrb	r0, [r3, #1]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a1a      	ldr	r2, [r3, #32]
 800a68c:	2301      	movs	r3, #1
 800a68e:	f7fd fe6f 	bl	8008370 <disk_write>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d004      	beq.n	800a6a2 <f_lseek+0x1b0>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	755a      	strb	r2, [r3, #21]
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e12c      	b.n	800a8fc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	7d1b      	ldrb	r3, [r3, #20]
 800a6a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	7858      	ldrb	r0, [r3, #1]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	f7fd fe37 	bl	8008330 <disk_read>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d004      	beq.n	800a6d2 <f_lseek+0x1e0>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	755a      	strb	r2, [r3, #21]
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e114      	b.n	800a8fc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	69ba      	ldr	r2, [r7, #24]
 800a6d6:	621a      	str	r2, [r3, #32]
 800a6d8:	e10e      	b.n	800a8f8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d908      	bls.n	800a6f6 <f_lseek+0x204>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	7d1b      	ldrb	r3, [r3, #20]
 800a6e8:	f003 0302 	and.w	r3, r3, #2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d102      	bne.n	800a6f6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a704:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 80a7 	beq.w	800a85c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	895b      	ldrh	r3, [r3, #10]
 800a712:	025b      	lsls	r3, r3, #9
 800a714:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d01b      	beq.n	800a754 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	1e5a      	subs	r2, r3, #1
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	fbb2 f2f3 	udiv	r2, r2, r3
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	1e59      	subs	r1, r3, #1
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a730:	429a      	cmp	r2, r3
 800a732:	d30f      	bcc.n	800a754 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	1e5a      	subs	r2, r3, #1
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	425b      	negs	r3, r3
 800a73c:	401a      	ands	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	69db      	ldr	r3, [r3, #28]
 800a750:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a752:	e022      	b.n	800a79a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d119      	bne.n	800a794 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2100      	movs	r1, #0
 800a764:	4618      	mov	r0, r3
 800a766:	f7fe fba2 	bl	8008eae <create_chain>
 800a76a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d104      	bne.n	800a77c <f_lseek+0x28a>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2202      	movs	r2, #2
 800a776:	755a      	strb	r2, [r3, #21]
 800a778:	2302      	movs	r3, #2
 800a77a:	e0bf      	b.n	800a8fc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a782:	d104      	bne.n	800a78e <f_lseek+0x29c>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	755a      	strb	r2, [r3, #21]
 800a78a:	2301      	movs	r3, #1
 800a78c:	e0b6      	b.n	800a8fc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a792:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a798:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d05d      	beq.n	800a85c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a7a0:	e03a      	b.n	800a818 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	603b      	str	r3, [r7, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	441a      	add	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	7d1b      	ldrb	r3, [r3, #20]
 800a7ba:	f003 0302 	and.w	r3, r3, #2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00b      	beq.n	800a7da <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe fb71 	bl	8008eae <create_chain>
 800a7cc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d108      	bne.n	800a7e6 <f_lseek+0x2f4>
							ofs = 0; break;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	e022      	b.n	800a820 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fe f96f 	bl	8008ac2 <get_fat>
 800a7e4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ec:	d104      	bne.n	800a7f8 <f_lseek+0x306>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	755a      	strb	r2, [r3, #21]
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e081      	b.n	800a8fc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d904      	bls.n	800a808 <f_lseek+0x316>
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a804:	429a      	cmp	r2, r3
 800a806:	d304      	bcc.n	800a812 <f_lseek+0x320>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2202      	movs	r2, #2
 800a80c:	755a      	strb	r2, [r3, #21]
 800a80e:	2302      	movs	r3, #2
 800a810:	e074      	b.n	800a8fc <f_lseek+0x40a>
					fp->clust = clst;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a816:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d8c0      	bhi.n	800a7a2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	699a      	ldr	r2, [r3, #24]
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	441a      	add	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a832:	2b00      	cmp	r3, #0
 800a834:	d012      	beq.n	800a85c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe f922 	bl	8008a84 <clust2sect>
 800a840:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a844:	2b00      	cmp	r3, #0
 800a846:	d104      	bne.n	800a852 <f_lseek+0x360>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2202      	movs	r2, #2
 800a84c:	755a      	strb	r2, [r3, #21]
 800a84e:	2302      	movs	r3, #2
 800a850:	e054      	b.n	800a8fc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	0a5b      	lsrs	r3, r3, #9
 800a856:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a858:	4413      	add	r3, r2
 800a85a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	699a      	ldr	r2, [r3, #24]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	429a      	cmp	r2, r3
 800a866:	d90a      	bls.n	800a87e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699a      	ldr	r2, [r3, #24]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	7d1b      	ldrb	r3, [r3, #20]
 800a874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a886:	2b00      	cmp	r3, #0
 800a888:	d036      	beq.n	800a8f8 <f_lseek+0x406>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a890:	429a      	cmp	r2, r3
 800a892:	d031      	beq.n	800a8f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	7d1b      	ldrb	r3, [r3, #20]
 800a898:	b25b      	sxtb	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	da18      	bge.n	800a8d0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	7858      	ldrb	r0, [r3, #1]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a1a      	ldr	r2, [r3, #32]
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f7fd fd5f 	bl	8008370 <disk_write>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d004      	beq.n	800a8c2 <f_lseek+0x3d0>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	755a      	strb	r2, [r3, #21]
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e01c      	b.n	800a8fc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	7d1b      	ldrb	r3, [r3, #20]
 800a8c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	7858      	ldrb	r0, [r3, #1]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a8da:	2301      	movs	r3, #1
 800a8dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8de:	f7fd fd27 	bl	8008330 <disk_read>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d004      	beq.n	800a8f2 <f_lseek+0x400>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	755a      	strb	r2, [r3, #21]
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e004      	b.n	800a8fc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8f6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a8f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3740      	adds	r7, #64	@ 0x40
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b088      	sub	sp, #32
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a918:	e01c      	b.n	800a954 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a91a:	f107 0310 	add.w	r3, r7, #16
 800a91e:	f107 0114 	add.w	r1, r7, #20
 800a922:	2201      	movs	r2, #1
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f7ff fbfd 	bl	800a124 <f_read>
		if (rc != 1) break;
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d117      	bne.n	800a960 <f_gets+0x5c>
		c = s[0];
 800a930:	7d3b      	ldrb	r3, [r7, #20]
 800a932:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a934:	7dfb      	ldrb	r3, [r7, #23]
 800a936:	2b0d      	cmp	r3, #13
 800a938:	d00b      	beq.n	800a952 <f_gets+0x4e>
		*p++ = c;
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	1c5a      	adds	r2, r3, #1
 800a93e:	61ba      	str	r2, [r7, #24]
 800a940:	7dfa      	ldrb	r2, [r7, #23]
 800a942:	701a      	strb	r2, [r3, #0]
		n++;
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	3301      	adds	r3, #1
 800a948:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a94a:	7dfb      	ldrb	r3, [r7, #23]
 800a94c:	2b0a      	cmp	r3, #10
 800a94e:	d009      	beq.n	800a964 <f_gets+0x60>
 800a950:	e000      	b.n	800a954 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a952:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	3b01      	subs	r3, #1
 800a958:	69fa      	ldr	r2, [r7, #28]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	dbdd      	blt.n	800a91a <f_gets+0x16>
 800a95e:	e002      	b.n	800a966 <f_gets+0x62>
		if (rc != 1) break;
 800a960:	bf00      	nop
 800a962:	e000      	b.n	800a966 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800a964:	bf00      	nop
	}
	*p = 0;
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2200      	movs	r2, #0
 800a96a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <f_gets+0x72>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	e000      	b.n	800a978 <f_gets+0x74>
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3720      	adds	r7, #32
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a980:	b480      	push	{r7}
 800a982:	b087      	sub	sp, #28
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	4613      	mov	r3, r2
 800a98c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a98e:	2301      	movs	r3, #1
 800a990:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a992:	2300      	movs	r3, #0
 800a994:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a996:	4b1f      	ldr	r3, [pc, #124]	@ (800aa14 <FATFS_LinkDriverEx+0x94>)
 800a998:	7a5b      	ldrb	r3, [r3, #9]
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d131      	bne.n	800aa04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a9a0:	4b1c      	ldr	r3, [pc, #112]	@ (800aa14 <FATFS_LinkDriverEx+0x94>)
 800a9a2:	7a5b      	ldrb	r3, [r3, #9]
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	4b1a      	ldr	r3, [pc, #104]	@ (800aa14 <FATFS_LinkDriverEx+0x94>)
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a9ae:	4b19      	ldr	r3, [pc, #100]	@ (800aa14 <FATFS_LinkDriverEx+0x94>)
 800a9b0:	7a5b      	ldrb	r3, [r3, #9]
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	4a17      	ldr	r2, [pc, #92]	@ (800aa14 <FATFS_LinkDriverEx+0x94>)
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a9be:	4b15      	ldr	r3, [pc, #84]	@ (800aa14 <FATFS_LinkDriverEx+0x94>)
 800a9c0:	7a5b      	ldrb	r3, [r3, #9]
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	4b13      	ldr	r3, [pc, #76]	@ (800aa14 <FATFS_LinkDriverEx+0x94>)
 800a9c8:	4413      	add	r3, r2
 800a9ca:	79fa      	ldrb	r2, [r7, #7]
 800a9cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a9ce:	4b11      	ldr	r3, [pc, #68]	@ (800aa14 <FATFS_LinkDriverEx+0x94>)
 800a9d0:	7a5b      	ldrb	r3, [r3, #9]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	b2d1      	uxtb	r1, r2
 800a9d8:	4a0e      	ldr	r2, [pc, #56]	@ (800aa14 <FATFS_LinkDriverEx+0x94>)
 800a9da:	7251      	strb	r1, [r2, #9]
 800a9dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a9de:	7dbb      	ldrb	r3, [r7, #22]
 800a9e0:	3330      	adds	r3, #48	@ 0x30
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	223a      	movs	r2, #58	@ 0x3a
 800a9ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	222f      	movs	r2, #47	@ 0x2f
 800a9f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	3303      	adds	r3, #3
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aa04:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	371c      	adds	r7, #28
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	2000072c 	.word	0x2000072c

0800aa18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aa22:	2200      	movs	r2, #0
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7ff ffaa 	bl	800a980 <FATFS_LinkDriverEx>
 800aa2c:	4603      	mov	r3, r0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <atoi>:
 800aa36:	220a      	movs	r2, #10
 800aa38:	2100      	movs	r1, #0
 800aa3a:	f000 b96f 	b.w	800ad1c <strtol>
	...

0800aa40 <malloc>:
 800aa40:	4b02      	ldr	r3, [pc, #8]	@ (800aa4c <malloc+0xc>)
 800aa42:	4601      	mov	r1, r0
 800aa44:	6818      	ldr	r0, [r3, #0]
 800aa46:	f000 b82d 	b.w	800aaa4 <_malloc_r>
 800aa4a:	bf00      	nop
 800aa4c:	20000018 	.word	0x20000018

0800aa50 <free>:
 800aa50:	4b02      	ldr	r3, [pc, #8]	@ (800aa5c <free+0xc>)
 800aa52:	4601      	mov	r1, r0
 800aa54:	6818      	ldr	r0, [r3, #0]
 800aa56:	f000 b9bd 	b.w	800add4 <_free_r>
 800aa5a:	bf00      	nop
 800aa5c:	20000018 	.word	0x20000018

0800aa60 <sbrk_aligned>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	4e0f      	ldr	r6, [pc, #60]	@ (800aaa0 <sbrk_aligned+0x40>)
 800aa64:	460c      	mov	r4, r1
 800aa66:	6831      	ldr	r1, [r6, #0]
 800aa68:	4605      	mov	r5, r0
 800aa6a:	b911      	cbnz	r1, 800aa72 <sbrk_aligned+0x12>
 800aa6c:	f000 f968 	bl	800ad40 <_sbrk_r>
 800aa70:	6030      	str	r0, [r6, #0]
 800aa72:	4621      	mov	r1, r4
 800aa74:	4628      	mov	r0, r5
 800aa76:	f000 f963 	bl	800ad40 <_sbrk_r>
 800aa7a:	1c43      	adds	r3, r0, #1
 800aa7c:	d103      	bne.n	800aa86 <sbrk_aligned+0x26>
 800aa7e:	f04f 34ff 	mov.w	r4, #4294967295
 800aa82:	4620      	mov	r0, r4
 800aa84:	bd70      	pop	{r4, r5, r6, pc}
 800aa86:	1cc4      	adds	r4, r0, #3
 800aa88:	f024 0403 	bic.w	r4, r4, #3
 800aa8c:	42a0      	cmp	r0, r4
 800aa8e:	d0f8      	beq.n	800aa82 <sbrk_aligned+0x22>
 800aa90:	1a21      	subs	r1, r4, r0
 800aa92:	4628      	mov	r0, r5
 800aa94:	f000 f954 	bl	800ad40 <_sbrk_r>
 800aa98:	3001      	adds	r0, #1
 800aa9a:	d1f2      	bne.n	800aa82 <sbrk_aligned+0x22>
 800aa9c:	e7ef      	b.n	800aa7e <sbrk_aligned+0x1e>
 800aa9e:	bf00      	nop
 800aaa0:	20000738 	.word	0x20000738

0800aaa4 <_malloc_r>:
 800aaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa8:	1ccd      	adds	r5, r1, #3
 800aaaa:	f025 0503 	bic.w	r5, r5, #3
 800aaae:	3508      	adds	r5, #8
 800aab0:	2d0c      	cmp	r5, #12
 800aab2:	bf38      	it	cc
 800aab4:	250c      	movcc	r5, #12
 800aab6:	2d00      	cmp	r5, #0
 800aab8:	4606      	mov	r6, r0
 800aaba:	db01      	blt.n	800aac0 <_malloc_r+0x1c>
 800aabc:	42a9      	cmp	r1, r5
 800aabe:	d904      	bls.n	800aaca <_malloc_r+0x26>
 800aac0:	230c      	movs	r3, #12
 800aac2:	6033      	str	r3, [r6, #0]
 800aac4:	2000      	movs	r0, #0
 800aac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aba0 <_malloc_r+0xfc>
 800aace:	f000 f869 	bl	800aba4 <__malloc_lock>
 800aad2:	f8d8 3000 	ldr.w	r3, [r8]
 800aad6:	461c      	mov	r4, r3
 800aad8:	bb44      	cbnz	r4, 800ab2c <_malloc_r+0x88>
 800aada:	4629      	mov	r1, r5
 800aadc:	4630      	mov	r0, r6
 800aade:	f7ff ffbf 	bl	800aa60 <sbrk_aligned>
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	4604      	mov	r4, r0
 800aae6:	d158      	bne.n	800ab9a <_malloc_r+0xf6>
 800aae8:	f8d8 4000 	ldr.w	r4, [r8]
 800aaec:	4627      	mov	r7, r4
 800aaee:	2f00      	cmp	r7, #0
 800aaf0:	d143      	bne.n	800ab7a <_malloc_r+0xd6>
 800aaf2:	2c00      	cmp	r4, #0
 800aaf4:	d04b      	beq.n	800ab8e <_malloc_r+0xea>
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	4639      	mov	r1, r7
 800aafa:	4630      	mov	r0, r6
 800aafc:	eb04 0903 	add.w	r9, r4, r3
 800ab00:	f000 f91e 	bl	800ad40 <_sbrk_r>
 800ab04:	4581      	cmp	r9, r0
 800ab06:	d142      	bne.n	800ab8e <_malloc_r+0xea>
 800ab08:	6821      	ldr	r1, [r4, #0]
 800ab0a:	1a6d      	subs	r5, r5, r1
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f7ff ffa6 	bl	800aa60 <sbrk_aligned>
 800ab14:	3001      	adds	r0, #1
 800ab16:	d03a      	beq.n	800ab8e <_malloc_r+0xea>
 800ab18:	6823      	ldr	r3, [r4, #0]
 800ab1a:	442b      	add	r3, r5
 800ab1c:	6023      	str	r3, [r4, #0]
 800ab1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab22:	685a      	ldr	r2, [r3, #4]
 800ab24:	bb62      	cbnz	r2, 800ab80 <_malloc_r+0xdc>
 800ab26:	f8c8 7000 	str.w	r7, [r8]
 800ab2a:	e00f      	b.n	800ab4c <_malloc_r+0xa8>
 800ab2c:	6822      	ldr	r2, [r4, #0]
 800ab2e:	1b52      	subs	r2, r2, r5
 800ab30:	d420      	bmi.n	800ab74 <_malloc_r+0xd0>
 800ab32:	2a0b      	cmp	r2, #11
 800ab34:	d917      	bls.n	800ab66 <_malloc_r+0xc2>
 800ab36:	1961      	adds	r1, r4, r5
 800ab38:	42a3      	cmp	r3, r4
 800ab3a:	6025      	str	r5, [r4, #0]
 800ab3c:	bf18      	it	ne
 800ab3e:	6059      	strne	r1, [r3, #4]
 800ab40:	6863      	ldr	r3, [r4, #4]
 800ab42:	bf08      	it	eq
 800ab44:	f8c8 1000 	streq.w	r1, [r8]
 800ab48:	5162      	str	r2, [r4, r5]
 800ab4a:	604b      	str	r3, [r1, #4]
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f000 f82f 	bl	800abb0 <__malloc_unlock>
 800ab52:	f104 000b 	add.w	r0, r4, #11
 800ab56:	1d23      	adds	r3, r4, #4
 800ab58:	f020 0007 	bic.w	r0, r0, #7
 800ab5c:	1ac2      	subs	r2, r0, r3
 800ab5e:	bf1c      	itt	ne
 800ab60:	1a1b      	subne	r3, r3, r0
 800ab62:	50a3      	strne	r3, [r4, r2]
 800ab64:	e7af      	b.n	800aac6 <_malloc_r+0x22>
 800ab66:	6862      	ldr	r2, [r4, #4]
 800ab68:	42a3      	cmp	r3, r4
 800ab6a:	bf0c      	ite	eq
 800ab6c:	f8c8 2000 	streq.w	r2, [r8]
 800ab70:	605a      	strne	r2, [r3, #4]
 800ab72:	e7eb      	b.n	800ab4c <_malloc_r+0xa8>
 800ab74:	4623      	mov	r3, r4
 800ab76:	6864      	ldr	r4, [r4, #4]
 800ab78:	e7ae      	b.n	800aad8 <_malloc_r+0x34>
 800ab7a:	463c      	mov	r4, r7
 800ab7c:	687f      	ldr	r7, [r7, #4]
 800ab7e:	e7b6      	b.n	800aaee <_malloc_r+0x4a>
 800ab80:	461a      	mov	r2, r3
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	42a3      	cmp	r3, r4
 800ab86:	d1fb      	bne.n	800ab80 <_malloc_r+0xdc>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	6053      	str	r3, [r2, #4]
 800ab8c:	e7de      	b.n	800ab4c <_malloc_r+0xa8>
 800ab8e:	230c      	movs	r3, #12
 800ab90:	6033      	str	r3, [r6, #0]
 800ab92:	4630      	mov	r0, r6
 800ab94:	f000 f80c 	bl	800abb0 <__malloc_unlock>
 800ab98:	e794      	b.n	800aac4 <_malloc_r+0x20>
 800ab9a:	6005      	str	r5, [r0, #0]
 800ab9c:	e7d6      	b.n	800ab4c <_malloc_r+0xa8>
 800ab9e:	bf00      	nop
 800aba0:	2000073c 	.word	0x2000073c

0800aba4 <__malloc_lock>:
 800aba4:	4801      	ldr	r0, [pc, #4]	@ (800abac <__malloc_lock+0x8>)
 800aba6:	f000 b905 	b.w	800adb4 <__retarget_lock_acquire_recursive>
 800abaa:	bf00      	nop
 800abac:	2000087c 	.word	0x2000087c

0800abb0 <__malloc_unlock>:
 800abb0:	4801      	ldr	r0, [pc, #4]	@ (800abb8 <__malloc_unlock+0x8>)
 800abb2:	f000 b900 	b.w	800adb6 <__retarget_lock_release_recursive>
 800abb6:	bf00      	nop
 800abb8:	2000087c 	.word	0x2000087c

0800abbc <realloc>:
 800abbc:	4b02      	ldr	r3, [pc, #8]	@ (800abc8 <realloc+0xc>)
 800abbe:	460a      	mov	r2, r1
 800abc0:	4601      	mov	r1, r0
 800abc2:	6818      	ldr	r0, [r3, #0]
 800abc4:	f000 b802 	b.w	800abcc <_realloc_r>
 800abc8:	20000018 	.word	0x20000018

0800abcc <_realloc_r>:
 800abcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd0:	4680      	mov	r8, r0
 800abd2:	4615      	mov	r5, r2
 800abd4:	460c      	mov	r4, r1
 800abd6:	b921      	cbnz	r1, 800abe2 <_realloc_r+0x16>
 800abd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abdc:	4611      	mov	r1, r2
 800abde:	f7ff bf61 	b.w	800aaa4 <_malloc_r>
 800abe2:	b92a      	cbnz	r2, 800abf0 <_realloc_r+0x24>
 800abe4:	f000 f8f6 	bl	800add4 <_free_r>
 800abe8:	2400      	movs	r4, #0
 800abea:	4620      	mov	r0, r4
 800abec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf0:	f000 f93a 	bl	800ae68 <_malloc_usable_size_r>
 800abf4:	4285      	cmp	r5, r0
 800abf6:	4606      	mov	r6, r0
 800abf8:	d802      	bhi.n	800ac00 <_realloc_r+0x34>
 800abfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800abfe:	d8f4      	bhi.n	800abea <_realloc_r+0x1e>
 800ac00:	4629      	mov	r1, r5
 800ac02:	4640      	mov	r0, r8
 800ac04:	f7ff ff4e 	bl	800aaa4 <_malloc_r>
 800ac08:	4607      	mov	r7, r0
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d0ec      	beq.n	800abe8 <_realloc_r+0x1c>
 800ac0e:	42b5      	cmp	r5, r6
 800ac10:	462a      	mov	r2, r5
 800ac12:	4621      	mov	r1, r4
 800ac14:	bf28      	it	cs
 800ac16:	4632      	movcs	r2, r6
 800ac18:	f000 f8ce 	bl	800adb8 <memcpy>
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	4640      	mov	r0, r8
 800ac20:	f000 f8d8 	bl	800add4 <_free_r>
 800ac24:	463c      	mov	r4, r7
 800ac26:	e7e0      	b.n	800abea <_realloc_r+0x1e>

0800ac28 <_strtol_l.constprop.0>:
 800ac28:	2b24      	cmp	r3, #36	@ 0x24
 800ac2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2e:	4686      	mov	lr, r0
 800ac30:	4690      	mov	r8, r2
 800ac32:	d801      	bhi.n	800ac38 <_strtol_l.constprop.0+0x10>
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d106      	bne.n	800ac46 <_strtol_l.constprop.0+0x1e>
 800ac38:	f000 f892 	bl	800ad60 <__errno>
 800ac3c:	2316      	movs	r3, #22
 800ac3e:	6003      	str	r3, [r0, #0]
 800ac40:	2000      	movs	r0, #0
 800ac42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac46:	4834      	ldr	r0, [pc, #208]	@ (800ad18 <_strtol_l.constprop.0+0xf0>)
 800ac48:	460d      	mov	r5, r1
 800ac4a:	462a      	mov	r2, r5
 800ac4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac50:	5d06      	ldrb	r6, [r0, r4]
 800ac52:	f016 0608 	ands.w	r6, r6, #8
 800ac56:	d1f8      	bne.n	800ac4a <_strtol_l.constprop.0+0x22>
 800ac58:	2c2d      	cmp	r4, #45	@ 0x2d
 800ac5a:	d12d      	bne.n	800acb8 <_strtol_l.constprop.0+0x90>
 800ac5c:	782c      	ldrb	r4, [r5, #0]
 800ac5e:	2601      	movs	r6, #1
 800ac60:	1c95      	adds	r5, r2, #2
 800ac62:	f033 0210 	bics.w	r2, r3, #16
 800ac66:	d109      	bne.n	800ac7c <_strtol_l.constprop.0+0x54>
 800ac68:	2c30      	cmp	r4, #48	@ 0x30
 800ac6a:	d12a      	bne.n	800acc2 <_strtol_l.constprop.0+0x9a>
 800ac6c:	782a      	ldrb	r2, [r5, #0]
 800ac6e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac72:	2a58      	cmp	r2, #88	@ 0x58
 800ac74:	d125      	bne.n	800acc2 <_strtol_l.constprop.0+0x9a>
 800ac76:	786c      	ldrb	r4, [r5, #1]
 800ac78:	2310      	movs	r3, #16
 800ac7a:	3502      	adds	r5, #2
 800ac7c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ac80:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ac84:	2200      	movs	r2, #0
 800ac86:	fbbc f9f3 	udiv	r9, ip, r3
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	fb03 ca19 	mls	sl, r3, r9, ip
 800ac90:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ac94:	2f09      	cmp	r7, #9
 800ac96:	d81b      	bhi.n	800acd0 <_strtol_l.constprop.0+0xa8>
 800ac98:	463c      	mov	r4, r7
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	dd27      	ble.n	800acee <_strtol_l.constprop.0+0xc6>
 800ac9e:	1c57      	adds	r7, r2, #1
 800aca0:	d007      	beq.n	800acb2 <_strtol_l.constprop.0+0x8a>
 800aca2:	4581      	cmp	r9, r0
 800aca4:	d320      	bcc.n	800ace8 <_strtol_l.constprop.0+0xc0>
 800aca6:	d101      	bne.n	800acac <_strtol_l.constprop.0+0x84>
 800aca8:	45a2      	cmp	sl, r4
 800acaa:	db1d      	blt.n	800ace8 <_strtol_l.constprop.0+0xc0>
 800acac:	fb00 4003 	mla	r0, r0, r3, r4
 800acb0:	2201      	movs	r2, #1
 800acb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acb6:	e7eb      	b.n	800ac90 <_strtol_l.constprop.0+0x68>
 800acb8:	2c2b      	cmp	r4, #43	@ 0x2b
 800acba:	bf04      	itt	eq
 800acbc:	782c      	ldrbeq	r4, [r5, #0]
 800acbe:	1c95      	addeq	r5, r2, #2
 800acc0:	e7cf      	b.n	800ac62 <_strtol_l.constprop.0+0x3a>
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1da      	bne.n	800ac7c <_strtol_l.constprop.0+0x54>
 800acc6:	2c30      	cmp	r4, #48	@ 0x30
 800acc8:	bf0c      	ite	eq
 800acca:	2308      	moveq	r3, #8
 800accc:	230a      	movne	r3, #10
 800acce:	e7d5      	b.n	800ac7c <_strtol_l.constprop.0+0x54>
 800acd0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800acd4:	2f19      	cmp	r7, #25
 800acd6:	d801      	bhi.n	800acdc <_strtol_l.constprop.0+0xb4>
 800acd8:	3c37      	subs	r4, #55	@ 0x37
 800acda:	e7de      	b.n	800ac9a <_strtol_l.constprop.0+0x72>
 800acdc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ace0:	2f19      	cmp	r7, #25
 800ace2:	d804      	bhi.n	800acee <_strtol_l.constprop.0+0xc6>
 800ace4:	3c57      	subs	r4, #87	@ 0x57
 800ace6:	e7d8      	b.n	800ac9a <_strtol_l.constprop.0+0x72>
 800ace8:	f04f 32ff 	mov.w	r2, #4294967295
 800acec:	e7e1      	b.n	800acb2 <_strtol_l.constprop.0+0x8a>
 800acee:	1c53      	adds	r3, r2, #1
 800acf0:	d108      	bne.n	800ad04 <_strtol_l.constprop.0+0xdc>
 800acf2:	2322      	movs	r3, #34	@ 0x22
 800acf4:	f8ce 3000 	str.w	r3, [lr]
 800acf8:	4660      	mov	r0, ip
 800acfa:	f1b8 0f00 	cmp.w	r8, #0
 800acfe:	d0a0      	beq.n	800ac42 <_strtol_l.constprop.0+0x1a>
 800ad00:	1e69      	subs	r1, r5, #1
 800ad02:	e006      	b.n	800ad12 <_strtol_l.constprop.0+0xea>
 800ad04:	b106      	cbz	r6, 800ad08 <_strtol_l.constprop.0+0xe0>
 800ad06:	4240      	negs	r0, r0
 800ad08:	f1b8 0f00 	cmp.w	r8, #0
 800ad0c:	d099      	beq.n	800ac42 <_strtol_l.constprop.0+0x1a>
 800ad0e:	2a00      	cmp	r2, #0
 800ad10:	d1f6      	bne.n	800ad00 <_strtol_l.constprop.0+0xd8>
 800ad12:	f8c8 1000 	str.w	r1, [r8]
 800ad16:	e794      	b.n	800ac42 <_strtol_l.constprop.0+0x1a>
 800ad18:	0800bd09 	.word	0x0800bd09

0800ad1c <strtol>:
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	460a      	mov	r2, r1
 800ad20:	4601      	mov	r1, r0
 800ad22:	4802      	ldr	r0, [pc, #8]	@ (800ad2c <strtol+0x10>)
 800ad24:	6800      	ldr	r0, [r0, #0]
 800ad26:	f7ff bf7f 	b.w	800ac28 <_strtol_l.constprop.0>
 800ad2a:	bf00      	nop
 800ad2c:	20000018 	.word	0x20000018

0800ad30 <memset>:
 800ad30:	4402      	add	r2, r0
 800ad32:	4603      	mov	r3, r0
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d100      	bne.n	800ad3a <memset+0xa>
 800ad38:	4770      	bx	lr
 800ad3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad3e:	e7f9      	b.n	800ad34 <memset+0x4>

0800ad40 <_sbrk_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d06      	ldr	r5, [pc, #24]	@ (800ad5c <_sbrk_r+0x1c>)
 800ad44:	2300      	movs	r3, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	602b      	str	r3, [r5, #0]
 800ad4c:	f7f7 fa06 	bl	800215c <_sbrk>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_sbrk_r+0x1a>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_sbrk_r+0x1a>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	20000878 	.word	0x20000878

0800ad60 <__errno>:
 800ad60:	4b01      	ldr	r3, [pc, #4]	@ (800ad68 <__errno+0x8>)
 800ad62:	6818      	ldr	r0, [r3, #0]
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	20000018 	.word	0x20000018

0800ad6c <__libc_init_array>:
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	4d0d      	ldr	r5, [pc, #52]	@ (800ada4 <__libc_init_array+0x38>)
 800ad70:	4c0d      	ldr	r4, [pc, #52]	@ (800ada8 <__libc_init_array+0x3c>)
 800ad72:	1b64      	subs	r4, r4, r5
 800ad74:	10a4      	asrs	r4, r4, #2
 800ad76:	2600      	movs	r6, #0
 800ad78:	42a6      	cmp	r6, r4
 800ad7a:	d109      	bne.n	800ad90 <__libc_init_array+0x24>
 800ad7c:	4d0b      	ldr	r5, [pc, #44]	@ (800adac <__libc_init_array+0x40>)
 800ad7e:	4c0c      	ldr	r4, [pc, #48]	@ (800adb0 <__libc_init_array+0x44>)
 800ad80:	f000 f87a 	bl	800ae78 <_init>
 800ad84:	1b64      	subs	r4, r4, r5
 800ad86:	10a4      	asrs	r4, r4, #2
 800ad88:	2600      	movs	r6, #0
 800ad8a:	42a6      	cmp	r6, r4
 800ad8c:	d105      	bne.n	800ad9a <__libc_init_array+0x2e>
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad94:	4798      	blx	r3
 800ad96:	3601      	adds	r6, #1
 800ad98:	e7ee      	b.n	800ad78 <__libc_init_array+0xc>
 800ad9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad9e:	4798      	blx	r3
 800ada0:	3601      	adds	r6, #1
 800ada2:	e7f2      	b.n	800ad8a <__libc_init_array+0x1e>
 800ada4:	0800be14 	.word	0x0800be14
 800ada8:	0800be14 	.word	0x0800be14
 800adac:	0800be14 	.word	0x0800be14
 800adb0:	0800be18 	.word	0x0800be18

0800adb4 <__retarget_lock_acquire_recursive>:
 800adb4:	4770      	bx	lr

0800adb6 <__retarget_lock_release_recursive>:
 800adb6:	4770      	bx	lr

0800adb8 <memcpy>:
 800adb8:	440a      	add	r2, r1
 800adba:	4291      	cmp	r1, r2
 800adbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800adc0:	d100      	bne.n	800adc4 <memcpy+0xc>
 800adc2:	4770      	bx	lr
 800adc4:	b510      	push	{r4, lr}
 800adc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adce:	4291      	cmp	r1, r2
 800add0:	d1f9      	bne.n	800adc6 <memcpy+0xe>
 800add2:	bd10      	pop	{r4, pc}

0800add4 <_free_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4605      	mov	r5, r0
 800add8:	2900      	cmp	r1, #0
 800adda:	d041      	beq.n	800ae60 <_free_r+0x8c>
 800addc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ade0:	1f0c      	subs	r4, r1, #4
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	bfb8      	it	lt
 800ade6:	18e4      	addlt	r4, r4, r3
 800ade8:	f7ff fedc 	bl	800aba4 <__malloc_lock>
 800adec:	4a1d      	ldr	r2, [pc, #116]	@ (800ae64 <_free_r+0x90>)
 800adee:	6813      	ldr	r3, [r2, #0]
 800adf0:	b933      	cbnz	r3, 800ae00 <_free_r+0x2c>
 800adf2:	6063      	str	r3, [r4, #4]
 800adf4:	6014      	str	r4, [r2, #0]
 800adf6:	4628      	mov	r0, r5
 800adf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adfc:	f7ff bed8 	b.w	800abb0 <__malloc_unlock>
 800ae00:	42a3      	cmp	r3, r4
 800ae02:	d908      	bls.n	800ae16 <_free_r+0x42>
 800ae04:	6820      	ldr	r0, [r4, #0]
 800ae06:	1821      	adds	r1, r4, r0
 800ae08:	428b      	cmp	r3, r1
 800ae0a:	bf01      	itttt	eq
 800ae0c:	6819      	ldreq	r1, [r3, #0]
 800ae0e:	685b      	ldreq	r3, [r3, #4]
 800ae10:	1809      	addeq	r1, r1, r0
 800ae12:	6021      	streq	r1, [r4, #0]
 800ae14:	e7ed      	b.n	800adf2 <_free_r+0x1e>
 800ae16:	461a      	mov	r2, r3
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	b10b      	cbz	r3, 800ae20 <_free_r+0x4c>
 800ae1c:	42a3      	cmp	r3, r4
 800ae1e:	d9fa      	bls.n	800ae16 <_free_r+0x42>
 800ae20:	6811      	ldr	r1, [r2, #0]
 800ae22:	1850      	adds	r0, r2, r1
 800ae24:	42a0      	cmp	r0, r4
 800ae26:	d10b      	bne.n	800ae40 <_free_r+0x6c>
 800ae28:	6820      	ldr	r0, [r4, #0]
 800ae2a:	4401      	add	r1, r0
 800ae2c:	1850      	adds	r0, r2, r1
 800ae2e:	4283      	cmp	r3, r0
 800ae30:	6011      	str	r1, [r2, #0]
 800ae32:	d1e0      	bne.n	800adf6 <_free_r+0x22>
 800ae34:	6818      	ldr	r0, [r3, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	6053      	str	r3, [r2, #4]
 800ae3a:	4408      	add	r0, r1
 800ae3c:	6010      	str	r0, [r2, #0]
 800ae3e:	e7da      	b.n	800adf6 <_free_r+0x22>
 800ae40:	d902      	bls.n	800ae48 <_free_r+0x74>
 800ae42:	230c      	movs	r3, #12
 800ae44:	602b      	str	r3, [r5, #0]
 800ae46:	e7d6      	b.n	800adf6 <_free_r+0x22>
 800ae48:	6820      	ldr	r0, [r4, #0]
 800ae4a:	1821      	adds	r1, r4, r0
 800ae4c:	428b      	cmp	r3, r1
 800ae4e:	bf04      	itt	eq
 800ae50:	6819      	ldreq	r1, [r3, #0]
 800ae52:	685b      	ldreq	r3, [r3, #4]
 800ae54:	6063      	str	r3, [r4, #4]
 800ae56:	bf04      	itt	eq
 800ae58:	1809      	addeq	r1, r1, r0
 800ae5a:	6021      	streq	r1, [r4, #0]
 800ae5c:	6054      	str	r4, [r2, #4]
 800ae5e:	e7ca      	b.n	800adf6 <_free_r+0x22>
 800ae60:	bd38      	pop	{r3, r4, r5, pc}
 800ae62:	bf00      	nop
 800ae64:	2000073c 	.word	0x2000073c

0800ae68 <_malloc_usable_size_r>:
 800ae68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae6c:	1f18      	subs	r0, r3, #4
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	bfbc      	itt	lt
 800ae72:	580b      	ldrlt	r3, [r1, r0]
 800ae74:	18c0      	addlt	r0, r0, r3
 800ae76:	4770      	bx	lr

0800ae78 <_init>:
 800ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7a:	bf00      	nop
 800ae7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7e:	bc08      	pop	{r3}
 800ae80:	469e      	mov	lr, r3
 800ae82:	4770      	bx	lr

0800ae84 <_fini>:
 800ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae86:	bf00      	nop
 800ae88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8a:	bc08      	pop	{r3}
 800ae8c:	469e      	mov	lr, r3
 800ae8e:	4770      	bx	lr
