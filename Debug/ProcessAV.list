
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4fc  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f6c  0800d684  0800d684  0000e684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5f0  0800e5f0  00010068  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5f0  0800e5f0  0000f5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5f8  0800e5f8  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5f8  0800e5f8  0000f5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e5fc  0800e5fc  0000f5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800e600  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010068  2**0
                  CONTENTS
 10 .bss          000006bc  20000068  20000068  00010068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000724  20000724  00010068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a757  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d86  00000000  00000000  0002a7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  0002e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128c  00000000  00000000  0002fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b5f  00000000  00000000  00030ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa37  00000000  00000000  00056b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6bdc  00000000  00000000  0007658a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d166  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069c0  00000000  00000000  0014d1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00153b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d66c 	.word	0x0800d66c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800d66c 	.word	0x0800d66c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b96a 	b.w	8000cb0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	460c      	mov	r4, r1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d14e      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a00:	4694      	mov	ip, r2
 8000a02:	458c      	cmp	ip, r1
 8000a04:	4686      	mov	lr, r0
 8000a06:	fab2 f282 	clz	r2, r2
 8000a0a:	d962      	bls.n	8000ad2 <__udivmoddi4+0xde>
 8000a0c:	b14a      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a0e:	f1c2 0320 	rsb	r3, r2, #32
 8000a12:	4091      	lsls	r1, r2
 8000a14:	fa20 f303 	lsr.w	r3, r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	4319      	orrs	r1, r3
 8000a1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a26:	fa1f f68c 	uxth.w	r6, ip
 8000a2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a32:	fb07 1114 	mls	r1, r7, r4, r1
 8000a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3a:	fb04 f106 	mul.w	r1, r4, r6
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x64>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a4a:	f080 8112 	bcs.w	8000c72 <__udivmoddi4+0x27e>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 810f 	bls.w	8000c72 <__udivmoddi4+0x27e>
 8000a54:	3c02      	subs	r4, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1a59      	subs	r1, r3, r1
 8000a5a:	fa1f f38e 	uxth.w	r3, lr
 8000a5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a62:	fb07 1110 	mls	r1, r7, r0, r1
 8000a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6a:	fb00 f606 	mul.w	r6, r0, r6
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x94>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a7a:	f080 80fc 	bcs.w	8000c76 <__udivmoddi4+0x282>
 8000a7e:	429e      	cmp	r6, r3
 8000a80:	f240 80f9 	bls.w	8000c76 <__udivmoddi4+0x282>
 8000a84:	4463      	add	r3, ip
 8000a86:	3802      	subs	r0, #2
 8000a88:	1b9b      	subs	r3, r3, r6
 8000a8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a8e:	2100      	movs	r1, #0
 8000a90:	b11d      	cbz	r5, 8000a9a <__udivmoddi4+0xa6>
 8000a92:	40d3      	lsrs	r3, r2
 8000a94:	2200      	movs	r2, #0
 8000a96:	e9c5 3200 	strd	r3, r2, [r5]
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d905      	bls.n	8000aae <__udivmoddi4+0xba>
 8000aa2:	b10d      	cbz	r5, 8000aa8 <__udivmoddi4+0xb4>
 8000aa4:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e7f5      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000aae:	fab3 f183 	clz	r1, r3
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d146      	bne.n	8000b44 <__udivmoddi4+0x150>
 8000ab6:	42a3      	cmp	r3, r4
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xcc>
 8000aba:	4290      	cmp	r0, r2
 8000abc:	f0c0 80f0 	bcc.w	8000ca0 <__udivmoddi4+0x2ac>
 8000ac0:	1a86      	subs	r6, r0, r2
 8000ac2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d0e6      	beq.n	8000a9a <__udivmoddi4+0xa6>
 8000acc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ad0:	e7e3      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	f040 8090 	bne.w	8000bf8 <__udivmoddi4+0x204>
 8000ad8:	eba1 040c 	sub.w	r4, r1, ip
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	fa1f f78c 	uxth.w	r7, ip
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aee:	fb08 4416 	mls	r4, r8, r6, r4
 8000af2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000af6:	fb07 f006 	mul.w	r0, r7, r6
 8000afa:	4298      	cmp	r0, r3
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x11c>
 8000afe:	eb1c 0303 	adds.w	r3, ip, r3
 8000b02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x11a>
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	f200 80cd 	bhi.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b0e:	4626      	mov	r6, r4
 8000b10:	1a1c      	subs	r4, r3, r0
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b22:	fb00 f707 	mul.w	r7, r0, r7
 8000b26:	429f      	cmp	r7, r3
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x148>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x146>
 8000b34:	429f      	cmp	r7, r3
 8000b36:	f200 80b0 	bhi.w	8000c9a <__udivmoddi4+0x2a6>
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	1bdb      	subs	r3, r3, r7
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	e7a5      	b.n	8000a90 <__udivmoddi4+0x9c>
 8000b44:	f1c1 0620 	rsb	r6, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b54:	fa04 f301 	lsl.w	r3, r4, r1
 8000b58:	ea43 030c 	orr.w	r3, r3, ip
 8000b5c:	40f4      	lsrs	r4, r6
 8000b5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b62:	0c38      	lsrs	r0, r7, #16
 8000b64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b68:	fbb4 fef0 	udiv	lr, r4, r0
 8000b6c:	fa1f fc87 	uxth.w	ip, r7
 8000b70:	fb00 441e 	mls	r4, r0, lr, r4
 8000b74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b78:	fb0e f90c 	mul.w	r9, lr, ip
 8000b7c:	45a1      	cmp	r9, r4
 8000b7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b82:	d90a      	bls.n	8000b9a <__udivmoddi4+0x1a6>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b8a:	f080 8084 	bcs.w	8000c96 <__udivmoddi4+0x2a2>
 8000b8e:	45a1      	cmp	r9, r4
 8000b90:	f240 8081 	bls.w	8000c96 <__udivmoddi4+0x2a2>
 8000b94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b98:	443c      	add	r4, r7
 8000b9a:	eba4 0409 	sub.w	r4, r4, r9
 8000b9e:	fa1f f983 	uxth.w	r9, r3
 8000ba2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ba6:	fb00 4413 	mls	r4, r0, r3, r4
 8000baa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	d907      	bls.n	8000bc6 <__udivmoddi4+0x1d2>
 8000bb6:	193c      	adds	r4, r7, r4
 8000bb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bbc:	d267      	bcs.n	8000c8e <__udivmoddi4+0x29a>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0x29a>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	443c      	add	r4, r7
 8000bc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bca:	fba0 9302 	umull	r9, r3, r0, r2
 8000bce:	eba4 040c 	sub.w	r4, r4, ip
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	46ce      	mov	lr, r9
 8000bd6:	469c      	mov	ip, r3
 8000bd8:	d351      	bcc.n	8000c7e <__udivmoddi4+0x28a>
 8000bda:	d04e      	beq.n	8000c7a <__udivmoddi4+0x286>
 8000bdc:	b155      	cbz	r5, 8000bf4 <__udivmoddi4+0x200>
 8000bde:	ebb8 030e 	subs.w	r3, r8, lr
 8000be2:	eb64 040c 	sbc.w	r4, r4, ip
 8000be6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bea:	40cb      	lsrs	r3, r1
 8000bec:	431e      	orrs	r6, r3
 8000bee:	40cc      	lsrs	r4, r1
 8000bf0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	e750      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000bf8:	f1c2 0320 	rsb	r3, r2, #32
 8000bfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	fa24 f303 	lsr.w	r3, r4, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	430c      	orrs	r4, r1
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c20:	0c23      	lsrs	r3, r4, #16
 8000c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c26:	fb00 f107 	mul.w	r1, r0, r7
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x24c>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c36:	d22c      	bcs.n	8000c92 <__udivmoddi4+0x29e>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d92a      	bls.n	8000c92 <__udivmoddi4+0x29e>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c48:	fb08 3311 	mls	r3, r8, r1, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb01 f307 	mul.w	r3, r1, r7
 8000c54:	42a3      	cmp	r3, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x276>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c60:	d213      	bcs.n	8000c8a <__udivmoddi4+0x296>
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	d911      	bls.n	8000c8a <__udivmoddi4+0x296>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4464      	add	r4, ip
 8000c6a:	1ae4      	subs	r4, r4, r3
 8000c6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c70:	e739      	b.n	8000ae6 <__udivmoddi4+0xf2>
 8000c72:	4604      	mov	r4, r0
 8000c74:	e6f0      	b.n	8000a58 <__udivmoddi4+0x64>
 8000c76:	4608      	mov	r0, r1
 8000c78:	e706      	b.n	8000a88 <__udivmoddi4+0x94>
 8000c7a:	45c8      	cmp	r8, r9
 8000c7c:	d2ae      	bcs.n	8000bdc <__udivmoddi4+0x1e8>
 8000c7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c86:	3801      	subs	r0, #1
 8000c88:	e7a8      	b.n	8000bdc <__udivmoddi4+0x1e8>
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	e7ed      	b.n	8000c6a <__udivmoddi4+0x276>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	e799      	b.n	8000bc6 <__udivmoddi4+0x1d2>
 8000c92:	4630      	mov	r0, r6
 8000c94:	e7d4      	b.n	8000c40 <__udivmoddi4+0x24c>
 8000c96:	46d6      	mov	lr, sl
 8000c98:	e77f      	b.n	8000b9a <__udivmoddi4+0x1a6>
 8000c9a:	4463      	add	r3, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	e74d      	b.n	8000b3c <__udivmoddi4+0x148>
 8000ca0:	4606      	mov	r6, r0
 8000ca2:	4623      	mov	r3, r4
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e70f      	b.n	8000ac8 <__udivmoddi4+0xd4>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	e730      	b.n	8000b10 <__udivmoddi4+0x11c>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <play_audio_file>:
static bool flagBuffer = 0; /*Flag pentru a indica bufferul curent de redare*/



void play_audio_file(char *path)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 8000cbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cc0:	f00c fb2c 	bl	800d31c <malloc>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b32      	ldr	r3, [pc, #200]	@ (8000d94 <play_audio_file+0xe0>)
 8000cca:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]

	if(buffer == NULL)
 8000cd0:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <play_audio_file+0xe0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d058      	beq.n	8000d8a <play_audio_file+0xd6>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <play_audio_file+0xe0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f107 020f 	add.w	r2, r7, #15
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f002 fa28 	bl	8003138 <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <play_audio_file+0xe0>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	2300      	movs	r3, #0
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4828      	ldr	r0, [pc, #160]	@ (8000d98 <play_audio_file+0xe4>)
 8000cf8:	f003 fd44 	bl	8004784 <HAL_DAC_Start_DMA>

	while(!flagAudioDone)
 8000cfc:	e029      	b.n	8000d52 <play_audio_file+0x9e>
	{
		read_audio_file(path, buffer+1024, &flagAudioDone);
 8000cfe:	4b25      	ldr	r3, [pc, #148]	@ (8000d94 <play_audio_file+0xe0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d06:	f107 020f 	add.w	r2, r7, #15
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f002 fa13 	bl	8003138 <read_audio_file>
		while(flagDmaDAC == 0);
 8000d12:	bf00      	nop
 8000d14:	4b21      	ldr	r3, [pc, #132]	@ (8000d9c <play_audio_file+0xe8>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f083 0301 	eor.w	r3, r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f7      	bne.n	8000d14 <play_audio_file+0x60>
		flagDmaDAC = 0;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <play_audio_file+0xe8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer, &flagAudioDone);
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <play_audio_file+0xe0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f107 020f 	add.w	r2, r7, #15
 8000d32:	4619      	mov	r1, r3
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f002 f9ff 	bl	8003138 <read_audio_file>
		while(flagDmaDAC == 0);
 8000d3a:	bf00      	nop
 8000d3c:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <play_audio_file+0xe8>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f083 0301 	eor.w	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f7      	bne.n	8000d3c <play_audio_file+0x88>
		flagDmaDAC = 0;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <play_audio_file+0xe8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	f083 0301 	eor.w	r3, r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1cf      	bne.n	8000cfe <play_audio_file+0x4a>

	}

	while(flagDmaDAC == 0);
 8000d5e:	bf00      	nop
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <play_audio_file+0xe8>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	f083 0301 	eor.w	r3, r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f7      	bne.n	8000d60 <play_audio_file+0xac>
	flagDmaDAC = 0;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <play_audio_file+0xe8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000d76:	2100      	movs	r1, #0
 8000d78:	4807      	ldr	r0, [pc, #28]	@ (8000d98 <play_audio_file+0xe4>)
 8000d7a:	f003 fdc5 	bl	8004908 <HAL_DAC_Stop_DMA>

	free(buffer);
 8000d7e:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <play_audio_file+0xe0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f00c fad2 	bl	800d32c <free>
 8000d88:	e000      	b.n	8000d8c <play_audio_file+0xd8>
		return;
 8000d8a:	bf00      	nop

}
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000084 	.word	0x20000084
 8000d98:	2000008c 	.word	0x2000008c
 8000d9c:	2000032e 	.word	0x2000032e

08000da0 <vibrato_filter>:


static void vibrato_filter(int8_t delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	 * FlagBuffer ne spune in ce buffer ne aflam in momentul prelucrarii 0 sau 1
	 * (prima jumatate sau a doua)
	 * Output: Void
	 */

	int index = (int)((delay*1000)/22.67);
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fb60 	bl	800047c <__aeabi_i2d>
 8000dbc:	a346      	add	r3, pc, #280	@ (adr r3, 8000ed8 <vibrato_filter+0x138>)
 8000dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc2:	f7ff fcef 	bl	80007a4 <__aeabi_ddiv>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f7ff fdd1 	bl	8000974 <__aeabi_d2iz>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60bb      	str	r3, [r7, #8]

	if(flagBuffer == 0)
 8000dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed0 <vibrato_filter+0x130>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	f083 0301 	eor.w	r3, r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d02e      	beq.n	8000e42 <vibrato_filter+0xa2>
	{
		/*Prima jumatate a bufferului*/

		for(uint16_t i=0; i<1024; i++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	81fb      	strh	r3, [r7, #14]
 8000de8:	e026      	b.n	8000e38 <vibrato_filter+0x98>
		{

			if(i+index < 0)
 8000dea:	89fa      	ldrh	r2, [r7, #14]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4413      	add	r3, r2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	da10      	bge.n	8000e16 <vibrato_filter+0x76>
			{
				/*Pentru cazul intarzierii*/

				buffer[i] = buffer[2047+(index+i)+1];
 8000df4:	4b37      	ldr	r3, [pc, #220]	@ (8000ed4 <vibrato_filter+0x134>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	89f9      	ldrh	r1, [r7, #14]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	440b      	add	r3, r1
 8000dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	441a      	add	r2, r3
 8000e06:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <vibrato_filter+0x134>)
 8000e08:	6819      	ldr	r1, [r3, #0]
 8000e0a:	89fb      	ldrh	r3, [r7, #14]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	440b      	add	r3, r1
 8000e10:	6812      	ldr	r2, [r2, #0]
 8000e12:	601a      	str	r2, [r3, #0]
				continue;
 8000e14:	e00d      	b.n	8000e32 <vibrato_filter+0x92>
			}


			buffer[i] = buffer[i+index];
 8000e16:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <vibrato_filter+0x134>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	89f9      	ldrh	r1, [r7, #14]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	440b      	add	r3, r1
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	441a      	add	r2, r3
 8000e24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <vibrato_filter+0x134>)
 8000e26:	6819      	ldr	r1, [r3, #0]
 8000e28:	89fb      	ldrh	r3, [r7, #14]
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	601a      	str	r2, [r3, #0]
		for(uint16_t i=0; i<1024; i++)
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	3301      	adds	r3, #1
 8000e36:	81fb      	strh	r3, [r7, #14]
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e3e:	d3d4      	bcc.n	8000dea <vibrato_filter+0x4a>
 8000e40:	e031      	b.n	8000ea6 <vibrato_filter+0x106>

	else
	{
		/*A doua jumatate a bufferului*/

		for(uint16_t i=1024; i<2048; i++)
 8000e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e46:	81bb      	strh	r3, [r7, #12]
 8000e48:	e029      	b.n	8000e9e <vibrato_filter+0xfe>
		{

			if(i+index > 2048)
 8000e4a:	89ba      	ldrh	r2, [r7, #12]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4413      	add	r3, r2
 8000e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e54:	dd12      	ble.n	8000e7c <vibrato_filter+0xdc>
			{
				/*Pentru cazul anticiparii*/

				buffer[i] = buffer[((i+index)-2047)-1];
 8000e56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <vibrato_filter+0x134>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	89b9      	ldrh	r1, [r7, #12]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	440b      	add	r3, r1
 8000e60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000e64:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	441a      	add	r2, r3
 8000e6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <vibrato_filter+0x134>)
 8000e6e:	6819      	ldr	r1, [r3, #0]
 8000e70:	89bb      	ldrh	r3, [r7, #12]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	601a      	str	r2, [r3, #0]
				continue;
 8000e7a:	e00d      	b.n	8000e98 <vibrato_filter+0xf8>
			}


			buffer[i] = buffer[i+index];
 8000e7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <vibrato_filter+0x134>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	89b9      	ldrh	r1, [r7, #12]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	440b      	add	r3, r1
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	441a      	add	r2, r3
 8000e8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <vibrato_filter+0x134>)
 8000e8c:	6819      	ldr	r1, [r3, #0]
 8000e8e:	89bb      	ldrh	r3, [r7, #12]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	440b      	add	r3, r1
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	601a      	str	r2, [r3, #0]
		for(uint16_t i=1024; i<2048; i++)
 8000e98:	89bb      	ldrh	r3, [r7, #12]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	81bb      	strh	r3, [r7, #12]
 8000e9e:	89bb      	ldrh	r3, [r7, #12]
 8000ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ea4:	d3d1      	bcc.n	8000e4a <vibrato_filter+0xaa>
		}

	}


	flagBuffer = !flagBuffer; /*schimbam jumatatea bufferului*/
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <vibrato_filter+0x130>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	bf14      	ite	ne
 8000eae:	2301      	movne	r3, #1
 8000eb0:	2300      	moveq	r3, #0
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <vibrato_filter+0x130>)
 8000ec2:	701a      	strb	r2, [r3, #0]


}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	20000088 	.word	0x20000088
 8000ed4:	20000084 	.word	0x20000084
 8000ed8:	1eb851ec 	.word	0x1eb851ec
 8000edc:	4036ab85 	.word	0x4036ab85

08000ee0 <play_audio_file_vibrato>:



void play_audio_file_vibrato(char *path)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
	 * Functie pentru redarea unui fisier audio din cardul cu efect vibrato SD.
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 8000ee8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000eec:	f00c fa16 	bl	800d31c <malloc>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b77      	ldr	r3, [pc, #476]	@ (80010d4 <play_audio_file_vibrato+0x1f4>)
 8000ef6:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	72fb      	strb	r3, [r7, #11]
	flagBuffer = 1; /*Incepem din a doua jumatate*/
 8000efc:	4b76      	ldr	r3, [pc, #472]	@ (80010d8 <play_audio_file_vibrato+0x1f8>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]

	int8_t delay = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
	uint8_t k = 0; /*determinam intervalul de timp cand schimbam delayul -> la fiecare 8*1024 esantioane*/
 8000f06:	2300      	movs	r3, #0
 8000f08:	73bb      	strb	r3, [r7, #14]
	int8_t delayArray[3] = {0,2,4};
 8000f0a:	4a74      	ldr	r2, [pc, #464]	@ (80010dc <play_audio_file_vibrato+0x1fc>)
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	6812      	ldr	r2, [r2, #0]
 8000f12:	4611      	mov	r1, r2
 8000f14:	8019      	strh	r1, [r3, #0]
 8000f16:	3302      	adds	r3, #2
 8000f18:	0c12      	lsrs	r2, r2, #16
 8000f1a:	701a      	strb	r2, [r3, #0]
	uint8_t delayIndex = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	737b      	strb	r3, [r7, #13]
	bool flagDx = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	733b      	strb	r3, [r7, #12]

	if(buffer == NULL)
 8000f24:	4b6b      	ldr	r3, [pc, #428]	@ (80010d4 <play_audio_file_vibrato+0x1f4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80ce 	beq.w	80010ca <play_audio_file_vibrato+0x1ea>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 8000f2e:	4b69      	ldr	r3, [pc, #420]	@ (80010d4 <play_audio_file_vibrato+0x1f4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f107 020b 	add.w	r2, r7, #11
 8000f36:	4619      	mov	r1, r3
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f002 f8fd 	bl	8003138 <read_audio_file>
	k = (k+1) % 8;
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	3301      	adds	r3, #1
 8000f42:	425a      	negs	r2, r3
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	f002 0207 	and.w	r2, r2, #7
 8000f4c:	bf58      	it	pl
 8000f4e:	4253      	negpl	r3, r2
 8000f50:	73bb      	strb	r3, [r7, #14]

	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 8000f52:	4b60      	ldr	r3, [pc, #384]	@ (80010d4 <play_audio_file_vibrato+0x1f4>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	2300      	movs	r3, #0
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f5e:	2100      	movs	r1, #0
 8000f60:	485f      	ldr	r0, [pc, #380]	@ (80010e0 <play_audio_file_vibrato+0x200>)
 8000f62:	f003 fc0f 	bl	8004784 <HAL_DAC_Start_DMA>

	while(!flagAudioDone)
 8000f66:	e093      	b.n	8001090 <play_audio_file_vibrato+0x1b0>
	{
		read_audio_file(path, buffer+1024, &flagAudioDone);
 8000f68:	4b5a      	ldr	r3, [pc, #360]	@ (80010d4 <play_audio_file_vibrato+0x1f4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f70:	f107 020b 	add.w	r2, r7, #11
 8000f74:	4619      	mov	r1, r3
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f002 f8de 	bl	8003138 <read_audio_file>
		vibrato_filter(delay);
 8000f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff0d 	bl	8000da0 <vibrato_filter>
		k = (k+1) % 8;
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	425a      	negs	r2, r3
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	f002 0207 	and.w	r2, r2, #7
 8000f94:	bf58      	it	pl
 8000f96:	4253      	negpl	r3, r2
 8000f98:	73bb      	strb	r3, [r7, #14]

		if(k == 0)
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d122      	bne.n	8000fe6 <play_audio_file_vibrato+0x106>
		{
			/*
			 * Schimbam valaorea delay-ului variational
			 */

			if(flagDx == 0)
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	f083 0301 	eor.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d009      	beq.n	8000fc0 <play_audio_file_vibrato+0xe0>
			{
				delay = delayArray[++delayIndex];
 8000fac:	7b7b      	ldrb	r3, [r7, #13]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	737b      	strb	r3, [r7, #13]
 8000fb2:	7b7b      	ldrb	r3, [r7, #13]
 8000fb4:	3310      	adds	r3, #16
 8000fb6:	443b      	add	r3, r7
 8000fb8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	e008      	b.n	8000fd2 <play_audio_file_vibrato+0xf2>
			}

			else
			{
				delay = delayArray[--delayIndex];
 8000fc0:	7b7b      	ldrb	r3, [r7, #13]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	737b      	strb	r3, [r7, #13]
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	3310      	adds	r3, #16
 8000fca:	443b      	add	r3, r7
 8000fcc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000fd0:	73fb      	strb	r3, [r7, #15]
			}

			if(delayIndex == 2)
 8000fd2:	7b7b      	ldrb	r3, [r7, #13]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d101      	bne.n	8000fdc <play_audio_file_vibrato+0xfc>
			{
				flagDx = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	733b      	strb	r3, [r7, #12]
			}

			if(delayIndex == 0)
 8000fdc:	7b7b      	ldrb	r3, [r7, #13]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <play_audio_file_vibrato+0x106>
			{
				flagDx = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	733b      	strb	r3, [r7, #12]
			}

		}

		while(flagDmaDAC == 0);
 8000fe6:	bf00      	nop
 8000fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80010e4 <play_audio_file_vibrato+0x204>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f083 0301 	eor.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f7      	bne.n	8000fe8 <play_audio_file_vibrato+0x108>
		flagDmaDAC = 0;
 8000ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80010e4 <play_audio_file_vibrato+0x204>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]

		read_audio_file(path, buffer, &flagAudioDone);
 8000ffe:	4b35      	ldr	r3, [pc, #212]	@ (80010d4 <play_audio_file_vibrato+0x1f4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f107 020b 	add.w	r2, r7, #11
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f002 f895 	bl	8003138 <read_audio_file>
		vibrato_filter(delay);
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fec4 	bl	8000da0 <vibrato_filter>
		k = (k+1) % 8;
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	3301      	adds	r3, #1
 800101c:	425a      	negs	r2, r3
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	f002 0207 	and.w	r2, r2, #7
 8001026:	bf58      	it	pl
 8001028:	4253      	negpl	r3, r2
 800102a:	73bb      	strb	r3, [r7, #14]

		if(k == 0)
 800102c:	7bbb      	ldrb	r3, [r7, #14]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d122      	bne.n	8001078 <play_audio_file_vibrato+0x198>
		{
			/*
			 * Schimbam valaorea delay-ului variational
			 */

			if(flagDx == 0)
 8001032:	7b3b      	ldrb	r3, [r7, #12]
 8001034:	f083 0301 	eor.w	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d009      	beq.n	8001052 <play_audio_file_vibrato+0x172>
			{
				delay = delayArray[++delayIndex];
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	3301      	adds	r3, #1
 8001042:	737b      	strb	r3, [r7, #13]
 8001044:	7b7b      	ldrb	r3, [r7, #13]
 8001046:	3310      	adds	r3, #16
 8001048:	443b      	add	r3, r7
 800104a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e008      	b.n	8001064 <play_audio_file_vibrato+0x184>
			}

			else
			{
				delay = delayArray[--delayIndex];
 8001052:	7b7b      	ldrb	r3, [r7, #13]
 8001054:	3b01      	subs	r3, #1
 8001056:	737b      	strb	r3, [r7, #13]
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	3310      	adds	r3, #16
 800105c:	443b      	add	r3, r7
 800105e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001062:	73fb      	strb	r3, [r7, #15]
			}

			if(delayIndex == 2)
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d101      	bne.n	800106e <play_audio_file_vibrato+0x18e>
			{
				flagDx = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	733b      	strb	r3, [r7, #12]
			}

			if(delayIndex == 0)
 800106e:	7b7b      	ldrb	r3, [r7, #13]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <play_audio_file_vibrato+0x198>
			{
				flagDx = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	733b      	strb	r3, [r7, #12]
			}

		}

		while(flagDmaDAC == 0);
 8001078:	bf00      	nop
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <play_audio_file_vibrato+0x204>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f083 0301 	eor.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f7      	bne.n	800107a <play_audio_file_vibrato+0x19a>
		flagDmaDAC = 0;
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <play_audio_file_vibrato+0x204>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone)
 8001090:	7afb      	ldrb	r3, [r7, #11]
 8001092:	f083 0301 	eor.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	f47f af65 	bne.w	8000f68 <play_audio_file_vibrato+0x88>


	}

	while(flagDmaDAC == 0);
 800109e:	bf00      	nop
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <play_audio_file_vibrato+0x204>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f083 0301 	eor.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f7      	bne.n	80010a0 <play_audio_file_vibrato+0x1c0>
	flagDmaDAC = 0;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <play_audio_file_vibrato+0x204>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80010b6:	2100      	movs	r1, #0
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <play_audio_file_vibrato+0x200>)
 80010ba:	f003 fc25 	bl	8004908 <HAL_DAC_Stop_DMA>

	free(buffer);
 80010be:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <play_audio_file_vibrato+0x1f4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00c f932 	bl	800d32c <free>
 80010c8:	e000      	b.n	80010cc <play_audio_file_vibrato+0x1ec>
		return;
 80010ca:	bf00      	nop

}
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000084 	.word	0x20000084
 80010d8:	20000088 	.word	0x20000088
 80010dc:	0800d684 	.word	0x0800d684
 80010e0:	2000008c 	.word	0x2000008c
 80010e4:	2000032e 	.word	0x2000032e

080010e8 <convert_color_16_to_18>:

extern SPI_HandleTypeDef hspi1;
volatile extern uint8_t flagDmaSpiTx;

void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	0adb      	lsrs	r3, r3, #11
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	115b      	asrs	r3, r3, #5
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001106:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	4613      	mov	r3, r2
 8001116:	019b      	lsls	r3, r3, #6
 8001118:	1a9b      	subs	r3, r3, r2
 800111a:	4a16      	ldr	r2, [pc, #88]	@ (8001174 <convert_color_16_to_18+0x8c>)
 800111c:	fb82 1203 	smull	r1, r2, r2, r3
 8001120:	441a      	add	r2, r3
 8001122:	1112      	asrs	r2, r2, #4
 8001124:	17db      	asrs	r3, r3, #31
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8001134:	7b7a      	ldrb	r2, [r7, #13]
 8001136:	4613      	mov	r3, r2
 8001138:	019b      	lsls	r3, r3, #6
 800113a:	1a9b      	subs	r3, r3, r2
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <convert_color_16_to_18+0x8c>)
 800113e:	fb82 1203 	smull	r1, r2, r2, r3
 8001142:	441a      	add	r2, r3
 8001144:	1112      	asrs	r2, r2, #4
 8001146:	17db      	asrs	r3, r3, #31
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	7bba      	ldrb	r2, [r7, #14]
 800115c:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	7b7a      	ldrb	r2, [r7, #13]
 8001164:	701a      	strb	r2, [r3, #0]

}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	84210843 	.word	0x84210843

08001178 <write_color>:


void write_color(uint16_t color)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 8001182:	f107 020c 	add.w	r2, r7, #12
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ffac 	bl	80010e8 <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8001190:	f107 010c 	add.w	r1, r7, #12
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	2203      	movs	r2, #3
 800119a:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <write_color+0x30>)
 800119c:	f005 ff69 	bl	8007072 <HAL_SPI_Transmit>


}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000184 	.word	0x20000184

080011ac <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
 80011b6:	460b      	mov	r3, r1
 80011b8:	80bb      	strh	r3, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	88fa      	ldrh	r2, [r7, #6]
 80011c2:	88b9      	ldrh	r1, [r7, #4]
 80011c4:	88f8      	ldrh	r0, [r7, #6]
 80011c6:	2477      	movs	r4, #119	@ 0x77
 80011c8:	9400      	str	r4, [sp, #0]
 80011ca:	f001 f907 	bl	80023dc <set_adress_window>

	DC_DATA();
 80011ce:	2201      	movs	r2, #1
 80011d0:	2108      	movs	r1, #8
 80011d2:	480a      	ldr	r0, [pc, #40]	@ (80011fc <draw_pixel+0x50>)
 80011d4:	f004 fa7a 	bl	80056cc <HAL_GPIO_WritePin>
	CS_A();
 80011d8:	2200      	movs	r2, #0
 80011da:	2110      	movs	r1, #16
 80011dc:	4807      	ldr	r0, [pc, #28]	@ (80011fc <draw_pixel+0x50>)
 80011de:	f004 fa75 	bl	80056cc <HAL_GPIO_WritePin>

	write_color(color);
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ffc7 	bl	8001178 <write_color>

	CS_D();
 80011ea:	2201      	movs	r2, #1
 80011ec:	2110      	movs	r1, #16
 80011ee:	4803      	ldr	r0, [pc, #12]	@ (80011fc <draw_pixel+0x50>)
 80011f0:	f004 fa6c 	bl	80056cc <HAL_GPIO_WritePin>

}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	40020c00 	.word	0x40020c00

08001200 <draw_pixel_data>:


static inline void draw_pixel_data(uint16_t x, uint16_t y, uint8_t *data)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b085      	sub	sp, #20
 8001204:	af02      	add	r7, sp, #8
 8001206:	4603      	mov	r3, r0
 8001208:	603a      	str	r2, [r7, #0]
 800120a:	80fb      	strh	r3, [r7, #6]
 800120c:	460b      	mov	r3, r1
 800120e:	80bb      	strh	r3, [r7, #4]
	set_adress_window(x,y,x,y, 'w');
 8001210:	88bb      	ldrh	r3, [r7, #4]
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	88b9      	ldrh	r1, [r7, #4]
 8001216:	88f8      	ldrh	r0, [r7, #6]
 8001218:	2477      	movs	r4, #119	@ 0x77
 800121a:	9400      	str	r4, [sp, #0]
 800121c:	f001 f8de 	bl	80023dc <set_adress_window>

	DC_DATA();
 8001220:	2201      	movs	r2, #1
 8001222:	2108      	movs	r1, #8
 8001224:	480b      	ldr	r0, [pc, #44]	@ (8001254 <draw_pixel_data+0x54>)
 8001226:	f004 fa51 	bl	80056cc <HAL_GPIO_WritePin>
	CS_A();
 800122a:	2200      	movs	r2, #0
 800122c:	2110      	movs	r1, #16
 800122e:	4809      	ldr	r0, [pc, #36]	@ (8001254 <draw_pixel_data+0x54>)
 8001230:	f004 fa4c 	bl	80056cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	2203      	movs	r2, #3
 800123a:	6839      	ldr	r1, [r7, #0]
 800123c:	4806      	ldr	r0, [pc, #24]	@ (8001258 <draw_pixel_data+0x58>)
 800123e:	f005 ff18 	bl	8007072 <HAL_SPI_Transmit>

	CS_D();
 8001242:	2201      	movs	r2, #1
 8001244:	2110      	movs	r1, #16
 8001246:	4803      	ldr	r0, [pc, #12]	@ (8001254 <draw_pixel_data+0x54>)
 8001248:	f004 fa40 	bl	80056cc <HAL_GPIO_WritePin>

}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	40020c00 	.word	0x40020c00
 8001258:	20000184 	.word	0x20000184

0800125c <fill_screen1>:



void fill_screen1(uint16_t color)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af02      	add	r7, sp, #8
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8001266:	f107 020c 	add.w	r2, r7, #12
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff3a 	bl	80010e8 <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 8001274:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8001278:	f00c f850 	bl	800d31c <malloc>
 800127c:	4603      	mov	r3, r0
 800127e:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8001280:	2377      	movs	r3, #119	@ 0x77
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f240 13df 	movw	r3, #479	@ 0x1df
 8001288:	f240 123f 	movw	r2, #319	@ 0x13f
 800128c:	2100      	movs	r1, #0
 800128e:	2000      	movs	r0, #0
 8001290:	f001 f8a4 	bl	80023dc <set_adress_window>

	DC_DATA();
 8001294:	2201      	movs	r2, #1
 8001296:	2108      	movs	r1, #8
 8001298:	481e      	ldr	r0, [pc, #120]	@ (8001314 <fill_screen1+0xb8>)
 800129a:	f004 fa17 	bl	80056cc <HAL_GPIO_WritePin>
	CS_A();
 800129e:	2200      	movs	r2, #0
 80012a0:	2110      	movs	r1, #16
 80012a2:	481c      	ldr	r0, [pc, #112]	@ (8001314 <fill_screen1+0xb8>)
 80012a4:	f004 fa12 	bl	80056cc <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	82fb      	strh	r3, [r7, #22]
 80012ac:	e00f      	b.n	80012ce <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 80012ae:	8afa      	ldrh	r2, [r7, #22]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4413      	add	r3, r2
 80012ba:	461a      	mov	r2, r3
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	8819      	ldrh	r1, [r3, #0]
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	8011      	strh	r1, [r2, #0]
 80012c6:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80012c8:	8afb      	ldrh	r3, [r7, #22]
 80012ca:	3301      	adds	r3, #1
 80012cc:	82fb      	strh	r3, [r7, #22]
 80012ce:	8afb      	ldrh	r3, [r7, #22]
 80012d0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80012d4:	d3eb      	bcc.n	80012ae <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	82bb      	strh	r3, [r7, #20]
 80012da:	e00a      	b.n	80012f2 <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80012e4:	6939      	ldr	r1, [r7, #16]
 80012e6:	480c      	ldr	r0, [pc, #48]	@ (8001318 <fill_screen1+0xbc>)
 80012e8:	f005 fec3 	bl	8007072 <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 80012ec:	8abb      	ldrh	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	82bb      	strh	r3, [r7, #20]
 80012f2:	8abb      	ldrh	r3, [r7, #20]
 80012f4:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80012f8:	d3f0      	bcc.n	80012dc <fill_screen1+0x80>

	}

	free(line);
 80012fa:	6938      	ldr	r0, [r7, #16]
 80012fc:	f00c f816 	bl	800d32c <free>

	CS_D();
 8001300:	2201      	movs	r2, #1
 8001302:	2110      	movs	r1, #16
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <fill_screen1+0xb8>)
 8001306:	f004 f9e1 	bl	80056cc <HAL_GPIO_WritePin>

}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020c00 	.word	0x40020c00
 8001318:	20000184 	.word	0x20000184

0800131c <fill_screen2>:


void fill_screen2(uint16_t color)
{
 800131c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001320:	b08f      	sub	sp, #60	@ 0x3c
 8001322:	af02      	add	r7, sp, #8
 8001324:	4603      	mov	r3, r0
 8001326:	80fb      	strh	r3, [r7, #6]
 8001328:	466b      	mov	r3, sp
 800132a:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 800132c:	2377      	movs	r3, #119	@ 0x77
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f240 13df 	movw	r3, #479	@ 0x1df
 8001334:	f240 123f 	movw	r2, #319	@ 0x13f
 8001338:	2100      	movs	r1, #0
 800133a:	2000      	movs	r0, #0
 800133c:	f001 f84e 	bl	80023dc <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 8001340:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8001346:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 800134a:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	0adb      	lsrs	r3, r3, #11
 8001350:	b29b      	uxth	r3, r3
 8001352:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	115b      	asrs	r3, r3, #5
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800135e:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 800136a:	7ffa      	ldrb	r2, [r7, #31]
 800136c:	4613      	mov	r3, r2
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	4a4f      	ldr	r2, [pc, #316]	@ (80014b0 <fill_screen2+0x194>)
 8001374:	fb82 1203 	smull	r1, r2, r2, r3
 8001378:	441a      	add	r2, r3
 800137a:	1112      	asrs	r2, r2, #4
 800137c:	17db      	asrs	r3, r3, #31
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 8001382:	7fba      	ldrb	r2, [r7, #30]
 8001384:	4613      	mov	r3, r2
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	1a9b      	subs	r3, r3, r2
 800138a:	4a4a      	ldr	r2, [pc, #296]	@ (80014b4 <fill_screen2+0x198>)
 800138c:	fb82 1203 	smull	r1, r2, r2, r3
 8001390:	441a      	add	r2, r3
 8001392:	1152      	asrs	r2, r2, #5
 8001394:	17db      	asrs	r3, r3, #31
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 800139a:	7f7a      	ldrb	r2, [r7, #29]
 800139c:	4613      	mov	r3, r2
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	4a43      	ldr	r2, [pc, #268]	@ (80014b0 <fill_screen2+0x194>)
 80013a4:	fb82 1203 	smull	r1, r2, r2, r3
 80013a8:	441a      	add	r2, r3
 80013aa:	1112      	asrs	r2, r2, #4
 80013ac:	17db      	asrs	r3, r3, #31
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 80013b2:	2201      	movs	r2, #1
 80013b4:	2108      	movs	r1, #8
 80013b6:	4840      	ldr	r0, [pc, #256]	@ (80014b8 <fill_screen2+0x19c>)
 80013b8:	f004 f988 	bl	80056cc <HAL_GPIO_WritePin>
	CS_A();
 80013bc:	2200      	movs	r2, #0
 80013be:	2110      	movs	r1, #16
 80013c0:	483d      	ldr	r0, [pc, #244]	@ (80014b8 <fill_screen2+0x19c>)
 80013c2:	f004 f983 	bl	80056cc <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80013c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013c8:	460b      	mov	r3, r1
 80013ca:	3b01      	subs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	2300      	movs	r3, #0
 80013d0:	4688      	mov	r8, r1
 80013d2:	4699      	mov	r9, r3
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013e8:	2300      	movs	r3, #0
 80013ea:	460c      	mov	r4, r1
 80013ec:	461d      	mov	r5, r3
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	00eb      	lsls	r3, r5, #3
 80013f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013fc:	00e2      	lsls	r2, r4, #3
 80013fe:	1dcb      	adds	r3, r1, #7
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	ebad 0d03 	sub.w	sp, sp, r3
 8001408:	ab02      	add	r3, sp, #8
 800140a:	3300      	adds	r3, #0
 800140c:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001412:	e011      	b.n	8001438 <fill_screen2+0x11c>
	{
		frame[j] = r;
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001418:	4413      	add	r3, r2
 800141a:	7ffa      	ldrb	r2, [r7, #31]
 800141c:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 800141e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001420:	3301      	adds	r3, #1
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	7fb9      	ldrb	r1, [r7, #30]
 8001426:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8001428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142a:	3302      	adds	r3, #2
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	7f79      	ldrb	r1, [r7, #29]
 8001430:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 8001432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001434:	3303      	adds	r3, #3
 8001436:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	429a      	cmp	r2, r3
 800143e:	d3e9      	bcc.n	8001414 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 8001440:	6a3a      	ldr	r2, [r7, #32]
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <fill_screen2+0x1a0>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800145e:	e012      	b.n	8001486 <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 8001460:	bf00      	nop
 8001462:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <fill_screen2+0x1a0>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0fa      	beq.n	8001462 <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <fill_screen2+0x1a0>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	b29b      	uxth	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	6979      	ldr	r1, [r7, #20]
 800147a:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <fill_screen2+0x1a4>)
 800147c:	f006 fa00 	bl	8007880 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 8001480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001482:	3301      	adds	r3, #1
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3e8      	bcc.n	8001460 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 800148e:	bf00      	nop
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <fill_screen2+0x1a0>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0fa      	beq.n	8001490 <fill_screen2+0x174>
	CS_D();
 800149a:	2201      	movs	r2, #1
 800149c:	2110      	movs	r1, #16
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <fill_screen2+0x19c>)
 80014a0:	f004 f914 	bl	80056cc <HAL_GPIO_WritePin>
 80014a4:	46b5      	mov	sp, r6
}
 80014a6:	bf00      	nop
 80014a8:	3734      	adds	r7, #52	@ 0x34
 80014aa:	46bd      	mov	sp, r7
 80014ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014b0:	84210843 	.word	0x84210843
 80014b4:	82082083 	.word	0x82082083
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	2000032c 	.word	0x2000032c
 80014c0:	20000184 	.word	0x20000184

080014c4 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b089      	sub	sp, #36	@ 0x24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	4604      	mov	r4, r0
 80014cc:	4608      	mov	r0, r1
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	4623      	mov	r3, r4
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	4603      	mov	r3, r0
 80014d8:	80bb      	strh	r3, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	70fb      	strb	r3, [r7, #3]
 80014de:	4613      	mov	r3, r2
 80014e0:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 80014e2:	4b3a      	ldr	r3, [pc, #232]	@ (80015cc <print_character+0x108>)
 80014e4:	889a      	ldrh	r2, [r3, #4]
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	4413      	add	r3, r2
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29c      	uxth	r4, r3
 80014f0:	4b36      	ldr	r3, [pc, #216]	@ (80015cc <print_character+0x108>)
 80014f2:	88da      	ldrh	r2, [r3, #6]
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	88b9      	ldrh	r1, [r7, #4]
 8001500:	88f8      	ldrh	r0, [r7, #6]
 8001502:	2277      	movs	r2, #119	@ 0x77
 8001504:	9200      	str	r2, [sp, #0]
 8001506:	4622      	mov	r2, r4
 8001508:	f000 ff68 	bl	80023dc <set_adress_window>

	uint16_t mask = 0x8000;
 800150c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001510:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 8001516:	f107 020c 	add.w	r2, r7, #12
 800151a:	883b      	ldrh	r3, [r7, #0]
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fde2 	bl	80010e8 <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 8001524:	f107 0208 	add.w	r2, r7, #8
 8001528:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fddb 	bl	80010e8 <convert_color_16_to_18>


	DC_DATA();
 8001532:	2201      	movs	r2, #1
 8001534:	2108      	movs	r1, #8
 8001536:	4826      	ldr	r0, [pc, #152]	@ (80015d0 <print_character+0x10c>)
 8001538:	f004 f8c8 	bl	80056cc <HAL_GPIO_WritePin>
	CS_A();
 800153c:	2200      	movs	r2, #0
 800153e:	2110      	movs	r1, #16
 8001540:	4823      	ldr	r0, [pc, #140]	@ (80015d0 <print_character+0x10c>)
 8001542:	f004 f8c3 	bl	80056cc <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]
 800154a:	e030      	b.n	80015ae <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 800154c:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <print_character+0x108>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	3b20      	subs	r3, #32
 8001554:	491d      	ldr	r1, [pc, #116]	@ (80015cc <print_character+0x108>)
 8001556:	88c9      	ldrh	r1, [r1, #6]
 8001558:	fb03 f101 	mul.w	r1, r3, r1
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	440b      	add	r3, r1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8001568:	2300      	movs	r3, #0
 800156a:	75bb      	strb	r3, [r7, #22]
 800156c:	e016      	b.n	800159c <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 800156e:	8a7a      	ldrh	r2, [r7, #18]
 8001570:	7dbb      	ldrb	r3, [r7, #22]
 8001572:	409a      	lsls	r2, r3
 8001574:	8abb      	ldrh	r3, [r7, #20]
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2103      	movs	r1, #3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fd92 	bl	80020ac <LCD_send_data_multi>
 8001588:	e005      	b.n	8001596 <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	2103      	movs	r1, #3
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fd8b 	bl	80020ac <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 8001596:	7dbb      	ldrb	r3, [r7, #22]
 8001598:	3301      	adds	r3, #1
 800159a:	75bb      	strb	r3, [r7, #22]
 800159c:	7dbb      	ldrb	r3, [r7, #22]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <print_character+0x108>)
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d3e2      	bcc.n	800156e <print_character+0xaa>
	for(i=0; i<font.height; i++)
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	3301      	adds	r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <print_character+0x108>)
 80015b4:	88db      	ldrh	r3, [r3, #6]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d3c8      	bcc.n	800154c <print_character+0x88>
			}
		}
	}

	CS_D();
 80015ba:	2201      	movs	r2, #1
 80015bc:	2110      	movs	r1, #16
 80015be:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <print_character+0x10c>)
 80015c0:	f004 f884 	bl	80056cc <HAL_GPIO_WritePin>

}
 80015c4:	bf00      	nop
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	20000000 	.word	0x20000000
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b089      	sub	sp, #36	@ 0x24
 80015d8:	af02      	add	r7, sp, #8
 80015da:	60ba      	str	r2, [r7, #8]
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	81fb      	strh	r3, [r7, #14]
 80015e2:	460b      	mov	r3, r1
 80015e4:	81bb      	strh	r3, [r7, #12]
 80015e6:	4613      	mov	r3, r2
 80015e8:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 80015ee:	e027      	b.n	8001640 <print_string+0x6c>
	{
		if(x + font.width > 320)
 80015f0:	89fb      	ldrh	r3, [r7, #14]
 80015f2:	4a19      	ldr	r2, [pc, #100]	@ (8001658 <print_string+0x84>)
 80015f4:	8892      	ldrh	r2, [r2, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80015fc:	dd07      	ble.n	800160e <print_string+0x3a>
		{
			x = font.width;
 80015fe:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <print_string+0x84>)
 8001600:	889b      	ldrh	r3, [r3, #4]
 8001602:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <print_string+0x84>)
 8001606:	88da      	ldrh	r2, [r3, #6]
 8001608:	89bb      	ldrh	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 800160e:	89bb      	ldrh	r3, [r7, #12]
 8001610:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <print_string+0x84>)
 8001612:	88d2      	ldrh	r2, [r2, #6]
 8001614:	4413      	add	r3, r2
 8001616:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800161a:	dc18      	bgt.n	800164e <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8001622:	89b9      	ldrh	r1, [r7, #12]
 8001624:	89f8      	ldrh	r0, [r7, #14]
 8001626:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	4623      	mov	r3, r4
 800162c:	f7ff ff4a 	bl	80014c4 <print_character>
		string++;
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	3301      	adds	r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <print_string+0x84>)
 8001638:	889a      	ldrh	r2, [r3, #4]
 800163a:	89fb      	ldrh	r3, [r7, #14]
 800163c:	4413      	add	r3, r2
 800163e:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4413      	add	r3, r2
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3d1      	bcc.n	80015f0 <print_string+0x1c>
 800164c:	e000      	b.n	8001650 <print_string+0x7c>
			return;
 800164e:	bf00      	nop
	}

}
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}
 8001656:	bf00      	nop
 8001658:	20000000 	.word	0x20000000

0800165c <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b087      	sub	sp, #28
 8001660:	af02      	add	r7, sp, #8
 8001662:	4604      	mov	r4, r0
 8001664:	4608      	mov	r0, r1
 8001666:	4611      	mov	r1, r2
 8001668:	461a      	mov	r2, r3
 800166a:	4623      	mov	r3, r4
 800166c:	80fb      	strh	r3, [r7, #6]
 800166e:	4603      	mov	r3, r0
 8001670:	80bb      	strh	r3, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	807b      	strh	r3, [r7, #2]
 8001676:	4613      	mov	r3, r2
 8001678:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 800167a:	88fa      	ldrh	r2, [r7, #6]
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	4413      	add	r3, r2
 8001680:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	3b01      	subs	r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	88bb      	ldrh	r3, [r7, #4]
 800168a:	88b9      	ldrh	r1, [r7, #4]
 800168c:	88f8      	ldrh	r0, [r7, #6]
 800168e:	2477      	movs	r4, #119	@ 0x77
 8001690:	9400      	str	r4, [sp, #0]
 8001692:	f000 fea3 	bl	80023dc <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8001696:	f107 0208 	add.w	r2, r7, #8
 800169a:	883b      	ldrh	r3, [r7, #0]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fd22 	bl	80010e8 <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	81fb      	strh	r3, [r7, #14]
 80016a8:	e008      	b.n	80016bc <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	2103      	movs	r1, #3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fcfb 	bl	80020ac <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 80016b6:	89fb      	ldrh	r3, [r7, #14]
 80016b8:	3301      	adds	r3, #1
 80016ba:	81fb      	strh	r3, [r7, #14]
 80016bc:	89fa      	ldrh	r2, [r7, #14]
 80016be:	8879      	ldrh	r1, [r7, #2]
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	1acb      	subs	r3, r1, r3
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf0      	blt.n	80016aa <draw_horizontal_line+0x4e>
	}


}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}

080016d2 <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 80016d2:	b590      	push	{r4, r7, lr}
 80016d4:	b087      	sub	sp, #28
 80016d6:	af02      	add	r7, sp, #8
 80016d8:	4604      	mov	r4, r0
 80016da:	4608      	mov	r0, r1
 80016dc:	4611      	mov	r1, r2
 80016de:	461a      	mov	r2, r3
 80016e0:	4623      	mov	r3, r4
 80016e2:	80fb      	strh	r3, [r7, #6]
 80016e4:	4603      	mov	r3, r0
 80016e6:	80bb      	strh	r3, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 80016f0:	88ba      	ldrh	r2, [r7, #4]
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	4413      	add	r3, r2
 80016f6:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	88fa      	ldrh	r2, [r7, #6]
 8001700:	88b9      	ldrh	r1, [r7, #4]
 8001702:	88f8      	ldrh	r0, [r7, #6]
 8001704:	2477      	movs	r4, #119	@ 0x77
 8001706:	9400      	str	r4, [sp, #0]
 8001708:	f000 fe68 	bl	80023dc <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 800170c:	f107 0208 	add.w	r2, r7, #8
 8001710:	883b      	ldrh	r3, [r7, #0]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fce7 	bl	80010e8 <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 800171a:	2300      	movs	r3, #0
 800171c:	81fb      	strh	r3, [r7, #14]
 800171e:	e008      	b.n	8001732 <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	2103      	movs	r1, #3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fcc0 	bl	80020ac <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 800172c:	89fb      	ldrh	r3, [r7, #14]
 800172e:	3301      	adds	r3, #1
 8001730:	81fb      	strh	r3, [r7, #14]
 8001732:	89fa      	ldrh	r2, [r7, #14]
 8001734:	8879      	ldrh	r1, [r7, #2]
 8001736:	88bb      	ldrh	r3, [r7, #4]
 8001738:	1acb      	subs	r3, r1, r3
 800173a:	429a      	cmp	r2, r3
 800173c:	dbf0      	blt.n	8001720 <draw_vertical_line+0x4e>
	}


}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}

08001748 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b089      	sub	sp, #36	@ 0x24
 800174c:	af02      	add	r7, sp, #8
 800174e:	4604      	mov	r4, r0
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4623      	mov	r3, r4
 8001758:	80fb      	strh	r3, [r7, #6]
 800175a:	4603      	mov	r3, r0
 800175c:	80bb      	strh	r3, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	807b      	strh	r3, [r7, #2]
 8001762:	4613      	mov	r3, r2
 8001764:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	883b      	ldrh	r3, [r7, #0]
 800176a:	fb12 f303 	smulbb	r3, r2, r3
 800176e:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8001770:	f107 020c 	add.w	r2, r7, #12
 8001774:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fcb5 	bl	80010e8 <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 800177e:	8aba      	ldrh	r2, [r7, #20]
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f00b fdc8 	bl	800d31c <malloc>
 800178c:	4603      	mov	r3, r0
 800178e:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8001790:	2300      	movs	r3, #0
 8001792:	82fb      	strh	r3, [r7, #22]
 8001794:	e00f      	b.n	80017b6 <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8001796:	8afa      	ldrh	r2, [r7, #22]
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4413      	add	r3, r2
 80017a2:	461a      	mov	r2, r3
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	8819      	ldrh	r1, [r3, #0]
 80017aa:	789b      	ldrb	r3, [r3, #2]
 80017ac:	8011      	strh	r1, [r2, #0]
 80017ae:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 80017b0:	8afb      	ldrh	r3, [r7, #22]
 80017b2:	3301      	adds	r3, #1
 80017b4:	82fb      	strh	r3, [r7, #22]
 80017b6:	8afa      	ldrh	r2, [r7, #22]
 80017b8:	8abb      	ldrh	r3, [r7, #20]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3eb      	bcc.n	8001796 <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 80017be:	88fa      	ldrh	r2, [r7, #6]
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	4413      	add	r3, r2
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29c      	uxth	r4, r3
 80017ca:	88ba      	ldrh	r2, [r7, #4]
 80017cc:	883b      	ldrh	r3, [r7, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	88b9      	ldrh	r1, [r7, #4]
 80017d8:	88f8      	ldrh	r0, [r7, #6]
 80017da:	2277      	movs	r2, #119	@ 0x77
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	4622      	mov	r2, r4
 80017e0:	f000 fdfc 	bl	80023dc <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 80017e4:	8aba      	ldrh	r2, [r7, #20]
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	6938      	ldr	r0, [r7, #16]
 80017f0:	f000 fc5c 	bl	80020ac <LCD_send_data_multi>

	free(data);
 80017f4:	6938      	ldr	r0, [r7, #16]
 80017f6:	f00b fd99 	bl	800d32c <free>

}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
	...

08001804 <draw_entity>:


void draw_entity(ENTITY *entity, char *filePathName)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b089      	sub	sp, #36	@ 0x24
 8001808:	af02      	add	r7, sp, #8
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]

	if((entity->id != 0) || (filePathName==NULL))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <draw_entity+0x1c>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d163      	bne.n	80018e8 <draw_entity+0xe4>
	{
		/*Avem imagine monocolor sub 32x32 -> imagine nu se afla pe cardul SD!*/

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001826:	b29a      	uxth	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800182e:	b29b      	uxth	r3, r3
 8001830:	fb12 f303 	smulbb	r3, r2, r3
 8001834:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->color, pixel);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	895b      	ldrh	r3, [r3, #10]
 800183a:	f107 020c 	add.w	r2, r7, #12
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fc51 	bl	80010e8 <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8001846:	8aba      	ldrh	r2, [r7, #20]
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f00b fd64 	bl	800d31c <malloc>
 8001854:	4603      	mov	r3, r0
 8001856:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8001858:	2300      	movs	r3, #0
 800185a:	82fb      	strh	r3, [r7, #22]
 800185c:	e00f      	b.n	800187e <draw_entity+0x7a>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 800185e:	8afa      	ldrh	r2, [r7, #22]
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4413      	add	r3, r2
 800186a:	461a      	mov	r2, r3
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	8819      	ldrh	r1, [r3, #0]
 8001872:	789b      	ldrb	r3, [r3, #2]
 8001874:	8011      	strh	r1, [r2, #0]
 8001876:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8001878:	8afb      	ldrh	r3, [r7, #22]
 800187a:	3301      	adds	r3, #1
 800187c:	82fb      	strh	r3, [r7, #22]
 800187e:	8afa      	ldrh	r2, [r7, #22]
 8001880:	8abb      	ldrh	r3, [r7, #20]
 8001882:	429a      	cmp	r2, r3
 8001884:	d3eb      	bcc.n	800185e <draw_entity+0x5a>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800188c:	b298      	uxth	r0, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001894:	b299      	uxth	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800189c:	b29a      	uxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29c      	uxth	r4, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	2277      	movs	r2, #119	@ 0x77
 80018c8:	9200      	str	r2, [sp, #0]
 80018ca:	4622      	mov	r2, r4
 80018cc:	f000 fd86 	bl	80023dc <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 80018d0:	8aba      	ldrh	r2, [r7, #20]
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	6938      	ldr	r0, [r7, #16]
 80018dc:	f000 fbe6 	bl	80020ac <LCD_send_data_multi>

		free(data);
 80018e0:	6938      	ldr	r0, [r7, #16]
 80018e2:	f00b fd23 	bl	800d32c <free>
	{
 80018e6:	e084      	b.n	80019f2 <draw_entity+0x1ee>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 80018e8:	2300      	movs	r3, #0
 80018ea:	817b      	strh	r3, [r7, #10]

		read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 80018ec:	f107 030f 	add.w	r3, r7, #15
 80018f0:	f107 020a 	add.w	r2, r7, #10
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	6838      	ldr	r0, [r7, #0]
 80018f8:	f001 fd56 	bl	80033a8 <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001902:	b298      	uxth	r0, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800190a:	b299      	uxth	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001912:	b29a      	uxth	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800191a:	b29b      	uxth	r3, r3
 800191c:	4413      	add	r3, r2
 800191e:	b29b      	uxth	r3, r3
 8001920:	3b01      	subs	r3, #1
 8001922:	b29c      	uxth	r4, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001932:	b29b      	uxth	r3, r3
 8001934:	4413      	add	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	3b01      	subs	r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	2277      	movs	r2, #119	@ 0x77
 800193e:	9200      	str	r2, [sp, #0]
 8001940:	4622      	mov	r2, r4
 8001942:	f000 fd4b 	bl	80023dc <set_adress_window>

		DC_DATA();
 8001946:	2201      	movs	r2, #1
 8001948:	2108      	movs	r1, #8
 800194a:	482b      	ldr	r0, [pc, #172]	@ (80019f8 <draw_entity+0x1f4>)
 800194c:	f003 febe 	bl	80056cc <HAL_GPIO_WritePin>
		CS_A();
 8001950:	2200      	movs	r2, #0
 8001952:	2110      	movs	r1, #16
 8001954:	4828      	ldr	r0, [pc, #160]	@ (80019f8 <draw_entity+0x1f4>)
 8001956:	f003 feb9 	bl	80056cc <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 800195a:	897b      	ldrh	r3, [r7, #10]
 800195c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001960:	d20c      	bcs.n	800197c <draw_entity+0x178>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->data, byteNr);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	897a      	ldrh	r2, [r7, #10]
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fb9e 	bl	80020ac <LCD_send_data_multi>
			free(entity->data);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4618      	mov	r0, r3
 8001976:	f00b fcd9 	bl	800d32c <free>
 800197a:	e03a      	b.n	80019f2 <draw_entity+0x1ee>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 800197c:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <draw_entity+0x1f8>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	897a      	ldrh	r2, [r7, #10]
 8001988:	4619      	mov	r1, r3
 800198a:	481d      	ldr	r0, [pc, #116]	@ (8001a00 <draw_entity+0x1fc>)
 800198c:	f005 ff78 	bl	8007880 <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d11c      	bne.n	80019d0 <draw_entity+0x1cc>
				{
					break;
				}

				read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8001996:	f107 030f 	add.w	r3, r7, #15
 800199a:	f107 020a 	add.w	r2, r7, #10
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	6838      	ldr	r0, [r7, #0]
 80019a2:	f001 fd01 	bl	80033a8 <read_image_file>

				while(flagDmaSpiTx == 0);
 80019a6:	bf00      	nop
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <draw_entity+0x1f8>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0fa      	beq.n	80019a8 <draw_entity+0x1a4>
				flagDmaSpiTx = 0;
 80019b2:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <draw_entity+0x1f8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	897a      	ldrh	r2, [r7, #10]
 80019be:	4619      	mov	r1, r3
 80019c0:	480f      	ldr	r0, [pc, #60]	@ (8001a00 <draw_entity+0x1fc>)
 80019c2:	f005 ff5d 	bl	8007880 <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 80019c6:	897b      	ldrh	r3, [r7, #10]
 80019c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80019cc:	d2e0      	bcs.n	8001990 <draw_entity+0x18c>
 80019ce:	e000      	b.n	80019d2 <draw_entity+0x1ce>
					break;
 80019d0:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 80019d2:	bf00      	nop
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <draw_entity+0x1f8>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0fa      	beq.n	80019d4 <draw_entity+0x1d0>
		free(entity->data);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00b fca2 	bl	800d32c <free>
		CS_D();
 80019e8:	2201      	movs	r2, #1
 80019ea:	2110      	movs	r1, #16
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <draw_entity+0x1f4>)
 80019ee:	f003 fe6d 	bl	80056cc <HAL_GPIO_WritePin>

	}


}
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	40020c00 	.word	0x40020c00
 80019fc:	2000032c 	.word	0x2000032c
 8001a00:	20000184 	.word	0x20000184

08001a04 <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8001a04:	b5b0      	push	{r4, r5, r7, lr}
 8001a06:	b08c      	sub	sp, #48	@ 0x30
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	4611      	mov	r1, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	817b      	strh	r3, [r7, #10]
 8001a16:	460b      	mov	r3, r1
 8001a18:	813b      	strh	r3, [r7, #8]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	71fb      	strb	r3, [r7, #7]
	 * de afisat
	 * Momentan de rezumam la un exemplu simplu pentru a demonstra functionalitatea
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 8001a1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f2c0 80e6 	blt.w	8001bf4 <translation_entity+0x1f0>
 8001a28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a2c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001a30:	f300 80e0 	bgt.w	8001bf4 <translation_entity+0x1f0>
 8001a34:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f2c0 80db 	blt.w	8001bf4 <translation_entity+0x1f0>
 8001a3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a42:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001a46:	f300 80d5 	bgt.w	8001bf4 <translation_entity+0x1f0>

		return;
	}


	ENTITY temp = *entity;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f107 0414 	add.w	r4, r7, #20
 8001a50:	461d      	mov	r5, r3
 8001a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a56:	682b      	ldr	r3, [r5, #0]
 8001a58:	6023      	str	r3, [r4, #0]

	entity->x0 = x;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	897a      	ldrh	r2, [r7, #10]
 8001a5e:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	893a      	ldrh	r2, [r7, #8]
 8001a64:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8001a66:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001a6a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d157      	bne.n	8001b22 <translation_entity+0x11e>
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d054      	beq.n	8001b22 <translation_entity+0x11e>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8001a78:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a86:	440b      	add	r3, r1
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	da1d      	bge.n	8001ac8 <translation_entity+0xc4>
 8001a8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a90:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dd17      	ble.n	8001ac8 <translation_entity+0xc4>
		{
			/*Pentru cazul deplasarii pe +x*/
			draw_entity(entity, NULL);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff feb2 	bl	8001804 <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, 0xFFFF); /*Culoare background*/
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	b298      	uxth	r0, r3
 8001aa6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001aaa:	b299      	uxth	r1, r3
 8001aac:	897a      	ldrh	r2, [r7, #10]
 8001aae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8001ac2:	9400      	str	r4, [sp, #0]
 8001ac4:	f7ff fe40 	bl	8001748 <draw_rectangle>
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001ac8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001acc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f280 8091 	bge.w	8001bf8 <translation_entity+0x1f4>
 8001ad6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ada:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	f340 8087 	ble.w	8001bf8 <translation_entity+0x1f4>
		{
			/*Pentru cazul deplasarii pe -x*/
			draw_entity(entity, NULL);
 8001aea:	2100      	movs	r1, #0
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f7ff fe89 	bl	8001804 <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, 0xFFFF); /*Culoare background*/
 8001af2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	897b      	ldrh	r3, [r7, #10]
 8001afa:	4413      	add	r3, r2
 8001afc:	b298      	uxth	r0, r3
 8001afe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b02:	b299      	uxth	r1, r3
 8001b04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8001b1a:	9400      	str	r4, [sp, #0]
 8001b1c:	f7ff fe14 	bl	8001748 <draw_rectangle>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001b20:	e06a      	b.n	8001bf8 <translation_entity+0x1f4>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8001b22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b26:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d157      	bne.n	8001bde <translation_entity+0x1da>
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d054      	beq.n	8001bde <translation_entity+0x1da>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8001b34:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001b38:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b42:	440b      	add	r3, r1
 8001b44:	429a      	cmp	r2, r3
 8001b46:	da1e      	bge.n	8001b86 <translation_entity+0x182>
 8001b48:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b4c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dd18      	ble.n	8001b86 <translation_entity+0x182>
			{
				/*Pentru cazul deplasarii pe +y*/
				draw_entity(entity, NULL);
 8001b54:	2100      	movs	r1, #0
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff fe54 	bl	8001804 <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, 0xFFFF);
 8001b5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b60:	b298      	uxth	r0, r3
 8001b62:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b66:	b299      	uxth	r1, r3
 8001b68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b6c:	b29c      	uxth	r4, r3
 8001b6e:	893a      	ldrh	r2, [r7, #8]
 8001b70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b7e:	9200      	str	r2, [sp, #0]
 8001b80:	4622      	mov	r2, r4
 8001b82:	f7ff fde1 	bl	8001748 <draw_rectangle>
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001b86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b8a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	da34      	bge.n	8001bfc <translation_entity+0x1f8>
 8001b92:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b96:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	dd2b      	ble.n	8001bfc <translation_entity+0x1f8>
			{
				/*Pentru cazul deplasarii pe -y*/
				draw_entity(entity, NULL);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff fe2c 	bl	8001804 <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, 0xFFFF);
 8001bac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bb0:	b298      	uxth	r0, r3
 8001bb2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	893b      	ldrh	r3, [r7, #8]
 8001bba:	4413      	add	r3, r2
 8001bbc:	b299      	uxth	r1, r3
 8001bbe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001bc2:	b29c      	uxth	r4, r3
 8001bc4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	893b      	ldrh	r3, [r7, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bd4:	9200      	str	r2, [sp, #0]
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	f7ff fdb6 	bl	8001748 <draw_rectangle>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001bdc:	e00e      	b.n	8001bfc <translation_entity+0x1f8>

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/

			draw_entity(entity, NULL);
 8001bde:	2100      	movs	r1, #0
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f7ff fe0f 	bl	8001804 <draw_entity>
			draw_entity(&temp, NULL);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fe09 	bl	8001804 <draw_entity>
 8001bf2:	e004      	b.n	8001bfe <translation_entity+0x1fa>
		return;
 8001bf4:	bf00      	nop
 8001bf6:	e002      	b.n	8001bfe <translation_entity+0x1fa>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001bf8:	bf00      	nop
 8001bfa:	e000      	b.n	8001bfe <translation_entity+0x1fa>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001bfc:	bf00      	nop
		}


}
 8001bfe:	3728      	adds	r7, #40	@ 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bdb0      	pop	{r4, r5, r7, pc}

08001c04 <scaling_entity>:
	}
}


void scaling_entity(ENTITY *entity, const float factor, char *filePathName, char *fileName)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b093      	sub	sp, #76	@ 0x4c
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c10:	6079      	str	r1, [r7, #4]
 8001c12:	603a      	str	r2, [r7, #0]
	 * de scalat
	 */

	FRESULT res;
	char *scalFilePath;
	char *tempFile = "graphic/scalare/temp.bin";
 8001c14:	4baa      	ldr	r3, [pc, #680]	@ (8001ec0 <scaling_entity+0x2bc>)
 8001c16:	62fb      	str	r3, [r7, #44]	@ 0x2c

	scalFilePath = assign_filePath("graphic/scalare/");
 8001c18:	48aa      	ldr	r0, [pc, #680]	@ (8001ec4 <scaling_entity+0x2c0>)
 8001c1a:	f001 fa68 	bl	80030ee <assign_filePath>
 8001c1e:	62b8      	str	r0, [r7, #40]	@ 0x28
	scalFilePath = realloc(scalFilePath, strlen(scalFilePath)+ strlen(fileName) +1 );
 8001c20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c22:	f7fe fad1 	bl	80001c8 <strlen>
 8001c26:	4604      	mov	r4, r0
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	f7fe facd 	bl	80001c8 <strlen>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4423      	add	r3, r4
 8001c32:	3301      	adds	r3, #1
 8001c34:	4619      	mov	r1, r3
 8001c36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c38:	f00b fc2e 	bl	800d498 <realloc>
 8001c3c:	62b8      	str	r0, [r7, #40]	@ 0x28
	strcat(scalFilePath, fileName);
 8001c3e:	6839      	ldr	r1, [r7, #0]
 8001c40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c42:	f00b fc67 	bl	800d514 <strcat>

	uint16_t x = 0; /*nr d elinii de prelucrat din M1 ai sa avem 32x32 pixeli de prelucrat in M2*/
 8001c46:	2300      	movs	r3, #0
 8001c48:	827b      	strh	r3, [r7, #18]
	bool flagTerm = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	747b      	strb	r3, [r7, #17]

	int i = 0; /*indexi de referinta in M2*/
 8001c4e:	2300      	movs	r3, #0
 8001c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int j = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	63bb      	str	r3, [r7, #56]	@ 0x38
	int ik = 0; /*indexi de referinta in M1*/
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
	int jk = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]

	bool flagPixel = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	uint8_t *data = malloc(sizeof(uint8_t)*3072);
 8001c64:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001c68:	f00b fb58 	bl	800d31c <malloc>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	61fb      	str	r3, [r7, #28]
	int16_t x1 = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	837b      	strh	r3, [r7, #26]
	int16_t y1 = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	833b      	strh	r3, [r7, #24]
	int16_t index = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	82fb      	strh	r3, [r7, #22]

	x1 = (int16_t)((entity->x1)*factor);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c96:	ee17 3a90 	vmov	r3, s15
 8001c9a:	837b      	strh	r3, [r7, #26]
	y1 = (int16_t)((entity->y1)*factor);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001caa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb6:	ee17 3a90 	vmov	r3, s15
 8001cba:	833b      	strh	r3, [r7, #24]



	while(!flagTerm)
 8001cbc:	e0d1      	b.n	8001e62 <scaling_entity+0x25e>
	{
		read_image_file_scaling(filePathName, entity, factor, &x, &flagTerm);
 8001cbe:	f107 0311 	add.w	r3, r7, #17
 8001cc2:	f107 0212 	add.w	r2, r7, #18
 8001cc6:	ed97 0a02 	vldr	s0, [r7, #8]
 8001cca:	68f9      	ldr	r1, [r7, #12]
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f001 fddb 	bl	8003888 <read_image_file_scaling>

		i = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		j = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	@ 0x38

		ik = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
		jk = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]

		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ce6:	e07d      	b.n	8001de4 <scaling_entity+0x1e0>
		{
			/*
			 * Parcurgem frameul asociat matricei scalate M2
			 */

			if((k%(x1*3)==0) && (k!=0))
 8001ce8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	441a      	add	r2, r3
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cf8:	fb01 f202 	mul.w	r2, r1, r2
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d107      	bne.n	8001d12 <scaling_entity+0x10e>
 8001d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <scaling_entity+0x10e>
			{
				/*
				 * new line
				 */

				i++;
 8001d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
				j = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			if(k%3 == 0)
 8001d12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d14:	4b6c      	ldr	r3, [pc, #432]	@ (8001ec8 <scaling_entity+0x2c4>)
 8001d16:	fb83 3201 	smull	r3, r2, r3, r1
 8001d1a:	17cb      	asrs	r3, r1, #31
 8001d1c:	1ad2      	subs	r2, r2, r3
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	1aca      	subs	r2, r1, r3
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d102      	bne.n	8001d30 <scaling_entity+0x12c>
			{
				flagPixel = 1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}

			if(flagPixel == 1)
 8001d30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d052      	beq.n	8001dde <scaling_entity+0x1da>
			{
				ik = (int)i/factor;
 8001d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d42:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d4e:	ee17 3a90 	vmov	r3, s15
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
				jk = (int)j/factor;
 8001d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6a:	ee17 3a90 	vmov	r3, s15
 8001d6e:	623b      	str	r3, [r7, #32]

				index = ik*(entity->x1)*3 + jk*3; /*index normat la M1*/
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d76:	461a      	mov	r2, r3
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	fb03 f202 	mul.w	r2, r3, r2
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	0052      	lsls	r2, r2, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	82fb      	strh	r3, [r7, #22]

				data[k] = entity->data[index];
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d96:	441a      	add	r2, r3
 8001d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9a:	69f9      	ldr	r1, [r7, #28]
 8001d9c:	440b      	add	r3, r1
 8001d9e:	7812      	ldrb	r2, [r2, #0]
 8001da0:	701a      	strb	r2, [r3, #0]
				data[k+1] = entity->data[index + 1];
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001daa:	3301      	adds	r3, #1
 8001dac:	441a      	add	r2, r3
 8001dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db0:	3301      	adds	r3, #1
 8001db2:	69f9      	ldr	r1, [r7, #28]
 8001db4:	440b      	add	r3, r1
 8001db6:	7812      	ldrb	r2, [r2, #0]
 8001db8:	701a      	strb	r2, [r3, #0]
				data[k+2] = entity->data[index + 2];
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	441a      	add	r2, r3
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc8:	3302      	adds	r3, #2
 8001dca:	69f9      	ldr	r1, [r7, #28]
 8001dcc:	440b      	add	r3, r1
 8001dce:	7812      	ldrb	r2, [r2, #0]
 8001dd0:	701a      	strb	r2, [r3, #0]

				j++;
 8001dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
				flagPixel = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8001dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de0:	3301      	adds	r3, #1
 8001de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001de4:	8a7b      	ldrh	r3, [r7, #18]
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e12:	ee17 2a90 	vmov	r2, s15
 8001e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	f6ff af65 	blt.w	8001ce8 <scaling_entity+0xe4>
		/*
		 * Scriem in fisier datele obitnute din frame-ul curent in fisiserul aferent.
		 * Fisiserul va fi salvat in folderul de scalare
		 */

		write_image_file(tempFile, data, (int)(x1*factor)*x*3, x1, y1, flagTerm);
 8001e1e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e36:	ee17 2a90 	vmov	r2, s15
 8001e3a:	8a7b      	ldrh	r3, [r7, #18]
 8001e3c:	fb03 f202 	mul.w	r2, r3, r2
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	7c7b      	ldrb	r3, [r7, #17]
 8001e4a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	4613      	mov	r3, r2
 8001e58:	460a      	mov	r2, r1
 8001e5a:	69f9      	ldr	r1, [r7, #28]
 8001e5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e5e:	f001 ff11 	bl	8003c84 <write_image_file>
	while(!flagTerm)
 8001e62:	7c7b      	ldrb	r3, [r7, #17]
 8001e64:	f083 0301 	eor.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f47f af27 	bne.w	8001cbe <scaling_entity+0xba>
	 * renumind fisiserul tempFile in care ne-am scris datele din temp.bin in
	 * numele aferent acestuia stocat in scalFilePath
	 */


	res = f_unlink(scalFilePath);
 8001e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e72:	f00b f852 	bl	800cf1a <f_unlink>
 8001e76:	4603      	mov	r3, r0
 8001e78:	757b      	strb	r3, [r7, #21]

	if((res != FR_OK) && (res != FR_NO_FILE))
 8001e7a:	7d7b      	ldrb	r3, [r7, #21]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <scaling_entity+0x282>
 8001e80:	7d7b      	ldrb	r3, [r7, #21]
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d115      	bne.n	8001eb2 <scaling_entity+0x2ae>
	{
		return;
	}

	res = f_rename(tempFile, scalFilePath);
 8001e86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e8a:	f00b f8f1 	bl	800d070 <f_rename>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	757b      	strb	r3, [r7, #21]

	if(res != FR_OK)
 8001e92:	7d7b      	ldrb	r3, [r7, #21]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10e      	bne.n	8001eb6 <scaling_entity+0x2b2>
	 * Atribuim noile valori entitatii prelucrate
	 */

	//free(entity->filePathName);

	entity->x1=x1;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8b7a      	ldrh	r2, [r7, #26]
 8001e9c:	80da      	strh	r2, [r3, #6]
	entity->y1=y1;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8b3a      	ldrh	r2, [r7, #24]
 8001ea2:	811a      	strh	r2, [r3, #8]
	entity->filePathName = scalFilePath;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ea8:	611a      	str	r2, [r3, #16]

	free(data);
 8001eaa:	69f8      	ldr	r0, [r7, #28]
 8001eac:	f00b fa3e 	bl	800d32c <free>
 8001eb0:	e002      	b.n	8001eb8 <scaling_entity+0x2b4>
		return;
 8001eb2:	bf00      	nop
 8001eb4:	e000      	b.n	8001eb8 <scaling_entity+0x2b4>
		return;
 8001eb6:	bf00      	nop
	//free(entity->data);

}
 8001eb8:	3744      	adds	r7, #68	@ 0x44
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	0800d688 	.word	0x0800d688
 8001ec4:	0800d6a4 	.word	0x0800d6a4
 8001ec8:	55555556 	.word	0x55555556

08001ecc <rotate_entity>:


void rotate_entity(ENTITY *entity, int theta)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	 * Output: Void
	 */

	/*Aflam initial coordonatele pivotului de referinta*/

	const int16_t pivotX = entity->x0 + (int16_t)(entity->x1/2);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ee4:	0fd9      	lsrs	r1, r3, #31
 8001ee6:	440b      	add	r3, r1
 8001ee8:	105b      	asrs	r3, r3, #1
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	82fb      	strh	r3, [r7, #22]
	const int16_t pivotY = entity->y0 + (int16_t)(entity->y1/2);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f02:	0fd9      	lsrs	r1, r3, #31
 8001f04:	440b      	add	r3, r1
 8001f06:	105b      	asrs	r3, r3, #1
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	82bb      	strh	r3, [r7, #20]

	int16_t i = (int16_t)(-(entity->y1/2));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f18:	0fda      	lsrs	r2, r3, #31
 8001f1a:	4413      	add	r3, r2
 8001f1c:	105b      	asrs	r3, r3, #1
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	425b      	negs	r3, r3
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	83fb      	strh	r3, [r7, #30]
	int16_t j = (int16_t)(-(entity->x1/2));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f2e:	0fda      	lsrs	r2, r3, #31
 8001f30:	4413      	add	r3, r2
 8001f32:	105b      	asrs	r3, r3, #1
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	425b      	negs	r3, r3
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	83bb      	strh	r3, [r7, #28]

	int16_t rotPosX = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	827b      	strh	r3, [r7, #18]
	int16_t rotPosY = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	823b      	strh	r3, [r7, #16]

	bool flagImgDone = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
	bool flagPixel = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	76fb      	strb	r3, [r7, #27]
	uint16_t byteNr = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	81bb      	strh	r3, [r7, #12]

	uint8_t pixel[3];


	while(!flagImgDone)
 8001f52:	e075      	b.n	8002040 <rotate_entity+0x174>
	{
		read_image_file(entity->filePathName, entity, &byteNr, &flagImgDone);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6918      	ldr	r0, [r3, #16]
 8001f58:	f107 030f 	add.w	r3, r7, #15
 8001f5c:	f107 020c 	add.w	r2, r7, #12
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	f001 fa21 	bl	80033a8 <read_image_file>


		for(int16_t k = 0; k<byteNr; k++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	833b      	strh	r3, [r7, #24]
 8001f6a:	e064      	b.n	8002036 <rotate_entity+0x16a>
		{
			if(j == (entity->x1/2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f72:	0fda      	lsrs	r2, r3, #31
 8001f74:	4413      	add	r3, r2
 8001f76:	105b      	asrs	r3, r3, #1
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d110      	bne.n	8001fa4 <rotate_entity+0xd8>
			{
				i++;
 8001f82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	83fb      	strh	r3, [r7, #30]
				j = (int16_t)(-(entity->x1/2));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f94:	0fda      	lsrs	r2, r3, #31
 8001f96:	4413      	add	r3, r2
 8001f98:	105b      	asrs	r3, r3, #1
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	425b      	negs	r3, r3
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	83bb      	strh	r3, [r7, #28]

			}

			if(k%3 == 0)
 8001fa4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8002060 <rotate_entity+0x194>)
 8001faa:	fb83 3102 	smull	r3, r1, r3, r2
 8001fae:	17d3      	asrs	r3, r2, #31
 8001fb0:	1ac9      	subs	r1, r1, r3
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	440b      	add	r3, r1
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <rotate_entity+0xf8>
			{
				flagPixel = 1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	76fb      	strb	r3, [r7, #27]
			}

			if(flagPixel == 1)
 8001fc4:	7efb      	ldrb	r3, [r7, #27]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d02f      	beq.n	800202a <rotate_entity+0x15e>
			{
				pixel[0] = entity->data[k];
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	723b      	strb	r3, [r7, #8]
				pixel[1] = entity->data[k+1];
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	727b      	strb	r3, [r7, #9]
				pixel[2] = entity->data[k+2];
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	72bb      	strb	r3, [r7, #10]

				/*Test pentru 90 de grade*/

				rotPosX = -i + pivotX;
 8001ff8:	8afa      	ldrh	r2, [r7, #22]
 8001ffa:	8bfb      	ldrh	r3, [r7, #30]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	827b      	strh	r3, [r7, #18]
				rotPosY =  j + pivotY;
 8002002:	8bba      	ldrh	r2, [r7, #28]
 8002004:	8abb      	ldrh	r3, [r7, #20]
 8002006:	4413      	add	r3, r2
 8002008:	b29b      	uxth	r3, r3
 800200a:	823b      	strh	r3, [r7, #16]

				draw_pixel_data(rotPosX, rotPosY, pixel);
 800200c:	8a7b      	ldrh	r3, [r7, #18]
 800200e:	8a39      	ldrh	r1, [r7, #16]
 8002010:	f107 0208 	add.w	r2, r7, #8
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff f8f3 	bl	8001200 <draw_pixel_data>

				j++;
 800201a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800201e:	b29b      	uxth	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	b29b      	uxth	r3, r3
 8002024:	83bb      	strh	r3, [r7, #28]
				flagPixel = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	76fb      	strb	r3, [r7, #27]
		for(int16_t k = 0; k<byteNr; k++)
 800202a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800202e:	b29b      	uxth	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	833b      	strh	r3, [r7, #24]
 8002036:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800203a:	89ba      	ldrh	r2, [r7, #12]
 800203c:	4293      	cmp	r3, r2
 800203e:	db95      	blt.n	8001f6c <rotate_entity+0xa0>
	while(!flagImgDone)
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f083 0301 	eor.w	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d183      	bne.n	8001f54 <rotate_entity+0x88>

		}
	}


	free(entity->data);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4618      	mov	r0, r3
 8002052:	f00b f96b 	bl	800d32c <free>

}
 8002056:	bf00      	nop
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	55555556 	.word	0x55555556

08002064 <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 800206e:	2200      	movs	r2, #0
 8002070:	2108      	movs	r1, #8
 8002072:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <LCD_send_command+0x40>)
 8002074:	f003 fb2a 	bl	80056cc <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8002078:	2200      	movs	r2, #0
 800207a:	2110      	movs	r1, #16
 800207c:	4809      	ldr	r0, [pc, #36]	@ (80020a4 <LCD_send_command+0x40>)
 800207e:	f003 fb25 	bl	80056cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 8002082:	1df9      	adds	r1, r7, #7
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
 8002088:	2201      	movs	r2, #1
 800208a:	4807      	ldr	r0, [pc, #28]	@ (80020a8 <LCD_send_command+0x44>)
 800208c:	f004 fff1 	bl	8007072 <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8002090:	2201      	movs	r2, #1
 8002092:	2110      	movs	r1, #16
 8002094:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <LCD_send_command+0x40>)
 8002096:	f003 fb19 	bl	80056cc <HAL_GPIO_WritePin>


}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40020c00 	.word	0x40020c00
 80020a8:	20000184 	.word	0x20000184

080020ac <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 80020b6:	4b34      	ldr	r3, [pc, #208]	@ (8002188 <LCD_send_data_multi+0xdc>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 80020bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020c0:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80020d4:	6939      	ldr	r1, [r7, #16]
 80020d6:	fb01 f202 	mul.w	r2, r1, r2
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 80020de:	2201      	movs	r2, #1
 80020e0:	2108      	movs	r1, #8
 80020e2:	482a      	ldr	r0, [pc, #168]	@ (800218c <LCD_send_data_multi+0xe0>)
 80020e4:	f003 faf2 	bl	80056cc <HAL_GPIO_WritePin>
	CS_A();
 80020e8:	2200      	movs	r2, #0
 80020ea:	2110      	movs	r1, #16
 80020ec:	4827      	ldr	r0, [pc, #156]	@ (800218c <LCD_send_data_multi+0xe0>)
 80020ee:	f003 faed 	bl	80056cc <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d821      	bhi.n	800213e <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 80020fa:	4b23      	ldr	r3, [pc, #140]	@ (8002188 <LCD_send_data_multi+0xdc>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4821      	ldr	r0, [pc, #132]	@ (8002190 <LCD_send_data_multi+0xe4>)
 800210a:	f005 fbb9 	bl	8007880 <HAL_SPI_Transmit_DMA>
 800210e:	e02c      	b.n	800216a <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 8002110:	bf00      	nop
 8002112:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <LCD_send_data_multi+0xdc>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0fa      	beq.n	8002112 <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 800211c:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <LCD_send_data_multi+0xdc>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	b29b      	uxth	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4819      	ldr	r0, [pc, #100]	@ (8002190 <LCD_send_data_multi+0xe4>)
 800212c:	f005 fba8 	bl	8007880 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3b01      	subs	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e5      	bne.n	8002110 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00f      	beq.n	800216a <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 800214a:	bf00      	nop
 800214c:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <LCD_send_data_multi+0xdc>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0fa      	beq.n	800214c <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 8002156:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <LCD_send_data_multi+0xdc>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	480a      	ldr	r0, [pc, #40]	@ (8002190 <LCD_send_data_multi+0xe4>)
 8002166:	f005 fb8b 	bl	8007880 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 800216a:	bf00      	nop
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <LCD_send_data_multi+0xdc>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0fa      	beq.n	800216c <LCD_send_data_multi+0xc0>
	CS_D();
 8002176:	2201      	movs	r2, #1
 8002178:	2110      	movs	r1, #16
 800217a:	4804      	ldr	r0, [pc, #16]	@ (800218c <LCD_send_data_multi+0xe0>)
 800217c:	f003 faa6 	bl	80056cc <HAL_GPIO_WritePin>

}
 8002180:	bf00      	nop
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	2000032c 	.word	0x2000032c
 800218c:	40020c00 	.word	0x40020c00
 8002190:	20000184 	.word	0x20000184

08002194 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 800219e:	2201      	movs	r2, #1
 80021a0:	2108      	movs	r1, #8
 80021a2:	480c      	ldr	r0, [pc, #48]	@ (80021d4 <LCD_send_data+0x40>)
 80021a4:	f003 fa92 	bl	80056cc <HAL_GPIO_WritePin>
	CS_A();
 80021a8:	2200      	movs	r2, #0
 80021aa:	2110      	movs	r1, #16
 80021ac:	4809      	ldr	r0, [pc, #36]	@ (80021d4 <LCD_send_data+0x40>)
 80021ae:	f003 fa8d 	bl	80056cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 80021b2:	1df9      	adds	r1, r7, #7
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	2201      	movs	r2, #1
 80021ba:	4807      	ldr	r0, [pc, #28]	@ (80021d8 <LCD_send_data+0x44>)
 80021bc:	f004 ff59 	bl	8007072 <HAL_SPI_Transmit>

	CS_D();
 80021c0:	2201      	movs	r2, #1
 80021c2:	2110      	movs	r1, #16
 80021c4:	4803      	ldr	r0, [pc, #12]	@ (80021d4 <LCD_send_data+0x40>)
 80021c6:	f003 fa81 	bl	80056cc <HAL_GPIO_WritePin>

}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	20000184 	.word	0x20000184

080021dc <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 80021e0:	2200      	movs	r2, #0
 80021e2:	2140      	movs	r1, #64	@ 0x40
 80021e4:	487c      	ldr	r0, [pc, #496]	@ (80023d8 <ILI9488_driver_init+0x1fc>)
 80021e6:	f003 fa71 	bl	80056cc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80021ea:	200a      	movs	r0, #10
 80021ec:	f002 f972 	bl	80044d4 <HAL_Delay>
	RST_D();
 80021f0:	2201      	movs	r2, #1
 80021f2:	2140      	movs	r1, #64	@ 0x40
 80021f4:	4878      	ldr	r0, [pc, #480]	@ (80023d8 <ILI9488_driver_init+0x1fc>)
 80021f6:	f003 fa69 	bl	80056cc <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7ff ff32 	bl	8002064 <LCD_send_command>
	HAL_Delay(150);
 8002200:	2096      	movs	r0, #150	@ 0x96
 8002202:	f002 f967 	bl	80044d4 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 8002206:	2011      	movs	r0, #17
 8002208:	f7ff ff2c 	bl	8002064 <LCD_send_command>
	HAL_Delay(255);
 800220c:	20ff      	movs	r0, #255	@ 0xff
 800220e:	f002 f961 	bl	80044d4 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8002212:	20e0      	movs	r0, #224	@ 0xe0
 8002214:	f7ff ff26 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff ffbb 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x0C);
 800221e:	200c      	movs	r0, #12
 8002220:	f7ff ffb8 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x05);
 8002224:	2005      	movs	r0, #5
 8002226:	f7ff ffb5 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x04);
 800222a:	2004      	movs	r0, #4
 800222c:	f7ff ffb2 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x0F);
 8002230:	200f      	movs	r0, #15
 8002232:	f7ff ffaf 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x06);
 8002236:	2006      	movs	r0, #6
 8002238:	f7ff ffac 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x3A);
 800223c:	203a      	movs	r0, #58	@ 0x3a
 800223e:	f7ff ffa9 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x56);
 8002242:	2056      	movs	r0, #86	@ 0x56
 8002244:	f7ff ffa6 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x4D);
 8002248:	204d      	movs	r0, #77	@ 0x4d
 800224a:	f7ff ffa3 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x03);
 800224e:	2003      	movs	r0, #3
 8002250:	f7ff ffa0 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x0A);
 8002254:	200a      	movs	r0, #10
 8002256:	f7ff ff9d 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x06);
 800225a:	2006      	movs	r0, #6
 800225c:	f7ff ff9a 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x30);
 8002260:	2030      	movs	r0, #48	@ 0x30
 8002262:	f7ff ff97 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x3E);
 8002266:	203e      	movs	r0, #62	@ 0x3e
 8002268:	f7ff ff94 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x0F);
 800226c:	200f      	movs	r0, #15
 800226e:	f7ff ff91 	bl	8002194 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 8002272:	20e1      	movs	r0, #225	@ 0xe1
 8002274:	f7ff fef6 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x00);
 8002278:	2000      	movs	r0, #0
 800227a:	f7ff ff8b 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x13);
 800227e:	2013      	movs	r0, #19
 8002280:	f7ff ff88 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x18);
 8002284:	2018      	movs	r0, #24
 8002286:	f7ff ff85 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x01);
 800228a:	2001      	movs	r0, #1
 800228c:	f7ff ff82 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x11);
 8002290:	2011      	movs	r0, #17
 8002292:	f7ff ff7f 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x06);
 8002296:	2006      	movs	r0, #6
 8002298:	f7ff ff7c 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x38);
 800229c:	2038      	movs	r0, #56	@ 0x38
 800229e:	f7ff ff79 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x34);
 80022a2:	2034      	movs	r0, #52	@ 0x34
 80022a4:	f7ff ff76 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x4D);
 80022a8:	204d      	movs	r0, #77	@ 0x4d
 80022aa:	f7ff ff73 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x06);
 80022ae:	2006      	movs	r0, #6
 80022b0:	f7ff ff70 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x0D);
 80022b4:	200d      	movs	r0, #13
 80022b6:	f7ff ff6d 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x0B);
 80022ba:	200b      	movs	r0, #11
 80022bc:	f7ff ff6a 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x31);
 80022c0:	2031      	movs	r0, #49	@ 0x31
 80022c2:	f7ff ff67 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x37);
 80022c6:	2037      	movs	r0, #55	@ 0x37
 80022c8:	f7ff ff64 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x0F);
 80022cc:	200f      	movs	r0, #15
 80022ce:	f7ff ff61 	bl	8002194 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 80022d2:	20c0      	movs	r0, #192	@ 0xc0
 80022d4:	f7ff fec6 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x18);
 80022d8:	2018      	movs	r0, #24
 80022da:	f7ff ff5b 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x16);
 80022de:	2016      	movs	r0, #22
 80022e0:	f7ff ff58 	bl	8002194 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 80022e4:	20c1      	movs	r0, #193	@ 0xc1
 80022e6:	f7ff febd 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x45);
 80022ea:	2045      	movs	r0, #69	@ 0x45
 80022ec:	f7ff ff52 	bl	8002194 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 80022f0:	20c2      	movs	r0, #194	@ 0xc2
 80022f2:	f7ff feb7 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x33);
 80022f6:	2033      	movs	r0, #51	@ 0x33
 80022f8:	f7ff ff4c 	bl	8002194 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 80022fc:	20c3      	movs	r0, #195	@ 0xc3
 80022fe:	f7ff feb1 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x33);
 8002302:	2033      	movs	r0, #51	@ 0x33
 8002304:	f7ff ff46 	bl	8002194 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8002308:	2036      	movs	r0, #54	@ 0x36
 800230a:	f7ff feab 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 800230e:	205c      	movs	r0, #92	@ 0x5c
 8002310:	f7ff ff40 	bl	8002194 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8002314:	203a      	movs	r0, #58	@ 0x3a
 8002316:	f7ff fea5 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 800231a:	2006      	movs	r0, #6
 800231c:	f7ff ff3a 	bl	8002194 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff fe9f 	bl	8002064 <LCD_send_command>
	LCD_send_command(0x00);
 8002326:	2000      	movs	r0, #0
 8002328:	f7ff fe9c 	bl	8002064 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 800232c:	20b0      	movs	r0, #176	@ 0xb0
 800232e:	f7ff fe99 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 8002332:	2000      	movs	r0, #0
 8002334:	f7ff ff2e 	bl	8002194 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8002338:	20b1      	movs	r0, #177	@ 0xb1
 800233a:	f7ff fe93 	bl	8002064 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 800233e:	20a0      	movs	r0, #160	@ 0xa0
 8002340:	f7ff ff28 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8002344:	2011      	movs	r0, #17
 8002346:	f7ff ff25 	bl	8002194 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 800234a:	20b4      	movs	r0, #180	@ 0xb4
 800234c:	f7ff fe8a 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8002350:	2002      	movs	r0, #2
 8002352:	f7ff ff1f 	bl	8002194 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8002356:	20b5      	movs	r0, #181	@ 0xb5
 8002358:	f7ff fe84 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x02);
 800235c:	2002      	movs	r0, #2
 800235e:	f7ff ff19 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x02);
 8002362:	2002      	movs	r0, #2
 8002364:	f7ff ff16 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x0A);
 8002368:	200a      	movs	r0, #10
 800236a:	f7ff ff13 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x04);
 800236e:	2004      	movs	r0, #4
 8002370:	f7ff ff10 	bl	8002194 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8002374:	20b6      	movs	r0, #182	@ 0xb6
 8002376:	f7ff fe75 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x02);
 800237a:	2002      	movs	r0, #2
 800237c:	f7ff ff0a 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x02);
 8002380:	2002      	movs	r0, #2
 8002382:	f7ff ff07 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x3B);
 8002386:	203b      	movs	r0, #59	@ 0x3b
 8002388:	f7ff ff04 	bl	8002194 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 800238c:	20e9      	movs	r0, #233	@ 0xe9
 800238e:	f7ff fe69 	bl	8002064 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff fefe 	bl	8002194 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8002398:	20f7      	movs	r0, #247	@ 0xf7
 800239a:	f7ff fe63 	bl	8002064 <LCD_send_command>
	LCD_send_data(0xA9);
 800239e:	20a9      	movs	r0, #169	@ 0xa9
 80023a0:	f7ff fef8 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x51);
 80023a4:	2051      	movs	r0, #81	@ 0x51
 80023a6:	f7ff fef5 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x2C);
 80023aa:	202c      	movs	r0, #44	@ 0x2c
 80023ac:	f7ff fef2 	bl	8002194 <LCD_send_data>
	LCD_send_data(0x82);
 80023b0:	2082      	movs	r0, #130	@ 0x82
 80023b2:	f7ff feef 	bl	8002194 <LCD_send_data>


	LCD_send_command(0x11);
 80023b6:	2011      	movs	r0, #17
 80023b8:	f7ff fe54 	bl	8002064 <LCD_send_command>
	HAL_Delay(255);
 80023bc:	20ff      	movs	r0, #255	@ 0xff
 80023be:	f002 f889 	bl	80044d4 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 80023c2:	2051      	movs	r0, #81	@ 0x51
 80023c4:	f7ff fe4e 	bl	8002064 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 80023c8:	20ff      	movs	r0, #255	@ 0xff
 80023ca:	f7ff fee3 	bl	8002194 <LCD_send_data>
	LCD_send_command(0x29); //Display on
 80023ce:	2029      	movs	r0, #41	@ 0x29
 80023d0:	f7ff fe48 	bl	8002064 <LCD_send_command>


}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40020c00 	.word	0x40020c00

080023dc <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4604      	mov	r4, r0
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4623      	mov	r3, r4
 80023ec:	80fb      	strh	r3, [r7, #6]
 80023ee:	4603      	mov	r3, r0
 80023f0:	80bb      	strh	r3, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	807b      	strh	r3, [r7, #2]
 80023f6:	4613      	mov	r3, r2
 80023f8:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 80023fa:	202a      	movs	r0, #42	@ 0x2a
 80023fc:	f7ff fe32 	bl	8002064 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29b      	uxth	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	733b      	strb	r3, [r7, #12]
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	b29b      	uxth	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	73bb      	strb	r3, [r7, #14]
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	2104      	movs	r1, #4
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fe40 	bl	80020ac <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 800242c:	202b      	movs	r0, #43	@ 0x2b
 800242e:	f7ff fe19 	bl	8002064 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8002432:	88bb      	ldrh	r3, [r7, #4]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b29b      	uxth	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	733b      	strb	r3, [r7, #12]
 800243c:	88bb      	ldrh	r3, [r7, #4]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8002442:	883b      	ldrh	r3, [r7, #0]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	b29b      	uxth	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	73bb      	strb	r3, [r7, #14]
 800244c:	883b      	ldrh	r3, [r7, #0]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	2104      	movs	r1, #4
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fe27 	bl	80020ac <LCD_send_data_multi>

	if(x == 'w')
 800245e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002462:	2b77      	cmp	r3, #119	@ 0x77
 8002464:	d102      	bne.n	800246c <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8002466:	202c      	movs	r0, #44	@ 0x2c
 8002468:	f7ff fdfc 	bl	8002064 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 800246c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002470:	2b72      	cmp	r3, #114	@ 0x72
 8002472:	d102      	bne.n	800247a <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8002474:	202e      	movs	r0, #46	@ 0x2e
 8002476:	f7ff fdf5 	bl	8002064 <LCD_send_command>
	}


}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bd90      	pop	{r4, r7, pc}
	...

08002484 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	4604      	mov	r4, r0
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4623      	mov	r3, r4
 8002494:	80fb      	strh	r3, [r7, #6]
 8002496:	4603      	mov	r3, r0
 8002498:	80bb      	strh	r3, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	807b      	strh	r3, [r7, #2]
 800249e:	4613      	mov	r3, r2
 80024a0:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 80024a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002698 <read_pixel_frame+0x214>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002698 <read_pixel_frame+0x214>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024b0:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 80024b2:	4b79      	ldr	r3, [pc, #484]	@ (8002698 <read_pixel_frame+0x214>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b77      	ldr	r3, [pc, #476]	@ (8002698 <read_pixel_frame+0x214>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80024c0:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 80024c2:	4b75      	ldr	r3, [pc, #468]	@ (8002698 <read_pixel_frame+0x214>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b73      	ldr	r3, [pc, #460]	@ (8002698 <read_pixel_frame+0x214>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0210 	orr.w	r2, r2, #16
 80024d0:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 80024d2:	4b71      	ldr	r3, [pc, #452]	@ (8002698 <read_pixel_frame+0x214>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002698 <read_pixel_frame+0x214>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024e0:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 80024e2:	4b6e      	ldr	r3, [pc, #440]	@ (800269c <read_pixel_frame+0x218>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 80024ec:	887a      	ldrh	r2, [r7, #2]
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bfb8      	it	lt
 80024f6:	425b      	neglt	r3, r3
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	8839      	ldrh	r1, [r7, #0]
 80024fc:	88bb      	ldrh	r3, [r7, #4]
 80024fe:	1acb      	subs	r3, r1, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	bfb8      	it	lt
 8002504:	425b      	neglt	r3, r3
 8002506:	b29b      	uxth	r3, r3
 8002508:	fb12 f303 	smulbb	r3, r2, r3
 800250c:	b29b      	uxth	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	0052      	lsls	r2, r2, #1
 8002512:	4413      	add	r3, r2
 8002514:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 8002516:	2300      	movs	r3, #0
 8002518:	753b      	strb	r3, [r7, #20]

    free(data);
 800251a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800251c:	f00a ff06 	bl	800d32c <free>
    data = malloc(byteNr);
 8002520:	8afb      	ldrh	r3, [r7, #22]
 8002522:	4618      	mov	r0, r3
 8002524:	f00a fefa 	bl	800d31c <malloc>
 8002528:	4603      	mov	r3, r0
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	3b01      	subs	r3, #1
 8002530:	807b      	strh	r3, [r7, #2]
    y--;
 8002532:	883b      	ldrh	r3, [r7, #0]
 8002534:	3b01      	subs	r3, #1
 8002536:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	b29b      	uxth	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	743b      	strb	r3, [r7, #16]
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	747b      	strb	r3, [r7, #17]
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	b29b      	uxth	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	74bb      	strb	r3, [r7, #18]
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8002558:	88bb      	ldrh	r3, [r7, #4]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	b29b      	uxth	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	733b      	strb	r3, [r7, #12]
 8002562:	88bb      	ldrh	r3, [r7, #4]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	737b      	strb	r3, [r7, #13]
 8002568:	883b      	ldrh	r3, [r7, #0]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	b29b      	uxth	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	73bb      	strb	r3, [r7, #14]
 8002572:	883b      	ldrh	r3, [r7, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8002578:	2200      	movs	r2, #0
 800257a:	2110      	movs	r1, #16
 800257c:	4848      	ldr	r0, [pc, #288]	@ (80026a0 <read_pixel_frame+0x21c>)
 800257e:	f003 f8a5 	bl	80056cc <HAL_GPIO_WritePin>

    DC_COMMAND();
 8002582:	2200      	movs	r2, #0
 8002584:	2108      	movs	r1, #8
 8002586:	4846      	ldr	r0, [pc, #280]	@ (80026a0 <read_pixel_frame+0x21c>)
 8002588:	f003 f8a0 	bl	80056cc <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 800258c:	232a      	movs	r3, #42	@ 0x2a
 800258e:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 8002590:	f107 010b 	add.w	r1, r7, #11
 8002594:	f04f 33ff 	mov.w	r3, #4294967295
 8002598:	2201      	movs	r2, #1
 800259a:	483f      	ldr	r0, [pc, #252]	@ (8002698 <read_pixel_frame+0x214>)
 800259c:	f004 fd69 	bl	8007072 <HAL_SPI_Transmit>
    DC_DATA();
 80025a0:	2201      	movs	r2, #1
 80025a2:	2108      	movs	r1, #8
 80025a4:	483e      	ldr	r0, [pc, #248]	@ (80026a0 <read_pixel_frame+0x21c>)
 80025a6:	f003 f891 	bl	80056cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 80025aa:	f107 0110 	add.w	r1, r7, #16
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	2204      	movs	r2, #4
 80025b4:	4838      	ldr	r0, [pc, #224]	@ (8002698 <read_pixel_frame+0x214>)
 80025b6:	f004 fd5c 	bl	8007072 <HAL_SPI_Transmit>

    DC_COMMAND();
 80025ba:	2200      	movs	r2, #0
 80025bc:	2108      	movs	r1, #8
 80025be:	4838      	ldr	r0, [pc, #224]	@ (80026a0 <read_pixel_frame+0x21c>)
 80025c0:	f003 f884 	bl	80056cc <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 80025c4:	232b      	movs	r3, #43	@ 0x2b
 80025c6:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 80025c8:	f107 010a 	add.w	r1, r7, #10
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	2201      	movs	r2, #1
 80025d2:	4831      	ldr	r0, [pc, #196]	@ (8002698 <read_pixel_frame+0x214>)
 80025d4:	f004 fd4d 	bl	8007072 <HAL_SPI_Transmit>
    DC_DATA();
 80025d8:	2201      	movs	r2, #1
 80025da:	2108      	movs	r1, #8
 80025dc:	4830      	ldr	r0, [pc, #192]	@ (80026a0 <read_pixel_frame+0x21c>)
 80025de:	f003 f875 	bl	80056cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 80025e2:	f107 010c 	add.w	r1, r7, #12
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	2204      	movs	r2, #4
 80025ec:	482a      	ldr	r0, [pc, #168]	@ (8002698 <read_pixel_frame+0x214>)
 80025ee:	f004 fd40 	bl	8007072 <HAL_SPI_Transmit>

    DC_COMMAND();
 80025f2:	2200      	movs	r2, #0
 80025f4:	2108      	movs	r1, #8
 80025f6:	482a      	ldr	r0, [pc, #168]	@ (80026a0 <read_pixel_frame+0x21c>)
 80025f8:	f003 f868 	bl	80056cc <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 80025fc:	232e      	movs	r3, #46	@ 0x2e
 80025fe:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 8002600:	f107 0109 	add.w	r1, r7, #9
 8002604:	f04f 33ff 	mov.w	r3, #4294967295
 8002608:	2201      	movs	r2, #1
 800260a:	4823      	ldr	r0, [pc, #140]	@ (8002698 <read_pixel_frame+0x214>)
 800260c:	f004 fd31 	bl	8007072 <HAL_SPI_Transmit>
    DC_DATA();
 8002610:	2201      	movs	r2, #1
 8002612:	2108      	movs	r1, #8
 8002614:	4822      	ldr	r0, [pc, #136]	@ (80026a0 <read_pixel_frame+0x21c>)
 8002616:	f003 f859 	bl	80056cc <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 800261a:	f107 0114 	add.w	r1, r7, #20
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	2201      	movs	r2, #1
 8002624:	481c      	ldr	r0, [pc, #112]	@ (8002698 <read_pixel_frame+0x214>)
 8002626:	f004 fe68 	bl	80072fa <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 800262a:	8afb      	ldrh	r3, [r7, #22]
 800262c:	461a      	mov	r2, r3
 800262e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002630:	4819      	ldr	r0, [pc, #100]	@ (8002698 <read_pixel_frame+0x214>)
 8002632:	f005 f9d7 	bl	80079e4 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 8002636:	bf00      	nop
 8002638:	4b18      	ldr	r3, [pc, #96]	@ (800269c <read_pixel_frame+0x218>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0fa      	beq.n	8002638 <read_pixel_frame+0x1b4>
    CS_D();
 8002642:	2201      	movs	r2, #1
 8002644:	2110      	movs	r1, #16
 8002646:	4816      	ldr	r0, [pc, #88]	@ (80026a0 <read_pixel_frame+0x21c>)
 8002648:	f003 f840 	bl	80056cc <HAL_GPIO_WritePin>

    free(data);
 800264c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800264e:	f00a fe6d 	bl	800d32c <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 8002652:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <read_pixel_frame+0x214>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <read_pixel_frame+0x214>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002660:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 8002662:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <read_pixel_frame+0x214>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <read_pixel_frame+0x214>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8002670:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <read_pixel_frame+0x214>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <read_pixel_frame+0x214>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <read_pixel_frame+0x214>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <read_pixel_frame+0x214>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800268c:	601a      	str	r2, [r3, #0]

}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd90      	pop	{r4, r7, pc}
 8002696:	bf00      	nop
 8002698:	20000184 	.word	0x20000184
 800269c:	2000032d 	.word	0x2000032d
 80026a0:	40020c00 	.word	0x40020c00

080026a4 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	if(hspi->Instance == SPI1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a05      	ldr	r2, [pc, #20]	@ (80026c8 <HAL_SPI_TxCpltCallback+0x24>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d102      	bne.n	80026bc <HAL_SPI_TxCpltCallback+0x18>
	{
		flagDmaSpiTx = 1;
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_SPI_TxCpltCallback+0x28>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
	}



}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40013000 	.word	0x40013000
 80026cc:	2000032c 	.word	0x2000032c

080026d0 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	if(hspi->Instance == SPI1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a28      	ldr	r2, [pc, #160]	@ (8002780 <HAL_SPI_RxCpltCallback+0xb0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d102      	bne.n	80026e8 <HAL_SPI_RxCpltCallback+0x18>
	{
		/*
		 * SPI1 folosit pentru LCD
		 */

		flagDmaSpiRx = 1;
 80026e2:	4b28      	ldr	r3, [pc, #160]	@ (8002784 <HAL_SPI_RxCpltCallback+0xb4>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]

	}


	if(hspi->Instance == SPI2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a26      	ldr	r2, [pc, #152]	@ (8002788 <HAL_SPI_RxCpltCallback+0xb8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d140      	bne.n	8002774 <HAL_SPI_RxCpltCallback+0xa4>
	{
		/*
		 * Receptionare comenzi controller
		 */

		switch(dataController)
 80026f2:	4b26      	ldr	r3, [pc, #152]	@ (800278c <HAL_SPI_RxCpltCallback+0xbc>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	d836      	bhi.n	800276c <HAL_SPI_RxCpltCallback+0x9c>
 80026fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002704 <HAL_SPI_RxCpltCallback+0x34>)
 8002700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002704:	08002745 	.word	0x08002745
 8002708:	0800274d 	.word	0x0800274d
 800270c:	0800276d 	.word	0x0800276d
 8002710:	08002755 	.word	0x08002755
 8002714:	0800276d 	.word	0x0800276d
 8002718:	0800276d 	.word	0x0800276d
 800271c:	0800276d 	.word	0x0800276d
 8002720:	0800275d 	.word	0x0800275d
 8002724:	0800276d 	.word	0x0800276d
 8002728:	0800276d 	.word	0x0800276d
 800272c:	0800276d 	.word	0x0800276d
 8002730:	0800276d 	.word	0x0800276d
 8002734:	0800276d 	.word	0x0800276d
 8002738:	0800276d 	.word	0x0800276d
 800273c:	0800276d 	.word	0x0800276d
 8002740:	08002765 	.word	0x08002765
		{
		  	case DxRight:
		  	  currentDx = DxRight;
 8002744:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <HAL_SPI_RxCpltCallback+0xc0>)
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
		  	  break;
 800274a:	e013      	b.n	8002774 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxLeft:
		  	  currentDx = DxLeft;
 800274c:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <HAL_SPI_RxCpltCallback+0xc0>)
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
		  	  break;
 8002752:	e00f      	b.n	8002774 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxUp:
		  	  currentDx = DxUp;
 8002754:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <HAL_SPI_RxCpltCallback+0xc0>)
 8002756:	2204      	movs	r2, #4
 8002758:	701a      	strb	r2, [r3, #0]
		  	  break;
 800275a:	e00b      	b.n	8002774 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxDown:
		  	  currentDx = DxDown;
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <HAL_SPI_RxCpltCallback+0xc0>)
 800275e:	2208      	movs	r2, #8
 8002760:	701a      	strb	r2, [r3, #0]
		  	  break;
 8002762:	e007      	b.n	8002774 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxStart:
		  	  currentDx = DxStart;
 8002764:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <HAL_SPI_RxCpltCallback+0xc0>)
 8002766:	2210      	movs	r2, #16
 8002768:	701a      	strb	r2, [r3, #0]
		  	  break;
 800276a:	e003      	b.n	8002774 <HAL_SPI_RxCpltCallback+0xa4>
		  	default:
		  	  currentDx = 0x00;
 800276c:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <HAL_SPI_RxCpltCallback+0xc0>)
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
		  	  break;
 8002772:	bf00      	nop
		}

	}

}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40013000 	.word	0x40013000
 8002784:	2000032d 	.word	0x2000032d
 8002788:	40003800 	.word	0x40003800
 800278c:	2000032f 	.word	0x2000032f
 8002790:	20000330 	.word	0x20000330

08002794 <HAL_DAC_ConvHalfCpltCallbackCh1>:


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
    /*
     * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
     */

	flagDmaDAC = 1;
 800279c:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]

}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	2000032e 	.word	0x2000032e

080027b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b092      	sub	sp, #72	@ 0x48
 80027b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027ba:	f001 fe19 	bl	80043f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027be:	f000 fa5d 	bl	8002c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027c2:	f000 fbf9 	bl	8002fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80027c6:	f000 fbb9 	bl	8002f3c <MX_DMA_Init>
  MX_SPI1_Init();
 80027ca:	f000 fb0b 	bl	8002de4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80027ce:	f000 fb8b 	bl	8002ee8 <MX_USART1_UART_Init>
  MX_DAC_Init();
 80027d2:	f000 fabd 	bl	8002d50 <MX_DAC_Init>
  MX_TIM2_Init();
 80027d6:	f000 fb3b 	bl	8002e50 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 80027da:	f000 fae3 	bl	8002da4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80027de:	f007 fd01 	bl	800a1e4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 80027e2:	f000 fc4d 	bl	8003080 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 80027e6:	f7ff fcf9 	bl	80021dc <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 80027ea:	48c5      	ldr	r0, [pc, #788]	@ (8002b00 <main+0x34c>)
 80027ec:	f005 fdb8 	bl	8008360 <HAL_TIM_Base_Start>


  /*Test pentru tastatura*/

  fill_screen1(0x0000);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe fd33 	bl	800125c <fill_screen1>

  HAL_Delay(1000);
 80027f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027fa:	f001 fe6b 	bl	80044d4 <HAL_Delay>
  play_audio_file("Audio/acoustic.txt");
 80027fe:	48c1      	ldr	r0, [pc, #772]	@ (8002b04 <main+0x350>)
 8002800:	f7fe fa58 	bl	8000cb4 <play_audio_file>
  HAL_Delay(1000);
 8002804:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002808:	f001 fe64 	bl	80044d4 <HAL_Delay>
  play_audio_file_vibrato("Audio/king.txt"); //doremi mine songita song22 king acoustic bambina
 800280c:	48be      	ldr	r0, [pc, #760]	@ (8002b08 <main+0x354>)
 800280e:	f7fe fb67 	bl	8000ee0 <play_audio_file_vibrato>


  fill_screen1(0xF100);
 8002812:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8002816:	f7fe fd21 	bl	800125c <fill_screen1>
  HAL_Delay(1000);
 800281a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800281e:	f001 fe59 	bl	80044d4 <HAL_Delay>
  fill_screen2(0xF00F);
 8002822:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8002826:	f7fe fd79 	bl	800131c <fill_screen2>
  HAL_Delay(1000);
 800282a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800282e:	f001 fe51 	bl	80044d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002832:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002836:	f7fe fd71 	bl	800131c <fill_screen2>
  HAL_Delay(1000);
 800283a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800283e:	f001 fe49 	bl	80044d4 <HAL_Delay>

  unsigned int startTick = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int endTick = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int getTime = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	633b      	str	r3, [r7, #48]	@ 0x30
  ENTITY entity;


  /*Test SCALARE*/

  fill_screen2(0xFFFF);
 800284e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002852:	f7fe fd63 	bl	800131c <fill_screen2>

  entity.x0 = 100;
 8002856:	2364      	movs	r3, #100	@ 0x64
 8002858:	837b      	strh	r3, [r7, #26]
  entity.y0 = 100;
 800285a:	2364      	movs	r3, #100	@ 0x64
 800285c:	83bb      	strh	r3, [r7, #28]
  entity.id = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	763b      	strb	r3, [r7, #24]
  draw_entity(&entity, "graphic/multi2.bin");
 8002862:	f107 0318 	add.w	r3, r7, #24
 8002866:	49a9      	ldr	r1, [pc, #676]	@ (8002b0c <main+0x358>)
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe ffcb 	bl	8001804 <draw_entity>
  HAL_Delay(1000);
 800286e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002872:	f001 fe2f 	bl	80044d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002876:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800287a:	f7fe fd4f 	bl	800131c <fill_screen2>
  scaling_entity(&entity, 38, "graphic/multi2.bin", "multi2.bin");
 800287e:	f107 0318 	add.w	r3, r7, #24
 8002882:	4aa3      	ldr	r2, [pc, #652]	@ (8002b10 <main+0x35c>)
 8002884:	49a1      	ldr	r1, [pc, #644]	@ (8002b0c <main+0x358>)
 8002886:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8002b14 <main+0x360>
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f9ba 	bl	8001c04 <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8002890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002892:	f107 0318 	add.w	r3, r7, #24
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe ffb3 	bl	8001804 <draw_entity>

  //--------------------------------------------

  HAL_Delay(1000);
 800289e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028a2:	f001 fe17 	bl	80044d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 80028a6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80028aa:	f7fe fd37 	bl	800131c <fill_screen2>

  rotate_entity(&entity, 90);
 80028ae:	f107 0318 	add.w	r3, r7, #24
 80028b2:	215a      	movs	r1, #90	@ 0x5a
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fb09 	bl	8001ecc <rotate_entity>

  HAL_Delay(1000);
 80028ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028be:	f001 fe09 	bl	80044d4 <HAL_Delay>

  //---------------------------------------------

  HAL_Delay(1000);
 80028c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028c6:	f001 fe05 	bl	80044d4 <HAL_Delay>

  fill_screen2(0xFFFF);
 80028ca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80028ce:	f7fe fd25 	bl	800131c <fill_screen2>
  draw_entity(&entity, entity.filePathName);
 80028d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028d4:	f107 0318 	add.w	r3, r7, #24
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe ff92 	bl	8001804 <draw_entity>
  HAL_Delay(1000);
 80028e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028e4:	f001 fdf6 	bl	80044d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 80028e8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80028ec:	f7fe fd16 	bl	800131c <fill_screen2>
  scaling_entity(&entity, 0.5, entity.filePathName, "multi2.bin");
 80028f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028f2:	f107 0318 	add.w	r3, r7, #24
 80028f6:	4a86      	ldr	r2, [pc, #536]	@ (8002b10 <main+0x35c>)
 80028f8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff f981 	bl	8001c04 <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8002902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002904:	f107 0318 	add.w	r3, r7, #24
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe ff7a 	bl	8001804 <draw_entity>
  HAL_Delay(1000);
 8002910:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002914:	f001 fdde 	bl	80044d4 <HAL_Delay>

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	80fb      	strh	r3, [r7, #6]
  ent.y0 = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	813b      	strh	r3, [r7, #8]
  ent.id = 0x00;
 8002920:	2300      	movs	r3, #0
 8002922:	713b      	strb	r3, [r7, #4]
  draw_entity(&ent, "graphic/img5.bin");
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	497c      	ldr	r1, [pc, #496]	@ (8002b18 <main+0x364>)
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe ff6b 	bl	8001804 <draw_entity>
  HAL_Delay(2000);
 800292e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002932:	f001 fdcf 	bl	80044d4 <HAL_Delay>
  draw_entity(&ent, "graphic/img6.bin");
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4978      	ldr	r1, [pc, #480]	@ (8002b1c <main+0x368>)
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe ff62 	bl	8001804 <draw_entity>
  HAL_Delay(2000);
 8002940:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002944:	f001 fdc6 	bl	80044d4 <HAL_Delay>
  draw_entity(&ent, "graphic/img8.bin");
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	4975      	ldr	r1, [pc, #468]	@ (8002b20 <main+0x36c>)
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe ff59 	bl	8001804 <draw_entity>
  HAL_Delay(2000);
 8002952:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002956:	f001 fdbd 	bl	80044d4 <HAL_Delay>
  draw_entity(&ent, "graphic/img9.bin");
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	4971      	ldr	r1, [pc, #452]	@ (8002b24 <main+0x370>)
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe ff50 	bl	8001804 <draw_entity>
  HAL_Delay(2000);
 8002964:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002968:	f001 fdb4 	bl	80044d4 <HAL_Delay>
  startTick = HAL_GetTick();
 800296c:	f001 fda6 	bl	80044bc <HAL_GetTick>
 8002970:	63b8      	str	r0, [r7, #56]	@ 0x38
  draw_entity(&ent, "graphic/img92.bin");
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	496c      	ldr	r1, [pc, #432]	@ (8002b28 <main+0x374>)
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe ff44 	bl	8001804 <draw_entity>
  endTick = HAL_GetTick();
 800297c:	f001 fd9e 	bl	80044bc <HAL_GetTick>
 8002980:	6378      	str	r0, [r7, #52]	@ 0x34
  getTime = endTick - startTick;
 8002982:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	633b      	str	r3, [r7, #48]	@ 0x30

  fill_screen2(0x0000);
 800298a:	2000      	movs	r0, #0
 800298c:	f7fe fcc6 	bl	800131c <fill_screen2>
  draw_entity(&ent, "graphic/pixel1.bin");
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	4966      	ldr	r1, [pc, #408]	@ (8002b2c <main+0x378>)
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe ff35 	bl	8001804 <draw_entity>
  HAL_Delay(3000);
 800299a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800299e:	f001 fd99 	bl	80044d4 <HAL_Delay>

  //Test translation

  //ENTITY entity;

  entity.x0 = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	83bb      	strh	r3, [r7, #28]
  entity.x1 = 64;
 80029aa:	2340      	movs	r3, #64	@ 0x40
 80029ac:	83fb      	strh	r3, [r7, #30]
  entity.y1 = 64;
 80029ae:	2340      	movs	r3, #64	@ 0x40
 80029b0:	843b      	strh	r3, [r7, #32]
  entity.color = 0xF100;
 80029b2:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80029b6:	847b      	strh	r3, [r7, #34]	@ 0x22

  //draw_entity(&entity,NULL);

  //translation_test(&entity, 1, 0);

  HAL_Delay(500);
 80029b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029bc:	f001 fd8a 	bl	80044d4 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 1);//, 0xF100);
 80029c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3364      	adds	r3, #100	@ 0x64
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	b219      	sxth	r1, r3
 80029cc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3364      	adds	r3, #100	@ 0x64
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	f107 0018 	add.w	r0, r7, #24
 80029dc:	2301      	movs	r3, #1
 80029de:	f7ff f811 	bl	8001a04 <translation_entity>
  HAL_Delay(2000);
 80029e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80029e6:	f001 fd75 	bl	80044d4 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 1);//, 0xF100);
 80029ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3320      	adds	r3, #32
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	b219      	sxth	r1, r3
 80029f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3320      	adds	r3, #32
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	b21a      	sxth	r2, r3
 8002a02:	f107 0018 	add.w	r0, r7, #24
 8002a06:	2301      	movs	r3, #1
 8002a08:	f7fe fffc 	bl	8001a04 <translation_entity>
  HAL_Delay(500);
 8002a0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a10:	f001 fd60 	bl	80044d4 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 1);//, 0xF100);
 8002a14:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b219      	sxth	r1, r3
 8002a20:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3320      	adds	r3, #32
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	f107 0018 	add.w	r0, r7, #24
 8002a30:	2301      	movs	r3, #1
 8002a32:	f7fe ffe7 	bl	8001a04 <translation_entity>
  HAL_Delay(500);
 8002a36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a3a:	f001 fd4b 	bl	80044d4 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0, 1);//, 0xF100);
 8002a3e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	330c      	adds	r3, #12
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	b219      	sxth	r1, r3
 8002a4a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002a4e:	f107 0018 	add.w	r0, r7, #24
 8002a52:	2301      	movs	r3, #1
 8002a54:	f7fe ffd6 	bl	8001a04 <translation_entity>
  HAL_Delay(500);
 8002a58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a5c:	f001 fd3a 	bl	80044d4 <HAL_Delay>


  //Test_SD_Card();

  play_audio_file("audio/mine.txt"); //doremi mine songita song22
 8002a60:	4833      	ldr	r0, [pc, #204]	@ (8002b30 <main+0x37c>)
 8002a62:	f7fe f927 	bl	8000cb4 <play_audio_file>

  fill_screen2(0xF100);
 8002a66:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8002a6a:	f7fe fc57 	bl	800131c <fill_screen2>
  //startTick = HAL_GetTick();
  //read_audio_file("audio/random.txt", sampleData);
  //endTick = HAL_GetTick();
  //getTime = endTick - startTick;

  HAL_Delay(100);
 8002a6e:	2064      	movs	r0, #100	@ 0x64
 8002a70:	f001 fd30 	bl	80044d4 <HAL_Delay>


  for(uint8_t i=0;i<100;i++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002a7a:	e074      	b.n	8002b66 <main+0x3b2>
  {
	  for(uint8_t j=0; j<100;j++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002a82:	e067      	b.n	8002b54 <main+0x3a0>
	  {

		  if(i==j)
 8002a84:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002a88:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d10b      	bne.n	8002aa8 <main+0x2f4>
		  {
			  draw_pixel(i,j,0xF100);
 8002a90:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002a9a:	b291      	uxth	r1, r2
 8002a9c:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe fb83 	bl	80011ac <draw_pixel>
			  continue;
 8002aa6:	e050      	b.n	8002b4a <main+0x396>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8002aa8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002aac:	2b50      	cmp	r3, #80	@ 0x50
 8002aae:	d103      	bne.n	8002ab8 <main+0x304>
 8002ab0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002ab4:	2b14      	cmp	r3, #20
 8002ab6:	d017      	beq.n	8002ae8 <main+0x334>
 8002ab8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002abc:	2b50      	cmp	r3, #80	@ 0x50
 8002abe:	d103      	bne.n	8002ac8 <main+0x314>
 8002ac0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002ac4:	2b13      	cmp	r3, #19
 8002ac6:	d00f      	beq.n	8002ae8 <main+0x334>
 8002ac8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002acc:	2b51      	cmp	r3, #81	@ 0x51
 8002ace:	d103      	bne.n	8002ad8 <main+0x324>
 8002ad0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002ad4:	2b14      	cmp	r3, #20
 8002ad6:	d007      	beq.n	8002ae8 <main+0x334>
 8002ad8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002adc:	2b51      	cmp	r3, #81	@ 0x51
 8002ade:	d129      	bne.n	8002b34 <main+0x380>
 8002ae0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002ae4:	2b13      	cmp	r3, #19
 8002ae6:	d125      	bne.n	8002b34 <main+0x380>
		  {
			  draw_pixel(i,j,0x001F);
 8002ae8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002af2:	b291      	uxth	r1, r2
 8002af4:	221f      	movs	r2, #31
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fb58 	bl	80011ac <draw_pixel>
			  continue;
 8002afc:	e025      	b.n	8002b4a <main+0x396>
 8002afe:	bf00      	nop
 8002b00:	2000029c 	.word	0x2000029c
 8002b04:	0800d6b8 	.word	0x0800d6b8
 8002b08:	0800d6cc 	.word	0x0800d6cc
 8002b0c:	0800d6dc 	.word	0x0800d6dc
 8002b10:	0800d6f0 	.word	0x0800d6f0
 8002b14:	42180000 	.word	0x42180000
 8002b18:	0800d6fc 	.word	0x0800d6fc
 8002b1c:	0800d710 	.word	0x0800d710
 8002b20:	0800d724 	.word	0x0800d724
 8002b24:	0800d738 	.word	0x0800d738
 8002b28:	0800d74c 	.word	0x0800d74c
 8002b2c:	0800d760 	.word	0x0800d760
 8002b30:	0800d774 	.word	0x0800d774
		  }


		  draw_pixel(i,j,0xFFFF);
 8002b34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002b3e:	b291      	uxth	r1, r2
 8002b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fb31 	bl	80011ac <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8002b4a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002b54:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b58:	2b63      	cmp	r3, #99	@ 0x63
 8002b5a:	d993      	bls.n	8002a84 <main+0x2d0>
  for(uint8_t i=0;i<100;i++)
 8002b5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b60:	3301      	adds	r3, #1
 8002b62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002b66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b6a:	2b63      	cmp	r3, #99	@ 0x63
 8002b6c:	d986      	bls.n	8002a7c <main+0x2c8>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8002b6e:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8002b72:	f7fe fbd3 	bl	800131c <fill_screen2>
  HAL_Delay(1000);
 8002b76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b7a:	f001 fcab 	bl	80044d4 <HAL_Delay>
  fill_screen2(0xF150);
 8002b7e:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8002b82:	f7fe fbcb 	bl	800131c <fill_screen2>
  HAL_Delay(1000);
 8002b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b8a:	f001 fca3 	bl	80044d4 <HAL_Delay>
  fill_screen2(0xF111);
 8002b8e:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8002b92:	f7fe fbc3 	bl	800131c <fill_screen2>
  HAL_Delay(1000);
 8002b96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b9a:	f001 fc9b 	bl	80044d4 <HAL_Delay>
  fill_screen2(0xF10F);
 8002b9e:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8002ba2:	f7fe fbbb 	bl	800131c <fill_screen2>
  HAL_Delay(1000);
 8002ba6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002baa:	f001 fc93 	bl	80044d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002bae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bb2:	f7fe fbb3 	bl	800131c <fill_screen2>
  HAL_Delay(1000);
 8002bb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bba:	f001 fc8b 	bl	80044d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002bbe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bc2:	f7fe fbab 	bl	800131c <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 8002bc6:	231f      	movs	r3, #31
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	4a26      	ldr	r2, [pc, #152]	@ (8002c6c <main+0x4b8>)
 8002bd4:	21c8      	movs	r1, #200	@ 0xc8
 8002bd6:	2024      	movs	r0, #36	@ 0x24
 8002bd8:	f7fe fcfc 	bl	80015d4 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8002bdc:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <main+0x4bc>)
 8002bde:	603b      	str	r3, [r7, #0]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 8002be0:	463b      	mov	r3, r7
 8002be2:	2204      	movs	r2, #4
 8002be4:	4619      	mov	r1, r3
 8002be6:	4823      	ldr	r0, [pc, #140]	@ (8002c74 <main+0x4c0>)
 8002be8:	f004 fe4a 	bl	8007880 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 8002bec:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002bf0:	2250      	movs	r2, #80	@ 0x50
 8002bf2:	2114      	movs	r1, #20
 8002bf4:	2014      	movs	r0, #20
 8002bf6:	f7fe fd31 	bl	800165c <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 8002bfa:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002bfe:	2250      	movs	r2, #80	@ 0x50
 8002c00:	2114      	movs	r1, #20
 8002c02:	2014      	movs	r0, #20
 8002c04:	f7fe fd65 	bl	80016d2 <draw_vertical_line>

  flagDmaSpiTx = 0;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <main+0x4c4>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 8002c0e:	221f      	movs	r2, #31
 8002c10:	2100      	movs	r1, #0
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7fe faca 	bl	80011ac <draw_pixel>
  draw_pixel(1,0,0xF800);
 8002c18:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7fe fac4 	bl	80011ac <draw_pixel>
  draw_pixel(0,1,0x001F);
 8002c24:	221f      	movs	r2, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7fe fabf 	bl	80011ac <draw_pixel>
  draw_pixel(1,1,0xF800);
 8002c2e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002c32:	2101      	movs	r1, #1
 8002c34:	2001      	movs	r0, #1
 8002c36:	f7fe fab9 	bl	80011ac <draw_pixel>

  HAL_Delay(50);
 8002c3a:	2032      	movs	r0, #50	@ 0x32
 8002c3c:	f001 fc4a 	bl	80044d4 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 8002c40:	2001      	movs	r0, #1
 8002c42:	f00a fb6b 	bl	800d31c <malloc>
 8002c46:	4603      	mov	r3, r0
 8002c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 8002c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	2302      	movs	r3, #2
 8002c50:	2202      	movs	r2, #2
 8002c52:	2100      	movs	r1, #0
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7ff fc15 	bl	8002484 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 8002c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c5c:	f00a fb66 	bl	800d32c <free>

  HAL_Delay(3000);
 8002c60:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002c64:	f001 fc36 	bl	80044d4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <main+0x4b4>
 8002c6c:	0800d784 	.word	0x0800d784
 8002c70:	04030201 	.word	0x04030201
 8002c74:	20000184 	.word	0x20000184
 8002c78:	2000032c 	.word	0x2000032c

08002c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b094      	sub	sp, #80	@ 0x50
 8002c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c82:	f107 0320 	add.w	r3, r7, #32
 8002c86:	2230      	movs	r2, #48	@ 0x30
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f00a fc3a 	bl	800d504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c90:	f107 030c 	add.w	r3, r7, #12
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	4b28      	ldr	r3, [pc, #160]	@ (8002d48 <SystemClock_Config+0xcc>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	4a27      	ldr	r2, [pc, #156]	@ (8002d48 <SystemClock_Config+0xcc>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb0:	4b25      	ldr	r3, [pc, #148]	@ (8002d48 <SystemClock_Config+0xcc>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	4b22      	ldr	r3, [pc, #136]	@ (8002d4c <SystemClock_Config+0xd0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a21      	ldr	r2, [pc, #132]	@ (8002d4c <SystemClock_Config+0xd0>)
 8002cc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d4c <SystemClock_Config+0xd0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ce6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002cec:	2304      	movs	r3, #4
 8002cee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002cf0:	23a8      	movs	r3, #168	@ 0xa8
 8002cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002cf8:	2307      	movs	r3, #7
 8002cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cfc:	f107 0320 	add.w	r3, r7, #32
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 fcfd 	bl	8005700 <HAL_RCC_OscConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d0c:	f000 f9b2 	bl	8003074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d10:	230f      	movs	r3, #15
 8002d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d14:	2302      	movs	r3, #2
 8002d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	2105      	movs	r1, #5
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 ff5e 	bl	8005bf0 <HAL_RCC_ClockConfig>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d3a:	f000 f99b 	bl	8003074 <Error_Handler>
  }
}
 8002d3e:	bf00      	nop
 8002d40:	3750      	adds	r7, #80	@ 0x50
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000

08002d50 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002d56:	463b      	mov	r3, r7
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <MX_DAC_Init+0x4c>)
 8002d60:	4a0f      	ldr	r2, [pc, #60]	@ (8002da0 <MX_DAC_Init+0x50>)
 8002d62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002d64:	480d      	ldr	r0, [pc, #52]	@ (8002d9c <MX_DAC_Init+0x4c>)
 8002d66:	f001 fcea 	bl	800473e <HAL_DAC_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002d70:	f000 f980 	bl	8003074 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002d74:	2324      	movs	r3, #36	@ 0x24
 8002d76:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4619      	mov	r1, r3
 8002d82:	4806      	ldr	r0, [pc, #24]	@ (8002d9c <MX_DAC_Init+0x4c>)
 8002d84:	f001 fe21 	bl	80049ca <HAL_DAC_ConfigChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002d8e:	f000 f971 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2000008c 	.word	0x2000008c
 8002da0:	40007400 	.word	0x40007400

08002da4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002da8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <MX_SDIO_SD_Init+0x38>)
 8002daa:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <MX_SDIO_SD_Init+0x3c>)
 8002dac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002dae:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <MX_SDIO_SD_Init+0x38>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002db4:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <MX_SDIO_SD_Init+0x38>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002dba:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <MX_SDIO_SD_Init+0x38>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002dc0:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <MX_SDIO_SD_Init+0x38>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002dc6:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <MX_SDIO_SD_Init+0x38>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	@ (8002ddc <MX_SDIO_SD_Init+0x38>)
 8002dce:	2208      	movs	r2, #8
 8002dd0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	20000100 	.word	0x20000100
 8002de0:	40012c00 	.word	0x40012c00

08002de4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002de8:	4b17      	ldr	r3, [pc, #92]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002dea:	4a18      	ldr	r2, [pc, #96]	@ (8002e4c <MX_SPI1_Init+0x68>)
 8002dec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dee:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002df0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002df4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002df6:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e02:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e16:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e28:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e30:	220a      	movs	r2, #10
 8002e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <MX_SPI1_Init+0x64>)
 8002e36:	f004 f893 	bl	8006f60 <HAL_SPI_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e40:	f000 f918 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000184 	.word	0x20000184
 8002e4c:	40013000 	.word	0x40013000

08002e50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e64:	463b      	mov	r3, r7
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee4 <MX_TIM2_Init+0x94>)
 8002e6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;//83
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <MX_TIM2_Init+0x94>)
 8002e76:	2253      	movs	r2, #83	@ 0x53
 8002e78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee4 <MX_TIM2_Init+0x94>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11;//11
 8002e80:	4b18      	ldr	r3, [pc, #96]	@ (8002ee4 <MX_TIM2_Init+0x94>)
 8002e82:	220b      	movs	r2, #11
 8002e84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e86:	4b17      	ldr	r3, [pc, #92]	@ (8002ee4 <MX_TIM2_Init+0x94>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <MX_TIM2_Init+0x94>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e92:	4814      	ldr	r0, [pc, #80]	@ (8002ee4 <MX_TIM2_Init+0x94>)
 8002e94:	f005 fa14 	bl	80082c0 <HAL_TIM_Base_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002e9e:	f000 f8e9 	bl	8003074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ea6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	4619      	mov	r1, r3
 8002eae:	480d      	ldr	r0, [pc, #52]	@ (8002ee4 <MX_TIM2_Init+0x94>)
 8002eb0:	f005 fabe 	bl	8008430 <HAL_TIM_ConfigClockSource>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002eba:	f000 f8db 	bl	8003074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ec6:	463b      	mov	r3, r7
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4806      	ldr	r0, [pc, #24]	@ (8002ee4 <MX_TIM2_Init+0x94>)
 8002ecc:	f005 fcbe 	bl	800884c <HAL_TIMEx_MasterConfigSynchronization>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002ed6:	f000 f8cd 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002eda:	bf00      	nop
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000029c 	.word	0x2000029c

08002ee8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002eec:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <MX_USART1_UART_Init+0x4c>)
 8002eee:	4a12      	ldr	r2, [pc, #72]	@ (8002f38 <MX_USART1_UART_Init+0x50>)
 8002ef0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ef2:	4b10      	ldr	r3, [pc, #64]	@ (8002f34 <MX_USART1_UART_Init+0x4c>)
 8002ef4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ef8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002efa:	4b0e      	ldr	r3, [pc, #56]	@ (8002f34 <MX_USART1_UART_Init+0x4c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f00:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <MX_USART1_UART_Init+0x4c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f06:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <MX_USART1_UART_Init+0x4c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f0c:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <MX_USART1_UART_Init+0x4c>)
 8002f0e:	220c      	movs	r2, #12
 8002f10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f12:	4b08      	ldr	r3, [pc, #32]	@ (8002f34 <MX_USART1_UART_Init+0x4c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f18:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <MX_USART1_UART_Init+0x4c>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f1e:	4805      	ldr	r0, [pc, #20]	@ (8002f34 <MX_USART1_UART_Init+0x4c>)
 8002f20:	f005 fd10 	bl	8008944 <HAL_UART_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f2a:	f000 f8a3 	bl	8003074 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	200002e4 	.word	0x200002e4
 8002f38:	40011000 	.word	0x40011000

08002f3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb4 <MX_DMA_Init+0x78>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb4 <MX_DMA_Init+0x78>)
 8002f4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f52:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <MX_DMA_Init+0x78>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <MX_DMA_Init+0x78>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	4a13      	ldr	r2, [pc, #76]	@ (8002fb4 <MX_DMA_Init+0x78>)
 8002f68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6e:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <MX_DMA_Init+0x78>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	2010      	movs	r0, #16
 8002f80:	f001 fba7 	bl	80046d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f84:	2010      	movs	r0, #16
 8002f86:	f001 fbc0 	bl	800470a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	2038      	movs	r0, #56	@ 0x38
 8002f90:	f001 fb9f 	bl	80046d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002f94:	2038      	movs	r0, #56	@ 0x38
 8002f96:	f001 fbb8 	bl	800470a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	203b      	movs	r0, #59	@ 0x3b
 8002fa0:	f001 fb97 	bl	80046d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002fa4:	203b      	movs	r0, #59	@ 0x3b
 8002fa6:	f001 fbb0 	bl	800470a <HAL_NVIC_EnableIRQ>

}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	@ 0x28
 8002fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	4b26      	ldr	r3, [pc, #152]	@ (800306c <MX_GPIO_Init+0xb4>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	4a25      	ldr	r2, [pc, #148]	@ (800306c <MX_GPIO_Init+0xb4>)
 8002fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fde:	4b23      	ldr	r3, [pc, #140]	@ (800306c <MX_GPIO_Init+0xb4>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b1f      	ldr	r3, [pc, #124]	@ (800306c <MX_GPIO_Init+0xb4>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800306c <MX_GPIO_Init+0xb4>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800306c <MX_GPIO_Init+0xb4>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	4b18      	ldr	r3, [pc, #96]	@ (800306c <MX_GPIO_Init+0xb4>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	4a17      	ldr	r2, [pc, #92]	@ (800306c <MX_GPIO_Init+0xb4>)
 8003010:	f043 0304 	orr.w	r3, r3, #4
 8003014:	6313      	str	r3, [r2, #48]	@ 0x30
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <MX_GPIO_Init+0xb4>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	4b11      	ldr	r3, [pc, #68]	@ (800306c <MX_GPIO_Init+0xb4>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	4a10      	ldr	r2, [pc, #64]	@ (800306c <MX_GPIO_Init+0xb4>)
 800302c:	f043 0308 	orr.w	r3, r3, #8
 8003030:	6313      	str	r3, [r2, #48]	@ 0x30
 8003032:	4b0e      	ldr	r3, [pc, #56]	@ (800306c <MX_GPIO_Init+0xb4>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800303e:	2200      	movs	r2, #0
 8003040:	2158      	movs	r1, #88	@ 0x58
 8003042:	480b      	ldr	r0, [pc, #44]	@ (8003070 <MX_GPIO_Init+0xb8>)
 8003044:	f002 fb42 	bl	80056cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8003048:	2358      	movs	r3, #88	@ 0x58
 800304a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800304c:	2301      	movs	r3, #1
 800304e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003054:	2300      	movs	r3, #0
 8003056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4619      	mov	r1, r3
 800305e:	4804      	ldr	r0, [pc, #16]	@ (8003070 <MX_GPIO_Init+0xb8>)
 8003060:	f002 f998 	bl	8005394 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003064:	bf00      	nop
 8003066:	3728      	adds	r7, #40	@ 0x28
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	40020c00 	.word	0x40020c00

08003074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003078:	b672      	cpsid	i
}
 800307a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <Error_Handler+0x8>

08003080 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 8003084:	2201      	movs	r2, #1
 8003086:	4903      	ldr	r1, [pc, #12]	@ (8003094 <init_cardSD+0x14>)
 8003088:	4803      	ldr	r0, [pc, #12]	@ (8003098 <init_cardSD+0x18>)
 800308a:	f008 ffe1 	bl	800c050 <f_mount>

}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	0800d794 	.word	0x0800d794
 8003098:	20000334 	.word	0x20000334

0800309c <string_to_int>:
}



inline static uint16_t string_to_int(char *string)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 80030a8:	e015      	b.n	80030d6 <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80030b0:	d90e      	bls.n	80030d0 <string_to_int+0x34>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b39      	cmp	r3, #57	@ 0x39
 80030b8:	d80a      	bhi.n	80030d0 <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	3b30      	subs	r3, #48	@ 0x30
 80030ce:	60fb      	str	r3, [r7, #12]
		}

		string++;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3301      	adds	r3, #1
 80030d4:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b0a      	cmp	r3, #10
 80030dc:	d1e5      	bne.n	80030aa <string_to_int+0xe>
	}

	return number;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	b29b      	uxth	r3, r3
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <assign_filePath>:

}


char* assign_filePath(const char *filePathName)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
	 * Output: adresa char* catre calea
	 * ! alocat dinamic
	 */

	char *string;
	uint8_t i = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]


	while(filePathName[i] != '\0')
 80030fa:	e002      	b.n	8003102 <assign_filePath+0x14>
	{
		i++;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	3301      	adds	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
	while(filePathName[i] != '\0')
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4413      	add	r3, r2
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f6      	bne.n	80030fc <assign_filePath+0xe>
	}

	i++;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	3301      	adds	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]

	string = (char*)malloc(sizeof(char)*i);
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	4618      	mov	r0, r3
 8003118:	f00a f900 	bl	800d31c <malloc>
 800311c:	4603      	mov	r3, r0
 800311e:	60bb      	str	r3, [r7, #8]
	memcpy(string, filePathName, i);
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	461a      	mov	r2, r3
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	68b8      	ldr	r0, [r7, #8]
 8003128:	f00a fa40 	bl	800d5ac <memcpy>

	return string;
 800312c:	68bb      	ldr	r3, [r7, #8]


}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <read_audio_file>:




void read_audio_file(char *filePathName, uint32_t *buffer, bool *flagAudioDone)
{
 8003138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800313c:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 8003140:	af00      	add	r7, sp, #0
 8003142:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003146:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800314a:	6018      	str	r0, [r3, #0]
 800314c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003150:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003154:	6019      	str	r1, [r3, #0]
 8003156:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800315a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	466b      	mov	r3, sp
 8003162:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8003164:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003168:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800316c:	f107 0020 	add.w	r0, r7, #32
 8003170:	2201      	movs	r2, #1
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	f008 ffb2 	bl	800c0dc <f_open>
 8003178:	4603      	mov	r3, r0
 800317a:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	if(res != FR_OK)
 800317e:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 8101 	bne.w	800338a <read_audio_file+0x252>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8003188:	4b83      	ldr	r3, [pc, #524]	@ (8003398 <read_audio_file+0x260>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	f107 0320 	add.w	r3, r7, #32
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f009 fcb8 	bl	800cb08 <f_lseek>


	if(flagNewAudioFile == 1)
 8003198:	4b80      	ldr	r3, [pc, #512]	@ (800339c <read_audio_file+0x264>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d017      	beq.n	80031d0 <read_audio_file+0x98>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 80031a0:	4b7e      	ldr	r3, [pc, #504]	@ (800339c <read_audio_file+0x264>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 80031a6:	4b7e      	ldr	r3, [pc, #504]	@ (80033a0 <read_audio_file+0x268>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 80031ac:	4b7a      	ldr	r3, [pc, #488]	@ (8003398 <read_audio_file+0x260>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 80031b2:	4b79      	ldr	r3, [pc, #484]	@ (8003398 <read_audio_file+0x260>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	f107 0320 	add.w	r3, r7, #32
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f009 fca3 	bl	800cb08 <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 80031c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80031c6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a75      	ldr	r2, [pc, #468]	@ (80033a4 <read_audio_file+0x26c>)
 80031ce:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 80031d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80031d4:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
	unsigned int nrFrames = fileSize / n;
 80031d8:	4b72      	ldr	r3, [pc, #456]	@ (80033a4 <read_audio_file+0x26c>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

	if(fileSize%n != 0)
 80031e8:	4b6e      	ldr	r3, [pc, #440]	@ (80033a4 <read_audio_file+0x26c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80031f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80031f4:	fb01 f202 	mul.w	r2, r1, r2
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <read_audio_file+0xd0>
	{
		nrFrames++;
 80031fe:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8003202:	3301      	adds	r3, #1
 8003204:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
	}

	uint8_t index = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	char tempBuffer[n];
 800320e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003212:	3b01      	subs	r3, #1
 8003214:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8003218:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800321c:	2200      	movs	r2, #0
 800321e:	4698      	mov	r8, r3
 8003220:	4691      	mov	r9, r2
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800322e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003236:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800323a:	2200      	movs	r2, #0
 800323c:	461c      	mov	r4, r3
 800323e:	4615      	mov	r5, r2
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	00eb      	lsls	r3, r5, #3
 800324a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324e:	00e2      	lsls	r2, r4, #3
 8003250:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003254:	3307      	adds	r3, #7
 8003256:	08db      	lsrs	r3, r3, #3
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	ebad 0d03 	sub.w	sp, sp, r3
 800325e:	466b      	mov	r3, sp
 8003260:	3300      	adds	r3, #0
 8003262:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 8003266:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800326a:	1e5a      	subs	r2, r3, #1
 800326c:	f107 031c 	add.w	r3, r7, #28
 8003270:	f107 0020 	add.w	r0, r7, #32
 8003274:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8003278:	f009 f8ea 	bl	800c450 <f_read>
	tempBuffer[byteRead] = '\n';
 800327c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003280:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 800328a:	210a      	movs	r1, #10
 800328c:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 800328e:	2300      	movs	r3, #0
 8003290:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 8003294:	e040      	b.n	8003318 <read_audio_file+0x1e0>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 8003296:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 800329a:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 800329e:	5cd3      	ldrb	r3, [r2, r3]
 80032a0:	2b0a      	cmp	r3, #10
 80032a2:	d011      	beq.n	80032c8 <read_audio_file+0x190>
		{
			nrCharBuffer[index] = tempBuffer[i];
 80032a4:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 80032a8:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 80032ac:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 80032b0:	5c89      	ldrb	r1, [r1, r2]
 80032b2:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80032b6:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80032ba:	54d1      	strb	r1, [r2, r3]
			index++;
 80032bc:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 80032c0:	3301      	adds	r3, #1
 80032c2:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
 80032c6:	e022      	b.n	800330e <read_audio_file+0x1d6>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 80032c8:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 80032cc:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80032d0:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80032d4:	210a      	movs	r1, #10
 80032d6:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fedd 	bl	800309c <string_to_int>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80032ea:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	601a      	str	r2, [r3, #0]
			buffer++;
 80032f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80032f6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80032fa:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80032fe:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	3204      	adds	r2, #4
 8003306:	601a      	str	r2, [r3, #0]

			index = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	for(uint16_t i=0; i< byteRead; i++)
 800330e:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 8003312:	3301      	adds	r3, #1
 8003314:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 8003318:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 800331c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003320:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d3b5      	bcc.n	8003296 <read_audio_file+0x15e>


	}


	if(currentFrame == nrFrames)
 800332a:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <read_audio_file+0x268>)
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8003334:	4293      	cmp	r3, r2
 8003336:	d10f      	bne.n	8003358 <read_audio_file+0x220>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 8003338:	4b18      	ldr	r3, [pc, #96]	@ (800339c <read_audio_file+0x264>)
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
		*flagAudioDone = 1;
 800333e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003342:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]

		f_close(&file);
 800334c:	f107 0320 	add.w	r3, r7, #32
 8003350:	4618      	mov	r0, r3
 8003352:	f009 fbaf 	bl	800cab4 <f_close>
		return;
 8003356:	e018      	b.n	800338a <read_audio_file+0x252>
	}

	currentFrame++;
 8003358:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <read_audio_file+0x268>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <read_audio_file+0x268>)
 8003362:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 8003364:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003368:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <read_audio_file+0x260>)
 8003370:	6013      	str	r3, [r2, #0]
	currentPosition++;
 8003372:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <read_audio_file+0x260>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	4a07      	ldr	r2, [pc, #28]	@ (8003398 <read_audio_file+0x260>)
 800337a:	6013      	str	r3, [r2, #0]

	f_close(&file);
 800337c:	f107 0320 	add.w	r3, r7, #32
 8003380:	4618      	mov	r0, r3
 8003382:	f009 fb97 	bl	800cab4 <f_close>
 8003386:	46b5      	mov	sp, r6
 8003388:	e000      	b.n	800338c <read_audio_file+0x254>
		return;
 800338a:	46b5      	mov	sp, r6


}
 800338c:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 8003390:	46bd      	mov	sp, r7
 8003392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003396:	bf00      	nop
 8003398:	20000564 	.word	0x20000564
 800339c:	20000008 	.word	0x20000008
 80033a0:	20000568 	.word	0x20000568
 80033a4:	2000056c 	.word	0x2000056c

080033a8 <read_image_file>:


void read_image_file(char *filePathName, ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 80033a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033ac:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	f507 7616 	add.w	r6, r7, #600	@ 0x258
 80033b6:	f5a6 7613 	sub.w	r6, r6, #588	@ 0x24c
 80033ba:	6030      	str	r0, [r6, #0]
 80033bc:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 80033c0:	f5a0 7014 	sub.w	r0, r0, #592	@ 0x250
 80033c4:	6001      	str	r1, [r0, #0]
 80033c6:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 80033ca:	f5a1 7115 	sub.w	r1, r1, #596	@ 0x254
 80033ce:	600a      	str	r2, [r1, #0]
 80033d0:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 80033d4:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	466b      	mov	r3, sp
 80033dc:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 80033de:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80033e2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80033e6:	f107 001c 	add.w	r0, r7, #28
 80033ea:	2201      	movs	r2, #1
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	f008 fe75 	bl	800c0dc <f_open>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 80033f8:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 81b0 	bne.w	8003762 <read_image_file+0x3ba>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 8003402:	4ba9      	ldr	r3, [pc, #676]	@ (80036a8 <read_image_file+0x300>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80d6 	beq.w	80035b8 <read_image_file+0x210>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 800340c:	4ba7      	ldr	r3, [pc, #668]	@ (80036ac <read_image_file+0x304>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8003412:	4ba6      	ldr	r3, [pc, #664]	@ (80036ac <read_image_file+0x304>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	f107 031c 	add.w	r3, r7, #28
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f009 fb73 	bl	800cb08 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8003422:	f107 0318 	add.w	r3, r7, #24
 8003426:	f107 0114 	add.w	r1, r7, #20
 800342a:	f107 001c 	add.w	r0, r7, #28
 800342e:	2204      	movs	r2, #4
 8003430:	f009 f80e 	bl	800c450 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8003434:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003438:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2200      	movs	r2, #0
 8003440:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8003442:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003446:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2200      	movs	r2, #0
 800344e:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8003450:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003454:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800345e:	461a      	mov	r2, r3
 8003460:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003464:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003468:	785b      	ldrb	r3, [r3, #1]
 800346a:	4313      	orrs	r3, r2
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	b21a      	sxth	r2, r3
 8003470:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003474:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800347e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003482:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b21b      	sxth	r3, r3
 800348a:	430b      	orrs	r3, r1
 800348c:	b21b      	sxth	r3, r3
 800348e:	4313      	orrs	r3, r2
 8003490:	b21a      	sxth	r2, r3
 8003492:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003496:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 800349e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80034a2:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034ac:	461a      	mov	r2, r3
 80034ae:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80034b2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80034b6:	78db      	ldrb	r3, [r3, #3]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	b21a      	sxth	r2, r3
 80034be:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80034c2:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80034cc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80034d0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80034d4:	789b      	ldrb	r3, [r3, #2]
 80034d6:	b21b      	sxth	r3, r3
 80034d8:	430b      	orrs	r3, r1
 80034da:	b21b      	sxth	r3, r3
 80034dc:	4313      	orrs	r3, r2
 80034de:	b21a      	sxth	r2, r3
 80034e0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80034e4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 80034ec:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80034f0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003500:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003512:	da1f      	bge.n	8003554 <read_image_file+0x1ac>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8003514:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003518:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003522:	461a      	mov	r2, r3
 8003524:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003528:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003532:	fb03 f202 	mul.w	r2, r3, r2
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f009 feed 	bl	800d31c <malloc>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800354a:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	e00b      	b.n	800356c <read_image_file+0x1c4>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->data = malloc(sizeof(char)*3072);
 8003554:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003558:	f009 fee0 	bl	800d31c <malloc>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003564:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 800356c:	4b4e      	ldr	r3, [pc, #312]	@ (80036a8 <read_image_file+0x300>)
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8003572:	4b4f      	ldr	r3, [pc, #316]	@ (80036b0 <read_image_file+0x308>)
 8003574:	2200      	movs	r2, #0
 8003576:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8003578:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800357c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a4a      	ldr	r2, [pc, #296]	@ (80036ac <read_image_file+0x304>)
 8003584:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8003586:	4b49      	ldr	r3, [pc, #292]	@ (80036ac <read_image_file+0x304>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	f107 031c 	add.w	r3, r7, #28
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f009 fab9 	bl	800cb08 <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8003596:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800359a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	3b04      	subs	r3, #4
 80035a2:	4a44      	ldr	r2, [pc, #272]	@ (80036b4 <read_image_file+0x30c>)
 80035a4:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 80035a6:	4b43      	ldr	r3, [pc, #268]	@ (80036b4 <read_image_file+0x30c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a43      	ldr	r2, [pc, #268]	@ (80036b8 <read_image_file+0x310>)
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80035b2:	4a42      	ldr	r2, [pc, #264]	@ (80036bc <read_image_file+0x314>)
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e007      	b.n	80035c8 <read_image_file+0x220>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 80035b8:	4b3c      	ldr	r3, [pc, #240]	@ (80036ac <read_image_file+0x304>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	f107 031c 	add.w	r3, r7, #28
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f009 faa0 	bl	800cb08 <f_lseek>
	}



	if(fileSize == n)
 80035c8:	4b3a      	ldr	r3, [pc, #232]	@ (80036b4 <read_image_file+0x30c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3a      	ldr	r2, [pc, #232]	@ (80036b8 <read_image_file+0x310>)
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d104      	bne.n	80035de <read_image_file+0x236>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 80035d4:	4b39      	ldr	r3, [pc, #228]	@ (80036bc <read_image_file+0x314>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3b01      	subs	r3, #1
 80035da:	4a38      	ldr	r2, [pc, #224]	@ (80036bc <read_image_file+0x314>)
 80035dc:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 80035de:	4b35      	ldr	r3, [pc, #212]	@ (80036b4 <read_image_file+0x30c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a35      	ldr	r2, [pc, #212]	@ (80036b8 <read_image_file+0x310>)
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80035ea:	fb01 f202 	mul.w	r2, r1, r2
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <read_image_file+0x25e>
 80035f4:	4b31      	ldr	r3, [pc, #196]	@ (80036bc <read_image_file+0x314>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <read_image_file+0x25e>
	{
		nrFrames++;
 80035fc:	4b2f      	ldr	r3, [pc, #188]	@ (80036bc <read_image_file+0x314>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	4a2e      	ldr	r2, [pc, #184]	@ (80036bc <read_image_file+0x314>)
 8003604:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 8003606:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800360a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 8003614:	4b28      	ldr	r3, [pc, #160]	@ (80036b8 <read_image_file+0x310>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3b01      	subs	r3, #1
 800361a:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 800361e:	4b26      	ldr	r3, [pc, #152]	@ (80036b8 <read_image_file+0x310>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	2300      	movs	r3, #0
 8003626:	4690      	mov	r8, r2
 8003628:	4699      	mov	r9, r3
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800363a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800363e:	4b1e      	ldr	r3, [pc, #120]	@ (80036b8 <read_image_file+0x310>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	2300      	movs	r3, #0
 8003646:	4614      	mov	r4, r2
 8003648:	461d      	mov	r5, r3
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	00eb      	lsls	r3, r5, #3
 8003654:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003658:	00e2      	lsls	r2, r4, #3
 800365a:	4b17      	ldr	r3, [pc, #92]	@ (80036b8 <read_image_file+0x310>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3307      	adds	r3, #7
 8003660:	08db      	lsrs	r3, r3, #3
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	ebad 0d03 	sub.w	sp, sp, r3
 8003668:	466b      	mov	r3, sp
 800366a:	3300      	adds	r3, #0
 800366c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 8003670:	4b11      	ldr	r3, [pc, #68]	@ (80036b8 <read_image_file+0x310>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	f107 0318 	add.w	r3, r7, #24
 800367a:	f107 001c 	add.w	r0, r7, #28
 800367e:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8003682:	f008 fee5 	bl	800c450 <f_read>
	(*indexFlag) = byteRead;
 8003686:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800368a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b29a      	uxth	r2, r3
 8003692:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003696:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 80036a4:	e020      	b.n	80036e8 <read_image_file+0x340>
 80036a6:	bf00      	nop
 80036a8:	20000009 	.word	0x20000009
 80036ac:	20000570 	.word	0x20000570
 80036b0:	20000574 	.word	0x20000574
 80036b4:	20000578 	.word	0x20000578
 80036b8:	0800e538 	.word	0x0800e538
 80036bc:	2000057c 	.word	0x2000057c
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->data[i] = tempBuffer[i];
 80036c0:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 80036c4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80036c8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68d9      	ldr	r1, [r3, #12]
 80036d0:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 80036d4:	440b      	add	r3, r1
 80036d6:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 80036da:	5c8a      	ldrb	r2, [r1, r2]
 80036dc:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 80036de:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 80036e2:	3301      	adds	r3, #1
 80036e4:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 80036e8:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 80036ec:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80036f0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3e2      	bcc.n	80036c0 <read_image_file+0x318>

	}


	currentFrame++;
 80036fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <read_image_file+0x3c8>)
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <read_image_file+0x3c8>)
 8003704:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 8003706:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <read_image_file+0x3c8>)
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <read_image_file+0x3cc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d208      	bcs.n	8003726 <read_image_file+0x37e>
 8003714:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003718:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003724:	d20f      	bcs.n	8003746 <read_image_file+0x39e>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 8003726:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800372a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 8003734:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <read_image_file+0x3d0>)
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 800373a:	f107 031c 	add.w	r3, r7, #28
 800373e:	4618      	mov	r0, r3
 8003740:	f009 f9b8 	bl	800cab4 <f_close>
		return;
 8003744:	e00d      	b.n	8003762 <read_image_file+0x3ba>
	}


	currentPosition = f_tell(&file);
 8003746:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800374a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4a0a      	ldr	r2, [pc, #40]	@ (800377c <read_image_file+0x3d4>)
 8003752:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8003754:	f107 031c 	add.w	r3, r7, #28
 8003758:	4618      	mov	r0, r3
 800375a:	f009 f9ab 	bl	800cab4 <f_close>
 800375e:	46b5      	mov	sp, r6
 8003760:	e000      	b.n	8003764 <read_image_file+0x3bc>
		return;
 8003762:	46b5      	mov	sp, r6


}
 8003764:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8003768:	46bd      	mov	sp, r7
 800376a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800376e:	bf00      	nop
 8003770:	20000574 	.word	0x20000574
 8003774:	2000057c 	.word	0x2000057c
 8003778:	20000009 	.word	0x20000009
 800377c:	20000570 	.word	0x20000570

08003780 <frame_number_x>:



static uint16_t frame_number_x(ENTITY *entity, const float factor)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	ed87 0a02 	vstr	s0, [r7, #8]

	uint8_t x = 1;
 800378c:	2301      	movs	r3, #1
 800378e:	75fb      	strb	r3, [r7, #23]

	if(factor > 1)
 8003790:	edd7 7a02 	vldr	s15, [r7, #8]
 8003794:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800379c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a0:	dd33      	ble.n	800380a <frame_number_x+0x8a>
	{
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 80037a2:	e00b      	b.n	80037bc <frame_number_x+0x3c>
		{
			if(x == entity->y1)
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d102      	bne.n	80037b6 <frame_number_x+0x36>
			{
				return x;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	e05f      	b.n	8003876 <frame_number_x+0xf6>
			}

			x++;
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
 80037b8:	3301      	adds	r3, #1
 80037ba:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037da:	7dfb      	ldrb	r3, [r7, #23]
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003884 <frame_number_x+0x104>
 80037ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	d9d6      	bls.n	80037a4 <frame_number_x+0x24>
		}


		if(x==1)
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <frame_number_x+0x80>
		{
			return 1;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e03a      	b.n	8003876 <frame_number_x+0xf6>
		}

		else
		{
			return (x-1);
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29b      	uxth	r3, r3
 8003808:	e035      	b.n	8003876 <frame_number_x+0xf6>
	}


	else
	{
		x = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	75fb      	strb	r3, [r7, #23]

		while((((int)(entity->x1)*x) <= (32*32)))
 800380e:	e016      	b.n	800383e <frame_number_x+0xbe>
		{
			if(x == entity->y1)
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003818:	4293      	cmp	r3, r2
 800381a:	d102      	bne.n	8003822 <frame_number_x+0xa2>
			{
				return x;
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	b29b      	uxth	r3, r3
 8003820:	e029      	b.n	8003876 <frame_number_x+0xf6>
			}

			x = x + (int)(1/factor);
 8003822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003826:	ed97 7a02 	vldr	s14, [r7, #8]
 800382a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003832:	edc7 7a01 	vstr	s15, [r7, #4]
 8003836:	793a      	ldrb	r2, [r7, #4]
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	4413      	add	r3, r2
 800383c:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*x) <= (32*32)))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003844:	461a      	mov	r2, r3
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003850:	ddde      	ble.n	8003810 <frame_number_x+0x90>
		}


		return (x-(1/factor));
 8003852:	7dfb      	ldrb	r3, [r7, #23]
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800385c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003860:	edd7 6a02 	vldr	s13, [r7, #8]
 8003864:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800386c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003870:	ee17 3a90 	vmov	r3, s15
 8003874:	b29b      	uxth	r3, r3

	}


}
 8003876:	4618      	mov	r0, r3
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	44800000 	.word	0x44800000

08003888 <read_image_file_scaling>:



void read_image_file_scaling(char *filePathName, ENTITY *entity, const float factor, uint16_t *px, bool *flagTerm)
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 800388e:	af00      	add	r7, sp, #0
 8003890:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8003894:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003898:	6020      	str	r0, [r4, #0]
 800389a:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 800389e:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 80038a2:	6001      	str	r1, [r0, #0]
 80038a4:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 80038a8:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80038ac:	ed81 0a00 	vstr	s0, [r1]
 80038b0:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 80038b4:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 80038b8:	600a      	str	r2, [r1, #0]
 80038ba:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 80038be:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80038c2:	6013      	str	r3, [r2, #0]

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 80038c4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80038c8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80038cc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80038d0:	2201      	movs	r2, #1
 80038d2:	6819      	ldr	r1, [r3, #0]
 80038d4:	f008 fc02 	bl	800c0dc <f_open>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 80038de:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f040 81be 	bne.w	8003c64 <read_image_file_scaling+0x3dc>
	static FSIZE_t currentPosition = 0;

	static uint16_t x = 0; /*Numarul de linii din M1 ai sa avem sub 32x32 pixeli de prelucrat in M2*/
	static unsigned int nrFrames = 0;

	if(flagNewImageFile == 1)
 80038e8:	4ba9      	ldr	r3, [pc, #676]	@ (8003b90 <read_image_file_scaling+0x308>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8112 	beq.w	8003b16 <read_image_file_scaling+0x28e>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 80038f2:	4ba8      	ldr	r3, [pc, #672]	@ (8003b94 <read_image_file_scaling+0x30c>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 80038f8:	4ba6      	ldr	r3, [pc, #664]	@ (8003b94 <read_image_file_scaling+0x30c>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f009 f900 	bl	800cb08 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8003908:	f107 0320 	add.w	r3, r7, #32
 800390c:	f107 011c 	add.w	r1, r7, #28
 8003910:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003914:	2204      	movs	r2, #4
 8003916:	f008 fd9b 	bl	800c450 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 800391a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800391e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2200      	movs	r2, #0
 8003926:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8003928:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800392c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8003936:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800393a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003944:	461a      	mov	r2, r3
 8003946:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800394a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800394e:	785b      	ldrb	r3, [r3, #1]
 8003950:	4313      	orrs	r3, r2
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	b21a      	sxth	r2, r3
 8003956:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800395a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8003964:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003968:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b21b      	sxth	r3, r3
 8003970:	430b      	orrs	r3, r1
 8003972:	b21b      	sxth	r3, r3
 8003974:	4313      	orrs	r3, r2
 8003976:	b21a      	sxth	r2, r3
 8003978:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800397c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8003984:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003988:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003992:	461a      	mov	r2, r3
 8003994:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003998:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800399c:	78db      	ldrb	r3, [r3, #3]
 800399e:	4313      	orrs	r3, r2
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	b21a      	sxth	r2, r3
 80039a4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80039a8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80039b2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80039b6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80039ba:	789b      	ldrb	r3, [r3, #2]
 80039bc:	b21b      	sxth	r3, r3
 80039be:	430b      	orrs	r3, r1
 80039c0:	b21b      	sxth	r3, r3
 80039c2:	4313      	orrs	r3, r2
 80039c4:	b21a      	sxth	r2, r3
 80039c6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80039ca:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	811a      	strh	r2, [r3, #8]


		flagNewImageFile = 0;
 80039d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003b90 <read_image_file_scaling+0x308>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 80039d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003b98 <read_image_file_scaling+0x310>)
 80039da:	2200      	movs	r2, #0
 80039dc:	801a      	strh	r2, [r3, #0]
		flagOneFrame = 0;
 80039de:	4b6f      	ldr	r3, [pc, #444]	@ (8003b9c <read_image_file_scaling+0x314>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]

		currentPosition = byteRead;
 80039e4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80039e8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a69      	ldr	r2, [pc, #420]	@ (8003b94 <read_image_file_scaling+0x30c>)
 80039f0:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 80039f2:	4b68      	ldr	r3, [pc, #416]	@ (8003b94 <read_image_file_scaling+0x30c>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f009 f883 	bl	800cb08 <f_lseek>


		x = frame_number_x(entity, factor); /*numarul de linii cuprins in fiecare frame al matricei M1*/
 8003a02:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a06:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 8003a0a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a0e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003a12:	ed92 0a00 	vldr	s0, [r2]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	f7ff feb2 	bl	8003780 <frame_number_x>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	461a      	mov	r2, r3
 8003a20:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba0 <read_image_file_scaling+0x318>)
 8003a22:	801a      	strh	r2, [r3, #0]
		*px = x;
 8003a24:	4b5e      	ldr	r3, [pc, #376]	@ (8003ba0 <read_image_file_scaling+0x318>)
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a2c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	801a      	strh	r2, [r3, #0]

		if(x == entity->y1)
 8003a34:	4b5a      	ldr	r3, [pc, #360]	@ (8003ba0 <read_image_file_scaling+0x318>)
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a3e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d125      	bne.n	8003a98 <read_image_file_scaling+0x210>
		{
			flagOneFrame = 1;
 8003a4c:	4b53      	ldr	r3, [pc, #332]	@ (8003b9c <read_image_file_scaling+0x314>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
			nrFrames = 1; /*Avem o imagine care scalata are mai putini de 32x32 pixeli*/
 8003a52:	4b54      	ldr	r3, [pc, #336]	@ (8003ba4 <read_image_file_scaling+0x31c>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8003a58:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a5c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a6c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a76:	fb03 f202 	mul.w	r2, r3, r2
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f009 fc4b 	bl	800d31c <malloc>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a8e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	e046      	b.n	8003b26 <read_image_file_scaling+0x29e>

		}

		else
		{
			entity->data = malloc(3*sizeof(char)*(entity->x1)*x);
 8003a98:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a9c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba0 <read_image_file_scaling+0x318>)
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	fb03 f202 	mul.w	r2, r3, r2
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f009 fc30 	bl	800d31c <malloc>
 8003abc:	4603      	mov	r3, r0
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003ac4:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60da      	str	r2, [r3, #12]

			nrFrames = (entity->y1) / x;
 8003acc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003ad0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ada:	461a      	mov	r2, r3
 8003adc:	4b30      	ldr	r3, [pc, #192]	@ (8003ba0 <read_image_file_scaling+0x318>)
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba4 <read_image_file_scaling+0x31c>)
 8003ae8:	601a      	str	r2, [r3, #0]

			if((entity->y1) % x != 0)
 8003aea:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003aee:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003af8:	4a29      	ldr	r2, [pc, #164]	@ (8003ba0 <read_image_file_scaling+0x318>)
 8003afa:	8812      	ldrh	r2, [r2, #0]
 8003afc:	fb93 f1f2 	sdiv	r1, r3, r2
 8003b00:	fb01 f202 	mul.w	r2, r1, r2
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00d      	beq.n	8003b26 <read_image_file_scaling+0x29e>
			{
				nrFrames++;
 8003b0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ba4 <read_image_file_scaling+0x31c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	4a24      	ldr	r2, [pc, #144]	@ (8003ba4 <read_image_file_scaling+0x31c>)
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	e007      	b.n	8003b26 <read_image_file_scaling+0x29e>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8003b16:	4b1f      	ldr	r3, [pc, #124]	@ (8003b94 <read_image_file_scaling+0x30c>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f008 fff1 	bl	800cb08 <f_lseek>
	}


	/*Vom pune in entity->data primele valori*/

	if(flagOneFrame == 1)
 8003b26:	4b1d      	ldr	r3, [pc, #116]	@ (8003b9c <read_image_file_scaling+0x314>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d03c      	beq.n	8003ba8 <read_image_file_scaling+0x320>
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*(entity->y1)), &byteRead);
 8003b2e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b32:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68d9      	ldr	r1, [r3, #12]
 8003b3a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b3e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b4e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b58:	fb03 f202 	mul.w	r2, r3, r2
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	441a      	add	r2, r3
 8003b62:	f107 0320 	add.w	r3, r7, #32
 8003b66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003b6a:	f008 fc71 	bl	800c450 <f_read>

		*flagTerm = 1;
 8003b6e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b72:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
		flagNewImageFile = 1;
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <read_image_file_scaling+0x308>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8003b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b86:	4618      	mov	r0, r3
 8003b88:	f008 ff94 	bl	800cab4 <f_close>
		return;
 8003b8c:	e06b      	b.n	8003c66 <read_image_file_scaling+0x3de>
 8003b8e:	bf00      	nop
 8003b90:	2000000a 	.word	0x2000000a
 8003b94:	20000580 	.word	0x20000580
 8003b98:	20000584 	.word	0x20000584
 8003b9c:	20000586 	.word	0x20000586
 8003ba0:	20000588 	.word	0x20000588
 8003ba4:	2000058c 	.word	0x2000058c

	}

	else
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*x), &byteRead);
 8003ba8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bac:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68d9      	ldr	r1, [r3, #12]
 8003bb4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bb8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c70 <read_image_file_scaling+0x3e8>)
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	fb03 f202 	mul.w	r2, r3, r2
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	441a      	add	r2, r3
 8003bd2:	f107 0320 	add.w	r3, r7, #32
 8003bd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003bda:	f008 fc39 	bl	800c450 <f_read>

		currentFrame++;
 8003bde:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <read_image_file_scaling+0x3ec>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	4b23      	ldr	r3, [pc, #140]	@ (8003c74 <read_image_file_scaling+0x3ec>)
 8003be8:	801a      	strh	r2, [r3, #0]

		if((currentFrame >= nrFrames))
 8003bea:	4b22      	ldr	r3, [pc, #136]	@ (8003c74 <read_image_file_scaling+0x3ec>)
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b21      	ldr	r3, [pc, #132]	@ (8003c78 <read_image_file_scaling+0x3f0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d328      	bcc.n	8003c4a <read_image_file_scaling+0x3c2>
		{
			*px = (entity->y1) - x*(nrFrames-1); /*recalculam ultimul numar de linii de citit*/
 8003bf8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bfc:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <read_image_file_scaling+0x3f0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b299      	uxth	r1, r3
 8003c10:	4b17      	ldr	r3, [pc, #92]	@ (8003c70 <read_image_file_scaling+0x3e8>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	fb11 f303 	smulbb	r3, r1, r3
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c22:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	801a      	strh	r2, [r3, #0]
			*flagTerm = 1;
 8003c2a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c2e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
			flagNewImageFile = 1;
 8003c38:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <read_image_file_scaling+0x3f4>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
			f_close(&file);
 8003c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c42:	4618      	mov	r0, r3
 8003c44:	f008 ff36 	bl	800cab4 <f_close>
			return;
 8003c48:	e00d      	b.n	8003c66 <read_image_file_scaling+0x3de>
		}



		currentPosition = f_tell(&file);
 8003c4a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c4e:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	4a0a      	ldr	r2, [pc, #40]	@ (8003c80 <read_image_file_scaling+0x3f8>)
 8003c56:	6013      	str	r3, [r2, #0]
		f_close(&file);
 8003c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f008 ff29 	bl	800cab4 <f_close>
 8003c62:	e000      	b.n	8003c66 <read_image_file_scaling+0x3de>
		return;
 8003c64:	bf00      	nop

	}



}
 8003c66:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd90      	pop	{r4, r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000588 	.word	0x20000588
 8003c74:	20000584 	.word	0x20000584
 8003c78:	2000058c 	.word	0x2000058c
 8003c7c:	2000000a 	.word	0x2000000a
 8003c80:	20000580 	.word	0x20000580

08003c84 <write_image_file>:



void write_image_file(char *filePathName, uint8_t *data, size_t nrBytesData, int16_t x1, int16_t y1, bool flagTerm)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8003c90:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003c94:	6020      	str	r0, [r4, #0]
 8003c96:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8003c9a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8003c9e:	6001      	str	r1, [r0, #0]
 8003ca0:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003ca4:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8003ca8:	600a      	str	r2, [r1, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003cb0:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003cb4:	801a      	strh	r2, [r3, #0]


	static bool flagStart = 0;
	static FSIZE_t currentPosition = 0;

	if(flagStart == 0)
 8003cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8003de4 <write_image_file+0x160>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	f083 0301 	eor.w	r3, r3, #1
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d04b      	beq.n	8003d5c <write_image_file+0xd8>
	{

		res = f_open(&file, filePathName, FA_WRITE | FA_CREATE_ALWAYS);
 8003cc4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003cc8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003ccc:	f107 001c 	add.w	r0, r7, #28
 8003cd0:	220a      	movs	r2, #10
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	f008 fa02 	bl	800c0dc <f_open>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f


		if (res != FR_OK)
 8003cde:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d177      	bne.n	8003dd6 <write_image_file+0x152>
		{
		    return;
		}


		currentPosition = 0;
 8003ce6:	4b40      	ldr	r3, [pc, #256]	@ (8003de8 <write_image_file+0x164>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
		/*
		 * Scriem mai intai headerul anume
		 * dimensiunea imaginii asociate
		 */

		header[0] = (int8_t)(x1);
 8003cec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003cf0:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003cfc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003d00:	701a      	strb	r2, [r3, #0]
		header[1] = (int8_t)(x1>>8);
 8003d02:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003d06:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d0e:	121b      	asrs	r3, r3, #8
 8003d10:	b21b      	sxth	r3, r3
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003d18:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003d1c:	705a      	strb	r2, [r3, #1]
		header[2] = (int8_t)(y1);
 8003d1e:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003d28:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003d2c:	709a      	strb	r2, [r3, #2]
		header[3] = (int8_t)(y1>>8);
 8003d2e:	f9b7 3260 	ldrsh.w	r3, [r7, #608]	@ 0x260
 8003d32:	121b      	asrs	r3, r3, #8
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003d3c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003d40:	70da      	strb	r2, [r3, #3]

		f_write(&file, header, 4, &byteWr);
 8003d42:	f107 0318 	add.w	r3, r7, #24
 8003d46:	f107 0114 	add.w	r1, r7, #20
 8003d4a:	f107 001c 	add.w	r0, r7, #28
 8003d4e:	2204      	movs	r2, #4
 8003d50:	f008 fcbd 	bl	800c6ce <f_write>

		flagStart = 1;
 8003d54:	4b23      	ldr	r3, [pc, #140]	@ (8003de4 <write_image_file+0x160>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	e018      	b.n	8003d8e <write_image_file+0x10a>
	}


	else
	{
		res = f_open(&file, filePathName, FA_WRITE | FA_OPEN_ALWAYS);
 8003d5c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003d60:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003d64:	f107 001c 	add.w	r0, r7, #28
 8003d68:	2212      	movs	r2, #18
 8003d6a:	6819      	ldr	r1, [r3, #0]
 8003d6c:	f008 f9b6 	bl	800c0dc <f_open>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

		if (res != FR_OK)
 8003d76:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d12d      	bne.n	8003dda <write_image_file+0x156>
		{
		    return;
		}

		f_lseek(&file, currentPosition);
 8003d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003de8 <write_image_file+0x164>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	f107 031c 	add.w	r3, r7, #28
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f008 febd 	bl	800cb08 <f_lseek>

	}


	if(flagTerm == 1)
 8003d8e:	f897 3264 	ldrb.w	r3, [r7, #612]	@ 0x264
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <write_image_file+0x118>
	{
		flagStart = 0;
 8003d96:	4b13      	ldr	r3, [pc, #76]	@ (8003de4 <write_image_file+0x160>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]

	}


	f_write(&file, data, nrBytesData, &byteWr);
 8003d9c:	f107 0318 	add.w	r3, r7, #24
 8003da0:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8003da4:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8003da8:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003dac:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 8003db0:	f107 001c 	add.w	r0, r7, #28
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	6809      	ldr	r1, [r1, #0]
 8003db8:	f008 fc89 	bl	800c6ce <f_write>
	currentPosition = f_tell(&file);
 8003dbc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003dc0:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	4a08      	ldr	r2, [pc, #32]	@ (8003de8 <write_image_file+0x164>)
 8003dc8:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8003dca:	f107 031c 	add.w	r3, r7, #28
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f008 fe70 	bl	800cab4 <f_close>
 8003dd4:	e002      	b.n	8003ddc <write_image_file+0x158>
		    return;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <write_image_file+0x158>
		    return;
 8003dda:	bf00      	nop

}
 8003ddc:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd90      	pop	{r4, r7, pc}
 8003de4:	20000590 	.word	0x20000590
 8003de8:	20000594 	.word	0x20000594

08003dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	4b10      	ldr	r3, [pc, #64]	@ (8003e38 <HAL_MspInit+0x4c>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8003e38 <HAL_MspInit+0x4c>)
 8003dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e02:	4b0d      	ldr	r3, [pc, #52]	@ (8003e38 <HAL_MspInit+0x4c>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4b09      	ldr	r3, [pc, #36]	@ (8003e38 <HAL_MspInit+0x4c>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	4a08      	ldr	r2, [pc, #32]	@ (8003e38 <HAL_MspInit+0x4c>)
 8003e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e1e:	4b06      	ldr	r3, [pc, #24]	@ (8003e38 <HAL_MspInit+0x4c>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800

08003e3c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	@ 0x28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a30      	ldr	r2, [pc, #192]	@ (8003f1c <HAL_DAC_MspInit+0xe0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d159      	bne.n	8003f12 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	4b2f      	ldr	r3, [pc, #188]	@ (8003f20 <HAL_DAC_MspInit+0xe4>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	4a2e      	ldr	r2, [pc, #184]	@ (8003f20 <HAL_DAC_MspInit+0xe4>)
 8003e68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f20 <HAL_DAC_MspInit+0xe4>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b28      	ldr	r3, [pc, #160]	@ (8003f20 <HAL_DAC_MspInit+0xe4>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	4a27      	ldr	r2, [pc, #156]	@ (8003f20 <HAL_DAC_MspInit+0xe4>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8a:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_DAC_MspInit+0xe4>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e96:	2310      	movs	r3, #16
 8003e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea2:	f107 0314 	add.w	r3, r7, #20
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	481e      	ldr	r0, [pc, #120]	@ (8003f24 <HAL_DAC_MspInit+0xe8>)
 8003eaa:	f001 fa73 	bl	8005394 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8003eae:	4b1e      	ldr	r3, [pc, #120]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <HAL_DAC_MspInit+0xf0>)
 8003eb2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003eb6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8003eba:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003ebe:	2240      	movs	r2, #64	@ 0x40
 8003ec0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ec2:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003ec8:	4b17      	ldr	r3, [pc, #92]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ece:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ed0:	4b15      	ldr	r3, [pc, #84]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003ed2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ed6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ed8:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003eda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ede:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003ee0:	4b11      	ldr	r3, [pc, #68]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003ee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ee6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003eea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003eee:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003ef6:	480c      	ldr	r0, [pc, #48]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003ef8:	f000 fe4a 	bl	8004b90 <HAL_DMA_Init>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8003f02:	f7ff f8b7 	bl	8003074 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a07      	ldr	r2, [pc, #28]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	4a06      	ldr	r2, [pc, #24]	@ (8003f28 <HAL_DAC_MspInit+0xec>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003f12:	bf00      	nop
 8003f14:	3728      	adds	r7, #40	@ 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40007400 	.word	0x40007400
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40020000 	.word	0x40020000
 8003f28:	200000a0 	.word	0x200000a0
 8003f2c:	40026088 	.word	0x40026088

08003f30 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	@ 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a31      	ldr	r2, [pc, #196]	@ (8004014 <HAL_SD_MspInit+0xe4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d15b      	bne.n	800400a <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	4b30      	ldr	r3, [pc, #192]	@ (8004018 <HAL_SD_MspInit+0xe8>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5a:	4a2f      	ldr	r2, [pc, #188]	@ (8004018 <HAL_SD_MspInit+0xe8>)
 8003f5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f62:	4b2d      	ldr	r3, [pc, #180]	@ (8004018 <HAL_SD_MspInit+0xe8>)
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4b29      	ldr	r3, [pc, #164]	@ (8004018 <HAL_SD_MspInit+0xe8>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	4a28      	ldr	r2, [pc, #160]	@ (8004018 <HAL_SD_MspInit+0xe8>)
 8003f78:	f043 0304 	orr.w	r3, r3, #4
 8003f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f7e:	4b26      	ldr	r3, [pc, #152]	@ (8004018 <HAL_SD_MspInit+0xe8>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	4b22      	ldr	r3, [pc, #136]	@ (8004018 <HAL_SD_MspInit+0xe8>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	4a21      	ldr	r2, [pc, #132]	@ (8004018 <HAL_SD_MspInit+0xe8>)
 8003f94:	f043 0308 	orr.w	r3, r3, #8
 8003f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004018 <HAL_SD_MspInit+0xe8>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fac:	2302      	movs	r3, #2
 8003fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003fb8:	230c      	movs	r3, #12
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fbc:	f107 0314 	add.w	r3, r7, #20
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4816      	ldr	r0, [pc, #88]	@ (800401c <HAL_SD_MspInit+0xec>)
 8003fc4:	f001 f9e6 	bl	8005394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003fda:	230c      	movs	r3, #12
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fde:	f107 0314 	add.w	r3, r7, #20
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	480d      	ldr	r0, [pc, #52]	@ (800401c <HAL_SD_MspInit+0xec>)
 8003fe6:	f001 f9d5 	bl	8005394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fea:	2304      	movs	r3, #4
 8003fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ffe:	f107 0314 	add.w	r3, r7, #20
 8004002:	4619      	mov	r1, r3
 8004004:	4806      	ldr	r0, [pc, #24]	@ (8004020 <HAL_SD_MspInit+0xf0>)
 8004006:	f001 f9c5 	bl	8005394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800400a:	bf00      	nop
 800400c:	3728      	adds	r7, #40	@ 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40023800 	.word	0x40023800
 800401c:	40020800 	.word	0x40020800
 8004020:	40020c00 	.word	0x40020c00

08004024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	@ 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a47      	ldr	r2, [pc, #284]	@ (8004160 <HAL_SPI_MspInit+0x13c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	f040 8088 	bne.w	8004158 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	4b45      	ldr	r3, [pc, #276]	@ (8004164 <HAL_SPI_MspInit+0x140>)
 800404e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004050:	4a44      	ldr	r2, [pc, #272]	@ (8004164 <HAL_SPI_MspInit+0x140>)
 8004052:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004056:	6453      	str	r3, [r2, #68]	@ 0x44
 8004058:	4b42      	ldr	r3, [pc, #264]	@ (8004164 <HAL_SPI_MspInit+0x140>)
 800405a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	4b3e      	ldr	r3, [pc, #248]	@ (8004164 <HAL_SPI_MspInit+0x140>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	4a3d      	ldr	r2, [pc, #244]	@ (8004164 <HAL_SPI_MspInit+0x140>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6313      	str	r3, [r2, #48]	@ 0x30
 8004074:	4b3b      	ldr	r3, [pc, #236]	@ (8004164 <HAL_SPI_MspInit+0x140>)
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004080:	23e0      	movs	r3, #224	@ 0xe0
 8004082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004084:	2302      	movs	r3, #2
 8004086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408c:	2303      	movs	r3, #3
 800408e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004090:	2305      	movs	r3, #5
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004094:	f107 0314 	add.w	r3, r7, #20
 8004098:	4619      	mov	r1, r3
 800409a:	4833      	ldr	r0, [pc, #204]	@ (8004168 <HAL_SPI_MspInit+0x144>)
 800409c:	f001 f97a 	bl	8005394 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80040a0:	4b32      	ldr	r3, [pc, #200]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040a2:	4a33      	ldr	r2, [pc, #204]	@ (8004170 <HAL_SPI_MspInit+0x14c>)
 80040a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80040a6:	4b31      	ldr	r3, [pc, #196]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040a8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80040ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040ae:	4b2f      	ldr	r3, [pc, #188]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040b0:	2240      	movs	r2, #64	@ 0x40
 80040b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040b4:	4b2d      	ldr	r3, [pc, #180]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040ba:	4b2c      	ldr	r3, [pc, #176]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040c2:	4b2a      	ldr	r3, [pc, #168]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040c8:	4b28      	ldr	r3, [pc, #160]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80040ce:	4b27      	ldr	r3, [pc, #156]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040d4:	4b25      	ldr	r3, [pc, #148]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040da:	4b24      	ldr	r3, [pc, #144]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040dc:	2200      	movs	r2, #0
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80040e0:	4822      	ldr	r0, [pc, #136]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040e2:	f000 fd55 	bl	8004b90 <HAL_DMA_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80040ec:	f7fe ffc2 	bl	8003074 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a1e      	ldr	r2, [pc, #120]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040f4:	649a      	str	r2, [r3, #72]	@ 0x48
 80040f6:	4a1d      	ldr	r2, [pc, #116]	@ (800416c <HAL_SPI_MspInit+0x148>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80040fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 80040fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004178 <HAL_SPI_MspInit+0x154>)
 8004100:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8004102:	4b1c      	ldr	r3, [pc, #112]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 8004104:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004108:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800410a:	4b1a      	ldr	r3, [pc, #104]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004110:	4b18      	ldr	r3, [pc, #96]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004116:	4b17      	ldr	r3, [pc, #92]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 8004118:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800411c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800411e:	4b15      	ldr	r3, [pc, #84]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 8004120:	2200      	movs	r2, #0
 8004122:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004124:	4b13      	ldr	r3, [pc, #76]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 8004126:	2200      	movs	r2, #0
 8004128:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800412a:	4b12      	ldr	r3, [pc, #72]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 800412c:	2200      	movs	r2, #0
 800412e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004130:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 8004132:	2200      	movs	r2, #0
 8004134:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004136:	4b0f      	ldr	r3, [pc, #60]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 8004138:	2200      	movs	r2, #0
 800413a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800413c:	480d      	ldr	r0, [pc, #52]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 800413e:	f000 fd27 	bl	8004b90 <HAL_DMA_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8004148:	f7fe ff94 	bl	8003074 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a09      	ldr	r2, [pc, #36]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 8004150:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004152:	4a08      	ldr	r2, [pc, #32]	@ (8004174 <HAL_SPI_MspInit+0x150>)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004158:	bf00      	nop
 800415a:	3728      	adds	r7, #40	@ 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40013000 	.word	0x40013000
 8004164:	40023800 	.word	0x40023800
 8004168:	40020000 	.word	0x40020000
 800416c:	200001dc 	.word	0x200001dc
 8004170:	40026458 	.word	0x40026458
 8004174:	2000023c 	.word	0x2000023c
 8004178:	40026410 	.word	0x40026410

0800417c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418c:	d10d      	bne.n	80041aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	4b09      	ldr	r3, [pc, #36]	@ (80041b8 <HAL_TIM_Base_MspInit+0x3c>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	4a08      	ldr	r2, [pc, #32]	@ (80041b8 <HAL_TIM_Base_MspInit+0x3c>)
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	6413      	str	r3, [r2, #64]	@ 0x40
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <HAL_TIM_Base_MspInit+0x3c>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800

080041bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	@ 0x28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c4:	f107 0314 	add.w	r3, r7, #20
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004250 <HAL_UART_MspInit+0x94>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d134      	bne.n	8004248 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004254 <HAL_UART_MspInit+0x98>)
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004254 <HAL_UART_MspInit+0x98>)
 80041e8:	f043 0310 	orr.w	r3, r3, #16
 80041ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ee:	4b19      	ldr	r3, [pc, #100]	@ (8004254 <HAL_UART_MspInit+0x98>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <HAL_UART_MspInit+0x98>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	4a14      	ldr	r2, [pc, #80]	@ (8004254 <HAL_UART_MspInit+0x98>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6313      	str	r3, [r2, #48]	@ 0x30
 800420a:	4b12      	ldr	r3, [pc, #72]	@ (8004254 <HAL_UART_MspInit+0x98>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004216:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800421a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421c:	2302      	movs	r3, #2
 800421e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004224:	2303      	movs	r3, #3
 8004226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004228:	2307      	movs	r3, #7
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422c:	f107 0314 	add.w	r3, r7, #20
 8004230:	4619      	mov	r1, r3
 8004232:	4809      	ldr	r0, [pc, #36]	@ (8004258 <HAL_UART_MspInit+0x9c>)
 8004234:	f001 f8ae 	bl	8005394 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004238:	2200      	movs	r2, #0
 800423a:	2100      	movs	r1, #0
 800423c:	2025      	movs	r0, #37	@ 0x25
 800423e:	f000 fa48 	bl	80046d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004242:	2025      	movs	r0, #37	@ 0x25
 8004244:	f000 fa61 	bl	800470a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004248:	bf00      	nop
 800424a:	3728      	adds	r7, #40	@ 0x28
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40011000 	.word	0x40011000
 8004254:	40023800 	.word	0x40023800
 8004258:	40020000 	.word	0x40020000

0800425c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <NMI_Handler+0x4>

08004264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <HardFault_Handler+0x4>

0800426c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <MemManage_Handler+0x4>

08004274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004278:	bf00      	nop
 800427a:	e7fd      	b.n	8004278 <BusFault_Handler+0x4>

0800427c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004280:	bf00      	nop
 8004282:	e7fd      	b.n	8004280 <UsageFault_Handler+0x4>

08004284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b2:	f000 f8ef 	bl	8004494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80042c0:	4802      	ldr	r0, [pc, #8]	@ (80042cc <DMA1_Stream5_IRQHandler+0x10>)
 80042c2:	f000 fdfd 	bl	8004ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200000a0 	.word	0x200000a0

080042d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042d4:	4802      	ldr	r0, [pc, #8]	@ (80042e0 <USART1_IRQHandler+0x10>)
 80042d6:	f004 fb85 	bl	80089e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	200002e4 	.word	0x200002e4

080042e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80042e8:	4802      	ldr	r0, [pc, #8]	@ (80042f4 <DMA2_Stream0_IRQHandler+0x10>)
 80042ea:	f000 fde9 	bl	8004ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	2000023c 	.word	0x2000023c

080042f8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80042fc:	4802      	ldr	r0, [pc, #8]	@ (8004308 <DMA2_Stream3_IRQHandler+0x10>)
 80042fe:	f000 fddf 	bl	8004ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200001dc 	.word	0x200001dc

0800430c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004314:	4a14      	ldr	r2, [pc, #80]	@ (8004368 <_sbrk+0x5c>)
 8004316:	4b15      	ldr	r3, [pc, #84]	@ (800436c <_sbrk+0x60>)
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004320:	4b13      	ldr	r3, [pc, #76]	@ (8004370 <_sbrk+0x64>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004328:	4b11      	ldr	r3, [pc, #68]	@ (8004370 <_sbrk+0x64>)
 800432a:	4a12      	ldr	r2, [pc, #72]	@ (8004374 <_sbrk+0x68>)
 800432c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800432e:	4b10      	ldr	r3, [pc, #64]	@ (8004370 <_sbrk+0x64>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	429a      	cmp	r2, r3
 800433a:	d207      	bcs.n	800434c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800433c:	f009 f90a 	bl	800d554 <__errno>
 8004340:	4603      	mov	r3, r0
 8004342:	220c      	movs	r2, #12
 8004344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	e009      	b.n	8004360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800434c:	4b08      	ldr	r3, [pc, #32]	@ (8004370 <_sbrk+0x64>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004352:	4b07      	ldr	r3, [pc, #28]	@ (8004370 <_sbrk+0x64>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	4a05      	ldr	r2, [pc, #20]	@ (8004370 <_sbrk+0x64>)
 800435c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800435e:	68fb      	ldr	r3, [r7, #12]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	20020000 	.word	0x20020000
 800436c:	00000400 	.word	0x00000400
 8004370:	20000598 	.word	0x20000598
 8004374:	20000728 	.word	0x20000728

08004378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800437c:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <SystemInit+0x20>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004382:	4a05      	ldr	r2, [pc, #20]	@ (8004398 <SystemInit+0x20>)
 8004384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800439c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80043d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80043a0:	f7ff ffea 	bl	8004378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043a4:	480c      	ldr	r0, [pc, #48]	@ (80043d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043a6:	490d      	ldr	r1, [pc, #52]	@ (80043dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043a8:	4a0d      	ldr	r2, [pc, #52]	@ (80043e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043ac:	e002      	b.n	80043b4 <LoopCopyDataInit>

080043ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043b2:	3304      	adds	r3, #4

080043b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043b8:	d3f9      	bcc.n	80043ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ba:	4a0a      	ldr	r2, [pc, #40]	@ (80043e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043bc:	4c0a      	ldr	r4, [pc, #40]	@ (80043e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80043be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043c0:	e001      	b.n	80043c6 <LoopFillZerobss>

080043c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043c4:	3204      	adds	r2, #4

080043c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043c8:	d3fb      	bcc.n	80043c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043ca:	f009 f8c9 	bl	800d560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043ce:	f7fe f9f1 	bl	80027b4 <main>
  bx  lr    
 80043d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80043e0:	0800e600 	.word	0x0800e600
  ldr r2, =_sbss
 80043e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80043e8:	20000724 	.word	0x20000724

080043ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043ec:	e7fe      	b.n	80043ec <ADC_IRQHandler>
	...

080043f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004430 <HAL_Init+0x40>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004430 <HAL_Init+0x40>)
 80043fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_Init+0x40>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0a      	ldr	r2, [pc, #40]	@ (8004430 <HAL_Init+0x40>)
 8004406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800440a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800440c:	4b08      	ldr	r3, [pc, #32]	@ (8004430 <HAL_Init+0x40>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a07      	ldr	r2, [pc, #28]	@ (8004430 <HAL_Init+0x40>)
 8004412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004418:	2003      	movs	r0, #3
 800441a:	f000 f94f 	bl	80046bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800441e:	200f      	movs	r0, #15
 8004420:	f000 f808 	bl	8004434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004424:	f7ff fce2 	bl	8003dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023c00 	.word	0x40023c00

08004434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800443c:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <HAL_InitTick+0x54>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b12      	ldr	r3, [pc, #72]	@ (800448c <HAL_InitTick+0x58>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	4619      	mov	r1, r3
 8004446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800444a:	fbb3 f3f1 	udiv	r3, r3, r1
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	4618      	mov	r0, r3
 8004454:	f000 f967 	bl	8004726 <HAL_SYSTICK_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e00e      	b.n	8004480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b0f      	cmp	r3, #15
 8004466:	d80a      	bhi.n	800447e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004468:	2200      	movs	r2, #0
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	f000 f92f 	bl	80046d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004474:	4a06      	ldr	r2, [pc, #24]	@ (8004490 <HAL_InitTick+0x5c>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	2000000c 	.word	0x2000000c
 800448c:	20000014 	.word	0x20000014
 8004490:	20000010 	.word	0x20000010

08004494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <HAL_IncTick+0x20>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <HAL_IncTick+0x24>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4413      	add	r3, r2
 80044a4:	4a04      	ldr	r2, [pc, #16]	@ (80044b8 <HAL_IncTick+0x24>)
 80044a6:	6013      	str	r3, [r2, #0]
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000014 	.word	0x20000014
 80044b8:	2000059c 	.word	0x2000059c

080044bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return uwTick;
 80044c0:	4b03      	ldr	r3, [pc, #12]	@ (80044d0 <HAL_GetTick+0x14>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	2000059c 	.word	0x2000059c

080044d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044dc:	f7ff ffee 	bl	80044bc <HAL_GetTick>
 80044e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d005      	beq.n	80044fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <HAL_Delay+0x44>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044fa:	bf00      	nop
 80044fc:	f7ff ffde 	bl	80044bc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	429a      	cmp	r2, r3
 800450a:	d8f7      	bhi.n	80044fc <HAL_Delay+0x28>
  {
  }
}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000014 	.word	0x20000014

0800451c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <__NVIC_SetPriorityGrouping+0x44>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004538:	4013      	ands	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800454c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800454e:	4a04      	ldr	r2, [pc, #16]	@ (8004560 <__NVIC_SetPriorityGrouping+0x44>)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	60d3      	str	r3, [r2, #12]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004568:	4b04      	ldr	r3, [pc, #16]	@ (800457c <__NVIC_GetPriorityGrouping+0x18>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	f003 0307 	and.w	r3, r3, #7
}
 8004572:	4618      	mov	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	2b00      	cmp	r3, #0
 8004590:	db0b      	blt.n	80045aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	f003 021f 	and.w	r2, r3, #31
 8004598:	4907      	ldr	r1, [pc, #28]	@ (80045b8 <__NVIC_EnableIRQ+0x38>)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2001      	movs	r0, #1
 80045a2:	fa00 f202 	lsl.w	r2, r0, r2
 80045a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	e000e100 	.word	0xe000e100

080045bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	6039      	str	r1, [r7, #0]
 80045c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	db0a      	blt.n	80045e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	490c      	ldr	r1, [pc, #48]	@ (8004608 <__NVIC_SetPriority+0x4c>)
 80045d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045da:	0112      	lsls	r2, r2, #4
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	440b      	add	r3, r1
 80045e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045e4:	e00a      	b.n	80045fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4908      	ldr	r1, [pc, #32]	@ (800460c <__NVIC_SetPriority+0x50>)
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	3b04      	subs	r3, #4
 80045f4:	0112      	lsls	r2, r2, #4
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	440b      	add	r3, r1
 80045fa:	761a      	strb	r2, [r3, #24]
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000e100 	.word	0xe000e100
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	@ 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f1c3 0307 	rsb	r3, r3, #7
 800462a:	2b04      	cmp	r3, #4
 800462c:	bf28      	it	cs
 800462e:	2304      	movcs	r3, #4
 8004630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3304      	adds	r3, #4
 8004636:	2b06      	cmp	r3, #6
 8004638:	d902      	bls.n	8004640 <NVIC_EncodePriority+0x30>
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3b03      	subs	r3, #3
 800463e:	e000      	b.n	8004642 <NVIC_EncodePriority+0x32>
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004644:	f04f 32ff 	mov.w	r2, #4294967295
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	43da      	mvns	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	401a      	ands	r2, r3
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004658:	f04f 31ff 	mov.w	r1, #4294967295
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	43d9      	mvns	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004668:	4313      	orrs	r3, r2
         );
}
 800466a:	4618      	mov	r0, r3
 800466c:	3724      	adds	r7, #36	@ 0x24
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3b01      	subs	r3, #1
 8004684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004688:	d301      	bcc.n	800468e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800468a:	2301      	movs	r3, #1
 800468c:	e00f      	b.n	80046ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800468e:	4a0a      	ldr	r2, [pc, #40]	@ (80046b8 <SysTick_Config+0x40>)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3b01      	subs	r3, #1
 8004694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004696:	210f      	movs	r1, #15
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	f7ff ff8e 	bl	80045bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046a0:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <SysTick_Config+0x40>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046a6:	4b04      	ldr	r3, [pc, #16]	@ (80046b8 <SysTick_Config+0x40>)
 80046a8:	2207      	movs	r2, #7
 80046aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	e000e010 	.word	0xe000e010

080046bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ff29 	bl	800451c <__NVIC_SetPriorityGrouping>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b086      	sub	sp, #24
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	4603      	mov	r3, r0
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046e4:	f7ff ff3e 	bl	8004564 <__NVIC_GetPriorityGrouping>
 80046e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	6978      	ldr	r0, [r7, #20]
 80046f0:	f7ff ff8e 	bl	8004610 <NVIC_EncodePriority>
 80046f4:	4602      	mov	r2, r0
 80046f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fa:	4611      	mov	r1, r2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff ff5d 	bl	80045bc <__NVIC_SetPriority>
}
 8004702:	bf00      	nop
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	4603      	mov	r3, r0
 8004712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff ff31 	bl	8004580 <__NVIC_EnableIRQ>
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff ffa2 	bl	8004678 <SysTick_Config>
 8004734:	4603      	mov	r3, r0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e014      	b.n	800477a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	791b      	ldrb	r3, [r3, #4]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff fb6b 	bl	8003e3c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0a2      	b.n	80048e6 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	795b      	ldrb	r3, [r3, #5]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_DAC_Start_DMA+0x28>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e09c      	b.n	80048e6 <HAL_DAC_Start_DMA+0x162>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2202      	movs	r2, #2
 80047b6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d129      	bne.n	8004812 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	4a4b      	ldr	r2, [pc, #300]	@ (80048f0 <HAL_DAC_Start_DMA+0x16c>)
 80047c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4a4a      	ldr	r2, [pc, #296]	@ (80048f4 <HAL_DAC_Start_DMA+0x170>)
 80047cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	4a49      	ldr	r2, [pc, #292]	@ (80048f8 <HAL_DAC_Start_DMA+0x174>)
 80047d4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047e4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_DAC_Start_DMA+0x70>
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d005      	beq.n	80047fe <HAL_DAC_Start_DMA+0x7a>
 80047f2:	e009      	b.n	8004808 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3308      	adds	r3, #8
 80047fa:	613b      	str	r3, [r7, #16]
        break;
 80047fc:	e033      	b.n	8004866 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	330c      	adds	r3, #12
 8004804:	613b      	str	r3, [r7, #16]
        break;
 8004806:	e02e      	b.n	8004866 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3310      	adds	r3, #16
 800480e:	613b      	str	r3, [r7, #16]
        break;
 8004810:	e029      	b.n	8004866 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	4a39      	ldr	r2, [pc, #228]	@ (80048fc <HAL_DAC_Start_DMA+0x178>)
 8004818:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4a38      	ldr	r2, [pc, #224]	@ (8004900 <HAL_DAC_Start_DMA+0x17c>)
 8004820:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	4a37      	ldr	r2, [pc, #220]	@ (8004904 <HAL_DAC_Start_DMA+0x180>)
 8004828:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004838:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_DAC_Start_DMA+0xc4>
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	2b04      	cmp	r3, #4
 8004844:	d005      	beq.n	8004852 <HAL_DAC_Start_DMA+0xce>
 8004846:	e009      	b.n	800485c <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3314      	adds	r3, #20
 800484e:	613b      	str	r3, [r7, #16]
        break;
 8004850:	e009      	b.n	8004866 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3318      	adds	r3, #24
 8004858:	613b      	str	r3, [r7, #16]
        break;
 800485a:	e004      	b.n	8004866 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	331c      	adds	r3, #28
 8004862:	613b      	str	r3, [r7, #16]
        break;
 8004864:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d111      	bne.n	8004890 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800487a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6898      	ldr	r0, [r3, #8]
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	f000 fa31 	bl	8004cec <HAL_DMA_Start_IT>
 800488a:	4603      	mov	r3, r0
 800488c:	75fb      	strb	r3, [r7, #23]
 800488e:	e010      	b.n	80048b2 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800489e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68d8      	ldr	r0, [r3, #12]
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	f000 fa1f 	bl	8004cec <HAL_DMA_Start_IT>
 80048ae:	4603      	mov	r3, r0
 80048b0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10c      	bne.n	80048d8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2201      	movs	r2, #1
 80048cc:	409a      	lsls	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e005      	b.n	80048e4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f043 0204 	orr.w	r2, r3, #4
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	08004a7d 	.word	0x08004a7d
 80048f4:	08004a9f 	.word	0x08004a9f
 80048f8:	08004abb 	.word	0x08004abb
 80048fc:	08004b25 	.word	0x08004b25
 8004900:	08004b47 	.word	0x08004b47
 8004904:	08004b63 	.word	0x08004b63

08004908 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e03e      	b.n	800499a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6819      	ldr	r1, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	43da      	mvns	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	400a      	ands	r2, r1
 8004938:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6819      	ldr	r1, [r3, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2201      	movs	r2, #1
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43da      	mvns	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	400a      	ands	r2, r1
 8004954:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10d      	bne.n	8004978 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fa1b 	bl	8004d9c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e00c      	b.n	8004992 <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fa0d 	bl	8004d9c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004990:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b089      	sub	sp, #36	@ 0x24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_DAC_ConfigChannel+0x1c>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e042      	b.n	8004a70 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	795b      	ldrb	r3, [r3, #5]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_DAC_ConfigChannel+0x2c>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e03c      	b.n	8004a70 <HAL_DAC_ConfigChannel+0xa6>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2202      	movs	r2, #2
 8004a00:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	22c0      	movs	r2, #192	@ 0xc0
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	400a      	ands	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3724      	adds	r7, #36	@ 0x24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff ff89 	bl	80049a2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	711a      	strb	r2, [r3, #4]
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7fd fe71 	bl	8002794 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f043 0204 	orr.w	r2, r3, #4
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff ff6e 	bl	80049b6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	711a      	strb	r2, [r3, #4]
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff ffd8 	bl	8004ae8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	711a      	strb	r2, [r3, #4]
}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7ff ffd1 	bl	8004afc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f043 0204 	orr.w	r2, r3, #4
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff ffc7 	bl	8004b10 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	711a      	strb	r2, [r3, #4]
}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b9c:	f7ff fc8e 	bl	80044bc <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e099      	b.n	8004ce0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bcc:	e00f      	b.n	8004bee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bce:	f7ff fc75 	bl	80044bc <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b05      	cmp	r3, #5
 8004bda:	d908      	bls.n	8004bee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2203      	movs	r2, #3
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e078      	b.n	8004ce0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e8      	bne.n	8004bce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4b38      	ldr	r3, [pc, #224]	@ (8004ce8 <HAL_DMA_Init+0x158>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d107      	bne.n	8004c58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c50:	4313      	orrs	r3, r2
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d117      	bne.n	8004cb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00e      	beq.n	8004cb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fb01 	bl	800529c <DMA_CheckFifoParam>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2240      	movs	r2, #64	@ 0x40
 8004ca4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e016      	b.n	8004ce0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fab8 	bl	8005230 <DMA_CalcBaseAndBitshift>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc8:	223f      	movs	r2, #63	@ 0x3f
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	f010803f 	.word	0xf010803f

08004cec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_DMA_Start_IT+0x26>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e040      	b.n	8004d94 <HAL_DMA_Start_IT+0xa8>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d12f      	bne.n	8004d86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fa4a 	bl	80051d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d44:	223f      	movs	r2, #63	@ 0x3f
 8004d46:	409a      	lsls	r2, r3
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0216 	orr.w	r2, r2, #22
 8004d5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0208 	orr.w	r2, r2, #8
 8004d72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e005      	b.n	8004d92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004daa:	f7ff fb87 	bl	80044bc <HAL_GetTick>
 8004dae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d008      	beq.n	8004dce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2280      	movs	r2, #128	@ 0x80
 8004dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e052      	b.n	8004e74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0216 	bic.w	r2, r2, #22
 8004ddc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d103      	bne.n	8004dfe <HAL_DMA_Abort+0x62>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0208 	bic.w	r2, r2, #8
 8004e0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e1e:	e013      	b.n	8004e48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e20:	f7ff fb4c 	bl	80044bc <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	d90c      	bls.n	8004e48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2203      	movs	r2, #3
 8004e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e015      	b.n	8004e74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e4      	bne.n	8004e20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5a:	223f      	movs	r2, #63	@ 0x3f
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d004      	beq.n	8004e9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2280      	movs	r2, #128	@ 0x80
 8004e94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e00c      	b.n	8004eb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2205      	movs	r2, #5
 8004e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ecc:	4b8e      	ldr	r3, [pc, #568]	@ (8005108 <HAL_DMA_IRQHandler+0x248>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a8e      	ldr	r2, [pc, #568]	@ (800510c <HAL_DMA_IRQHandler+0x24c>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	0a9b      	lsrs	r3, r3, #10
 8004ed8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ede:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eea:	2208      	movs	r2, #8
 8004eec:	409a      	lsls	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01a      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d013      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0204 	bic.w	r2, r2, #4
 8004f12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f18:	2208      	movs	r2, #8
 8004f1a:	409a      	lsls	r2, r3
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f24:	f043 0201 	orr.w	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f30:	2201      	movs	r2, #1
 8004f32:	409a      	lsls	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d012      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f4e:	2201      	movs	r2, #1
 8004f50:	409a      	lsls	r2, r3
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5a:	f043 0202 	orr.w	r2, r3, #2
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f66:	2204      	movs	r2, #4
 8004f68:	409a      	lsls	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d012      	beq.n	8004f98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f84:	2204      	movs	r2, #4
 8004f86:	409a      	lsls	r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f90:	f043 0204 	orr.w	r2, r3, #4
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d043      	beq.n	8005030 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d03c      	beq.n	8005030 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fba:	2210      	movs	r2, #16
 8004fbc:	409a      	lsls	r2, r3
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d018      	beq.n	8005002 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d108      	bne.n	8004ff0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d024      	beq.n	8005030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4798      	blx	r3
 8004fee:	e01f      	b.n	8005030 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01b      	beq.n	8005030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	4798      	blx	r3
 8005000:	e016      	b.n	8005030 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d107      	bne.n	8005020 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0208 	bic.w	r2, r2, #8
 800501e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005034:	2220      	movs	r2, #32
 8005036:	409a      	lsls	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4013      	ands	r3, r2
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 808f 	beq.w	8005160 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8087 	beq.w	8005160 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005056:	2220      	movs	r2, #32
 8005058:	409a      	lsls	r2, r3
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b05      	cmp	r3, #5
 8005068:	d136      	bne.n	80050d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0216 	bic.w	r2, r2, #22
 8005078:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005088:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <HAL_DMA_IRQHandler+0x1da>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0208 	bic.w	r2, r2, #8
 80050a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ae:	223f      	movs	r2, #63	@ 0x3f
 80050b0:	409a      	lsls	r2, r3
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d07e      	beq.n	80051cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
        }
        return;
 80050d6:	e079      	b.n	80051cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01d      	beq.n	8005122 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10d      	bne.n	8005110 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d031      	beq.n	8005160 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	4798      	blx	r3
 8005104:	e02c      	b.n	8005160 <HAL_DMA_IRQHandler+0x2a0>
 8005106:	bf00      	nop
 8005108:	2000000c 	.word	0x2000000c
 800510c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d023      	beq.n	8005160 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	4798      	blx	r3
 8005120:	e01e      	b.n	8005160 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10f      	bne.n	8005150 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0210 	bic.w	r2, r2, #16
 800513e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005164:	2b00      	cmp	r3, #0
 8005166:	d032      	beq.n	80051ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d022      	beq.n	80051ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2205      	movs	r2, #5
 8005178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	3301      	adds	r3, #1
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	429a      	cmp	r2, r3
 8005196:	d307      	bcc.n	80051a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f2      	bne.n	800518c <HAL_DMA_IRQHandler+0x2cc>
 80051a6:	e000      	b.n	80051aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80051a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3
 80051ca:	e000      	b.n	80051ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80051cc:	bf00      	nop
    }
  }
}
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80051f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b40      	cmp	r3, #64	@ 0x40
 8005200:	d108      	bne.n	8005214 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005212:	e007      	b.n	8005224 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	60da      	str	r2, [r3, #12]
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	3b10      	subs	r3, #16
 8005240:	4a14      	ldr	r2, [pc, #80]	@ (8005294 <DMA_CalcBaseAndBitshift+0x64>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800524a:	4a13      	ldr	r2, [pc, #76]	@ (8005298 <DMA_CalcBaseAndBitshift+0x68>)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b03      	cmp	r3, #3
 800525c:	d909      	bls.n	8005272 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005266:	f023 0303 	bic.w	r3, r3, #3
 800526a:	1d1a      	adds	r2, r3, #4
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005270:	e007      	b.n	8005282 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	aaaaaaab 	.word	0xaaaaaaab
 8005298:	0800e554 	.word	0x0800e554

0800529c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d11f      	bne.n	80052f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d856      	bhi.n	800536a <DMA_CheckFifoParam+0xce>
 80052bc:	a201      	add	r2, pc, #4	@ (adr r2, 80052c4 <DMA_CheckFifoParam+0x28>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052d5 	.word	0x080052d5
 80052c8:	080052e7 	.word	0x080052e7
 80052cc:	080052d5 	.word	0x080052d5
 80052d0:	0800536b 	.word	0x0800536b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d046      	beq.n	800536e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052e4:	e043      	b.n	800536e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052ee:	d140      	bne.n	8005372 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f4:	e03d      	b.n	8005372 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052fe:	d121      	bne.n	8005344 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b03      	cmp	r3, #3
 8005304:	d837      	bhi.n	8005376 <DMA_CheckFifoParam+0xda>
 8005306:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <DMA_CheckFifoParam+0x70>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	0800531d 	.word	0x0800531d
 8005310:	08005323 	.word	0x08005323
 8005314:	0800531d 	.word	0x0800531d
 8005318:	08005335 	.word	0x08005335
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	73fb      	strb	r3, [r7, #15]
      break;
 8005320:	e030      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005326:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d025      	beq.n	800537a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005332:	e022      	b.n	800537a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800533c:	d11f      	bne.n	800537e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005342:	e01c      	b.n	800537e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d903      	bls.n	8005352 <DMA_CheckFifoParam+0xb6>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d003      	beq.n	8005358 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005350:	e018      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	73fb      	strb	r3, [r7, #15]
      break;
 8005356:	e015      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00e      	beq.n	8005382 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	73fb      	strb	r3, [r7, #15]
      break;
 8005368:	e00b      	b.n	8005382 <DMA_CheckFifoParam+0xe6>
      break;
 800536a:	bf00      	nop
 800536c:	e00a      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
      break;
 800536e:	bf00      	nop
 8005370:	e008      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
      break;
 8005372:	bf00      	nop
 8005374:	e006      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
      break;
 8005376:	bf00      	nop
 8005378:	e004      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
      break;
 800537a:	bf00      	nop
 800537c:	e002      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
      break;   
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
      break;
 8005382:	bf00      	nop
    }
  } 
  
  return status; 
 8005384:	7bfb      	ldrb	r3, [r7, #15]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop

08005394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005394:	b480      	push	{r7}
 8005396:	b089      	sub	sp, #36	@ 0x24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	e16b      	b.n	8005688 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053b0:	2201      	movs	r2, #1
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4013      	ands	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	f040 815a 	bne.w	8005682 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d005      	beq.n	80053e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d130      	bne.n	8005448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	2203      	movs	r2, #3
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	43db      	mvns	r3, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4013      	ands	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4313      	orrs	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800541c:	2201      	movs	r2, #1
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	43db      	mvns	r3, r3
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	4013      	ands	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	091b      	lsrs	r3, r3, #4
 8005432:	f003 0201 	and.w	r2, r3, #1
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4313      	orrs	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	2b03      	cmp	r3, #3
 8005452:	d017      	beq.n	8005484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	2203      	movs	r2, #3
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4013      	ands	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d123      	bne.n	80054d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	08da      	lsrs	r2, r3, #3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3208      	adds	r2, #8
 8005498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	220f      	movs	r2, #15
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	4013      	ands	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	08da      	lsrs	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3208      	adds	r2, #8
 80054d2:	69b9      	ldr	r1, [r7, #24]
 80054d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	2203      	movs	r2, #3
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	43db      	mvns	r3, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4013      	ands	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f003 0203 	and.w	r2, r3, #3
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	4313      	orrs	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80b4 	beq.w	8005682 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	4b60      	ldr	r3, [pc, #384]	@ (80056a0 <HAL_GPIO_Init+0x30c>)
 8005520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005522:	4a5f      	ldr	r2, [pc, #380]	@ (80056a0 <HAL_GPIO_Init+0x30c>)
 8005524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005528:	6453      	str	r3, [r2, #68]	@ 0x44
 800552a:	4b5d      	ldr	r3, [pc, #372]	@ (80056a0 <HAL_GPIO_Init+0x30c>)
 800552c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005536:	4a5b      	ldr	r2, [pc, #364]	@ (80056a4 <HAL_GPIO_Init+0x310>)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	3302      	adds	r3, #2
 800553e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	220f      	movs	r2, #15
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43db      	mvns	r3, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4013      	ands	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a52      	ldr	r2, [pc, #328]	@ (80056a8 <HAL_GPIO_Init+0x314>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d02b      	beq.n	80055ba <HAL_GPIO_Init+0x226>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a51      	ldr	r2, [pc, #324]	@ (80056ac <HAL_GPIO_Init+0x318>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d025      	beq.n	80055b6 <HAL_GPIO_Init+0x222>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a50      	ldr	r2, [pc, #320]	@ (80056b0 <HAL_GPIO_Init+0x31c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01f      	beq.n	80055b2 <HAL_GPIO_Init+0x21e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a4f      	ldr	r2, [pc, #316]	@ (80056b4 <HAL_GPIO_Init+0x320>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d019      	beq.n	80055ae <HAL_GPIO_Init+0x21a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a4e      	ldr	r2, [pc, #312]	@ (80056b8 <HAL_GPIO_Init+0x324>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_GPIO_Init+0x216>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a4d      	ldr	r2, [pc, #308]	@ (80056bc <HAL_GPIO_Init+0x328>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00d      	beq.n	80055a6 <HAL_GPIO_Init+0x212>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a4c      	ldr	r2, [pc, #304]	@ (80056c0 <HAL_GPIO_Init+0x32c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d007      	beq.n	80055a2 <HAL_GPIO_Init+0x20e>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a4b      	ldr	r2, [pc, #300]	@ (80056c4 <HAL_GPIO_Init+0x330>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <HAL_GPIO_Init+0x20a>
 800559a:	2307      	movs	r3, #7
 800559c:	e00e      	b.n	80055bc <HAL_GPIO_Init+0x228>
 800559e:	2308      	movs	r3, #8
 80055a0:	e00c      	b.n	80055bc <HAL_GPIO_Init+0x228>
 80055a2:	2306      	movs	r3, #6
 80055a4:	e00a      	b.n	80055bc <HAL_GPIO_Init+0x228>
 80055a6:	2305      	movs	r3, #5
 80055a8:	e008      	b.n	80055bc <HAL_GPIO_Init+0x228>
 80055aa:	2304      	movs	r3, #4
 80055ac:	e006      	b.n	80055bc <HAL_GPIO_Init+0x228>
 80055ae:	2303      	movs	r3, #3
 80055b0:	e004      	b.n	80055bc <HAL_GPIO_Init+0x228>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e002      	b.n	80055bc <HAL_GPIO_Init+0x228>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <HAL_GPIO_Init+0x228>
 80055ba:	2300      	movs	r3, #0
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	f002 0203 	and.w	r2, r2, #3
 80055c2:	0092      	lsls	r2, r2, #2
 80055c4:	4093      	lsls	r3, r2
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055cc:	4935      	ldr	r1, [pc, #212]	@ (80056a4 <HAL_GPIO_Init+0x310>)
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	089b      	lsrs	r3, r3, #2
 80055d2:	3302      	adds	r3, #2
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055da:	4b3b      	ldr	r3, [pc, #236]	@ (80056c8 <HAL_GPIO_Init+0x334>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	43db      	mvns	r3, r3
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	4013      	ands	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055fe:	4a32      	ldr	r2, [pc, #200]	@ (80056c8 <HAL_GPIO_Init+0x334>)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005604:	4b30      	ldr	r3, [pc, #192]	@ (80056c8 <HAL_GPIO_Init+0x334>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005628:	4a27      	ldr	r2, [pc, #156]	@ (80056c8 <HAL_GPIO_Init+0x334>)
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800562e:	4b26      	ldr	r3, [pc, #152]	@ (80056c8 <HAL_GPIO_Init+0x334>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	43db      	mvns	r3, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4013      	ands	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005652:	4a1d      	ldr	r2, [pc, #116]	@ (80056c8 <HAL_GPIO_Init+0x334>)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005658:	4b1b      	ldr	r3, [pc, #108]	@ (80056c8 <HAL_GPIO_Init+0x334>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	43db      	mvns	r3, r3
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4013      	ands	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800567c:	4a12      	ldr	r2, [pc, #72]	@ (80056c8 <HAL_GPIO_Init+0x334>)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	2b0f      	cmp	r3, #15
 800568c:	f67f ae90 	bls.w	80053b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005690:	bf00      	nop
 8005692:	bf00      	nop
 8005694:	3724      	adds	r7, #36	@ 0x24
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40013800 	.word	0x40013800
 80056a8:	40020000 	.word	0x40020000
 80056ac:	40020400 	.word	0x40020400
 80056b0:	40020800 	.word	0x40020800
 80056b4:	40020c00 	.word	0x40020c00
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40021400 	.word	0x40021400
 80056c0:	40021800 	.word	0x40021800
 80056c4:	40021c00 	.word	0x40021c00
 80056c8:	40013c00 	.word	0x40013c00

080056cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	807b      	strh	r3, [r7, #2]
 80056d8:	4613      	mov	r3, r2
 80056da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056dc:	787b      	ldrb	r3, [r7, #1]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056e2:	887a      	ldrh	r2, [r7, #2]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056e8:	e003      	b.n	80056f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056ea:	887b      	ldrh	r3, [r7, #2]
 80056ec:	041a      	lsls	r2, r3, #16
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	619a      	str	r2, [r3, #24]
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e267      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d075      	beq.n	800580a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800571e:	4b88      	ldr	r3, [pc, #544]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b04      	cmp	r3, #4
 8005728:	d00c      	beq.n	8005744 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800572a:	4b85      	ldr	r3, [pc, #532]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005732:	2b08      	cmp	r3, #8
 8005734:	d112      	bne.n	800575c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005736:	4b82      	ldr	r3, [pc, #520]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800573e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005742:	d10b      	bne.n	800575c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	4b7e      	ldr	r3, [pc, #504]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d05b      	beq.n	8005808 <HAL_RCC_OscConfig+0x108>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d157      	bne.n	8005808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e242      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005764:	d106      	bne.n	8005774 <HAL_RCC_OscConfig+0x74>
 8005766:	4b76      	ldr	r3, [pc, #472]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a75      	ldr	r2, [pc, #468]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 800576c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	e01d      	b.n	80057b0 <HAL_RCC_OscConfig+0xb0>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0x98>
 800577e:	4b70      	ldr	r3, [pc, #448]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a6f      	ldr	r2, [pc, #444]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4b6d      	ldr	r3, [pc, #436]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a6c      	ldr	r2, [pc, #432]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0xb0>
 8005798:	4b69      	ldr	r3, [pc, #420]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a68      	ldr	r2, [pc, #416]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 800579e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	4b66      	ldr	r3, [pc, #408]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a65      	ldr	r2, [pc, #404]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 80057aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d013      	beq.n	80057e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b8:	f7fe fe80 	bl	80044bc <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c0:	f7fe fe7c 	bl	80044bc <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	@ 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e207      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057d2:	4b5b      	ldr	r3, [pc, #364]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCC_OscConfig+0xc0>
 80057de:	e014      	b.n	800580a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e0:	f7fe fe6c 	bl	80044bc <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e8:	f7fe fe68 	bl	80044bc <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b64      	cmp	r3, #100	@ 0x64
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e1f3      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057fa:	4b51      	ldr	r3, [pc, #324]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0xe8>
 8005806:	e000      	b.n	800580a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d063      	beq.n	80058de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005816:	4b4a      	ldr	r3, [pc, #296]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005822:	4b47      	ldr	r3, [pc, #284]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800582a:	2b08      	cmp	r3, #8
 800582c:	d11c      	bne.n	8005868 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800582e:	4b44      	ldr	r3, [pc, #272]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d116      	bne.n	8005868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800583a:	4b41      	ldr	r3, [pc, #260]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_RCC_OscConfig+0x152>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d001      	beq.n	8005852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e1c7      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005852:	4b3b      	ldr	r3, [pc, #236]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	4937      	ldr	r1, [pc, #220]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005862:	4313      	orrs	r3, r2
 8005864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005866:	e03a      	b.n	80058de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d020      	beq.n	80058b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005870:	4b34      	ldr	r3, [pc, #208]	@ (8005944 <HAL_RCC_OscConfig+0x244>)
 8005872:	2201      	movs	r2, #1
 8005874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005876:	f7fe fe21 	bl	80044bc <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800587e:	f7fe fe1d 	bl	80044bc <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e1a8      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005890:	4b2b      	ldr	r3, [pc, #172]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800589c:	4b28      	ldr	r3, [pc, #160]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	4925      	ldr	r1, [pc, #148]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]
 80058b0:	e015      	b.n	80058de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b2:	4b24      	ldr	r3, [pc, #144]	@ (8005944 <HAL_RCC_OscConfig+0x244>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b8:	f7fe fe00 	bl	80044bc <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c0:	f7fe fdfc 	bl	80044bc <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e187      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d036      	beq.n	8005958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d016      	beq.n	8005920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058f2:	4b15      	ldr	r3, [pc, #84]	@ (8005948 <HAL_RCC_OscConfig+0x248>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f8:	f7fe fde0 	bl	80044bc <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005900:	f7fe fddc 	bl	80044bc <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e167      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005912:	4b0b      	ldr	r3, [pc, #44]	@ (8005940 <HAL_RCC_OscConfig+0x240>)
 8005914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f0      	beq.n	8005900 <HAL_RCC_OscConfig+0x200>
 800591e:	e01b      	b.n	8005958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005920:	4b09      	ldr	r3, [pc, #36]	@ (8005948 <HAL_RCC_OscConfig+0x248>)
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005926:	f7fe fdc9 	bl	80044bc <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800592c:	e00e      	b.n	800594c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800592e:	f7fe fdc5 	bl	80044bc <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d907      	bls.n	800594c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e150      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
 8005940:	40023800 	.word	0x40023800
 8005944:	42470000 	.word	0x42470000
 8005948:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800594c:	4b88      	ldr	r3, [pc, #544]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 800594e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1ea      	bne.n	800592e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 8097 	beq.w	8005a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005966:	2300      	movs	r3, #0
 8005968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800596a:	4b81      	ldr	r3, [pc, #516]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10f      	bne.n	8005996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005976:	2300      	movs	r3, #0
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	4b7d      	ldr	r3, [pc, #500]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	4a7c      	ldr	r2, [pc, #496]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005984:	6413      	str	r3, [r2, #64]	@ 0x40
 8005986:	4b7a      	ldr	r3, [pc, #488]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005996:	4b77      	ldr	r3, [pc, #476]	@ (8005b74 <HAL_RCC_OscConfig+0x474>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d118      	bne.n	80059d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059a2:	4b74      	ldr	r3, [pc, #464]	@ (8005b74 <HAL_RCC_OscConfig+0x474>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a73      	ldr	r2, [pc, #460]	@ (8005b74 <HAL_RCC_OscConfig+0x474>)
 80059a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ae:	f7fe fd85 	bl	80044bc <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059b6:	f7fe fd81 	bl	80044bc <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e10c      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005b74 <HAL_RCC_OscConfig+0x474>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0f0      	beq.n	80059b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d106      	bne.n	80059ea <HAL_RCC_OscConfig+0x2ea>
 80059dc:	4b64      	ldr	r3, [pc, #400]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 80059de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e0:	4a63      	ldr	r2, [pc, #396]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80059e8:	e01c      	b.n	8005a24 <HAL_RCC_OscConfig+0x324>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d10c      	bne.n	8005a0c <HAL_RCC_OscConfig+0x30c>
 80059f2:	4b5f      	ldr	r3, [pc, #380]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f6:	4a5e      	ldr	r2, [pc, #376]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 80059f8:	f043 0304 	orr.w	r3, r3, #4
 80059fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80059fe:	4b5c      	ldr	r3, [pc, #368]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a02:	4a5b      	ldr	r2, [pc, #364]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a0a:	e00b      	b.n	8005a24 <HAL_RCC_OscConfig+0x324>
 8005a0c:	4b58      	ldr	r3, [pc, #352]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a10:	4a57      	ldr	r2, [pc, #348]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a12:	f023 0301 	bic.w	r3, r3, #1
 8005a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a18:	4b55      	ldr	r3, [pc, #340]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1c:	4a54      	ldr	r2, [pc, #336]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a1e:	f023 0304 	bic.w	r3, r3, #4
 8005a22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d015      	beq.n	8005a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2c:	f7fe fd46 	bl	80044bc <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a32:	e00a      	b.n	8005a4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a34:	f7fe fd42 	bl	80044bc <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e0cb      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4a:	4b49      	ldr	r3, [pc, #292]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0ee      	beq.n	8005a34 <HAL_RCC_OscConfig+0x334>
 8005a56:	e014      	b.n	8005a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a58:	f7fe fd30 	bl	80044bc <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a5e:	e00a      	b.n	8005a76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a60:	f7fe fd2c 	bl	80044bc <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e0b5      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a76:	4b3e      	ldr	r3, [pc, #248]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1ee      	bne.n	8005a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d105      	bne.n	8005a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a88:	4b39      	ldr	r3, [pc, #228]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8c:	4a38      	ldr	r2, [pc, #224]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80a1 	beq.w	8005be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a9e:	4b34      	ldr	r3, [pc, #208]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d05c      	beq.n	8005b64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d141      	bne.n	8005b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab2:	4b31      	ldr	r3, [pc, #196]	@ (8005b78 <HAL_RCC_OscConfig+0x478>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab8:	f7fe fd00 	bl	80044bc <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac0:	f7fe fcfc 	bl	80044bc <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e087      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad2:	4b27      	ldr	r3, [pc, #156]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f0      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af4:	085b      	lsrs	r3, r3, #1
 8005af6:	3b01      	subs	r3, #1
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b00:	061b      	lsls	r3, r3, #24
 8005b02:	491b      	ldr	r1, [pc, #108]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b08:	4b1b      	ldr	r3, [pc, #108]	@ (8005b78 <HAL_RCC_OscConfig+0x478>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0e:	f7fe fcd5 	bl	80044bc <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b16:	f7fe fcd1 	bl	80044bc <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e05c      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b28:	4b11      	ldr	r3, [pc, #68]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0f0      	beq.n	8005b16 <HAL_RCC_OscConfig+0x416>
 8005b34:	e054      	b.n	8005be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b36:	4b10      	ldr	r3, [pc, #64]	@ (8005b78 <HAL_RCC_OscConfig+0x478>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3c:	f7fe fcbe 	bl	80044bc <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b44:	f7fe fcba 	bl	80044bc <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e045      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b56:	4b06      	ldr	r3, [pc, #24]	@ (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0x444>
 8005b62:	e03d      	b.n	8005be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e038      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
 8005b70:	40023800 	.word	0x40023800
 8005b74:	40007000 	.word	0x40007000
 8005b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bec <HAL_RCC_OscConfig+0x4ec>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d028      	beq.n	8005bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d121      	bne.n	8005bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d11a      	bne.n	8005bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005bac:	4013      	ands	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d111      	bne.n	8005bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc2:	085b      	lsrs	r3, r3, #1
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d107      	bne.n	8005bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d001      	beq.n	8005be0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40023800 	.word	0x40023800

08005bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0cc      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c04:	4b68      	ldr	r3, [pc, #416]	@ (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d90c      	bls.n	8005c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b65      	ldr	r3, [pc, #404]	@ (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b63      	ldr	r3, [pc, #396]	@ (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d001      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0b8      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d020      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c44:	4b59      	ldr	r3, [pc, #356]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	4a58      	ldr	r2, [pc, #352]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c5c:	4b53      	ldr	r3, [pc, #332]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	4a52      	ldr	r2, [pc, #328]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c68:	4b50      	ldr	r3, [pc, #320]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	494d      	ldr	r1, [pc, #308]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d044      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8e:	4b47      	ldr	r3, [pc, #284]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d119      	bne.n	8005cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e07f      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d003      	beq.n	8005cae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d107      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cae:	4b3f      	ldr	r3, [pc, #252]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d109      	bne.n	8005cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e06f      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e067      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cce:	4b37      	ldr	r3, [pc, #220]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f023 0203 	bic.w	r2, r3, #3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	4934      	ldr	r1, [pc, #208]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ce0:	f7fe fbec 	bl	80044bc <HAL_GetTick>
 8005ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce6:	e00a      	b.n	8005cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce8:	f7fe fbe8 	bl	80044bc <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e04f      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 020c 	and.w	r2, r3, #12
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d1eb      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d10:	4b25      	ldr	r3, [pc, #148]	@ (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d20c      	bcs.n	8005d38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1e:	4b22      	ldr	r3, [pc, #136]	@ (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d26:	4b20      	ldr	r3, [pc, #128]	@ (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e032      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d44:	4b19      	ldr	r3, [pc, #100]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4916      	ldr	r1, [pc, #88]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d62:	4b12      	ldr	r3, [pc, #72]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	490e      	ldr	r1, [pc, #56]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d76:	f000 f821 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	091b      	lsrs	r3, r3, #4
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	490a      	ldr	r1, [pc, #40]	@ (8005db0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d88:	5ccb      	ldrb	r3, [r1, r3]
 8005d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8e:	4a09      	ldr	r2, [pc, #36]	@ (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d92:	4b09      	ldr	r3, [pc, #36]	@ (8005db8 <HAL_RCC_ClockConfig+0x1c8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe fb4c 	bl	8004434 <HAL_InitTick>

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40023c00 	.word	0x40023c00
 8005dac:	40023800 	.word	0x40023800
 8005db0:	0800e53c 	.word	0x0800e53c
 8005db4:	2000000c 	.word	0x2000000c
 8005db8:	20000010 	.word	0x20000010

08005dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dc0:	b094      	sub	sp, #80	@ 0x50
 8005dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dd4:	4b79      	ldr	r3, [pc, #484]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 030c 	and.w	r3, r3, #12
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d00d      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x40>
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	f200 80e1 	bhi.w	8005fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <HAL_RCC_GetSysClockFreq+0x34>
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d003      	beq.n	8005df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dee:	e0db      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005df0:	4b73      	ldr	r3, [pc, #460]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005df2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005df4:	e0db      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005df6:	4b73      	ldr	r3, [pc, #460]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005df8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dfa:	e0d8      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e06:	4b6d      	ldr	r3, [pc, #436]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d063      	beq.n	8005eda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e12:	4b6a      	ldr	r3, [pc, #424]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	2200      	movs	r2, #0
 8005e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e26:	2300      	movs	r3, #0
 8005e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e2e:	4622      	mov	r2, r4
 8005e30:	462b      	mov	r3, r5
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f04f 0100 	mov.w	r1, #0
 8005e3a:	0159      	lsls	r1, r3, #5
 8005e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e40:	0150      	lsls	r0, r2, #5
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4621      	mov	r1, r4
 8005e48:	1a51      	subs	r1, r2, r1
 8005e4a:	6139      	str	r1, [r7, #16]
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e60:	4659      	mov	r1, fp
 8005e62:	018b      	lsls	r3, r1, #6
 8005e64:	4651      	mov	r1, sl
 8005e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e6a:	4651      	mov	r1, sl
 8005e6c:	018a      	lsls	r2, r1, #6
 8005e6e:	4651      	mov	r1, sl
 8005e70:	ebb2 0801 	subs.w	r8, r2, r1
 8005e74:	4659      	mov	r1, fp
 8005e76:	eb63 0901 	sbc.w	r9, r3, r1
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e8e:	4690      	mov	r8, r2
 8005e90:	4699      	mov	r9, r3
 8005e92:	4623      	mov	r3, r4
 8005e94:	eb18 0303 	adds.w	r3, r8, r3
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	eb49 0303 	adc.w	r3, r9, r3
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005eae:	4629      	mov	r1, r5
 8005eb0:	024b      	lsls	r3, r1, #9
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005eb8:	4621      	mov	r1, r4
 8005eba:	024a      	lsls	r2, r1, #9
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ecc:	f7fa fd7a 	bl	80009c4 <__aeabi_uldivmod>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ed8:	e058      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eda:	4b38      	ldr	r3, [pc, #224]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	099b      	lsrs	r3, r3, #6
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005eea:	623b      	str	r3, [r7, #32]
 8005eec:	2300      	movs	r3, #0
 8005eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ef0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	f04f 0000 	mov.w	r0, #0
 8005efc:	f04f 0100 	mov.w	r1, #0
 8005f00:	0159      	lsls	r1, r3, #5
 8005f02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f06:	0150      	lsls	r0, r2, #5
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4641      	mov	r1, r8
 8005f0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f12:	4649      	mov	r1, r9
 8005f14:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f2c:	ebb2 040a 	subs.w	r4, r2, sl
 8005f30:	eb63 050b 	sbc.w	r5, r3, fp
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	00eb      	lsls	r3, r5, #3
 8005f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f42:	00e2      	lsls	r2, r4, #3
 8005f44:	4614      	mov	r4, r2
 8005f46:	461d      	mov	r5, r3
 8005f48:	4643      	mov	r3, r8
 8005f4a:	18e3      	adds	r3, r4, r3
 8005f4c:	603b      	str	r3, [r7, #0]
 8005f4e:	464b      	mov	r3, r9
 8005f50:	eb45 0303 	adc.w	r3, r5, r3
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f62:	4629      	mov	r1, r5
 8005f64:	028b      	lsls	r3, r1, #10
 8005f66:	4621      	mov	r1, r4
 8005f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	028a      	lsls	r2, r1, #10
 8005f70:	4610      	mov	r0, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f76:	2200      	movs	r2, #0
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	61fa      	str	r2, [r7, #28]
 8005f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f80:	f7fa fd20 	bl	80009c4 <__aeabi_uldivmod>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4613      	mov	r3, r2
 8005f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	3301      	adds	r3, #1
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005f9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fa6:	e002      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fa8:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005faa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3750      	adds	r7, #80	@ 0x50
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fba:	bf00      	nop
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	00f42400 	.word	0x00f42400
 8005fc4:	007a1200 	.word	0x007a1200

08005fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fcc:	4b03      	ldr	r3, [pc, #12]	@ (8005fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fce:	681b      	ldr	r3, [r3, #0]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	2000000c 	.word	0x2000000c

08005fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fe4:	f7ff fff0 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	0a9b      	lsrs	r3, r3, #10
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	4903      	ldr	r1, [pc, #12]	@ (8006004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40023800 	.word	0x40023800
 8006004:	0800e54c 	.word	0x0800e54c

08006008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800600c:	f7ff ffdc 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8006010:	4602      	mov	r2, r0
 8006012:	4b05      	ldr	r3, [pc, #20]	@ (8006028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	0b5b      	lsrs	r3, r3, #13
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	4903      	ldr	r1, [pc, #12]	@ (800602c <HAL_RCC_GetPCLK2Freq+0x24>)
 800601e:	5ccb      	ldrb	r3, [r1, r3]
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006024:	4618      	mov	r0, r3
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40023800 	.word	0x40023800
 800602c:	0800e54c 	.word	0x0800e54c

08006030 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e022      	b.n	8006088 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7fd ff6b 	bl	8003f30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2203      	movs	r2, #3
 800605e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f814 	bl	8006090 <HAL_SD_InitCard>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e00a      	b.n	8006088 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006090:	b5b0      	push	{r4, r5, r7, lr}
 8006092:	b08e      	sub	sp, #56	@ 0x38
 8006094:	af04      	add	r7, sp, #16
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006098:	2300      	movs	r3, #0
 800609a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80060ac:	2376      	movs	r3, #118	@ 0x76
 80060ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681d      	ldr	r5, [r3, #0]
 80060b4:	466c      	mov	r4, sp
 80060b6:	f107 0314 	add.w	r3, r7, #20
 80060ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060c2:	f107 0308 	add.w	r3, r7, #8
 80060c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060c8:	4628      	mov	r0, r5
 80060ca:	f003 fb59 	bl	8009780 <SDIO_Init>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80060d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e04f      	b.n	8006180 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80060e0:	4b29      	ldr	r3, [pc, #164]	@ (8006188 <HAL_SD_InitCard+0xf8>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f003 fb91 	bl	8009812 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80060f0:	4b25      	ldr	r3, [pc, #148]	@ (8006188 <HAL_SD_InitCard+0xf8>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80060f6:	2002      	movs	r0, #2
 80060f8:	f7fe f9ec 	bl	80044d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fe79 	bl	8006df4 <SD_PowerON>
 8006102:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e02e      	b.n	8006180 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fd98 	bl	8006c58 <SD_InitCard>
 8006128:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00b      	beq.n	8006148 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e01b      	b.n	8006180 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006150:	4618      	mov	r0, r3
 8006152:	f003 fbf0 	bl	8009936 <SDMMC_CmdBlockLength>
 8006156:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00f      	beq.n	800617e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a0a      	ldr	r2, [pc, #40]	@ (800618c <HAL_SD_InitCard+0xfc>)
 8006164:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3728      	adds	r7, #40	@ 0x28
 8006184:	46bd      	mov	sp, r7
 8006186:	bdb0      	pop	{r4, r5, r7, pc}
 8006188:	422580a0 	.word	0x422580a0
 800618c:	004005ff 	.word	0x004005ff

08006190 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b092      	sub	sp, #72	@ 0x48
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800619e:	f7fe f98d 	bl	80044bc <HAL_GetTick>
 80061a2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d107      	bne.n	80061c2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e1c5      	b.n	800654e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	f040 81b8 	bne.w	8006540 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	441a      	add	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d907      	bls.n	80061f4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e1ac      	b.n	800654e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2203      	movs	r2, #3
 80061f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2200      	movs	r2, #0
 8006202:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006208:	2b01      	cmp	r3, #1
 800620a:	d002      	beq.n	8006212 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800620c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620e:	025b      	lsls	r3, r3, #9
 8006210:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006212:	f04f 33ff 	mov.w	r3, #4294967295
 8006216:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	025b      	lsls	r3, r3, #9
 800621c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800621e:	2390      	movs	r3, #144	@ 0x90
 8006220:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006222:	2302      	movs	r3, #2
 8006224:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006226:	2300      	movs	r3, #0
 8006228:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800622a:	2301      	movs	r3, #1
 800622c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f107 0214 	add.w	r2, r7, #20
 8006236:	4611      	mov	r1, r2
 8006238:	4618      	mov	r0, r3
 800623a:	f003 fb50 	bl	80098de <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d90a      	bls.n	800625a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2202      	movs	r2, #2
 8006248:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006250:	4618      	mov	r0, r3
 8006252:	f003 fbb4 	bl	80099be <SDMMC_CmdReadMultiBlock>
 8006256:	6478      	str	r0, [r7, #68]	@ 0x44
 8006258:	e009      	b.n	800626e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006266:	4618      	mov	r0, r3
 8006268:	f003 fb87 	bl	800997a <SDMMC_CmdReadSingleBlock>
 800626c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800626e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006270:	2b00      	cmp	r3, #0
 8006272:	d012      	beq.n	800629a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a7e      	ldr	r2, [pc, #504]	@ (8006474 <HAL_SD_ReadBlocks+0x2e4>)
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006282:	431a      	orrs	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e159      	b.n	800654e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800629e:	e061      	b.n	8006364 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d03c      	beq.n	8006328 <HAL_SD_ReadBlocks+0x198>
 80062ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d039      	beq.n	8006328 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80062b4:	2300      	movs	r3, #0
 80062b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80062b8:	e033      	b.n	8006322 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f003 fa89 	bl	80097d6 <SDIO_ReadFIFO>
 80062c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80062c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80062ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d0:	3301      	adds	r3, #1
 80062d2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80062d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d6:	3b01      	subs	r3, #1
 80062d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80062da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80062e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e6:	3301      	adds	r3, #1
 80062e8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80062ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ec:	3b01      	subs	r3, #1
 80062ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f2:	0c1b      	lsrs	r3, r3, #16
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80062fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fc:	3301      	adds	r3, #1
 80062fe:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006302:	3b01      	subs	r3, #1
 8006304:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006308:	0e1b      	lsrs	r3, r3, #24
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006312:	3301      	adds	r3, #1
 8006314:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006318:	3b01      	subs	r3, #1
 800631a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800631c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800631e:	3301      	adds	r3, #1
 8006320:	643b      	str	r3, [r7, #64]	@ 0x40
 8006322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006324:	2b07      	cmp	r3, #7
 8006326:	d9c8      	bls.n	80062ba <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006328:	f7fe f8c8 	bl	80044bc <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006334:	429a      	cmp	r2, r3
 8006336:	d902      	bls.n	800633e <HAL_SD_ReadBlocks+0x1ae>
 8006338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800633a:	2b00      	cmp	r3, #0
 800633c:	d112      	bne.n	8006364 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a4c      	ldr	r2, [pc, #304]	@ (8006474 <HAL_SD_ReadBlocks+0x2e4>)
 8006344:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e0f4      	b.n	800654e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800636a:	f240 332a 	movw	r3, #810	@ 0x32a
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d095      	beq.n	80062a0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800637a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637e:	2b00      	cmp	r3, #0
 8006380:	d022      	beq.n	80063c8 <HAL_SD_ReadBlocks+0x238>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d91f      	bls.n	80063c8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638c:	2b03      	cmp	r3, #3
 800638e:	d01b      	beq.n	80063c8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f003 fb79 	bl	8009a8c <SDMMC_CmdStopTransfer>
 800639a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800639c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d012      	beq.n	80063c8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a33      	ldr	r2, [pc, #204]	@ (8006474 <HAL_SD_ReadBlocks+0x2e4>)
 80063a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0c2      	b.n	800654e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <HAL_SD_ReadBlocks+0x254>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d012      	beq.n	800640a <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a22      	ldr	r2, [pc, #136]	@ (8006474 <HAL_SD_ReadBlocks+0x2e4>)
 80063ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	f043 0208 	orr.w	r2, r3, #8
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e0a1      	b.n	800654e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d012      	beq.n	800643e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a15      	ldr	r2, [pc, #84]	@ (8006474 <HAL_SD_ReadBlocks+0x2e4>)
 800641e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006424:	f043 0202 	orr.w	r2, r3, #2
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e087      	b.n	800654e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	d064      	beq.n	8006516 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a08      	ldr	r2, [pc, #32]	@ (8006474 <HAL_SD_ReadBlocks+0x2e4>)
 8006452:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	f043 0220 	orr.w	r2, r3, #32
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e06d      	b.n	800654e <HAL_SD_ReadBlocks+0x3be>
 8006472:	bf00      	nop
 8006474:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4618      	mov	r0, r3
 800647e:	f003 f9aa 	bl	80097d6 <SDIO_ReadFIFO>
 8006482:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	b2da      	uxtb	r2, r3
 8006488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800648a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800648c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800648e:	3301      	adds	r3, #1
 8006490:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006494:	3b01      	subs	r3, #1
 8006496:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649a:	0a1b      	lsrs	r3, r3, #8
 800649c:	b2da      	uxtb	r2, r3
 800649e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80064a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a4:	3301      	adds	r3, #1
 80064a6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80064a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064aa:	3b01      	subs	r3, #1
 80064ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80064ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80064b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ba:	3301      	adds	r3, #1
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80064be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c0:	3b01      	subs	r3, #1
 80064c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80064c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c6:	0e1b      	lsrs	r3, r3, #24
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064cc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80064ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d0:	3301      	adds	r3, #1
 80064d2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80064d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d6:	3b01      	subs	r3, #1
 80064d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80064da:	f7fd ffef 	bl	80044bc <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d902      	bls.n	80064f0 <HAL_SD_ReadBlocks+0x360>
 80064ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d112      	bne.n	8006516 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a18      	ldr	r2, [pc, #96]	@ (8006558 <HAL_SD_ReadBlocks+0x3c8>)
 80064f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e01b      	b.n	800654e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800651c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_SD_ReadBlocks+0x39a>
 8006524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1a6      	bne.n	8006478 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006532:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	e006      	b.n	800654e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006544:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
  }
}
 800654e:	4618      	mov	r0, r3
 8006550:	3748      	adds	r7, #72	@ 0x48
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	004005ff 	.word	0x004005ff

0800655c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b092      	sub	sp, #72	@ 0x48
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800656a:	f7fd ffa7 	bl	80044bc <HAL_GetTick>
 800656e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d107      	bne.n	800658e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006582:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e16d      	b.n	800686a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b01      	cmp	r3, #1
 8006598:	f040 8160 	bne.w	800685c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80065a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	441a      	add	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d907      	bls.n	80065c0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e154      	b.n	800686a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2203      	movs	r2, #3
 80065c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2200      	movs	r2, #0
 80065ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d002      	beq.n	80065de <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	025b      	lsls	r3, r3, #9
 80065dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065de:	f04f 33ff 	mov.w	r3, #4294967295
 80065e2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	025b      	lsls	r3, r3, #9
 80065e8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80065ea:	2390      	movs	r3, #144	@ 0x90
 80065ec:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80065ee:	2300      	movs	r3, #0
 80065f0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80065f6:	2301      	movs	r3, #1
 80065f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f107 0218 	add.w	r2, r7, #24
 8006602:	4611      	mov	r1, r2
 8006604:	4618      	mov	r0, r3
 8006606:	f003 f96a 	bl	80098de <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d90a      	bls.n	8006626 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800661c:	4618      	mov	r0, r3
 800661e:	f003 fa12 	bl	8009a46 <SDMMC_CmdWriteMultiBlock>
 8006622:	6478      	str	r0, [r7, #68]	@ 0x44
 8006624:	e009      	b.n	800663a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2210      	movs	r2, #16
 800662a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006632:	4618      	mov	r0, r3
 8006634:	f003 f9e5 	bl	8009a02 <SDMMC_CmdWriteSingleBlock>
 8006638:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800663a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800663c:	2b00      	cmp	r3, #0
 800663e:	d012      	beq.n	8006666 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a8b      	ldr	r2, [pc, #556]	@ (8006874 <HAL_SD_WriteBlocks+0x318>)
 8006646:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800664c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800664e:	431a      	orrs	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e101      	b.n	800686a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800666a:	e065      	b.n	8006738 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d040      	beq.n	80066fc <HAL_SD_WriteBlocks+0x1a0>
 800667a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d03d      	beq.n	80066fc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006680:	2300      	movs	r3, #0
 8006682:	643b      	str	r3, [r7, #64]	@ 0x40
 8006684:	e037      	b.n	80066f6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800668c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668e:	3301      	adds	r3, #1
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006694:	3b01      	subs	r3, #1
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	021a      	lsls	r2, r3, #8
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80066a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a6:	3301      	adds	r3, #1
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80066aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ac:	3b01      	subs	r3, #1
 80066ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80066b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	041a      	lsls	r2, r3, #16
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80066bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066be:	3301      	adds	r3, #1
 80066c0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80066c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c4:	3b01      	subs	r3, #1
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80066c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	061a      	lsls	r2, r3, #24
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80066d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d6:	3301      	adds	r3, #1
 80066d8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80066da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066dc:	3b01      	subs	r3, #1
 80066de:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f107 0214 	add.w	r2, r7, #20
 80066e8:	4611      	mov	r1, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f003 f880 	bl	80097f0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80066f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f2:	3301      	adds	r3, #1
 80066f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f8:	2b07      	cmp	r3, #7
 80066fa:	d9c4      	bls.n	8006686 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80066fc:	f7fd fede 	bl	80044bc <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006708:	429a      	cmp	r2, r3
 800670a:	d902      	bls.n	8006712 <HAL_SD_WriteBlocks+0x1b6>
 800670c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800670e:	2b00      	cmp	r3, #0
 8006710:	d112      	bne.n	8006738 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a57      	ldr	r2, [pc, #348]	@ (8006874 <HAL_SD_WriteBlocks+0x318>)
 8006718:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800671e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006720:	431a      	orrs	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e098      	b.n	800686a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800673e:	f240 331a 	movw	r3, #794	@ 0x31a
 8006742:	4013      	ands	r3, r2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d091      	beq.n	800666c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800674e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006752:	2b00      	cmp	r3, #0
 8006754:	d022      	beq.n	800679c <HAL_SD_WriteBlocks+0x240>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d91f      	bls.n	800679c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006760:	2b03      	cmp	r3, #3
 8006762:	d01b      	beq.n	800679c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f003 f98f 	bl	8009a8c <SDMMC_CmdStopTransfer>
 800676e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006772:	2b00      	cmp	r3, #0
 8006774:	d012      	beq.n	800679c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a3e      	ldr	r2, [pc, #248]	@ (8006874 <HAL_SD_WriteBlocks+0x318>)
 800677c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006784:	431a      	orrs	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e066      	b.n	800686a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <HAL_SD_WriteBlocks+0x25c>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d012      	beq.n	80067de <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006874 <HAL_SD_WriteBlocks+0x318>)
 80067be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	f043 0208 	orr.w	r2, r3, #8
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e045      	b.n	800686a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d012      	beq.n	8006812 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a20      	ldr	r2, [pc, #128]	@ (8006874 <HAL_SD_WriteBlocks+0x318>)
 80067f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f8:	f043 0202 	orr.w	r2, r3, #2
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e02b      	b.n	800686a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	d012      	beq.n	8006846 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a13      	ldr	r2, [pc, #76]	@ (8006874 <HAL_SD_WriteBlocks+0x318>)
 8006826:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682c:	f043 0210 	orr.w	r2, r3, #16
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e011      	b.n	800686a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800684e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	e006      	b.n	800686a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006860:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
  }
}
 800686a:	4618      	mov	r0, r3
 800686c:	3748      	adds	r7, #72	@ 0x48
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	004005ff 	.word	0x004005ff

08006878 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006886:	0f9b      	lsrs	r3, r3, #30
 8006888:	b2da      	uxtb	r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006892:	0e9b      	lsrs	r3, r3, #26
 8006894:	b2db      	uxtb	r3, r3
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	b2da      	uxtb	r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068a4:	0e1b      	lsrs	r3, r3, #24
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f003 0303 	and.w	r3, r3, #3
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068c2:	0a1b      	lsrs	r3, r3, #8
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068d8:	0d1b      	lsrs	r3, r3, #20
 80068da:	b29a      	uxth	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068e4:	0c1b      	lsrs	r3, r3, #16
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068f6:	0bdb      	lsrs	r3, r3, #15
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006908:	0b9b      	lsrs	r3, r3, #14
 800690a:	b2db      	uxtb	r3, r3
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	b2da      	uxtb	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800691a:	0b5b      	lsrs	r3, r3, #13
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	b2da      	uxtb	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800692c:	0b1b      	lsrs	r3, r3, #12
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	b2da      	uxtb	r2, r3
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2200      	movs	r2, #0
 800693e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006944:	2b00      	cmp	r3, #0
 8006946:	d163      	bne.n	8006a10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800694c:	009a      	lsls	r2, r3, #2
 800694e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006952:	4013      	ands	r3, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006958:	0f92      	lsrs	r2, r2, #30
 800695a:	431a      	orrs	r2, r3
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006964:	0edb      	lsrs	r3, r3, #27
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	b2da      	uxtb	r2, r3
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006976:	0e1b      	lsrs	r3, r3, #24
 8006978:	b2db      	uxtb	r3, r3
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	b2da      	uxtb	r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006988:	0d5b      	lsrs	r3, r3, #21
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	b2da      	uxtb	r2, r3
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800699a:	0c9b      	lsrs	r3, r3, #18
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069ac:	0bdb      	lsrs	r3, r3, #15
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	7e1b      	ldrb	r3, [r3, #24]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	3302      	adds	r3, #2
 80069d0:	2201      	movs	r2, #1
 80069d2:	fa02 f303 	lsl.w	r3, r2, r3
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80069da:	fb03 f202 	mul.w	r2, r3, r2
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	7a1b      	ldrb	r3, [r3, #8]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	2201      	movs	r2, #1
 80069ee:	409a      	lsls	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80069fc:	0a52      	lsrs	r2, r2, #9
 80069fe:	fb03 f202 	mul.w	r2, r3, r2
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8006a0e:	e031      	b.n	8006a74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d11d      	bne.n	8006a54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	3301      	adds	r3, #1
 8006a34:	029a      	lsls	r2, r3, #10
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a48:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	661a      	str	r2, [r3, #96]	@ 0x60
 8006a52:	e00f      	b.n	8006a74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a58      	ldr	r2, [pc, #352]	@ (8006bbc <HAL_SD_GetCardCSD+0x344>)
 8006a5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e09d      	b.n	8006bb0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a78:	0b9b      	lsrs	r3, r3, #14
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a8a:	09db      	lsrs	r3, r3, #7
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aac:	0fdb      	lsrs	r3, r3, #31
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab8:	0f5b      	lsrs	r3, r3, #29
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aca:	0e9b      	lsrs	r3, r3, #26
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006adc:	0d9b      	lsrs	r3, r3, #22
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aee:	0d5b      	lsrs	r3, r3, #21
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b1e:	0bdb      	lsrs	r3, r3, #15
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b32:	0b9b      	lsrs	r3, r3, #14
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b46:	0b5b      	lsrs	r3, r3, #13
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b5a:	0b1b      	lsrs	r3, r3, #12
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b6e:	0a9b      	lsrs	r3, r3, #10
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	004005ff 	.word	0x004005ff

08006bc0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006c24:	f107 030c 	add.w	r3, r7, #12
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f970 	bl	8006f10 <SD_SendStatus>
 8006c30:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	0a5b      	lsrs	r3, r3, #9
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006c4e:	693b      	ldr	r3, [r7, #16]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c58:	b5b0      	push	{r4, r5, r7, lr}
 8006c5a:	b094      	sub	sp, #80	@ 0x50
 8006c5c:	af04      	add	r7, sp, #16
 8006c5e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006c60:	2301      	movs	r3, #1
 8006c62:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f002 fde0 	bl	800982e <SDIO_GetPowerState>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d102      	bne.n	8006c7a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c74:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006c78:	e0b8      	b.n	8006dec <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d02f      	beq.n	8006ce2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f002 ffc7 	bl	8009c1a <SDMMC_CmdSendCID>
 8006c8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <SD_InitCard+0x40>
    {
      return errorstate;
 8006c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c96:	e0a9      	b.n	8006dec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f002 fe0a 	bl	80098b8 <SDIO_GetResponse>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2104      	movs	r1, #4
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f002 fe01 	bl	80098b8 <SDIO_GetResponse>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2108      	movs	r1, #8
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f002 fdf8 	bl	80098b8 <SDIO_GetResponse>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	210c      	movs	r1, #12
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f002 fdef 	bl	80098b8 <SDIO_GetResponse>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d00d      	beq.n	8006d06 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f107 020e 	add.w	r2, r7, #14
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f002 ffcd 	bl	8009c94 <SDMMC_CmdSetRelAdd>
 8006cfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <SD_InitCard+0xae>
    {
      return errorstate;
 8006d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d04:	e072      	b.n	8006dec <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d036      	beq.n	8006d7c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006d0e:	89fb      	ldrh	r3, [r7, #14]
 8006d10:	461a      	mov	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1e:	041b      	lsls	r3, r3, #16
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f002 ff97 	bl	8009c56 <SDMMC_CmdSendCSD>
 8006d28:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d32:	e05b      	b.n	8006dec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f002 fdbc 	bl	80098b8 <SDIO_GetResponse>
 8006d40:	4602      	mov	r2, r0
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2104      	movs	r1, #4
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f002 fdb3 	bl	80098b8 <SDIO_GetResponse>
 8006d52:	4602      	mov	r2, r0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2108      	movs	r1, #8
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f002 fdaa 	bl	80098b8 <SDIO_GetResponse>
 8006d64:	4602      	mov	r2, r0
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	210c      	movs	r1, #12
 8006d70:	4618      	mov	r0, r3
 8006d72:	f002 fda1 	bl	80098b8 <SDIO_GetResponse>
 8006d76:	4602      	mov	r2, r0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2104      	movs	r1, #4
 8006d82:	4618      	mov	r0, r3
 8006d84:	f002 fd98 	bl	80098b8 <SDIO_GetResponse>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	0d1a      	lsrs	r2, r3, #20
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006d90:	f107 0310 	add.w	r3, r7, #16
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff fd6e 	bl	8006878 <HAL_SD_GetCardCSD>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006da2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006da6:	e021      	b.n	8006dec <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6819      	ldr	r1, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db0:	041b      	lsls	r3, r3, #16
 8006db2:	2200      	movs	r2, #0
 8006db4:	461c      	mov	r4, r3
 8006db6:	4615      	mov	r5, r2
 8006db8:	4622      	mov	r2, r4
 8006dba:	462b      	mov	r3, r5
 8006dbc:	4608      	mov	r0, r1
 8006dbe:	f002 fe87 	bl	8009ad0 <SDMMC_CmdSelDesel>
 8006dc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <SD_InitCard+0x176>
  {
    return errorstate;
 8006dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dcc:	e00e      	b.n	8006dec <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681d      	ldr	r5, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	466c      	mov	r4, sp
 8006dd6:	f103 0210 	add.w	r2, r3, #16
 8006dda:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ddc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006de0:	3304      	adds	r3, #4
 8006de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006de4:	4628      	mov	r0, r5
 8006de6:	f002 fccb 	bl	8009780 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3740      	adds	r7, #64	@ 0x40
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bdb0      	pop	{r4, r5, r7, pc}

08006df4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	2300      	movs	r3, #0
 8006e06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f002 fe82 	bl	8009b16 <SDMMC_CmdGoIdleState>
 8006e12:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <SD_PowerON+0x2a>
  {
    return errorstate;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	e072      	b.n	8006f04 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f002 fe95 	bl	8009b52 <SDMMC_CmdOperCond>
 8006e28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00d      	beq.n	8006e4c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f002 fe6b 	bl	8009b16 <SDMMC_CmdGoIdleState>
 8006e40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	e05b      	b.n	8006f04 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d137      	bne.n	8006eca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f002 fe95 	bl	8009b90 <SDMMC_CmdAppCommand>
 8006e66:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d02d      	beq.n	8006eca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e6e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006e72:	e047      	b.n	8006f04 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f002 fe88 	bl	8009b90 <SDMMC_CmdAppCommand>
 8006e80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <SD_PowerON+0x98>
    {
      return errorstate;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	e03b      	b.n	8006f04 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	491e      	ldr	r1, [pc, #120]	@ (8006f0c <SD_PowerON+0x118>)
 8006e92:	4618      	mov	r0, r3
 8006e94:	f002 fe9e 	bl	8009bd4 <SDMMC_CmdAppOperCommand>
 8006e98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ea0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006ea4:	e02e      	b.n	8006f04 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f002 fd03 	bl	80098b8 <SDIO_GetResponse>
 8006eb2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	0fdb      	lsrs	r3, r3, #31
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <SD_PowerON+0xcc>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e000      	b.n	8006ec2 <SD_PowerON+0xce>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	613b      	str	r3, [r7, #16]

    count++;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d802      	bhi.n	8006eda <SD_PowerON+0xe6>
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0cc      	beq.n	8006e74 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d902      	bls.n	8006eea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006ee4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ee8:	e00c      	b.n	8006f04 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	645a      	str	r2, [r3, #68]	@ 0x44
 8006efa:	e002      	b.n	8006f02 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	c1100000 	.word	0xc1100000

08006f10 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d102      	bne.n	8006f26 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006f20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f24:	e018      	b.n	8006f58 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f002 fecf 	bl	8009cd6 <SDMMC_CmdSendStatus>
 8006f38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	e009      	b.n	8006f58 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f002 fcb4 	bl	80098b8 <SDIO_GetResponse>
 8006f50:	4602      	mov	r2, r0
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e07b      	b.n	800706a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d108      	bne.n	8006f8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f82:	d009      	beq.n	8006f98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	61da      	str	r2, [r3, #28]
 8006f8a:	e005      	b.n	8006f98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fd f836 	bl	8004024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701c:	ea42 0103 	orr.w	r1, r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007024:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	0c1b      	lsrs	r3, r3, #16
 8007036:	f003 0104 	and.w	r1, r3, #4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703e:	f003 0210 	and.w	r2, r3, #16
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69da      	ldr	r2, [r3, #28]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007058:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b088      	sub	sp, #32
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	4613      	mov	r3, r2
 8007080:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007082:	f7fd fa1b 	bl	80044bc <HAL_GetTick>
 8007086:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b01      	cmp	r3, #1
 8007096:	d001      	beq.n	800709c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007098:	2302      	movs	r3, #2
 800709a:	e12a      	b.n	80072f2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <HAL_SPI_Transmit+0x36>
 80070a2:	88fb      	ldrh	r3, [r7, #6]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e122      	b.n	80072f2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_SPI_Transmit+0x48>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e11b      	b.n	80072f2 <HAL_SPI_Transmit+0x280>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2203      	movs	r2, #3
 80070c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	88fa      	ldrh	r2, [r7, #6]
 80070da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	88fa      	ldrh	r2, [r7, #6]
 80070e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007108:	d10f      	bne.n	800712a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007118:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007128:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007134:	2b40      	cmp	r3, #64	@ 0x40
 8007136:	d007      	beq.n	8007148 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007146:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007150:	d152      	bne.n	80071f8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <HAL_SPI_Transmit+0xee>
 800715a:	8b7b      	ldrh	r3, [r7, #26]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d145      	bne.n	80071ec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007164:	881a      	ldrh	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007170:	1c9a      	adds	r2, r3, #2
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007184:	e032      	b.n	80071ec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b02      	cmp	r3, #2
 8007192:	d112      	bne.n	80071ba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007198:	881a      	ldrh	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a4:	1c9a      	adds	r2, r3, #2
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80071b8:	e018      	b.n	80071ec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071ba:	f7fd f97f 	bl	80044bc <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d803      	bhi.n	80071d2 <HAL_SPI_Transmit+0x160>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d0:	d102      	bne.n	80071d8 <HAL_SPI_Transmit+0x166>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d109      	bne.n	80071ec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e082      	b.n	80072f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1c7      	bne.n	8007186 <HAL_SPI_Transmit+0x114>
 80071f6:	e053      	b.n	80072a0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <HAL_SPI_Transmit+0x194>
 8007200:	8b7b      	ldrh	r3, [r7, #26]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d147      	bne.n	8007296 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	330c      	adds	r3, #12
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007222:	b29b      	uxth	r3, r3
 8007224:	3b01      	subs	r3, #1
 8007226:	b29a      	uxth	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800722c:	e033      	b.n	8007296 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b02      	cmp	r3, #2
 800723a:	d113      	bne.n	8007264 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	330c      	adds	r3, #12
 8007246:	7812      	ldrb	r2, [r2, #0]
 8007248:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007262:	e018      	b.n	8007296 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007264:	f7fd f92a 	bl	80044bc <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d803      	bhi.n	800727c <HAL_SPI_Transmit+0x20a>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	d102      	bne.n	8007282 <HAL_SPI_Transmit+0x210>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d109      	bne.n	8007296 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e02d      	b.n	80072f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1c6      	bne.n	800722e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 ffb7 	bl	8008218 <SPI_EndRxTxTransaction>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	617b      	str	r3, [r7, #20]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80072f0:	2300      	movs	r3, #0
  }
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3720      	adds	r7, #32
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b088      	sub	sp, #32
 80072fe:	af02      	add	r7, sp, #8
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	603b      	str	r3, [r7, #0]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b01      	cmp	r3, #1
 8007314:	d001      	beq.n	800731a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007316:	2302      	movs	r3, #2
 8007318:	e104      	b.n	8007524 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007322:	d112      	bne.n	800734a <HAL_SPI_Receive+0x50>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10e      	bne.n	800734a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2204      	movs	r2, #4
 8007330:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007334:	88fa      	ldrh	r2, [r7, #6]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	4613      	mov	r3, r2
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f8f3 	bl	800752c <HAL_SPI_TransmitReceive>
 8007346:	4603      	mov	r3, r0
 8007348:	e0ec      	b.n	8007524 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800734a:	f7fd f8b7 	bl	80044bc <HAL_GetTick>
 800734e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <HAL_SPI_Receive+0x62>
 8007356:	88fb      	ldrh	r3, [r7, #6]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e0e1      	b.n	8007524 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007366:	2b01      	cmp	r3, #1
 8007368:	d101      	bne.n	800736e <HAL_SPI_Receive+0x74>
 800736a:	2302      	movs	r3, #2
 800736c:	e0da      	b.n	8007524 <HAL_SPI_Receive+0x22a>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2204      	movs	r2, #4
 800737a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	88fa      	ldrh	r2, [r7, #6]
 800738e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	88fa      	ldrh	r2, [r7, #6]
 8007394:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073bc:	d10f      	bne.n	80073de <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80073dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e8:	2b40      	cmp	r3, #64	@ 0x40
 80073ea:	d007      	beq.n	80073fc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d170      	bne.n	80074e6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007404:	e035      	b.n	8007472 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	d115      	bne.n	8007440 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f103 020c 	add.w	r2, r3, #12
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800743e:	e018      	b.n	8007472 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007440:	f7fd f83c 	bl	80044bc <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d803      	bhi.n	8007458 <HAL_SPI_Receive+0x15e>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d102      	bne.n	800745e <HAL_SPI_Receive+0x164>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d109      	bne.n	8007472 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e058      	b.n	8007524 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1c4      	bne.n	8007406 <HAL_SPI_Receive+0x10c>
 800747c:	e038      	b.n	80074f0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b01      	cmp	r3, #1
 800748a:	d113      	bne.n	80074b4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007496:	b292      	uxth	r2, r2
 8007498:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749e:	1c9a      	adds	r2, r3, #2
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074b2:	e018      	b.n	80074e6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074b4:	f7fd f802 	bl	80044bc <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d803      	bhi.n	80074cc <HAL_SPI_Receive+0x1d2>
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	d102      	bne.n	80074d2 <HAL_SPI_Receive+0x1d8>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e01e      	b.n	8007524 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1c6      	bne.n	800747e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 fe29 	bl	800814c <SPI_EndRxTransaction>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2220      	movs	r2, #32
 8007504:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007522:	2300      	movs	r3, #0
  }
}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08a      	sub	sp, #40	@ 0x28
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800753a:	2301      	movs	r3, #1
 800753c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800753e:	f7fc ffbd 	bl	80044bc <HAL_GetTick>
 8007542:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800754a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007552:	887b      	ldrh	r3, [r7, #2]
 8007554:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007556:	7ffb      	ldrb	r3, [r7, #31]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d00c      	beq.n	8007576 <HAL_SPI_TransmitReceive+0x4a>
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007562:	d106      	bne.n	8007572 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d102      	bne.n	8007572 <HAL_SPI_TransmitReceive+0x46>
 800756c:	7ffb      	ldrb	r3, [r7, #31]
 800756e:	2b04      	cmp	r3, #4
 8007570:	d001      	beq.n	8007576 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007572:	2302      	movs	r3, #2
 8007574:	e17f      	b.n	8007876 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d005      	beq.n	8007588 <HAL_SPI_TransmitReceive+0x5c>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_SPI_TransmitReceive+0x5c>
 8007582:	887b      	ldrh	r3, [r7, #2]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e174      	b.n	8007876 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <HAL_SPI_TransmitReceive+0x6e>
 8007596:	2302      	movs	r3, #2
 8007598:	e16d      	b.n	8007876 <HAL_SPI_TransmitReceive+0x34a>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d003      	beq.n	80075b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2205      	movs	r2, #5
 80075b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	887a      	ldrh	r2, [r7, #2]
 80075c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	887a      	ldrh	r2, [r7, #2]
 80075cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	887a      	ldrh	r2, [r7, #2]
 80075d8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	887a      	ldrh	r2, [r7, #2]
 80075de:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f6:	2b40      	cmp	r3, #64	@ 0x40
 80075f8:	d007      	beq.n	800760a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007608:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007612:	d17e      	bne.n	8007712 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <HAL_SPI_TransmitReceive+0xf6>
 800761c:	8afb      	ldrh	r3, [r7, #22]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d16c      	bne.n	80076fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007626:	881a      	ldrh	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007632:	1c9a      	adds	r2, r3, #2
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007646:	e059      	b.n	80076fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b02      	cmp	r3, #2
 8007654:	d11b      	bne.n	800768e <HAL_SPI_TransmitReceive+0x162>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d016      	beq.n	800768e <HAL_SPI_TransmitReceive+0x162>
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	2b01      	cmp	r3, #1
 8007664:	d113      	bne.n	800768e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766a:	881a      	ldrh	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007676:	1c9a      	adds	r2, r3, #2
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d119      	bne.n	80076d0 <HAL_SPI_TransmitReceive+0x1a4>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d014      	beq.n	80076d0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b0:	b292      	uxth	r2, r2
 80076b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b8:	1c9a      	adds	r2, r3, #2
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076cc:	2301      	movs	r3, #1
 80076ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076d0:	f7fc fef4 	bl	80044bc <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076dc:	429a      	cmp	r2, r3
 80076de:	d80d      	bhi.n	80076fc <HAL_SPI_TransmitReceive+0x1d0>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e6:	d009      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e0bc      	b.n	8007876 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007700:	b29b      	uxth	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1a0      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x11c>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d19b      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x11c>
 8007710:	e082      	b.n	8007818 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <HAL_SPI_TransmitReceive+0x1f4>
 800771a:	8afb      	ldrh	r3, [r7, #22]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d171      	bne.n	8007804 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007746:	e05d      	b.n	8007804 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b02      	cmp	r3, #2
 8007754:	d11c      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x264>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d017      	beq.n	8007790 <HAL_SPI_TransmitReceive+0x264>
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	2b01      	cmp	r3, #1
 8007764:	d114      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	330c      	adds	r3, #12
 8007770:	7812      	ldrb	r2, [r2, #0]
 8007772:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b01      	cmp	r3, #1
 800779c:	d119      	bne.n	80077d2 <HAL_SPI_TransmitReceive+0x2a6>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d014      	beq.n	80077d2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b2:	b2d2      	uxtb	r2, r2
 80077b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077ce:	2301      	movs	r3, #1
 80077d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077d2:	f7fc fe73 	bl	80044bc <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077de:	429a      	cmp	r2, r3
 80077e0:	d803      	bhi.n	80077ea <HAL_SPI_TransmitReceive+0x2be>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e8:	d102      	bne.n	80077f0 <HAL_SPI_TransmitReceive+0x2c4>
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d109      	bne.n	8007804 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e038      	b.n	8007876 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d19c      	bne.n	8007748 <HAL_SPI_TransmitReceive+0x21c>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007812:	b29b      	uxth	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d197      	bne.n	8007748 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007818:	6a3a      	ldr	r2, [r7, #32]
 800781a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fcfb 	bl	8008218 <SPI_EndRxTxTransaction>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d008      	beq.n	800783a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2220      	movs	r2, #32
 800782c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e01d      	b.n	8007876 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10a      	bne.n	8007858 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007842:	2300      	movs	r3, #0
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	613b      	str	r3, [r7, #16]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	613b      	str	r3, [r7, #16]
 8007856:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e000      	b.n	8007876 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007874:	2300      	movs	r3, #0
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3728      	adds	r7, #40	@ 0x28
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b01      	cmp	r3, #1
 8007898:	d001      	beq.n	800789e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800789a:	2302      	movs	r3, #2
 800789c:	e097      	b.n	80079ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <HAL_SPI_Transmit_DMA+0x2a>
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e08f      	b.n	80079ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_SPI_Transmit_DMA+0x3c>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e088      	b.n	80079ce <HAL_SPI_Transmit_DMA+0x14e>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2203      	movs	r2, #3
 80078c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	88fa      	ldrh	r2, [r7, #6]
 80078dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	88fa      	ldrh	r2, [r7, #6]
 80078e2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800790a:	d10f      	bne.n	800792c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800791a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800792a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007930:	4a29      	ldr	r2, [pc, #164]	@ (80079d8 <HAL_SPI_Transmit_DMA+0x158>)
 8007932:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007938:	4a28      	ldr	r2, [pc, #160]	@ (80079dc <HAL_SPI_Transmit_DMA+0x15c>)
 800793a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007940:	4a27      	ldr	r2, [pc, #156]	@ (80079e0 <HAL_SPI_Transmit_DMA+0x160>)
 8007942:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007948:	2200      	movs	r2, #0
 800794a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007954:	4619      	mov	r1, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	330c      	adds	r3, #12
 800795c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007962:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007964:	f7fd f9c2 	bl	8004cec <HAL_DMA_Start_IT>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00b      	beq.n	8007986 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007972:	f043 0210 	orr.w	r2, r3, #16
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e023      	b.n	80079ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007990:	2b40      	cmp	r3, #64	@ 0x40
 8007992:	d007      	beq.n	80079a4 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079a2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0220 	orr.w	r2, r2, #32
 80079ba:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0202 	orr.w	r2, r2, #2
 80079ca:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	08007fa9 	.word	0x08007fa9
 80079dc:	08007dc9 	.word	0x08007dc9
 80079e0:	08007ffd 	.word	0x08007ffd

080079e4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	4613      	mov	r3, r2
 80079f0:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d001      	beq.n	8007a02 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 80079fe:	2302      	movs	r3, #2
 8007a00:	e0a9      	b.n	8007b56 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d110      	bne.n	8007a2c <HAL_SPI_Receive_DMA+0x48>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a12:	d10b      	bne.n	8007a2c <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2204      	movs	r2, #4
 8007a18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007a1c:	88fb      	ldrh	r3, [r7, #6]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	68b9      	ldr	r1, [r7, #8]
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 f8a2 	bl	8007b6c <HAL_SPI_TransmitReceive_DMA>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	e094      	b.n	8007b56 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_SPI_Receive_DMA+0x54>
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e08c      	b.n	8007b56 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_SPI_Receive_DMA+0x66>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e085      	b.n	8007b56 <HAL_SPI_Receive_DMA+0x172>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2204      	movs	r2, #4
 8007a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	88fa      	ldrh	r2, [r7, #6]
 8007a6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	88fa      	ldrh	r2, [r7, #6]
 8007a70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a92:	d10f      	bne.n	8007ab4 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007aa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ab2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ab8:	4a29      	ldr	r2, [pc, #164]	@ (8007b60 <HAL_SPI_Receive_DMA+0x17c>)
 8007aba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ac0:	4a28      	ldr	r2, [pc, #160]	@ (8007b64 <HAL_SPI_Receive_DMA+0x180>)
 8007ac2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ac8:	4a27      	ldr	r2, [pc, #156]	@ (8007b68 <HAL_SPI_Receive_DMA+0x184>)
 8007aca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	330c      	adds	r3, #12
 8007ade:	4619      	mov	r1, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007aec:	f7fd f8fe 	bl	8004cec <HAL_DMA_Start_IT>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00b      	beq.n	8007b0e <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007afa:	f043 0210 	orr.w	r2, r3, #16
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e023      	b.n	8007b56 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b18:	2b40      	cmp	r3, #64	@ 0x40
 8007b1a:	d007      	beq.n	8007b2c <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b2a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0220 	orr.w	r2, r2, #32
 8007b42:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f042 0201 	orr.w	r2, r2, #1
 8007b52:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	08007fc5 	.word	0x08007fc5
 8007b64:	08007e71 	.word	0x08007e71
 8007b68:	08007ffd 	.word	0x08007ffd

08007b6c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
 8007b78:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b80:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d00c      	beq.n	8007ba8 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b94:	d106      	bne.n	8007ba4 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d102      	bne.n	8007ba4 <HAL_SPI_TransmitReceive_DMA+0x38>
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d001      	beq.n	8007ba8 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e0cf      	b.n	8007d48 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007bb4:	887b      	ldrh	r3, [r7, #2]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e0c4      	b.n	8007d48 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_SPI_TransmitReceive_DMA+0x60>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e0bd      	b.n	8007d48 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d003      	beq.n	8007be8 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2205      	movs	r2, #5
 8007be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	887a      	ldrh	r2, [r7, #2]
 8007bf8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	887a      	ldrh	r2, [r7, #2]
 8007bfe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	887a      	ldrh	r2, [r7, #2]
 8007c0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	887a      	ldrh	r2, [r7, #2]
 8007c10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d108      	bne.n	8007c3c <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c2e:	4a48      	ldr	r2, [pc, #288]	@ (8007d50 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8007c30:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c36:	4a47      	ldr	r2, [pc, #284]	@ (8007d54 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8007c38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007c3a:	e007      	b.n	8007c4c <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c40:	4a45      	ldr	r2, [pc, #276]	@ (8007d58 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8007c42:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c48:	4a44      	ldr	r2, [pc, #272]	@ (8007d5c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c50:	4a43      	ldr	r2, [pc, #268]	@ (8007d60 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007c52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c58:	2200      	movs	r2, #0
 8007c5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	330c      	adds	r3, #12
 8007c66:	4619      	mov	r1, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c6c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007c74:	f7fd f83a 	bl	8004cec <HAL_DMA_Start_IT>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00b      	beq.n	8007c96 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c82:	f043 0210 	orr.w	r2, r3, #16
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e058      	b.n	8007d48 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f042 0201 	orr.w	r2, r2, #1
 8007ca4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007caa:	2200      	movs	r2, #0
 8007cac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cba:	2200      	movs	r2, #0
 8007cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cce:	4619      	mov	r1, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	330c      	adds	r3, #12
 8007cd6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cdc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007cde:	f7fd f805 	bl	8004cec <HAL_DMA_Start_IT>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cec:	f043 0210 	orr.w	r2, r3, #16
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e023      	b.n	8007d48 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0a:	2b40      	cmp	r3, #64	@ 0x40
 8007d0c:	d007      	beq.n	8007d1e <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d1c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 0220 	orr.w	r2, r2, #32
 8007d34:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f042 0202 	orr.w	r2, r2, #2
 8007d44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	08007fc5 	.word	0x08007fc5
 8007d54:	08007e71 	.word	0x08007e71
 8007d58:	08007fe1 	.word	0x08007fe1
 8007d5c:	08007f19 	.word	0x08007f19
 8007d60:	08007ffd 	.word	0x08007ffd

08007d64 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dd6:	f7fc fb71 	bl	80044bc <HAL_GetTick>
 8007dda:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dea:	d03b      	beq.n	8007e64 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f022 0220 	bic.w	r2, r2, #32
 8007dfa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0202 	bic.w	r2, r2, #2
 8007e0a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	2164      	movs	r1, #100	@ 0x64
 8007e10:	6978      	ldr	r0, [r7, #20]
 8007e12:	f000 fa01 	bl	8008218 <SPI_EndRxTxTransaction>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d005      	beq.n	8007e28 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e20:	f043 0220 	orr.w	r2, r3, #32
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007e5c:	6978      	ldr	r0, [r7, #20]
 8007e5e:	f7ff ffa9 	bl	8007db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007e62:	e002      	b.n	8007e6a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007e64:	6978      	ldr	r0, [r7, #20]
 8007e66:	f7fa fc1d 	bl	80026a4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e7e:	f7fc fb1d 	bl	80044bc <HAL_GetTick>
 8007e82:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e92:	d03b      	beq.n	8007f0c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0220 	bic.w	r2, r2, #32
 8007ea2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10d      	bne.n	8007ec8 <SPI_DMAReceiveCplt+0x58>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007eb4:	d108      	bne.n	8007ec8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 0203 	bic.w	r2, r2, #3
 8007ec4:	605a      	str	r2, [r3, #4]
 8007ec6:	e007      	b.n	8007ed8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0201 	bic.w	r2, r2, #1
 8007ed6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	2164      	movs	r1, #100	@ 0x64
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 f935 	bl	800814c <SPI_EndRxTransaction>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d003      	beq.n	8007f0c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7ff ff55 	bl	8007db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007f0a:	e002      	b.n	8007f12 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7fa fbdf 	bl	80026d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f24:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f26:	f7fc fac9 	bl	80044bc <HAL_GetTick>
 8007f2a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f3a:	d02f      	beq.n	8007f9c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 0220 	bic.w	r2, r2, #32
 8007f4a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	2164      	movs	r1, #100	@ 0x64
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f961 	bl	8008218 <SPI_EndRxTxTransaction>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f60:	f043 0220 	orr.w	r2, r3, #32
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0203 	bic.w	r2, r2, #3
 8007f76:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7ff ff0d 	bl	8007db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007f9a:	e002      	b.n	8007fa2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff fee1 	bl	8007d64 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7ff fede 	bl	8007d78 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f7ff feda 	bl	8007d8c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fd8:	bf00      	nop
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fec:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7ff fed6 	bl	8007da0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ff4:	bf00      	nop
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008008:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0203 	bic.w	r2, r2, #3
 8008018:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801e:	f043 0210 	orr.w	r2, r3, #16
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7ff fec0 	bl	8007db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008034:	bf00      	nop
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	4613      	mov	r3, r2
 800804a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800804c:	f7fc fa36 	bl	80044bc <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	4413      	add	r3, r2
 800805a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800805c:	f7fc fa2e 	bl	80044bc <HAL_GetTick>
 8008060:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008062:	4b39      	ldr	r3, [pc, #228]	@ (8008148 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	015b      	lsls	r3, r3, #5
 8008068:	0d1b      	lsrs	r3, r3, #20
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	fb02 f303 	mul.w	r3, r2, r3
 8008070:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008072:	e054      	b.n	800811e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807a:	d050      	beq.n	800811e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800807c:	f7fc fa1e 	bl	80044bc <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	429a      	cmp	r2, r3
 800808a:	d902      	bls.n	8008092 <SPI_WaitFlagStateUntilTimeout+0x56>
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d13d      	bne.n	800810e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80080a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080aa:	d111      	bne.n	80080d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080b4:	d004      	beq.n	80080c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080be:	d107      	bne.n	80080d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080d8:	d10f      	bne.n	80080fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e017      	b.n	800813e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	3b01      	subs	r3, #1
 800811c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4013      	ands	r3, r2
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	429a      	cmp	r2, r3
 800812c:	bf0c      	ite	eq
 800812e:	2301      	moveq	r3, #1
 8008130:	2300      	movne	r3, #0
 8008132:	b2db      	uxtb	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	429a      	cmp	r2, r3
 800813a:	d19b      	bne.n	8008074 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3720      	adds	r7, #32
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	2000000c 	.word	0x2000000c

0800814c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af02      	add	r7, sp, #8
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008160:	d111      	bne.n	8008186 <SPI_EndRxTransaction+0x3a>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800816a:	d004      	beq.n	8008176 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008174:	d107      	bne.n	8008186 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008184:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800818e:	d12a      	bne.n	80081e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008198:	d012      	beq.n	80081c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2200      	movs	r2, #0
 80081a2:	2180      	movs	r1, #128	@ 0x80
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff ff49 	bl	800803c <SPI_WaitFlagStateUntilTimeout>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d02d      	beq.n	800820c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b4:	f043 0220 	orr.w	r2, r3, #32
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e026      	b.n	800820e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2200      	movs	r2, #0
 80081c8:	2101      	movs	r1, #1
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7ff ff36 	bl	800803c <SPI_WaitFlagStateUntilTimeout>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d01a      	beq.n	800820c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081da:	f043 0220 	orr.w	r2, r3, #32
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e013      	b.n	800820e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2200      	movs	r2, #0
 80081ee:	2101      	movs	r1, #1
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7ff ff23 	bl	800803c <SPI_WaitFlagStateUntilTimeout>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d007      	beq.n	800820c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008200:	f043 0220 	orr.w	r2, r3, #32
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e000      	b.n	800820e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af02      	add	r7, sp, #8
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2201      	movs	r2, #1
 800822c:	2102      	movs	r1, #2
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff ff04 	bl	800803c <SPI_WaitFlagStateUntilTimeout>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823e:	f043 0220 	orr.w	r2, r3, #32
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e032      	b.n	80082b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800824a:	4b1b      	ldr	r3, [pc, #108]	@ (80082b8 <SPI_EndRxTxTransaction+0xa0>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a1b      	ldr	r2, [pc, #108]	@ (80082bc <SPI_EndRxTxTransaction+0xa4>)
 8008250:	fba2 2303 	umull	r2, r3, r2, r3
 8008254:	0d5b      	lsrs	r3, r3, #21
 8008256:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800825a:	fb02 f303 	mul.w	r3, r2, r3
 800825e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008268:	d112      	bne.n	8008290 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2200      	movs	r2, #0
 8008272:	2180      	movs	r1, #128	@ 0x80
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7ff fee1 	bl	800803c <SPI_WaitFlagStateUntilTimeout>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d016      	beq.n	80082ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008284:	f043 0220 	orr.w	r2, r3, #32
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e00f      	b.n	80082b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	3b01      	subs	r3, #1
 800829a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a6:	2b80      	cmp	r3, #128	@ 0x80
 80082a8:	d0f2      	beq.n	8008290 <SPI_EndRxTxTransaction+0x78>
 80082aa:	e000      	b.n	80082ae <SPI_EndRxTxTransaction+0x96>
        break;
 80082ac:	bf00      	nop
  }

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	2000000c 	.word	0x2000000c
 80082bc:	165e9f81 	.word	0x165e9f81

080082c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e041      	b.n	8008356 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d106      	bne.n	80082ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fb ff48 	bl	800417c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	f000 f95e 	bl	80085c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b01      	cmp	r3, #1
 8008372:	d001      	beq.n	8008378 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e046      	b.n	8008406 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2202      	movs	r2, #2
 800837c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a23      	ldr	r2, [pc, #140]	@ (8008414 <HAL_TIM_Base_Start+0xb4>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d022      	beq.n	80083d0 <HAL_TIM_Base_Start+0x70>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008392:	d01d      	beq.n	80083d0 <HAL_TIM_Base_Start+0x70>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a1f      	ldr	r2, [pc, #124]	@ (8008418 <HAL_TIM_Base_Start+0xb8>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d018      	beq.n	80083d0 <HAL_TIM_Base_Start+0x70>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a1e      	ldr	r2, [pc, #120]	@ (800841c <HAL_TIM_Base_Start+0xbc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d013      	beq.n	80083d0 <HAL_TIM_Base_Start+0x70>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008420 <HAL_TIM_Base_Start+0xc0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00e      	beq.n	80083d0 <HAL_TIM_Base_Start+0x70>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008424 <HAL_TIM_Base_Start+0xc4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d009      	beq.n	80083d0 <HAL_TIM_Base_Start+0x70>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a19      	ldr	r2, [pc, #100]	@ (8008428 <HAL_TIM_Base_Start+0xc8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d004      	beq.n	80083d0 <HAL_TIM_Base_Start+0x70>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a18      	ldr	r2, [pc, #96]	@ (800842c <HAL_TIM_Base_Start+0xcc>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d111      	bne.n	80083f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b06      	cmp	r3, #6
 80083e0:	d010      	beq.n	8008404 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f042 0201 	orr.w	r2, r2, #1
 80083f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f2:	e007      	b.n	8008404 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0201 	orr.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40010000 	.word	0x40010000
 8008418:	40000400 	.word	0x40000400
 800841c:	40000800 	.word	0x40000800
 8008420:	40000c00 	.word	0x40000c00
 8008424:	40010400 	.word	0x40010400
 8008428:	40014000 	.word	0x40014000
 800842c:	40001800 	.word	0x40001800

08008430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008444:	2b01      	cmp	r3, #1
 8008446:	d101      	bne.n	800844c <HAL_TIM_ConfigClockSource+0x1c>
 8008448:	2302      	movs	r3, #2
 800844a:	e0b4      	b.n	80085b6 <HAL_TIM_ConfigClockSource+0x186>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2202      	movs	r2, #2
 8008458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800846a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008484:	d03e      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0xd4>
 8008486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800848a:	f200 8087 	bhi.w	800859c <HAL_TIM_ConfigClockSource+0x16c>
 800848e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008492:	f000 8086 	beq.w	80085a2 <HAL_TIM_ConfigClockSource+0x172>
 8008496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800849a:	d87f      	bhi.n	800859c <HAL_TIM_ConfigClockSource+0x16c>
 800849c:	2b70      	cmp	r3, #112	@ 0x70
 800849e:	d01a      	beq.n	80084d6 <HAL_TIM_ConfigClockSource+0xa6>
 80084a0:	2b70      	cmp	r3, #112	@ 0x70
 80084a2:	d87b      	bhi.n	800859c <HAL_TIM_ConfigClockSource+0x16c>
 80084a4:	2b60      	cmp	r3, #96	@ 0x60
 80084a6:	d050      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x11a>
 80084a8:	2b60      	cmp	r3, #96	@ 0x60
 80084aa:	d877      	bhi.n	800859c <HAL_TIM_ConfigClockSource+0x16c>
 80084ac:	2b50      	cmp	r3, #80	@ 0x50
 80084ae:	d03c      	beq.n	800852a <HAL_TIM_ConfigClockSource+0xfa>
 80084b0:	2b50      	cmp	r3, #80	@ 0x50
 80084b2:	d873      	bhi.n	800859c <HAL_TIM_ConfigClockSource+0x16c>
 80084b4:	2b40      	cmp	r3, #64	@ 0x40
 80084b6:	d058      	beq.n	800856a <HAL_TIM_ConfigClockSource+0x13a>
 80084b8:	2b40      	cmp	r3, #64	@ 0x40
 80084ba:	d86f      	bhi.n	800859c <HAL_TIM_ConfigClockSource+0x16c>
 80084bc:	2b30      	cmp	r3, #48	@ 0x30
 80084be:	d064      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x15a>
 80084c0:	2b30      	cmp	r3, #48	@ 0x30
 80084c2:	d86b      	bhi.n	800859c <HAL_TIM_ConfigClockSource+0x16c>
 80084c4:	2b20      	cmp	r3, #32
 80084c6:	d060      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x15a>
 80084c8:	2b20      	cmp	r3, #32
 80084ca:	d867      	bhi.n	800859c <HAL_TIM_ConfigClockSource+0x16c>
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d05c      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x15a>
 80084d0:	2b10      	cmp	r3, #16
 80084d2:	d05a      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x15a>
 80084d4:	e062      	b.n	800859c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084e6:	f000 f991 	bl	800880c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	609a      	str	r2, [r3, #8]
      break;
 8008502:	e04f      	b.n	80085a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008514:	f000 f97a 	bl	800880c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689a      	ldr	r2, [r3, #8]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008526:	609a      	str	r2, [r3, #8]
      break;
 8008528:	e03c      	b.n	80085a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008536:	461a      	mov	r2, r3
 8008538:	f000 f8ee 	bl	8008718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2150      	movs	r1, #80	@ 0x50
 8008542:	4618      	mov	r0, r3
 8008544:	f000 f947 	bl	80087d6 <TIM_ITRx_SetConfig>
      break;
 8008548:	e02c      	b.n	80085a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008556:	461a      	mov	r2, r3
 8008558:	f000 f90d 	bl	8008776 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2160      	movs	r1, #96	@ 0x60
 8008562:	4618      	mov	r0, r3
 8008564:	f000 f937 	bl	80087d6 <TIM_ITRx_SetConfig>
      break;
 8008568:	e01c      	b.n	80085a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008576:	461a      	mov	r2, r3
 8008578:	f000 f8ce 	bl	8008718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2140      	movs	r1, #64	@ 0x40
 8008582:	4618      	mov	r0, r3
 8008584:	f000 f927 	bl	80087d6 <TIM_ITRx_SetConfig>
      break;
 8008588:	e00c      	b.n	80085a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4619      	mov	r1, r3
 8008594:	4610      	mov	r0, r2
 8008596:	f000 f91e 	bl	80087d6 <TIM_ITRx_SetConfig>
      break;
 800859a:	e003      	b.n	80085a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	73fb      	strb	r3, [r7, #15]
      break;
 80085a0:	e000      	b.n	80085a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a46      	ldr	r2, [pc, #280]	@ (80086ec <TIM_Base_SetConfig+0x12c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d013      	beq.n	8008600 <TIM_Base_SetConfig+0x40>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085de:	d00f      	beq.n	8008600 <TIM_Base_SetConfig+0x40>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a43      	ldr	r2, [pc, #268]	@ (80086f0 <TIM_Base_SetConfig+0x130>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d00b      	beq.n	8008600 <TIM_Base_SetConfig+0x40>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a42      	ldr	r2, [pc, #264]	@ (80086f4 <TIM_Base_SetConfig+0x134>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d007      	beq.n	8008600 <TIM_Base_SetConfig+0x40>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a41      	ldr	r2, [pc, #260]	@ (80086f8 <TIM_Base_SetConfig+0x138>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d003      	beq.n	8008600 <TIM_Base_SetConfig+0x40>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a40      	ldr	r2, [pc, #256]	@ (80086fc <TIM_Base_SetConfig+0x13c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d108      	bne.n	8008612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	4313      	orrs	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a35      	ldr	r2, [pc, #212]	@ (80086ec <TIM_Base_SetConfig+0x12c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d02b      	beq.n	8008672 <TIM_Base_SetConfig+0xb2>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008620:	d027      	beq.n	8008672 <TIM_Base_SetConfig+0xb2>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a32      	ldr	r2, [pc, #200]	@ (80086f0 <TIM_Base_SetConfig+0x130>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d023      	beq.n	8008672 <TIM_Base_SetConfig+0xb2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a31      	ldr	r2, [pc, #196]	@ (80086f4 <TIM_Base_SetConfig+0x134>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d01f      	beq.n	8008672 <TIM_Base_SetConfig+0xb2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a30      	ldr	r2, [pc, #192]	@ (80086f8 <TIM_Base_SetConfig+0x138>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d01b      	beq.n	8008672 <TIM_Base_SetConfig+0xb2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a2f      	ldr	r2, [pc, #188]	@ (80086fc <TIM_Base_SetConfig+0x13c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d017      	beq.n	8008672 <TIM_Base_SetConfig+0xb2>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a2e      	ldr	r2, [pc, #184]	@ (8008700 <TIM_Base_SetConfig+0x140>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d013      	beq.n	8008672 <TIM_Base_SetConfig+0xb2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a2d      	ldr	r2, [pc, #180]	@ (8008704 <TIM_Base_SetConfig+0x144>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d00f      	beq.n	8008672 <TIM_Base_SetConfig+0xb2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a2c      	ldr	r2, [pc, #176]	@ (8008708 <TIM_Base_SetConfig+0x148>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d00b      	beq.n	8008672 <TIM_Base_SetConfig+0xb2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a2b      	ldr	r2, [pc, #172]	@ (800870c <TIM_Base_SetConfig+0x14c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d007      	beq.n	8008672 <TIM_Base_SetConfig+0xb2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a2a      	ldr	r2, [pc, #168]	@ (8008710 <TIM_Base_SetConfig+0x150>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d003      	beq.n	8008672 <TIM_Base_SetConfig+0xb2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a29      	ldr	r2, [pc, #164]	@ (8008714 <TIM_Base_SetConfig+0x154>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d108      	bne.n	8008684 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	4313      	orrs	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	4313      	orrs	r3, r2
 8008690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	689a      	ldr	r2, [r3, #8]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a10      	ldr	r2, [pc, #64]	@ (80086ec <TIM_Base_SetConfig+0x12c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_Base_SetConfig+0xf8>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a12      	ldr	r2, [pc, #72]	@ (80086fc <TIM_Base_SetConfig+0x13c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d103      	bne.n	80086c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	691a      	ldr	r2, [r3, #16]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d105      	bne.n	80086de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f023 0201 	bic.w	r2, r3, #1
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	611a      	str	r2, [r3, #16]
  }
}
 80086de:	bf00      	nop
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40010000 	.word	0x40010000
 80086f0:	40000400 	.word	0x40000400
 80086f4:	40000800 	.word	0x40000800
 80086f8:	40000c00 	.word	0x40000c00
 80086fc:	40010400 	.word	0x40010400
 8008700:	40014000 	.word	0x40014000
 8008704:	40014400 	.word	0x40014400
 8008708:	40014800 	.word	0x40014800
 800870c:	40001800 	.word	0x40001800
 8008710:	40001c00 	.word	0x40001c00
 8008714:	40002000 	.word	0x40002000

08008718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	f023 0201 	bic.w	r2, r3, #1
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f023 030a 	bic.w	r3, r3, #10
 8008754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	621a      	str	r2, [r3, #32]
}
 800876a:	bf00      	nop
 800876c:	371c      	adds	r7, #28
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008776:	b480      	push	{r7}
 8008778:	b087      	sub	sp, #28
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6a1b      	ldr	r3, [r3, #32]
 800878c:	f023 0210 	bic.w	r2, r3, #16
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80087a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	031b      	lsls	r3, r3, #12
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80087b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	011b      	lsls	r3, r3, #4
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	621a      	str	r2, [r3, #32]
}
 80087ca:	bf00      	nop
 80087cc:	371c      	adds	r7, #28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b085      	sub	sp, #20
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	f043 0307 	orr.w	r3, r3, #7
 80087f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	609a      	str	r2, [r3, #8]
}
 8008800:	bf00      	nop
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	021a      	lsls	r2, r3, #8
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	431a      	orrs	r2, r3
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4313      	orrs	r3, r2
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	609a      	str	r2, [r3, #8]
}
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008860:	2302      	movs	r3, #2
 8008862:	e05a      	b.n	800891a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800888a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a21      	ldr	r2, [pc, #132]	@ (8008928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d022      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088b0:	d01d      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a1d      	ldr	r2, [pc, #116]	@ (800892c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d018      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1b      	ldr	r2, [pc, #108]	@ (8008930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d013      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a1a      	ldr	r2, [pc, #104]	@ (8008934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00e      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a18      	ldr	r2, [pc, #96]	@ (8008938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d009      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a17      	ldr	r2, [pc, #92]	@ (800893c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d004      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a15      	ldr	r2, [pc, #84]	@ (8008940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d10c      	bne.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	40010000 	.word	0x40010000
 800892c:	40000400 	.word	0x40000400
 8008930:	40000800 	.word	0x40000800
 8008934:	40000c00 	.word	0x40000c00
 8008938:	40010400 	.word	0x40010400
 800893c:	40014000 	.word	0x40014000
 8008940:	40001800 	.word	0x40001800

08008944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e042      	b.n	80089dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d106      	bne.n	8008970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7fb fc26 	bl	80041bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2224      	movs	r2, #36	@ 0x24
 8008974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fc85 	bl	8009298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	691a      	ldr	r2, [r3, #16]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800899c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	695a      	ldr	r2, [r3, #20]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68da      	ldr	r2, [r3, #12]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b0ba      	sub	sp, #232	@ 0xe8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a1a:	f003 030f 	and.w	r3, r3, #15
 8008a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10f      	bne.n	8008a4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d009      	beq.n	8008a4a <HAL_UART_IRQHandler+0x66>
 8008a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fb69 	bl	800911a <UART_Receive_IT>
      return;
 8008a48:	e25b      	b.n	8008f02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 80de 	beq.w	8008c10 <HAL_UART_IRQHandler+0x22c>
 8008a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 80d1 	beq.w	8008c10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00b      	beq.n	8008a92 <HAL_UART_IRQHandler+0xae>
 8008a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8a:	f043 0201 	orr.w	r2, r3, #1
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xd2>
 8008a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aae:	f043 0202 	orr.w	r2, r3, #2
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <HAL_UART_IRQHandler+0xf6>
 8008ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ad2:	f043 0204 	orr.w	r2, r3, #4
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ade:	f003 0308 	and.w	r3, r3, #8
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d011      	beq.n	8008b0a <HAL_UART_IRQHandler+0x126>
 8008ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aea:	f003 0320 	and.w	r3, r3, #32
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d105      	bne.n	8008afe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d005      	beq.n	8008b0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b02:	f043 0208 	orr.w	r2, r3, #8
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 81f2 	beq.w	8008ef8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d008      	beq.n	8008b32 <HAL_UART_IRQHandler+0x14e>
 8008b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b24:	f003 0320 	and.w	r3, r3, #32
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 faf4 	bl	800911a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b3c:	2b40      	cmp	r3, #64	@ 0x40
 8008b3e:	bf0c      	ite	eq
 8008b40:	2301      	moveq	r3, #1
 8008b42:	2300      	movne	r3, #0
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b4e:	f003 0308 	and.w	r3, r3, #8
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d103      	bne.n	8008b5e <HAL_UART_IRQHandler+0x17a>
 8008b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d04f      	beq.n	8008bfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f9fc 	bl	8008f5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b6e:	2b40      	cmp	r3, #64	@ 0x40
 8008b70:	d141      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3314      	adds	r3, #20
 8008b78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3314      	adds	r3, #20
 8008b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1d9      	bne.n	8008b72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d013      	beq.n	8008bee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bca:	4a7e      	ldr	r2, [pc, #504]	@ (8008dc4 <HAL_UART_IRQHandler+0x3e0>)
 8008bcc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fc f952 	bl	8004e7c <HAL_DMA_Abort_IT>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d016      	beq.n	8008c0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008be8:	4610      	mov	r0, r2
 8008bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bec:	e00e      	b.n	8008c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f99e 	bl	8008f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf4:	e00a      	b.n	8008c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f99a 	bl	8008f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bfc:	e006      	b.n	8008c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f996 	bl	8008f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008c0a:	e175      	b.n	8008ef8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c0c:	bf00      	nop
    return;
 8008c0e:	e173      	b.n	8008ef8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	f040 814f 	bne.w	8008eb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c1e:	f003 0310 	and.w	r3, r3, #16
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 8148 	beq.w	8008eb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 8141 	beq.w	8008eb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c36:	2300      	movs	r3, #0
 8008c38:	60bb      	str	r3, [r7, #8]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60bb      	str	r3, [r7, #8]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	60bb      	str	r3, [r7, #8]
 8008c4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c56:	2b40      	cmp	r3, #64	@ 0x40
 8008c58:	f040 80b6 	bne.w	8008dc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 8145 	beq.w	8008efc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	f080 813e 	bcs.w	8008efc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c92:	f000 8088 	beq.w	8008da6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	330c      	adds	r3, #12
 8008c9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ca4:	e853 3f00 	ldrex	r3, [r3]
 8008ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	330c      	adds	r3, #12
 8008cbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008cc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008cc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1d9      	bne.n	8008c96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3314      	adds	r3, #20
 8008ce8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008cf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cf4:	f023 0301 	bic.w	r3, r3, #1
 8008cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3314      	adds	r3, #20
 8008d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e1      	bne.n	8008ce2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3314      	adds	r3, #20
 8008d24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3314      	adds	r3, #20
 8008d3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e3      	bne.n	8008d1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2220      	movs	r2, #32
 8008d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	330c      	adds	r3, #12
 8008d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d76:	f023 0310 	bic.w	r3, r3, #16
 8008d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	330c      	adds	r3, #12
 8008d84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008d88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008d8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e3      	bne.n	8008d64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fb fffb 	bl	8004d9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2202      	movs	r2, #2
 8008daa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f8c1 	bl	8008f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008dc2:	e09b      	b.n	8008efc <HAL_UART_IRQHandler+0x518>
 8008dc4:	08009023 	.word	0x08009023
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 808e 	beq.w	8008f00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 8089 	beq.w	8008f00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	330c      	adds	r3, #12
 8008df4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	330c      	adds	r3, #12
 8008e0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008e12:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e3      	bne.n	8008dee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3314      	adds	r3, #20
 8008e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e30:	e853 3f00 	ldrex	r3, [r3]
 8008e34:	623b      	str	r3, [r7, #32]
   return(result);
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	f023 0301 	bic.w	r3, r3, #1
 8008e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3314      	adds	r3, #20
 8008e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008e4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e52:	e841 2300 	strex	r3, r2, [r1]
 8008e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1e3      	bne.n	8008e26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2220      	movs	r2, #32
 8008e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	330c      	adds	r3, #12
 8008e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f023 0310 	bic.w	r3, r3, #16
 8008e82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	330c      	adds	r3, #12
 8008e8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008e90:	61fa      	str	r2, [r7, #28]
 8008e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	69b9      	ldr	r1, [r7, #24]
 8008e96:	69fa      	ldr	r2, [r7, #28]
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e3      	bne.n	8008e6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008eaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f847 	bl	8008f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008eb6:	e023      	b.n	8008f00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d009      	beq.n	8008ed8 <HAL_UART_IRQHandler+0x4f4>
 8008ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f8ba 	bl	800904a <UART_Transmit_IT>
    return;
 8008ed6:	e014      	b.n	8008f02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00e      	beq.n	8008f02 <HAL_UART_IRQHandler+0x51e>
 8008ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d008      	beq.n	8008f02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f8fa 	bl	80090ea <UART_EndTransmit_IT>
    return;
 8008ef6:	e004      	b.n	8008f02 <HAL_UART_IRQHandler+0x51e>
    return;
 8008ef8:	bf00      	nop
 8008efa:	e002      	b.n	8008f02 <HAL_UART_IRQHandler+0x51e>
      return;
 8008efc:	bf00      	nop
 8008efe:	e000      	b.n	8008f02 <HAL_UART_IRQHandler+0x51e>
      return;
 8008f00:	bf00      	nop
  }
}
 8008f02:	37e8      	adds	r7, #232	@ 0xe8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b095      	sub	sp, #84	@ 0x54
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	330c      	adds	r3, #12
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	330c      	adds	r3, #12
 8008f82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f84:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e5      	bne.n	8008f64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3314      	adds	r3, #20
 8008f9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	e853 3f00 	ldrex	r3, [r3]
 8008fa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	f023 0301 	bic.w	r3, r3, #1
 8008fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3314      	adds	r3, #20
 8008fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fc0:	e841 2300 	strex	r3, r2, [r1]
 8008fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1e5      	bne.n	8008f98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d119      	bne.n	8009008 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	330c      	adds	r3, #12
 8008fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f023 0310 	bic.w	r3, r3, #16
 8008fea:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ff4:	61ba      	str	r2, [r7, #24]
 8008ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	6979      	ldr	r1, [r7, #20]
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	613b      	str	r3, [r7, #16]
   return(result);
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e5      	bne.n	8008fd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009016:	bf00      	nop
 8009018:	3754      	adds	r7, #84	@ 0x54
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f7ff ff77 	bl	8008f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009042:	bf00      	nop
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800904a:	b480      	push	{r7}
 800904c:	b085      	sub	sp, #20
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b21      	cmp	r3, #33	@ 0x21
 800905c:	d13e      	bne.n	80090dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009066:	d114      	bne.n	8009092 <UART_Transmit_IT+0x48>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d110      	bne.n	8009092 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009084:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	1c9a      	adds	r2, r3, #2
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	621a      	str	r2, [r3, #32]
 8009090:	e008      	b.n	80090a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	1c59      	adds	r1, r3, #1
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	6211      	str	r1, [r2, #32]
 800909c:	781a      	ldrb	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	3b01      	subs	r3, #1
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	4619      	mov	r1, r3
 80090b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10f      	bne.n	80090d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80090c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	e000      	b.n	80090de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80090dc:	2302      	movs	r3, #2
  }
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68da      	ldr	r2, [r3, #12]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009100:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2220      	movs	r2, #32
 8009106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7ff fefc 	bl	8008f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b08c      	sub	sp, #48	@ 0x30
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b22      	cmp	r3, #34	@ 0x22
 800912c:	f040 80ae 	bne.w	800928c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009138:	d117      	bne.n	800916a <UART_Receive_IT+0x50>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d113      	bne.n	800916a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009142:	2300      	movs	r3, #0
 8009144:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	b29b      	uxth	r3, r3
 8009154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009158:	b29a      	uxth	r2, r3
 800915a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009162:	1c9a      	adds	r2, r3, #2
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	629a      	str	r2, [r3, #40]	@ 0x28
 8009168:	e026      	b.n	80091b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009170:	2300      	movs	r3, #0
 8009172:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800917c:	d007      	beq.n	800918e <UART_Receive_IT+0x74>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10a      	bne.n	800919c <UART_Receive_IT+0x82>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d106      	bne.n	800919c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	b2da      	uxtb	r2, r3
 8009196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009198:	701a      	strb	r2, [r3, #0]
 800919a:	e008      	b.n	80091ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091bc:	b29b      	uxth	r3, r3
 80091be:	3b01      	subs	r3, #1
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	4619      	mov	r1, r3
 80091c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d15d      	bne.n	8009288 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f022 0220 	bic.w	r2, r2, #32
 80091da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	695a      	ldr	r2, [r3, #20]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f022 0201 	bic.w	r2, r2, #1
 80091fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2220      	movs	r2, #32
 8009200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920e:	2b01      	cmp	r3, #1
 8009210:	d135      	bne.n	800927e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	330c      	adds	r3, #12
 800921e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	e853 3f00 	ldrex	r3, [r3]
 8009226:	613b      	str	r3, [r7, #16]
   return(result);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f023 0310 	bic.w	r3, r3, #16
 800922e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	330c      	adds	r3, #12
 8009236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009238:	623a      	str	r2, [r7, #32]
 800923a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	69f9      	ldr	r1, [r7, #28]
 800923e:	6a3a      	ldr	r2, [r7, #32]
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	61bb      	str	r3, [r7, #24]
   return(result);
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e5      	bne.n	8009218 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0310 	and.w	r3, r3, #16
 8009256:	2b10      	cmp	r3, #16
 8009258:	d10a      	bne.n	8009270 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800925a:	2300      	movs	r3, #0
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7ff fe64 	bl	8008f44 <HAL_UARTEx_RxEventCallback>
 800927c:	e002      	b.n	8009284 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff fe4c 	bl	8008f1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	e002      	b.n	800928e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	e000      	b.n	800928e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800928c:	2302      	movs	r3, #2
  }
}
 800928e:	4618      	mov	r0, r3
 8009290:	3730      	adds	r7, #48	@ 0x30
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800929c:	b0c0      	sub	sp, #256	@ 0x100
 800929e:	af00      	add	r7, sp, #0
 80092a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80092b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092b4:	68d9      	ldr	r1, [r3, #12]
 80092b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	ea40 0301 	orr.w	r3, r0, r1
 80092c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092c6:	689a      	ldr	r2, [r3, #8]
 80092c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	431a      	orrs	r2, r3
 80092d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	4313      	orrs	r3, r2
 80092e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80092e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80092f0:	f021 010c 	bic.w	r1, r1, #12
 80092f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80092fe:	430b      	orrs	r3, r1
 8009300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800930e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009312:	6999      	ldr	r1, [r3, #24]
 8009314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	ea40 0301 	orr.w	r3, r0, r1
 800931e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	4b8f      	ldr	r3, [pc, #572]	@ (8009564 <UART_SetConfig+0x2cc>)
 8009328:	429a      	cmp	r2, r3
 800932a:	d005      	beq.n	8009338 <UART_SetConfig+0xa0>
 800932c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	4b8d      	ldr	r3, [pc, #564]	@ (8009568 <UART_SetConfig+0x2d0>)
 8009334:	429a      	cmp	r2, r3
 8009336:	d104      	bne.n	8009342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009338:	f7fc fe66 	bl	8006008 <HAL_RCC_GetPCLK2Freq>
 800933c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009340:	e003      	b.n	800934a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009342:	f7fc fe4d 	bl	8005fe0 <HAL_RCC_GetPCLK1Freq>
 8009346:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800934a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009354:	f040 810c 	bne.w	8009570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800935c:	2200      	movs	r2, #0
 800935e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009362:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800936a:	4622      	mov	r2, r4
 800936c:	462b      	mov	r3, r5
 800936e:	1891      	adds	r1, r2, r2
 8009370:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009372:	415b      	adcs	r3, r3
 8009374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800937a:	4621      	mov	r1, r4
 800937c:	eb12 0801 	adds.w	r8, r2, r1
 8009380:	4629      	mov	r1, r5
 8009382:	eb43 0901 	adc.w	r9, r3, r1
 8009386:	f04f 0200 	mov.w	r2, #0
 800938a:	f04f 0300 	mov.w	r3, #0
 800938e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800939a:	4690      	mov	r8, r2
 800939c:	4699      	mov	r9, r3
 800939e:	4623      	mov	r3, r4
 80093a0:	eb18 0303 	adds.w	r3, r8, r3
 80093a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80093a8:	462b      	mov	r3, r5
 80093aa:	eb49 0303 	adc.w	r3, r9, r3
 80093ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80093be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80093c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80093c6:	460b      	mov	r3, r1
 80093c8:	18db      	adds	r3, r3, r3
 80093ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80093cc:	4613      	mov	r3, r2
 80093ce:	eb42 0303 	adc.w	r3, r2, r3
 80093d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80093d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80093d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80093dc:	f7f7 faf2 	bl	80009c4 <__aeabi_uldivmod>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4b61      	ldr	r3, [pc, #388]	@ (800956c <UART_SetConfig+0x2d4>)
 80093e6:	fba3 2302 	umull	r2, r3, r3, r2
 80093ea:	095b      	lsrs	r3, r3, #5
 80093ec:	011c      	lsls	r4, r3, #4
 80093ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093f2:	2200      	movs	r2, #0
 80093f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80093fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009400:	4642      	mov	r2, r8
 8009402:	464b      	mov	r3, r9
 8009404:	1891      	adds	r1, r2, r2
 8009406:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009408:	415b      	adcs	r3, r3
 800940a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800940c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009410:	4641      	mov	r1, r8
 8009412:	eb12 0a01 	adds.w	sl, r2, r1
 8009416:	4649      	mov	r1, r9
 8009418:	eb43 0b01 	adc.w	fp, r3, r1
 800941c:	f04f 0200 	mov.w	r2, #0
 8009420:	f04f 0300 	mov.w	r3, #0
 8009424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800942c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009430:	4692      	mov	sl, r2
 8009432:	469b      	mov	fp, r3
 8009434:	4643      	mov	r3, r8
 8009436:	eb1a 0303 	adds.w	r3, sl, r3
 800943a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800943e:	464b      	mov	r3, r9
 8009440:	eb4b 0303 	adc.w	r3, fp, r3
 8009444:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009454:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800945c:	460b      	mov	r3, r1
 800945e:	18db      	adds	r3, r3, r3
 8009460:	643b      	str	r3, [r7, #64]	@ 0x40
 8009462:	4613      	mov	r3, r2
 8009464:	eb42 0303 	adc.w	r3, r2, r3
 8009468:	647b      	str	r3, [r7, #68]	@ 0x44
 800946a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800946e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009472:	f7f7 faa7 	bl	80009c4 <__aeabi_uldivmod>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4611      	mov	r1, r2
 800947c:	4b3b      	ldr	r3, [pc, #236]	@ (800956c <UART_SetConfig+0x2d4>)
 800947e:	fba3 2301 	umull	r2, r3, r3, r1
 8009482:	095b      	lsrs	r3, r3, #5
 8009484:	2264      	movs	r2, #100	@ 0x64
 8009486:	fb02 f303 	mul.w	r3, r2, r3
 800948a:	1acb      	subs	r3, r1, r3
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009492:	4b36      	ldr	r3, [pc, #216]	@ (800956c <UART_SetConfig+0x2d4>)
 8009494:	fba3 2302 	umull	r2, r3, r3, r2
 8009498:	095b      	lsrs	r3, r3, #5
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80094a0:	441c      	add	r4, r3
 80094a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094a6:	2200      	movs	r2, #0
 80094a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80094b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80094b4:	4642      	mov	r2, r8
 80094b6:	464b      	mov	r3, r9
 80094b8:	1891      	adds	r1, r2, r2
 80094ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80094bc:	415b      	adcs	r3, r3
 80094be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80094c4:	4641      	mov	r1, r8
 80094c6:	1851      	adds	r1, r2, r1
 80094c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80094ca:	4649      	mov	r1, r9
 80094cc:	414b      	adcs	r3, r1
 80094ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80094d0:	f04f 0200 	mov.w	r2, #0
 80094d4:	f04f 0300 	mov.w	r3, #0
 80094d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80094dc:	4659      	mov	r1, fp
 80094de:	00cb      	lsls	r3, r1, #3
 80094e0:	4651      	mov	r1, sl
 80094e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094e6:	4651      	mov	r1, sl
 80094e8:	00ca      	lsls	r2, r1, #3
 80094ea:	4610      	mov	r0, r2
 80094ec:	4619      	mov	r1, r3
 80094ee:	4603      	mov	r3, r0
 80094f0:	4642      	mov	r2, r8
 80094f2:	189b      	adds	r3, r3, r2
 80094f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094f8:	464b      	mov	r3, r9
 80094fa:	460a      	mov	r2, r1
 80094fc:	eb42 0303 	adc.w	r3, r2, r3
 8009500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009510:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009518:	460b      	mov	r3, r1
 800951a:	18db      	adds	r3, r3, r3
 800951c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800951e:	4613      	mov	r3, r2
 8009520:	eb42 0303 	adc.w	r3, r2, r3
 8009524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800952a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800952e:	f7f7 fa49 	bl	80009c4 <__aeabi_uldivmod>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4b0d      	ldr	r3, [pc, #52]	@ (800956c <UART_SetConfig+0x2d4>)
 8009538:	fba3 1302 	umull	r1, r3, r3, r2
 800953c:	095b      	lsrs	r3, r3, #5
 800953e:	2164      	movs	r1, #100	@ 0x64
 8009540:	fb01 f303 	mul.w	r3, r1, r3
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	3332      	adds	r3, #50	@ 0x32
 800954a:	4a08      	ldr	r2, [pc, #32]	@ (800956c <UART_SetConfig+0x2d4>)
 800954c:	fba2 2303 	umull	r2, r3, r2, r3
 8009550:	095b      	lsrs	r3, r3, #5
 8009552:	f003 0207 	and.w	r2, r3, #7
 8009556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4422      	add	r2, r4
 800955e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009560:	e106      	b.n	8009770 <UART_SetConfig+0x4d8>
 8009562:	bf00      	nop
 8009564:	40011000 	.word	0x40011000
 8009568:	40011400 	.word	0x40011400
 800956c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009574:	2200      	movs	r2, #0
 8009576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800957a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800957e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009582:	4642      	mov	r2, r8
 8009584:	464b      	mov	r3, r9
 8009586:	1891      	adds	r1, r2, r2
 8009588:	6239      	str	r1, [r7, #32]
 800958a:	415b      	adcs	r3, r3
 800958c:	627b      	str	r3, [r7, #36]	@ 0x24
 800958e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009592:	4641      	mov	r1, r8
 8009594:	1854      	adds	r4, r2, r1
 8009596:	4649      	mov	r1, r9
 8009598:	eb43 0501 	adc.w	r5, r3, r1
 800959c:	f04f 0200 	mov.w	r2, #0
 80095a0:	f04f 0300 	mov.w	r3, #0
 80095a4:	00eb      	lsls	r3, r5, #3
 80095a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095aa:	00e2      	lsls	r2, r4, #3
 80095ac:	4614      	mov	r4, r2
 80095ae:	461d      	mov	r5, r3
 80095b0:	4643      	mov	r3, r8
 80095b2:	18e3      	adds	r3, r4, r3
 80095b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095b8:	464b      	mov	r3, r9
 80095ba:	eb45 0303 	adc.w	r3, r5, r3
 80095be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80095c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80095d2:	f04f 0200 	mov.w	r2, #0
 80095d6:	f04f 0300 	mov.w	r3, #0
 80095da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80095de:	4629      	mov	r1, r5
 80095e0:	008b      	lsls	r3, r1, #2
 80095e2:	4621      	mov	r1, r4
 80095e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095e8:	4621      	mov	r1, r4
 80095ea:	008a      	lsls	r2, r1, #2
 80095ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80095f0:	f7f7 f9e8 	bl	80009c4 <__aeabi_uldivmod>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4b60      	ldr	r3, [pc, #384]	@ (800977c <UART_SetConfig+0x4e4>)
 80095fa:	fba3 2302 	umull	r2, r3, r3, r2
 80095fe:	095b      	lsrs	r3, r3, #5
 8009600:	011c      	lsls	r4, r3, #4
 8009602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009606:	2200      	movs	r2, #0
 8009608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800960c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009614:	4642      	mov	r2, r8
 8009616:	464b      	mov	r3, r9
 8009618:	1891      	adds	r1, r2, r2
 800961a:	61b9      	str	r1, [r7, #24]
 800961c:	415b      	adcs	r3, r3
 800961e:	61fb      	str	r3, [r7, #28]
 8009620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009624:	4641      	mov	r1, r8
 8009626:	1851      	adds	r1, r2, r1
 8009628:	6139      	str	r1, [r7, #16]
 800962a:	4649      	mov	r1, r9
 800962c:	414b      	adcs	r3, r1
 800962e:	617b      	str	r3, [r7, #20]
 8009630:	f04f 0200 	mov.w	r2, #0
 8009634:	f04f 0300 	mov.w	r3, #0
 8009638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800963c:	4659      	mov	r1, fp
 800963e:	00cb      	lsls	r3, r1, #3
 8009640:	4651      	mov	r1, sl
 8009642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009646:	4651      	mov	r1, sl
 8009648:	00ca      	lsls	r2, r1, #3
 800964a:	4610      	mov	r0, r2
 800964c:	4619      	mov	r1, r3
 800964e:	4603      	mov	r3, r0
 8009650:	4642      	mov	r2, r8
 8009652:	189b      	adds	r3, r3, r2
 8009654:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009658:	464b      	mov	r3, r9
 800965a:	460a      	mov	r2, r1
 800965c:	eb42 0303 	adc.w	r3, r2, r3
 8009660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800966e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009670:	f04f 0200 	mov.w	r2, #0
 8009674:	f04f 0300 	mov.w	r3, #0
 8009678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800967c:	4649      	mov	r1, r9
 800967e:	008b      	lsls	r3, r1, #2
 8009680:	4641      	mov	r1, r8
 8009682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009686:	4641      	mov	r1, r8
 8009688:	008a      	lsls	r2, r1, #2
 800968a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800968e:	f7f7 f999 	bl	80009c4 <__aeabi_uldivmod>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4611      	mov	r1, r2
 8009698:	4b38      	ldr	r3, [pc, #224]	@ (800977c <UART_SetConfig+0x4e4>)
 800969a:	fba3 2301 	umull	r2, r3, r3, r1
 800969e:	095b      	lsrs	r3, r3, #5
 80096a0:	2264      	movs	r2, #100	@ 0x64
 80096a2:	fb02 f303 	mul.w	r3, r2, r3
 80096a6:	1acb      	subs	r3, r1, r3
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	3332      	adds	r3, #50	@ 0x32
 80096ac:	4a33      	ldr	r2, [pc, #204]	@ (800977c <UART_SetConfig+0x4e4>)
 80096ae:	fba2 2303 	umull	r2, r3, r2, r3
 80096b2:	095b      	lsrs	r3, r3, #5
 80096b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096b8:	441c      	add	r4, r3
 80096ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096be:	2200      	movs	r2, #0
 80096c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80096c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80096c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80096c8:	4642      	mov	r2, r8
 80096ca:	464b      	mov	r3, r9
 80096cc:	1891      	adds	r1, r2, r2
 80096ce:	60b9      	str	r1, [r7, #8]
 80096d0:	415b      	adcs	r3, r3
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096d8:	4641      	mov	r1, r8
 80096da:	1851      	adds	r1, r2, r1
 80096dc:	6039      	str	r1, [r7, #0]
 80096de:	4649      	mov	r1, r9
 80096e0:	414b      	adcs	r3, r1
 80096e2:	607b      	str	r3, [r7, #4]
 80096e4:	f04f 0200 	mov.w	r2, #0
 80096e8:	f04f 0300 	mov.w	r3, #0
 80096ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80096f0:	4659      	mov	r1, fp
 80096f2:	00cb      	lsls	r3, r1, #3
 80096f4:	4651      	mov	r1, sl
 80096f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096fa:	4651      	mov	r1, sl
 80096fc:	00ca      	lsls	r2, r1, #3
 80096fe:	4610      	mov	r0, r2
 8009700:	4619      	mov	r1, r3
 8009702:	4603      	mov	r3, r0
 8009704:	4642      	mov	r2, r8
 8009706:	189b      	adds	r3, r3, r2
 8009708:	66bb      	str	r3, [r7, #104]	@ 0x68
 800970a:	464b      	mov	r3, r9
 800970c:	460a      	mov	r2, r1
 800970e:	eb42 0303 	adc.w	r3, r2, r3
 8009712:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	663b      	str	r3, [r7, #96]	@ 0x60
 800971e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009720:	f04f 0200 	mov.w	r2, #0
 8009724:	f04f 0300 	mov.w	r3, #0
 8009728:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800972c:	4649      	mov	r1, r9
 800972e:	008b      	lsls	r3, r1, #2
 8009730:	4641      	mov	r1, r8
 8009732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009736:	4641      	mov	r1, r8
 8009738:	008a      	lsls	r2, r1, #2
 800973a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800973e:	f7f7 f941 	bl	80009c4 <__aeabi_uldivmod>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4b0d      	ldr	r3, [pc, #52]	@ (800977c <UART_SetConfig+0x4e4>)
 8009748:	fba3 1302 	umull	r1, r3, r3, r2
 800974c:	095b      	lsrs	r3, r3, #5
 800974e:	2164      	movs	r1, #100	@ 0x64
 8009750:	fb01 f303 	mul.w	r3, r1, r3
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	011b      	lsls	r3, r3, #4
 8009758:	3332      	adds	r3, #50	@ 0x32
 800975a:	4a08      	ldr	r2, [pc, #32]	@ (800977c <UART_SetConfig+0x4e4>)
 800975c:	fba2 2303 	umull	r2, r3, r2, r3
 8009760:	095b      	lsrs	r3, r3, #5
 8009762:	f003 020f 	and.w	r2, r3, #15
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4422      	add	r2, r4
 800976e:	609a      	str	r2, [r3, #8]
}
 8009770:	bf00      	nop
 8009772:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009776:	46bd      	mov	sp, r7
 8009778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800977c:	51eb851f 	.word	0x51eb851f

08009780 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009780:	b084      	sub	sp, #16
 8009782:	b480      	push	{r7}
 8009784:	b085      	sub	sp, #20
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	f107 001c 	add.w	r0, r7, #28
 800978e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009796:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009798:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800979a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800979c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800979e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80097a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80097a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80097a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80097a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80097a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80097aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80097ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	431a      	orrs	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	b004      	add	sp, #16
 80097d4:	4770      	bx	lr

080097d6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009812:	b480      	push	{r7}
 8009814:	b083      	sub	sp, #12
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2203      	movs	r2, #3
 800981e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800982e:	b480      	push	{r7}
 8009830:	b083      	sub	sp, #12
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0303 	and.w	r3, r3, #3
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800984a:	b480      	push	{r7}
 800984c:	b085      	sub	sp, #20
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009868:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800986e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009874:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	4313      	orrs	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009884:	f023 030f 	bic.w	r3, r3, #15
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	431a      	orrs	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	b2db      	uxtb	r3, r3
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3314      	adds	r3, #20
 80098c6:	461a      	mov	r2, r3
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	4413      	add	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
}  
 80098d2:	4618      	mov	r0, r3
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80098de:	b480      	push	{r7}
 80098e0:	b085      	sub	sp, #20
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009904:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800990a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009910:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	4313      	orrs	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	431a      	orrs	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009928:	2300      	movs	r3, #0

}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b088      	sub	sp, #32
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009944:	2310      	movs	r3, #16
 8009946:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009948:	2340      	movs	r3, #64	@ 0x40
 800994a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800994c:	2300      	movs	r3, #0
 800994e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009954:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009956:	f107 0308 	add.w	r3, r7, #8
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7ff ff74 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009966:	2110      	movs	r1, #16
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f9d7 	bl	8009d1c <SDMMC_GetCmdResp1>
 800996e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009970:	69fb      	ldr	r3, [r7, #28]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3720      	adds	r7, #32
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b088      	sub	sp, #32
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009988:	2311      	movs	r3, #17
 800998a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800998c:	2340      	movs	r3, #64	@ 0x40
 800998e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009990:	2300      	movs	r3, #0
 8009992:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009994:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009998:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800999a:	f107 0308 	add.w	r3, r7, #8
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff ff52 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80099a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099aa:	2111      	movs	r1, #17
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f9b5 	bl	8009d1c <SDMMC_GetCmdResp1>
 80099b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099b4:	69fb      	ldr	r3, [r7, #28]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3720      	adds	r7, #32
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b088      	sub	sp, #32
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80099cc:	2312      	movs	r3, #18
 80099ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099d0:	2340      	movs	r3, #64	@ 0x40
 80099d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099d4:	2300      	movs	r3, #0
 80099d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099de:	f107 0308 	add.w	r3, r7, #8
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff ff30 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80099ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099ee:	2112      	movs	r1, #18
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f993 	bl	8009d1c <SDMMC_GetCmdResp1>
 80099f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099f8:	69fb      	ldr	r3, [r7, #28]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3720      	adds	r7, #32
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b088      	sub	sp, #32
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009a10:	2318      	movs	r3, #24
 8009a12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a14:	2340      	movs	r3, #64	@ 0x40
 8009a16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a22:	f107 0308 	add.w	r3, r7, #8
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff ff0e 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a32:	2118      	movs	r1, #24
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f971 	bl	8009d1c <SDMMC_GetCmdResp1>
 8009a3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a3c:	69fb      	ldr	r3, [r7, #28]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b088      	sub	sp, #32
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009a54:	2319      	movs	r3, #25
 8009a56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a58:	2340      	movs	r3, #64	@ 0x40
 8009a5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a66:	f107 0308 	add.w	r3, r7, #8
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7ff feec 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a76:	2119      	movs	r1, #25
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f94f 	bl	8009d1c <SDMMC_GetCmdResp1>
 8009a7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a80:	69fb      	ldr	r3, [r7, #28]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3720      	adds	r7, #32
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009a98:	230c      	movs	r3, #12
 8009a9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a9c:	2340      	movs	r3, #64	@ 0x40
 8009a9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aaa:	f107 0308 	add.w	r3, r7, #8
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7ff feca 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009ab6:	4a05      	ldr	r2, [pc, #20]	@ (8009acc <SDMMC_CmdStopTransfer+0x40>)
 8009ab8:	210c      	movs	r1, #12
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f92e 	bl	8009d1c <SDMMC_GetCmdResp1>
 8009ac0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ac2:	69fb      	ldr	r3, [r7, #28]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3720      	adds	r7, #32
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	05f5e100 	.word	0x05f5e100

08009ad0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	@ 0x28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009ae0:	2307      	movs	r3, #7
 8009ae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ae4:	2340      	movs	r3, #64	@ 0x40
 8009ae6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009af0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009af2:	f107 0310 	add.w	r3, r7, #16
 8009af6:	4619      	mov	r1, r3
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f7ff fea6 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b02:	2107      	movs	r1, #7
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f909 	bl	8009d1c <SDMMC_GetCmdResp1>
 8009b0a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3728      	adds	r7, #40	@ 0x28
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b088      	sub	sp, #32
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009b26:	2300      	movs	r3, #0
 8009b28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b34:	f107 0308 	add.w	r3, r7, #8
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7ff fe85 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb23 	bl	800a18c <SDMMC_GetCmdError>
 8009b46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b48:	69fb      	ldr	r3, [r7, #28]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3720      	adds	r7, #32
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b088      	sub	sp, #32
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009b5a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009b5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009b60:	2308      	movs	r3, #8
 8009b62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b64:	2340      	movs	r3, #64	@ 0x40
 8009b66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b72:	f107 0308 	add.w	r3, r7, #8
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff fe66 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fab6 	bl	800a0f0 <SDMMC_GetCmdResp7>
 8009b84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b86:	69fb      	ldr	r3, [r7, #28]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3720      	adds	r7, #32
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b088      	sub	sp, #32
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009b9e:	2337      	movs	r3, #55	@ 0x37
 8009ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ba2:	2340      	movs	r3, #64	@ 0x40
 8009ba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bb0:	f107 0308 	add.w	r3, r7, #8
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff fe47 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bc0:	2137      	movs	r1, #55	@ 0x37
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f8aa 	bl	8009d1c <SDMMC_GetCmdResp1>
 8009bc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bca:	69fb      	ldr	r3, [r7, #28]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3720      	adds	r7, #32
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009be4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009bea:	2329      	movs	r3, #41	@ 0x29
 8009bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bee:	2340      	movs	r3, #64	@ 0x40
 8009bf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bfc:	f107 0308 	add.w	r3, r7, #8
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff fe21 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f9bd 	bl	8009f88 <SDMMC_GetCmdResp3>
 8009c0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c10:	69fb      	ldr	r3, [r7, #28]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3720      	adds	r7, #32
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b088      	sub	sp, #32
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009c26:	2302      	movs	r3, #2
 8009c28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009c2a:	23c0      	movs	r3, #192	@ 0xc0
 8009c2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c38:	f107 0308 	add.w	r3, r7, #8
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff fe03 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f957 	bl	8009ef8 <SDMMC_GetCmdResp2>
 8009c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3720      	adds	r7, #32
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b088      	sub	sp, #32
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009c64:	2309      	movs	r3, #9
 8009c66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009c68:	23c0      	movs	r3, #192	@ 0xc0
 8009c6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c76:	f107 0308 	add.w	r3, r7, #8
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff fde4 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f938 	bl	8009ef8 <SDMMC_GetCmdResp2>
 8009c88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c8a:	69fb      	ldr	r3, [r7, #28]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3720      	adds	r7, #32
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b088      	sub	sp, #32
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ca6:	2340      	movs	r3, #64	@ 0x40
 8009ca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009caa:	2300      	movs	r3, #0
 8009cac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cb4:	f107 0308 	add.w	r3, r7, #8
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff fdc5 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	2103      	movs	r1, #3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f99d 	bl	800a004 <SDMMC_GetCmdResp6>
 8009cca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ccc:	69fb      	ldr	r3, [r7, #28]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3720      	adds	r7, #32
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b088      	sub	sp, #32
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009ce4:	230d      	movs	r3, #13
 8009ce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ce8:	2340      	movs	r3, #64	@ 0x40
 8009cea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cec:	2300      	movs	r3, #0
 8009cee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cf6:	f107 0308 	add.w	r3, r7, #8
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7ff fda4 	bl	800984a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d06:	210d      	movs	r1, #13
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f807 	bl	8009d1c <SDMMC_GetCmdResp1>
 8009d0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d10:	69fb      	ldr	r3, [r7, #28]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3720      	adds	r7, #32
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
	...

08009d1c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b088      	sub	sp, #32
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	460b      	mov	r3, r1
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009d2a:	4b70      	ldr	r3, [pc, #448]	@ (8009eec <SDMMC_GetCmdResp1+0x1d0>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a70      	ldr	r2, [pc, #448]	@ (8009ef0 <SDMMC_GetCmdResp1+0x1d4>)
 8009d30:	fba2 2303 	umull	r2, r3, r2, r3
 8009d34:	0a5a      	lsrs	r2, r3, #9
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	fb02 f303 	mul.w	r3, r2, r3
 8009d3c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	1e5a      	subs	r2, r3, #1
 8009d42:	61fa      	str	r2, [r7, #28]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d4c:	e0c9      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0ef      	beq.n	8009d3e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1ea      	bne.n	8009d3e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d004      	beq.n	8009d7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2204      	movs	r2, #4
 8009d78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d7a:	2304      	movs	r3, #4
 8009d7c:	e0b1      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e0a6      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	22c5      	movs	r2, #197	@ 0xc5
 8009d98:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f7ff fd7f 	bl	800989e <SDIO_GetCommandResponse>
 8009da0:	4603      	mov	r3, r0
 8009da2:	461a      	mov	r2, r3
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d001      	beq.n	8009dae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e099      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009dae:	2100      	movs	r1, #0
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7ff fd81 	bl	80098b8 <SDIO_GetResponse>
 8009db6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	4b4e      	ldr	r3, [pc, #312]	@ (8009ef4 <SDMMC_GetCmdResp1+0x1d8>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	e08d      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	da02      	bge.n	8009dd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009dcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009dd0:	e087      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ddc:	2340      	movs	r3, #64	@ 0x40
 8009dde:	e080      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009dea:	2380      	movs	r3, #128	@ 0x80
 8009dec:	e079      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009dfc:	e071      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e0c:	e069      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009e18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e1c:	e061      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d002      	beq.n	8009e2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009e28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009e2c:	e059      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d002      	beq.n	8009e3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e3c:	e051      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009e48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009e4c:	e049      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009e58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009e5c:	e041      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009e68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e6c:	e039      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009e78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009e7c:	e031      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009e88:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009e8c:	e029      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d002      	beq.n	8009e9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009e98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009e9c:	e021      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009ea8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009eac:	e019      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009eb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009ebc:	e011      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009ec8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009ecc:	e009      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f003 0308 	and.w	r3, r3, #8
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009ed8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009edc:	e001      	b.n	8009ee2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ede:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3720      	adds	r7, #32
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	2000000c 	.word	0x2000000c
 8009ef0:	10624dd3 	.word	0x10624dd3
 8009ef4:	fdffe008 	.word	0xfdffe008

08009ef8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f00:	4b1f      	ldr	r3, [pc, #124]	@ (8009f80 <SDMMC_GetCmdResp2+0x88>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a1f      	ldr	r2, [pc, #124]	@ (8009f84 <SDMMC_GetCmdResp2+0x8c>)
 8009f06:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0a:	0a5b      	lsrs	r3, r3, #9
 8009f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f10:	fb02 f303 	mul.w	r3, r2, r3
 8009f14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	1e5a      	subs	r2, r3, #1
 8009f1a:	60fa      	str	r2, [r7, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d102      	bne.n	8009f26 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f24:	e026      	b.n	8009f74 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0ef      	beq.n	8009f16 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1ea      	bne.n	8009f16 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f44:	f003 0304 	and.w	r3, r3, #4
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d004      	beq.n	8009f56 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2204      	movs	r2, #4
 8009f50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f52:	2304      	movs	r3, #4
 8009f54:	e00e      	b.n	8009f74 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f5a:	f003 0301 	and.w	r3, r3, #1
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d004      	beq.n	8009f6c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e003      	b.n	8009f74 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	22c5      	movs	r2, #197	@ 0xc5
 8009f70:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	2000000c 	.word	0x2000000c
 8009f84:	10624dd3 	.word	0x10624dd3

08009f88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f90:	4b1a      	ldr	r3, [pc, #104]	@ (8009ffc <SDMMC_GetCmdResp3+0x74>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a1a      	ldr	r2, [pc, #104]	@ (800a000 <SDMMC_GetCmdResp3+0x78>)
 8009f96:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9a:	0a5b      	lsrs	r3, r3, #9
 8009f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fa0:	fb02 f303 	mul.w	r3, r2, r3
 8009fa4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	1e5a      	subs	r2, r3, #1
 8009faa:	60fa      	str	r2, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d102      	bne.n	8009fb6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fb4:	e01b      	b.n	8009fee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0ef      	beq.n	8009fa6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1ea      	bne.n	8009fa6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d004      	beq.n	8009fe6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2204      	movs	r2, #4
 8009fe0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fe2:	2304      	movs	r3, #4
 8009fe4:	e003      	b.n	8009fee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	22c5      	movs	r2, #197	@ 0xc5
 8009fea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	2000000c 	.word	0x2000000c
 800a000:	10624dd3 	.word	0x10624dd3

0800a004 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	460b      	mov	r3, r1
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a012:	4b35      	ldr	r3, [pc, #212]	@ (800a0e8 <SDMMC_GetCmdResp6+0xe4>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a35      	ldr	r2, [pc, #212]	@ (800a0ec <SDMMC_GetCmdResp6+0xe8>)
 800a018:	fba2 2303 	umull	r2, r3, r2, r3
 800a01c:	0a5b      	lsrs	r3, r3, #9
 800a01e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a022:	fb02 f303 	mul.w	r3, r2, r3
 800a026:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	1e5a      	subs	r2, r3, #1
 800a02c:	61fa      	str	r2, [r7, #28]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d102      	bne.n	800a038 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a032:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a036:	e052      	b.n	800a0de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a044:	2b00      	cmp	r3, #0
 800a046:	d0ef      	beq.n	800a028 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1ea      	bne.n	800a028 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a056:	f003 0304 	and.w	r3, r3, #4
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d004      	beq.n	800a068 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2204      	movs	r2, #4
 800a062:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a064:	2304      	movs	r3, #4
 800a066:	e03a      	b.n	800a0de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	d004      	beq.n	800a07e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2201      	movs	r2, #1
 800a078:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e02f      	b.n	800a0de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7ff fc0d 	bl	800989e <SDIO_GetCommandResponse>
 800a084:	4603      	mov	r3, r0
 800a086:	461a      	mov	r2, r3
 800a088:	7afb      	ldrb	r3, [r7, #11]
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d001      	beq.n	800a092 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a08e:	2301      	movs	r3, #1
 800a090:	e025      	b.n	800a0de <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	22c5      	movs	r2, #197	@ 0xc5
 800a096:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a098:	2100      	movs	r1, #0
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7ff fc0c 	bl	80098b8 <SDIO_GetResponse>
 800a0a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d106      	bne.n	800a0ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	0c1b      	lsrs	r3, r3, #16
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	e011      	b.n	800a0de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a0c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a0c8:	e009      	b.n	800a0de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a0d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0d8:	e001      	b.n	800a0de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a0da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3720      	adds	r7, #32
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	2000000c 	.word	0x2000000c
 800a0ec:	10624dd3 	.word	0x10624dd3

0800a0f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0f8:	4b22      	ldr	r3, [pc, #136]	@ (800a184 <SDMMC_GetCmdResp7+0x94>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a22      	ldr	r2, [pc, #136]	@ (800a188 <SDMMC_GetCmdResp7+0x98>)
 800a0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a102:	0a5b      	lsrs	r3, r3, #9
 800a104:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a108:	fb02 f303 	mul.w	r3, r2, r3
 800a10c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	1e5a      	subs	r2, r3, #1
 800a112:	60fa      	str	r2, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a118:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a11c:	e02c      	b.n	800a178 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a122:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0ef      	beq.n	800a10e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1ea      	bne.n	800a10e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a13c:	f003 0304 	and.w	r3, r3, #4
 800a140:	2b00      	cmp	r3, #0
 800a142:	d004      	beq.n	800a14e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2204      	movs	r2, #4
 800a148:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a14a:	2304      	movs	r3, #4
 800a14c:	e014      	b.n	800a178 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	2b00      	cmp	r3, #0
 800a158:	d004      	beq.n	800a164 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a160:	2301      	movs	r3, #1
 800a162:	e009      	b.n	800a178 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d002      	beq.n	800a176 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2240      	movs	r2, #64	@ 0x40
 800a174:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a176:	2300      	movs	r3, #0
  
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	2000000c 	.word	0x2000000c
 800a188:	10624dd3 	.word	0x10624dd3

0800a18c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a194:	4b11      	ldr	r3, [pc, #68]	@ (800a1dc <SDMMC_GetCmdError+0x50>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a11      	ldr	r2, [pc, #68]	@ (800a1e0 <SDMMC_GetCmdError+0x54>)
 800a19a:	fba2 2303 	umull	r2, r3, r2, r3
 800a19e:	0a5b      	lsrs	r3, r3, #9
 800a1a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1a4:	fb02 f303 	mul.w	r3, r2, r3
 800a1a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	1e5a      	subs	r2, r3, #1
 800a1ae:	60fa      	str	r2, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d102      	bne.n	800a1ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a1b8:	e009      	b.n	800a1ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0f1      	beq.n	800a1aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	22c5      	movs	r2, #197	@ 0xc5
 800a1ca:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	2000000c 	.word	0x2000000c
 800a1e0:	10624dd3 	.word	0x10624dd3

0800a1e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a1e8:	4904      	ldr	r1, [pc, #16]	@ (800a1fc <MX_FATFS_Init+0x18>)
 800a1ea:	4805      	ldr	r0, [pc, #20]	@ (800a200 <MX_FATFS_Init+0x1c>)
 800a1ec:	f003 f886 	bl	800d2fc <FATFS_LinkDriver>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	4b03      	ldr	r3, [pc, #12]	@ (800a204 <MX_FATFS_Init+0x20>)
 800a1f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a1f8:	bf00      	nop
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	200005a4 	.word	0x200005a4
 800a200:	0800e55c 	.word	0x0800e55c
 800a204:	200005a0 	.word	0x200005a0

0800a208 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a208:	b480      	push	{r7}
 800a20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a20c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a20e:	4618      	mov	r0, r3
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a222:	f000 f86b 	bl	800a2fc <BSP_SD_IsDetected>
 800a226:	4603      	mov	r3, r0
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d001      	beq.n	800a230 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e005      	b.n	800a23c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a230:	4804      	ldr	r0, [pc, #16]	@ (800a244 <BSP_SD_Init+0x2c>)
 800a232:	f7fb fefd 	bl	8006030 <HAL_SD_Init>
 800a236:	4603      	mov	r3, r0
 800a238:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a23a:	79fb      	ldrb	r3, [r7, #7]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20000100 	.word	0x20000100

0800a248 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	68f9      	ldr	r1, [r7, #12]
 800a264:	4806      	ldr	r0, [pc, #24]	@ (800a280 <BSP_SD_ReadBlocks+0x38>)
 800a266:	f7fb ff93 	bl	8006190 <HAL_SD_ReadBlocks>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a274:	7dfb      	ldrb	r3, [r7, #23]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20000100 	.word	0x20000100

0800a284 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b088      	sub	sp, #32
 800a288:	af02      	add	r7, sp, #8
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	68f9      	ldr	r1, [r7, #12]
 800a2a0:	4806      	ldr	r0, [pc, #24]	@ (800a2bc <BSP_SD_WriteBlocks+0x38>)
 800a2a2:	f7fc f95b 	bl	800655c <HAL_SD_WriteBlocks>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000100 	.word	0x20000100

0800a2c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a2c4:	4805      	ldr	r0, [pc, #20]	@ (800a2dc <BSP_SD_GetCardState+0x1c>)
 800a2c6:	f7fc fca7 	bl	8006c18 <HAL_SD_GetCardState>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	bf14      	ite	ne
 800a2d0:	2301      	movne	r3, #1
 800a2d2:	2300      	moveq	r3, #0
 800a2d4:	b2db      	uxtb	r3, r3
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	20000100 	.word	0x20000100

0800a2e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a2e8:	6879      	ldr	r1, [r7, #4]
 800a2ea:	4803      	ldr	r0, [pc, #12]	@ (800a2f8 <BSP_SD_GetCardInfo+0x18>)
 800a2ec:	f7fc fc68 	bl	8006bc0 <HAL_SD_GetCardInfo>
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	20000100 	.word	0x20000100

0800a2fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a302:	2301      	movs	r3, #1
 800a304:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a306:	79fb      	ldrb	r3, [r7, #7]
 800a308:	b2db      	uxtb	r3, r3
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
	...

0800a318 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	4603      	mov	r3, r0
 800a320:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a322:	4b0b      	ldr	r3, [pc, #44]	@ (800a350 <SD_CheckStatus+0x38>)
 800a324:	2201      	movs	r2, #1
 800a326:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a328:	f7ff ffca 	bl	800a2c0 <BSP_SD_GetCardState>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d107      	bne.n	800a342 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a332:	4b07      	ldr	r3, [pc, #28]	@ (800a350 <SD_CheckStatus+0x38>)
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	b2db      	uxtb	r3, r3
 800a338:	f023 0301 	bic.w	r3, r3, #1
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	4b04      	ldr	r3, [pc, #16]	@ (800a350 <SD_CheckStatus+0x38>)
 800a340:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a342:	4b03      	ldr	r3, [pc, #12]	@ (800a350 <SD_CheckStatus+0x38>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	b2db      	uxtb	r3, r3
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20000015 	.word	0x20000015

0800a354 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a35e:	4b0b      	ldr	r3, [pc, #44]	@ (800a38c <SD_initialize+0x38>)
 800a360:	2201      	movs	r2, #1
 800a362:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a364:	f7ff ff58 	bl	800a218 <BSP_SD_Init>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d107      	bne.n	800a37e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	4618      	mov	r0, r3
 800a372:	f7ff ffd1 	bl	800a318 <SD_CheckStatus>
 800a376:	4603      	mov	r3, r0
 800a378:	461a      	mov	r2, r3
 800a37a:	4b04      	ldr	r3, [pc, #16]	@ (800a38c <SD_initialize+0x38>)
 800a37c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a37e:	4b03      	ldr	r3, [pc, #12]	@ (800a38c <SD_initialize+0x38>)
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	b2db      	uxtb	r3, r3
}
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20000015 	.word	0x20000015

0800a390 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a39a:	79fb      	ldrb	r3, [r7, #7]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff ffbb 	bl	800a318 <SD_CheckStatus>
 800a3a2:	4603      	mov	r3, r0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	607a      	str	r2, [r7, #4]
 800a3b6:	603b      	str	r3, [r7, #0]
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	6879      	ldr	r1, [r7, #4]
 800a3c8:	68b8      	ldr	r0, [r7, #8]
 800a3ca:	f7ff ff3d 	bl	800a248 <BSP_SD_ReadBlocks>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d107      	bne.n	800a3e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a3d4:	bf00      	nop
 800a3d6:	f7ff ff73 	bl	800a2c0 <BSP_SD_GetCardState>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1fa      	bne.n	800a3d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b086      	sub	sp, #24
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a402:	f04f 33ff 	mov.w	r3, #4294967295
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	6879      	ldr	r1, [r7, #4]
 800a40a:	68b8      	ldr	r0, [r7, #8]
 800a40c:	f7ff ff3a 	bl	800a284 <BSP_SD_WriteBlocks>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d107      	bne.n	800a426 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a416:	bf00      	nop
 800a418:	f7ff ff52 	bl	800a2c0 <BSP_SD_GetCardState>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1fa      	bne.n	800a418 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a426:	7dfb      	ldrb	r3, [r7, #23]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08c      	sub	sp, #48	@ 0x30
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	603a      	str	r2, [r7, #0]
 800a43a:	71fb      	strb	r3, [r7, #7]
 800a43c:	460b      	mov	r3, r1
 800a43e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a446:	4b25      	ldr	r3, [pc, #148]	@ (800a4dc <SD_ioctl+0xac>)
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <SD_ioctl+0x28>
 800a454:	2303      	movs	r3, #3
 800a456:	e03c      	b.n	800a4d2 <SD_ioctl+0xa2>

  switch (cmd)
 800a458:	79bb      	ldrb	r3, [r7, #6]
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d834      	bhi.n	800a4c8 <SD_ioctl+0x98>
 800a45e:	a201      	add	r2, pc, #4	@ (adr r2, 800a464 <SD_ioctl+0x34>)
 800a460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a464:	0800a475 	.word	0x0800a475
 800a468:	0800a47d 	.word	0x0800a47d
 800a46c:	0800a495 	.word	0x0800a495
 800a470:	0800a4af 	.word	0x0800a4af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a47a:	e028      	b.n	800a4ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a47c:	f107 030c 	add.w	r3, r7, #12
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff ff2d 	bl	800a2e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a492:	e01c      	b.n	800a4ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a494:	f107 030c 	add.w	r3, r7, #12
 800a498:	4618      	mov	r0, r3
 800a49a:	f7ff ff21 	bl	800a2e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a4ac:	e00f      	b.n	800a4ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4ae:	f107 030c 	add.w	r3, r7, #12
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff ff14 	bl	800a2e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ba:	0a5a      	lsrs	r2, r3, #9
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a4c6:	e002      	b.n	800a4ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a4c8:	2304      	movs	r3, #4
 800a4ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a4ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3730      	adds	r7, #48	@ 0x30
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20000015 	.word	0x20000015

0800a4e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a4ea:	79fb      	ldrb	r3, [r7, #7]
 800a4ec:	4a08      	ldr	r2, [pc, #32]	@ (800a510 <disk_status+0x30>)
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	79fa      	ldrb	r2, [r7, #7]
 800a4f8:	4905      	ldr	r1, [pc, #20]	@ (800a510 <disk_status+0x30>)
 800a4fa:	440a      	add	r2, r1
 800a4fc:	7a12      	ldrb	r2, [r2, #8]
 800a4fe:	4610      	mov	r0, r2
 800a500:	4798      	blx	r3
 800a502:	4603      	mov	r3, r0
 800a504:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a506:	7bfb      	ldrb	r3, [r7, #15]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	200005d0 	.word	0x200005d0

0800a514 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a522:	79fb      	ldrb	r3, [r7, #7]
 800a524:	4a0e      	ldr	r2, [pc, #56]	@ (800a560 <disk_initialize+0x4c>)
 800a526:	5cd3      	ldrb	r3, [r2, r3]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d114      	bne.n	800a556 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	4a0c      	ldr	r2, [pc, #48]	@ (800a560 <disk_initialize+0x4c>)
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	79fa      	ldrb	r2, [r7, #7]
 800a53a:	4909      	ldr	r1, [pc, #36]	@ (800a560 <disk_initialize+0x4c>)
 800a53c:	440a      	add	r2, r1
 800a53e:	7a12      	ldrb	r2, [r2, #8]
 800a540:	4610      	mov	r0, r2
 800a542:	4798      	blx	r3
 800a544:	4603      	mov	r3, r0
 800a546:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a548:	7bfb      	ldrb	r3, [r7, #15]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d103      	bne.n	800a556 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a54e:	79fb      	ldrb	r3, [r7, #7]
 800a550:	4a03      	ldr	r2, [pc, #12]	@ (800a560 <disk_initialize+0x4c>)
 800a552:	2101      	movs	r1, #1
 800a554:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	200005d0 	.word	0x200005d0

0800a564 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a564:	b590      	push	{r4, r7, lr}
 800a566:	b087      	sub	sp, #28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60b9      	str	r1, [r7, #8]
 800a56c:	607a      	str	r2, [r7, #4]
 800a56e:	603b      	str	r3, [r7, #0]
 800a570:	4603      	mov	r3, r0
 800a572:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a574:	7bfb      	ldrb	r3, [r7, #15]
 800a576:	4a0a      	ldr	r2, [pc, #40]	@ (800a5a0 <disk_read+0x3c>)
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	689c      	ldr	r4, [r3, #8]
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	4a07      	ldr	r2, [pc, #28]	@ (800a5a0 <disk_read+0x3c>)
 800a584:	4413      	add	r3, r2
 800a586:	7a18      	ldrb	r0, [r3, #8]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	68b9      	ldr	r1, [r7, #8]
 800a58e:	47a0      	blx	r4
 800a590:	4603      	mov	r3, r0
 800a592:	75fb      	strb	r3, [r7, #23]
  return res;
 800a594:	7dfb      	ldrb	r3, [r7, #23]
}
 800a596:	4618      	mov	r0, r3
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd90      	pop	{r4, r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	200005d0 	.word	0x200005d0

0800a5a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a5a4:	b590      	push	{r4, r7, lr}
 800a5a6:	b087      	sub	sp, #28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60b9      	str	r1, [r7, #8]
 800a5ac:	607a      	str	r2, [r7, #4]
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	4a0a      	ldr	r2, [pc, #40]	@ (800a5e0 <disk_write+0x3c>)
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	68dc      	ldr	r4, [r3, #12]
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
 800a5c2:	4a07      	ldr	r2, [pc, #28]	@ (800a5e0 <disk_write+0x3c>)
 800a5c4:	4413      	add	r3, r2
 800a5c6:	7a18      	ldrb	r0, [r3, #8]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	68b9      	ldr	r1, [r7, #8]
 800a5ce:	47a0      	blx	r4
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	371c      	adds	r7, #28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd90      	pop	{r4, r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	200005d0 	.word	0x200005d0

0800a5e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	603a      	str	r2, [r7, #0]
 800a5ee:	71fb      	strb	r3, [r7, #7]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a5f4:	79fb      	ldrb	r3, [r7, #7]
 800a5f6:	4a09      	ldr	r2, [pc, #36]	@ (800a61c <disk_ioctl+0x38>)
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4413      	add	r3, r2
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	79fa      	ldrb	r2, [r7, #7]
 800a602:	4906      	ldr	r1, [pc, #24]	@ (800a61c <disk_ioctl+0x38>)
 800a604:	440a      	add	r2, r1
 800a606:	7a10      	ldrb	r0, [r2, #8]
 800a608:	79b9      	ldrb	r1, [r7, #6]
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	4798      	blx	r3
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]
  return res;
 800a612:	7bfb      	ldrb	r3, [r7, #15]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	200005d0 	.word	0x200005d0

0800a620 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	3301      	adds	r3, #1
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a630:	89fb      	ldrh	r3, [r7, #14]
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	b21a      	sxth	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	b21b      	sxth	r3, r3
 800a63c:	4313      	orrs	r3, r2
 800a63e:	b21b      	sxth	r3, r3
 800a640:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a642:	89fb      	ldrh	r3, [r7, #14]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3303      	adds	r3, #3
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	3202      	adds	r2, #2
 800a668:	7812      	ldrb	r2, [r2, #0]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	021b      	lsls	r3, r3, #8
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	3201      	adds	r2, #1
 800a676:	7812      	ldrb	r2, [r2, #0]
 800a678:	4313      	orrs	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	021b      	lsls	r3, r3, #8
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	7812      	ldrb	r2, [r2, #0]
 800a684:	4313      	orrs	r3, r2
 800a686:	60fb      	str	r3, [r7, #12]
	return rv;
 800a688:	68fb      	ldr	r3, [r7, #12]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a696:	b480      	push	{r7}
 800a698:	b083      	sub	sp, #12
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	1c5a      	adds	r2, r3, #1
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	887a      	ldrh	r2, [r7, #2]
 800a6aa:	b2d2      	uxtb	r2, r2
 800a6ac:	701a      	strb	r2, [r3, #0]
 800a6ae:	887b      	ldrh	r3, [r7, #2]
 800a6b0:	0a1b      	lsrs	r3, r3, #8
 800a6b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	1c5a      	adds	r2, r3, #1
 800a6b8:	607a      	str	r2, [r7, #4]
 800a6ba:	887a      	ldrh	r2, [r7, #2]
 800a6bc:	b2d2      	uxtb	r2, r2
 800a6be:	701a      	strb	r2, [r3, #0]
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	607a      	str	r2, [r7, #4]
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	b2d2      	uxtb	r2, r2
 800a6e0:	701a      	strb	r2, [r3, #0]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	0a1b      	lsrs	r3, r3, #8
 800a6e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	1c5a      	adds	r2, r3, #1
 800a6ec:	607a      	str	r2, [r7, #4]
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	b2d2      	uxtb	r2, r2
 800a6f2:	701a      	strb	r2, [r3, #0]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	0a1b      	lsrs	r3, r3, #8
 800a6f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	0a1b      	lsrs	r3, r3, #8
 800a70a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	1c5a      	adds	r2, r3, #1
 800a710:	607a      	str	r2, [r7, #4]
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	b2d2      	uxtb	r2, r2
 800a716:	701a      	strb	r2, [r3, #0]
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00d      	beq.n	800a75a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a73e:	693a      	ldr	r2, [r7, #16]
 800a740:	1c53      	adds	r3, r2, #1
 800a742:	613b      	str	r3, [r7, #16]
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	1c59      	adds	r1, r3, #1
 800a748:	6179      	str	r1, [r7, #20]
 800a74a:	7812      	ldrb	r2, [r2, #0]
 800a74c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	3b01      	subs	r3, #1
 800a752:	607b      	str	r3, [r7, #4]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1f1      	bne.n	800a73e <mem_cpy+0x1a>
	}
}
 800a75a:	bf00      	nop
 800a75c:	371c      	adds	r7, #28
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a766:	b480      	push	{r7}
 800a768:	b087      	sub	sp, #28
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	60f8      	str	r0, [r7, #12]
 800a76e:	60b9      	str	r1, [r7, #8]
 800a770:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	617a      	str	r2, [r7, #20]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	b2d2      	uxtb	r2, r2
 800a780:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	3b01      	subs	r3, #1
 800a786:	607b      	str	r3, [r7, #4]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1f3      	bne.n	800a776 <mem_set+0x10>
}
 800a78e:	bf00      	nop
 800a790:	bf00      	nop
 800a792:	371c      	adds	r7, #28
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a79c:	b480      	push	{r7}
 800a79e:	b089      	sub	sp, #36	@ 0x24
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	61fb      	str	r3, [r7, #28]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	1c5a      	adds	r2, r3, #1
 800a7b8:	61fa      	str	r2, [r7, #28]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	61ba      	str	r2, [r7, #24]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	1acb      	subs	r3, r1, r3
 800a7c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	607b      	str	r3, [r7, #4]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <mem_cmp+0x40>
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d0eb      	beq.n	800a7b4 <mem_cmp+0x18>

	return r;
 800a7dc:	697b      	ldr	r3, [r7, #20]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3724      	adds	r7, #36	@ 0x24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a7ea:	b480      	push	{r7}
 800a7ec:	b083      	sub	sp, #12
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a7f4:	e002      	b.n	800a7fc <chk_chr+0x12>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	607b      	str	r3, [r7, #4]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d005      	beq.n	800a810 <chk_chr+0x26>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	461a      	mov	r2, r3
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d1f2      	bne.n	800a7f6 <chk_chr+0xc>
	return *str;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	781b      	ldrb	r3, [r3, #0]
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a82a:	2300      	movs	r3, #0
 800a82c:	60bb      	str	r3, [r7, #8]
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	60fb      	str	r3, [r7, #12]
 800a832:	e029      	b.n	800a888 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a834:	4a27      	ldr	r2, [pc, #156]	@ (800a8d4 <chk_lock+0xb4>)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	011b      	lsls	r3, r3, #4
 800a83a:	4413      	add	r3, r2
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d01d      	beq.n	800a87e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a842:	4a24      	ldr	r2, [pc, #144]	@ (800a8d4 <chk_lock+0xb4>)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	011b      	lsls	r3, r3, #4
 800a848:	4413      	add	r3, r2
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	429a      	cmp	r2, r3
 800a852:	d116      	bne.n	800a882 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a854:	4a1f      	ldr	r2, [pc, #124]	@ (800a8d4 <chk_lock+0xb4>)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	011b      	lsls	r3, r3, #4
 800a85a:	4413      	add	r3, r2
 800a85c:	3304      	adds	r3, #4
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a864:	429a      	cmp	r2, r3
 800a866:	d10c      	bne.n	800a882 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a868:	4a1a      	ldr	r2, [pc, #104]	@ (800a8d4 <chk_lock+0xb4>)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	011b      	lsls	r3, r3, #4
 800a86e:	4413      	add	r3, r2
 800a870:	3308      	adds	r3, #8
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a878:	429a      	cmp	r2, r3
 800a87a:	d102      	bne.n	800a882 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a87c:	e007      	b.n	800a88e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a87e:	2301      	movs	r3, #1
 800a880:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3301      	adds	r3, #1
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d9d2      	bls.n	800a834 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d109      	bne.n	800a8a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d102      	bne.n	800a8a0 <chk_lock+0x80>
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d101      	bne.n	800a8a4 <chk_lock+0x84>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	e010      	b.n	800a8c6 <chk_lock+0xa6>
 800a8a4:	2312      	movs	r3, #18
 800a8a6:	e00e      	b.n	800a8c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d108      	bne.n	800a8c0 <chk_lock+0xa0>
 800a8ae:	4a09      	ldr	r2, [pc, #36]	@ (800a8d4 <chk_lock+0xb4>)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	011b      	lsls	r3, r3, #4
 800a8b4:	4413      	add	r3, r2
 800a8b6:	330c      	adds	r3, #12
 800a8b8:	881b      	ldrh	r3, [r3, #0]
 800a8ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8be:	d101      	bne.n	800a8c4 <chk_lock+0xa4>
 800a8c0:	2310      	movs	r3, #16
 800a8c2:	e000      	b.n	800a8c6 <chk_lock+0xa6>
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	200005b0 	.word	0x200005b0

0800a8d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	607b      	str	r3, [r7, #4]
 800a8e2:	e002      	b.n	800a8ea <enq_lock+0x12>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	607b      	str	r3, [r7, #4]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d806      	bhi.n	800a8fe <enq_lock+0x26>
 800a8f0:	4a09      	ldr	r2, [pc, #36]	@ (800a918 <enq_lock+0x40>)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	011b      	lsls	r3, r3, #4
 800a8f6:	4413      	add	r3, r2
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1f2      	bne.n	800a8e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b02      	cmp	r3, #2
 800a902:	bf14      	ite	ne
 800a904:	2301      	movne	r3, #1
 800a906:	2300      	moveq	r3, #0
 800a908:	b2db      	uxtb	r3, r3
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	370c      	adds	r7, #12
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	200005b0 	.word	0x200005b0

0800a91c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a926:	2300      	movs	r3, #0
 800a928:	60fb      	str	r3, [r7, #12]
 800a92a:	e01f      	b.n	800a96c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a92c:	4a41      	ldr	r2, [pc, #260]	@ (800aa34 <inc_lock+0x118>)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	011b      	lsls	r3, r3, #4
 800a932:	4413      	add	r3, r2
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d113      	bne.n	800a966 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a93e:	4a3d      	ldr	r2, [pc, #244]	@ (800aa34 <inc_lock+0x118>)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	011b      	lsls	r3, r3, #4
 800a944:	4413      	add	r3, r2
 800a946:	3304      	adds	r3, #4
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a94e:	429a      	cmp	r2, r3
 800a950:	d109      	bne.n	800a966 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a952:	4a38      	ldr	r2, [pc, #224]	@ (800aa34 <inc_lock+0x118>)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	011b      	lsls	r3, r3, #4
 800a958:	4413      	add	r3, r2
 800a95a:	3308      	adds	r3, #8
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a962:	429a      	cmp	r2, r3
 800a964:	d006      	beq.n	800a974 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3301      	adds	r3, #1
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d9dc      	bls.n	800a92c <inc_lock+0x10>
 800a972:	e000      	b.n	800a976 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a974:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b02      	cmp	r3, #2
 800a97a:	d132      	bne.n	800a9e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a97c:	2300      	movs	r3, #0
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	e002      	b.n	800a988 <inc_lock+0x6c>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3301      	adds	r3, #1
 800a986:	60fb      	str	r3, [r7, #12]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d806      	bhi.n	800a99c <inc_lock+0x80>
 800a98e:	4a29      	ldr	r2, [pc, #164]	@ (800aa34 <inc_lock+0x118>)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	011b      	lsls	r3, r3, #4
 800a994:	4413      	add	r3, r2
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1f2      	bne.n	800a982 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d101      	bne.n	800a9a6 <inc_lock+0x8a>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	e040      	b.n	800aa28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	4922      	ldr	r1, [pc, #136]	@ (800aa34 <inc_lock+0x118>)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	011b      	lsls	r3, r3, #4
 800a9b0:	440b      	add	r3, r1
 800a9b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	689a      	ldr	r2, [r3, #8]
 800a9b8:	491e      	ldr	r1, [pc, #120]	@ (800aa34 <inc_lock+0x118>)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	011b      	lsls	r3, r3, #4
 800a9be:	440b      	add	r3, r1
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	695a      	ldr	r2, [r3, #20]
 800a9c8:	491a      	ldr	r1, [pc, #104]	@ (800aa34 <inc_lock+0x118>)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	011b      	lsls	r3, r3, #4
 800a9ce:	440b      	add	r3, r1
 800a9d0:	3308      	adds	r3, #8
 800a9d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a9d4:	4a17      	ldr	r2, [pc, #92]	@ (800aa34 <inc_lock+0x118>)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	011b      	lsls	r3, r3, #4
 800a9da:	4413      	add	r3, r2
 800a9dc:	330c      	adds	r3, #12
 800a9de:	2200      	movs	r2, #0
 800a9e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d009      	beq.n	800a9fc <inc_lock+0xe0>
 800a9e8:	4a12      	ldr	r2, [pc, #72]	@ (800aa34 <inc_lock+0x118>)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	011b      	lsls	r3, r3, #4
 800a9ee:	4413      	add	r3, r2
 800a9f0:	330c      	adds	r3, #12
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <inc_lock+0xe0>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e015      	b.n	800aa28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d108      	bne.n	800aa14 <inc_lock+0xf8>
 800aa02:	4a0c      	ldr	r2, [pc, #48]	@ (800aa34 <inc_lock+0x118>)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	011b      	lsls	r3, r3, #4
 800aa08:	4413      	add	r3, r2
 800aa0a:	330c      	adds	r3, #12
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	e001      	b.n	800aa18 <inc_lock+0xfc>
 800aa14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aa18:	4906      	ldr	r1, [pc, #24]	@ (800aa34 <inc_lock+0x118>)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	011b      	lsls	r3, r3, #4
 800aa1e:	440b      	add	r3, r1
 800aa20:	330c      	adds	r3, #12
 800aa22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	3301      	adds	r3, #1
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	200005b0 	.word	0x200005b0

0800aa38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	607b      	str	r3, [r7, #4]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d825      	bhi.n	800aa98 <dec_lock+0x60>
		n = Files[i].ctr;
 800aa4c:	4a17      	ldr	r2, [pc, #92]	@ (800aaac <dec_lock+0x74>)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	011b      	lsls	r3, r3, #4
 800aa52:	4413      	add	r3, r2
 800aa54:	330c      	adds	r3, #12
 800aa56:	881b      	ldrh	r3, [r3, #0]
 800aa58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aa5a:	89fb      	ldrh	r3, [r7, #14]
 800aa5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa60:	d101      	bne.n	800aa66 <dec_lock+0x2e>
 800aa62:	2300      	movs	r3, #0
 800aa64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aa66:	89fb      	ldrh	r3, [r7, #14]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <dec_lock+0x3a>
 800aa6c:	89fb      	ldrh	r3, [r7, #14]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aa72:	4a0e      	ldr	r2, [pc, #56]	@ (800aaac <dec_lock+0x74>)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	011b      	lsls	r3, r3, #4
 800aa78:	4413      	add	r3, r2
 800aa7a:	330c      	adds	r3, #12
 800aa7c:	89fa      	ldrh	r2, [r7, #14]
 800aa7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aa80:	89fb      	ldrh	r3, [r7, #14]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d105      	bne.n	800aa92 <dec_lock+0x5a>
 800aa86:	4a09      	ldr	r2, [pc, #36]	@ (800aaac <dec_lock+0x74>)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	4413      	add	r3, r2
 800aa8e:	2200      	movs	r2, #0
 800aa90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	737b      	strb	r3, [r7, #13]
 800aa96:	e001      	b.n	800aa9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aa98:	2302      	movs	r3, #2
 800aa9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aa9c:	7b7b      	ldrb	r3, [r7, #13]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	200005b0 	.word	0x200005b0

0800aab0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800aab8:	2300      	movs	r3, #0
 800aaba:	60fb      	str	r3, [r7, #12]
 800aabc:	e010      	b.n	800aae0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aabe:	4a0d      	ldr	r2, [pc, #52]	@ (800aaf4 <clear_lock+0x44>)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	011b      	lsls	r3, r3, #4
 800aac4:	4413      	add	r3, r2
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d105      	bne.n	800aada <clear_lock+0x2a>
 800aace:	4a09      	ldr	r2, [pc, #36]	@ (800aaf4 <clear_lock+0x44>)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	011b      	lsls	r3, r3, #4
 800aad4:	4413      	add	r3, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3301      	adds	r3, #1
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d9eb      	bls.n	800aabe <clear_lock+0xe>
	}
}
 800aae6:	bf00      	nop
 800aae8:	bf00      	nop
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	200005b0 	.word	0x200005b0

0800aaf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	78db      	ldrb	r3, [r3, #3]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d034      	beq.n	800ab76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	7858      	ldrb	r0, [r3, #1]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	f7ff fd40 	bl	800a5a4 <disk_write>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d002      	beq.n	800ab30 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	73fb      	strb	r3, [r7, #15]
 800ab2e:	e022      	b.n	800ab76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	1ad2      	subs	r2, r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d217      	bcs.n	800ab76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	789b      	ldrb	r3, [r3, #2]
 800ab4a:	613b      	str	r3, [r7, #16]
 800ab4c:	e010      	b.n	800ab70 <sync_window+0x78>
					wsect += fs->fsize;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	699b      	ldr	r3, [r3, #24]
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	4413      	add	r3, r2
 800ab56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	7858      	ldrb	r0, [r3, #1]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab62:	2301      	movs	r3, #1
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	f7ff fd1d 	bl	800a5a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	613b      	str	r3, [r7, #16]
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d8eb      	bhi.n	800ab4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d01b      	beq.n	800abd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff ffad 	bl	800aaf8 <sync_window>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d113      	bne.n	800abd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	7858      	ldrb	r0, [r3, #1]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800abb2:	2301      	movs	r3, #1
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	f7ff fcd5 	bl	800a564 <disk_read>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d004      	beq.n	800abca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800abc0:	f04f 33ff 	mov.w	r3, #4294967295
 800abc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7ff ff87 	bl	800aaf8 <sync_window>
 800abea:	4603      	mov	r3, r0
 800abec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d158      	bne.n	800aca6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d148      	bne.n	800ac8e <sync_fs+0xb2>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	791b      	ldrb	r3, [r3, #4]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d144      	bne.n	800ac8e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	3330      	adds	r3, #48	@ 0x30
 800ac08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7ff fda9 	bl	800a766 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	3330      	adds	r3, #48	@ 0x30
 800ac18:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ac1c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff fd38 	bl	800a696 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3330      	adds	r3, #48	@ 0x30
 800ac2a:	4921      	ldr	r1, [pc, #132]	@ (800acb0 <sync_fs+0xd4>)
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff fd4d 	bl	800a6cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3330      	adds	r3, #48	@ 0x30
 800ac36:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ac3a:	491e      	ldr	r1, [pc, #120]	@ (800acb4 <sync_fs+0xd8>)
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7ff fd45 	bl	800a6cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	3330      	adds	r3, #48	@ 0x30
 800ac46:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4610      	mov	r0, r2
 800ac52:	f7ff fd3b 	bl	800a6cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3330      	adds	r3, #48	@ 0x30
 800ac5a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	4619      	mov	r1, r3
 800ac64:	4610      	mov	r0, r2
 800ac66:	f7ff fd31 	bl	800a6cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	69db      	ldr	r3, [r3, #28]
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	7858      	ldrb	r0, [r3, #1]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac82:	2301      	movs	r3, #1
 800ac84:	f7ff fc8e 	bl	800a5a4 <disk_write>
			fs->fsi_flag = 0;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	785b      	ldrb	r3, [r3, #1]
 800ac92:	2200      	movs	r2, #0
 800ac94:	2100      	movs	r1, #0
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff fca4 	bl	800a5e4 <disk_ioctl>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <sync_fs+0xca>
 800aca2:	2301      	movs	r3, #1
 800aca4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800aca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	41615252 	.word	0x41615252
 800acb4:	61417272 	.word	0x61417272

0800acb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	3b02      	subs	r3, #2
 800acc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	3b02      	subs	r3, #2
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d301      	bcc.n	800acd8 <clust2sect+0x20>
 800acd4:	2300      	movs	r3, #0
 800acd6:	e008      	b.n	800acea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	895b      	ldrh	r3, [r3, #10]
 800acdc:	461a      	mov	r2, r3
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	fb03 f202 	mul.w	r2, r3, r2
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace8:	4413      	add	r3, r2
}
 800acea:	4618      	mov	r0, r3
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b086      	sub	sp, #24
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d904      	bls.n	800ad16 <get_fat+0x20>
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d302      	bcc.n	800ad1c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ad16:	2301      	movs	r3, #1
 800ad18:	617b      	str	r3, [r7, #20]
 800ad1a:	e08e      	b.n	800ae3a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ad1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	d061      	beq.n	800adee <get_fat+0xf8>
 800ad2a:	2b03      	cmp	r3, #3
 800ad2c:	dc7b      	bgt.n	800ae26 <get_fat+0x130>
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d002      	beq.n	800ad38 <get_fat+0x42>
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d041      	beq.n	800adba <get_fat+0xc4>
 800ad36:	e076      	b.n	800ae26 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	085b      	lsrs	r3, r3, #1
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	4413      	add	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	6a1a      	ldr	r2, [r3, #32]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	0a5b      	lsrs	r3, r3, #9
 800ad4e:	4413      	add	r3, r2
 800ad50:	4619      	mov	r1, r3
 800ad52:	6938      	ldr	r0, [r7, #16]
 800ad54:	f7ff ff14 	bl	800ab80 <move_window>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d166      	bne.n	800ae2c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	1c5a      	adds	r2, r3, #1
 800ad62:	60fa      	str	r2, [r7, #12]
 800ad64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ad70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	6a1a      	ldr	r2, [r3, #32]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	0a5b      	lsrs	r3, r3, #9
 800ad7a:	4413      	add	r3, r2
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6938      	ldr	r0, [r7, #16]
 800ad80:	f7ff fefe 	bl	800ab80 <move_window>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d152      	bne.n	800ae30 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	4413      	add	r3, r2
 800ad94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ad98:	021b      	lsls	r3, r3, #8
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	f003 0301 	and.w	r3, r3, #1
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d002      	beq.n	800adb0 <get_fat+0xba>
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	091b      	lsrs	r3, r3, #4
 800adae:	e002      	b.n	800adb6 <get_fat+0xc0>
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adb6:	617b      	str	r3, [r7, #20]
			break;
 800adb8:	e03f      	b.n	800ae3a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	6a1a      	ldr	r2, [r3, #32]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	0a1b      	lsrs	r3, r3, #8
 800adc2:	4413      	add	r3, r2
 800adc4:	4619      	mov	r1, r3
 800adc6:	6938      	ldr	r0, [r7, #16]
 800adc8:	f7ff feda 	bl	800ab80 <move_window>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d130      	bne.n	800ae34 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	005b      	lsls	r3, r3, #1
 800addc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ade0:	4413      	add	r3, r2
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff fc1c 	bl	800a620 <ld_word>
 800ade8:	4603      	mov	r3, r0
 800adea:	617b      	str	r3, [r7, #20]
			break;
 800adec:	e025      	b.n	800ae3a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	6a1a      	ldr	r2, [r3, #32]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	09db      	lsrs	r3, r3, #7
 800adf6:	4413      	add	r3, r2
 800adf8:	4619      	mov	r1, r3
 800adfa:	6938      	ldr	r0, [r7, #16]
 800adfc:	f7ff fec0 	bl	800ab80 <move_window>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d118      	bne.n	800ae38 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ae14:	4413      	add	r3, r2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7ff fc1a 	bl	800a650 <ld_dword>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ae22:	617b      	str	r3, [r7, #20]
			break;
 800ae24:	e009      	b.n	800ae3a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ae26:	2301      	movs	r3, #1
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	e006      	b.n	800ae3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae2c:	bf00      	nop
 800ae2e:	e004      	b.n	800ae3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae30:	bf00      	nop
 800ae32:	e002      	b.n	800ae3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae34:	bf00      	nop
 800ae36:	e000      	b.n	800ae3a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae38:	bf00      	nop
		}
	}

	return val;
 800ae3a:	697b      	ldr	r3, [r7, #20]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3718      	adds	r7, #24
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ae44:	b590      	push	{r4, r7, lr}
 800ae46:	b089      	sub	sp, #36	@ 0x24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ae50:	2302      	movs	r3, #2
 800ae52:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	f240 80d9 	bls.w	800b00e <put_fat+0x1ca>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	f080 80d3 	bcs.w	800b00e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	2b03      	cmp	r3, #3
 800ae6e:	f000 8096 	beq.w	800af9e <put_fat+0x15a>
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	f300 80cb 	bgt.w	800b00e <put_fat+0x1ca>
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d002      	beq.n	800ae82 <put_fat+0x3e>
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d06e      	beq.n	800af5e <put_fat+0x11a>
 800ae80:	e0c5      	b.n	800b00e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	61bb      	str	r3, [r7, #24]
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	085b      	lsrs	r3, r3, #1
 800ae8a:	69ba      	ldr	r2, [r7, #24]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6a1a      	ldr	r2, [r3, #32]
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	0a5b      	lsrs	r3, r3, #9
 800ae98:	4413      	add	r3, r2
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f7ff fe6f 	bl	800ab80 <move_window>
 800aea2:	4603      	mov	r3, r0
 800aea4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aea6:	7ffb      	ldrb	r3, [r7, #31]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f040 80a9 	bne.w	800b000 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	1c59      	adds	r1, r3, #1
 800aeb8:	61b9      	str	r1, [r7, #24]
 800aeba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aebe:	4413      	add	r3, r2
 800aec0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00d      	beq.n	800aee8 <put_fat+0xa4>
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	b25b      	sxtb	r3, r3
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	b25a      	sxtb	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	011b      	lsls	r3, r3, #4
 800aede:	b25b      	sxtb	r3, r3
 800aee0:	4313      	orrs	r3, r2
 800aee2:	b25b      	sxtb	r3, r3
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	e001      	b.n	800aeec <put_fat+0xa8>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6a1a      	ldr	r2, [r3, #32]
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	0a5b      	lsrs	r3, r3, #9
 800aefe:	4413      	add	r3, r2
 800af00:	4619      	mov	r1, r3
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7ff fe3c 	bl	800ab80 <move_window>
 800af08:	4603      	mov	r3, r0
 800af0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af0c:	7ffb      	ldrb	r3, [r7, #31]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d178      	bne.n	800b004 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af1e:	4413      	add	r3, r2
 800af20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f003 0301 	and.w	r3, r3, #1
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d003      	beq.n	800af34 <put_fat+0xf0>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	091b      	lsrs	r3, r3, #4
 800af30:	b2db      	uxtb	r3, r3
 800af32:	e00e      	b.n	800af52 <put_fat+0x10e>
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	b25b      	sxtb	r3, r3
 800af3a:	f023 030f 	bic.w	r3, r3, #15
 800af3e:	b25a      	sxtb	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	0a1b      	lsrs	r3, r3, #8
 800af44:	b25b      	sxtb	r3, r3
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	b25b      	sxtb	r3, r3
 800af4c:	4313      	orrs	r3, r2
 800af4e:	b25b      	sxtb	r3, r3
 800af50:	b2db      	uxtb	r3, r3
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2201      	movs	r2, #1
 800af5a:	70da      	strb	r2, [r3, #3]
			break;
 800af5c:	e057      	b.n	800b00e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6a1a      	ldr	r2, [r3, #32]
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	0a1b      	lsrs	r3, r3, #8
 800af66:	4413      	add	r3, r2
 800af68:	4619      	mov	r1, r3
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f7ff fe08 	bl	800ab80 <move_window>
 800af70:	4603      	mov	r3, r0
 800af72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af74:	7ffb      	ldrb	r3, [r7, #31]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d146      	bne.n	800b008 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800af88:	4413      	add	r3, r2
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	b292      	uxth	r2, r2
 800af8e:	4611      	mov	r1, r2
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff fb80 	bl	800a696 <st_word>
			fs->wflag = 1;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2201      	movs	r2, #1
 800af9a:	70da      	strb	r2, [r3, #3]
			break;
 800af9c:	e037      	b.n	800b00e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6a1a      	ldr	r2, [r3, #32]
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	09db      	lsrs	r3, r3, #7
 800afa6:	4413      	add	r3, r2
 800afa8:	4619      	mov	r1, r3
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f7ff fde8 	bl	800ab80 <move_window>
 800afb0:	4603      	mov	r3, r0
 800afb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800afb4:	7ffb      	ldrb	r3, [r7, #31]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d128      	bne.n	800b00c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800afce:	4413      	add	r3, r2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7ff fb3d 	bl	800a650 <ld_dword>
 800afd6:	4603      	mov	r3, r0
 800afd8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800afdc:	4323      	orrs	r3, r4
 800afde:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800afee:	4413      	add	r3, r2
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7ff fb6a 	bl	800a6cc <st_dword>
			fs->wflag = 1;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2201      	movs	r2, #1
 800affc:	70da      	strb	r2, [r3, #3]
			break;
 800affe:	e006      	b.n	800b00e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b000:	bf00      	nop
 800b002:	e004      	b.n	800b00e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b004:	bf00      	nop
 800b006:	e002      	b.n	800b00e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b008:	bf00      	nop
 800b00a:	e000      	b.n	800b00e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b00c:	bf00      	nop
		}
	}
	return res;
 800b00e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3724      	adds	r7, #36	@ 0x24
 800b014:	46bd      	mov	sp, r7
 800b016:	bd90      	pop	{r4, r7, pc}

0800b018 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d904      	bls.n	800b03e <remove_chain+0x26>
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	695b      	ldr	r3, [r3, #20]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d301      	bcc.n	800b042 <remove_chain+0x2a>
 800b03e:	2302      	movs	r3, #2
 800b040:	e04b      	b.n	800b0da <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00c      	beq.n	800b062 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b048:	f04f 32ff 	mov.w	r2, #4294967295
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	69b8      	ldr	r0, [r7, #24]
 800b050:	f7ff fef8 	bl	800ae44 <put_fat>
 800b054:	4603      	mov	r3, r0
 800b056:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b058:	7ffb      	ldrb	r3, [r7, #31]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d001      	beq.n	800b062 <remove_chain+0x4a>
 800b05e:	7ffb      	ldrb	r3, [r7, #31]
 800b060:	e03b      	b.n	800b0da <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b062:	68b9      	ldr	r1, [r7, #8]
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f7ff fe46 	bl	800acf6 <get_fat>
 800b06a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d031      	beq.n	800b0d6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d101      	bne.n	800b07c <remove_chain+0x64>
 800b078:	2302      	movs	r3, #2
 800b07a:	e02e      	b.n	800b0da <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b082:	d101      	bne.n	800b088 <remove_chain+0x70>
 800b084:	2301      	movs	r3, #1
 800b086:	e028      	b.n	800b0da <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b088:	2200      	movs	r2, #0
 800b08a:	68b9      	ldr	r1, [r7, #8]
 800b08c:	69b8      	ldr	r0, [r7, #24]
 800b08e:	f7ff fed9 	bl	800ae44 <put_fat>
 800b092:	4603      	mov	r3, r0
 800b094:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b096:	7ffb      	ldrb	r3, [r7, #31]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <remove_chain+0x88>
 800b09c:	7ffb      	ldrb	r3, [r7, #31]
 800b09e:	e01c      	b.n	800b0da <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	691a      	ldr	r2, [r3, #16]
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	695b      	ldr	r3, [r3, #20]
 800b0a8:	3b02      	subs	r3, #2
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d20b      	bcs.n	800b0c6 <remove_chain+0xae>
			fs->free_clst++;
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	791b      	ldrb	r3, [r3, #4]
 800b0bc:	f043 0301 	orr.w	r3, r3, #1
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d3c6      	bcc.n	800b062 <remove_chain+0x4a>
 800b0d4:	e000      	b.n	800b0d8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b0d6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3720      	adds	r7, #32
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b088      	sub	sp, #32
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10d      	bne.n	800b114 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d004      	beq.n	800b10e <create_chain+0x2c>
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	695b      	ldr	r3, [r3, #20]
 800b108:	69ba      	ldr	r2, [r7, #24]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d31b      	bcc.n	800b146 <create_chain+0x64>
 800b10e:	2301      	movs	r3, #1
 800b110:	61bb      	str	r3, [r7, #24]
 800b112:	e018      	b.n	800b146 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff fded 	bl	800acf6 <get_fat>
 800b11c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d801      	bhi.n	800b128 <create_chain+0x46>
 800b124:	2301      	movs	r3, #1
 800b126:	e070      	b.n	800b20a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b12e:	d101      	bne.n	800b134 <create_chain+0x52>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	e06a      	b.n	800b20a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d201      	bcs.n	800b142 <create_chain+0x60>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	e063      	b.n	800b20a <create_chain+0x128>
		scl = clst;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	3301      	adds	r3, #1
 800b14e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	69fa      	ldr	r2, [r7, #28]
 800b156:	429a      	cmp	r2, r3
 800b158:	d307      	bcc.n	800b16a <create_chain+0x88>
				ncl = 2;
 800b15a:	2302      	movs	r3, #2
 800b15c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b15e:	69fa      	ldr	r2, [r7, #28]
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	429a      	cmp	r2, r3
 800b164:	d901      	bls.n	800b16a <create_chain+0x88>
 800b166:	2300      	movs	r3, #0
 800b168:	e04f      	b.n	800b20a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b16a:	69f9      	ldr	r1, [r7, #28]
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7ff fdc2 	bl	800acf6 <get_fat>
 800b172:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00e      	beq.n	800b198 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d003      	beq.n	800b188 <create_chain+0xa6>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b186:	d101      	bne.n	800b18c <create_chain+0xaa>
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	e03e      	b.n	800b20a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b18c:	69fa      	ldr	r2, [r7, #28]
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	429a      	cmp	r2, r3
 800b192:	d1da      	bne.n	800b14a <create_chain+0x68>
 800b194:	2300      	movs	r3, #0
 800b196:	e038      	b.n	800b20a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b198:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b19a:	f04f 32ff 	mov.w	r2, #4294967295
 800b19e:	69f9      	ldr	r1, [r7, #28]
 800b1a0:	6938      	ldr	r0, [r7, #16]
 800b1a2:	f7ff fe4f 	bl	800ae44 <put_fat>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d109      	bne.n	800b1c4 <create_chain+0xe2>
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d006      	beq.n	800b1c4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b1b6:	69fa      	ldr	r2, [r7, #28]
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6938      	ldr	r0, [r7, #16]
 800b1bc:	f7ff fe42 	bl	800ae44 <put_fat>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b1c4:	7dfb      	ldrb	r3, [r7, #23]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d116      	bne.n	800b1f8 <create_chain+0x116>
		fs->last_clst = ncl;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	69fa      	ldr	r2, [r7, #28]
 800b1ce:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	691a      	ldr	r2, [r3, #16]
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	3b02      	subs	r3, #2
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d804      	bhi.n	800b1e8 <create_chain+0x106>
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	1e5a      	subs	r2, r3, #1
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	791b      	ldrb	r3, [r3, #4]
 800b1ec:	f043 0301 	orr.w	r3, r3, #1
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	711a      	strb	r2, [r3, #4]
 800b1f6:	e007      	b.n	800b208 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b1f8:	7dfb      	ldrb	r3, [r7, #23]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d102      	bne.n	800b204 <create_chain+0x122>
 800b1fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b202:	e000      	b.n	800b206 <create_chain+0x124>
 800b204:	2301      	movs	r3, #1
 800b206:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b208:	69fb      	ldr	r3, [r7, #28]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3720      	adds	r7, #32
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b212:	b480      	push	{r7}
 800b214:	b087      	sub	sp, #28
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b226:	3304      	adds	r3, #4
 800b228:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	0a5b      	lsrs	r3, r3, #9
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	8952      	ldrh	r2, [r2, #10]
 800b232:	fbb3 f3f2 	udiv	r3, r3, r2
 800b236:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	1d1a      	adds	r2, r3, #4
 800b23c:	613a      	str	r2, [r7, #16]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d101      	bne.n	800b24c <clmt_clust+0x3a>
 800b248:	2300      	movs	r3, #0
 800b24a:	e010      	b.n	800b26e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b24c:	697a      	ldr	r2, [r7, #20]
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	429a      	cmp	r2, r3
 800b252:	d307      	bcc.n	800b264 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b254:	697a      	ldr	r2, [r7, #20]
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	3304      	adds	r3, #4
 800b260:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b262:	e7e9      	b.n	800b238 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b264:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	4413      	add	r3, r2
}
 800b26e:	4618      	mov	r0, r3
 800b270:	371c      	adds	r7, #28
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b086      	sub	sp, #24
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b290:	d204      	bcs.n	800b29c <dir_sdi+0x22>
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	f003 031f 	and.w	r3, r3, #31
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b29c:	2302      	movs	r3, #2
 800b29e:	e063      	b.n	800b368 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d106      	bne.n	800b2c0 <dir_sdi+0x46>
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d902      	bls.n	800b2c0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2be:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10c      	bne.n	800b2e0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	095b      	lsrs	r3, r3, #5
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	8912      	ldrh	r2, [r2, #8]
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d301      	bcc.n	800b2d6 <dir_sdi+0x5c>
 800b2d2:	2302      	movs	r3, #2
 800b2d4:	e048      	b.n	800b368 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	61da      	str	r2, [r3, #28]
 800b2de:	e029      	b.n	800b334 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	895b      	ldrh	r3, [r3, #10]
 800b2e4:	025b      	lsls	r3, r3, #9
 800b2e6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b2e8:	e019      	b.n	800b31e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6979      	ldr	r1, [r7, #20]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7ff fd01 	bl	800acf6 <get_fat>
 800b2f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fc:	d101      	bne.n	800b302 <dir_sdi+0x88>
 800b2fe:	2301      	movs	r3, #1
 800b300:	e032      	b.n	800b368 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d904      	bls.n	800b312 <dir_sdi+0x98>
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	695b      	ldr	r3, [r3, #20]
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d301      	bcc.n	800b316 <dir_sdi+0x9c>
 800b312:	2302      	movs	r3, #2
 800b314:	e028      	b.n	800b368 <dir_sdi+0xee>
			ofs -= csz;
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	429a      	cmp	r2, r3
 800b324:	d2e1      	bcs.n	800b2ea <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b326:	6979      	ldr	r1, [r7, #20]
 800b328:	6938      	ldr	r0, [r7, #16]
 800b32a:	f7ff fcc5 	bl	800acb8 <clust2sect>
 800b32e:	4602      	mov	r2, r0
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d101      	bne.n	800b346 <dir_sdi+0xcc>
 800b342:	2302      	movs	r3, #2
 800b344:	e010      	b.n	800b368 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	69da      	ldr	r2, [r3, #28]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	0a5b      	lsrs	r3, r3, #9
 800b34e:	441a      	add	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b360:	441a      	add	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3718      	adds	r7, #24
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	695b      	ldr	r3, [r3, #20]
 800b384:	3320      	adds	r3, #32
 800b386:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	69db      	ldr	r3, [r3, #28]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d003      	beq.n	800b398 <dir_next+0x28>
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b396:	d301      	bcc.n	800b39c <dir_next+0x2c>
 800b398:	2304      	movs	r3, #4
 800b39a:	e0aa      	b.n	800b4f2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f040 8098 	bne.w	800b4d8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	69db      	ldr	r3, [r3, #28]
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10b      	bne.n	800b3d2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	095b      	lsrs	r3, r3, #5
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	8912      	ldrh	r2, [r2, #8]
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	f0c0 8088 	bcc.w	800b4d8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	61da      	str	r2, [r3, #28]
 800b3ce:	2304      	movs	r3, #4
 800b3d0:	e08f      	b.n	800b4f2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	0a5b      	lsrs	r3, r3, #9
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	8952      	ldrh	r2, [r2, #10]
 800b3da:	3a01      	subs	r2, #1
 800b3dc:	4013      	ands	r3, r2
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d17a      	bne.n	800b4d8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	f7ff fc83 	bl	800acf6 <get_fat>
 800b3f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d801      	bhi.n	800b3fc <dir_next+0x8c>
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	e07a      	b.n	800b4f2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b402:	d101      	bne.n	800b408 <dir_next+0x98>
 800b404:	2301      	movs	r3, #1
 800b406:	e074      	b.n	800b4f2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	695b      	ldr	r3, [r3, #20]
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d358      	bcc.n	800b4c4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d104      	bne.n	800b422 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	61da      	str	r2, [r3, #28]
 800b41e:	2304      	movs	r3, #4
 800b420:	e067      	b.n	800b4f2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	4619      	mov	r1, r3
 800b42a:	4610      	mov	r0, r2
 800b42c:	f7ff fe59 	bl	800b0e2 <create_chain>
 800b430:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <dir_next+0xcc>
 800b438:	2307      	movs	r3, #7
 800b43a:	e05a      	b.n	800b4f2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d101      	bne.n	800b446 <dir_next+0xd6>
 800b442:	2302      	movs	r3, #2
 800b444:	e055      	b.n	800b4f2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44c:	d101      	bne.n	800b452 <dir_next+0xe2>
 800b44e:	2301      	movs	r3, #1
 800b450:	e04f      	b.n	800b4f2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f7ff fb50 	bl	800aaf8 <sync_window>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <dir_next+0xf2>
 800b45e:	2301      	movs	r3, #1
 800b460:	e047      	b.n	800b4f2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3330      	adds	r3, #48	@ 0x30
 800b466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b46a:	2100      	movs	r1, #0
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7ff f97a 	bl	800a766 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b472:	2300      	movs	r3, #0
 800b474:	613b      	str	r3, [r7, #16]
 800b476:	6979      	ldr	r1, [r7, #20]
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f7ff fc1d 	bl	800acb8 <clust2sect>
 800b47e:	4602      	mov	r2, r0
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b484:	e012      	b.n	800b4ac <dir_next+0x13c>
						fs->wflag = 1;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2201      	movs	r2, #1
 800b48a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f7ff fb33 	bl	800aaf8 <sync_window>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d001      	beq.n	800b49c <dir_next+0x12c>
 800b498:	2301      	movs	r3, #1
 800b49a:	e02a      	b.n	800b4f2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	613b      	str	r3, [r7, #16]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a6:	1c5a      	adds	r2, r3, #1
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	895b      	ldrh	r3, [r3, #10]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d3e6      	bcc.n	800b486 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	1ad2      	subs	r2, r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	697a      	ldr	r2, [r7, #20]
 800b4c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b4ca:	6979      	ldr	r1, [r7, #20]
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f7ff fbf3 	bl	800acb8 <clust2sect>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ea:	441a      	add	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b086      	sub	sp, #24
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b50a:	2100      	movs	r1, #0
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff feb4 	bl	800b27a <dir_sdi>
 800b512:	4603      	mov	r3, r0
 800b514:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d12b      	bne.n	800b574 <dir_alloc+0x7a>
		n = 0;
 800b51c:	2300      	movs	r3, #0
 800b51e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	69db      	ldr	r3, [r3, #28]
 800b524:	4619      	mov	r1, r3
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f7ff fb2a 	bl	800ab80 <move_window>
 800b52c:	4603      	mov	r3, r0
 800b52e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b530:	7dfb      	ldrb	r3, [r7, #23]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d11d      	bne.n	800b572 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2be5      	cmp	r3, #229	@ 0xe5
 800b53e:	d004      	beq.n	800b54a <dir_alloc+0x50>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d107      	bne.n	800b55a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	3301      	adds	r3, #1
 800b54e:	613b      	str	r3, [r7, #16]
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	429a      	cmp	r2, r3
 800b556:	d102      	bne.n	800b55e <dir_alloc+0x64>
 800b558:	e00c      	b.n	800b574 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b55a:	2300      	movs	r3, #0
 800b55c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b55e:	2101      	movs	r1, #1
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f7ff ff05 	bl	800b370 <dir_next>
 800b566:	4603      	mov	r3, r0
 800b568:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d0d7      	beq.n	800b520 <dir_alloc+0x26>
 800b570:	e000      	b.n	800b574 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b572:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b574:	7dfb      	ldrb	r3, [r7, #23]
 800b576:	2b04      	cmp	r3, #4
 800b578:	d101      	bne.n	800b57e <dir_alloc+0x84>
 800b57a:	2307      	movs	r3, #7
 800b57c:	75fb      	strb	r3, [r7, #23]
	return res;
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	331a      	adds	r3, #26
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff f842 	bl	800a620 <ld_word>
 800b59c:	4603      	mov	r3, r0
 800b59e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	d109      	bne.n	800b5bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	3314      	adds	r3, #20
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7ff f837 	bl	800a620 <ld_word>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	041b      	lsls	r3, r3, #16
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	60f8      	str	r0, [r7, #12]
 800b5ce:	60b9      	str	r1, [r7, #8]
 800b5d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	331a      	adds	r3, #26
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	b292      	uxth	r2, r2
 800b5da:	4611      	mov	r1, r2
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7ff f85a 	bl	800a696 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d109      	bne.n	800b5fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	f103 0214 	add.w	r2, r3, #20
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	0c1b      	lsrs	r3, r3, #16
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	f7ff f84c 	bl	800a696 <st_word>
	}
}
 800b5fe:	bf00      	nop
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b086      	sub	sp, #24
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b610:	2304      	movs	r3, #4
 800b612:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b61a:	e03c      	b.n	800b696 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	69db      	ldr	r3, [r3, #28]
 800b620:	4619      	mov	r1, r3
 800b622:	6938      	ldr	r0, [r7, #16]
 800b624:	f7ff faac 	bl	800ab80 <move_window>
 800b628:	4603      	mov	r3, r0
 800b62a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b62c:	7dfb      	ldrb	r3, [r7, #23]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d136      	bne.n	800b6a0 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d102      	bne.n	800b646 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b640:	2304      	movs	r3, #4
 800b642:	75fb      	strb	r3, [r7, #23]
 800b644:	e031      	b.n	800b6aa <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a1b      	ldr	r3, [r3, #32]
 800b64a:	330b      	adds	r3, #11
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b652:	73bb      	strb	r3, [r7, #14]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	7bba      	ldrb	r2, [r7, #14]
 800b658:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	2be5      	cmp	r3, #229	@ 0xe5
 800b65e:	d011      	beq.n	800b684 <dir_read+0x7e>
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	2b2e      	cmp	r3, #46	@ 0x2e
 800b664:	d00e      	beq.n	800b684 <dir_read+0x7e>
 800b666:	7bbb      	ldrb	r3, [r7, #14]
 800b668:	2b0f      	cmp	r3, #15
 800b66a:	d00b      	beq.n	800b684 <dir_read+0x7e>
 800b66c:	7bbb      	ldrb	r3, [r7, #14]
 800b66e:	f023 0320 	bic.w	r3, r3, #32
 800b672:	2b08      	cmp	r3, #8
 800b674:	bf0c      	ite	eq
 800b676:	2301      	moveq	r3, #1
 800b678:	2300      	movne	r3, #0
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	461a      	mov	r2, r3
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	4293      	cmp	r3, r2
 800b682:	d00f      	beq.n	800b6a4 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b684:	2100      	movs	r1, #0
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff fe72 	bl	800b370 <dir_next>
 800b68c:	4603      	mov	r3, r0
 800b68e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b690:	7dfb      	ldrb	r3, [r7, #23]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d108      	bne.n	800b6a8 <dir_read+0xa2>
	while (dp->sect) {
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	69db      	ldr	r3, [r3, #28]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1be      	bne.n	800b61c <dir_read+0x16>
 800b69e:	e004      	b.n	800b6aa <dir_read+0xa4>
		if (res != FR_OK) break;
 800b6a0:	bf00      	nop
 800b6a2:	e002      	b.n	800b6aa <dir_read+0xa4>
				break;
 800b6a4:	bf00      	nop
 800b6a6:	e000      	b.n	800b6aa <dir_read+0xa4>
		if (res != FR_OK) break;
 800b6a8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <dir_read+0xb0>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	61da      	str	r2, [r3, #28]
	return res;
 800b6b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff fdd2 	bl	800b27a <dir_sdi>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <dir_find+0x24>
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
 800b6e2:	e03e      	b.n	800b762 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	69db      	ldr	r3, [r3, #28]
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6938      	ldr	r0, [r7, #16]
 800b6ec:	f7ff fa48 	bl	800ab80 <move_window>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b6f4:	7dfb      	ldrb	r3, [r7, #23]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d12f      	bne.n	800b75a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b702:	7bfb      	ldrb	r3, [r7, #15]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d102      	bne.n	800b70e <dir_find+0x4e>
 800b708:	2304      	movs	r3, #4
 800b70a:	75fb      	strb	r3, [r7, #23]
 800b70c:	e028      	b.n	800b760 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	330b      	adds	r3, #11
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a1b      	ldr	r3, [r3, #32]
 800b724:	330b      	adds	r3, #11
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	f003 0308 	and.w	r3, r3, #8
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10a      	bne.n	800b746 <dir_find+0x86>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a18      	ldr	r0, [r3, #32]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3324      	adds	r3, #36	@ 0x24
 800b738:	220b      	movs	r2, #11
 800b73a:	4619      	mov	r1, r3
 800b73c:	f7ff f82e 	bl	800a79c <mem_cmp>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00b      	beq.n	800b75e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b746:	2100      	movs	r1, #0
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7ff fe11 	bl	800b370 <dir_next>
 800b74e:	4603      	mov	r3, r0
 800b750:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b752:	7dfb      	ldrb	r3, [r7, #23]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d0c5      	beq.n	800b6e4 <dir_find+0x24>
 800b758:	e002      	b.n	800b760 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b75a:	bf00      	nop
 800b75c:	e000      	b.n	800b760 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b75e:	bf00      	nop

	return res;
 800b760:	7dfb      	ldrb	r3, [r7, #23]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3718      	adds	r7, #24
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b084      	sub	sp, #16
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b778:	2101      	movs	r1, #1
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7ff febd 	bl	800b4fa <dir_alloc>
 800b780:	4603      	mov	r3, r0
 800b782:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b784:	7bfb      	ldrb	r3, [r7, #15]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d11c      	bne.n	800b7c4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	69db      	ldr	r3, [r3, #28]
 800b78e:	4619      	mov	r1, r3
 800b790:	68b8      	ldr	r0, [r7, #8]
 800b792:	f7ff f9f5 	bl	800ab80 <move_window>
 800b796:	4603      	mov	r3, r0
 800b798:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d111      	bne.n	800b7c4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a1b      	ldr	r3, [r3, #32]
 800b7a4:	2220      	movs	r2, #32
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7fe ffdc 	bl	800a766 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a18      	ldr	r0, [r3, #32]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	3324      	adds	r3, #36	@ 0x24
 800b7b6:	220b      	movs	r2, #11
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	f7fe ffb3 	bl	800a724 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b084      	sub	sp, #16
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	69db      	ldr	r3, [r3, #28]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f7ff f9cc 	bl	800ab80 <move_window>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800b7ec:	7afb      	ldrb	r3, [r7, #11]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d106      	bne.n	800b800 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	22e5      	movs	r2, #229	@ 0xe5
 800b7f8:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800b800:	7afb      	ldrb	r3, [r7, #11]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
	...

0800b80c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b088      	sub	sp, #32
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3324      	adds	r3, #36	@ 0x24
 800b820:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b822:	220b      	movs	r2, #11
 800b824:	2120      	movs	r1, #32
 800b826:	68b8      	ldr	r0, [r7, #8]
 800b828:	f7fe ff9d 	bl	800a766 <mem_set>
	si = i = 0; ni = 8;
 800b82c:	2300      	movs	r3, #0
 800b82e:	613b      	str	r3, [r7, #16]
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	61fb      	str	r3, [r7, #28]
 800b834:	2308      	movs	r3, #8
 800b836:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	61fa      	str	r2, [r7, #28]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	4413      	add	r3, r2
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b846:	7efb      	ldrb	r3, [r7, #27]
 800b848:	2b20      	cmp	r3, #32
 800b84a:	d94e      	bls.n	800b8ea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b84c:	7efb      	ldrb	r3, [r7, #27]
 800b84e:	2b2f      	cmp	r3, #47	@ 0x2f
 800b850:	d006      	beq.n	800b860 <create_name+0x54>
 800b852:	7efb      	ldrb	r3, [r7, #27]
 800b854:	2b5c      	cmp	r3, #92	@ 0x5c
 800b856:	d110      	bne.n	800b87a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b858:	e002      	b.n	800b860 <create_name+0x54>
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	3301      	adds	r3, #1
 800b85e:	61fb      	str	r3, [r7, #28]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	4413      	add	r3, r2
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	2b2f      	cmp	r3, #47	@ 0x2f
 800b86a:	d0f6      	beq.n	800b85a <create_name+0x4e>
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	4413      	add	r3, r2
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	2b5c      	cmp	r3, #92	@ 0x5c
 800b876:	d0f0      	beq.n	800b85a <create_name+0x4e>
			break;
 800b878:	e038      	b.n	800b8ec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b87a:	7efb      	ldrb	r3, [r7, #27]
 800b87c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b87e:	d003      	beq.n	800b888 <create_name+0x7c>
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	429a      	cmp	r2, r3
 800b886:	d30c      	bcc.n	800b8a2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	2b0b      	cmp	r3, #11
 800b88c:	d002      	beq.n	800b894 <create_name+0x88>
 800b88e:	7efb      	ldrb	r3, [r7, #27]
 800b890:	2b2e      	cmp	r3, #46	@ 0x2e
 800b892:	d001      	beq.n	800b898 <create_name+0x8c>
 800b894:	2306      	movs	r3, #6
 800b896:	e044      	b.n	800b922 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b898:	2308      	movs	r3, #8
 800b89a:	613b      	str	r3, [r7, #16]
 800b89c:	230b      	movs	r3, #11
 800b89e:	617b      	str	r3, [r7, #20]
			continue;
 800b8a0:	e022      	b.n	800b8e8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b8a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	da04      	bge.n	800b8b4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b8aa:	7efb      	ldrb	r3, [r7, #27]
 800b8ac:	3b80      	subs	r3, #128	@ 0x80
 800b8ae:	4a1f      	ldr	r2, [pc, #124]	@ (800b92c <create_name+0x120>)
 800b8b0:	5cd3      	ldrb	r3, [r2, r3]
 800b8b2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b8b4:	7efb      	ldrb	r3, [r7, #27]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	481d      	ldr	r0, [pc, #116]	@ (800b930 <create_name+0x124>)
 800b8ba:	f7fe ff96 	bl	800a7ea <chk_chr>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <create_name+0xbc>
 800b8c4:	2306      	movs	r3, #6
 800b8c6:	e02c      	b.n	800b922 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b8c8:	7efb      	ldrb	r3, [r7, #27]
 800b8ca:	2b60      	cmp	r3, #96	@ 0x60
 800b8cc:	d905      	bls.n	800b8da <create_name+0xce>
 800b8ce:	7efb      	ldrb	r3, [r7, #27]
 800b8d0:	2b7a      	cmp	r3, #122	@ 0x7a
 800b8d2:	d802      	bhi.n	800b8da <create_name+0xce>
 800b8d4:	7efb      	ldrb	r3, [r7, #27]
 800b8d6:	3b20      	subs	r3, #32
 800b8d8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	1c5a      	adds	r2, r3, #1
 800b8de:	613a      	str	r2, [r7, #16]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	7efa      	ldrb	r2, [r7, #27]
 800b8e6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b8e8:	e7a6      	b.n	800b838 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b8ea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	441a      	add	r2, r3
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <create_name+0xf4>
 800b8fc:	2306      	movs	r3, #6
 800b8fe:	e010      	b.n	800b922 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	2be5      	cmp	r3, #229	@ 0xe5
 800b906:	d102      	bne.n	800b90e <create_name+0x102>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	2205      	movs	r2, #5
 800b90c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b90e:	7efb      	ldrb	r3, [r7, #27]
 800b910:	2b20      	cmp	r3, #32
 800b912:	d801      	bhi.n	800b918 <create_name+0x10c>
 800b914:	2204      	movs	r2, #4
 800b916:	e000      	b.n	800b91a <create_name+0x10e>
 800b918:	2200      	movs	r2, #0
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	330b      	adds	r3, #11
 800b91e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b920:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b922:	4618      	mov	r0, r3
 800b924:	3720      	adds	r7, #32
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	0800e570 	.word	0x0800e570
 800b930:	0800d798 	.word	0x0800d798

0800b934 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b086      	sub	sp, #24
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b948:	e002      	b.n	800b950 <follow_path+0x1c>
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	3301      	adds	r3, #1
 800b94e:	603b      	str	r3, [r7, #0]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b2f      	cmp	r3, #47	@ 0x2f
 800b956:	d0f8      	beq.n	800b94a <follow_path+0x16>
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b95e:	d0f4      	beq.n	800b94a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	2200      	movs	r2, #0
 800b964:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	2b1f      	cmp	r3, #31
 800b96c:	d80a      	bhi.n	800b984 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2280      	movs	r2, #128	@ 0x80
 800b972:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b976:	2100      	movs	r1, #0
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f7ff fc7e 	bl	800b27a <dir_sdi>
 800b97e:	4603      	mov	r3, r0
 800b980:	75fb      	strb	r3, [r7, #23]
 800b982:	e043      	b.n	800ba0c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b984:	463b      	mov	r3, r7
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7ff ff3f 	bl	800b80c <create_name>
 800b98e:	4603      	mov	r3, r0
 800b990:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d134      	bne.n	800ba02 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff fe91 	bl	800b6c0 <dir_find>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b9a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00a      	beq.n	800b9c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b9b0:	7dfb      	ldrb	r3, [r7, #23]
 800b9b2:	2b04      	cmp	r3, #4
 800b9b4:	d127      	bne.n	800ba06 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b9b6:	7afb      	ldrb	r3, [r7, #11]
 800b9b8:	f003 0304 	and.w	r3, r3, #4
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d122      	bne.n	800ba06 <follow_path+0xd2>
 800b9c0:	2305      	movs	r3, #5
 800b9c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b9c4:	e01f      	b.n	800ba06 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b9c6:	7afb      	ldrb	r3, [r7, #11]
 800b9c8:	f003 0304 	and.w	r3, r3, #4
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d11c      	bne.n	800ba0a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	799b      	ldrb	r3, [r3, #6]
 800b9d4:	f003 0310 	and.w	r3, r3, #16
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d102      	bne.n	800b9e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b9dc:	2305      	movs	r3, #5
 800b9de:	75fb      	strb	r3, [r7, #23]
 800b9e0:	e014      	b.n	800ba0c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f0:	4413      	add	r3, r2
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f7ff fdc7 	bl	800b588 <ld_clust>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba00:	e7c0      	b.n	800b984 <follow_path+0x50>
			if (res != FR_OK) break;
 800ba02:	bf00      	nop
 800ba04:	e002      	b.n	800ba0c <follow_path+0xd8>
				break;
 800ba06:	bf00      	nop
 800ba08:	e000      	b.n	800ba0c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba0a:	bf00      	nop
			}
		}
	}

	return res;
 800ba0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3718      	adds	r7, #24
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b087      	sub	sp, #28
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ba1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d031      	beq.n	800ba90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	617b      	str	r3, [r7, #20]
 800ba32:	e002      	b.n	800ba3a <get_ldnumber+0x24>
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	3301      	adds	r3, #1
 800ba38:	617b      	str	r3, [r7, #20]
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	2b20      	cmp	r3, #32
 800ba40:	d903      	bls.n	800ba4a <get_ldnumber+0x34>
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	2b3a      	cmp	r3, #58	@ 0x3a
 800ba48:	d1f4      	bne.n	800ba34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	2b3a      	cmp	r3, #58	@ 0x3a
 800ba50:	d11c      	bne.n	800ba8c <get_ldnumber+0x76>
			tp = *path;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	1c5a      	adds	r2, r3, #1
 800ba5c:	60fa      	str	r2, [r7, #12]
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	3b30      	subs	r3, #48	@ 0x30
 800ba62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	2b09      	cmp	r3, #9
 800ba68:	d80e      	bhi.n	800ba88 <get_ldnumber+0x72>
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d10a      	bne.n	800ba88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d107      	bne.n	800ba88 <get_ldnumber+0x72>
					vol = (int)i;
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	617b      	str	r3, [r7, #20]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	e002      	b.n	800ba92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ba90:	693b      	ldr	r3, [r7, #16]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	371c      	adds	r7, #28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
	...

0800baa0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	70da      	strb	r2, [r3, #3]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f04f 32ff 	mov.w	r2, #4294967295
 800bab6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bab8:	6839      	ldr	r1, [r7, #0]
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f7ff f860 	bl	800ab80 <move_window>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <check_fs+0x2a>
 800bac6:	2304      	movs	r3, #4
 800bac8:	e038      	b.n	800bb3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	3330      	adds	r3, #48	@ 0x30
 800bace:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fda4 	bl	800a620 <ld_word>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d001      	beq.n	800bae8 <check_fs+0x48>
 800bae4:	2303      	movs	r3, #3
 800bae6:	e029      	b.n	800bb3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800baee:	2be9      	cmp	r3, #233	@ 0xe9
 800baf0:	d009      	beq.n	800bb06 <check_fs+0x66>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800baf8:	2beb      	cmp	r3, #235	@ 0xeb
 800bafa:	d11e      	bne.n	800bb3a <check_fs+0x9a>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bb02:	2b90      	cmp	r3, #144	@ 0x90
 800bb04:	d119      	bne.n	800bb3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	3330      	adds	r3, #48	@ 0x30
 800bb0a:	3336      	adds	r3, #54	@ 0x36
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fe fd9f 	bl	800a650 <ld_dword>
 800bb12:	4603      	mov	r3, r0
 800bb14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bb18:	4a0a      	ldr	r2, [pc, #40]	@ (800bb44 <check_fs+0xa4>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d101      	bne.n	800bb22 <check_fs+0x82>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	e00c      	b.n	800bb3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3330      	adds	r3, #48	@ 0x30
 800bb26:	3352      	adds	r3, #82	@ 0x52
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fe fd91 	bl	800a650 <ld_dword>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	4a05      	ldr	r2, [pc, #20]	@ (800bb48 <check_fs+0xa8>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d101      	bne.n	800bb3a <check_fs+0x9a>
 800bb36:	2300      	movs	r3, #0
 800bb38:	e000      	b.n	800bb3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bb3a:	2302      	movs	r3, #2
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	00544146 	.word	0x00544146
 800bb48:	33544146 	.word	0x33544146

0800bb4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b096      	sub	sp, #88	@ 0x58
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	4613      	mov	r3, r2
 800bb58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	f7ff ff58 	bl	800ba16 <get_ldnumber>
 800bb66:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	da01      	bge.n	800bb72 <find_volume+0x26>
 800bb6e:	230b      	movs	r3, #11
 800bb70:	e22d      	b.n	800bfce <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bb72:	4aa1      	ldr	r2, [pc, #644]	@ (800bdf8 <find_volume+0x2ac>)
 800bb74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <find_volume+0x3a>
 800bb82:	230c      	movs	r3, #12
 800bb84:	e223      	b.n	800bfce <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bb8c:	79fb      	ldrb	r3, [r7, #7]
 800bb8e:	f023 0301 	bic.w	r3, r3, #1
 800bb92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d01a      	beq.n	800bbd2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9e:	785b      	ldrb	r3, [r3, #1]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7fe fc9d 	bl	800a4e0 <disk_status>
 800bba6:	4603      	mov	r3, r0
 800bba8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bbac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bbb0:	f003 0301 	and.w	r3, r3, #1
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10c      	bne.n	800bbd2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bbb8:	79fb      	ldrb	r3, [r7, #7]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d007      	beq.n	800bbce <find_volume+0x82>
 800bbbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bbc2:	f003 0304 	and.w	r3, r3, #4
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bbca:	230a      	movs	r3, #10
 800bbcc:	e1ff      	b.n	800bfce <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800bbce:	2300      	movs	r3, #0
 800bbd0:	e1fd      	b.n	800bfce <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bbd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbda:	b2da      	uxtb	r2, r3
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbde:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe2:	785b      	ldrb	r3, [r3, #1]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fe fc95 	bl	800a514 <disk_initialize>
 800bbea:	4603      	mov	r3, r0
 800bbec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bbf0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e1e6      	b.n	800bfce <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bc00:	79fb      	ldrb	r3, [r7, #7]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d007      	beq.n	800bc16 <find_volume+0xca>
 800bc06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc0a:	f003 0304 	and.w	r3, r3, #4
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bc12:	230a      	movs	r3, #10
 800bc14:	e1db      	b.n	800bfce <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bc1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bc1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bc1e:	f7ff ff3f 	bl	800baa0 <check_fs>
 800bc22:	4603      	mov	r3, r0
 800bc24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bc28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d149      	bne.n	800bcc4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bc30:	2300      	movs	r3, #0
 800bc32:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc34:	e01e      	b.n	800bc74 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc3e:	011b      	lsls	r3, r3, #4
 800bc40:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bc44:	4413      	add	r3, r2
 800bc46:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d006      	beq.n	800bc60 <find_volume+0x114>
 800bc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc54:	3308      	adds	r3, #8
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe fcfa 	bl	800a650 <ld_dword>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	e000      	b.n	800bc62 <find_volume+0x116>
 800bc60:	2200      	movs	r2, #0
 800bc62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	3358      	adds	r3, #88	@ 0x58
 800bc68:	443b      	add	r3, r7
 800bc6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc70:	3301      	adds	r3, #1
 800bc72:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d9dd      	bls.n	800bc36 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800bc7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d002      	beq.n	800bc8a <find_volume+0x13e>
 800bc84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc86:	3b01      	subs	r3, #1
 800bc88:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bc8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	3358      	adds	r3, #88	@ 0x58
 800bc90:	443b      	add	r3, r7
 800bc92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bc96:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bc98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d005      	beq.n	800bcaa <find_volume+0x15e>
 800bc9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bca0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bca2:	f7ff fefd 	bl	800baa0 <check_fs>
 800bca6:	4603      	mov	r3, r0
 800bca8:	e000      	b.n	800bcac <find_volume+0x160>
 800bcaa:	2303      	movs	r3, #3
 800bcac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bcb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d905      	bls.n	800bcc4 <find_volume+0x178>
 800bcb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcba:	3301      	adds	r3, #1
 800bcbc:	643b      	str	r3, [r7, #64]	@ 0x40
 800bcbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcc0:	2b03      	cmp	r3, #3
 800bcc2:	d9e2      	bls.n	800bc8a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bcc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bcc8:	2b04      	cmp	r3, #4
 800bcca:	d101      	bne.n	800bcd0 <find_volume+0x184>
 800bccc:	2301      	movs	r3, #1
 800bcce:	e17e      	b.n	800bfce <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bcd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d901      	bls.n	800bcdc <find_volume+0x190>
 800bcd8:	230d      	movs	r3, #13
 800bcda:	e178      	b.n	800bfce <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcde:	3330      	adds	r3, #48	@ 0x30
 800bce0:	330b      	adds	r3, #11
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fe fc9c 	bl	800a620 <ld_word>
 800bce8:	4603      	mov	r3, r0
 800bcea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcee:	d001      	beq.n	800bcf4 <find_volume+0x1a8>
 800bcf0:	230d      	movs	r3, #13
 800bcf2:	e16c      	b.n	800bfce <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf6:	3330      	adds	r3, #48	@ 0x30
 800bcf8:	3316      	adds	r3, #22
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fe fc90 	bl	800a620 <ld_word>
 800bd00:	4603      	mov	r3, r0
 800bd02:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bd04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d106      	bne.n	800bd18 <find_volume+0x1cc>
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0c:	3330      	adds	r3, #48	@ 0x30
 800bd0e:	3324      	adds	r3, #36	@ 0x24
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fe fc9d 	bl	800a650 <ld_dword>
 800bd16:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800bd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd1c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd20:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800bd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2a:	789b      	ldrb	r3, [r3, #2]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d005      	beq.n	800bd3c <find_volume+0x1f0>
 800bd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd32:	789b      	ldrb	r3, [r3, #2]
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d001      	beq.n	800bd3c <find_volume+0x1f0>
 800bd38:	230d      	movs	r3, #13
 800bd3a:	e148      	b.n	800bfce <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3e:	789b      	ldrb	r3, [r3, #2]
 800bd40:	461a      	mov	r2, r3
 800bd42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd44:	fb02 f303 	mul.w	r3, r2, r3
 800bd48:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd50:	461a      	mov	r2, r3
 800bd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bd56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd58:	895b      	ldrh	r3, [r3, #10]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d008      	beq.n	800bd70 <find_volume+0x224>
 800bd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd60:	895b      	ldrh	r3, [r3, #10]
 800bd62:	461a      	mov	r2, r3
 800bd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd66:	895b      	ldrh	r3, [r3, #10]
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d001      	beq.n	800bd74 <find_volume+0x228>
 800bd70:	230d      	movs	r3, #13
 800bd72:	e12c      	b.n	800bfce <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd76:	3330      	adds	r3, #48	@ 0x30
 800bd78:	3311      	adds	r3, #17
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fe fc50 	bl	800a620 <ld_word>
 800bd80:	4603      	mov	r3, r0
 800bd82:	461a      	mov	r2, r3
 800bd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd8a:	891b      	ldrh	r3, [r3, #8]
 800bd8c:	f003 030f 	and.w	r3, r3, #15
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <find_volume+0x24e>
 800bd96:	230d      	movs	r3, #13
 800bd98:	e119      	b.n	800bfce <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bd9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd9c:	3330      	adds	r3, #48	@ 0x30
 800bd9e:	3313      	adds	r3, #19
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe fc3d 	bl	800a620 <ld_word>
 800bda6:	4603      	mov	r3, r0
 800bda8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bdaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d106      	bne.n	800bdbe <find_volume+0x272>
 800bdb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb2:	3330      	adds	r3, #48	@ 0x30
 800bdb4:	3320      	adds	r3, #32
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe fc4a 	bl	800a650 <ld_dword>
 800bdbc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc0:	3330      	adds	r3, #48	@ 0x30
 800bdc2:	330e      	adds	r3, #14
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7fe fc2b 	bl	800a620 <ld_word>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bdce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <find_volume+0x28c>
 800bdd4:	230d      	movs	r3, #13
 800bdd6:	e0fa      	b.n	800bfce <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bdd8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bdda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bddc:	4413      	add	r3, r2
 800bdde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bde0:	8912      	ldrh	r2, [r2, #8]
 800bde2:	0912      	lsrs	r2, r2, #4
 800bde4:	b292      	uxth	r2, r2
 800bde6:	4413      	add	r3, r2
 800bde8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bdea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d204      	bcs.n	800bdfc <find_volume+0x2b0>
 800bdf2:	230d      	movs	r3, #13
 800bdf4:	e0eb      	b.n	800bfce <find_volume+0x482>
 800bdf6:	bf00      	nop
 800bdf8:	200005a8 	.word	0x200005a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bdfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be04:	8952      	ldrh	r2, [r2, #10]
 800be06:	fbb3 f3f2 	udiv	r3, r3, r2
 800be0a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800be0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d101      	bne.n	800be16 <find_volume+0x2ca>
 800be12:	230d      	movs	r3, #13
 800be14:	e0db      	b.n	800bfce <find_volume+0x482>
		fmt = FS_FAT32;
 800be16:	2303      	movs	r3, #3
 800be18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800be1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800be22:	4293      	cmp	r3, r2
 800be24:	d802      	bhi.n	800be2c <find_volume+0x2e0>
 800be26:	2302      	movs	r3, #2
 800be28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800be2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be2e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800be32:	4293      	cmp	r3, r2
 800be34:	d802      	bhi.n	800be3c <find_volume+0x2f0>
 800be36:	2301      	movs	r3, #1
 800be38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800be3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3e:	1c9a      	adds	r2, r3, #2
 800be40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be42:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800be44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be48:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800be4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800be4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be4e:	441a      	add	r2, r3
 800be50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be52:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800be54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be58:	441a      	add	r2, r3
 800be5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be5c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800be5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800be62:	2b03      	cmp	r3, #3
 800be64:	d11e      	bne.n	800bea4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800be66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be68:	3330      	adds	r3, #48	@ 0x30
 800be6a:	332a      	adds	r3, #42	@ 0x2a
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7fe fbd7 	bl	800a620 <ld_word>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d001      	beq.n	800be7c <find_volume+0x330>
 800be78:	230d      	movs	r3, #13
 800be7a:	e0a8      	b.n	800bfce <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800be7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be7e:	891b      	ldrh	r3, [r3, #8]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d001      	beq.n	800be88 <find_volume+0x33c>
 800be84:	230d      	movs	r3, #13
 800be86:	e0a2      	b.n	800bfce <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800be88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be8a:	3330      	adds	r3, #48	@ 0x30
 800be8c:	332c      	adds	r3, #44	@ 0x2c
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fe fbde 	bl	800a650 <ld_dword>
 800be94:	4602      	mov	r2, r0
 800be96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be98:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800be9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	647b      	str	r3, [r7, #68]	@ 0x44
 800bea2:	e01f      	b.n	800bee4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea6:	891b      	ldrh	r3, [r3, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d101      	bne.n	800beb0 <find_volume+0x364>
 800beac:	230d      	movs	r3, #13
 800beae:	e08e      	b.n	800bfce <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800beb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb2:	6a1a      	ldr	r2, [r3, #32]
 800beb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800beb6:	441a      	add	r2, r3
 800beb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beba:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bebc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d103      	bne.n	800becc <find_volume+0x380>
 800bec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec6:	695b      	ldr	r3, [r3, #20]
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	e00a      	b.n	800bee2 <find_volume+0x396>
 800becc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bece:	695a      	ldr	r2, [r3, #20]
 800bed0:	4613      	mov	r3, r2
 800bed2:	005b      	lsls	r3, r3, #1
 800bed4:	4413      	add	r3, r2
 800bed6:	085a      	lsrs	r2, r3, #1
 800bed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beda:	695b      	ldr	r3, [r3, #20]
 800bedc:	f003 0301 	and.w	r3, r3, #1
 800bee0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bee2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee6:	699a      	ldr	r2, [r3, #24]
 800bee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800beea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800beee:	0a5b      	lsrs	r3, r3, #9
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d201      	bcs.n	800bef8 <find_volume+0x3ac>
 800bef4:	230d      	movs	r3, #13
 800bef6:	e06a      	b.n	800bfce <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800befa:	f04f 32ff 	mov.w	r2, #4294967295
 800befe:	611a      	str	r2, [r3, #16]
 800bf00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf02:	691a      	ldr	r2, [r3, #16]
 800bf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf06:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800bf08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf0a:	2280      	movs	r2, #128	@ 0x80
 800bf0c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bf0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	d149      	bne.n	800bfaa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bf16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf18:	3330      	adds	r3, #48	@ 0x30
 800bf1a:	3330      	adds	r3, #48	@ 0x30
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fe fb7f 	bl	800a620 <ld_word>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d140      	bne.n	800bfaa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bf28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bf30:	f7fe fe26 	bl	800ab80 <move_window>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d137      	bne.n	800bfaa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bf40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf42:	3330      	adds	r3, #48	@ 0x30
 800bf44:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fe fb69 	bl	800a620 <ld_word>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	461a      	mov	r2, r3
 800bf52:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d127      	bne.n	800bfaa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf5c:	3330      	adds	r3, #48	@ 0x30
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fe fb76 	bl	800a650 <ld_dword>
 800bf64:	4603      	mov	r3, r0
 800bf66:	4a1c      	ldr	r2, [pc, #112]	@ (800bfd8 <find_volume+0x48c>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d11e      	bne.n	800bfaa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf6e:	3330      	adds	r3, #48	@ 0x30
 800bf70:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fe fb6b 	bl	800a650 <ld_dword>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	4a17      	ldr	r2, [pc, #92]	@ (800bfdc <find_volume+0x490>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d113      	bne.n	800bfaa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bf82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf84:	3330      	adds	r3, #48	@ 0x30
 800bf86:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe fb60 	bl	800a650 <ld_dword>
 800bf90:	4602      	mov	r2, r0
 800bf92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf94:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bf96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf98:	3330      	adds	r3, #48	@ 0x30
 800bf9a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fe fb56 	bl	800a650 <ld_dword>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bfb0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bfb2:	4b0b      	ldr	r3, [pc, #44]	@ (800bfe0 <find_volume+0x494>)
 800bfb4:	881b      	ldrh	r3, [r3, #0]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	4b09      	ldr	r3, [pc, #36]	@ (800bfe0 <find_volume+0x494>)
 800bfbc:	801a      	strh	r2, [r3, #0]
 800bfbe:	4b08      	ldr	r3, [pc, #32]	@ (800bfe0 <find_volume+0x494>)
 800bfc0:	881a      	ldrh	r2, [r3, #0]
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bfc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bfc8:	f7fe fd72 	bl	800aab0 <clear_lock>
#endif
	return FR_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3758      	adds	r7, #88	@ 0x58
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	41615252 	.word	0x41615252
 800bfdc:	61417272 	.word	0x61417272
 800bfe0:	200005ac 	.word	0x200005ac

0800bfe4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bfee:	2309      	movs	r3, #9
 800bff0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d01c      	beq.n	800c032 <validate+0x4e>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d018      	beq.n	800c032 <validate+0x4e>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d013      	beq.n	800c032 <validate+0x4e>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	889a      	ldrh	r2, [r3, #4]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	88db      	ldrh	r3, [r3, #6]
 800c014:	429a      	cmp	r2, r3
 800c016:	d10c      	bne.n	800c032 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	785b      	ldrb	r3, [r3, #1]
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe fa5e 	bl	800a4e0 <disk_status>
 800c024:	4603      	mov	r3, r0
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d101      	bne.n	800c032 <validate+0x4e>
			res = FR_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d102      	bne.n	800c03e <validate+0x5a>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	e000      	b.n	800c040 <validate+0x5c>
 800c03e:	2300      	movs	r3, #0
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	6013      	str	r3, [r2, #0]
	return res;
 800c044:	7bfb      	ldrb	r3, [r7, #15]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
	...

0800c050 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b088      	sub	sp, #32
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	4613      	mov	r3, r2
 800c05c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c062:	f107 0310 	add.w	r3, r7, #16
 800c066:	4618      	mov	r0, r3
 800c068:	f7ff fcd5 	bl	800ba16 <get_ldnumber>
 800c06c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	2b00      	cmp	r3, #0
 800c072:	da01      	bge.n	800c078 <f_mount+0x28>
 800c074:	230b      	movs	r3, #11
 800c076:	e02b      	b.n	800c0d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c078:	4a17      	ldr	r2, [pc, #92]	@ (800c0d8 <f_mount+0x88>)
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c080:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d005      	beq.n	800c094 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c088:	69b8      	ldr	r0, [r7, #24]
 800c08a:	f7fe fd11 	bl	800aab0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	2200      	movs	r2, #0
 800c092:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d002      	beq.n	800c0a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	490d      	ldr	r1, [pc, #52]	@ (800c0d8 <f_mount+0x88>)
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <f_mount+0x66>
 800c0b0:	79fb      	ldrb	r3, [r7, #7]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d001      	beq.n	800c0ba <f_mount+0x6a>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	e00a      	b.n	800c0d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c0ba:	f107 010c 	add.w	r1, r7, #12
 800c0be:	f107 0308 	add.w	r3, r7, #8
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7ff fd41 	bl	800bb4c <find_volume>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3720      	adds	r7, #32
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	200005a8 	.word	0x200005a8

0800c0dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b098      	sub	sp, #96	@ 0x60
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d101      	bne.n	800c0f4 <f_open+0x18>
 800c0f0:	2309      	movs	r3, #9
 800c0f2:	e1a9      	b.n	800c448 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c0f4:	79fb      	ldrb	r3, [r7, #7]
 800c0f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c0fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c0fc:	79fa      	ldrb	r2, [r7, #7]
 800c0fe:	f107 0110 	add.w	r1, r7, #16
 800c102:	f107 0308 	add.w	r3, r7, #8
 800c106:	4618      	mov	r0, r3
 800c108:	f7ff fd20 	bl	800bb4c <find_volume>
 800c10c:	4603      	mov	r3, r0
 800c10e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c112:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c116:	2b00      	cmp	r3, #0
 800c118:	f040 818d 	bne.w	800c436 <f_open+0x35a>
		dj.obj.fs = fs;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	f107 0314 	add.w	r3, r7, #20
 800c126:	4611      	mov	r1, r2
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff fc03 	bl	800b934 <follow_path>
 800c12e:	4603      	mov	r3, r0
 800c130:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c134:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d118      	bne.n	800c16e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c13c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c140:	b25b      	sxtb	r3, r3
 800c142:	2b00      	cmp	r3, #0
 800c144:	da03      	bge.n	800c14e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c146:	2306      	movs	r3, #6
 800c148:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c14c:	e00f      	b.n	800c16e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	2b01      	cmp	r3, #1
 800c152:	bf8c      	ite	hi
 800c154:	2301      	movhi	r3, #1
 800c156:	2300      	movls	r3, #0
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	461a      	mov	r2, r3
 800c15c:	f107 0314 	add.w	r3, r7, #20
 800c160:	4611      	mov	r1, r2
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe fb5c 	bl	800a820 <chk_lock>
 800c168:	4603      	mov	r3, r0
 800c16a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c16e:	79fb      	ldrb	r3, [r7, #7]
 800c170:	f003 031c 	and.w	r3, r3, #28
 800c174:	2b00      	cmp	r3, #0
 800c176:	d07f      	beq.n	800c278 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c178:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d017      	beq.n	800c1b0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c180:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c184:	2b04      	cmp	r3, #4
 800c186:	d10e      	bne.n	800c1a6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c188:	f7fe fba6 	bl	800a8d8 <enq_lock>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d006      	beq.n	800c1a0 <f_open+0xc4>
 800c192:	f107 0314 	add.w	r3, r7, #20
 800c196:	4618      	mov	r0, r3
 800c198:	f7ff fae7 	bl	800b76a <dir_register>
 800c19c:	4603      	mov	r3, r0
 800c19e:	e000      	b.n	800c1a2 <f_open+0xc6>
 800c1a0:	2312      	movs	r3, #18
 800c1a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c1a6:	79fb      	ldrb	r3, [r7, #7]
 800c1a8:	f043 0308 	orr.w	r3, r3, #8
 800c1ac:	71fb      	strb	r3, [r7, #7]
 800c1ae:	e010      	b.n	800c1d2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c1b0:	7ebb      	ldrb	r3, [r7, #26]
 800c1b2:	f003 0311 	and.w	r3, r3, #17
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <f_open+0xe6>
					res = FR_DENIED;
 800c1ba:	2307      	movs	r3, #7
 800c1bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c1c0:	e007      	b.n	800c1d2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	f003 0304 	and.w	r3, r3, #4
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d002      	beq.n	800c1d2 <f_open+0xf6>
 800c1cc:	2308      	movs	r3, #8
 800c1ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c1d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d168      	bne.n	800c2ac <f_open+0x1d0>
 800c1da:	79fb      	ldrb	r3, [r7, #7]
 800c1dc:	f003 0308 	and.w	r3, r3, #8
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d063      	beq.n	800c2ac <f_open+0x1d0>
				dw = GET_FATTIME();
 800c1e4:	f7fe f810 	bl	800a208 <get_fattime>
 800c1e8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ec:	330e      	adds	r3, #14
 800c1ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fe fa6b 	bl	800a6cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c1f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1f8:	3316      	adds	r3, #22
 800c1fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fe fa65 	bl	800a6cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c204:	330b      	adds	r3, #11
 800c206:	2220      	movs	r2, #32
 800c208:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c20e:	4611      	mov	r1, r2
 800c210:	4618      	mov	r0, r3
 800c212:	f7ff f9b9 	bl	800b588 <ld_clust>
 800c216:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c21c:	2200      	movs	r2, #0
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff f9d1 	bl	800b5c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c226:	331c      	adds	r3, #28
 800c228:	2100      	movs	r1, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe fa4e 	bl	800a6cc <st_dword>
					fs->wflag = 1;
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	2201      	movs	r2, #1
 800c234:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d037      	beq.n	800c2ac <f_open+0x1d0>
						dw = fs->winsect;
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c240:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c242:	f107 0314 	add.w	r3, r7, #20
 800c246:	2200      	movs	r2, #0
 800c248:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7fe fee4 	bl	800b018 <remove_chain>
 800c250:	4603      	mov	r3, r0
 800c252:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c256:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d126      	bne.n	800c2ac <f_open+0x1d0>
							res = move_window(fs, dw);
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe fc8c 	bl	800ab80 <move_window>
 800c268:	4603      	mov	r3, r0
 800c26a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c272:	3a01      	subs	r2, #1
 800c274:	60da      	str	r2, [r3, #12]
 800c276:	e019      	b.n	800c2ac <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c278:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d115      	bne.n	800c2ac <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c280:	7ebb      	ldrb	r3, [r7, #26]
 800c282:	f003 0310 	and.w	r3, r3, #16
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <f_open+0x1b6>
					res = FR_NO_FILE;
 800c28a:	2304      	movs	r3, #4
 800c28c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c290:	e00c      	b.n	800c2ac <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c292:	79fb      	ldrb	r3, [r7, #7]
 800c294:	f003 0302 	and.w	r3, r3, #2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d007      	beq.n	800c2ac <f_open+0x1d0>
 800c29c:	7ebb      	ldrb	r3, [r7, #26]
 800c29e:	f003 0301 	and.w	r3, r3, #1
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <f_open+0x1d0>
						res = FR_DENIED;
 800c2a6:	2307      	movs	r3, #7
 800c2a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c2ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d126      	bne.n	800c302 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c2b4:	79fb      	ldrb	r3, [r7, #7]
 800c2b6:	f003 0308 	and.w	r3, r3, #8
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c2be:	79fb      	ldrb	r3, [r7, #7]
 800c2c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c2ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c2d4:	79fb      	ldrb	r3, [r7, #7]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	bf8c      	ite	hi
 800c2da:	2301      	movhi	r3, #1
 800c2dc:	2300      	movls	r3, #0
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	f107 0314 	add.w	r3, r7, #20
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fe fb17 	bl	800a91c <inc_lock>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d102      	bne.n	800c302 <f_open+0x226>
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c302:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c306:	2b00      	cmp	r3, #0
 800c308:	f040 8095 	bne.w	800c436 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c310:	4611      	mov	r1, r2
 800c312:	4618      	mov	r0, r3
 800c314:	f7ff f938 	bl	800b588 <ld_clust>
 800c318:	4602      	mov	r2, r0
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c320:	331c      	adds	r3, #28
 800c322:	4618      	mov	r0, r3
 800c324:	f7fe f994 	bl	800a650 <ld_dword>
 800c328:	4602      	mov	r2, r0
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2200      	movs	r2, #0
 800c332:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	88da      	ldrh	r2, [r3, #6]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	79fa      	ldrb	r2, [r7, #7]
 800c346:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2200      	movs	r2, #0
 800c358:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3330      	adds	r3, #48	@ 0x30
 800c35e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c362:	2100      	movs	r1, #0
 800c364:	4618      	mov	r0, r3
 800c366:	f7fe f9fe 	bl	800a766 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c36a:	79fb      	ldrb	r3, [r7, #7]
 800c36c:	f003 0320 	and.w	r3, r3, #32
 800c370:	2b00      	cmp	r3, #0
 800c372:	d060      	beq.n	800c436 <f_open+0x35a>
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d05c      	beq.n	800c436 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	68da      	ldr	r2, [r3, #12]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	895b      	ldrh	r3, [r3, #10]
 800c388:	025b      	lsls	r3, r3, #9
 800c38a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	657b      	str	r3, [r7, #84]	@ 0x54
 800c398:	e016      	b.n	800c3c8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe fca9 	bl	800acf6 <get_fat>
 800c3a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c3a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d802      	bhi.n	800c3b2 <f_open+0x2d6>
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c3b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b8:	d102      	bne.n	800c3c0 <f_open+0x2e4>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c3c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c3c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d103      	bne.n	800c3d8 <f_open+0x2fc>
 800c3d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c3d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d8e0      	bhi.n	800c39a <f_open+0x2be>
				}
				fp->clust = clst;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c3dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c3de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d127      	bne.n	800c436 <f_open+0x35a>
 800c3e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d022      	beq.n	800c436 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fe fc5f 	bl	800acb8 <clust2sect>
 800c3fa:	6478      	str	r0, [r7, #68]	@ 0x44
 800c3fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d103      	bne.n	800c40a <f_open+0x32e>
						res = FR_INT_ERR;
 800c402:	2302      	movs	r3, #2
 800c404:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c408:	e015      	b.n	800c436 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c40a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c40c:	0a5a      	lsrs	r2, r3, #9
 800c40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c410:	441a      	add	r2, r3
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	7858      	ldrb	r0, [r3, #1]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6a1a      	ldr	r2, [r3, #32]
 800c424:	2301      	movs	r3, #1
 800c426:	f7fe f89d 	bl	800a564 <disk_read>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <f_open+0x35a>
 800c430:	2301      	movs	r3, #1
 800c432:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c436:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d002      	beq.n	800c444 <f_open+0x368>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c444:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3760      	adds	r7, #96	@ 0x60
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b08e      	sub	sp, #56	@ 0x38
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
 800c45c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	2200      	movs	r2, #0
 800c466:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f107 0214 	add.w	r2, r7, #20
 800c46e:	4611      	mov	r1, r2
 800c470:	4618      	mov	r0, r3
 800c472:	f7ff fdb7 	bl	800bfe4 <validate>
 800c476:	4603      	mov	r3, r0
 800c478:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c47c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c480:	2b00      	cmp	r3, #0
 800c482:	d107      	bne.n	800c494 <f_read+0x44>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	7d5b      	ldrb	r3, [r3, #21]
 800c488:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c48c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c490:	2b00      	cmp	r3, #0
 800c492:	d002      	beq.n	800c49a <f_read+0x4a>
 800c494:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c498:	e115      	b.n	800c6c6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	7d1b      	ldrb	r3, [r3, #20]
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d101      	bne.n	800c4aa <f_read+0x5a>
 800c4a6:	2307      	movs	r3, #7
 800c4a8:	e10d      	b.n	800c6c6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	68da      	ldr	r2, [r3, #12]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	699b      	ldr	r3, [r3, #24]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	6a3b      	ldr	r3, [r7, #32]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	f240 80fe 	bls.w	800c6bc <f_read+0x26c>
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c4c4:	e0fa      	b.n	800c6bc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f040 80c6 	bne.w	800c660 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	0a5b      	lsrs	r3, r3, #9
 800c4da:	697a      	ldr	r2, [r7, #20]
 800c4dc:	8952      	ldrh	r2, [r2, #10]
 800c4de:	3a01      	subs	r2, #1
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d12f      	bne.n	800c54a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d103      	bne.n	800c4fa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	689b      	ldr	r3, [r3, #8]
 800c4f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4f8:	e013      	b.n	800c522 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d007      	beq.n	800c512 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	4619      	mov	r1, r3
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f7fe fe82 	bl	800b212 <clmt_clust>
 800c50e:	6338      	str	r0, [r7, #48]	@ 0x30
 800c510:	e007      	b.n	800c522 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	4619      	mov	r1, r3
 800c51a:	4610      	mov	r0, r2
 800c51c:	f7fe fbeb 	bl	800acf6 <get_fat>
 800c520:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c524:	2b01      	cmp	r3, #1
 800c526:	d804      	bhi.n	800c532 <f_read+0xe2>
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2202      	movs	r2, #2
 800c52c:	755a      	strb	r2, [r3, #21]
 800c52e:	2302      	movs	r3, #2
 800c530:	e0c9      	b.n	800c6c6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c538:	d104      	bne.n	800c544 <f_read+0xf4>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2201      	movs	r2, #1
 800c53e:	755a      	strb	r2, [r3, #21]
 800c540:	2301      	movs	r3, #1
 800c542:	e0c0      	b.n	800c6c6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c548:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c54a:	697a      	ldr	r2, [r7, #20]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	69db      	ldr	r3, [r3, #28]
 800c550:	4619      	mov	r1, r3
 800c552:	4610      	mov	r0, r2
 800c554:	f7fe fbb0 	bl	800acb8 <clust2sect>
 800c558:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d104      	bne.n	800c56a <f_read+0x11a>
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2202      	movs	r2, #2
 800c564:	755a      	strb	r2, [r3, #21]
 800c566:	2302      	movs	r3, #2
 800c568:	e0ad      	b.n	800c6c6 <f_read+0x276>
			sect += csect;
 800c56a:	69ba      	ldr	r2, [r7, #24]
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	4413      	add	r3, r2
 800c570:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	0a5b      	lsrs	r3, r3, #9
 800c576:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d039      	beq.n	800c5f2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c57e:	69fa      	ldr	r2, [r7, #28]
 800c580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c582:	4413      	add	r3, r2
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	8952      	ldrh	r2, [r2, #10]
 800c588:	4293      	cmp	r3, r2
 800c58a:	d905      	bls.n	800c598 <f_read+0x148>
					cc = fs->csize - csect;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	895b      	ldrh	r3, [r3, #10]
 800c590:	461a      	mov	r2, r3
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	7858      	ldrb	r0, [r3, #1]
 800c59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c59e:	69ba      	ldr	r2, [r7, #24]
 800c5a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5a2:	f7fd ffdf 	bl	800a564 <disk_read>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d004      	beq.n	800c5b6 <f_read+0x166>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	755a      	strb	r2, [r3, #21]
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e087      	b.n	800c6c6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	7d1b      	ldrb	r3, [r3, #20]
 800c5ba:	b25b      	sxtb	r3, r3
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	da14      	bge.n	800c5ea <f_read+0x19a>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6a1a      	ldr	r2, [r3, #32]
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d90d      	bls.n	800c5ea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6a1a      	ldr	r2, [r3, #32]
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	025b      	lsls	r3, r3, #9
 800c5d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5da:	18d0      	adds	r0, r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	3330      	adds	r3, #48	@ 0x30
 800c5e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	f7fe f89d 	bl	800a724 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ec:	025b      	lsls	r3, r3, #9
 800c5ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c5f0:	e050      	b.n	800c694 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	69ba      	ldr	r2, [r7, #24]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d02e      	beq.n	800c65a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	7d1b      	ldrb	r3, [r3, #20]
 800c600:	b25b      	sxtb	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	da18      	bge.n	800c638 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	7858      	ldrb	r0, [r3, #1]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6a1a      	ldr	r2, [r3, #32]
 800c614:	2301      	movs	r3, #1
 800c616:	f7fd ffc5 	bl	800a5a4 <disk_write>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d004      	beq.n	800c62a <f_read+0x1da>
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2201      	movs	r2, #1
 800c624:	755a      	strb	r2, [r3, #21]
 800c626:	2301      	movs	r3, #1
 800c628:	e04d      	b.n	800c6c6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	7d1b      	ldrb	r3, [r3, #20]
 800c62e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c632:	b2da      	uxtb	r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	7858      	ldrb	r0, [r3, #1]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c642:	2301      	movs	r3, #1
 800c644:	69ba      	ldr	r2, [r7, #24]
 800c646:	f7fd ff8d 	bl	800a564 <disk_read>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d004      	beq.n	800c65a <f_read+0x20a>
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2201      	movs	r2, #1
 800c654:	755a      	strb	r2, [r3, #21]
 800c656:	2301      	movs	r3, #1
 800c658:	e035      	b.n	800c6c6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	69ba      	ldr	r2, [r7, #24]
 800c65e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c668:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c66c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c66e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	429a      	cmp	r2, r3
 800c674:	d901      	bls.n	800c67a <f_read+0x22a>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c688:	4413      	add	r3, r2
 800c68a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c68c:	4619      	mov	r1, r3
 800c68e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c690:	f7fe f848 	bl	800a724 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c698:	4413      	add	r3, r2
 800c69a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	699a      	ldr	r2, [r3, #24]
 800c6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a2:	441a      	add	r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	619a      	str	r2, [r3, #24]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ae:	441a      	add	r2, r3
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f47f af01 	bne.w	800c4c6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3738      	adds	r7, #56	@ 0x38
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b08c      	sub	sp, #48	@ 0x30
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60f8      	str	r0, [r7, #12]
 800c6d6:	60b9      	str	r1, [r7, #8]
 800c6d8:	607a      	str	r2, [r7, #4]
 800c6da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f107 0210 	add.w	r2, r7, #16
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7ff fc78 	bl	800bfe4 <validate>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c6fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d107      	bne.n	800c712 <f_write+0x44>
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	7d5b      	ldrb	r3, [r3, #21]
 800c706:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c70a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d002      	beq.n	800c718 <f_write+0x4a>
 800c712:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c716:	e14b      	b.n	800c9b0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	7d1b      	ldrb	r3, [r3, #20]
 800c71c:	f003 0302 	and.w	r3, r3, #2
 800c720:	2b00      	cmp	r3, #0
 800c722:	d101      	bne.n	800c728 <f_write+0x5a>
 800c724:	2307      	movs	r3, #7
 800c726:	e143      	b.n	800c9b0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	699a      	ldr	r2, [r3, #24]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	441a      	add	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	429a      	cmp	r2, r3
 800c736:	f080 812d 	bcs.w	800c994 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	43db      	mvns	r3, r3
 800c740:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c742:	e127      	b.n	800c994 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f040 80e3 	bne.w	800c918 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	0a5b      	lsrs	r3, r3, #9
 800c758:	693a      	ldr	r2, [r7, #16]
 800c75a:	8952      	ldrh	r2, [r2, #10]
 800c75c:	3a01      	subs	r2, #1
 800c75e:	4013      	ands	r3, r2
 800c760:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d143      	bne.n	800c7f0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	699b      	ldr	r3, [r3, #24]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10c      	bne.n	800c78a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d11a      	bne.n	800c7b2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2100      	movs	r1, #0
 800c780:	4618      	mov	r0, r3
 800c782:	f7fe fcae 	bl	800b0e2 <create_chain>
 800c786:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c788:	e013      	b.n	800c7b2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d007      	beq.n	800c7a2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	4619      	mov	r1, r3
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f7fe fd3a 	bl	800b212 <clmt_clust>
 800c79e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c7a0:	e007      	b.n	800c7b2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	69db      	ldr	r3, [r3, #28]
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	4610      	mov	r0, r2
 800c7ac:	f7fe fc99 	bl	800b0e2 <create_chain>
 800c7b0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 80f2 	beq.w	800c99e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d104      	bne.n	800c7ca <f_write+0xfc>
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	755a      	strb	r2, [r3, #21]
 800c7c6:	2302      	movs	r3, #2
 800c7c8:	e0f2      	b.n	800c9b0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d0:	d104      	bne.n	800c7dc <f_write+0x10e>
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	755a      	strb	r2, [r3, #21]
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e0e9      	b.n	800c9b0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7e0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d102      	bne.n	800c7f0 <f_write+0x122>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7ee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	7d1b      	ldrb	r3, [r3, #20]
 800c7f4:	b25b      	sxtb	r3, r3
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	da18      	bge.n	800c82c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	7858      	ldrb	r0, [r3, #1]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6a1a      	ldr	r2, [r3, #32]
 800c808:	2301      	movs	r3, #1
 800c80a:	f7fd fecb 	bl	800a5a4 <disk_write>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d004      	beq.n	800c81e <f_write+0x150>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2201      	movs	r2, #1
 800c818:	755a      	strb	r2, [r3, #21]
 800c81a:	2301      	movs	r3, #1
 800c81c:	e0c8      	b.n	800c9b0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	7d1b      	ldrb	r3, [r3, #20]
 800c822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c826:	b2da      	uxtb	r2, r3
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	69db      	ldr	r3, [r3, #28]
 800c832:	4619      	mov	r1, r3
 800c834:	4610      	mov	r0, r2
 800c836:	f7fe fa3f 	bl	800acb8 <clust2sect>
 800c83a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d104      	bne.n	800c84c <f_write+0x17e>
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2202      	movs	r2, #2
 800c846:	755a      	strb	r2, [r3, #21]
 800c848:	2302      	movs	r3, #2
 800c84a:	e0b1      	b.n	800c9b0 <f_write+0x2e2>
			sect += csect;
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	4413      	add	r3, r2
 800c852:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	0a5b      	lsrs	r3, r3, #9
 800c858:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d03c      	beq.n	800c8da <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c860:	69ba      	ldr	r2, [r7, #24]
 800c862:	6a3b      	ldr	r3, [r7, #32]
 800c864:	4413      	add	r3, r2
 800c866:	693a      	ldr	r2, [r7, #16]
 800c868:	8952      	ldrh	r2, [r2, #10]
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d905      	bls.n	800c87a <f_write+0x1ac>
					cc = fs->csize - csect;
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	895b      	ldrh	r3, [r3, #10]
 800c872:	461a      	mov	r2, r3
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	7858      	ldrb	r0, [r3, #1]
 800c87e:	6a3b      	ldr	r3, [r7, #32]
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	69f9      	ldr	r1, [r7, #28]
 800c884:	f7fd fe8e 	bl	800a5a4 <disk_write>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d004      	beq.n	800c898 <f_write+0x1ca>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2201      	movs	r2, #1
 800c892:	755a      	strb	r2, [r3, #21]
 800c894:	2301      	movs	r3, #1
 800c896:	e08b      	b.n	800c9b0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a1a      	ldr	r2, [r3, #32]
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	6a3a      	ldr	r2, [r7, #32]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d915      	bls.n	800c8d2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6a1a      	ldr	r2, [r3, #32]
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	1ad3      	subs	r3, r2, r3
 800c8b4:	025b      	lsls	r3, r3, #9
 800c8b6:	69fa      	ldr	r2, [r7, #28]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8be:	4619      	mov	r1, r3
 800c8c0:	f7fd ff30 	bl	800a724 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	7d1b      	ldrb	r3, [r3, #20]
 800c8c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	025b      	lsls	r3, r3, #9
 800c8d6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c8d8:	e03f      	b.n	800c95a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6a1b      	ldr	r3, [r3, #32]
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d016      	beq.n	800c912 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	699a      	ldr	r2, [r3, #24]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d210      	bcs.n	800c912 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	7858      	ldrb	r0, [r3, #1]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	f7fd fe31 	bl	800a564 <disk_read>
 800c902:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c904:	2b00      	cmp	r3, #0
 800c906:	d004      	beq.n	800c912 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2201      	movs	r2, #1
 800c90c:	755a      	strb	r2, [r3, #21]
 800c90e:	2301      	movs	r3, #1
 800c910:	e04e      	b.n	800c9b0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	697a      	ldr	r2, [r7, #20]
 800c916:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	699b      	ldr	r3, [r3, #24]
 800c91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c920:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c924:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d901      	bls.n	800c932 <f_write+0x264>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	699b      	ldr	r3, [r3, #24]
 800c93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c940:	4413      	add	r3, r2
 800c942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c944:	69f9      	ldr	r1, [r7, #28]
 800c946:	4618      	mov	r0, r3
 800c948:	f7fd feec 	bl	800a724 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	7d1b      	ldrb	r3, [r3, #20]
 800c950:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c954:	b2da      	uxtb	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95e:	4413      	add	r3, r2
 800c960:	61fb      	str	r3, [r7, #28]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	699a      	ldr	r2, [r3, #24]
 800c966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c968:	441a      	add	r2, r3
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	619a      	str	r2, [r3, #24]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	68da      	ldr	r2, [r3, #12]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	699b      	ldr	r3, [r3, #24]
 800c976:	429a      	cmp	r2, r3
 800c978:	bf38      	it	cc
 800c97a:	461a      	movcc	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	60da      	str	r2, [r3, #12]
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c986:	441a      	add	r2, r3
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	f47f aed4 	bne.w	800c744 <f_write+0x76>
 800c99c:	e000      	b.n	800c9a0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c99e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	7d1b      	ldrb	r3, [r3, #20]
 800c9a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3730      	adds	r7, #48	@ 0x30
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f107 0208 	add.w	r2, r7, #8
 800c9c6:	4611      	mov	r1, r2
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7ff fb0b 	bl	800bfe4 <validate>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d168      	bne.n	800caaa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	7d1b      	ldrb	r3, [r3, #20]
 800c9dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d062      	beq.n	800caaa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	7d1b      	ldrb	r3, [r3, #20]
 800c9e8:	b25b      	sxtb	r3, r3
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	da15      	bge.n	800ca1a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	7858      	ldrb	r0, [r3, #1]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a1a      	ldr	r2, [r3, #32]
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	f7fd fdd1 	bl	800a5a4 <disk_write>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <f_sync+0x54>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e04f      	b.n	800caac <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	7d1b      	ldrb	r3, [r3, #20]
 800ca10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca1a:	f7fd fbf5 	bl	800a208 <get_fattime>
 800ca1e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca26:	4619      	mov	r1, r3
 800ca28:	4610      	mov	r0, r2
 800ca2a:	f7fe f8a9 	bl	800ab80 <move_window>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d138      	bne.n	800caaa <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca3c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	330b      	adds	r3, #11
 800ca42:	781a      	ldrb	r2, [r3, #0]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	330b      	adds	r3, #11
 800ca48:	f042 0220 	orr.w	r2, r2, #32
 800ca4c:	b2d2      	uxtb	r2, r2
 800ca4e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6818      	ldr	r0, [r3, #0]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	461a      	mov	r2, r3
 800ca5a:	68f9      	ldr	r1, [r7, #12]
 800ca5c:	f7fe fdb3 	bl	800b5c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f103 021c 	add.w	r2, r3, #28
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	4610      	mov	r0, r2
 800ca6e:	f7fd fe2d 	bl	800a6cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	3316      	adds	r3, #22
 800ca76:	6939      	ldr	r1, [r7, #16]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7fd fe27 	bl	800a6cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3312      	adds	r3, #18
 800ca82:	2100      	movs	r1, #0
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7fd fe06 	bl	800a696 <st_word>
					fs->wflag = 1;
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fe f8a2 	bl	800abdc <sync_fs>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	7d1b      	ldrb	r3, [r3, #20]
 800caa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800caaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3718      	adds	r7, #24
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f7ff ff7b 	bl	800c9b8 <f_sync>
 800cac2:	4603      	mov	r3, r0
 800cac4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cac6:	7bfb      	ldrb	r3, [r7, #15]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d118      	bne.n	800cafe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f107 0208 	add.w	r2, r7, #8
 800cad2:	4611      	mov	r1, r2
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7ff fa85 	bl	800bfe4 <validate>
 800cada:	4603      	mov	r3, r0
 800cadc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cade:	7bfb      	ldrb	r3, [r7, #15]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d10c      	bne.n	800cafe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	691b      	ldr	r3, [r3, #16]
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fd ffa5 	bl	800aa38 <dec_lock>
 800caee:	4603      	mov	r3, r0
 800caf0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d102      	bne.n	800cafe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b090      	sub	sp, #64	@ 0x40
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f107 0208 	add.w	r2, r7, #8
 800cb18:	4611      	mov	r1, r2
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7ff fa62 	bl	800bfe4 <validate>
 800cb20:	4603      	mov	r3, r0
 800cb22:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cb26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d103      	bne.n	800cb36 <f_lseek+0x2e>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	7d5b      	ldrb	r3, [r3, #21]
 800cb32:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cb36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d002      	beq.n	800cb44 <f_lseek+0x3c>
 800cb3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb42:	e1e6      	b.n	800cf12 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f000 80d1 	beq.w	800ccf0 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb54:	d15a      	bne.n	800cc0c <f_lseek+0x104>
			tbl = fp->cltbl;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb5a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5e:	1d1a      	adds	r2, r3, #4
 800cb60:	627a      	str	r2, [r7, #36]	@ 0x24
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	617b      	str	r3, [r7, #20]
 800cb66:	2302      	movs	r3, #2
 800cb68:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	689b      	ldr	r3, [r3, #8]
 800cb6e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800cb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d03a      	beq.n	800cbec <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb78:	613b      	str	r3, [r7, #16]
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb80:	3302      	adds	r3, #2
 800cb82:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800cb84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fe f8af 	bl	800acf6 <get_fat>
 800cb98:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d804      	bhi.n	800cbaa <f_lseek+0xa2>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2202      	movs	r2, #2
 800cba4:	755a      	strb	r2, [r3, #21]
 800cba6:	2302      	movs	r3, #2
 800cba8:	e1b3      	b.n	800cf12 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb0:	d104      	bne.n	800cbbc <f_lseek+0xb4>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	755a      	strb	r2, [r3, #21]
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e1aa      	b.n	800cf12 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d0de      	beq.n	800cb84 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cbc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d809      	bhi.n	800cbe2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd0:	1d1a      	adds	r2, r3, #4
 800cbd2:	627a      	str	r2, [r7, #36]	@ 0x24
 800cbd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbda:	1d1a      	adds	r2, r3, #4
 800cbdc:	627a      	str	r2, [r7, #36]	@ 0x24
 800cbde:	693a      	ldr	r2, [r7, #16]
 800cbe0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d3c4      	bcc.n	800cb76 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbf2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cbf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d803      	bhi.n	800cc04 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfe:	2200      	movs	r2, #0
 800cc00:	601a      	str	r2, [r3, #0]
 800cc02:	e184      	b.n	800cf0e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cc04:	2311      	movs	r3, #17
 800cc06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cc0a:	e180      	b.n	800cf0e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d902      	bls.n	800cc1c <f_lseek+0x114>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	683a      	ldr	r2, [r7, #0]
 800cc20:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f000 8172 	beq.w	800cf0e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	4619      	mov	r1, r3
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7fe faee 	bl	800b212 <clmt_clust>
 800cc36:	4602      	mov	r2, r0
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cc3c:	68ba      	ldr	r2, [r7, #8]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	69db      	ldr	r3, [r3, #28]
 800cc42:	4619      	mov	r1, r3
 800cc44:	4610      	mov	r0, r2
 800cc46:	f7fe f837 	bl	800acb8 <clust2sect>
 800cc4a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d104      	bne.n	800cc5c <f_lseek+0x154>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2202      	movs	r2, #2
 800cc56:	755a      	strb	r2, [r3, #21]
 800cc58:	2302      	movs	r3, #2
 800cc5a:	e15a      	b.n	800cf12 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	0a5b      	lsrs	r3, r3, #9
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	8952      	ldrh	r2, [r2, #10]
 800cc66:	3a01      	subs	r2, #1
 800cc68:	4013      	ands	r3, r2
 800cc6a:	69ba      	ldr	r2, [r7, #24]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f000 8148 	beq.w	800cf0e <f_lseek+0x406>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	69ba      	ldr	r2, [r7, #24]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	f000 8142 	beq.w	800cf0e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	7d1b      	ldrb	r3, [r3, #20]
 800cc8e:	b25b      	sxtb	r3, r3
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	da18      	bge.n	800ccc6 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	7858      	ldrb	r0, [r3, #1]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a1a      	ldr	r2, [r3, #32]
 800cca2:	2301      	movs	r3, #1
 800cca4:	f7fd fc7e 	bl	800a5a4 <disk_write>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d004      	beq.n	800ccb8 <f_lseek+0x1b0>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	755a      	strb	r2, [r3, #21]
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e12c      	b.n	800cf12 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	7d1b      	ldrb	r3, [r3, #20]
 800ccbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccc0:	b2da      	uxtb	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	7858      	ldrb	r0, [r3, #1]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	69ba      	ldr	r2, [r7, #24]
 800ccd4:	f7fd fc46 	bl	800a564 <disk_read>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d004      	beq.n	800cce8 <f_lseek+0x1e0>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2201      	movs	r2, #1
 800cce2:	755a      	strb	r2, [r3, #21]
 800cce4:	2301      	movs	r3, #1
 800cce6:	e114      	b.n	800cf12 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	69ba      	ldr	r2, [r7, #24]
 800ccec:	621a      	str	r2, [r3, #32]
 800ccee:	e10e      	b.n	800cf0e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d908      	bls.n	800cd0c <f_lseek+0x204>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	7d1b      	ldrb	r3, [r3, #20]
 800ccfe:	f003 0302 	and.w	r3, r3, #2
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d102      	bne.n	800cd0c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	699b      	ldr	r3, [r3, #24]
 800cd10:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cd12:	2300      	movs	r3, #0
 800cd14:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd1a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	f000 80a7 	beq.w	800ce72 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	895b      	ldrh	r3, [r3, #10]
 800cd28:	025b      	lsls	r3, r3, #9
 800cd2a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cd2c:	6a3b      	ldr	r3, [r7, #32]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d01b      	beq.n	800cd6a <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	1e5a      	subs	r2, r3, #1
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	fbb2 f2f3 	udiv	r2, r2, r3
 800cd3c:	6a3b      	ldr	r3, [r7, #32]
 800cd3e:	1e59      	subs	r1, r3, #1
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d30f      	bcc.n	800cd6a <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cd4a:	6a3b      	ldr	r3, [r7, #32]
 800cd4c:	1e5a      	subs	r2, r3, #1
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	425b      	negs	r3, r3
 800cd52:	401a      	ands	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	699b      	ldr	r3, [r3, #24]
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	69db      	ldr	r3, [r3, #28]
 800cd66:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd68:	e022      	b.n	800cdb0 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d119      	bne.n	800cdaa <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2100      	movs	r1, #0
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fe f9b1 	bl	800b0e2 <create_chain>
 800cd80:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d104      	bne.n	800cd92 <f_lseek+0x28a>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2202      	movs	r2, #2
 800cd8c:	755a      	strb	r2, [r3, #21]
 800cd8e:	2302      	movs	r3, #2
 800cd90:	e0bf      	b.n	800cf12 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd98:	d104      	bne.n	800cda4 <f_lseek+0x29c>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	755a      	strb	r2, [r3, #21]
 800cda0:	2301      	movs	r3, #1
 800cda2:	e0b6      	b.n	800cf12 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cda8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cdae:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d05d      	beq.n	800ce72 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800cdb6:	e03a      	b.n	800ce2e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800cdb8:	683a      	ldr	r2, [r7, #0]
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	603b      	str	r3, [r7, #0]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	699a      	ldr	r2, [r3, #24]
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	441a      	add	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	7d1b      	ldrb	r3, [r3, #20]
 800cdd0:	f003 0302 	and.w	r3, r3, #2
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00b      	beq.n	800cdf0 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe f980 	bl	800b0e2 <create_chain>
 800cde2:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d108      	bne.n	800cdfc <f_lseek+0x2f4>
							ofs = 0; break;
 800cdea:	2300      	movs	r3, #0
 800cdec:	603b      	str	r3, [r7, #0]
 800cdee:	e022      	b.n	800ce36 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fd ff7e 	bl	800acf6 <get_fat>
 800cdfa:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce02:	d104      	bne.n	800ce0e <f_lseek+0x306>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	755a      	strb	r2, [r3, #21]
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e081      	b.n	800cf12 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d904      	bls.n	800ce1e <f_lseek+0x316>
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	695b      	ldr	r3, [r3, #20]
 800ce18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d304      	bcc.n	800ce28 <f_lseek+0x320>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2202      	movs	r2, #2
 800ce22:	755a      	strb	r2, [r3, #21]
 800ce24:	2302      	movs	r3, #2
 800ce26:	e074      	b.n	800cf12 <f_lseek+0x40a>
					fp->clust = clst;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce2c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ce2e:	683a      	ldr	r2, [r7, #0]
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d8c0      	bhi.n	800cdb8 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	699a      	ldr	r2, [r3, #24]
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	441a      	add	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d012      	beq.n	800ce72 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fd ff31 	bl	800acb8 <clust2sect>
 800ce56:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ce58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d104      	bne.n	800ce68 <f_lseek+0x360>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2202      	movs	r2, #2
 800ce62:	755a      	strb	r2, [r3, #21]
 800ce64:	2302      	movs	r3, #2
 800ce66:	e054      	b.n	800cf12 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	0a5b      	lsrs	r3, r3, #9
 800ce6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce6e:	4413      	add	r3, r2
 800ce70:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	699a      	ldr	r2, [r3, #24]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d90a      	bls.n	800ce94 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	699a      	ldr	r2, [r3, #24]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	7d1b      	ldrb	r3, [r3, #20]
 800ce8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce8e:	b2da      	uxtb	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d036      	beq.n	800cf0e <f_lseek+0x406>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6a1b      	ldr	r3, [r3, #32]
 800cea4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d031      	beq.n	800cf0e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	7d1b      	ldrb	r3, [r3, #20]
 800ceae:	b25b      	sxtb	r3, r3
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	da18      	bge.n	800cee6 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	7858      	ldrb	r0, [r3, #1]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a1a      	ldr	r2, [r3, #32]
 800cec2:	2301      	movs	r3, #1
 800cec4:	f7fd fb6e 	bl	800a5a4 <disk_write>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d004      	beq.n	800ced8 <f_lseek+0x3d0>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	755a      	strb	r2, [r3, #21]
 800ced4:	2301      	movs	r3, #1
 800ced6:	e01c      	b.n	800cf12 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	7d1b      	ldrb	r3, [r3, #20]
 800cedc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cee0:	b2da      	uxtb	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	7858      	ldrb	r0, [r3, #1]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cef0:	2301      	movs	r3, #1
 800cef2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cef4:	f7fd fb36 	bl	800a564 <disk_read>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d004      	beq.n	800cf08 <f_lseek+0x400>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2201      	movs	r2, #1
 800cf02:	755a      	strb	r2, [r3, #21]
 800cf04:	2301      	movs	r3, #1
 800cf06:	e004      	b.n	800cf12 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf0c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cf0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3740      	adds	r7, #64	@ 0x40
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b09e      	sub	sp, #120	@ 0x78
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800cf26:	f107 010c 	add.w	r1, r7, #12
 800cf2a:	1d3b      	adds	r3, r7, #4
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe fe0c 	bl	800bb4c <find_volume>
 800cf34:	4603      	mov	r3, r0
 800cf36:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800cf3e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f040 808e 	bne.w	800d064 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cf4e:	4611      	mov	r1, r2
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fe fcef 	bl	800b934 <follow_path>
 800cf56:	4603      	mov	r3, r0
 800cf58:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800cf5c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d108      	bne.n	800cf76 <f_unlink+0x5c>
 800cf64:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cf68:	2102      	movs	r1, #2
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fd fc58 	bl	800a820 <chk_lock>
 800cf70:	4603      	mov	r3, r0
 800cf72:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800cf76:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d172      	bne.n	800d064 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800cf7e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf82:	b25b      	sxtb	r3, r3
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	da03      	bge.n	800cf90 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800cf88:	2306      	movs	r3, #6
 800cf8a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800cf8e:	e008      	b.n	800cfa2 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800cf90:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800cf94:	f003 0301 	and.w	r3, r3, #1
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800cf9c:	2307      	movs	r3, #7
 800cf9e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800cfa2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d134      	bne.n	800d014 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cfae:	4611      	mov	r1, r2
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fe fae9 	bl	800b588 <ld_clust>
 800cfb6:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800cfb8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800cfbc:	f003 0310 	and.w	r3, r3, #16
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d027      	beq.n	800d014 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800cfc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cfca:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800cfcc:	f107 0310 	add.w	r3, r7, #16
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe f951 	bl	800b27a <dir_sdi>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800cfde:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d116      	bne.n	800d014 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800cfe6:	f107 0310 	add.w	r3, r7, #16
 800cfea:	2100      	movs	r1, #0
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fe fb0a 	bl	800b606 <dir_read>
 800cff2:	4603      	mov	r3, r0
 800cff4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800cff8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d102      	bne.n	800d006 <f_unlink+0xec>
 800d000:	2307      	movs	r3, #7
 800d002:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800d006:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	d102      	bne.n	800d014 <f_unlink+0xfa>
 800d00e:	2300      	movs	r3, #0
 800d010:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800d014:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d123      	bne.n	800d064 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800d01c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d020:	4618      	mov	r0, r3
 800d022:	f7fe fbd4 	bl	800b7ce <dir_remove>
 800d026:	4603      	mov	r3, r0
 800d028:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800d02c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d030:	2b00      	cmp	r3, #0
 800d032:	d10c      	bne.n	800d04e <f_unlink+0x134>
 800d034:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d036:	2b00      	cmp	r3, #0
 800d038:	d009      	beq.n	800d04e <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800d03a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d03e:	2200      	movs	r2, #0
 800d040:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d042:	4618      	mov	r0, r3
 800d044:	f7fd ffe8 	bl	800b018 <remove_chain>
 800d048:	4603      	mov	r3, r0
 800d04a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800d04e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d052:	2b00      	cmp	r3, #0
 800d054:	d106      	bne.n	800d064 <f_unlink+0x14a>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fd fdbf 	bl	800abdc <sync_fs>
 800d05e:	4603      	mov	r3, r0
 800d060:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d064:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3778      	adds	r7, #120	@ 0x78
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800d070:	b590      	push	{r4, r7, lr}
 800d072:	b0a5      	sub	sp, #148	@ 0x94
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800d07a:	463b      	mov	r3, r7
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7fe fcca 	bl	800ba16 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800d082:	f107 0120 	add.w	r1, r7, #32
 800d086:	1d3b      	adds	r3, r7, #4
 800d088:	2202      	movs	r2, #2
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fe fd5e 	bl	800bb4c <find_volume>
 800d090:	4603      	mov	r3, r0
 800d092:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800d096:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f040 80db 	bne.w	800d256 <f_rename+0x1e6>
		djo.obj.fs = fs;
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d0aa:	4611      	mov	r1, r2
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7fe fc41 	bl	800b934 <follow_path>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800d0b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d108      	bne.n	800d0d2 <f_rename+0x62>
 800d0c0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d0c4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d002      	beq.n	800d0d2 <f_rename+0x62>
 800d0cc:	2306      	movs	r3, #6
 800d0ce:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800d0d2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d108      	bne.n	800d0ec <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800d0da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d0de:	2102      	movs	r1, #2
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fd fb9d 	bl	800a820 <chk_lock>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800d0ec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f040 80b0 	bne.w	800d256 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800d0f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d0f8:	f103 010b 	add.w	r1, r3, #11
 800d0fc:	f107 0308 	add.w	r3, r7, #8
 800d100:	2215      	movs	r2, #21
 800d102:	4618      	mov	r0, r3
 800d104:	f7fd fb0e 	bl	800a724 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800d108:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800d10c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d110:	2230      	movs	r2, #48	@ 0x30
 800d112:	4618      	mov	r0, r3
 800d114:	f7fd fb06 	bl	800a724 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800d118:	683a      	ldr	r2, [r7, #0]
 800d11a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d11e:	4611      	mov	r1, r2
 800d120:	4618      	mov	r0, r3
 800d122:	f7fe fc07 	bl	800b934 <follow_path>
 800d126:	4603      	mov	r3, r0
 800d128:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800d12c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d130:	2b00      	cmp	r3, #0
 800d132:	d10c      	bne.n	800d14e <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800d134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d138:	429a      	cmp	r2, r3
 800d13a:	d105      	bne.n	800d148 <f_rename+0xd8>
 800d13c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d13e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d140:	429a      	cmp	r2, r3
 800d142:	d101      	bne.n	800d148 <f_rename+0xd8>
 800d144:	2304      	movs	r3, #4
 800d146:	e000      	b.n	800d14a <f_rename+0xda>
 800d148:	2308      	movs	r3, #8
 800d14a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800d14e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d152:	2b04      	cmp	r3, #4
 800d154:	d168      	bne.n	800d228 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800d156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fe fb05 	bl	800b76a <dir_register>
 800d160:	4603      	mov	r3, r0
 800d162:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800d166:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d15c      	bne.n	800d228 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800d16e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800d174:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d178:	f103 000d 	add.w	r0, r3, #13
 800d17c:	f107 0308 	add.w	r3, r7, #8
 800d180:	3302      	adds	r3, #2
 800d182:	2213      	movs	r2, #19
 800d184:	4619      	mov	r1, r3
 800d186:	f7fd facd 	bl	800a724 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800d18a:	7a3a      	ldrb	r2, [r7, #8]
 800d18c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d190:	330b      	adds	r3, #11
 800d192:	f042 0220 	orr.w	r2, r2, #32
 800d196:	b2d2      	uxtb	r2, r2
 800d198:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	2201      	movs	r2, #1
 800d19e:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800d1a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d1a4:	330b      	adds	r3, #11
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	f003 0310 	and.w	r3, r3, #16
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d03b      	beq.n	800d228 <f_rename+0x1b8>
 800d1b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d037      	beq.n	800d228 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800d1b8:	6a3c      	ldr	r4, [r7, #32]
 800d1ba:	6a3b      	ldr	r3, [r7, #32]
 800d1bc:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fe f9e1 	bl	800b588 <ld_clust>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f7fd fd74 	bl	800acb8 <clust2sect>
 800d1d0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800d1d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d103      	bne.n	800d1e4 <f_rename+0x174>
								res = FR_INT_ERR;
 800d1dc:	2302      	movs	r3, #2
 800d1de:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800d1e2:	e021      	b.n	800d228 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800d1e4:	6a3b      	ldr	r3, [r7, #32]
 800d1e6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7fd fcc8 	bl	800ab80 <move_window>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800d1f6:	6a3b      	ldr	r3, [r7, #32]
 800d1f8:	3330      	adds	r3, #48	@ 0x30
 800d1fa:	3320      	adds	r3, #32
 800d1fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800d200:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10f      	bne.n	800d228 <f_rename+0x1b8>
 800d208:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d20c:	3301      	adds	r3, #1
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	2b2e      	cmp	r3, #46	@ 0x2e
 800d212:	d109      	bne.n	800d228 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800d214:	6a3b      	ldr	r3, [r7, #32]
 800d216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d218:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe f9d2 	bl	800b5c6 <st_clust>
									fs->wflag = 1;
 800d222:	6a3b      	ldr	r3, [r7, #32]
 800d224:	2201      	movs	r2, #1
 800d226:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800d228:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d112      	bne.n	800d256 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800d230:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d234:	4618      	mov	r0, r3
 800d236:	f7fe faca 	bl	800b7ce <dir_remove>
 800d23a:	4603      	mov	r3, r0
 800d23c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800d240:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d244:	2b00      	cmp	r3, #0
 800d246:	d106      	bne.n	800d256 <f_rename+0x1e6>
					res = sync_fs(fs);
 800d248:	6a3b      	ldr	r3, [r7, #32]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fd fcc6 	bl	800abdc <sync_fs>
 800d250:	4603      	mov	r3, r0
 800d252:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d256:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3794      	adds	r7, #148	@ 0x94
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd90      	pop	{r4, r7, pc}
	...

0800d264 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d264:	b480      	push	{r7}
 800d266:	b087      	sub	sp, #28
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	4613      	mov	r3, r2
 800d270:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d272:	2301      	movs	r3, #1
 800d274:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d27a:	4b1f      	ldr	r3, [pc, #124]	@ (800d2f8 <FATFS_LinkDriverEx+0x94>)
 800d27c:	7a5b      	ldrb	r3, [r3, #9]
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b00      	cmp	r3, #0
 800d282:	d131      	bne.n	800d2e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d284:	4b1c      	ldr	r3, [pc, #112]	@ (800d2f8 <FATFS_LinkDriverEx+0x94>)
 800d286:	7a5b      	ldrb	r3, [r3, #9]
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	461a      	mov	r2, r3
 800d28c:	4b1a      	ldr	r3, [pc, #104]	@ (800d2f8 <FATFS_LinkDriverEx+0x94>)
 800d28e:	2100      	movs	r1, #0
 800d290:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d292:	4b19      	ldr	r3, [pc, #100]	@ (800d2f8 <FATFS_LinkDriverEx+0x94>)
 800d294:	7a5b      	ldrb	r3, [r3, #9]
 800d296:	b2db      	uxtb	r3, r3
 800d298:	4a17      	ldr	r2, [pc, #92]	@ (800d2f8 <FATFS_LinkDriverEx+0x94>)
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4413      	add	r3, r2
 800d29e:	68fa      	ldr	r2, [r7, #12]
 800d2a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d2a2:	4b15      	ldr	r3, [pc, #84]	@ (800d2f8 <FATFS_LinkDriverEx+0x94>)
 800d2a4:	7a5b      	ldrb	r3, [r3, #9]
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	4b13      	ldr	r3, [pc, #76]	@ (800d2f8 <FATFS_LinkDriverEx+0x94>)
 800d2ac:	4413      	add	r3, r2
 800d2ae:	79fa      	ldrb	r2, [r7, #7]
 800d2b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d2b2:	4b11      	ldr	r3, [pc, #68]	@ (800d2f8 <FATFS_LinkDriverEx+0x94>)
 800d2b4:	7a5b      	ldrb	r3, [r3, #9]
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	1c5a      	adds	r2, r3, #1
 800d2ba:	b2d1      	uxtb	r1, r2
 800d2bc:	4a0e      	ldr	r2, [pc, #56]	@ (800d2f8 <FATFS_LinkDriverEx+0x94>)
 800d2be:	7251      	strb	r1, [r2, #9]
 800d2c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d2c2:	7dbb      	ldrb	r3, [r7, #22]
 800d2c4:	3330      	adds	r3, #48	@ 0x30
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	223a      	movs	r2, #58	@ 0x3a
 800d2d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	3302      	adds	r3, #2
 800d2d8:	222f      	movs	r2, #47	@ 0x2f
 800d2da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	3303      	adds	r3, #3
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	371c      	adds	r7, #28
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	200005d0 	.word	0x200005d0

0800d2fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d306:	2200      	movs	r2, #0
 800d308:	6839      	ldr	r1, [r7, #0]
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f7ff ffaa 	bl	800d264 <FATFS_LinkDriverEx>
 800d310:	4603      	mov	r3, r0
}
 800d312:	4618      	mov	r0, r3
 800d314:	3708      	adds	r7, #8
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
	...

0800d31c <malloc>:
 800d31c:	4b02      	ldr	r3, [pc, #8]	@ (800d328 <malloc+0xc>)
 800d31e:	4601      	mov	r1, r0
 800d320:	6818      	ldr	r0, [r3, #0]
 800d322:	f000 b82d 	b.w	800d380 <_malloc_r>
 800d326:	bf00      	nop
 800d328:	20000018 	.word	0x20000018

0800d32c <free>:
 800d32c:	4b02      	ldr	r3, [pc, #8]	@ (800d338 <free+0xc>)
 800d32e:	4601      	mov	r1, r0
 800d330:	6818      	ldr	r0, [r3, #0]
 800d332:	f000 b949 	b.w	800d5c8 <_free_r>
 800d336:	bf00      	nop
 800d338:	20000018 	.word	0x20000018

0800d33c <sbrk_aligned>:
 800d33c:	b570      	push	{r4, r5, r6, lr}
 800d33e:	4e0f      	ldr	r6, [pc, #60]	@ (800d37c <sbrk_aligned+0x40>)
 800d340:	460c      	mov	r4, r1
 800d342:	6831      	ldr	r1, [r6, #0]
 800d344:	4605      	mov	r5, r0
 800d346:	b911      	cbnz	r1, 800d34e <sbrk_aligned+0x12>
 800d348:	f000 f8f4 	bl	800d534 <_sbrk_r>
 800d34c:	6030      	str	r0, [r6, #0]
 800d34e:	4621      	mov	r1, r4
 800d350:	4628      	mov	r0, r5
 800d352:	f000 f8ef 	bl	800d534 <_sbrk_r>
 800d356:	1c43      	adds	r3, r0, #1
 800d358:	d103      	bne.n	800d362 <sbrk_aligned+0x26>
 800d35a:	f04f 34ff 	mov.w	r4, #4294967295
 800d35e:	4620      	mov	r0, r4
 800d360:	bd70      	pop	{r4, r5, r6, pc}
 800d362:	1cc4      	adds	r4, r0, #3
 800d364:	f024 0403 	bic.w	r4, r4, #3
 800d368:	42a0      	cmp	r0, r4
 800d36a:	d0f8      	beq.n	800d35e <sbrk_aligned+0x22>
 800d36c:	1a21      	subs	r1, r4, r0
 800d36e:	4628      	mov	r0, r5
 800d370:	f000 f8e0 	bl	800d534 <_sbrk_r>
 800d374:	3001      	adds	r0, #1
 800d376:	d1f2      	bne.n	800d35e <sbrk_aligned+0x22>
 800d378:	e7ef      	b.n	800d35a <sbrk_aligned+0x1e>
 800d37a:	bf00      	nop
 800d37c:	200005dc 	.word	0x200005dc

0800d380 <_malloc_r>:
 800d380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d384:	1ccd      	adds	r5, r1, #3
 800d386:	f025 0503 	bic.w	r5, r5, #3
 800d38a:	3508      	adds	r5, #8
 800d38c:	2d0c      	cmp	r5, #12
 800d38e:	bf38      	it	cc
 800d390:	250c      	movcc	r5, #12
 800d392:	2d00      	cmp	r5, #0
 800d394:	4606      	mov	r6, r0
 800d396:	db01      	blt.n	800d39c <_malloc_r+0x1c>
 800d398:	42a9      	cmp	r1, r5
 800d39a:	d904      	bls.n	800d3a6 <_malloc_r+0x26>
 800d39c:	230c      	movs	r3, #12
 800d39e:	6033      	str	r3, [r6, #0]
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d47c <_malloc_r+0xfc>
 800d3aa:	f000 f869 	bl	800d480 <__malloc_lock>
 800d3ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d3b2:	461c      	mov	r4, r3
 800d3b4:	bb44      	cbnz	r4, 800d408 <_malloc_r+0x88>
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	f7ff ffbf 	bl	800d33c <sbrk_aligned>
 800d3be:	1c43      	adds	r3, r0, #1
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	d158      	bne.n	800d476 <_malloc_r+0xf6>
 800d3c4:	f8d8 4000 	ldr.w	r4, [r8]
 800d3c8:	4627      	mov	r7, r4
 800d3ca:	2f00      	cmp	r7, #0
 800d3cc:	d143      	bne.n	800d456 <_malloc_r+0xd6>
 800d3ce:	2c00      	cmp	r4, #0
 800d3d0:	d04b      	beq.n	800d46a <_malloc_r+0xea>
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	4639      	mov	r1, r7
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	eb04 0903 	add.w	r9, r4, r3
 800d3dc:	f000 f8aa 	bl	800d534 <_sbrk_r>
 800d3e0:	4581      	cmp	r9, r0
 800d3e2:	d142      	bne.n	800d46a <_malloc_r+0xea>
 800d3e4:	6821      	ldr	r1, [r4, #0]
 800d3e6:	1a6d      	subs	r5, r5, r1
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	f7ff ffa6 	bl	800d33c <sbrk_aligned>
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	d03a      	beq.n	800d46a <_malloc_r+0xea>
 800d3f4:	6823      	ldr	r3, [r4, #0]
 800d3f6:	442b      	add	r3, r5
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	f8d8 3000 	ldr.w	r3, [r8]
 800d3fe:	685a      	ldr	r2, [r3, #4]
 800d400:	bb62      	cbnz	r2, 800d45c <_malloc_r+0xdc>
 800d402:	f8c8 7000 	str.w	r7, [r8]
 800d406:	e00f      	b.n	800d428 <_malloc_r+0xa8>
 800d408:	6822      	ldr	r2, [r4, #0]
 800d40a:	1b52      	subs	r2, r2, r5
 800d40c:	d420      	bmi.n	800d450 <_malloc_r+0xd0>
 800d40e:	2a0b      	cmp	r2, #11
 800d410:	d917      	bls.n	800d442 <_malloc_r+0xc2>
 800d412:	1961      	adds	r1, r4, r5
 800d414:	42a3      	cmp	r3, r4
 800d416:	6025      	str	r5, [r4, #0]
 800d418:	bf18      	it	ne
 800d41a:	6059      	strne	r1, [r3, #4]
 800d41c:	6863      	ldr	r3, [r4, #4]
 800d41e:	bf08      	it	eq
 800d420:	f8c8 1000 	streq.w	r1, [r8]
 800d424:	5162      	str	r2, [r4, r5]
 800d426:	604b      	str	r3, [r1, #4]
 800d428:	4630      	mov	r0, r6
 800d42a:	f000 f82f 	bl	800d48c <__malloc_unlock>
 800d42e:	f104 000b 	add.w	r0, r4, #11
 800d432:	1d23      	adds	r3, r4, #4
 800d434:	f020 0007 	bic.w	r0, r0, #7
 800d438:	1ac2      	subs	r2, r0, r3
 800d43a:	bf1c      	itt	ne
 800d43c:	1a1b      	subne	r3, r3, r0
 800d43e:	50a3      	strne	r3, [r4, r2]
 800d440:	e7af      	b.n	800d3a2 <_malloc_r+0x22>
 800d442:	6862      	ldr	r2, [r4, #4]
 800d444:	42a3      	cmp	r3, r4
 800d446:	bf0c      	ite	eq
 800d448:	f8c8 2000 	streq.w	r2, [r8]
 800d44c:	605a      	strne	r2, [r3, #4]
 800d44e:	e7eb      	b.n	800d428 <_malloc_r+0xa8>
 800d450:	4623      	mov	r3, r4
 800d452:	6864      	ldr	r4, [r4, #4]
 800d454:	e7ae      	b.n	800d3b4 <_malloc_r+0x34>
 800d456:	463c      	mov	r4, r7
 800d458:	687f      	ldr	r7, [r7, #4]
 800d45a:	e7b6      	b.n	800d3ca <_malloc_r+0x4a>
 800d45c:	461a      	mov	r2, r3
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	42a3      	cmp	r3, r4
 800d462:	d1fb      	bne.n	800d45c <_malloc_r+0xdc>
 800d464:	2300      	movs	r3, #0
 800d466:	6053      	str	r3, [r2, #4]
 800d468:	e7de      	b.n	800d428 <_malloc_r+0xa8>
 800d46a:	230c      	movs	r3, #12
 800d46c:	6033      	str	r3, [r6, #0]
 800d46e:	4630      	mov	r0, r6
 800d470:	f000 f80c 	bl	800d48c <__malloc_unlock>
 800d474:	e794      	b.n	800d3a0 <_malloc_r+0x20>
 800d476:	6005      	str	r5, [r0, #0]
 800d478:	e7d6      	b.n	800d428 <_malloc_r+0xa8>
 800d47a:	bf00      	nop
 800d47c:	200005e0 	.word	0x200005e0

0800d480 <__malloc_lock>:
 800d480:	4801      	ldr	r0, [pc, #4]	@ (800d488 <__malloc_lock+0x8>)
 800d482:	f000 b891 	b.w	800d5a8 <__retarget_lock_acquire_recursive>
 800d486:	bf00      	nop
 800d488:	20000720 	.word	0x20000720

0800d48c <__malloc_unlock>:
 800d48c:	4801      	ldr	r0, [pc, #4]	@ (800d494 <__malloc_unlock+0x8>)
 800d48e:	f000 b88c 	b.w	800d5aa <__retarget_lock_release_recursive>
 800d492:	bf00      	nop
 800d494:	20000720 	.word	0x20000720

0800d498 <realloc>:
 800d498:	4b02      	ldr	r3, [pc, #8]	@ (800d4a4 <realloc+0xc>)
 800d49a:	460a      	mov	r2, r1
 800d49c:	4601      	mov	r1, r0
 800d49e:	6818      	ldr	r0, [r3, #0]
 800d4a0:	f000 b802 	b.w	800d4a8 <_realloc_r>
 800d4a4:	20000018 	.word	0x20000018

0800d4a8 <_realloc_r>:
 800d4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ac:	4680      	mov	r8, r0
 800d4ae:	4615      	mov	r5, r2
 800d4b0:	460c      	mov	r4, r1
 800d4b2:	b921      	cbnz	r1, 800d4be <_realloc_r+0x16>
 800d4b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	f7ff bf61 	b.w	800d380 <_malloc_r>
 800d4be:	b92a      	cbnz	r2, 800d4cc <_realloc_r+0x24>
 800d4c0:	f000 f882 	bl	800d5c8 <_free_r>
 800d4c4:	2400      	movs	r4, #0
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4cc:	f000 f8c6 	bl	800d65c <_malloc_usable_size_r>
 800d4d0:	4285      	cmp	r5, r0
 800d4d2:	4606      	mov	r6, r0
 800d4d4:	d802      	bhi.n	800d4dc <_realloc_r+0x34>
 800d4d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d4da:	d8f4      	bhi.n	800d4c6 <_realloc_r+0x1e>
 800d4dc:	4629      	mov	r1, r5
 800d4de:	4640      	mov	r0, r8
 800d4e0:	f7ff ff4e 	bl	800d380 <_malloc_r>
 800d4e4:	4607      	mov	r7, r0
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d0ec      	beq.n	800d4c4 <_realloc_r+0x1c>
 800d4ea:	42b5      	cmp	r5, r6
 800d4ec:	462a      	mov	r2, r5
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	bf28      	it	cs
 800d4f2:	4632      	movcs	r2, r6
 800d4f4:	f000 f85a 	bl	800d5ac <memcpy>
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	f000 f864 	bl	800d5c8 <_free_r>
 800d500:	463c      	mov	r4, r7
 800d502:	e7e0      	b.n	800d4c6 <_realloc_r+0x1e>

0800d504 <memset>:
 800d504:	4402      	add	r2, r0
 800d506:	4603      	mov	r3, r0
 800d508:	4293      	cmp	r3, r2
 800d50a:	d100      	bne.n	800d50e <memset+0xa>
 800d50c:	4770      	bx	lr
 800d50e:	f803 1b01 	strb.w	r1, [r3], #1
 800d512:	e7f9      	b.n	800d508 <memset+0x4>

0800d514 <strcat>:
 800d514:	b510      	push	{r4, lr}
 800d516:	4602      	mov	r2, r0
 800d518:	7814      	ldrb	r4, [r2, #0]
 800d51a:	4613      	mov	r3, r2
 800d51c:	3201      	adds	r2, #1
 800d51e:	2c00      	cmp	r4, #0
 800d520:	d1fa      	bne.n	800d518 <strcat+0x4>
 800d522:	3b01      	subs	r3, #1
 800d524:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d528:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d52c:	2a00      	cmp	r2, #0
 800d52e:	d1f9      	bne.n	800d524 <strcat+0x10>
 800d530:	bd10      	pop	{r4, pc}
	...

0800d534 <_sbrk_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	4d06      	ldr	r5, [pc, #24]	@ (800d550 <_sbrk_r+0x1c>)
 800d538:	2300      	movs	r3, #0
 800d53a:	4604      	mov	r4, r0
 800d53c:	4608      	mov	r0, r1
 800d53e:	602b      	str	r3, [r5, #0]
 800d540:	f7f6 fee4 	bl	800430c <_sbrk>
 800d544:	1c43      	adds	r3, r0, #1
 800d546:	d102      	bne.n	800d54e <_sbrk_r+0x1a>
 800d548:	682b      	ldr	r3, [r5, #0]
 800d54a:	b103      	cbz	r3, 800d54e <_sbrk_r+0x1a>
 800d54c:	6023      	str	r3, [r4, #0]
 800d54e:	bd38      	pop	{r3, r4, r5, pc}
 800d550:	2000071c 	.word	0x2000071c

0800d554 <__errno>:
 800d554:	4b01      	ldr	r3, [pc, #4]	@ (800d55c <__errno+0x8>)
 800d556:	6818      	ldr	r0, [r3, #0]
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	20000018 	.word	0x20000018

0800d560 <__libc_init_array>:
 800d560:	b570      	push	{r4, r5, r6, lr}
 800d562:	4d0d      	ldr	r5, [pc, #52]	@ (800d598 <__libc_init_array+0x38>)
 800d564:	4c0d      	ldr	r4, [pc, #52]	@ (800d59c <__libc_init_array+0x3c>)
 800d566:	1b64      	subs	r4, r4, r5
 800d568:	10a4      	asrs	r4, r4, #2
 800d56a:	2600      	movs	r6, #0
 800d56c:	42a6      	cmp	r6, r4
 800d56e:	d109      	bne.n	800d584 <__libc_init_array+0x24>
 800d570:	4d0b      	ldr	r5, [pc, #44]	@ (800d5a0 <__libc_init_array+0x40>)
 800d572:	4c0c      	ldr	r4, [pc, #48]	@ (800d5a4 <__libc_init_array+0x44>)
 800d574:	f000 f87a 	bl	800d66c <_init>
 800d578:	1b64      	subs	r4, r4, r5
 800d57a:	10a4      	asrs	r4, r4, #2
 800d57c:	2600      	movs	r6, #0
 800d57e:	42a6      	cmp	r6, r4
 800d580:	d105      	bne.n	800d58e <__libc_init_array+0x2e>
 800d582:	bd70      	pop	{r4, r5, r6, pc}
 800d584:	f855 3b04 	ldr.w	r3, [r5], #4
 800d588:	4798      	blx	r3
 800d58a:	3601      	adds	r6, #1
 800d58c:	e7ee      	b.n	800d56c <__libc_init_array+0xc>
 800d58e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d592:	4798      	blx	r3
 800d594:	3601      	adds	r6, #1
 800d596:	e7f2      	b.n	800d57e <__libc_init_array+0x1e>
 800d598:	0800e5f8 	.word	0x0800e5f8
 800d59c:	0800e5f8 	.word	0x0800e5f8
 800d5a0:	0800e5f8 	.word	0x0800e5f8
 800d5a4:	0800e5fc 	.word	0x0800e5fc

0800d5a8 <__retarget_lock_acquire_recursive>:
 800d5a8:	4770      	bx	lr

0800d5aa <__retarget_lock_release_recursive>:
 800d5aa:	4770      	bx	lr

0800d5ac <memcpy>:
 800d5ac:	440a      	add	r2, r1
 800d5ae:	4291      	cmp	r1, r2
 800d5b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5b4:	d100      	bne.n	800d5b8 <memcpy+0xc>
 800d5b6:	4770      	bx	lr
 800d5b8:	b510      	push	{r4, lr}
 800d5ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5c2:	4291      	cmp	r1, r2
 800d5c4:	d1f9      	bne.n	800d5ba <memcpy+0xe>
 800d5c6:	bd10      	pop	{r4, pc}

0800d5c8 <_free_r>:
 800d5c8:	b538      	push	{r3, r4, r5, lr}
 800d5ca:	4605      	mov	r5, r0
 800d5cc:	2900      	cmp	r1, #0
 800d5ce:	d041      	beq.n	800d654 <_free_r+0x8c>
 800d5d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5d4:	1f0c      	subs	r4, r1, #4
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	bfb8      	it	lt
 800d5da:	18e4      	addlt	r4, r4, r3
 800d5dc:	f7ff ff50 	bl	800d480 <__malloc_lock>
 800d5e0:	4a1d      	ldr	r2, [pc, #116]	@ (800d658 <_free_r+0x90>)
 800d5e2:	6813      	ldr	r3, [r2, #0]
 800d5e4:	b933      	cbnz	r3, 800d5f4 <_free_r+0x2c>
 800d5e6:	6063      	str	r3, [r4, #4]
 800d5e8:	6014      	str	r4, [r2, #0]
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5f0:	f7ff bf4c 	b.w	800d48c <__malloc_unlock>
 800d5f4:	42a3      	cmp	r3, r4
 800d5f6:	d908      	bls.n	800d60a <_free_r+0x42>
 800d5f8:	6820      	ldr	r0, [r4, #0]
 800d5fa:	1821      	adds	r1, r4, r0
 800d5fc:	428b      	cmp	r3, r1
 800d5fe:	bf01      	itttt	eq
 800d600:	6819      	ldreq	r1, [r3, #0]
 800d602:	685b      	ldreq	r3, [r3, #4]
 800d604:	1809      	addeq	r1, r1, r0
 800d606:	6021      	streq	r1, [r4, #0]
 800d608:	e7ed      	b.n	800d5e6 <_free_r+0x1e>
 800d60a:	461a      	mov	r2, r3
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	b10b      	cbz	r3, 800d614 <_free_r+0x4c>
 800d610:	42a3      	cmp	r3, r4
 800d612:	d9fa      	bls.n	800d60a <_free_r+0x42>
 800d614:	6811      	ldr	r1, [r2, #0]
 800d616:	1850      	adds	r0, r2, r1
 800d618:	42a0      	cmp	r0, r4
 800d61a:	d10b      	bne.n	800d634 <_free_r+0x6c>
 800d61c:	6820      	ldr	r0, [r4, #0]
 800d61e:	4401      	add	r1, r0
 800d620:	1850      	adds	r0, r2, r1
 800d622:	4283      	cmp	r3, r0
 800d624:	6011      	str	r1, [r2, #0]
 800d626:	d1e0      	bne.n	800d5ea <_free_r+0x22>
 800d628:	6818      	ldr	r0, [r3, #0]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	6053      	str	r3, [r2, #4]
 800d62e:	4408      	add	r0, r1
 800d630:	6010      	str	r0, [r2, #0]
 800d632:	e7da      	b.n	800d5ea <_free_r+0x22>
 800d634:	d902      	bls.n	800d63c <_free_r+0x74>
 800d636:	230c      	movs	r3, #12
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	e7d6      	b.n	800d5ea <_free_r+0x22>
 800d63c:	6820      	ldr	r0, [r4, #0]
 800d63e:	1821      	adds	r1, r4, r0
 800d640:	428b      	cmp	r3, r1
 800d642:	bf04      	itt	eq
 800d644:	6819      	ldreq	r1, [r3, #0]
 800d646:	685b      	ldreq	r3, [r3, #4]
 800d648:	6063      	str	r3, [r4, #4]
 800d64a:	bf04      	itt	eq
 800d64c:	1809      	addeq	r1, r1, r0
 800d64e:	6021      	streq	r1, [r4, #0]
 800d650:	6054      	str	r4, [r2, #4]
 800d652:	e7ca      	b.n	800d5ea <_free_r+0x22>
 800d654:	bd38      	pop	{r3, r4, r5, pc}
 800d656:	bf00      	nop
 800d658:	200005e0 	.word	0x200005e0

0800d65c <_malloc_usable_size_r>:
 800d65c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d660:	1f18      	subs	r0, r3, #4
 800d662:	2b00      	cmp	r3, #0
 800d664:	bfbc      	itt	lt
 800d666:	580b      	ldrlt	r3, [r1, r0]
 800d668:	18c0      	addlt	r0, r0, r3
 800d66a:	4770      	bx	lr

0800d66c <_init>:
 800d66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66e:	bf00      	nop
 800d670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d672:	bc08      	pop	{r3}
 800d674:	469e      	mov	lr, r3
 800d676:	4770      	bx	lr

0800d678 <_fini>:
 800d678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67a:	bf00      	nop
 800d67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67e:	bc08      	pop	{r3}
 800d680:	469e      	mov	lr, r3
 800d682:	4770      	bx	lr
