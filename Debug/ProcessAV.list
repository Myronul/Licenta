
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ace8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea0  0800ae70  0800ae70  0000be70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd10  0800bd10  0000d068  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd10  0800bd10  0000cd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd18  0800bd18  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd18  0800bd18  0000cd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd1c  0800bd1c  0000cd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800bd20  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d068  2**0
                  CONTENTS
 10 .bss          00002688  20000068  20000068  0000d068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200026f0  200026f0  0000d068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001945f  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b4b  00000000  00000000  000264f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  0002a048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024910  00000000  00000000  0002b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e278  00000000  00000000  000500c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6c54  00000000  00000000  0006e338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144f8c  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000120d  00000000  00000000  00144fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000663c  00000000  00000000  001461dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0014c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ae58 	.word	0x0800ae58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800ae58 	.word	0x0800ae58

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <convert_color_16_to_18>:

#include "graphics.h"


void convert_color_16_to_18(uint16_t color, uint8_t *pixel)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	0adb      	lsrs	r3, r3, #11
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	115b      	asrs	r3, r3, #5
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80004d6:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	f003 031f 	and.w	r3, r3, #31
 80004e0:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 80004e2:	7bfa      	ldrb	r2, [r7, #15]
 80004e4:	4613      	mov	r3, r2
 80004e6:	019b      	lsls	r3, r3, #6
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4a16      	ldr	r2, [pc, #88]	@ (8000544 <convert_color_16_to_18+0x8c>)
 80004ec:	fb82 1203 	smull	r1, r2, r2, r3
 80004f0:	441a      	add	r2, r3
 80004f2:	1112      	asrs	r2, r2, #4
 80004f4:	17db      	asrs	r3, r3, #31
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8000504:	7b7a      	ldrb	r2, [r7, #13]
 8000506:	4613      	mov	r3, r2
 8000508:	019b      	lsls	r3, r3, #6
 800050a:	1a9b      	subs	r3, r3, r2
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <convert_color_16_to_18+0x8c>)
 800050e:	fb82 1203 	smull	r1, r2, r2, r3
 8000512:	441a      	add	r2, r3
 8000514:	1112      	asrs	r2, r2, #4
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	7bfa      	ldrb	r2, [r7, #15]
 8000524:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	7bba      	ldrb	r2, [r7, #14]
 800052c:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	3302      	adds	r3, #2
 8000532:	7b7a      	ldrb	r2, [r7, #13]
 8000534:	701a      	strb	r2, [r3, #0]

}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	84210843 	.word	0x84210843

08000548 <write_color>:


void write_color(uint16_t color)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 8000552:	f107 020c 	add.w	r2, r7, #12
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ffac 	bl	80004b8 <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000560:	f107 010c 	add.w	r1, r7, #12
 8000564:	f04f 33ff 	mov.w	r3, #4294967295
 8000568:	2203      	movs	r2, #3
 800056a:	4803      	ldr	r0, [pc, #12]	@ (8000578 <write_color+0x30>)
 800056c:	f004 fd1d 	bl	8004faa <HAL_SPI_Transmit>


}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000017c 	.word	0x2000017c

0800057c <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
 8000586:	460b      	mov	r3, r1
 8000588:	80bb      	strh	r3, [r7, #4]
 800058a:	4613      	mov	r3, r2
 800058c:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 800058e:	88bb      	ldrh	r3, [r7, #4]
 8000590:	88fa      	ldrh	r2, [r7, #6]
 8000592:	88b9      	ldrh	r1, [r7, #4]
 8000594:	88f8      	ldrh	r0, [r7, #6]
 8000596:	2477      	movs	r4, #119	@ 0x77
 8000598:	9400      	str	r4, [sp, #0]
 800059a:	f000 fc65 	bl	8000e68 <set_adress_window>

	DC_DATA();
 800059e:	2201      	movs	r2, #1
 80005a0:	2108      	movs	r1, #8
 80005a2:	480a      	ldr	r0, [pc, #40]	@ (80005cc <draw_pixel+0x50>)
 80005a4:	f003 f82e 	bl	8003604 <HAL_GPIO_WritePin>
	CS_A();
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	4807      	ldr	r0, [pc, #28]	@ (80005cc <draw_pixel+0x50>)
 80005ae:	f003 f829 	bl	8003604 <HAL_GPIO_WritePin>

	write_color(color);
 80005b2:	887b      	ldrh	r3, [r7, #2]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffc7 	bl	8000548 <write_color>

	CS_D();
 80005ba:	2201      	movs	r2, #1
 80005bc:	2110      	movs	r1, #16
 80005be:	4803      	ldr	r0, [pc, #12]	@ (80005cc <draw_pixel+0x50>)
 80005c0:	f003 f820 	bl	8003604 <HAL_GPIO_WritePin>

}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	40020c00 	.word	0x40020c00

080005d0 <fill_screen1>:




void fill_screen1(uint16_t color)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	 * Input: Culoare pe 16 biti
	 * Output: Void
	 */
	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	0adb      	lsrs	r3, r3, #11
 80005de:	b29b      	uxth	r3, r3
 80005e0:	74fb      	strb	r3, [r7, #19]
	g = (color & 0x07E0) >> 5;
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	115b      	asrs	r3, r3, #5
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005ec:	74bb      	strb	r3, [r7, #18]
	b = color & 0x001F;
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f003 031f 	and.w	r3, r3, #31
 80005f6:	747b      	strb	r3, [r7, #17]

	r = (255*r)/31;
 80005f8:	7cfa      	ldrb	r2, [r7, #19]
 80005fa:	4613      	mov	r3, r2
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	4a3a      	ldr	r2, [pc, #232]	@ (80006ec <fill_screen1+0x11c>)
 8000602:	fb82 1203 	smull	r1, r2, r2, r3
 8000606:	441a      	add	r2, r3
 8000608:	1112      	asrs	r2, r2, #4
 800060a:	17db      	asrs	r3, r3, #31
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	74fb      	strb	r3, [r7, #19]
	g = (255*g)/63;
 8000610:	7cba      	ldrb	r2, [r7, #18]
 8000612:	4613      	mov	r3, r2
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	4a35      	ldr	r2, [pc, #212]	@ (80006f0 <fill_screen1+0x120>)
 800061a:	fb82 1203 	smull	r1, r2, r2, r3
 800061e:	441a      	add	r2, r3
 8000620:	1152      	asrs	r2, r2, #5
 8000622:	17db      	asrs	r3, r3, #31
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	74bb      	strb	r3, [r7, #18]
	b = (255*b)/31;
 8000628:	7c7a      	ldrb	r2, [r7, #17]
 800062a:	4613      	mov	r3, r2
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	4a2e      	ldr	r2, [pc, #184]	@ (80006ec <fill_screen1+0x11c>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	441a      	add	r2, r3
 8000638:	1112      	asrs	r2, r2, #4
 800063a:	17db      	asrs	r3, r3, #31
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	747b      	strb	r3, [r7, #17]

	uint8_t pixel[] = {r,g,b};
 8000640:	7cfb      	ldrb	r3, [r7, #19]
 8000642:	723b      	strb	r3, [r7, #8]
 8000644:	7cbb      	ldrb	r3, [r7, #18]
 8000646:	727b      	strb	r3, [r7, #9]
 8000648:	7c7b      	ldrb	r3, [r7, #17]
 800064a:	72bb      	strb	r3, [r7, #10]
	uint8_t *line = malloc(320*sizeof(pixel));
 800064c:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8000650:	f00a fa6a 	bl	800ab28 <malloc>
 8000654:	4603      	mov	r3, r0
 8000656:	60fb      	str	r3, [r7, #12]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000658:	2377      	movs	r3, #119	@ 0x77
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	f240 13df 	movw	r3, #479	@ 0x1df
 8000660:	f240 123f 	movw	r2, #319	@ 0x13f
 8000664:	2100      	movs	r1, #0
 8000666:	2000      	movs	r0, #0
 8000668:	f000 fbfe 	bl	8000e68 <set_adress_window>

	DC_DATA();
 800066c:	2201      	movs	r2, #1
 800066e:	2108      	movs	r1, #8
 8000670:	4820      	ldr	r0, [pc, #128]	@ (80006f4 <fill_screen1+0x124>)
 8000672:	f002 ffc7 	bl	8003604 <HAL_GPIO_WritePin>
	CS_A();
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	481e      	ldr	r0, [pc, #120]	@ (80006f4 <fill_screen1+0x124>)
 800067c:	f002 ffc2 	bl	8003604 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8000680:	2300      	movs	r3, #0
 8000682:	82fb      	strh	r3, [r7, #22]
 8000684:	e00f      	b.n	80006a6 <fill_screen1+0xd6>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 8000686:	8afa      	ldrh	r2, [r7, #22]
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	461a      	mov	r2, r3
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	8819      	ldrh	r1, [r3, #0]
 800069a:	789b      	ldrb	r3, [r3, #2]
 800069c:	8011      	strh	r1, [r2, #0]
 800069e:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80006a0:	8afb      	ldrh	r3, [r7, #22]
 80006a2:	3301      	adds	r3, #1
 80006a4:	82fb      	strh	r3, [r7, #22]
 80006a6:	8afb      	ldrh	r3, [r7, #22]
 80006a8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006ac:	d3eb      	bcc.n	8000686 <fill_screen1+0xb6>
	}

	for(uint16_t y=0; y<480; y++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	82bb      	strh	r3, [r7, #20]
 80006b2:	e00a      	b.n	80006ca <fill_screen1+0xfa>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80006bc:	68f9      	ldr	r1, [r7, #12]
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <fill_screen1+0x128>)
 80006c0:	f004 fc73 	bl	8004faa <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 80006c4:	8abb      	ldrh	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	82bb      	strh	r3, [r7, #20]
 80006ca:	8abb      	ldrh	r3, [r7, #20]
 80006cc:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80006d0:	d3f0      	bcc.n	80006b4 <fill_screen1+0xe4>

	}

	free(line);
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f00a fa30 	bl	800ab38 <free>

	CS_D();
 80006d8:	2201      	movs	r2, #1
 80006da:	2110      	movs	r1, #16
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <fill_screen1+0x124>)
 80006de:	f002 ff91 	bl	8003604 <HAL_GPIO_WritePin>

}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	84210843 	.word	0x84210843
 80006f0:	82082083 	.word	0x82082083
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	2000017c 	.word	0x2000017c

080006fc <fill_screen2>:


void fill_screen2(uint16_t color)
{
 80006fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000700:	b08f      	sub	sp, #60	@ 0x3c
 8000702:	af02      	add	r7, sp, #8
 8000704:	4603      	mov	r3, r0
 8000706:	80fb      	strh	r3, [r7, #6]
 8000708:	466b      	mov	r3, sp
 800070a:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 800070c:	2377      	movs	r3, #119	@ 0x77
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	f240 13df 	movw	r3, #479	@ 0x1df
 8000714:	f240 123f 	movw	r2, #319	@ 0x13f
 8000718:	2100      	movs	r1, #0
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fba4 	bl	8000e68 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 8000720:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8000726:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 800072a:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	0adb      	lsrs	r3, r3, #11
 8000730:	b29b      	uxth	r3, r3
 8000732:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	115b      	asrs	r3, r3, #5
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800073e:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 031f 	and.w	r3, r3, #31
 8000748:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 800074a:	7ffa      	ldrb	r2, [r7, #31]
 800074c:	4613      	mov	r3, r2
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	4a4f      	ldr	r2, [pc, #316]	@ (8000890 <fill_screen2+0x194>)
 8000754:	fb82 1203 	smull	r1, r2, r2, r3
 8000758:	441a      	add	r2, r3
 800075a:	1112      	asrs	r2, r2, #4
 800075c:	17db      	asrs	r3, r3, #31
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 8000762:	7fba      	ldrb	r2, [r7, #30]
 8000764:	4613      	mov	r3, r2
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	4a4a      	ldr	r2, [pc, #296]	@ (8000894 <fill_screen2+0x198>)
 800076c:	fb82 1203 	smull	r1, r2, r2, r3
 8000770:	441a      	add	r2, r3
 8000772:	1152      	asrs	r2, r2, #5
 8000774:	17db      	asrs	r3, r3, #31
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 800077a:	7f7a      	ldrb	r2, [r7, #29]
 800077c:	4613      	mov	r3, r2
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	4a43      	ldr	r2, [pc, #268]	@ (8000890 <fill_screen2+0x194>)
 8000784:	fb82 1203 	smull	r1, r2, r2, r3
 8000788:	441a      	add	r2, r3
 800078a:	1112      	asrs	r2, r2, #4
 800078c:	17db      	asrs	r3, r3, #31
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 8000792:	2201      	movs	r2, #1
 8000794:	2108      	movs	r1, #8
 8000796:	4840      	ldr	r0, [pc, #256]	@ (8000898 <fill_screen2+0x19c>)
 8000798:	f002 ff34 	bl	8003604 <HAL_GPIO_WritePin>
	CS_A();
 800079c:	2200      	movs	r2, #0
 800079e:	2110      	movs	r1, #16
 80007a0:	483d      	ldr	r0, [pc, #244]	@ (8000898 <fill_screen2+0x19c>)
 80007a2:	f002 ff2f 	bl	8003604 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80007a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007a8:	460b      	mov	r3, r1
 80007aa:	3b01      	subs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	2300      	movs	r3, #0
 80007b0:	4688      	mov	r8, r1
 80007b2:	4699      	mov	r9, r3
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007c8:	2300      	movs	r3, #0
 80007ca:	460c      	mov	r4, r1
 80007cc:	461d      	mov	r5, r3
 80007ce:	f04f 0200 	mov.w	r2, #0
 80007d2:	f04f 0300 	mov.w	r3, #0
 80007d6:	00eb      	lsls	r3, r5, #3
 80007d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007dc:	00e2      	lsls	r2, r4, #3
 80007de:	1dcb      	adds	r3, r1, #7
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	ebad 0d03 	sub.w	sp, sp, r3
 80007e8:	ab02      	add	r3, sp, #8
 80007ea:	3300      	adds	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007f2:	e011      	b.n	8000818 <fill_screen2+0x11c>
	{
		frame[j] = r;
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f8:	4413      	add	r3, r2
 80007fa:	7ffa      	ldrb	r2, [r7, #31]
 80007fc:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 80007fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000800:	3301      	adds	r3, #1
 8000802:	697a      	ldr	r2, [r7, #20]
 8000804:	7fb9      	ldrb	r1, [r7, #30]
 8000806:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8000808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800080a:	3302      	adds	r3, #2
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	7f79      	ldrb	r1, [r7, #29]
 8000810:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 8000812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000814:	3303      	adds	r3, #3
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081c:	429a      	cmp	r2, r3
 800081e:	d3e9      	bcc.n	80007f4 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 8000820:	6a3a      	ldr	r2, [r7, #32]
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <fill_screen2+0x1a0>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800083e:	e012      	b.n	8000866 <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 8000840:	bf00      	nop
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <fill_screen2+0x1a0>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0fa      	beq.n	8000842 <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 800084c:	4b13      	ldr	r3, [pc, #76]	@ (800089c <fill_screen2+0x1a0>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	6979      	ldr	r1, [r7, #20]
 800085a:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <fill_screen2+0x1a4>)
 800085c:	f004 ffac 	bl	80057b8 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 8000860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000862:	3301      	adds	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	429a      	cmp	r2, r3
 800086c:	d3e8      	bcc.n	8000840 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 800086e:	bf00      	nop
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <fill_screen2+0x1a0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0fa      	beq.n	8000870 <fill_screen2+0x174>
	CS_D();
 800087a:	2201      	movs	r2, #1
 800087c:	2110      	movs	r1, #16
 800087e:	4806      	ldr	r0, [pc, #24]	@ (8000898 <fill_screen2+0x19c>)
 8000880:	f002 fec0 	bl	8003604 <HAL_GPIO_WritePin>
 8000884:	46b5      	mov	sp, r6
}
 8000886:	bf00      	nop
 8000888:	3734      	adds	r7, #52	@ 0x34
 800088a:	46bd      	mov	sp, r7
 800088c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000890:	84210843 	.word	0x84210843
 8000894:	82082083 	.word	0x82082083
 8000898:	40020c00 	.word	0x40020c00
 800089c:	20000324 	.word	0x20000324
 80008a0:	2000017c 	.word	0x2000017c

080008a4 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	@ 0x24
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	4604      	mov	r4, r0
 80008ac:	4608      	mov	r0, r1
 80008ae:	4611      	mov	r1, r2
 80008b0:	461a      	mov	r2, r3
 80008b2:	4623      	mov	r3, r4
 80008b4:	80fb      	strh	r3, [r7, #6]
 80008b6:	4603      	mov	r3, r0
 80008b8:	80bb      	strh	r3, [r7, #4]
 80008ba:	460b      	mov	r3, r1
 80008bc:	70fb      	strb	r3, [r7, #3]
 80008be:	4613      	mov	r3, r2
 80008c0:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 80008c2:	4b3a      	ldr	r3, [pc, #232]	@ (80009ac <print_character+0x108>)
 80008c4:	889a      	ldrh	r2, [r3, #4]
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	4413      	add	r3, r2
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	3b01      	subs	r3, #1
 80008ce:	b29c      	uxth	r4, r3
 80008d0:	4b36      	ldr	r3, [pc, #216]	@ (80009ac <print_character+0x108>)
 80008d2:	88da      	ldrh	r2, [r3, #6]
 80008d4:	88bb      	ldrh	r3, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	b29b      	uxth	r3, r3
 80008da:	3b01      	subs	r3, #1
 80008dc:	b29b      	uxth	r3, r3
 80008de:	88b9      	ldrh	r1, [r7, #4]
 80008e0:	88f8      	ldrh	r0, [r7, #6]
 80008e2:	2277      	movs	r2, #119	@ 0x77
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	4622      	mov	r2, r4
 80008e8:	f000 fabe 	bl	8000e68 <set_adress_window>

	uint16_t mask = 0x8000;
 80008ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f0:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 80008f6:	f107 020c 	add.w	r2, r7, #12
 80008fa:	883b      	ldrh	r3, [r7, #0]
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fdda 	bl	80004b8 <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 8000904:	f107 0208 	add.w	r2, r7, #8
 8000908:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fdd3 	bl	80004b8 <convert_color_16_to_18>


	DC_DATA();
 8000912:	2201      	movs	r2, #1
 8000914:	2108      	movs	r1, #8
 8000916:	4826      	ldr	r0, [pc, #152]	@ (80009b0 <print_character+0x10c>)
 8000918:	f002 fe74 	bl	8003604 <HAL_GPIO_WritePin>
	CS_A();
 800091c:	2200      	movs	r2, #0
 800091e:	2110      	movs	r1, #16
 8000920:	4823      	ldr	r0, [pc, #140]	@ (80009b0 <print_character+0x10c>)
 8000922:	f002 fe6f 	bl	8003604 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 8000926:	2300      	movs	r3, #0
 8000928:	75fb      	strb	r3, [r7, #23]
 800092a:	e030      	b.n	800098e <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 800092c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <print_character+0x108>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	3b20      	subs	r3, #32
 8000934:	491d      	ldr	r1, [pc, #116]	@ (80009ac <print_character+0x108>)
 8000936:	88c9      	ldrh	r1, [r1, #6]
 8000938:	fb03 f101 	mul.w	r1, r3, r1
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	440b      	add	r3, r1
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000948:	2300      	movs	r3, #0
 800094a:	75bb      	strb	r3, [r7, #22]
 800094c:	e016      	b.n	800097c <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 800094e:	8a7a      	ldrh	r2, [r7, #18]
 8000950:	7dbb      	ldrb	r3, [r7, #22]
 8000952:	409a      	lsls	r2, r3
 8000954:	8abb      	ldrh	r3, [r7, #20]
 8000956:	4013      	ands	r3, r2
 8000958:	2b00      	cmp	r3, #0
 800095a:	d006      	beq.n	800096a <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2103      	movs	r1, #3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f904 	bl	8000b70 <LCD_send_data_multi>
 8000968:	e005      	b.n	8000976 <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2103      	movs	r1, #3
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f8fd 	bl	8000b70 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 8000976:	7dbb      	ldrb	r3, [r7, #22]
 8000978:	3301      	adds	r3, #1
 800097a:	75bb      	strb	r3, [r7, #22]
 800097c:	7dbb      	ldrb	r3, [r7, #22]
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <print_character+0x108>)
 8000982:	889b      	ldrh	r3, [r3, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	d3e2      	bcc.n	800094e <print_character+0xaa>
	for(i=0; i<font.height; i++)
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	3301      	adds	r3, #1
 800098c:	75fb      	strb	r3, [r7, #23]
 800098e:	7dfb      	ldrb	r3, [r7, #23]
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <print_character+0x108>)
 8000994:	88db      	ldrh	r3, [r3, #6]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3c8      	bcc.n	800092c <print_character+0x88>
			}
		}
	}

	CS_D();
 800099a:	2201      	movs	r2, #1
 800099c:	2110      	movs	r1, #16
 800099e:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <print_character+0x10c>)
 80009a0:	f002 fe30 	bl	8003604 <HAL_GPIO_WritePin>

}
 80009a4:	bf00      	nop
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd90      	pop	{r4, r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	40020c00 	.word	0x40020c00

080009b4 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b089      	sub	sp, #36	@ 0x24
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	60ba      	str	r2, [r7, #8]
 80009bc:	461a      	mov	r2, r3
 80009be:	4603      	mov	r3, r0
 80009c0:	81fb      	strh	r3, [r7, #14]
 80009c2:	460b      	mov	r3, r1
 80009c4:	81bb      	strh	r3, [r7, #12]
 80009c6:	4613      	mov	r3, r2
 80009c8:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 80009ce:	e027      	b.n	8000a20 <print_string+0x6c>
	{
		if(x + font.width > 320)
 80009d0:	89fb      	ldrh	r3, [r7, #14]
 80009d2:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <print_string+0x84>)
 80009d4:	8892      	ldrh	r2, [r2, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009dc:	dd07      	ble.n	80009ee <print_string+0x3a>
		{
			x = font.width;
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <print_string+0x84>)
 80009e0:	889b      	ldrh	r3, [r3, #4]
 80009e2:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <print_string+0x84>)
 80009e6:	88da      	ldrh	r2, [r3, #6]
 80009e8:	89bb      	ldrh	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 80009ee:	89bb      	ldrh	r3, [r7, #12]
 80009f0:	4a11      	ldr	r2, [pc, #68]	@ (8000a38 <print_string+0x84>)
 80009f2:	88d2      	ldrh	r2, [r2, #6]
 80009f4:	4413      	add	r3, r2
 80009f6:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80009fa:	dc18      	bgt.n	8000a2e <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000a02:	89b9      	ldrh	r1, [r7, #12]
 8000a04:	89f8      	ldrh	r0, [r7, #14]
 8000a06:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	4623      	mov	r3, r4
 8000a0c:	f7ff ff4a 	bl	80008a4 <print_character>
		string++;
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <print_string+0x84>)
 8000a18:	889a      	ldrh	r2, [r3, #4]
 8000a1a:	89fb      	ldrh	r3, [r7, #14]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	4413      	add	r3, r2
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d3d1      	bcc.n	80009d0 <print_string+0x1c>
 8000a2c:	e000      	b.n	8000a30 <print_string+0x7c>
			return;
 8000a2e:	bf00      	nop
	}

}
 8000a30:	371c      	adds	r7, #28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd90      	pop	{r4, r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000

08000a3c <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	4604      	mov	r4, r0
 8000a44:	4608      	mov	r0, r1
 8000a46:	4611      	mov	r1, r2
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4623      	mov	r3, r4
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80bb      	strh	r3, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	807b      	strh	r3, [r7, #2]
 8000a56:	4613      	mov	r3, r2
 8000a58:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	887b      	ldrh	r3, [r7, #2]
 8000a5e:	4413      	add	r3, r2
 8000a60:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	88b9      	ldrh	r1, [r7, #4]
 8000a6c:	88f8      	ldrh	r0, [r7, #6]
 8000a6e:	2477      	movs	r4, #119	@ 0x77
 8000a70:	9400      	str	r4, [sp, #0]
 8000a72:	f000 f9f9 	bl	8000e68 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000a76:	f107 0208 	add.w	r2, r7, #8
 8000a7a:	883b      	ldrh	r3, [r7, #0]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fd1a 	bl	80004b8 <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	81fb      	strh	r3, [r7, #14]
 8000a88:	e008      	b.n	8000a9c <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	2103      	movs	r1, #3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f86d 	bl	8000b70 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	81fb      	strh	r3, [r7, #14]
 8000a9c:	89fa      	ldrh	r2, [r7, #14]
 8000a9e:	8879      	ldrh	r1, [r7, #2]
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	1acb      	subs	r3, r1, r3
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf0      	blt.n	8000a8a <draw_horizontal_line+0x4e>
	}


}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}

08000ab2 <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000ab2:	b590      	push	{r4, r7, lr}
 8000ab4:	b087      	sub	sp, #28
 8000ab6:	af02      	add	r7, sp, #8
 8000ab8:	4604      	mov	r4, r0
 8000aba:	4608      	mov	r0, r1
 8000abc:	4611      	mov	r1, r2
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	80fb      	strh	r3, [r7, #6]
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	80bb      	strh	r3, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
 8000acc:	4613      	mov	r3, r2
 8000ace:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000ad0:	88ba      	ldrh	r2, [r7, #4]
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	88fa      	ldrh	r2, [r7, #6]
 8000ae0:	88b9      	ldrh	r1, [r7, #4]
 8000ae2:	88f8      	ldrh	r0, [r7, #6]
 8000ae4:	2477      	movs	r4, #119	@ 0x77
 8000ae6:	9400      	str	r4, [sp, #0]
 8000ae8:	f000 f9be 	bl	8000e68 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000aec:	f107 0208 	add.w	r2, r7, #8
 8000af0:	883b      	ldrh	r3, [r7, #0]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fcdf 	bl	80004b8 <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	81fb      	strh	r3, [r7, #14]
 8000afe:	e008      	b.n	8000b12 <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2103      	movs	r1, #3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f832 	bl	8000b70 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	81fb      	strh	r3, [r7, #14]
 8000b12:	89fa      	ldrh	r2, [r7, #14]
 8000b14:	8879      	ldrh	r1, [r7, #2]
 8000b16:	88bb      	ldrh	r3, [r7, #4]
 8000b18:	1acb      	subs	r3, r1, r3
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf0      	blt.n	8000b00 <draw_vertical_line+0x4e>
	}


}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}

08000b28 <LCD_send_command>:
#include "lcd.h"


void LCD_send_command(uint8_t cmd)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 8000b32:	2200      	movs	r2, #0
 8000b34:	2108      	movs	r1, #8
 8000b36:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <LCD_send_command+0x40>)
 8000b38:	f002 fd64 	bl	8003604 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2110      	movs	r1, #16
 8000b40:	4809      	ldr	r0, [pc, #36]	@ (8000b68 <LCD_send_command+0x40>)
 8000b42:	f002 fd5f 	bl	8003604 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 8000b46:	1df9      	adds	r1, r7, #7
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <LCD_send_command+0x44>)
 8000b50:	f004 fa2b 	bl	8004faa <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8000b54:	2201      	movs	r2, #1
 8000b56:	2110      	movs	r1, #16
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <LCD_send_command+0x40>)
 8000b5a:	f002 fd53 	bl	8003604 <HAL_GPIO_WritePin>


}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	2000017c 	.word	0x2000017c

08000b70 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	 * Output: Void
	 */

	//flagDmaSpiTx = 1;

	unsigned int valMaxFrame = 1024; //numarul maxim de octeti pe frame
 8000b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7e:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b88:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b92:	6939      	ldr	r1, [r7, #16]
 8000b94:	fb01 f202 	mul.w	r2, r1, r2
 8000b98:	1a9b      	subs	r3, r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	481d      	ldr	r0, [pc, #116]	@ (8000c18 <LCD_send_data_multi+0xa8>)
 8000ba2:	f002 fd2f 	bl	8003604 <HAL_GPIO_WritePin>
	CS_A();
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	481b      	ldr	r0, [pc, #108]	@ (8000c18 <LCD_send_data_multi+0xa8>)
 8000bac:	f002 fd2a 	bl	8003604 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d817      	bhi.n	8000be8 <LCD_send_data_multi+0x78>
	{
		//flagDmaSpiTx = 0;
		//HAL_SPI_Transmit_DMA(&hspi1, data, size);
		HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	4816      	ldr	r0, [pc, #88]	@ (8000c1c <LCD_send_data_multi+0xac>)
 8000bc4:	f004 f9f1 	bl	8004faa <HAL_SPI_Transmit>
 8000bc8:	e01c      	b.n	8000c04 <LCD_send_data_multi+0x94>
		while(nrFrames != 0)
		{
			//while(flagDmaSpiTx == 0);
			//flagDmaSpiTx = 0;
			//HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
			HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <LCD_send_data_multi+0xac>)
 8000bd6:	f004 f9e8 	bl	8004faa <HAL_SPI_Transmit>
			data = data+valMaxFrame;
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4413      	add	r3, r2
 8000be0:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1ed      	bne.n	8000bca <LCD_send_data_multi+0x5a>
		}

		if(remainder != 0)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d007      	beq.n	8000c04 <LCD_send_data_multi+0x94>
		{
			//while(flagDmaSpiTx == 0);
			//flagDmaSpiTx = 0;
			//HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
			HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <LCD_send_data_multi+0xac>)
 8000c00:	f004 f9d3 	bl	8004faa <HAL_SPI_Transmit>

		}
	}

	//while(flagDmaSpiTx == 0);
	CS_D();
 8000c04:	2201      	movs	r2, #1
 8000c06:	2110      	movs	r1, #16
 8000c08:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <LCD_send_data_multi+0xa8>)
 8000c0a:	f002 fcfb 	bl	8003604 <HAL_GPIO_WritePin>

}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020c00 	.word	0x40020c00
 8000c1c:	2000017c 	.word	0x2000017c

08000c20 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LCD_send_data+0x40>)
 8000c30:	f002 fce8 	bl	8003604 <HAL_GPIO_WritePin>
	CS_A();
 8000c34:	2200      	movs	r2, #0
 8000c36:	2110      	movs	r1, #16
 8000c38:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <LCD_send_data+0x40>)
 8000c3a:	f002 fce3 	bl	8003604 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8000c3e:	1df9      	adds	r1, r7, #7
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	2201      	movs	r2, #1
 8000c46:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <LCD_send_data+0x44>)
 8000c48:	f004 f9af 	bl	8004faa <HAL_SPI_Transmit>

	CS_D();
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2110      	movs	r1, #16
 8000c50:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <LCD_send_data+0x40>)
 8000c52:	f002 fcd7 	bl	8003604 <HAL_GPIO_WritePin>

}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	2000017c 	.word	0x2000017c

08000c68 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2140      	movs	r1, #64	@ 0x40
 8000c70:	487c      	ldr	r0, [pc, #496]	@ (8000e64 <ILI9488_driver_init+0x1fc>)
 8000c72:	f002 fcc7 	bl	8003604 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c76:	200a      	movs	r0, #10
 8000c78:	f001 fc14 	bl	80024a4 <HAL_Delay>
	RST_D();
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2140      	movs	r1, #64	@ 0x40
 8000c80:	4878      	ldr	r0, [pc, #480]	@ (8000e64 <ILI9488_driver_init+0x1fc>)
 8000c82:	f002 fcbf 	bl	8003604 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff ff4e 	bl	8000b28 <LCD_send_command>
	HAL_Delay(150);
 8000c8c:	2096      	movs	r0, #150	@ 0x96
 8000c8e:	f001 fc09 	bl	80024a4 <HAL_Delay>
	LCD_send_command(ILI9488_SLPOUT); //scoatem sistemul din sleep
 8000c92:	2011      	movs	r0, #17
 8000c94:	f7ff ff48 	bl	8000b28 <LCD_send_command>
	HAL_Delay(255);
 8000c98:	20ff      	movs	r0, #255	@ 0xff
 8000c9a:	f001 fc03 	bl	80024a4 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8000c9e:	20e0      	movs	r0, #224	@ 0xe0
 8000ca0:	f7ff ff42 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff ffbb 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0C);
 8000caa:	200c      	movs	r0, #12
 8000cac:	f7ff ffb8 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x05);
 8000cb0:	2005      	movs	r0, #5
 8000cb2:	f7ff ffb5 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x04);
 8000cb6:	2004      	movs	r0, #4
 8000cb8:	f7ff ffb2 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0F);
 8000cbc:	200f      	movs	r0, #15
 8000cbe:	f7ff ffaf 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000cc2:	2006      	movs	r0, #6
 8000cc4:	f7ff ffac 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x3A);
 8000cc8:	203a      	movs	r0, #58	@ 0x3a
 8000cca:	f7ff ffa9 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x56);
 8000cce:	2056      	movs	r0, #86	@ 0x56
 8000cd0:	f7ff ffa6 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x4D);
 8000cd4:	204d      	movs	r0, #77	@ 0x4d
 8000cd6:	f7ff ffa3 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x03);
 8000cda:	2003      	movs	r0, #3
 8000cdc:	f7ff ffa0 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0A);
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f7ff ff9d 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000ce6:	2006      	movs	r0, #6
 8000ce8:	f7ff ff9a 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x30);
 8000cec:	2030      	movs	r0, #48	@ 0x30
 8000cee:	f7ff ff97 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x3E);
 8000cf2:	203e      	movs	r0, #62	@ 0x3e
 8000cf4:	f7ff ff94 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0F);
 8000cf8:	200f      	movs	r0, #15
 8000cfa:	f7ff ff91 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 8000cfe:	20e1      	movs	r0, #225	@ 0xe1
 8000d00:	f7ff ff12 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff ff8b 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x13);
 8000d0a:	2013      	movs	r0, #19
 8000d0c:	f7ff ff88 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x18);
 8000d10:	2018      	movs	r0, #24
 8000d12:	f7ff ff85 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x01);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff ff82 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x11);
 8000d1c:	2011      	movs	r0, #17
 8000d1e:	f7ff ff7f 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000d22:	2006      	movs	r0, #6
 8000d24:	f7ff ff7c 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x38);
 8000d28:	2038      	movs	r0, #56	@ 0x38
 8000d2a:	f7ff ff79 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x34);
 8000d2e:	2034      	movs	r0, #52	@ 0x34
 8000d30:	f7ff ff76 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x4D);
 8000d34:	204d      	movs	r0, #77	@ 0x4d
 8000d36:	f7ff ff73 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000d3a:	2006      	movs	r0, #6
 8000d3c:	f7ff ff70 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0D);
 8000d40:	200d      	movs	r0, #13
 8000d42:	f7ff ff6d 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0B);
 8000d46:	200b      	movs	r0, #11
 8000d48:	f7ff ff6a 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x31);
 8000d4c:	2031      	movs	r0, #49	@ 0x31
 8000d4e:	f7ff ff67 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x37);
 8000d52:	2037      	movs	r0, #55	@ 0x37
 8000d54:	f7ff ff64 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0F);
 8000d58:	200f      	movs	r0, #15
 8000d5a:	f7ff ff61 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 8000d5e:	20c0      	movs	r0, #192	@ 0xc0
 8000d60:	f7ff fee2 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x18);
 8000d64:	2018      	movs	r0, #24
 8000d66:	f7ff ff5b 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x16);
 8000d6a:	2016      	movs	r0, #22
 8000d6c:	f7ff ff58 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 8000d70:	20c1      	movs	r0, #193	@ 0xc1
 8000d72:	f7ff fed9 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x45);
 8000d76:	2045      	movs	r0, #69	@ 0x45
 8000d78:	f7ff ff52 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8000d7c:	20c2      	movs	r0, #194	@ 0xc2
 8000d7e:	f7ff fed3 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x33);
 8000d82:	2033      	movs	r0, #51	@ 0x33
 8000d84:	f7ff ff4c 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 8000d88:	20c3      	movs	r0, #195	@ 0xc3
 8000d8a:	f7ff fecd 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x33);
 8000d8e:	2033      	movs	r0, #51	@ 0x33
 8000d90:	f7ff ff46 	bl	8000c20 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8000d94:	2036      	movs	r0, #54	@ 0x36
 8000d96:	f7ff fec7 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 8000d9a:	205c      	movs	r0, #92	@ 0x5c
 8000d9c:	f7ff ff40 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8000da0:	203a      	movs	r0, #58	@ 0x3a
 8000da2:	f7ff fec1 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 8000da6:	2006      	movs	r0, #6
 8000da8:	f7ff ff3a 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff febb 	bl	8000b28 <LCD_send_command>
	LCD_send_command(0x00);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff feb8 	bl	8000b28 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 8000db8:	20b0      	movs	r0, #176	@ 0xb0
 8000dba:	f7ff feb5 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff ff2e 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8000dc4:	20b1      	movs	r0, #177	@ 0xb1
 8000dc6:	f7ff feaf 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 8000dca:	20a0      	movs	r0, #160	@ 0xa0
 8000dcc:	f7ff ff28 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8000dd0:	2011      	movs	r0, #17
 8000dd2:	f7ff ff25 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8000dd6:	20b4      	movs	r0, #180	@ 0xb4
 8000dd8:	f7ff fea6 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f7ff ff1f 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8000de2:	20b5      	movs	r0, #181	@ 0xb5
 8000de4:	f7ff fea0 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x02);
 8000de8:	2002      	movs	r0, #2
 8000dea:	f7ff ff19 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x02);
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff ff16 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0A);
 8000df4:	200a      	movs	r0, #10
 8000df6:	f7ff ff13 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x04);
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f7ff ff10 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8000e00:	20b6      	movs	r0, #182	@ 0xb6
 8000e02:	f7ff fe91 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x02);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f7ff ff0a 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x02);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff ff07 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x3B);
 8000e12:	203b      	movs	r0, #59	@ 0x3b
 8000e14:	f7ff ff04 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8000e18:	20e9      	movs	r0, #233	@ 0xe9
 8000e1a:	f7ff fe85 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fefe 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8000e24:	20f7      	movs	r0, #247	@ 0xf7
 8000e26:	f7ff fe7f 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0xA9);
 8000e2a:	20a9      	movs	r0, #169	@ 0xa9
 8000e2c:	f7ff fef8 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x51);
 8000e30:	2051      	movs	r0, #81	@ 0x51
 8000e32:	f7ff fef5 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x2C);
 8000e36:	202c      	movs	r0, #44	@ 0x2c
 8000e38:	f7ff fef2 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x82);
 8000e3c:	2082      	movs	r0, #130	@ 0x82
 8000e3e:	f7ff feef 	bl	8000c20 <LCD_send_data>


	LCD_send_command(ILI9488_SLPOUT);
 8000e42:	2011      	movs	r0, #17
 8000e44:	f7ff fe70 	bl	8000b28 <LCD_send_command>
	HAL_Delay(255);
 8000e48:	20ff      	movs	r0, #255	@ 0xff
 8000e4a:	f001 fb2b 	bl	80024a4 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 8000e4e:	2051      	movs	r0, #81	@ 0x51
 8000e50:	f7ff fe6a 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8000e54:	20ff      	movs	r0, #255	@ 0xff
 8000e56:	f7ff fee3 	bl	8000c20 <LCD_send_data>
	LCD_send_command(ILI9488_DISPON);
 8000e5a:	2029      	movs	r0, #41	@ 0x29
 8000e5c:	f7ff fe64 	bl	8000b28 <LCD_send_command>


}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40020c00 	.word	0x40020c00

08000e68 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4604      	mov	r4, r0
 8000e70:	4608      	mov	r0, r1
 8000e72:	4611      	mov	r1, r2
 8000e74:	461a      	mov	r2, r3
 8000e76:	4623      	mov	r3, r4
 8000e78:	80fb      	strh	r3, [r7, #6]
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80bb      	strh	r3, [r7, #4]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	807b      	strh	r3, [r7, #2]
 8000e82:	4613      	mov	r3, r2
 8000e84:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 8000e86:	202a      	movs	r0, #42	@ 0x2a
 8000e88:	f7ff fe4e 	bl	8000b28 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	733b      	strb	r3, [r7, #12]
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	73bb      	strb	r3, [r7, #14]
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fe5c 	bl	8000b70 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 8000eb8:	202b      	movs	r0, #43	@ 0x2b
 8000eba:	f7ff fe35 	bl	8000b28 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	733b      	strb	r3, [r7, #12]
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8000ece:	883b      	ldrh	r3, [r7, #0]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73bb      	strb	r3, [r7, #14]
 8000ed8:	883b      	ldrh	r3, [r7, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe43 	bl	8000b70 <LCD_send_data_multi>

	if(x == 'w')
 8000eea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eee:	2b77      	cmp	r3, #119	@ 0x77
 8000ef0:	d102      	bne.n	8000ef8 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8000ef2:	202c      	movs	r0, #44	@ 0x2c
 8000ef4:	f7ff fe18 	bl	8000b28 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8000ef8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000efc:	2b72      	cmp	r3, #114	@ 0x72
 8000efe:	d102      	bne.n	8000f06 <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8000f00:	202e      	movs	r0, #46	@ 0x2e
 8000f02:	f7ff fe11 	bl	8000b28 <LCD_send_command>
	}


}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}
	...

08000f10 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4604      	mov	r4, r0
 8000f18:	4608      	mov	r0, r1
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4623      	mov	r3, r4
 8000f20:	80fb      	strh	r3, [r7, #6]
 8000f22:	4603      	mov	r3, r0
 8000f24:	80bb      	strh	r3, [r7, #4]
 8000f26:	460b      	mov	r3, r1
 8000f28:	807b      	strh	r3, [r7, #2]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 8000f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800111c <read_pixel_frame+0x20c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b79      	ldr	r3, [pc, #484]	@ (800111c <read_pixel_frame+0x20c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f3c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 8000f3e:	4b77      	ldr	r3, [pc, #476]	@ (800111c <read_pixel_frame+0x20c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b75      	ldr	r3, [pc, #468]	@ (800111c <read_pixel_frame+0x20c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8000f4c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 8000f4e:	4b73      	ldr	r3, [pc, #460]	@ (800111c <read_pixel_frame+0x20c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b71      	ldr	r3, [pc, #452]	@ (800111c <read_pixel_frame+0x20c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0210 	orr.w	r2, r2, #16
 8000f5c:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8000f5e:	4b6f      	ldr	r3, [pc, #444]	@ (800111c <read_pixel_frame+0x20c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b6d      	ldr	r3, [pc, #436]	@ (800111c <read_pixel_frame+0x20c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f6c:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 8000f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8001120 <read_pixel_frame+0x210>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 8000f78:	887a      	ldrh	r2, [r7, #2]
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bfb8      	it	lt
 8000f82:	425b      	neglt	r3, r3
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	8839      	ldrh	r1, [r7, #0]
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	1acb      	subs	r3, r1, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bfb8      	it	lt
 8000f90:	425b      	neglt	r3, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	fb12 f303 	smulbb	r3, r2, r3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	0052      	lsls	r2, r2, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	753b      	strb	r3, [r7, #20]

    free(data);
 8000fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000fa8:	f009 fdc6 	bl	800ab38 <free>
    data = malloc(byteNr);
 8000fac:	8afb      	ldrh	r3, [r7, #22]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f009 fdba 	bl	800ab28 <malloc>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	807b      	strh	r3, [r7, #2]
    y--;
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	743b      	strb	r3, [r7, #16]
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	747b      	strb	r3, [r7, #17]
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	74bb      	strb	r3, [r7, #18]
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8000fe4:	88bb      	ldrh	r3, [r7, #4]
 8000fe6:	0a1b      	lsrs	r3, r3, #8
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	733b      	strb	r3, [r7, #12]
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	737b      	strb	r3, [r7, #13]
 8000ff4:	883b      	ldrh	r3, [r7, #0]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73bb      	strb	r3, [r7, #14]
 8000ffe:	883b      	ldrh	r3, [r7, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8001004:	2200      	movs	r2, #0
 8001006:	2110      	movs	r1, #16
 8001008:	4846      	ldr	r0, [pc, #280]	@ (8001124 <read_pixel_frame+0x214>)
 800100a:	f002 fafb 	bl	8003604 <HAL_GPIO_WritePin>

    DC_COMMAND();
 800100e:	2200      	movs	r2, #0
 8001010:	2108      	movs	r1, #8
 8001012:	4844      	ldr	r0, [pc, #272]	@ (8001124 <read_pixel_frame+0x214>)
 8001014:	f002 faf6 	bl	8003604 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 8001018:	232a      	movs	r3, #42	@ 0x2a
 800101a:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 800101c:	f107 010b 	add.w	r1, r7, #11
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	2201      	movs	r2, #1
 8001026:	483d      	ldr	r0, [pc, #244]	@ (800111c <read_pixel_frame+0x20c>)
 8001028:	f003 ffbf 	bl	8004faa <HAL_SPI_Transmit>
    DC_DATA();
 800102c:	2201      	movs	r2, #1
 800102e:	2108      	movs	r1, #8
 8001030:	483c      	ldr	r0, [pc, #240]	@ (8001124 <read_pixel_frame+0x214>)
 8001032:	f002 fae7 	bl	8003604 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 8001036:	f107 0110 	add.w	r1, r7, #16
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	2204      	movs	r2, #4
 8001040:	4836      	ldr	r0, [pc, #216]	@ (800111c <read_pixel_frame+0x20c>)
 8001042:	f003 ffb2 	bl	8004faa <HAL_SPI_Transmit>

    DC_COMMAND();
 8001046:	2200      	movs	r2, #0
 8001048:	2108      	movs	r1, #8
 800104a:	4836      	ldr	r0, [pc, #216]	@ (8001124 <read_pixel_frame+0x214>)
 800104c:	f002 fada 	bl	8003604 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 8001050:	232b      	movs	r3, #43	@ 0x2b
 8001052:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 8001054:	f107 010a 	add.w	r1, r7, #10
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	2201      	movs	r2, #1
 800105e:	482f      	ldr	r0, [pc, #188]	@ (800111c <read_pixel_frame+0x20c>)
 8001060:	f003 ffa3 	bl	8004faa <HAL_SPI_Transmit>
    DC_DATA();
 8001064:	2201      	movs	r2, #1
 8001066:	2108      	movs	r1, #8
 8001068:	482e      	ldr	r0, [pc, #184]	@ (8001124 <read_pixel_frame+0x214>)
 800106a:	f002 facb 	bl	8003604 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 800106e:	f107 010c 	add.w	r1, r7, #12
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	2204      	movs	r2, #4
 8001078:	4828      	ldr	r0, [pc, #160]	@ (800111c <read_pixel_frame+0x20c>)
 800107a:	f003 ff96 	bl	8004faa <HAL_SPI_Transmit>

    DC_COMMAND();
 800107e:	2200      	movs	r2, #0
 8001080:	2108      	movs	r1, #8
 8001082:	4828      	ldr	r0, [pc, #160]	@ (8001124 <read_pixel_frame+0x214>)
 8001084:	f002 fabe 	bl	8003604 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 8001088:	232e      	movs	r3, #46	@ 0x2e
 800108a:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 800108c:	f107 0109 	add.w	r1, r7, #9
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	2201      	movs	r2, #1
 8001096:	4821      	ldr	r0, [pc, #132]	@ (800111c <read_pixel_frame+0x20c>)
 8001098:	f003 ff87 	bl	8004faa <HAL_SPI_Transmit>
    DC_DATA();
 800109c:	2201      	movs	r2, #1
 800109e:	2108      	movs	r1, #8
 80010a0:	4820      	ldr	r0, [pc, #128]	@ (8001124 <read_pixel_frame+0x214>)
 80010a2:	f002 faaf 	bl	8003604 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 80010a6:	f107 0114 	add.w	r1, r7, #20
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	2201      	movs	r2, #1
 80010b0:	481a      	ldr	r0, [pc, #104]	@ (800111c <read_pixel_frame+0x20c>)
 80010b2:	f004 f8be 	bl	8005232 <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 80010b6:	8afb      	ldrh	r3, [r7, #22]
 80010b8:	461a      	mov	r2, r3
 80010ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <read_pixel_frame+0x20c>)
 80010be:	f004 fc2d 	bl	800591c <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 80010c2:	bf00      	nop
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <read_pixel_frame+0x210>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0fa      	beq.n	80010c4 <read_pixel_frame+0x1b4>
    CS_D();
 80010ce:	2201      	movs	r2, #1
 80010d0:	2110      	movs	r1, #16
 80010d2:	4814      	ldr	r0, [pc, #80]	@ (8001124 <read_pixel_frame+0x214>)
 80010d4:	f002 fa96 	bl	8003604 <HAL_GPIO_WritePin>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <read_pixel_frame+0x20c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <read_pixel_frame+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010e6:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <read_pixel_frame+0x20c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <read_pixel_frame+0x20c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80010f6:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <read_pixel_frame+0x20c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <read_pixel_frame+0x20c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <read_pixel_frame+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b04      	ldr	r3, [pc, #16]	@ (800111c <read_pixel_frame+0x20c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001112:	601a      	str	r2, [r3, #0]

}
 8001114:	bf00      	nop
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	2000017c 	.word	0x2000017c
 8001120:	20000325 	.word	0x20000325
 8001124:	40020c00 	.word	0x40020c00

08001128 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


  void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	   * folosind DMA. Odata terminat transferul SPI prin DMA,
	   * aceasta functia de CallBack se va apela, setandu-ne un flag
	   * pentru a indica starea acestui transfer de date.
	   */

	  flagDmaSpiTx = 1;
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <HAL_SPI_TxCpltCallback+0x1c>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]

  }
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000324 	.word	0x20000324

08001148 <HAL_SPI_RxCpltCallback>:


  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	  /*
	   * Functie de CallBack pentru terminarea receptiei datelor
	   * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	   */

	  flagDmaSpiRx = 1;
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <HAL_SPI_RxCpltCallback+0x1c>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]

  }
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000325 	.word	0x20000325

08001168 <HAL_DAC_ConvHalfCpltCallbackCh1>:


  void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
  {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
      /*
       * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
       */

	  flagDmaDAC = 1;
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]

  }
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000326 	.word	0x20000326

08001188 <redare_fisier_audio>:



  void redare_fisier_audio(char *path)
  {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	6078      	str	r0, [r7, #4]

	  read_audio_file(path, buffer); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 8001190:	4917      	ldr	r1, [pc, #92]	@ (80011f0 <redare_fisier_audio+0x68>)
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 fcee 	bl	8001b74 <read_audio_file>

	  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 8001198:	2300      	movs	r3, #0
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011a0:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <redare_fisier_audio+0x68>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	4813      	ldr	r0, [pc, #76]	@ (80011f4 <redare_fisier_audio+0x6c>)
 80011a6:	f001 fad5 	bl	8002754 <HAL_DAC_Start_DMA>

	  while(1)
	  {
		  read_audio_file(path, buffer+1024);
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <redare_fisier_audio+0x70>)
 80011ac:	4619      	mov	r1, r3
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 fce0 	bl	8001b74 <read_audio_file>
		  while(flagDmaDAC == 0);
 80011b4:	bf00      	nop
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <redare_fisier_audio+0x74>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f083 0301 	eor.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f7      	bne.n	80011b6 <redare_fisier_audio+0x2e>
		  flagDmaDAC = 0;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <redare_fisier_audio+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
		  read_audio_file(path, buffer);
 80011cc:	4908      	ldr	r1, [pc, #32]	@ (80011f0 <redare_fisier_audio+0x68>)
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fcd0 	bl	8001b74 <read_audio_file>
		  while(flagDmaDAC == 0);
 80011d4:	bf00      	nop
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <redare_fisier_audio+0x74>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f083 0301 	eor.w	r3, r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f7      	bne.n	80011d6 <redare_fisier_audio+0x4e>
		  flagDmaDAC = 0;
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <redare_fisier_audio+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
		  read_audio_file(path, buffer+1024);
 80011ec:	e7dd      	b.n	80011aa <redare_fisier_audio+0x22>
 80011ee:	bf00      	nop
 80011f0:	20000328 	.word	0x20000328
 80011f4:	20000084 	.word	0x20000084
 80011f8:	20001328 	.word	0x20001328
 80011fc:	20000326 	.word	0x20000326

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8001206:	b082      	sub	sp, #8
 8001208:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120a:	f001 f8d9 	bl	80023c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120e:	f000 fa19 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f000 fbb5 	bl	8001980 <MX_GPIO_Init>
  MX_DMA_Init();
 8001216:	f000 fb75 	bl	8001904 <MX_DMA_Init>
  MX_SPI1_Init();
 800121a:	f000 fac7 	bl	80017ac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800121e:	f000 fb47 	bl	80018b0 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001222:	f000 fa79 	bl	8001718 <MX_DAC_Init>
  MX_TIM2_Init();
 8001226:	f000 faf7 	bl	8001818 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 800122a:	f000 fa9f 	bl	800176c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800122e:	f006 ff75 	bl	800811c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 8001232:	f000 fc09 	bl	8001a48 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 8001236:	f7ff fd17 	bl	8000c68 <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 800123a:	4896      	ldr	r0, [pc, #600]	@ (8001494 <main+0x294>)
 800123c:	f005 f82c 	bl	8006298 <HAL_TIM_Base_Start>

  //get_sine();
  //HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);


  fill_screen1(0xF100);
 8001240:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001244:	f7ff f9c4 	bl	80005d0 <fill_screen1>
  HAL_Delay(1000);
 8001248:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800124c:	f001 f92a 	bl	80024a4 <HAL_Delay>
  fill_screen2(0xF00F);
 8001250:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8001254:	f7ff fa52 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001258:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800125c:	f001 f922 	bl	80024a4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001260:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001264:	f7ff fa4a 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001268:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800126c:	f001 f91a 	bl	80024a4 <HAL_Delay>
  fill_screen2(0x3F51);
 8001270:	f643 7051 	movw	r0, #16209	@ 0x3f51
 8001274:	f7ff fa42 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800127c:	f001 f912 	bl	80024a4 <HAL_Delay>

  //Test_SD_Card();
  unsigned int startTick = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001286:	f102 0218 	add.w	r2, r2, #24
 800128a:	6013      	str	r3, [r2, #0]
  unsigned int endTick = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001292:	f102 0214 	add.w	r2, r2, #20
 8001296:	6013      	str	r3, [r2, #0]
  unsigned int getTime = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800129e:	f102 0210 	add.w	r2, r2, #16
 80012a2:	6013      	str	r3, [r2, #0]

  redare_fisier_audio("audio/melodie.txt");
 80012a4:	487c      	ldr	r0, [pc, #496]	@ (8001498 <main+0x298>)
 80012a6:	f7ff ff6f 	bl	8001188 <redare_fisier_audio>

  char *fileData = NULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012b0:	f102 020c 	add.w	r2, r2, #12
 80012b4:	6013      	str	r3, [r2, #0]
  read_file("audio/text.txt", fileData);
 80012b6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012ba:	f103 030c 	add.w	r3, r3, #12
 80012be:	6819      	ldr	r1, [r3, #0]
 80012c0:	4876      	ldr	r0, [pc, #472]	@ (800149c <main+0x29c>)
 80012c2:	f000 fbcf 	bl	8001a64 <read_file>
  HAL_Delay(1000);
 80012c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012ca:	f001 f8eb 	bl	80024a4 <HAL_Delay>

  uint32_t sampleData[1024]; /*23 de ms pentru redare DMA dintre care 7 ms pentru citire din fisier*/
  	  	  	  	  	  	  	 /*Vor ramane aproximativ 16 ms pentru prelucrarea frame-ului (pentru 1024 de esantioane)*/

  startTick = HAL_GetTick();
 80012ce:	f001 f8dd 	bl	800248c <HAL_GetTick>
 80012d2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012d6:	f103 0318 	add.w	r3, r3, #24
 80012da:	6018      	str	r0, [r3, #0]
  read_audio_file("audio/random.txt", sampleData);
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	3b18      	subs	r3, #24
 80012e2:	4619      	mov	r1, r3
 80012e4:	486e      	ldr	r0, [pc, #440]	@ (80014a0 <main+0x2a0>)
 80012e6:	f000 fc45 	bl	8001b74 <read_audio_file>
  endTick = HAL_GetTick();
 80012ea:	f001 f8cf 	bl	800248c <HAL_GetTick>
 80012ee:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012f2:	f103 0314 	add.w	r3, r3, #20
 80012f6:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 80012f8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012fc:	f103 0314 	add.w	r3, r3, #20
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001306:	f103 0318 	add.w	r3, r3, #24
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001312:	f102 0210 	add.w	r2, r2, #16
 8001316:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001318:	2064      	movs	r0, #100	@ 0x64
 800131a:	f001 f8c3 	bl	80024a4 <HAL_Delay>

  startTick = HAL_GetTick();
 800131e:	f001 f8b5 	bl	800248c <HAL_GetTick>
 8001322:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001326:	f103 0318 	add.w	r3, r3, #24
 800132a:	6018      	str	r0, [r3, #0]
  read_audio_file("audio/random.txt", sampleData);
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	3b18      	subs	r3, #24
 8001332:	4619      	mov	r1, r3
 8001334:	485a      	ldr	r0, [pc, #360]	@ (80014a0 <main+0x2a0>)
 8001336:	f000 fc1d 	bl	8001b74 <read_audio_file>
  endTick = HAL_GetTick();
 800133a:	f001 f8a7 	bl	800248c <HAL_GetTick>
 800133e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001342:	f103 0314 	add.w	r3, r3, #20
 8001346:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001348:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800134c:	f103 0314 	add.w	r3, r3, #20
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001356:	f103 0318 	add.w	r3, r3, #24
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001362:	f102 0210 	add.w	r2, r2, #16
 8001366:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001368:	2064      	movs	r0, #100	@ 0x64
 800136a:	f001 f89b 	bl	80024a4 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	3b18      	subs	r3, #24
 8001374:	4619      	mov	r1, r3
 8001376:	4849      	ldr	r0, [pc, #292]	@ (800149c <main+0x29c>)
 8001378:	f000 fbfc 	bl	8001b74 <read_audio_file>
  HAL_Delay(100);
 800137c:	2064      	movs	r0, #100	@ 0x64
 800137e:	f001 f891 	bl	80024a4 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001382:	f107 0320 	add.w	r3, r7, #32
 8001386:	3b18      	subs	r3, #24
 8001388:	4619      	mov	r1, r3
 800138a:	4844      	ldr	r0, [pc, #272]	@ (800149c <main+0x29c>)
 800138c:	f000 fbf2 	bl	8001b74 <read_audio_file>
  HAL_Delay(100);
 8001390:	2064      	movs	r0, #100	@ 0x64
 8001392:	f001 f887 	bl	80024a4 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	3b18      	subs	r3, #24
 800139c:	4619      	mov	r1, r3
 800139e:	483f      	ldr	r0, [pc, #252]	@ (800149c <main+0x29c>)
 80013a0:	f000 fbe8 	bl	8001b74 <read_audio_file>
  HAL_Delay(100);
 80013a4:	2064      	movs	r0, #100	@ 0x64
 80013a6:	f001 f87d 	bl	80024a4 <HAL_Delay>

  for(uint8_t i=0;i<100;i++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80013b0:	f102 021f 	add.w	r2, r2, #31
 80013b4:	7013      	strb	r3, [r2, #0]
 80013b6:	e0a4      	b.n	8001502 <main+0x302>
  {
	  for(uint8_t j=0; j<100;j++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80013be:	f102 021e 	add.w	r2, r2, #30
 80013c2:	7013      	strb	r3, [r2, #0]
 80013c4:	e08a      	b.n	80014dc <main+0x2dc>
	  {

		  if(i==j)
 80013c6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80013ca:	f103 031f 	add.w	r3, r3, #31
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80013d4:	f103 031e 	add.w	r3, r3, #30
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d111      	bne.n	8001402 <main+0x202>
		  {
			  draw_pixel(i,j,0xF100);
 80013de:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80013e2:	f103 031f 	add.w	r3, r3, #31
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80013ee:	f102 021e 	add.w	r2, r2, #30
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	b291      	uxth	r1, r2
 80013f6:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8be 	bl	800057c <draw_pixel>
			  continue;
 8001400:	e061      	b.n	80014c6 <main+0x2c6>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8001402:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001406:	f103 031f 	add.w	r3, r3, #31
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b50      	cmp	r3, #80	@ 0x50
 800140e:	d106      	bne.n	800141e <main+0x21e>
 8001410:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001414:	f103 031e 	add.w	r3, r3, #30
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b14      	cmp	r3, #20
 800141c:	d029      	beq.n	8001472 <main+0x272>
 800141e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001422:	f103 031f 	add.w	r3, r3, #31
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b50      	cmp	r3, #80	@ 0x50
 800142a:	d106      	bne.n	800143a <main+0x23a>
 800142c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001430:	f103 031e 	add.w	r3, r3, #30
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b13      	cmp	r3, #19
 8001438:	d01b      	beq.n	8001472 <main+0x272>
 800143a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800143e:	f103 031f 	add.w	r3, r3, #31
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b51      	cmp	r3, #81	@ 0x51
 8001446:	d106      	bne.n	8001456 <main+0x256>
 8001448:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800144c:	f103 031e 	add.w	r3, r3, #30
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b14      	cmp	r3, #20
 8001454:	d00d      	beq.n	8001472 <main+0x272>
 8001456:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800145a:	f103 031f 	add.w	r3, r3, #31
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b51      	cmp	r3, #81	@ 0x51
 8001462:	d11f      	bne.n	80014a4 <main+0x2a4>
 8001464:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001468:	f103 031e 	add.w	r3, r3, #30
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b13      	cmp	r3, #19
 8001470:	d118      	bne.n	80014a4 <main+0x2a4>
		  {
			  draw_pixel(i,j,0x001F);
 8001472:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001476:	f103 031f 	add.w	r3, r3, #31
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001482:	f102 021e 	add.w	r2, r2, #30
 8001486:	7812      	ldrb	r2, [r2, #0]
 8001488:	b291      	uxth	r1, r2
 800148a:	221f      	movs	r2, #31
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f875 	bl	800057c <draw_pixel>
			  continue;
 8001492:	e018      	b.n	80014c6 <main+0x2c6>
 8001494:	20000294 	.word	0x20000294
 8001498:	0800ae70 	.word	0x0800ae70
 800149c:	0800ae84 	.word	0x0800ae84
 80014a0:	0800ae94 	.word	0x0800ae94
		  }


		  draw_pixel(i,j,0xFFFF);
 80014a4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80014a8:	f103 031f 	add.w	r3, r3, #31
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80014b4:	f102 021e 	add.w	r2, r2, #30
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	b291      	uxth	r1, r2
 80014bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f85b 	bl	800057c <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 80014c6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80014ca:	f103 031e 	add.w	r3, r3, #30
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80014d6:	f102 021e 	add.w	r2, r2, #30
 80014da:	7013      	strb	r3, [r2, #0]
 80014dc:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80014e0:	f103 031e 	add.w	r3, r3, #30
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b63      	cmp	r3, #99	@ 0x63
 80014e8:	f67f af6d 	bls.w	80013c6 <main+0x1c6>
  for(uint8_t i=0;i<100;i++)
 80014ec:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80014f0:	f103 031f 	add.w	r3, r3, #31
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80014fc:	f102 021f 	add.w	r2, r2, #31
 8001500:	7013      	strb	r3, [r2, #0]
 8001502:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001506:	f103 031f 	add.w	r3, r3, #31
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b63      	cmp	r3, #99	@ 0x63
 800150e:	f67f af53 	bls.w	80013b8 <main+0x1b8>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8001512:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001516:	f7ff f8f1 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 800151a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800151e:	f000 ffc1 	bl	80024a4 <HAL_Delay>
  fill_screen2(0xF150);
 8001522:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8001526:	f7ff f8e9 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 800152a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800152e:	f000 ffb9 	bl	80024a4 <HAL_Delay>
  fill_screen2(0xF111);
 8001532:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8001536:	f7ff f8e1 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 800153a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800153e:	f000 ffb1 	bl	80024a4 <HAL_Delay>
  fill_screen2(0xF10F);
 8001542:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8001546:	f7ff f8d9 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 800154a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154e:	f000 ffa9 	bl	80024a4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001552:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001556:	f7ff f8d1 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 800155a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800155e:	f000 ffa1 	bl	80024a4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001562:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001566:	f7ff f8c9 	bl	80006fc <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 800156a:	231f      	movs	r3, #31
 800156c:	9301      	str	r3, [sp, #4]
 800156e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	230c      	movs	r3, #12
 8001576:	4a2f      	ldr	r2, [pc, #188]	@ (8001634 <main+0x434>)
 8001578:	21c8      	movs	r1, #200	@ 0xc8
 800157a:	2024      	movs	r0, #36	@ 0x24
 800157c:	f7ff fa1a 	bl	80009b4 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8001580:	f107 0320 	add.w	r3, r7, #32
 8001584:	461a      	mov	r2, r3
 8001586:	4b2c      	ldr	r3, [pc, #176]	@ (8001638 <main+0x438>)
 8001588:	f842 3c1c 	str.w	r3, [r2, #-28]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	3b1c      	subs	r3, #28
 8001592:	2204      	movs	r2, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4829      	ldr	r0, [pc, #164]	@ (800163c <main+0x43c>)
 8001598:	f004 f90e 	bl	80057b8 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 800159c:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80015a0:	2250      	movs	r2, #80	@ 0x50
 80015a2:	2114      	movs	r1, #20
 80015a4:	2014      	movs	r0, #20
 80015a6:	f7ff fa49 	bl	8000a3c <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 80015aa:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80015ae:	2250      	movs	r2, #80	@ 0x50
 80015b0:	2114      	movs	r1, #20
 80015b2:	2014      	movs	r0, #20
 80015b4:	f7ff fa7d 	bl	8000ab2 <draw_vertical_line>

  flagDmaSpiTx = 0;
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <main+0x440>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 80015be:	221f      	movs	r2, #31
 80015c0:	2100      	movs	r1, #0
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7fe ffda 	bl	800057c <draw_pixel>
  draw_pixel(1,0,0xF800);
 80015c8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80015cc:	2100      	movs	r1, #0
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7fe ffd4 	bl	800057c <draw_pixel>
  draw_pixel(0,1,0x001F);
 80015d4:	221f      	movs	r2, #31
 80015d6:	2101      	movs	r1, #1
 80015d8:	2000      	movs	r0, #0
 80015da:	f7fe ffcf 	bl	800057c <draw_pixel>
  draw_pixel(1,1,0xF800);
 80015de:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80015e2:	2101      	movs	r1, #1
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7fe ffc9 	bl	800057c <draw_pixel>

  HAL_Delay(50);
 80015ea:	2032      	movs	r0, #50	@ 0x32
 80015ec:	f000 ff5a 	bl	80024a4 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 80015f0:	2001      	movs	r0, #1
 80015f2:	f009 fa99 	bl	800ab28 <malloc>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80015fc:	f102 0208 	add.w	r2, r2, #8
 8001600:	6013      	str	r3, [r2, #0]
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 8001602:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001606:	f103 0308 	add.w	r3, r3, #8
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2302      	movs	r3, #2
 8001610:	2202      	movs	r2, #2
 8001612:	2100      	movs	r1, #0
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff fc7b 	bl	8000f10 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 800161a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800161e:	f103 0308 	add.w	r3, r3, #8
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	f009 fa88 	bl	800ab38 <free>

  HAL_Delay(3000);
 8001628:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800162c:	f000 ff3a 	bl	80024a4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <main+0x430>
 8001634:	0800aea8 	.word	0x0800aea8
 8001638:	04030201 	.word	0x04030201
 800163c:	2000017c 	.word	0x2000017c
 8001640:	20000324 	.word	0x20000324

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b094      	sub	sp, #80	@ 0x50
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0320 	add.w	r3, r7, #32
 800164e:	2230      	movs	r2, #48	@ 0x30
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f009 fb5c 	bl	800ad10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	4b28      	ldr	r3, [pc, #160]	@ (8001710 <SystemClock_Config+0xcc>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	4a27      	ldr	r2, [pc, #156]	@ (8001710 <SystemClock_Config+0xcc>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001676:	6413      	str	r3, [r2, #64]	@ 0x40
 8001678:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <SystemClock_Config+0xcc>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <SystemClock_Config+0xd0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a21      	ldr	r2, [pc, #132]	@ (8001714 <SystemClock_Config+0xd0>)
 800168e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <SystemClock_Config+0xd0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a0:	2301      	movs	r3, #1
 80016a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016aa:	2302      	movs	r3, #2
 80016ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016b4:	2304      	movs	r3, #4
 80016b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016b8:	23a8      	movs	r3, #168	@ 0xa8
 80016ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016bc:	2302      	movs	r3, #2
 80016be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016c0:	2307      	movs	r3, #7
 80016c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c4:	f107 0320 	add.w	r3, r7, #32
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 ffb5 	bl	8003638 <HAL_RCC_OscConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016d4:	f000 f9b2 	bl	8001a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d8:	230f      	movs	r3, #15
 80016da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016dc:	2302      	movs	r3, #2
 80016de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	2105      	movs	r1, #5
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fa16 	bl	8003b28 <HAL_RCC_ClockConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001702:	f000 f99b 	bl	8001a3c <Error_Handler>
  }
}
 8001706:	bf00      	nop
 8001708:	3750      	adds	r7, #80	@ 0x50
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40007000 	.word	0x40007000

08001718 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800171e:	463b      	mov	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001726:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <MX_DAC_Init+0x4c>)
 8001728:	4a0f      	ldr	r2, [pc, #60]	@ (8001768 <MX_DAC_Init+0x50>)
 800172a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800172c:	480d      	ldr	r0, [pc, #52]	@ (8001764 <MX_DAC_Init+0x4c>)
 800172e:	f000 ffee 	bl	800270e <HAL_DAC_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001738:	f000 f980 	bl	8001a3c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800173c:	2324      	movs	r3, #36	@ 0x24
 800173e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	@ (8001764 <MX_DAC_Init+0x4c>)
 800174c:	f001 f8d8 	bl	8002900 <HAL_DAC_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001756:	f000 f971 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000084 	.word	0x20000084
 8001768:	40007400 	.word	0x40007400

0800176c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <MX_SDIO_SD_Init+0x38>)
 8001772:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <MX_SDIO_SD_Init+0x3c>)
 8001774:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001776:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <MX_SDIO_SD_Init+0x38>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <MX_SDIO_SD_Init+0x38>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001782:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <MX_SDIO_SD_Init+0x38>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <MX_SDIO_SD_Init+0x38>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800178e:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <MX_SDIO_SD_Init+0x38>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <MX_SDIO_SD_Init+0x38>)
 8001796:	2208      	movs	r2, #8
 8001798:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	200000f8 	.word	0x200000f8
 80017a8:	40012c00 	.word	0x40012c00

080017ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b0:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017b2:	4a18      	ldr	r2, [pc, #96]	@ (8001814 <MX_SPI1_Init+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017b6:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ea:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f0:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017f8:	220a      	movs	r2, #10
 80017fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	@ (8001810 <MX_SPI1_Init+0x64>)
 80017fe:	f003 fb4b 	bl	8004e98 <HAL_SPI_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001808:	f000 f918 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000017c 	.word	0x2000017c
 8001814:	40013000 	.word	0x40013000

08001818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182c:	463b      	mov	r3, r7
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001834:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <MX_TIM2_Init+0x94>)
 8001836:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800183a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <MX_TIM2_Init+0x94>)
 800183e:	2253      	movs	r2, #83	@ 0x53
 8001840:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <MX_TIM2_Init+0x94>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23-1;
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <MX_TIM2_Init+0x94>)
 800184a:	2216      	movs	r2, #22
 800184c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <MX_TIM2_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <MX_TIM2_Init+0x94>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800185a:	4814      	ldr	r0, [pc, #80]	@ (80018ac <MX_TIM2_Init+0x94>)
 800185c:	f004 fccc 	bl	80061f8 <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001866:	f000 f8e9 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800186e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	4619      	mov	r1, r3
 8001876:	480d      	ldr	r0, [pc, #52]	@ (80018ac <MX_TIM2_Init+0x94>)
 8001878:	f004 fd76 	bl	8006368 <HAL_TIM_ConfigClockSource>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001882:	f000 f8db 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001886:	2320      	movs	r3, #32
 8001888:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188e:	463b      	mov	r3, r7
 8001890:	4619      	mov	r1, r3
 8001892:	4806      	ldr	r0, [pc, #24]	@ (80018ac <MX_TIM2_Init+0x94>)
 8001894:	f004 ff76 	bl	8006784 <HAL_TIMEx_MasterConfigSynchronization>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800189e:	f000 f8cd 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000294 	.word	0x20000294

080018b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <MX_USART1_UART_Init+0x50>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018e8:	f004 ffc8 	bl	800687c <HAL_UART_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018f2:	f000 f8a3 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200002dc 	.word	0x200002dc
 8001900:	40011000 	.word	0x40011000

08001904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <MX_DMA_Init+0x78>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a1a      	ldr	r2, [pc, #104]	@ (800197c <MX_DMA_Init+0x78>)
 8001914:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <MX_DMA_Init+0x78>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b14      	ldr	r3, [pc, #80]	@ (800197c <MX_DMA_Init+0x78>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a13      	ldr	r2, [pc, #76]	@ (800197c <MX_DMA_Init+0x78>)
 8001930:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <MX_DMA_Init+0x78>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2010      	movs	r0, #16
 8001948:	f000 feab 	bl	80026a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800194c:	2010      	movs	r0, #16
 800194e:	f000 fec4 	bl	80026da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2038      	movs	r0, #56	@ 0x38
 8001958:	f000 fea3 	bl	80026a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800195c:	2038      	movs	r0, #56	@ 0x38
 800195e:	f000 febc 	bl	80026da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	203b      	movs	r0, #59	@ 0x3b
 8001968:	f000 fe9b 	bl	80026a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800196c:	203b      	movs	r0, #59	@ 0x3b
 800196e:	f000 feb4 	bl	80026da <HAL_NVIC_EnableIRQ>

}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b26      	ldr	r3, [pc, #152]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a25      	ldr	r2, [pc, #148]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 80019a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a17      	ldr	r2, [pc, #92]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a10      	ldr	r2, [pc, #64]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <MX_GPIO_Init+0xb4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2158      	movs	r1, #88	@ 0x58
 8001a0a:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <MX_GPIO_Init+0xb8>)
 8001a0c:	f001 fdfa 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8001a10:	2358      	movs	r3, #88	@ 0x58
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4804      	ldr	r0, [pc, #16]	@ (8001a38 <MX_GPIO_Init+0xb8>)
 8001a28:	f001 fc50 	bl	80032cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	@ 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020c00 	.word	0x40020c00

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <Error_Handler+0x8>

08001a48 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	/*
	 * Functie pentru initializarea cardului SD. Se va monta
	 * sistemul de fisiere prin variabila fs declarata static
	 */

	f_mount(&fs, "", 1);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4903      	ldr	r1, [pc, #12]	@ (8001a5c <init_cardSD+0x14>)
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <init_cardSD+0x18>)
 8001a52:	f008 fa1d 	bl	8009e90 <f_mount>

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	0800aeb8 	.word	0x0800aeb8
 8001a60:	20002328 	.word	0x20002328

08001a64 <read_file>:



void read_file(char *filePathName, char*fileData)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a70:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001a74:	6018      	str	r0, [r3, #0]
 8001a76:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a7a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001a7e:	6019      	str	r1, [r3, #0]

	FRESULT res;  //stocarea starii cardului SD (util pentru depanare)
	FIL file;  //stocarea informatiilor despre fisierul deschis
	UINT byteRead;  //contor pentru numarul total de octeti cititi efectivi

	fileData = (char*)malloc(128*sizeof(char));
 8001a80:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a84:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 8001a88:	2080      	movs	r0, #128	@ 0x80
 8001a8a:	f009 f84d 	bl	800ab28 <malloc>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6023      	str	r3, [r4, #0]

	res = f_open(&file, filePathName, FA_READ);
 8001a92:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a96:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001a9a:	f107 000c 	add.w	r0, r7, #12
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	f008 fa3b 	bl	8009f1c <f_open>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

	if(res != FR_OK)
 8001aac:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d131      	bne.n	8001b18 <read_file+0xb4>
	{
		return;
	}

	f_read(&file, fileData, (sizeof(fileData)*128)-1, &byteRead);
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001abc:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001ac0:	f107 000c 	add.w	r0, r7, #12
 8001ac4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001ac8:	6809      	ldr	r1, [r1, #0]
 8001aca:	f008 fbe1 	bl	800a290 <f_read>
	fileData[byteRead] = '\0';
 8001ace:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001ad2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001adc:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]

	fileData = (char*)realloc(fileData, byteRead);
 8001ae8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001aec:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001af6:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 8001afa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001afe:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001b02:	4611      	mov	r1, r2
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	f009 f8cd 	bl	800aca4 <realloc>
 8001b0a:	6020      	str	r0, [r4, #0]

	f_close(&file);
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4618      	mov	r0, r3
 8001b12:	f008 fd7a 	bl	800a60a <f_close>
 8001b16:	e000      	b.n	8001b1a <read_file+0xb6>
		return;
 8001b18:	bf00      	nop


}
 8001b1a:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}

08001b22 <string_to_int>:

*/


static uint16_t string_to_int(char *string)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 8001b2e:	e015      	b.n	8001b5c <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b36:	d90e      	bls.n	8001b56 <string_to_int+0x34>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b39      	cmp	r3, #57	@ 0x39
 8001b3e:	d80a      	bhi.n	8001b56 <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	3b30      	subs	r3, #48	@ 0x30
 8001b54:	60fb      	str	r3, [r7, #12]
		}

		string++;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b0a      	cmp	r3, #10
 8001b62:	d1e5      	bne.n	8001b30 <string_to_int+0xe>
	}

	return number;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	b29b      	uxth	r3, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <read_audio_file>:



void read_audio_file(char *filePathName, uint32_t *buffer)
{
 8001b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b78:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b82:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8001b86:	6018      	str	r0, [r3, #0]
 8001b88:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b8c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b90:	6019      	str	r1, [r3, #0]
 8001b92:	466b      	mov	r3, sp
 8001b94:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8001b96:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b9a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8001b9e:	f107 0018 	add.w	r0, r7, #24
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	6819      	ldr	r1, [r3, #0]
 8001ba6:	f008 f9b9 	bl	8009f1c <f_open>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 8001bb0:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <read_audio_file+0x48>
	{
		return;
 8001bb8:	46b5      	mov	sp, r6
 8001bba:	e0f2      	b.n	8001da2 <read_audio_file+0x22e>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8001bbc:	4b7b      	ldr	r3, [pc, #492]	@ (8001dac <read_audio_file+0x238>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f008 fd49 	bl	800a65e <f_lseek>


	if(flagNewAudioFile == 1)
 8001bcc:	4b78      	ldr	r3, [pc, #480]	@ (8001db0 <read_audio_file+0x23c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d017      	beq.n	8001c04 <read_audio_file+0x90>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 8001bd4:	4b76      	ldr	r3, [pc, #472]	@ (8001db0 <read_audio_file+0x23c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8001bda:	4b76      	ldr	r3, [pc, #472]	@ (8001db4 <read_audio_file+0x240>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 8001be0:	4b72      	ldr	r3, [pc, #456]	@ (8001dac <read_audio_file+0x238>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 8001be6:	4b71      	ldr	r3, [pc, #452]	@ (8001dac <read_audio_file+0x238>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f107 0318 	add.w	r3, r7, #24
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f008 fd34 	bl	800a65e <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 8001bf6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001bfa:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4a6d      	ldr	r2, [pc, #436]	@ (8001db8 <read_audio_file+0x244>)
 8001c02:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 8001c04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c08:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	unsigned int nrFrames = fileSize / n;
 8001c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001db8 <read_audio_file+0x244>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

	if(fileSize%n != 0)
 8001c1c:	4b66      	ldr	r3, [pc, #408]	@ (8001db8 <read_audio_file+0x244>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8001c24:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c28:	fb01 f202 	mul.w	r2, r1, r2
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <read_audio_file+0xc8>
	{
		nrFrames++;
 8001c32:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001c36:	3301      	adds	r3, #1
 8001c38:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	}

	uint8_t index = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	char tempBuffer[n];
 8001c42:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8001c4c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001c50:	2200      	movs	r2, #0
 8001c52:	4698      	mov	r8, r3
 8001c54:	4691      	mov	r9, r2
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c6a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001c6e:	2200      	movs	r2, #0
 8001c70:	461c      	mov	r4, r3
 8001c72:	4615      	mov	r5, r2
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	00eb      	lsls	r3, r5, #3
 8001c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c82:	00e2      	lsls	r2, r4, #3
 8001c84:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001c88:	3307      	adds	r3, #7
 8001c8a:	08db      	lsrs	r3, r3, #3
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	ebad 0d03 	sub.w	sp, sp, r3
 8001c92:	466b      	mov	r3, sp
 8001c94:	3300      	adds	r3, #0
 8001c96:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 8001c9a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001c9e:	1e5a      	subs	r2, r3, #1
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	f107 0018 	add.w	r0, r7, #24
 8001ca8:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8001cac:	f008 faf0 	bl	800a290 <f_read>
	tempBuffer[byteRead] = '\n';
 8001cb0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001cb4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8001cbe:	210a      	movs	r1, #10
 8001cc0:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 8001cc8:	e040      	b.n	8001d4c <read_audio_file+0x1d8>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 8001cca:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 8001cce:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	2b0a      	cmp	r3, #10
 8001cd6:	d011      	beq.n	8001cfc <read_audio_file+0x188>
		{
			nrCharBuffer[index] = tempBuffer[i];
 8001cd8:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 8001cdc:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 8001ce0:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8001ce4:	5c89      	ldrb	r1, [r1, r2]
 8001ce6:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8001cea:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8001cee:	54d1      	strb	r1, [r2, r3]
			index++;
 8001cf0:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 8001cfa:	e022      	b.n	8001d42 <read_audio_file+0x1ce>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 8001cfc:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 8001d00:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8001d04:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8001d08:	210a      	movs	r1, #10
 8001d0a:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff06 	bl	8001b22 <string_to_int>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d1e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	601a      	str	r2, [r3, #0]
			buffer++;
 8001d26:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d2a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001d2e:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8001d32:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	3204      	adds	r2, #4
 8001d3a:	601a      	str	r2, [r3, #0]

			index = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	for(uint16_t i=0; i< byteRead; i++)
 8001d42:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 8001d46:	3301      	adds	r3, #1
 8001d48:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 8001d4c:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 8001d50:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d54:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d3b5      	bcc.n	8001cca <read_audio_file+0x156>


	}


	if(currentFrame == nrFrames)
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <read_audio_file+0x240>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d102      	bne.n	8001d72 <read_audio_file+0x1fe>
	{
		flagNewAudioFile = 0;
 8001d6c:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <read_audio_file+0x23c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
	}

	currentFrame++;
 8001d72:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <read_audio_file+0x240>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <read_audio_file+0x240>)
 8001d7c:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 8001d7e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d82:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <read_audio_file+0x238>)
 8001d8a:	6013      	str	r3, [r2, #0]
	currentPosition++;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <read_audio_file+0x238>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <read_audio_file+0x238>)
 8001d94:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8001d96:	f107 0318 	add.w	r3, r7, #24
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f008 fc35 	bl	800a60a <f_close>
 8001da0:	46b5      	mov	sp, r6


}
 8001da2:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 8001da6:	46bd      	mov	sp, r7
 8001da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dac:	20002558 	.word	0x20002558
 8001db0:	20000008 	.word	0x20000008
 8001db4:	2000255c 	.word	0x2000255c
 8001db8:	20002560 	.word	0x20002560

08001dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	4a0f      	ldr	r2, [pc, #60]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800

08001e0c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a30      	ldr	r2, [pc, #192]	@ (8001eec <HAL_DAC_MspInit+0xe0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d159      	bne.n	8001ee2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef0 <HAL_DAC_MspInit+0xe4>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	4a2e      	ldr	r2, [pc, #184]	@ (8001ef0 <HAL_DAC_MspInit+0xe4>)
 8001e38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef0 <HAL_DAC_MspInit+0xe4>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ef0 <HAL_DAC_MspInit+0xe4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a27      	ldr	r2, [pc, #156]	@ (8001ef0 <HAL_DAC_MspInit+0xe4>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b25      	ldr	r3, [pc, #148]	@ (8001ef0 <HAL_DAC_MspInit+0xe4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e66:	2310      	movs	r3, #16
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	481e      	ldr	r0, [pc, #120]	@ (8001ef4 <HAL_DAC_MspInit+0xe8>)
 8001e7a:	f001 fa27 	bl	80032cc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001e80:	4a1e      	ldr	r2, [pc, #120]	@ (8001efc <HAL_DAC_MspInit+0xf0>)
 8001e82:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001e86:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001e8a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001e8e:	2240      	movs	r2, #64	@ 0x40
 8001e90:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e92:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001e98:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001e9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e9e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001ea2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ea6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001eaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eae:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001eb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eb6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001eba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ebe:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001ec6:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001ec8:	f000 fdfe 	bl	8002ac8 <HAL_DMA_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001ed2:	f7ff fdb3 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	4a06      	ldr	r2, [pc, #24]	@ (8001ef8 <HAL_DAC_MspInit+0xec>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	@ 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40007400 	.word	0x40007400
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	20000098 	.word	0x20000098
 8001efc:	40026088 	.word	0x40026088

08001f00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	@ 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a31      	ldr	r2, [pc, #196]	@ (8001fe4 <HAL_SD_MspInit+0xe4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d15b      	bne.n	8001fda <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b30      	ldr	r3, [pc, #192]	@ (8001fe8 <HAL_SD_MspInit+0xe8>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe8 <HAL_SD_MspInit+0xe8>)
 8001f2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f32:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HAL_SD_MspInit+0xe8>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <HAL_SD_MspInit+0xe8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a28      	ldr	r2, [pc, #160]	@ (8001fe8 <HAL_SD_MspInit+0xe8>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b26      	ldr	r3, [pc, #152]	@ (8001fe8 <HAL_SD_MspInit+0xe8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b22      	ldr	r3, [pc, #136]	@ (8001fe8 <HAL_SD_MspInit+0xe8>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4a21      	ldr	r2, [pc, #132]	@ (8001fe8 <HAL_SD_MspInit+0xe8>)
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <HAL_SD_MspInit+0xe8>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f80:	2301      	movs	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f88:	230c      	movs	r3, #12
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	4816      	ldr	r0, [pc, #88]	@ (8001fec <HAL_SD_MspInit+0xec>)
 8001f94:	f001 f99a 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001faa:	230c      	movs	r3, #12
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	480d      	ldr	r0, [pc, #52]	@ (8001fec <HAL_SD_MspInit+0xec>)
 8001fb6:	f001 f989 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001fca:	230c      	movs	r3, #12
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4806      	ldr	r0, [pc, #24]	@ (8001ff0 <HAL_SD_MspInit+0xf0>)
 8001fd6:	f001 f979 	bl	80032cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	@ 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40012c00 	.word	0x40012c00
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020800 	.word	0x40020800
 8001ff0:	40020c00 	.word	0x40020c00

08001ff4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	@ 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a47      	ldr	r2, [pc, #284]	@ (8002130 <HAL_SPI_MspInit+0x13c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	f040 8088 	bne.w	8002128 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	4b45      	ldr	r3, [pc, #276]	@ (8002134 <HAL_SPI_MspInit+0x140>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	4a44      	ldr	r2, [pc, #272]	@ (8002134 <HAL_SPI_MspInit+0x140>)
 8002022:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002026:	6453      	str	r3, [r2, #68]	@ 0x44
 8002028:	4b42      	ldr	r3, [pc, #264]	@ (8002134 <HAL_SPI_MspInit+0x140>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	4b3e      	ldr	r3, [pc, #248]	@ (8002134 <HAL_SPI_MspInit+0x140>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	4a3d      	ldr	r2, [pc, #244]	@ (8002134 <HAL_SPI_MspInit+0x140>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6313      	str	r3, [r2, #48]	@ 0x30
 8002044:	4b3b      	ldr	r3, [pc, #236]	@ (8002134 <HAL_SPI_MspInit+0x140>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002050:	23e0      	movs	r3, #224	@ 0xe0
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002060:	2305      	movs	r3, #5
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	4833      	ldr	r0, [pc, #204]	@ (8002138 <HAL_SPI_MspInit+0x144>)
 800206c:	f001 f92e 	bl	80032cc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002070:	4b32      	ldr	r3, [pc, #200]	@ (800213c <HAL_SPI_MspInit+0x148>)
 8002072:	4a33      	ldr	r2, [pc, #204]	@ (8002140 <HAL_SPI_MspInit+0x14c>)
 8002074:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002076:	4b31      	ldr	r3, [pc, #196]	@ (800213c <HAL_SPI_MspInit+0x148>)
 8002078:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800207c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800207e:	4b2f      	ldr	r3, [pc, #188]	@ (800213c <HAL_SPI_MspInit+0x148>)
 8002080:	2240      	movs	r2, #64	@ 0x40
 8002082:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002084:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <HAL_SPI_MspInit+0x148>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800208a:	4b2c      	ldr	r3, [pc, #176]	@ (800213c <HAL_SPI_MspInit+0x148>)
 800208c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002090:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002092:	4b2a      	ldr	r3, [pc, #168]	@ (800213c <HAL_SPI_MspInit+0x148>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002098:	4b28      	ldr	r3, [pc, #160]	@ (800213c <HAL_SPI_MspInit+0x148>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800209e:	4b27      	ldr	r3, [pc, #156]	@ (800213c <HAL_SPI_MspInit+0x148>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020a4:	4b25      	ldr	r3, [pc, #148]	@ (800213c <HAL_SPI_MspInit+0x148>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020aa:	4b24      	ldr	r3, [pc, #144]	@ (800213c <HAL_SPI_MspInit+0x148>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80020b0:	4822      	ldr	r0, [pc, #136]	@ (800213c <HAL_SPI_MspInit+0x148>)
 80020b2:	f000 fd09 	bl	8002ac8 <HAL_DMA_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80020bc:	f7ff fcbe 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a1e      	ldr	r2, [pc, #120]	@ (800213c <HAL_SPI_MspInit+0x148>)
 80020c4:	649a      	str	r2, [r3, #72]	@ 0x48
 80020c6:	4a1d      	ldr	r2, [pc, #116]	@ (800213c <HAL_SPI_MspInit+0x148>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80020cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 80020ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002148 <HAL_SPI_MspInit+0x154>)
 80020d0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80020d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 80020d4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80020d8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020da:	4b1a      	ldr	r3, [pc, #104]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e0:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020e6:	4b17      	ldr	r3, [pc, #92]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 80020e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ec:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ee:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020f4:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002100:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 8002102:	2200      	movs	r2, #0
 8002104:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 8002108:	2200      	movs	r2, #0
 800210a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800210c:	480d      	ldr	r0, [pc, #52]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 800210e:	f000 fcdb 	bl	8002ac8 <HAL_DMA_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002118:	f7ff fc90 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a09      	ldr	r2, [pc, #36]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 8002120:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002122:	4a08      	ldr	r2, [pc, #32]	@ (8002144 <HAL_SPI_MspInit+0x150>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	@ 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40013000 	.word	0x40013000
 8002134:	40023800 	.word	0x40023800
 8002138:	40020000 	.word	0x40020000
 800213c:	200001d4 	.word	0x200001d4
 8002140:	40026458 	.word	0x40026458
 8002144:	20000234 	.word	0x20000234
 8002148:	40026410 	.word	0x40026410

0800214c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800215c:	d10d      	bne.n	800217a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_TIM_Base_MspInit+0x3c>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <HAL_TIM_Base_MspInit+0x3c>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6413      	str	r3, [r2, #64]	@ 0x40
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_TIM_Base_MspInit+0x3c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	@ 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002220 <HAL_UART_MspInit+0x94>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d134      	bne.n	8002218 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <HAL_UART_MspInit+0x98>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <HAL_UART_MspInit+0x98>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021be:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_UART_MspInit+0x98>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <HAL_UART_MspInit+0x98>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a14      	ldr	r2, [pc, #80]	@ (8002224 <HAL_UART_MspInit+0x98>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_UART_MspInit+0x98>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021e6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f8:	2307      	movs	r3, #7
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	4809      	ldr	r0, [pc, #36]	@ (8002228 <HAL_UART_MspInit+0x9c>)
 8002204:	f001 f862 	bl	80032cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	2025      	movs	r0, #37	@ 0x25
 800220e:	f000 fa48 	bl	80026a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002212:	2025      	movs	r0, #37	@ 0x25
 8002214:	f000 fa61 	bl	80026da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	@ 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40011000 	.word	0x40011000
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <NMI_Handler+0x4>

08002234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <HardFault_Handler+0x4>

0800223c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <MemManage_Handler+0x4>

08002244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <BusFault_Handler+0x4>

0800224c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <UsageFault_Handler+0x4>

08002254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002282:	f000 f8ef 	bl	8002464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002290:	4802      	ldr	r0, [pc, #8]	@ (800229c <DMA1_Stream5_IRQHandler+0x10>)
 8002292:	f000 fdb1 	bl	8002df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000098 	.word	0x20000098

080022a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022a4:	4802      	ldr	r0, [pc, #8]	@ (80022b0 <USART1_IRQHandler+0x10>)
 80022a6:	f004 fb39 	bl	800691c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200002dc 	.word	0x200002dc

080022b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80022b8:	4802      	ldr	r0, [pc, #8]	@ (80022c4 <DMA2_Stream0_IRQHandler+0x10>)
 80022ba:	f000 fd9d 	bl	8002df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000234 	.word	0x20000234

080022c8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80022cc:	4802      	ldr	r0, [pc, #8]	@ (80022d8 <DMA2_Stream3_IRQHandler+0x10>)
 80022ce:	f000 fd93 	bl	8002df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200001d4 	.word	0x200001d4

080022dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e4:	4a14      	ldr	r2, [pc, #80]	@ (8002338 <_sbrk+0x5c>)
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <_sbrk+0x60>)
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f0:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <_sbrk+0x64>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <_sbrk+0x64>)
 80022fa:	4a12      	ldr	r2, [pc, #72]	@ (8002344 <_sbrk+0x68>)
 80022fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fe:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	429a      	cmp	r2, r3
 800230a:	d207      	bcs.n	800231c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800230c:	f008 fd18 	bl	800ad40 <__errno>
 8002310:	4603      	mov	r3, r0
 8002312:	220c      	movs	r2, #12
 8002314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	e009      	b.n	8002330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800231c:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002322:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <_sbrk+0x64>)
 800232c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20020000 	.word	0x20020000
 800233c:	00000400 	.word	0x00000400
 8002340:	20002564 	.word	0x20002564
 8002344:	200026f0 	.word	0x200026f0

08002348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <SystemInit+0x20>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002352:	4a05      	ldr	r2, [pc, #20]	@ (8002368 <SystemInit+0x20>)
 8002354:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800236c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002370:	f7ff ffea 	bl	8002348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002374:	480c      	ldr	r0, [pc, #48]	@ (80023a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002376:	490d      	ldr	r1, [pc, #52]	@ (80023ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002378:	4a0d      	ldr	r2, [pc, #52]	@ (80023b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800237c:	e002      	b.n	8002384 <LoopCopyDataInit>

0800237e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002382:	3304      	adds	r3, #4

08002384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002388:	d3f9      	bcc.n	800237e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238a:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800238c:	4c0a      	ldr	r4, [pc, #40]	@ (80023b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002390:	e001      	b.n	8002396 <LoopFillZerobss>

08002392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002394:	3204      	adds	r2, #4

08002396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002398:	d3fb      	bcc.n	8002392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800239a:	f008 fcd7 	bl	800ad4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239e:	f7fe ff2f 	bl	8001200 <main>
  bx  lr    
 80023a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80023b0:	0800bd20 	.word	0x0800bd20
  ldr r2, =_sbss
 80023b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80023b8:	200026f0 	.word	0x200026f0

080023bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC_IRQHandler>
	...

080023c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002400 <HAL_Init+0x40>)
 80023ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_Init+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <HAL_Init+0x40>)
 80023d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <HAL_Init+0x40>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a07      	ldr	r2, [pc, #28]	@ (8002400 <HAL_Init+0x40>)
 80023e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e8:	2003      	movs	r0, #3
 80023ea:	f000 f94f 	bl	800268c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ee:	200f      	movs	r0, #15
 80023f0:	f000 f808 	bl	8002404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f4:	f7ff fce2 	bl	8001dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00

08002404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800240c:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <HAL_InitTick+0x54>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b12      	ldr	r3, [pc, #72]	@ (800245c <HAL_InitTick+0x58>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800241a:	fbb3 f3f1 	udiv	r3, r3, r1
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f967 	bl	80026f6 <HAL_SYSTICK_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00e      	b.n	8002450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0f      	cmp	r3, #15
 8002436:	d80a      	bhi.n	800244e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002438:	2200      	movs	r2, #0
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f000 f92f 	bl	80026a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002444:	4a06      	ldr	r2, [pc, #24]	@ (8002460 <HAL_InitTick+0x5c>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2000000c 	.word	0x2000000c
 800245c:	20000014 	.word	0x20000014
 8002460:	20000010 	.word	0x20000010

08002464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_IncTick+0x20>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_IncTick+0x24>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	4a04      	ldr	r2, [pc, #16]	@ (8002488 <HAL_IncTick+0x24>)
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000014 	.word	0x20000014
 8002488:	20002568 	.word	0x20002568

0800248c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return uwTick;
 8002490:	4b03      	ldr	r3, [pc, #12]	@ (80024a0 <HAL_GetTick+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20002568 	.word	0x20002568

080024a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff ffee 	bl	800248c <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d005      	beq.n	80024ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024be:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <HAL_Delay+0x44>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ca:	bf00      	nop
 80024cc:	f7ff ffde 	bl	800248c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d8f7      	bhi.n	80024cc <HAL_Delay+0x28>
  {
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000014 	.word	0x20000014

080024ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002514:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800251c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251e:	4a04      	ldr	r2, [pc, #16]	@ (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	60d3      	str	r3, [r2, #12]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <__NVIC_GetPriorityGrouping+0x18>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	f003 0307 	and.w	r3, r3, #7
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	2b00      	cmp	r3, #0
 8002560:	db0b      	blt.n	800257a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4907      	ldr	r1, [pc, #28]	@ (8002588 <__NVIC_EnableIRQ+0x38>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2001      	movs	r0, #1
 8002572:	fa00 f202 	lsl.w	r2, r0, r2
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e100 	.word	0xe000e100

0800258c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db0a      	blt.n	80025b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	490c      	ldr	r1, [pc, #48]	@ (80025d8 <__NVIC_SetPriority+0x4c>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	440b      	add	r3, r1
 80025b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b4:	e00a      	b.n	80025cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4908      	ldr	r1, [pc, #32]	@ (80025dc <__NVIC_SetPriority+0x50>)
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3b04      	subs	r3, #4
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	440b      	add	r3, r1
 80025ca:	761a      	strb	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f1c3 0307 	rsb	r3, r3, #7
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	bf28      	it	cs
 80025fe:	2304      	movcs	r3, #4
 8002600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3304      	adds	r3, #4
 8002606:	2b06      	cmp	r3, #6
 8002608:	d902      	bls.n	8002610 <NVIC_EncodePriority+0x30>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3b03      	subs	r3, #3
 800260e:	e000      	b.n	8002612 <NVIC_EncodePriority+0x32>
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	401a      	ands	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43d9      	mvns	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	4313      	orrs	r3, r2
         );
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	@ 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002658:	d301      	bcc.n	800265e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265a:	2301      	movs	r3, #1
 800265c:	e00f      	b.n	800267e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265e:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <SysTick_Config+0x40>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002666:	210f      	movs	r1, #15
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f7ff ff8e 	bl	800258c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <SysTick_Config+0x40>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002676:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <SysTick_Config+0x40>)
 8002678:	2207      	movs	r2, #7
 800267a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	e000e010 	.word	0xe000e010

0800268c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff29 	bl	80024ec <__NVIC_SetPriorityGrouping>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b4:	f7ff ff3e 	bl	8002534 <__NVIC_GetPriorityGrouping>
 80026b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7ff ff8e 	bl	80025e0 <NVIC_EncodePriority>
 80026c4:	4602      	mov	r2, r0
 80026c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff5d 	bl	800258c <__NVIC_SetPriority>
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff31 	bl	8002550 <__NVIC_EnableIRQ>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffa2 	bl	8002648 <SysTick_Config>
 8002704:	4603      	mov	r3, r0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e014      	b.n	800274a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	791b      	ldrb	r3, [r3, #4]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff fb6b 	bl	8001e0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0a2      	b.n	80028b6 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	795b      	ldrb	r3, [r3, #5]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_DAC_Start_DMA+0x28>
 8002778:	2302      	movs	r3, #2
 800277a:	e09c      	b.n	80028b6 <HAL_DAC_Start_DMA+0x162>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2202      	movs	r2, #2
 8002786:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d129      	bne.n	80027e2 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	4a4b      	ldr	r2, [pc, #300]	@ (80028c0 <HAL_DAC_Start_DMA+0x16c>)
 8002794:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	4a4a      	ldr	r2, [pc, #296]	@ (80028c4 <HAL_DAC_Start_DMA+0x170>)
 800279c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4a49      	ldr	r2, [pc, #292]	@ (80028c8 <HAL_DAC_Start_DMA+0x174>)
 80027a4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_DAC_Start_DMA+0x70>
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d005      	beq.n	80027ce <HAL_DAC_Start_DMA+0x7a>
 80027c2:	e009      	b.n	80027d8 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3308      	adds	r3, #8
 80027ca:	613b      	str	r3, [r7, #16]
        break;
 80027cc:	e033      	b.n	8002836 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	613b      	str	r3, [r7, #16]
        break;
 80027d6:	e02e      	b.n	8002836 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3310      	adds	r3, #16
 80027de:	613b      	str	r3, [r7, #16]
        break;
 80027e0:	e029      	b.n	8002836 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4a39      	ldr	r2, [pc, #228]	@ (80028cc <HAL_DAC_Start_DMA+0x178>)
 80027e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4a38      	ldr	r2, [pc, #224]	@ (80028d0 <HAL_DAC_Start_DMA+0x17c>)
 80027f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4a37      	ldr	r2, [pc, #220]	@ (80028d4 <HAL_DAC_Start_DMA+0x180>)
 80027f8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002808:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_DAC_Start_DMA+0xc4>
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d005      	beq.n	8002822 <HAL_DAC_Start_DMA+0xce>
 8002816:	e009      	b.n	800282c <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3314      	adds	r3, #20
 800281e:	613b      	str	r3, [r7, #16]
        break;
 8002820:	e009      	b.n	8002836 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3318      	adds	r3, #24
 8002828:	613b      	str	r3, [r7, #16]
        break;
 800282a:	e004      	b.n	8002836 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	331c      	adds	r3, #28
 8002832:	613b      	str	r3, [r7, #16]
        break;
 8002834:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d111      	bne.n	8002860 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800284a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6898      	ldr	r0, [r3, #8]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	f000 f9e5 	bl	8002c24 <HAL_DMA_Start_IT>
 800285a:	4603      	mov	r3, r0
 800285c:	75fb      	strb	r3, [r7, #23]
 800285e:	e010      	b.n	8002882 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800286e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	68d8      	ldr	r0, [r3, #12]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	f000 f9d3 	bl	8002c24 <HAL_DMA_Start_IT>
 800287e:	4603      	mov	r3, r0
 8002880:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10c      	bne.n	80028a8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6819      	ldr	r1, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2201      	movs	r2, #1
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e005      	b.n	80028b4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f043 0204 	orr.w	r2, r3, #4
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	080029b3 	.word	0x080029b3
 80028c4:	080029d5 	.word	0x080029d5
 80028c8:	080029f1 	.word	0x080029f1
 80028cc:	08002a5b 	.word	0x08002a5b
 80028d0:	08002a7d 	.word	0x08002a7d
 80028d4:	08002a99 	.word	0x08002a99

080028d8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	@ 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_DAC_ConfigChannel+0x1c>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e042      	b.n	80029a6 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	795b      	ldrb	r3, [r3, #5]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_DAC_ConfigChannel+0x2c>
 8002928:	2302      	movs	r3, #2
 800292a:	e03c      	b.n	80029a6 <HAL_DAC_ConfigChannel+0xa6>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2202      	movs	r2, #2
 8002936:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	22c0      	movs	r2, #192	@ 0xc0
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	400a      	ands	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80029a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff ff89 	bl	80028d8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	711a      	strb	r2, [r3, #4]
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7fe fbc0 	bl	8001168 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f043 0204 	orr.w	r2, r3, #4
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f7ff ff6e 	bl	80028ec <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	711a      	strb	r2, [r3, #4]
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a66:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff ffd8 	bl	8002a1e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	711a      	strb	r2, [r3, #4]
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a88:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff ffd1 	bl	8002a32 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7ff ffc7 	bl	8002a46 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	711a      	strb	r2, [r3, #4]
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff fcda 	bl	800248c <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e099      	b.n	8002c18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b04:	e00f      	b.n	8002b26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b06:	f7ff fcc1 	bl	800248c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d908      	bls.n	8002b26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e078      	b.n	8002c18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e8      	bne.n	8002b06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4b38      	ldr	r3, [pc, #224]	@ (8002c20 <HAL_DMA_Init+0x158>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d107      	bne.n	8002b90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f023 0307 	bic.w	r3, r3, #7
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d117      	bne.n	8002bea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00e      	beq.n	8002bea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fb01 	bl	80031d4 <DMA_CheckFifoParam>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2240      	movs	r2, #64	@ 0x40
 8002bdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002be6:	2301      	movs	r3, #1
 8002be8:	e016      	b.n	8002c18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fab8 	bl	8003168 <DMA_CalcBaseAndBitshift>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	223f      	movs	r2, #63	@ 0x3f
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	f010803f 	.word	0xf010803f

08002c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_Start_IT+0x26>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e040      	b.n	8002ccc <HAL_DMA_Start_IT+0xa8>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d12f      	bne.n	8002cbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fa4a 	bl	800310c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	223f      	movs	r2, #63	@ 0x3f
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0216 	orr.w	r2, r2, #22
 8002c92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0208 	orr.w	r2, r2, #8
 8002caa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e005      	b.n	8002cca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ce2:	f7ff fbd3 	bl	800248c <HAL_GetTick>
 8002ce6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d008      	beq.n	8002d06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2280      	movs	r2, #128	@ 0x80
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e052      	b.n	8002dac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0216 	bic.w	r2, r2, #22
 8002d14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <HAL_DMA_Abort+0x62>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0208 	bic.w	r2, r2, #8
 8002d44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d56:	e013      	b.n	8002d80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d58:	f7ff fb98 	bl	800248c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d90c      	bls.n	8002d80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e015      	b.n	8002dac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e4      	bne.n	8002d58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d92:	223f      	movs	r2, #63	@ 0x3f
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2280      	movs	r2, #128	@ 0x80
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00c      	b.n	8002dec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2205      	movs	r2, #5
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e04:	4b8e      	ldr	r3, [pc, #568]	@ (8003040 <HAL_DMA_IRQHandler+0x248>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a8e      	ldr	r2, [pc, #568]	@ (8003044 <HAL_DMA_IRQHandler+0x24c>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0a9b      	lsrs	r3, r3, #10
 8002e10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	2208      	movs	r2, #8
 8002e24:	409a      	lsls	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01a      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0204 	bic.w	r2, r2, #4
 8002e4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e50:	2208      	movs	r2, #8
 8002e52:	409a      	lsls	r2, r3
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e68:	2201      	movs	r2, #1
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d012      	beq.n	8002e9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e86:	2201      	movs	r2, #1
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e92:	f043 0202 	orr.w	r2, r3, #2
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d012      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d043      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d03c      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef2:	2210      	movs	r2, #16
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d018      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d108      	bne.n	8002f28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d024      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
 8002f26:	e01f      	b.n	8002f68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01b      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	4798      	blx	r3
 8002f38:	e016      	b.n	8002f68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0208 	bic.w	r2, r2, #8
 8002f56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 808f 	beq.w	8003098 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8087 	beq.w	8003098 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8e:	2220      	movs	r2, #32
 8002f90:	409a      	lsls	r2, r3
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d136      	bne.n	8003010 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0216 	bic.w	r2, r2, #22
 8002fb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d103      	bne.n	8002fd2 <HAL_DMA_IRQHandler+0x1da>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0208 	bic.w	r2, r2, #8
 8002fe0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe6:	223f      	movs	r2, #63	@ 0x3f
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003002:	2b00      	cmp	r3, #0
 8003004:	d07e      	beq.n	8003104 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	4798      	blx	r3
        }
        return;
 800300e:	e079      	b.n	8003104 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01d      	beq.n	800305a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10d      	bne.n	8003048 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003030:	2b00      	cmp	r3, #0
 8003032:	d031      	beq.n	8003098 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	4798      	blx	r3
 800303c:	e02c      	b.n	8003098 <HAL_DMA_IRQHandler+0x2a0>
 800303e:	bf00      	nop
 8003040:	2000000c 	.word	0x2000000c
 8003044:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d023      	beq.n	8003098 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
 8003058:	e01e      	b.n	8003098 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10f      	bne.n	8003088 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0210 	bic.w	r2, r2, #16
 8003076:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309c:	2b00      	cmp	r3, #0
 800309e:	d032      	beq.n	8003106 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d022      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2205      	movs	r2, #5
 80030b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	3301      	adds	r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d307      	bcc.n	80030e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f2      	bne.n	80030c4 <HAL_DMA_IRQHandler+0x2cc>
 80030de:	e000      	b.n	80030e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
 8003102:	e000      	b.n	8003106 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003104:	bf00      	nop
    }
  }
}
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003128:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b40      	cmp	r3, #64	@ 0x40
 8003138:	d108      	bne.n	800314c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800314a:	e007      	b.n	800315c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	3b10      	subs	r3, #16
 8003178:	4a14      	ldr	r2, [pc, #80]	@ (80031cc <DMA_CalcBaseAndBitshift+0x64>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003182:	4a13      	ldr	r2, [pc, #76]	@ (80031d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d909      	bls.n	80031aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800319e:	f023 0303 	bic.w	r3, r3, #3
 80031a2:	1d1a      	adds	r2, r3, #4
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80031a8:	e007      	b.n	80031ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	aaaaaaab 	.word	0xaaaaaaab
 80031d0:	0800bc74 	.word	0x0800bc74

080031d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d11f      	bne.n	800322e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d856      	bhi.n	80032a2 <DMA_CheckFifoParam+0xce>
 80031f4:	a201      	add	r2, pc, #4	@ (adr r2, 80031fc <DMA_CheckFifoParam+0x28>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	0800320d 	.word	0x0800320d
 8003200:	0800321f 	.word	0x0800321f
 8003204:	0800320d 	.word	0x0800320d
 8003208:	080032a3 	.word	0x080032a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d046      	beq.n	80032a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800321c:	e043      	b.n	80032a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003226:	d140      	bne.n	80032aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322c:	e03d      	b.n	80032aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003236:	d121      	bne.n	800327c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b03      	cmp	r3, #3
 800323c:	d837      	bhi.n	80032ae <DMA_CheckFifoParam+0xda>
 800323e:	a201      	add	r2, pc, #4	@ (adr r2, 8003244 <DMA_CheckFifoParam+0x70>)
 8003240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003244:	08003255 	.word	0x08003255
 8003248:	0800325b 	.word	0x0800325b
 800324c:	08003255 	.word	0x08003255
 8003250:	0800326d 	.word	0x0800326d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      break;
 8003258:	e030      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d025      	beq.n	80032b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800326a:	e022      	b.n	80032b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003274:	d11f      	bne.n	80032b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800327a:	e01c      	b.n	80032b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d903      	bls.n	800328a <DMA_CheckFifoParam+0xb6>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b03      	cmp	r3, #3
 8003286:	d003      	beq.n	8003290 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003288:	e018      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
      break;
 800328e:	e015      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      break;
 80032a0:	e00b      	b.n	80032ba <DMA_CheckFifoParam+0xe6>
      break;
 80032a2:	bf00      	nop
 80032a4:	e00a      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;
 80032a6:	bf00      	nop
 80032a8:	e008      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;
 80032aa:	bf00      	nop
 80032ac:	e006      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;
 80032ae:	bf00      	nop
 80032b0:	e004      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;
 80032b2:	bf00      	nop
 80032b4:	e002      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;   
 80032b6:	bf00      	nop
 80032b8:	e000      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;
 80032ba:	bf00      	nop
    }
  } 
  
  return status; 
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop

080032cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	@ 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	e16b      	b.n	80035c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032e8:	2201      	movs	r2, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	429a      	cmp	r2, r3
 8003302:	f040 815a 	bne.w	80035ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d005      	beq.n	800331e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331a:	2b02      	cmp	r3, #2
 800331c:	d130      	bne.n	8003380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	2203      	movs	r2, #3
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003354:	2201      	movs	r2, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 0201 	and.w	r2, r3, #1
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b03      	cmp	r3, #3
 800338a:	d017      	beq.n	80033bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d123      	bne.n	8003410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	08da      	lsrs	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3208      	adds	r2, #8
 80033d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	220f      	movs	r2, #15
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	08da      	lsrs	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3208      	adds	r2, #8
 800340a:	69b9      	ldr	r1, [r7, #24]
 800340c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0203 	and.w	r2, r3, #3
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80b4 	beq.w	80035ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b60      	ldr	r3, [pc, #384]	@ (80035d8 <HAL_GPIO_Init+0x30c>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	4a5f      	ldr	r2, [pc, #380]	@ (80035d8 <HAL_GPIO_Init+0x30c>)
 800345c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003460:	6453      	str	r3, [r2, #68]	@ 0x44
 8003462:	4b5d      	ldr	r3, [pc, #372]	@ (80035d8 <HAL_GPIO_Init+0x30c>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800346e:	4a5b      	ldr	r2, [pc, #364]	@ (80035dc <HAL_GPIO_Init+0x310>)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a52      	ldr	r2, [pc, #328]	@ (80035e0 <HAL_GPIO_Init+0x314>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02b      	beq.n	80034f2 <HAL_GPIO_Init+0x226>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a51      	ldr	r2, [pc, #324]	@ (80035e4 <HAL_GPIO_Init+0x318>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d025      	beq.n	80034ee <HAL_GPIO_Init+0x222>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a50      	ldr	r2, [pc, #320]	@ (80035e8 <HAL_GPIO_Init+0x31c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01f      	beq.n	80034ea <HAL_GPIO_Init+0x21e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4f      	ldr	r2, [pc, #316]	@ (80035ec <HAL_GPIO_Init+0x320>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d019      	beq.n	80034e6 <HAL_GPIO_Init+0x21a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4e      	ldr	r2, [pc, #312]	@ (80035f0 <HAL_GPIO_Init+0x324>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_GPIO_Init+0x216>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4d      	ldr	r2, [pc, #308]	@ (80035f4 <HAL_GPIO_Init+0x328>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00d      	beq.n	80034de <HAL_GPIO_Init+0x212>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4c      	ldr	r2, [pc, #304]	@ (80035f8 <HAL_GPIO_Init+0x32c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <HAL_GPIO_Init+0x20e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4b      	ldr	r2, [pc, #300]	@ (80035fc <HAL_GPIO_Init+0x330>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_GPIO_Init+0x20a>
 80034d2:	2307      	movs	r3, #7
 80034d4:	e00e      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034d6:	2308      	movs	r3, #8
 80034d8:	e00c      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034da:	2306      	movs	r3, #6
 80034dc:	e00a      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034de:	2305      	movs	r3, #5
 80034e0:	e008      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034e6:	2303      	movs	r3, #3
 80034e8:	e004      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e002      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034f2:	2300      	movs	r3, #0
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	f002 0203 	and.w	r2, r2, #3
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	4093      	lsls	r3, r2
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003504:	4935      	ldr	r1, [pc, #212]	@ (80035dc <HAL_GPIO_Init+0x310>)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	3302      	adds	r3, #2
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003512:	4b3b      	ldr	r3, [pc, #236]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003536:	4a32      	ldr	r2, [pc, #200]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800353c:	4b30      	ldr	r3, [pc, #192]	@ (8003600 <HAL_GPIO_Init+0x334>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003560:	4a27      	ldr	r2, [pc, #156]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003566:	4b26      	ldr	r3, [pc, #152]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800358a:	4a1d      	ldr	r2, [pc, #116]	@ (8003600 <HAL_GPIO_Init+0x334>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003590:	4b1b      	ldr	r3, [pc, #108]	@ (8003600 <HAL_GPIO_Init+0x334>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035b4:	4a12      	ldr	r2, [pc, #72]	@ (8003600 <HAL_GPIO_Init+0x334>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3301      	adds	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b0f      	cmp	r3, #15
 80035c4:	f67f ae90 	bls.w	80032e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3724      	adds	r7, #36	@ 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40013800 	.word	0x40013800
 80035e0:	40020000 	.word	0x40020000
 80035e4:	40020400 	.word	0x40020400
 80035e8:	40020800 	.word	0x40020800
 80035ec:	40020c00 	.word	0x40020c00
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40021400 	.word	0x40021400
 80035f8:	40021800 	.word	0x40021800
 80035fc:	40021c00 	.word	0x40021c00
 8003600:	40013c00 	.word	0x40013c00

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003620:	e003      	b.n	800362a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	619a      	str	r2, [r3, #24]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e267      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d075      	beq.n	8003742 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003656:	4b88      	ldr	r3, [pc, #544]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b04      	cmp	r3, #4
 8003660:	d00c      	beq.n	800367c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003662:	4b85      	ldr	r3, [pc, #532]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800366a:	2b08      	cmp	r3, #8
 800366c:	d112      	bne.n	8003694 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366e:	4b82      	ldr	r3, [pc, #520]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003676:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800367a:	d10b      	bne.n	8003694 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367c:	4b7e      	ldr	r3, [pc, #504]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d05b      	beq.n	8003740 <HAL_RCC_OscConfig+0x108>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d157      	bne.n	8003740 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e242      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800369c:	d106      	bne.n	80036ac <HAL_RCC_OscConfig+0x74>
 800369e:	4b76      	ldr	r3, [pc, #472]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a75      	ldr	r2, [pc, #468]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e01d      	b.n	80036e8 <HAL_RCC_OscConfig+0xb0>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x98>
 80036b6:	4b70      	ldr	r3, [pc, #448]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0xb0>
 80036d0:	4b69      	ldr	r3, [pc, #420]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a68      	ldr	r2, [pc, #416]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b66      	ldr	r3, [pc, #408]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a65      	ldr	r2, [pc, #404]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe fecc 	bl	800248c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fe fec8 	bl	800248c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	@ 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e207      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b5b      	ldr	r3, [pc, #364]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0xc0>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe feb8 	bl	800248c <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fe feb4 	bl	800248c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	@ 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1f3      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	4b51      	ldr	r3, [pc, #324]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0xe8>
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d063      	beq.n	8003816 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800374e:	4b4a      	ldr	r3, [pc, #296]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375a:	4b47      	ldr	r3, [pc, #284]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003762:	2b08      	cmp	r3, #8
 8003764:	d11c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003766:	4b44      	ldr	r3, [pc, #272]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	4b41      	ldr	r3, [pc, #260]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x152>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1c7      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b3b      	ldr	r3, [pc, #236]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4937      	ldr	r1, [pc, #220]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	e03a      	b.n	8003816 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d020      	beq.n	80037ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a8:	4b34      	ldr	r3, [pc, #208]	@ (800387c <HAL_RCC_OscConfig+0x244>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7fe fe6d 	bl	800248c <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b6:	f7fe fe69 	bl	800248c <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e1a8      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d4:	4b28      	ldr	r3, [pc, #160]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4925      	ldr	r1, [pc, #148]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
 80037e8:	e015      	b.n	8003816 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ea:	4b24      	ldr	r3, [pc, #144]	@ (800387c <HAL_RCC_OscConfig+0x244>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fe fe4c 	bl	800248c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f8:	f7fe fe48 	bl	800248c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e187      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d036      	beq.n	8003890 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d016      	beq.n	8003858 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382a:	4b15      	ldr	r3, [pc, #84]	@ (8003880 <HAL_RCC_OscConfig+0x248>)
 800382c:	2201      	movs	r2, #1
 800382e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fe fe2c 	bl	800248c <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003838:	f7fe fe28 	bl	800248c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e167      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	4b0b      	ldr	r3, [pc, #44]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x200>
 8003856:	e01b      	b.n	8003890 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <HAL_RCC_OscConfig+0x248>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385e:	f7fe fe15 	bl	800248c <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	e00e      	b.n	8003884 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003866:	f7fe fe11 	bl	800248c <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d907      	bls.n	8003884 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e150      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
 8003878:	40023800 	.word	0x40023800
 800387c:	42470000 	.word	0x42470000
 8003880:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003884:	4b88      	ldr	r3, [pc, #544]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ea      	bne.n	8003866 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8097 	beq.w	80039cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389e:	2300      	movs	r3, #0
 80038a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a2:	4b81      	ldr	r3, [pc, #516]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	4b7d      	ldr	r3, [pc, #500]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	4a7c      	ldr	r2, [pc, #496]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038be:	4b7a      	ldr	r3, [pc, #488]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	4b77      	ldr	r3, [pc, #476]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d118      	bne.n	800390c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038da:	4b74      	ldr	r3, [pc, #464]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a73      	ldr	r2, [pc, #460]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e6:	f7fe fdd1 	bl	800248c <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ee:	f7fe fdcd 	bl	800248c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e10c      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	4b6a      	ldr	r3, [pc, #424]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x2ea>
 8003914:	4b64      	ldr	r3, [pc, #400]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003918:	4a63      	ldr	r2, [pc, #396]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003920:	e01c      	b.n	800395c <HAL_RCC_OscConfig+0x324>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b05      	cmp	r3, #5
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x30c>
 800392a:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392e:	4a5e      	ldr	r2, [pc, #376]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003930:	f043 0304 	orr.w	r3, r3, #4
 8003934:	6713      	str	r3, [r2, #112]	@ 0x70
 8003936:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393a:	4a5b      	ldr	r2, [pc, #364]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6713      	str	r3, [r2, #112]	@ 0x70
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0x324>
 8003944:	4b58      	ldr	r3, [pc, #352]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003948:	4a57      	ldr	r2, [pc, #348]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003950:	4b55      	ldr	r3, [pc, #340]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	4a54      	ldr	r2, [pc, #336]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003956:	f023 0304 	bic.w	r3, r3, #4
 800395a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d015      	beq.n	8003990 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fe fd92 	bl	800248c <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	e00a      	b.n	8003982 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7fe fd8e 	bl	800248c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e0cb      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003982:	4b49      	ldr	r3, [pc, #292]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ee      	beq.n	800396c <HAL_RCC_OscConfig+0x334>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003990:	f7fe fd7c 	bl	800248c <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003996:	e00a      	b.n	80039ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7fe fd78 	bl	800248c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0b5      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ae:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ee      	bne.n	8003998 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c0:	4b39      	ldr	r3, [pc, #228]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	4a38      	ldr	r2, [pc, #224]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80a1 	beq.w	8003b18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039d6:	4b34      	ldr	r3, [pc, #208]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d05c      	beq.n	8003a9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d141      	bne.n	8003a6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b31      	ldr	r3, [pc, #196]	@ (8003ab0 <HAL_RCC_OscConfig+0x478>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fe fd4c 	bl	800248c <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe fd48 	bl	800248c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e087      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	4b27      	ldr	r3, [pc, #156]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	491b      	ldr	r1, [pc, #108]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a40:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <HAL_RCC_OscConfig+0x478>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a46:	f7fe fd21 	bl	800248c <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7fe fd1d 	bl	800248c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e05c      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a60:	4b11      	ldr	r3, [pc, #68]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x416>
 8003a6c:	e054      	b.n	8003b18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6e:	4b10      	ldr	r3, [pc, #64]	@ (8003ab0 <HAL_RCC_OscConfig+0x478>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fe fd0a 	bl	800248c <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fe fd06 	bl	800248c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e045      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x444>
 8003a9a:	e03d      	b.n	8003b18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e038      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40007000 	.word	0x40007000
 8003ab0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_RCC_OscConfig+0x4ec>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d028      	beq.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d121      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d11a      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d111      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	3b01      	subs	r3, #1
 8003afe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0cc      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b68      	ldr	r3, [pc, #416]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d90c      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b65      	ldr	r3, [pc, #404]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b63      	ldr	r3, [pc, #396]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0b8      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b7c:	4b59      	ldr	r3, [pc, #356]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a58      	ldr	r2, [pc, #352]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b94:	4b53      	ldr	r3, [pc, #332]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a52      	ldr	r2, [pc, #328]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b50      	ldr	r3, [pc, #320]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	494d      	ldr	r1, [pc, #308]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d044      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d119      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d003      	beq.n	8003be6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e06f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e067      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c06:	4b37      	ldr	r3, [pc, #220]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f023 0203 	bic.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4934      	ldr	r1, [pc, #208]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c18:	f7fe fc38 	bl	800248c <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c20:	f7fe fc34 	bl	800248c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e04f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 020c 	and.w	r2, r3, #12
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d1eb      	bne.n	8003c20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c48:	4b25      	ldr	r3, [pc, #148]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d20c      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b22      	ldr	r3, [pc, #136]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e032      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4916      	ldr	r1, [pc, #88]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	490e      	ldr	r1, [pc, #56]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cae:	f000 f821 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	490a      	ldr	r1, [pc, #40]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	5ccb      	ldrb	r3, [r1, r3]
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	4a09      	ldr	r2, [pc, #36]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cca:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fb98 	bl	8002404 <HAL_InitTick>

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023c00 	.word	0x40023c00
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	0800bc5c 	.word	0x0800bc5c
 8003cec:	2000000c 	.word	0x2000000c
 8003cf0:	20000010 	.word	0x20000010

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf8:	b094      	sub	sp, #80	@ 0x50
 8003cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d0c:	4b79      	ldr	r3, [pc, #484]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d00d      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x40>
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	f200 80e1 	bhi.w	8003ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x34>
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d26:	e0db      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b73      	ldr	r3, [pc, #460]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d2c:	e0db      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d2e:	4b73      	ldr	r3, [pc, #460]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x208>)
 8003d30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d32:	e0d8      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d34:	4b6f      	ldr	r3, [pc, #444]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d063      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	2200      	movs	r2, #0
 8003d52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d5e:	2300      	movs	r3, #0
 8003d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	f04f 0000 	mov.w	r0, #0
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	0159      	lsls	r1, r3, #5
 8003d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d78:	0150      	lsls	r0, r2, #5
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4621      	mov	r1, r4
 8003d80:	1a51      	subs	r1, r2, r1
 8003d82:	6139      	str	r1, [r7, #16]
 8003d84:	4629      	mov	r1, r5
 8003d86:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d98:	4659      	mov	r1, fp
 8003d9a:	018b      	lsls	r3, r1, #6
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003da2:	4651      	mov	r1, sl
 8003da4:	018a      	lsls	r2, r1, #6
 8003da6:	4651      	mov	r1, sl
 8003da8:	ebb2 0801 	subs.w	r8, r2, r1
 8003dac:	4659      	mov	r1, fp
 8003dae:	eb63 0901 	sbc.w	r9, r3, r1
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dc6:	4690      	mov	r8, r2
 8003dc8:	4699      	mov	r9, r3
 8003dca:	4623      	mov	r3, r4
 8003dcc:	eb18 0303 	adds.w	r3, r8, r3
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	462b      	mov	r3, r5
 8003dd4:	eb49 0303 	adc.w	r3, r9, r3
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003de6:	4629      	mov	r1, r5
 8003de8:	024b      	lsls	r3, r1, #9
 8003dea:	4621      	mov	r1, r4
 8003dec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003df0:	4621      	mov	r1, r4
 8003df2:	024a      	lsls	r2, r1, #9
 8003df4:	4610      	mov	r0, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e04:	f7fc f9e0 	bl	80001c8 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e10:	e058      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e12:	4b38      	ldr	r3, [pc, #224]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e22:	623b      	str	r3, [r7, #32]
 8003e24:	2300      	movs	r3, #0
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	f04f 0000 	mov.w	r0, #0
 8003e34:	f04f 0100 	mov.w	r1, #0
 8003e38:	0159      	lsls	r1, r3, #5
 8003e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e3e:	0150      	lsls	r0, r2, #5
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4641      	mov	r1, r8
 8003e46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e64:	ebb2 040a 	subs.w	r4, r2, sl
 8003e68:	eb63 050b 	sbc.w	r5, r3, fp
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	00eb      	lsls	r3, r5, #3
 8003e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e7a:	00e2      	lsls	r2, r4, #3
 8003e7c:	4614      	mov	r4, r2
 8003e7e:	461d      	mov	r5, r3
 8003e80:	4643      	mov	r3, r8
 8003e82:	18e3      	adds	r3, r4, r3
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	464b      	mov	r3, r9
 8003e88:	eb45 0303 	adc.w	r3, r5, r3
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	028b      	lsls	r3, r1, #10
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	028a      	lsls	r2, r1, #10
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	61fa      	str	r2, [r7, #28]
 8003eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb8:	f7fc f986 	bl	80001c8 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ed4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ede:	e002      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3750      	adds	r7, #80	@ 0x50
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	00f42400 	.word	0x00f42400
 8003efc:	007a1200 	.word	0x007a1200

08003f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f04:	4b03      	ldr	r3, [pc, #12]	@ (8003f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f06:	681b      	ldr	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	2000000c 	.word	0x2000000c

08003f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f1c:	f7ff fff0 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	0a9b      	lsrs	r3, r3, #10
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4903      	ldr	r1, [pc, #12]	@ (8003f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	0800bc6c 	.word	0x0800bc6c

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f44:	f7ff ffdc 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b05      	ldr	r3, [pc, #20]	@ (8003f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0b5b      	lsrs	r3, r3, #13
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4903      	ldr	r1, [pc, #12]	@ (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40023800 	.word	0x40023800
 8003f64:	0800bc6c 	.word	0x0800bc6c

08003f68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e022      	b.n	8003fc0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d105      	bne.n	8003f92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7fd ffb7 	bl	8001f00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2203      	movs	r2, #3
 8003f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f814 	bl	8003fc8 <HAL_SD_InitCard>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e00a      	b.n	8003fc0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003fc8:	b5b0      	push	{r4, r5, r7, lr}
 8003fca:	b08e      	sub	sp, #56	@ 0x38
 8003fcc:	af04      	add	r7, sp, #16
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003fe4:	2376      	movs	r3, #118	@ 0x76
 8003fe6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681d      	ldr	r5, [r3, #0]
 8003fec:	466c      	mov	r4, sp
 8003fee:	f107 0314 	add.w	r3, r7, #20
 8003ff2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ffa:	f107 0308 	add.w	r3, r7, #8
 8003ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004000:	4628      	mov	r0, r5
 8004002:	f003 fb59 	bl	80076b8 <SDIO_Init>
 8004006:	4603      	mov	r3, r0
 8004008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800400c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e04f      	b.n	80040b8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004018:	4b29      	ldr	r3, [pc, #164]	@ (80040c0 <HAL_SD_InitCard+0xf8>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f003 fb91 	bl	800774a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004028:	4b25      	ldr	r3, [pc, #148]	@ (80040c0 <HAL_SD_InitCard+0xf8>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800402e:	2002      	movs	r0, #2
 8004030:	f7fe fa38 	bl	80024a4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fe79 	bl	8004d2c <SD_PowerON>
 800403a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00b      	beq.n	800405a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e02e      	b.n	80040b8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fd98 	bl	8004b90 <SD_InitCard>
 8004060:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00b      	beq.n	8004080 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e01b      	b.n	80040b8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004088:	4618      	mov	r0, r3
 800408a:	f003 fbf0 	bl	800786e <SDMMC_CmdBlockLength>
 800408e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00f      	beq.n	80040b6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a0a      	ldr	r2, [pc, #40]	@ (80040c4 <HAL_SD_InitCard+0xfc>)
 800409c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3728      	adds	r7, #40	@ 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bdb0      	pop	{r4, r5, r7, pc}
 80040c0:	422580a0 	.word	0x422580a0
 80040c4:	004005ff 	.word	0x004005ff

080040c8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b092      	sub	sp, #72	@ 0x48
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80040d6:	f7fe f9d9 	bl	800248c <HAL_GetTick>
 80040da:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d107      	bne.n	80040fa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e1c5      	b.n	8004486 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	f040 81b8 	bne.w	8004478 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800410e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	441a      	add	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004118:	429a      	cmp	r2, r3
 800411a:	d907      	bls.n	800412c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e1ac      	b.n	8004486 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2203      	movs	r2, #3
 8004130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2200      	movs	r2, #0
 800413a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004140:	2b01      	cmp	r3, #1
 8004142:	d002      	beq.n	800414a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004146:	025b      	lsls	r3, r3, #9
 8004148:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800414a:	f04f 33ff 	mov.w	r3, #4294967295
 800414e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	025b      	lsls	r3, r3, #9
 8004154:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004156:	2390      	movs	r3, #144	@ 0x90
 8004158:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800415a:	2302      	movs	r3, #2
 800415c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004162:	2301      	movs	r3, #1
 8004164:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f107 0214 	add.w	r2, r7, #20
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f003 fb50 	bl	8007816 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d90a      	bls.n	8004192 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2202      	movs	r2, #2
 8004180:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004188:	4618      	mov	r0, r3
 800418a:	f003 fbb4 	bl	80078f6 <SDMMC_CmdReadMultiBlock>
 800418e:	6478      	str	r0, [r7, #68]	@ 0x44
 8004190:	e009      	b.n	80041a6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800419e:	4618      	mov	r0, r3
 80041a0:	f003 fb87 	bl	80078b2 <SDMMC_CmdReadSingleBlock>
 80041a4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80041a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d012      	beq.n	80041d2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a7e      	ldr	r2, [pc, #504]	@ (80043ac <HAL_SD_ReadBlocks+0x2e4>)
 80041b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e159      	b.n	8004486 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80041d6:	e061      	b.n	800429c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d03c      	beq.n	8004260 <HAL_SD_ReadBlocks+0x198>
 80041e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d039      	beq.n	8004260 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80041f0:	e033      	b.n	800425a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f003 fa89 	bl	800770e <SDIO_ReadFIFO>
 80041fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80041fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004200:	b2da      	uxtb	r2, r3
 8004202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004204:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	3301      	adds	r3, #1
 800420a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800420c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800420e:	3b01      	subs	r3, #1
 8004210:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004214:	0a1b      	lsrs	r3, r3, #8
 8004216:	b2da      	uxtb	r2, r3
 8004218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	3301      	adds	r3, #1
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004224:	3b01      	subs	r3, #1
 8004226:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422a:	0c1b      	lsrs	r3, r3, #16
 800422c:	b2da      	uxtb	r2, r3
 800422e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004230:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004234:	3301      	adds	r3, #1
 8004236:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800423a:	3b01      	subs	r3, #1
 800423c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800423e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004240:	0e1b      	lsrs	r3, r3, #24
 8004242:	b2da      	uxtb	r2, r3
 8004244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004246:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800424a:	3301      	adds	r3, #1
 800424c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800424e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004250:	3b01      	subs	r3, #1
 8004252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8004254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004256:	3301      	adds	r3, #1
 8004258:	643b      	str	r3, [r7, #64]	@ 0x40
 800425a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800425c:	2b07      	cmp	r3, #7
 800425e:	d9c8      	bls.n	80041f2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004260:	f7fe f914 	bl	800248c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800426c:	429a      	cmp	r2, r3
 800426e:	d902      	bls.n	8004276 <HAL_SD_ReadBlocks+0x1ae>
 8004270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004272:	2b00      	cmp	r3, #0
 8004274:	d112      	bne.n	800429c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a4c      	ldr	r2, [pc, #304]	@ (80043ac <HAL_SD_ReadBlocks+0x2e4>)
 800427c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e0f4      	b.n	8004486 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042a2:	f240 332a 	movw	r3, #810	@ 0x32a
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d095      	beq.n	80041d8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d022      	beq.n	8004300 <HAL_SD_ReadBlocks+0x238>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d91f      	bls.n	8004300 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d01b      	beq.n	8004300 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f003 fb79 	bl	80079c4 <SDMMC_CmdStopTransfer>
 80042d2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80042d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d012      	beq.n	8004300 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a33      	ldr	r2, [pc, #204]	@ (80043ac <HAL_SD_ReadBlocks+0x2e4>)
 80042e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0c2      	b.n	8004486 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_SD_ReadBlocks+0x254>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004318:	2b00      	cmp	r3, #0
 800431a:	d012      	beq.n	8004342 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a22      	ldr	r2, [pc, #136]	@ (80043ac <HAL_SD_ReadBlocks+0x2e4>)
 8004322:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	f043 0208 	orr.w	r2, r3, #8
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e0a1      	b.n	8004486 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d012      	beq.n	8004376 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a15      	ldr	r2, [pc, #84]	@ (80043ac <HAL_SD_ReadBlocks+0x2e4>)
 8004356:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	f043 0202 	orr.w	r2, r3, #2
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e087      	b.n	8004486 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d064      	beq.n	800444e <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a08      	ldr	r2, [pc, #32]	@ (80043ac <HAL_SD_ReadBlocks+0x2e4>)
 800438a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e06d      	b.n	8004486 <HAL_SD_ReadBlocks+0x3be>
 80043aa:	bf00      	nop
 80043ac:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f003 f9aa 	bl	800770e <SDIO_ReadFIFO>
 80043ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80043bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80043c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c6:	3301      	adds	r3, #1
 80043c8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80043ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043cc:	3b01      	subs	r3, #1
 80043ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80043d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80043da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043dc:	3301      	adds	r3, #1
 80043de:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80043e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e2:	3b01      	subs	r3, #1
 80043e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80043e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80043f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f2:	3301      	adds	r3, #1
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80043f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f8:	3b01      	subs	r3, #1
 80043fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fe:	0e1b      	lsrs	r3, r3, #24
 8004400:	b2da      	uxtb	r2, r3
 8004402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004404:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004408:	3301      	adds	r3, #1
 800440a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800440c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800440e:	3b01      	subs	r3, #1
 8004410:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004412:	f7fe f83b 	bl	800248c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800441e:	429a      	cmp	r2, r3
 8004420:	d902      	bls.n	8004428 <HAL_SD_ReadBlocks+0x360>
 8004422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004424:	2b00      	cmp	r3, #0
 8004426:	d112      	bne.n	800444e <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a18      	ldr	r2, [pc, #96]	@ (8004490 <HAL_SD_ReadBlocks+0x3c8>)
 800442e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004434:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e01b      	b.n	8004486 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_SD_ReadBlocks+0x39a>
 800445c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1a6      	bne.n	80043b0 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f240 523a 	movw	r2, #1338	@ 0x53a
 800446a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e006      	b.n	8004486 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3748      	adds	r7, #72	@ 0x48
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	004005ff 	.word	0x004005ff

08004494 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b092      	sub	sp, #72	@ 0x48
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80044a2:	f7fd fff3 	bl	800248c <HAL_GetTick>
 80044a6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d107      	bne.n	80044c6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e16d      	b.n	80047a2 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	f040 8160 	bne.w	8004794 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80044da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	441a      	add	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d907      	bls.n	80044f8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e154      	b.n	80047a2 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2203      	movs	r2, #3
 80044fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2200      	movs	r2, #0
 8004506:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450c:	2b01      	cmp	r3, #1
 800450e:	d002      	beq.n	8004516 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004512:	025b      	lsls	r3, r3, #9
 8004514:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295
 800451a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	025b      	lsls	r3, r3, #9
 8004520:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004522:	2390      	movs	r3, #144	@ 0x90
 8004524:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004526:	2300      	movs	r3, #0
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800452a:	2300      	movs	r3, #0
 800452c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800452e:	2301      	movs	r3, #1
 8004530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f107 0218 	add.w	r2, r7, #24
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f003 f96a 	bl	8007816 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d90a      	bls.n	800455e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004554:	4618      	mov	r0, r3
 8004556:	f003 fa12 	bl	800797e <SDMMC_CmdWriteMultiBlock>
 800455a:	6478      	str	r0, [r7, #68]	@ 0x44
 800455c:	e009      	b.n	8004572 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2210      	movs	r2, #16
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800456a:	4618      	mov	r0, r3
 800456c:	f003 f9e5 	bl	800793a <SDMMC_CmdWriteSingleBlock>
 8004570:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004574:	2b00      	cmp	r3, #0
 8004576:	d012      	beq.n	800459e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a8b      	ldr	r2, [pc, #556]	@ (80047ac <HAL_SD_WriteBlocks+0x318>)
 800457e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004586:	431a      	orrs	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e101      	b.n	80047a2 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80045a2:	e065      	b.n	8004670 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d040      	beq.n	8004634 <HAL_SD_WriteBlocks+0x1a0>
 80045b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d03d      	beq.n	8004634 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80045b8:	2300      	movs	r3, #0
 80045ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80045bc:	e037      	b.n	800462e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80045be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80045c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c6:	3301      	adds	r3, #1
 80045c8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80045ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045cc:	3b01      	subs	r3, #1
 80045ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80045d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	021a      	lsls	r2, r3, #8
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80045dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045de:	3301      	adds	r3, #1
 80045e0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80045e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e4:	3b01      	subs	r3, #1
 80045e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80045e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	041a      	lsls	r2, r3, #16
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80045f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f6:	3301      	adds	r3, #1
 80045f8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80045fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045fc:	3b01      	subs	r3, #1
 80045fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	061a      	lsls	r2, r3, #24
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	3301      	adds	r3, #1
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004614:	3b01      	subs	r3, #1
 8004616:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f107 0214 	add.w	r2, r7, #20
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f003 f880 	bl	8007728 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800462a:	3301      	adds	r3, #1
 800462c:	643b      	str	r3, [r7, #64]	@ 0x40
 800462e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004630:	2b07      	cmp	r3, #7
 8004632:	d9c4      	bls.n	80045be <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004634:	f7fd ff2a 	bl	800248c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004640:	429a      	cmp	r2, r3
 8004642:	d902      	bls.n	800464a <HAL_SD_WriteBlocks+0x1b6>
 8004644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004646:	2b00      	cmp	r3, #0
 8004648:	d112      	bne.n	8004670 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a57      	ldr	r2, [pc, #348]	@ (80047ac <HAL_SD_WriteBlocks+0x318>)
 8004650:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004658:	431a      	orrs	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e098      	b.n	80047a2 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004676:	f240 331a 	movw	r3, #794	@ 0x31a
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d091      	beq.n	80045a4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d022      	beq.n	80046d4 <HAL_SD_WriteBlocks+0x240>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d91f      	bls.n	80046d4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004698:	2b03      	cmp	r3, #3
 800469a:	d01b      	beq.n	80046d4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f003 f98f 	bl	80079c4 <SDMMC_CmdStopTransfer>
 80046a6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80046a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d012      	beq.n	80046d4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a3e      	ldr	r2, [pc, #248]	@ (80047ac <HAL_SD_WriteBlocks+0x318>)
 80046b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046bc:	431a      	orrs	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e066      	b.n	80047a2 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_SD_WriteBlocks+0x25c>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d012      	beq.n	8004716 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2d      	ldr	r2, [pc, #180]	@ (80047ac <HAL_SD_WriteBlocks+0x318>)
 80046f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fc:	f043 0208 	orr.w	r2, r3, #8
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e045      	b.n	80047a2 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d012      	beq.n	800474a <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a20      	ldr	r2, [pc, #128]	@ (80047ac <HAL_SD_WriteBlocks+0x318>)
 800472a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	f043 0202 	orr.w	r2, r3, #2
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e02b      	b.n	80047a2 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d012      	beq.n	800477e <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a13      	ldr	r2, [pc, #76]	@ (80047ac <HAL_SD_WriteBlocks+0x318>)
 800475e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004764:	f043 0210 	orr.w	r2, r3, #16
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e011      	b.n	80047a2 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004786:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	e006      	b.n	80047a2 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004798:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3748      	adds	r7, #72	@ 0x48
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	004005ff 	.word	0x004005ff

080047b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047be:	0f9b      	lsrs	r3, r3, #30
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ca:	0e9b      	lsrs	r3, r3, #26
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047dc:	0e1b      	lsrs	r3, r3, #24
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ee:	0c1b      	lsrs	r3, r3, #16
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004806:	b2da      	uxtb	r2, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004810:	0d1b      	lsrs	r3, r3, #20
 8004812:	b29a      	uxth	r2, r3
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	b2da      	uxtb	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800482e:	0bdb      	lsrs	r3, r3, #15
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	b2da      	uxtb	r2, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004840:	0b9b      	lsrs	r3, r3, #14
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	b2da      	uxtb	r2, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004852:	0b5b      	lsrs	r3, r3, #13
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	b2da      	uxtb	r2, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004864:	0b1b      	lsrs	r3, r3, #12
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	b2da      	uxtb	r2, r3
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2200      	movs	r2, #0
 8004876:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487c:	2b00      	cmp	r3, #0
 800487e:	d163      	bne.n	8004948 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004884:	009a      	lsls	r2, r3, #2
 8004886:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800488a:	4013      	ands	r3, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004890:	0f92      	lsrs	r2, r2, #30
 8004892:	431a      	orrs	r2, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800489c:	0edb      	lsrs	r3, r3, #27
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ae:	0e1b      	lsrs	r3, r3, #24
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048c0:	0d5b      	lsrs	r3, r3, #21
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048d2:	0c9b      	lsrs	r3, r3, #18
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048e4:	0bdb      	lsrs	r3, r3, #15
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	7e1b      	ldrb	r3, [r3, #24]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	3302      	adds	r3, #2
 8004908:	2201      	movs	r2, #1
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004912:	fb03 f202 	mul.w	r2, r3, r2
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	7a1b      	ldrb	r3, [r3, #8]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	2201      	movs	r2, #1
 8004926:	409a      	lsls	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004934:	0a52      	lsrs	r2, r2, #9
 8004936:	fb03 f202 	mul.w	r2, r3, r2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004944:	661a      	str	r2, [r3, #96]	@ 0x60
 8004946:	e031      	b.n	80049ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494c:	2b01      	cmp	r3, #1
 800494e:	d11d      	bne.n	800498c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004954:	041b      	lsls	r3, r3, #16
 8004956:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	431a      	orrs	r2, r3
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	3301      	adds	r3, #1
 800496c:	029a      	lsls	r2, r3, #10
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004980:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	661a      	str	r2, [r3, #96]	@ 0x60
 800498a:	e00f      	b.n	80049ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a58      	ldr	r2, [pc, #352]	@ (8004af4 <HAL_SD_GetCardCSD+0x344>)
 8004992:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004998:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e09d      	b.n	8004ae8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b0:	0b9b      	lsrs	r3, r3, #14
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c2:	09db      	lsrs	r3, r3, #7
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e4:	0fdb      	lsrs	r3, r3, #31
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f0:	0f5b      	lsrs	r3, r3, #29
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a02:	0e9b      	lsrs	r3, r3, #26
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a14:	0d9b      	lsrs	r3, r3, #22
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a26:	0d5b      	lsrs	r3, r3, #21
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a42:	0c1b      	lsrs	r3, r3, #16
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a56:	0bdb      	lsrs	r3, r3, #15
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6a:	0b9b      	lsrs	r3, r3, #14
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7e:	0b5b      	lsrs	r3, r3, #13
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a92:	0b1b      	lsrs	r3, r3, #12
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	0a9b      	lsrs	r3, r3, #10
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aba:	0a1b      	lsrs	r3, r3, #8
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	004005ff 	.word	0x004005ff

08004af8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004b5c:	f107 030c 	add.w	r3, r7, #12
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f970 	bl	8004e48 <SD_SendStatus>
 8004b68:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	0a5b      	lsrs	r3, r3, #9
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004b86:	693b      	ldr	r3, [r7, #16]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b90:	b5b0      	push	{r4, r5, r7, lr}
 8004b92:	b094      	sub	sp, #80	@ 0x50
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f002 fde0 	bl	8007766 <SDIO_GetPowerState>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004bb0:	e0b8      	b.n	8004d24 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d02f      	beq.n	8004c1a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f002 ffc7 	bl	8007b52 <SDMMC_CmdSendCID>
 8004bc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <SD_InitCard+0x40>
    {
      return errorstate;
 8004bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bce:	e0a9      	b.n	8004d24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f002 fe0a 	bl	80077f0 <SDIO_GetResponse>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2104      	movs	r1, #4
 8004be8:	4618      	mov	r0, r3
 8004bea:	f002 fe01 	bl	80077f0 <SDIO_GetResponse>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2108      	movs	r1, #8
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f002 fdf8 	bl	80077f0 <SDIO_GetResponse>
 8004c00:	4602      	mov	r2, r0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	210c      	movs	r1, #12
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f002 fdef 	bl	80077f0 <SDIO_GetResponse>
 8004c12:	4602      	mov	r2, r0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d00d      	beq.n	8004c3e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f107 020e 	add.w	r2, r7, #14
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f002 ffcd 	bl	8007bcc <SDMMC_CmdSetRelAdd>
 8004c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <SD_InitCard+0xae>
    {
      return errorstate;
 8004c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3c:	e072      	b.n	8004d24 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d036      	beq.n	8004cb4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004c46:	89fb      	ldrh	r3, [r7, #14]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c56:	041b      	lsls	r3, r3, #16
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f002 ff97 	bl	8007b8e <SDMMC_CmdSendCSD>
 8004c60:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c6a:	e05b      	b.n	8004d24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f002 fdbc 	bl	80077f0 <SDIO_GetResponse>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2104      	movs	r1, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f002 fdb3 	bl	80077f0 <SDIO_GetResponse>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2108      	movs	r1, #8
 8004c96:	4618      	mov	r0, r3
 8004c98:	f002 fdaa 	bl	80077f0 <SDIO_GetResponse>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	210c      	movs	r1, #12
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f002 fda1 	bl	80077f0 <SDIO_GetResponse>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2104      	movs	r1, #4
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f002 fd98 	bl	80077f0 <SDIO_GetResponse>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	0d1a      	lsrs	r2, r3, #20
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004cc8:	f107 0310 	add.w	r3, r7, #16
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff fd6e 	bl	80047b0 <HAL_SD_GetCardCSD>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cda:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004cde:	e021      	b.n	8004d24 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	2200      	movs	r2, #0
 8004cec:	461c      	mov	r4, r3
 8004cee:	4615      	mov	r5, r2
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	462b      	mov	r3, r5
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	f002 fe87 	bl	8007a08 <SDMMC_CmdSelDesel>
 8004cfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <SD_InitCard+0x176>
  {
    return errorstate;
 8004d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d04:	e00e      	b.n	8004d24 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681d      	ldr	r5, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	466c      	mov	r4, sp
 8004d0e:	f103 0210 	add.w	r2, r3, #16
 8004d12:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d18:	3304      	adds	r3, #4
 8004d1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f002 fccb 	bl	80076b8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3740      	adds	r7, #64	@ 0x40
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bdb0      	pop	{r4, r5, r7, pc}

08004d2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f002 fe82 	bl	8007a4e <SDMMC_CmdGoIdleState>
 8004d4a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	e072      	b.n	8004e3c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f002 fe95 	bl	8007a8a <SDMMC_CmdOperCond>
 8004d60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00d      	beq.n	8004d84 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f002 fe6b 	bl	8007a4e <SDMMC_CmdGoIdleState>
 8004d78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	e05b      	b.n	8004e3c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d137      	bne.n	8004e02 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f002 fe95 	bl	8007ac8 <SDMMC_CmdAppCommand>
 8004d9e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d02d      	beq.n	8004e02 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004da6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004daa:	e047      	b.n	8004e3c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f002 fe88 	bl	8007ac8 <SDMMC_CmdAppCommand>
 8004db8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <SD_PowerON+0x98>
    {
      return errorstate;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	e03b      	b.n	8004e3c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	491e      	ldr	r1, [pc, #120]	@ (8004e44 <SD_PowerON+0x118>)
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f002 fe9e 	bl	8007b0c <SDMMC_CmdAppOperCommand>
 8004dd0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dd8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004ddc:	e02e      	b.n	8004e3c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f002 fd03 	bl	80077f0 <SDIO_GetResponse>
 8004dea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	0fdb      	lsrs	r3, r3, #31
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <SD_PowerON+0xcc>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <SD_PowerON+0xce>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]

    count++;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d802      	bhi.n	8004e12 <SD_PowerON+0xe6>
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0cc      	beq.n	8004dac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d902      	bls.n	8004e22 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004e1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e20:	e00c      	b.n	8004e3c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44
 8004e32:	e002      	b.n	8004e3a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	c1100000 	.word	0xc1100000

08004e48 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004e58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e5c:	e018      	b.n	8004e90 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f002 fecf 	bl	8007c0e <SDMMC_CmdSendStatus>
 8004e70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	e009      	b.n	8004e90 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f002 fcb4 	bl	80077f0 <SDIO_GetResponse>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e07b      	b.n	8004fa2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d108      	bne.n	8004ec4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eba:	d009      	beq.n	8004ed0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	61da      	str	r2, [r3, #28]
 8004ec2:	e005      	b.n	8004ed0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fd f882 	bl	8001ff4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f54:	ea42 0103 	orr.w	r1, r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	f003 0104 	and.w	r1, r3, #4
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	f003 0210 	and.w	r2, r3, #16
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b088      	sub	sp, #32
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	603b      	str	r3, [r7, #0]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fba:	f7fd fa67 	bl	800248c <HAL_GetTick>
 8004fbe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d001      	beq.n	8004fd4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e12a      	b.n	800522a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_SPI_Transmit+0x36>
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e122      	b.n	800522a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_SPI_Transmit+0x48>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e11b      	b.n	800522a <HAL_SPI_Transmit+0x280>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005040:	d10f      	bne.n	8005062 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005050:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005060:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506c:	2b40      	cmp	r3, #64	@ 0x40
 800506e:	d007      	beq.n	8005080 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800507e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005088:	d152      	bne.n	8005130 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_SPI_Transmit+0xee>
 8005092:	8b7b      	ldrh	r3, [r7, #26]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d145      	bne.n	8005124 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	881a      	ldrh	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	1c9a      	adds	r2, r3, #2
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050bc:	e032      	b.n	8005124 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d112      	bne.n	80050f2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d0:	881a      	ldrh	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050dc:	1c9a      	adds	r2, r3, #2
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050f0:	e018      	b.n	8005124 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050f2:	f7fd f9cb 	bl	800248c <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d803      	bhi.n	800510a <HAL_SPI_Transmit+0x160>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d102      	bne.n	8005110 <HAL_SPI_Transmit+0x166>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d109      	bne.n	8005124 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e082      	b.n	800522a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1c7      	bne.n	80050be <HAL_SPI_Transmit+0x114>
 800512e:	e053      	b.n	80051d8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_SPI_Transmit+0x194>
 8005138:	8b7b      	ldrh	r3, [r7, #26]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d147      	bne.n	80051ce <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	7812      	ldrb	r2, [r2, #0]
 800514a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005164:	e033      	b.n	80051ce <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b02      	cmp	r3, #2
 8005172:	d113      	bne.n	800519c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	330c      	adds	r3, #12
 800517e:	7812      	ldrb	r2, [r2, #0]
 8005180:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	86da      	strh	r2, [r3, #54]	@ 0x36
 800519a:	e018      	b.n	80051ce <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800519c:	f7fd f976 	bl	800248c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d803      	bhi.n	80051b4 <HAL_SPI_Transmit+0x20a>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b2:	d102      	bne.n	80051ba <HAL_SPI_Transmit+0x210>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d109      	bne.n	80051ce <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e02d      	b.n	800522a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1c6      	bne.n	8005166 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 ffb7 	bl	8006150 <SPI_EndRxTxTransaction>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005228:	2300      	movs	r3, #0
  }
}
 800522a:	4618      	mov	r0, r3
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b088      	sub	sp, #32
 8005236:	af02      	add	r7, sp, #8
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b01      	cmp	r3, #1
 800524c:	d001      	beq.n	8005252 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
 8005250:	e104      	b.n	800545c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800525a:	d112      	bne.n	8005282 <HAL_SPI_Receive+0x50>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10e      	bne.n	8005282 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2204      	movs	r2, #4
 8005268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800526c:	88fa      	ldrh	r2, [r7, #6]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f8f3 	bl	8005464 <HAL_SPI_TransmitReceive>
 800527e:	4603      	mov	r3, r0
 8005280:	e0ec      	b.n	800545c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005282:	f7fd f903 	bl	800248c <HAL_GetTick>
 8005286:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_SPI_Receive+0x62>
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0e1      	b.n	800545c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_SPI_Receive+0x74>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e0da      	b.n	800545c <HAL_SPI_Receive+0x22a>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2204      	movs	r2, #4
 80052b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	88fa      	ldrh	r2, [r7, #6]
 80052c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	88fa      	ldrh	r2, [r7, #6]
 80052cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052f4:	d10f      	bne.n	8005316 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005314:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005320:	2b40      	cmp	r3, #64	@ 0x40
 8005322:	d007      	beq.n	8005334 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005332:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d170      	bne.n	800541e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800533c:	e035      	b.n	80053aa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d115      	bne.n	8005378 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f103 020c 	add.w	r2, r3, #12
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005376:	e018      	b.n	80053aa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005378:	f7fd f888 	bl	800248c <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d803      	bhi.n	8005390 <HAL_SPI_Receive+0x15e>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d102      	bne.n	8005396 <HAL_SPI_Receive+0x164>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e058      	b.n	800545c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1c4      	bne.n	800533e <HAL_SPI_Receive+0x10c>
 80053b4:	e038      	b.n	8005428 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d113      	bne.n	80053ec <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ce:	b292      	uxth	r2, r2
 80053d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d6:	1c9a      	adds	r2, r3, #2
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053ea:	e018      	b.n	800541e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ec:	f7fd f84e 	bl	800248c <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d803      	bhi.n	8005404 <HAL_SPI_Receive+0x1d2>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d102      	bne.n	800540a <HAL_SPI_Receive+0x1d8>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e01e      	b.n	800545c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1c6      	bne.n	80053b6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fe29 	bl	8006084 <SPI_EndRxTransaction>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800545a:	2300      	movs	r3, #0
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	@ 0x28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005472:	2301      	movs	r3, #1
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005476:	f7fd f809 	bl	800248c <HAL_GetTick>
 800547a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005482:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800548a:	887b      	ldrh	r3, [r7, #2]
 800548c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800548e:	7ffb      	ldrb	r3, [r7, #31]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d00c      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x4a>
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800549a:	d106      	bne.n	80054aa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d102      	bne.n	80054aa <HAL_SPI_TransmitReceive+0x46>
 80054a4:	7ffb      	ldrb	r3, [r7, #31]
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d001      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80054aa:	2302      	movs	r3, #2
 80054ac:	e17f      	b.n	80057ae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x5c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x5c>
 80054ba:	887b      	ldrh	r3, [r7, #2]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e174      	b.n	80057ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_SPI_TransmitReceive+0x6e>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e16d      	b.n	80057ae <HAL_SPI_TransmitReceive+0x34a>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d003      	beq.n	80054ee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2205      	movs	r2, #5
 80054ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	887a      	ldrh	r2, [r7, #2]
 80054fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	887a      	ldrh	r2, [r7, #2]
 8005504:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	887a      	ldrh	r2, [r7, #2]
 8005510:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	887a      	ldrh	r2, [r7, #2]
 8005516:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552e:	2b40      	cmp	r3, #64	@ 0x40
 8005530:	d007      	beq.n	8005542 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005540:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800554a:	d17e      	bne.n	800564a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_SPI_TransmitReceive+0xf6>
 8005554:	8afb      	ldrh	r3, [r7, #22]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d16c      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555e:	881a      	ldrh	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	1c9a      	adds	r2, r3, #2
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800557e:	e059      	b.n	8005634 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d11b      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x162>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d016      	beq.n	80055c6 <HAL_SPI_TransmitReceive+0x162>
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	2b01      	cmp	r3, #1
 800559c:	d113      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a2:	881a      	ldrh	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	1c9a      	adds	r2, r3, #2
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d119      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x1a4>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d014      	beq.n	8005608 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e8:	b292      	uxth	r2, r2
 80055ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f0:	1c9a      	adds	r2, r3, #2
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005604:	2301      	movs	r3, #1
 8005606:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005608:	f7fc ff40 	bl	800248c <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005614:	429a      	cmp	r2, r3
 8005616:	d80d      	bhi.n	8005634 <HAL_SPI_TransmitReceive+0x1d0>
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d009      	beq.n	8005634 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e0bc      	b.n	80057ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1a0      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x11c>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d19b      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x11c>
 8005648:	e082      	b.n	8005750 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_SPI_TransmitReceive+0x1f4>
 8005652:	8afb      	ldrh	r3, [r7, #22]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d171      	bne.n	800573c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	7812      	ldrb	r2, [r2, #0]
 8005664:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800567e:	e05d      	b.n	800573c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b02      	cmp	r3, #2
 800568c:	d11c      	bne.n	80056c8 <HAL_SPI_TransmitReceive+0x264>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d017      	beq.n	80056c8 <HAL_SPI_TransmitReceive+0x264>
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	2b01      	cmp	r3, #1
 800569c:	d114      	bne.n	80056c8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	7812      	ldrb	r2, [r2, #0]
 80056aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d119      	bne.n	800570a <HAL_SPI_TransmitReceive+0x2a6>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d014      	beq.n	800570a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005706:	2301      	movs	r3, #1
 8005708:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800570a:	f7fc febf 	bl	800248c <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005716:	429a      	cmp	r2, r3
 8005718:	d803      	bhi.n	8005722 <HAL_SPI_TransmitReceive+0x2be>
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005720:	d102      	bne.n	8005728 <HAL_SPI_TransmitReceive+0x2c4>
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e038      	b.n	80057ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d19c      	bne.n	8005680 <HAL_SPI_TransmitReceive+0x21c>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d197      	bne.n	8005680 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005750:	6a3a      	ldr	r2, [r7, #32]
 8005752:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 fcfb 	bl	8006150 <SPI_EndRxTxTransaction>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e01d      	b.n	80057ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800577a:	2300      	movs	r3, #0
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80057ac:	2300      	movs	r3, #0
  }
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3728      	adds	r7, #40	@ 0x28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d001      	beq.n	80057d6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
 80057d4:	e097      	b.n	8005906 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_SPI_Transmit_DMA+0x2a>
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e08f      	b.n	8005906 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_SPI_Transmit_DMA+0x3c>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e088      	b.n	8005906 <HAL_SPI_Transmit_DMA+0x14e>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2203      	movs	r2, #3
 8005800:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	88fa      	ldrh	r2, [r7, #6]
 800581a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005842:	d10f      	bne.n	8005864 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005852:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005862:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005868:	4a29      	ldr	r2, [pc, #164]	@ (8005910 <HAL_SPI_Transmit_DMA+0x158>)
 800586a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005870:	4a28      	ldr	r2, [pc, #160]	@ (8005914 <HAL_SPI_Transmit_DMA+0x15c>)
 8005872:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005878:	4a27      	ldr	r2, [pc, #156]	@ (8005918 <HAL_SPI_Transmit_DMA+0x160>)
 800587a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005880:	2200      	movs	r2, #0
 8005882:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	4619      	mov	r1, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	330c      	adds	r3, #12
 8005894:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800589a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800589c:	f7fd f9c2 	bl	8002c24 <HAL_DMA_Start_IT>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058aa:	f043 0210 	orr.w	r2, r3, #16
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e023      	b.n	8005906 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c8:	2b40      	cmp	r3, #64	@ 0x40
 80058ca:	d007      	beq.n	80058dc <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058da:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0220 	orr.w	r2, r2, #32
 80058f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0202 	orr.w	r2, r2, #2
 8005902:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	08005ee1 	.word	0x08005ee1
 8005914:	08005d01 	.word	0x08005d01
 8005918:	08005f35 	.word	0x08005f35

0800591c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	4613      	mov	r3, r2
 8005928:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b01      	cmp	r3, #1
 8005934:	d001      	beq.n	800593a <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8005936:	2302      	movs	r3, #2
 8005938:	e0a9      	b.n	8005a8e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d110      	bne.n	8005964 <HAL_SPI_Receive_DMA+0x48>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800594a:	d10b      	bne.n	8005964 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2204      	movs	r2, #4
 8005950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f8a2 	bl	8005aa4 <HAL_SPI_TransmitReceive_DMA>
 8005960:	4603      	mov	r3, r0
 8005962:	e094      	b.n	8005a8e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <HAL_SPI_Receive_DMA+0x54>
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e08c      	b.n	8005a8e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_SPI_Receive_DMA+0x66>
 800597e:	2302      	movs	r3, #2
 8005980:	e085      	b.n	8005a8e <HAL_SPI_Receive_DMA+0x172>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2204      	movs	r2, #4
 800598e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	88fa      	ldrh	r2, [r7, #6]
 80059a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ca:	d10f      	bne.n	80059ec <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f0:	4a29      	ldr	r2, [pc, #164]	@ (8005a98 <HAL_SPI_Receive_DMA+0x17c>)
 80059f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f8:	4a28      	ldr	r2, [pc, #160]	@ (8005a9c <HAL_SPI_Receive_DMA+0x180>)
 80059fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a00:	4a27      	ldr	r2, [pc, #156]	@ (8005aa0 <HAL_SPI_Receive_DMA+0x184>)
 8005a02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a08:	2200      	movs	r2, #0
 8005a0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	4619      	mov	r1, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a24:	f7fd f8fe 	bl	8002c24 <HAL_DMA_Start_IT>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00b      	beq.n	8005a46 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a32:	f043 0210 	orr.w	r2, r3, #16
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e023      	b.n	8005a8e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a50:	2b40      	cmp	r3, #64	@ 0x40
 8005a52:	d007      	beq.n	8005a64 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a62:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0220 	orr.w	r2, r2, #32
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	08005efd 	.word	0x08005efd
 8005a9c:	08005da9 	.word	0x08005da9
 8005aa0:	08005f35 	.word	0x08005f35

08005aa4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ab8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d00c      	beq.n	8005ae0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005acc:	d106      	bne.n	8005adc <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d102      	bne.n	8005adc <HAL_SPI_TransmitReceive_DMA+0x38>
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d001      	beq.n	8005ae0 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8005adc:	2302      	movs	r3, #2
 8005ade:	e0cf      	b.n	8005c80 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005aec:	887b      	ldrh	r3, [r7, #2]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e0c4      	b.n	8005c80 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_SPI_TransmitReceive_DMA+0x60>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e0bd      	b.n	8005c80 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d003      	beq.n	8005b20 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	887a      	ldrh	r2, [r7, #2]
 8005b30:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	887a      	ldrh	r2, [r7, #2]
 8005b36:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	887a      	ldrh	r2, [r7, #2]
 8005b42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d108      	bne.n	8005b74 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b66:	4a48      	ldr	r2, [pc, #288]	@ (8005c88 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005b68:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b6e:	4a47      	ldr	r2, [pc, #284]	@ (8005c8c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005b70:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b72:	e007      	b.n	8005b84 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b78:	4a45      	ldr	r2, [pc, #276]	@ (8005c90 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005b7a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b80:	4a44      	ldr	r2, [pc, #272]	@ (8005c94 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005b82:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b88:	4a43      	ldr	r2, [pc, #268]	@ (8005c98 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005b8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b90:	2200      	movs	r2, #0
 8005b92:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005baa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005bac:	f7fd f83a 	bl	8002c24 <HAL_DMA_Start_IT>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bba:	f043 0210 	orr.w	r2, r3, #16
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e058      	b.n	8005c80 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0201 	orr.w	r2, r2, #1
 8005bdc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be2:	2200      	movs	r2, #0
 8005be4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bea:	2200      	movs	r2, #0
 8005bec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c06:	4619      	mov	r1, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c14:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c16:	f7fd f805 	bl	8002c24 <HAL_DMA_Start_IT>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00b      	beq.n	8005c38 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c24:	f043 0210 	orr.w	r2, r3, #16
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e023      	b.n	8005c80 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c42:	2b40      	cmp	r3, #64	@ 0x40
 8005c44:	d007      	beq.n	8005c56 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c54:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0220 	orr.w	r2, r2, #32
 8005c6c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0202 	orr.w	r2, r2, #2
 8005c7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	08005efd 	.word	0x08005efd
 8005c8c:	08005da9 	.word	0x08005da9
 8005c90:	08005f19 	.word	0x08005f19
 8005c94:	08005e51 	.word	0x08005e51
 8005c98:	08005f35 	.word	0x08005f35

08005c9c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d0e:	f7fc fbbd 	bl	800248c <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d22:	d03b      	beq.n	8005d9c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0220 	bic.w	r2, r2, #32
 8005d32:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0202 	bic.w	r2, r2, #2
 8005d42:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	2164      	movs	r1, #100	@ 0x64
 8005d48:	6978      	ldr	r0, [r7, #20]
 8005d4a:	f000 fa01 	bl	8006150 <SPI_EndRxTxTransaction>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d58:	f043 0220 	orr.w	r2, r3, #32
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2200      	movs	r2, #0
 8005d82:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005d94:	6978      	ldr	r0, [r7, #20]
 8005d96:	f7ff ffa9 	bl	8005cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005d9a:	e002      	b.n	8005da2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005d9c:	6978      	ldr	r0, [r7, #20]
 8005d9e:	f7fb f9c3 	bl	8001128 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005db6:	f7fc fb69 	bl	800248c <HAL_GetTick>
 8005dba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dca:	d03b      	beq.n	8005e44 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0220 	bic.w	r2, r2, #32
 8005dda:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10d      	bne.n	8005e00 <SPI_DMAReceiveCplt+0x58>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dec:	d108      	bne.n	8005e00 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0203 	bic.w	r2, r2, #3
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	e007      	b.n	8005e10 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	2164      	movs	r1, #100	@ 0x64
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f935 	bl	8006084 <SPI_EndRxTransaction>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f7ff ff55 	bl	8005cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e42:	e002      	b.n	8005e4a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7fb f97f 	bl	8001148 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e5e:	f7fc fb15 	bl	800248c <HAL_GetTick>
 8005e62:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e72:	d02f      	beq.n	8005ed4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0220 	bic.w	r2, r2, #32
 8005e82:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	2164      	movs	r1, #100	@ 0x64
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f961 	bl	8006150 <SPI_EndRxTxTransaction>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0203 	bic.w	r2, r2, #3
 8005eae:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff ff0d 	bl	8005cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005ed2:	e002      	b.n	8005eda <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f7ff fee1 	bl	8005c9c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7ff fede 	bl	8005cb0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f7ff feda 	bl	8005cc4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f10:	bf00      	nop
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f7ff fed6 	bl	8005cd8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f2c:	bf00      	nop
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0203 	bic.w	r2, r2, #3
 8005f50:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f56:	f043 0210 	orr.w	r2, r3, #16
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff fec0 	bl	8005cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f84:	f7fc fa82 	bl	800248c <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	4413      	add	r3, r2
 8005f92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f94:	f7fc fa7a 	bl	800248c <HAL_GetTick>
 8005f98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f9a:	4b39      	ldr	r3, [pc, #228]	@ (8006080 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	015b      	lsls	r3, r3, #5
 8005fa0:	0d1b      	lsrs	r3, r3, #20
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
 8005fa8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005faa:	e054      	b.n	8006056 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb2:	d050      	beq.n	8006056 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fb4:	f7fc fa6a 	bl	800248c <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d902      	bls.n	8005fca <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d13d      	bne.n	8006046 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fe2:	d111      	bne.n	8006008 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fec:	d004      	beq.n	8005ff8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff6:	d107      	bne.n	8006008 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006010:	d10f      	bne.n	8006032 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006030:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e017      	b.n	8006076 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	3b01      	subs	r3, #1
 8006054:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	4013      	ands	r3, r2
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	bf0c      	ite	eq
 8006066:	2301      	moveq	r3, #1
 8006068:	2300      	movne	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	429a      	cmp	r2, r3
 8006072:	d19b      	bne.n	8005fac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	2000000c 	.word	0x2000000c

08006084 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006098:	d111      	bne.n	80060be <SPI_EndRxTransaction+0x3a>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060a2:	d004      	beq.n	80060ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ac:	d107      	bne.n	80060be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060c6:	d12a      	bne.n	800611e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d0:	d012      	beq.n	80060f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2200      	movs	r2, #0
 80060da:	2180      	movs	r1, #128	@ 0x80
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff ff49 	bl	8005f74 <SPI_WaitFlagStateUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d02d      	beq.n	8006144 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ec:	f043 0220 	orr.w	r2, r3, #32
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e026      	b.n	8006146 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2200      	movs	r2, #0
 8006100:	2101      	movs	r1, #1
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff ff36 	bl	8005f74 <SPI_WaitFlagStateUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01a      	beq.n	8006144 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006112:	f043 0220 	orr.w	r2, r3, #32
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e013      	b.n	8006146 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2200      	movs	r2, #0
 8006126:	2101      	movs	r1, #1
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff ff23 	bl	8005f74 <SPI_WaitFlagStateUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006138:	f043 0220 	orr.w	r2, r3, #32
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e000      	b.n	8006146 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af02      	add	r7, sp, #8
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2201      	movs	r2, #1
 8006164:	2102      	movs	r1, #2
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff ff04 	bl	8005f74 <SPI_WaitFlagStateUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e032      	b.n	80061e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006182:	4b1b      	ldr	r3, [pc, #108]	@ (80061f0 <SPI_EndRxTxTransaction+0xa0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1b      	ldr	r2, [pc, #108]	@ (80061f4 <SPI_EndRxTxTransaction+0xa4>)
 8006188:	fba2 2303 	umull	r2, r3, r2, r3
 800618c:	0d5b      	lsrs	r3, r3, #21
 800618e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061a0:	d112      	bne.n	80061c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2200      	movs	r2, #0
 80061aa:	2180      	movs	r1, #128	@ 0x80
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f7ff fee1 	bl	8005f74 <SPI_WaitFlagStateUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d016      	beq.n	80061e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061bc:	f043 0220 	orr.w	r2, r3, #32
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e00f      	b.n	80061e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061de:	2b80      	cmp	r3, #128	@ 0x80
 80061e0:	d0f2      	beq.n	80061c8 <SPI_EndRxTxTransaction+0x78>
 80061e2:	e000      	b.n	80061e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80061e4:	bf00      	nop
  }

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	2000000c 	.word	0x2000000c
 80061f4:	165e9f81 	.word	0x165e9f81

080061f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e041      	b.n	800628e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fb ff94 	bl	800214c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3304      	adds	r3, #4
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f000 f95e 	bl	80064f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d001      	beq.n	80062b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e046      	b.n	800633e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a23      	ldr	r2, [pc, #140]	@ (800634c <HAL_TIM_Base_Start+0xb4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d022      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ca:	d01d      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006350 <HAL_TIM_Base_Start+0xb8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d018      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1e      	ldr	r2, [pc, #120]	@ (8006354 <HAL_TIM_Base_Start+0xbc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006358 <HAL_TIM_Base_Start+0xc0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00e      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1b      	ldr	r2, [pc, #108]	@ (800635c <HAL_TIM_Base_Start+0xc4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d009      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a19      	ldr	r2, [pc, #100]	@ (8006360 <HAL_TIM_Base_Start+0xc8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a18      	ldr	r2, [pc, #96]	@ (8006364 <HAL_TIM_Base_Start+0xcc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d111      	bne.n	800632c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b06      	cmp	r3, #6
 8006318:	d010      	beq.n	800633c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 0201 	orr.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632a:	e007      	b.n	800633c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0201 	orr.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40010000 	.word	0x40010000
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800
 8006358:	40000c00 	.word	0x40000c00
 800635c:	40010400 	.word	0x40010400
 8006360:	40014000 	.word	0x40014000
 8006364:	40001800 	.word	0x40001800

08006368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_TIM_ConfigClockSource+0x1c>
 8006380:	2302      	movs	r3, #2
 8006382:	e0b4      	b.n	80064ee <HAL_TIM_ConfigClockSource+0x186>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063bc:	d03e      	beq.n	800643c <HAL_TIM_ConfigClockSource+0xd4>
 80063be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c2:	f200 8087 	bhi.w	80064d4 <HAL_TIM_ConfigClockSource+0x16c>
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ca:	f000 8086 	beq.w	80064da <HAL_TIM_ConfigClockSource+0x172>
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d2:	d87f      	bhi.n	80064d4 <HAL_TIM_ConfigClockSource+0x16c>
 80063d4:	2b70      	cmp	r3, #112	@ 0x70
 80063d6:	d01a      	beq.n	800640e <HAL_TIM_ConfigClockSource+0xa6>
 80063d8:	2b70      	cmp	r3, #112	@ 0x70
 80063da:	d87b      	bhi.n	80064d4 <HAL_TIM_ConfigClockSource+0x16c>
 80063dc:	2b60      	cmp	r3, #96	@ 0x60
 80063de:	d050      	beq.n	8006482 <HAL_TIM_ConfigClockSource+0x11a>
 80063e0:	2b60      	cmp	r3, #96	@ 0x60
 80063e2:	d877      	bhi.n	80064d4 <HAL_TIM_ConfigClockSource+0x16c>
 80063e4:	2b50      	cmp	r3, #80	@ 0x50
 80063e6:	d03c      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0xfa>
 80063e8:	2b50      	cmp	r3, #80	@ 0x50
 80063ea:	d873      	bhi.n	80064d4 <HAL_TIM_ConfigClockSource+0x16c>
 80063ec:	2b40      	cmp	r3, #64	@ 0x40
 80063ee:	d058      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0x13a>
 80063f0:	2b40      	cmp	r3, #64	@ 0x40
 80063f2:	d86f      	bhi.n	80064d4 <HAL_TIM_ConfigClockSource+0x16c>
 80063f4:	2b30      	cmp	r3, #48	@ 0x30
 80063f6:	d064      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0x15a>
 80063f8:	2b30      	cmp	r3, #48	@ 0x30
 80063fa:	d86b      	bhi.n	80064d4 <HAL_TIM_ConfigClockSource+0x16c>
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d060      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006400:	2b20      	cmp	r3, #32
 8006402:	d867      	bhi.n	80064d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d05c      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006408:	2b10      	cmp	r3, #16
 800640a:	d05a      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0x15a>
 800640c:	e062      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800641e:	f000 f991 	bl	8006744 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006430:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	609a      	str	r2, [r3, #8]
      break;
 800643a:	e04f      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800644c:	f000 f97a 	bl	8006744 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800645e:	609a      	str	r2, [r3, #8]
      break;
 8006460:	e03c      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800646e:	461a      	mov	r2, r3
 8006470:	f000 f8ee 	bl	8006650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2150      	movs	r1, #80	@ 0x50
 800647a:	4618      	mov	r0, r3
 800647c:	f000 f947 	bl	800670e <TIM_ITRx_SetConfig>
      break;
 8006480:	e02c      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800648e:	461a      	mov	r2, r3
 8006490:	f000 f90d 	bl	80066ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2160      	movs	r1, #96	@ 0x60
 800649a:	4618      	mov	r0, r3
 800649c:	f000 f937 	bl	800670e <TIM_ITRx_SetConfig>
      break;
 80064a0:	e01c      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ae:	461a      	mov	r2, r3
 80064b0:	f000 f8ce 	bl	8006650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2140      	movs	r1, #64	@ 0x40
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 f927 	bl	800670e <TIM_ITRx_SetConfig>
      break;
 80064c0:	e00c      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4619      	mov	r1, r3
 80064cc:	4610      	mov	r0, r2
 80064ce:	f000 f91e 	bl	800670e <TIM_ITRx_SetConfig>
      break;
 80064d2:	e003      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      break;
 80064d8:	e000      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a46      	ldr	r2, [pc, #280]	@ (8006624 <TIM_Base_SetConfig+0x12c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006516:	d00f      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a43      	ldr	r2, [pc, #268]	@ (8006628 <TIM_Base_SetConfig+0x130>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00b      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a42      	ldr	r2, [pc, #264]	@ (800662c <TIM_Base_SetConfig+0x134>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d007      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a41      	ldr	r2, [pc, #260]	@ (8006630 <TIM_Base_SetConfig+0x138>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a40      	ldr	r2, [pc, #256]	@ (8006634 <TIM_Base_SetConfig+0x13c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d108      	bne.n	800654a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a35      	ldr	r2, [pc, #212]	@ (8006624 <TIM_Base_SetConfig+0x12c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d02b      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006558:	d027      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a32      	ldr	r2, [pc, #200]	@ (8006628 <TIM_Base_SetConfig+0x130>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d023      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a31      	ldr	r2, [pc, #196]	@ (800662c <TIM_Base_SetConfig+0x134>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d01f      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a30      	ldr	r2, [pc, #192]	@ (8006630 <TIM_Base_SetConfig+0x138>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01b      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2f      	ldr	r2, [pc, #188]	@ (8006634 <TIM_Base_SetConfig+0x13c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d017      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2e      	ldr	r2, [pc, #184]	@ (8006638 <TIM_Base_SetConfig+0x140>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a2d      	ldr	r2, [pc, #180]	@ (800663c <TIM_Base_SetConfig+0x144>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00f      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2c      	ldr	r2, [pc, #176]	@ (8006640 <TIM_Base_SetConfig+0x148>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a2b      	ldr	r2, [pc, #172]	@ (8006644 <TIM_Base_SetConfig+0x14c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a2a      	ldr	r2, [pc, #168]	@ (8006648 <TIM_Base_SetConfig+0x150>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_Base_SetConfig+0xb2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a29      	ldr	r2, [pc, #164]	@ (800664c <TIM_Base_SetConfig+0x154>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d108      	bne.n	80065bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a10      	ldr	r2, [pc, #64]	@ (8006624 <TIM_Base_SetConfig+0x12c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_Base_SetConfig+0xf8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a12      	ldr	r2, [pc, #72]	@ (8006634 <TIM_Base_SetConfig+0x13c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d103      	bne.n	80065f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b01      	cmp	r3, #1
 8006608:	d105      	bne.n	8006616 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f023 0201 	bic.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	611a      	str	r2, [r3, #16]
  }
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40010000 	.word	0x40010000
 8006628:	40000400 	.word	0x40000400
 800662c:	40000800 	.word	0x40000800
 8006630:	40000c00 	.word	0x40000c00
 8006634:	40010400 	.word	0x40010400
 8006638:	40014000 	.word	0x40014000
 800663c:	40014400 	.word	0x40014400
 8006640:	40014800 	.word	0x40014800
 8006644:	40001800 	.word	0x40001800
 8006648:	40001c00 	.word	0x40001c00
 800664c:	40002000 	.word	0x40002000

08006650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	f023 0201 	bic.w	r2, r3, #1
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800667a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f023 030a 	bic.w	r3, r3, #10
 800668c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b087      	sub	sp, #28
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f023 0210 	bic.w	r2, r3, #16
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	031b      	lsls	r3, r3, #12
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	f043 0307 	orr.w	r3, r3, #7
 8006730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	609a      	str	r2, [r3, #8]
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800675e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	021a      	lsls	r2, r3, #8
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	431a      	orrs	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4313      	orrs	r3, r2
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	609a      	str	r2, [r3, #8]
}
 8006778:	bf00      	nop
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006794:	2b01      	cmp	r3, #1
 8006796:	d101      	bne.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006798:	2302      	movs	r3, #2
 800679a:	e05a      	b.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a21      	ldr	r2, [pc, #132]	@ (8006860 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d022      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e8:	d01d      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d018      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1a      	ldr	r2, [pc, #104]	@ (800686c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00e      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a18      	ldr	r2, [pc, #96]	@ (8006870 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a17      	ldr	r2, [pc, #92]	@ (8006874 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a15      	ldr	r2, [pc, #84]	@ (8006878 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d10c      	bne.n	8006840 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800682c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	4313      	orrs	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40010000 	.word	0x40010000
 8006864:	40000400 	.word	0x40000400
 8006868:	40000800 	.word	0x40000800
 800686c:	40000c00 	.word	0x40000c00
 8006870:	40010400 	.word	0x40010400
 8006874:	40014000 	.word	0x40014000
 8006878:	40001800 	.word	0x40001800

0800687c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e042      	b.n	8006914 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fb fc72 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2224      	movs	r2, #36	@ 0x24
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fc85 	bl	80071d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695a      	ldr	r2, [r3, #20]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b0ba      	sub	sp, #232	@ 0xe8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006942:	2300      	movs	r3, #0
 8006944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006948:	2300      	movs	r3, #0
 800694a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006952:	f003 030f 	and.w	r3, r3, #15
 8006956:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800695a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10f      	bne.n	8006982 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <HAL_UART_IRQHandler+0x66>
 800696e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fb69 	bl	8007052 <UART_Receive_IT>
      return;
 8006980:	e25b      	b.n	8006e3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 80de 	beq.w	8006b48 <HAL_UART_IRQHandler+0x22c>
 800698c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d106      	bne.n	80069a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 80d1 	beq.w	8006b48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <HAL_UART_IRQHandler+0xae>
 80069b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c2:	f043 0201 	orr.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <HAL_UART_IRQHandler+0xd2>
 80069d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e6:	f043 0202 	orr.w	r2, r3, #2
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <HAL_UART_IRQHandler+0xf6>
 80069fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a0a:	f043 0204 	orr.w	r2, r3, #4
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d011      	beq.n	8006a42 <HAL_UART_IRQHandler+0x126>
 8006a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3a:	f043 0208 	orr.w	r2, r3, #8
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 81f2 	beq.w	8006e30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d008      	beq.n	8006a6a <HAL_UART_IRQHandler+0x14e>
 8006a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 faf4 	bl	8007052 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a74:	2b40      	cmp	r3, #64	@ 0x40
 8006a76:	bf0c      	ite	eq
 8006a78:	2301      	moveq	r3, #1
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a86:	f003 0308 	and.w	r3, r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d103      	bne.n	8006a96 <HAL_UART_IRQHandler+0x17a>
 8006a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d04f      	beq.n	8006b36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f9fc 	bl	8006e94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa6:	2b40      	cmp	r3, #64	@ 0x40
 8006aa8:	d141      	bne.n	8006b2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3314      	adds	r3, #20
 8006ab0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3314      	adds	r3, #20
 8006ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1d9      	bne.n	8006aaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d013      	beq.n	8006b26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b02:	4a7e      	ldr	r2, [pc, #504]	@ (8006cfc <HAL_UART_IRQHandler+0x3e0>)
 8006b04:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fc f952 	bl	8002db4 <HAL_DMA_Abort_IT>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d016      	beq.n	8006b44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b20:	4610      	mov	r0, r2
 8006b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b24:	e00e      	b.n	8006b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f99e 	bl	8006e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2c:	e00a      	b.n	8006b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f99a 	bl	8006e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b34:	e006      	b.n	8006b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f996 	bl	8006e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006b42:	e175      	b.n	8006e30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b44:	bf00      	nop
    return;
 8006b46:	e173      	b.n	8006e30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	f040 814f 	bne.w	8006df0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 8148 	beq.w	8006df0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 8141 	beq.w	8006df0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60bb      	str	r3, [r7, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8e:	2b40      	cmp	r3, #64	@ 0x40
 8006b90:	f040 80b6 	bne.w	8006d00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ba0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8145 	beq.w	8006e34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	f080 813e 	bcs.w	8006e34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bca:	f000 8088 	beq.w	8006cde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	330c      	adds	r3, #12
 8006bf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006bfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1d9      	bne.n	8006bce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3314      	adds	r3, #20
 8006c20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3314      	adds	r3, #20
 8006c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e1      	bne.n	8006c1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3314      	adds	r3, #20
 8006c5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3314      	adds	r3, #20
 8006c76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e3      	bne.n	8006c56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cae:	f023 0310 	bic.w	r3, r3, #16
 8006cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	330c      	adds	r3, #12
 8006cbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006cc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cc2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e3      	bne.n	8006c9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fb fffb 	bl	8002cd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f8c1 	bl	8006e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cfa:	e09b      	b.n	8006e34 <HAL_UART_IRQHandler+0x518>
 8006cfc:	08006f5b 	.word	0x08006f5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 808e 	beq.w	8006e38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 8089 	beq.w	8006e38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006d4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e3      	bne.n	8006d26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3314      	adds	r3, #20
 8006d64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	f023 0301 	bic.w	r3, r3, #1
 8006d74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3314      	adds	r3, #20
 8006d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d82:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e3      	bne.n	8006d5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	330c      	adds	r3, #12
 8006daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0310 	bic.w	r3, r3, #16
 8006dba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	330c      	adds	r3, #12
 8006dc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006dc8:	61fa      	str	r2, [r7, #28]
 8006dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	69b9      	ldr	r1, [r7, #24]
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e3      	bne.n	8006da4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006de2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f847 	bl	8006e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dee:	e023      	b.n	8006e38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d009      	beq.n	8006e10 <HAL_UART_IRQHandler+0x4f4>
 8006dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f8ba 	bl	8006f82 <UART_Transmit_IT>
    return;
 8006e0e:	e014      	b.n	8006e3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00e      	beq.n	8006e3a <HAL_UART_IRQHandler+0x51e>
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d008      	beq.n	8006e3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f8fa 	bl	8007022 <UART_EndTransmit_IT>
    return;
 8006e2e:	e004      	b.n	8006e3a <HAL_UART_IRQHandler+0x51e>
    return;
 8006e30:	bf00      	nop
 8006e32:	e002      	b.n	8006e3a <HAL_UART_IRQHandler+0x51e>
      return;
 8006e34:	bf00      	nop
 8006e36:	e000      	b.n	8006e3a <HAL_UART_IRQHandler+0x51e>
      return;
 8006e38:	bf00      	nop
  }
}
 8006e3a:	37e8      	adds	r7, #232	@ 0xe8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b095      	sub	sp, #84	@ 0x54
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ebc:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ec2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e5      	bne.n	8006e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3314      	adds	r3, #20
 8006ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f023 0301 	bic.w	r3, r3, #1
 8006ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3314      	adds	r3, #20
 8006eee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e5      	bne.n	8006ed0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d119      	bne.n	8006f40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	330c      	adds	r3, #12
 8006f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f023 0310 	bic.w	r3, r3, #16
 8006f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f2c:	61ba      	str	r2, [r7, #24]
 8006f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6979      	ldr	r1, [r7, #20]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	613b      	str	r3, [r7, #16]
   return(result);
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e5      	bne.n	8006f0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f4e:	bf00      	nop
 8006f50:	3754      	adds	r7, #84	@ 0x54
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff ff77 	bl	8006e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f7a:	bf00      	nop
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b085      	sub	sp, #20
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b21      	cmp	r3, #33	@ 0x21
 8006f94:	d13e      	bne.n	8007014 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f9e:	d114      	bne.n	8006fca <UART_Transmit_IT+0x48>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d110      	bne.n	8006fca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	1c9a      	adds	r2, r3, #2
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	621a      	str	r2, [r3, #32]
 8006fc8:	e008      	b.n	8006fdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	1c59      	adds	r1, r3, #1
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6211      	str	r1, [r2, #32]
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10f      	bne.n	8007010 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ffe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800700e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	e000      	b.n	8007016 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007014:	2302      	movs	r3, #2
  }
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007038:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff fefc 	bl	8006e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b08c      	sub	sp, #48	@ 0x30
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b22      	cmp	r3, #34	@ 0x22
 8007064:	f040 80ae 	bne.w	80071c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007070:	d117      	bne.n	80070a2 <UART_Receive_IT+0x50>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d113      	bne.n	80070a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800707a:	2300      	movs	r3, #0
 800707c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007082:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007090:	b29a      	uxth	r2, r3
 8007092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007094:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709a:	1c9a      	adds	r2, r3, #2
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	629a      	str	r2, [r3, #40]	@ 0x28
 80070a0:	e026      	b.n	80070f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070b4:	d007      	beq.n	80070c6 <UART_Receive_IT+0x74>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <UART_Receive_IT+0x82>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d106      	bne.n	80070d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	e008      	b.n	80070e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	4619      	mov	r1, r3
 80070fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007100:	2b00      	cmp	r3, #0
 8007102:	d15d      	bne.n	80071c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0220 	bic.w	r2, r2, #32
 8007112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695a      	ldr	r2, [r3, #20]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0201 	bic.w	r2, r2, #1
 8007132:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007146:	2b01      	cmp	r3, #1
 8007148:	d135      	bne.n	80071b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	613b      	str	r3, [r7, #16]
   return(result);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f023 0310 	bic.w	r3, r3, #16
 8007166:	627b      	str	r3, [r7, #36]	@ 0x24
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	330c      	adds	r3, #12
 800716e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007170:	623a      	str	r2, [r7, #32]
 8007172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	69f9      	ldr	r1, [r7, #28]
 8007176:	6a3a      	ldr	r2, [r7, #32]
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	61bb      	str	r3, [r7, #24]
   return(result);
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e5      	bne.n	8007150 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0310 	and.w	r3, r3, #16
 800718e:	2b10      	cmp	r3, #16
 8007190:	d10a      	bne.n	80071a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fe64 	bl	8006e7c <HAL_UARTEx_RxEventCallback>
 80071b4:	e002      	b.n	80071bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff fe4c 	bl	8006e54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	e002      	b.n	80071c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e000      	b.n	80071c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071c4:	2302      	movs	r3, #2
  }
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3730      	adds	r7, #48	@ 0x30
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071d4:	b0c0      	sub	sp, #256	@ 0x100
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ec:	68d9      	ldr	r1, [r3, #12]
 80071ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	ea40 0301 	orr.w	r3, r0, r1
 80071f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	431a      	orrs	r2, r3
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	431a      	orrs	r2, r3
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007228:	f021 010c 	bic.w	r1, r1, #12
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007236:	430b      	orrs	r3, r1
 8007238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800723a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724a:	6999      	ldr	r1, [r3, #24]
 800724c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	ea40 0301 	orr.w	r3, r0, r1
 8007256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	4b8f      	ldr	r3, [pc, #572]	@ (800749c <UART_SetConfig+0x2cc>)
 8007260:	429a      	cmp	r2, r3
 8007262:	d005      	beq.n	8007270 <UART_SetConfig+0xa0>
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b8d      	ldr	r3, [pc, #564]	@ (80074a0 <UART_SetConfig+0x2d0>)
 800726c:	429a      	cmp	r2, r3
 800726e:	d104      	bne.n	800727a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007270:	f7fc fe66 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8007274:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007278:	e003      	b.n	8007282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800727a:	f7fc fe4d 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 800727e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800728c:	f040 810c 	bne.w	80074a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007294:	2200      	movs	r2, #0
 8007296:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800729a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800729e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072a2:	4622      	mov	r2, r4
 80072a4:	462b      	mov	r3, r5
 80072a6:	1891      	adds	r1, r2, r2
 80072a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072aa:	415b      	adcs	r3, r3
 80072ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072b2:	4621      	mov	r1, r4
 80072b4:	eb12 0801 	adds.w	r8, r2, r1
 80072b8:	4629      	mov	r1, r5
 80072ba:	eb43 0901 	adc.w	r9, r3, r1
 80072be:	f04f 0200 	mov.w	r2, #0
 80072c2:	f04f 0300 	mov.w	r3, #0
 80072c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072d2:	4690      	mov	r8, r2
 80072d4:	4699      	mov	r9, r3
 80072d6:	4623      	mov	r3, r4
 80072d8:	eb18 0303 	adds.w	r3, r8, r3
 80072dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072e0:	462b      	mov	r3, r5
 80072e2:	eb49 0303 	adc.w	r3, r9, r3
 80072e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80072fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072fe:	460b      	mov	r3, r1
 8007300:	18db      	adds	r3, r3, r3
 8007302:	653b      	str	r3, [r7, #80]	@ 0x50
 8007304:	4613      	mov	r3, r2
 8007306:	eb42 0303 	adc.w	r3, r2, r3
 800730a:	657b      	str	r3, [r7, #84]	@ 0x54
 800730c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007310:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007314:	f7f8 ff58 	bl	80001c8 <__aeabi_uldivmod>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4b61      	ldr	r3, [pc, #388]	@ (80074a4 <UART_SetConfig+0x2d4>)
 800731e:	fba3 2302 	umull	r2, r3, r3, r2
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	011c      	lsls	r4, r3, #4
 8007326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800732a:	2200      	movs	r2, #0
 800732c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007330:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007334:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007338:	4642      	mov	r2, r8
 800733a:	464b      	mov	r3, r9
 800733c:	1891      	adds	r1, r2, r2
 800733e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007340:	415b      	adcs	r3, r3
 8007342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007348:	4641      	mov	r1, r8
 800734a:	eb12 0a01 	adds.w	sl, r2, r1
 800734e:	4649      	mov	r1, r9
 8007350:	eb43 0b01 	adc.w	fp, r3, r1
 8007354:	f04f 0200 	mov.w	r2, #0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007360:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007368:	4692      	mov	sl, r2
 800736a:	469b      	mov	fp, r3
 800736c:	4643      	mov	r3, r8
 800736e:	eb1a 0303 	adds.w	r3, sl, r3
 8007372:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007376:	464b      	mov	r3, r9
 8007378:	eb4b 0303 	adc.w	r3, fp, r3
 800737c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800738c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007390:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007394:	460b      	mov	r3, r1
 8007396:	18db      	adds	r3, r3, r3
 8007398:	643b      	str	r3, [r7, #64]	@ 0x40
 800739a:	4613      	mov	r3, r2
 800739c:	eb42 0303 	adc.w	r3, r2, r3
 80073a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80073a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073aa:	f7f8 ff0d 	bl	80001c8 <__aeabi_uldivmod>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4611      	mov	r1, r2
 80073b4:	4b3b      	ldr	r3, [pc, #236]	@ (80074a4 <UART_SetConfig+0x2d4>)
 80073b6:	fba3 2301 	umull	r2, r3, r3, r1
 80073ba:	095b      	lsrs	r3, r3, #5
 80073bc:	2264      	movs	r2, #100	@ 0x64
 80073be:	fb02 f303 	mul.w	r3, r2, r3
 80073c2:	1acb      	subs	r3, r1, r3
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073ca:	4b36      	ldr	r3, [pc, #216]	@ (80074a4 <UART_SetConfig+0x2d4>)
 80073cc:	fba3 2302 	umull	r2, r3, r3, r2
 80073d0:	095b      	lsrs	r3, r3, #5
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80073d8:	441c      	add	r4, r3
 80073da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80073e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80073ec:	4642      	mov	r2, r8
 80073ee:	464b      	mov	r3, r9
 80073f0:	1891      	adds	r1, r2, r2
 80073f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80073f4:	415b      	adcs	r3, r3
 80073f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80073fc:	4641      	mov	r1, r8
 80073fe:	1851      	adds	r1, r2, r1
 8007400:	6339      	str	r1, [r7, #48]	@ 0x30
 8007402:	4649      	mov	r1, r9
 8007404:	414b      	adcs	r3, r1
 8007406:	637b      	str	r3, [r7, #52]	@ 0x34
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	f04f 0300 	mov.w	r3, #0
 8007410:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007414:	4659      	mov	r1, fp
 8007416:	00cb      	lsls	r3, r1, #3
 8007418:	4651      	mov	r1, sl
 800741a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800741e:	4651      	mov	r1, sl
 8007420:	00ca      	lsls	r2, r1, #3
 8007422:	4610      	mov	r0, r2
 8007424:	4619      	mov	r1, r3
 8007426:	4603      	mov	r3, r0
 8007428:	4642      	mov	r2, r8
 800742a:	189b      	adds	r3, r3, r2
 800742c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007430:	464b      	mov	r3, r9
 8007432:	460a      	mov	r2, r1
 8007434:	eb42 0303 	adc.w	r3, r2, r3
 8007438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800743c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007448:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800744c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007450:	460b      	mov	r3, r1
 8007452:	18db      	adds	r3, r3, r3
 8007454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007456:	4613      	mov	r3, r2
 8007458:	eb42 0303 	adc.w	r3, r2, r3
 800745c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800745e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007462:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007466:	f7f8 feaf 	bl	80001c8 <__aeabi_uldivmod>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	4b0d      	ldr	r3, [pc, #52]	@ (80074a4 <UART_SetConfig+0x2d4>)
 8007470:	fba3 1302 	umull	r1, r3, r3, r2
 8007474:	095b      	lsrs	r3, r3, #5
 8007476:	2164      	movs	r1, #100	@ 0x64
 8007478:	fb01 f303 	mul.w	r3, r1, r3
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	3332      	adds	r3, #50	@ 0x32
 8007482:	4a08      	ldr	r2, [pc, #32]	@ (80074a4 <UART_SetConfig+0x2d4>)
 8007484:	fba2 2303 	umull	r2, r3, r2, r3
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	f003 0207 	and.w	r2, r3, #7
 800748e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4422      	add	r2, r4
 8007496:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007498:	e106      	b.n	80076a8 <UART_SetConfig+0x4d8>
 800749a:	bf00      	nop
 800749c:	40011000 	.word	0x40011000
 80074a0:	40011400 	.word	0x40011400
 80074a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074ba:	4642      	mov	r2, r8
 80074bc:	464b      	mov	r3, r9
 80074be:	1891      	adds	r1, r2, r2
 80074c0:	6239      	str	r1, [r7, #32]
 80074c2:	415b      	adcs	r3, r3
 80074c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074ca:	4641      	mov	r1, r8
 80074cc:	1854      	adds	r4, r2, r1
 80074ce:	4649      	mov	r1, r9
 80074d0:	eb43 0501 	adc.w	r5, r3, r1
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	00eb      	lsls	r3, r5, #3
 80074de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074e2:	00e2      	lsls	r2, r4, #3
 80074e4:	4614      	mov	r4, r2
 80074e6:	461d      	mov	r5, r3
 80074e8:	4643      	mov	r3, r8
 80074ea:	18e3      	adds	r3, r4, r3
 80074ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074f0:	464b      	mov	r3, r9
 80074f2:	eb45 0303 	adc.w	r3, r5, r3
 80074f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007506:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007516:	4629      	mov	r1, r5
 8007518:	008b      	lsls	r3, r1, #2
 800751a:	4621      	mov	r1, r4
 800751c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007520:	4621      	mov	r1, r4
 8007522:	008a      	lsls	r2, r1, #2
 8007524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007528:	f7f8 fe4e 	bl	80001c8 <__aeabi_uldivmod>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4b60      	ldr	r3, [pc, #384]	@ (80076b4 <UART_SetConfig+0x4e4>)
 8007532:	fba3 2302 	umull	r2, r3, r3, r2
 8007536:	095b      	lsrs	r3, r3, #5
 8007538:	011c      	lsls	r4, r3, #4
 800753a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800753e:	2200      	movs	r2, #0
 8007540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007544:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007548:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800754c:	4642      	mov	r2, r8
 800754e:	464b      	mov	r3, r9
 8007550:	1891      	adds	r1, r2, r2
 8007552:	61b9      	str	r1, [r7, #24]
 8007554:	415b      	adcs	r3, r3
 8007556:	61fb      	str	r3, [r7, #28]
 8007558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800755c:	4641      	mov	r1, r8
 800755e:	1851      	adds	r1, r2, r1
 8007560:	6139      	str	r1, [r7, #16]
 8007562:	4649      	mov	r1, r9
 8007564:	414b      	adcs	r3, r1
 8007566:	617b      	str	r3, [r7, #20]
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007574:	4659      	mov	r1, fp
 8007576:	00cb      	lsls	r3, r1, #3
 8007578:	4651      	mov	r1, sl
 800757a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800757e:	4651      	mov	r1, sl
 8007580:	00ca      	lsls	r2, r1, #3
 8007582:	4610      	mov	r0, r2
 8007584:	4619      	mov	r1, r3
 8007586:	4603      	mov	r3, r0
 8007588:	4642      	mov	r2, r8
 800758a:	189b      	adds	r3, r3, r2
 800758c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007590:	464b      	mov	r3, r9
 8007592:	460a      	mov	r2, r1
 8007594:	eb42 0303 	adc.w	r3, r2, r3
 8007598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800759c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075a8:	f04f 0200 	mov.w	r2, #0
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075b4:	4649      	mov	r1, r9
 80075b6:	008b      	lsls	r3, r1, #2
 80075b8:	4641      	mov	r1, r8
 80075ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075be:	4641      	mov	r1, r8
 80075c0:	008a      	lsls	r2, r1, #2
 80075c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075c6:	f7f8 fdff 	bl	80001c8 <__aeabi_uldivmod>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	4b38      	ldr	r3, [pc, #224]	@ (80076b4 <UART_SetConfig+0x4e4>)
 80075d2:	fba3 2301 	umull	r2, r3, r3, r1
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	2264      	movs	r2, #100	@ 0x64
 80075da:	fb02 f303 	mul.w	r3, r2, r3
 80075de:	1acb      	subs	r3, r1, r3
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	3332      	adds	r3, #50	@ 0x32
 80075e4:	4a33      	ldr	r2, [pc, #204]	@ (80076b4 <UART_SetConfig+0x4e4>)
 80075e6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075f0:	441c      	add	r4, r3
 80075f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075f6:	2200      	movs	r2, #0
 80075f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80075fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80075fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007600:	4642      	mov	r2, r8
 8007602:	464b      	mov	r3, r9
 8007604:	1891      	adds	r1, r2, r2
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	415b      	adcs	r3, r3
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007610:	4641      	mov	r1, r8
 8007612:	1851      	adds	r1, r2, r1
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	4649      	mov	r1, r9
 8007618:	414b      	adcs	r3, r1
 800761a:	607b      	str	r3, [r7, #4]
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007628:	4659      	mov	r1, fp
 800762a:	00cb      	lsls	r3, r1, #3
 800762c:	4651      	mov	r1, sl
 800762e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007632:	4651      	mov	r1, sl
 8007634:	00ca      	lsls	r2, r1, #3
 8007636:	4610      	mov	r0, r2
 8007638:	4619      	mov	r1, r3
 800763a:	4603      	mov	r3, r0
 800763c:	4642      	mov	r2, r8
 800763e:	189b      	adds	r3, r3, r2
 8007640:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007642:	464b      	mov	r3, r9
 8007644:	460a      	mov	r2, r1
 8007646:	eb42 0303 	adc.w	r3, r2, r3
 800764a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800764c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	663b      	str	r3, [r7, #96]	@ 0x60
 8007656:	667a      	str	r2, [r7, #100]	@ 0x64
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007664:	4649      	mov	r1, r9
 8007666:	008b      	lsls	r3, r1, #2
 8007668:	4641      	mov	r1, r8
 800766a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800766e:	4641      	mov	r1, r8
 8007670:	008a      	lsls	r2, r1, #2
 8007672:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007676:	f7f8 fda7 	bl	80001c8 <__aeabi_uldivmod>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4b0d      	ldr	r3, [pc, #52]	@ (80076b4 <UART_SetConfig+0x4e4>)
 8007680:	fba3 1302 	umull	r1, r3, r3, r2
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	2164      	movs	r1, #100	@ 0x64
 8007688:	fb01 f303 	mul.w	r3, r1, r3
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	3332      	adds	r3, #50	@ 0x32
 8007692:	4a08      	ldr	r2, [pc, #32]	@ (80076b4 <UART_SetConfig+0x4e4>)
 8007694:	fba2 2303 	umull	r2, r3, r2, r3
 8007698:	095b      	lsrs	r3, r3, #5
 800769a:	f003 020f 	and.w	r2, r3, #15
 800769e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4422      	add	r2, r4
 80076a6:	609a      	str	r2, [r3, #8]
}
 80076a8:	bf00      	nop
 80076aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076ae:	46bd      	mov	sp, r7
 80076b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076b4:	51eb851f 	.word	0x51eb851f

080076b8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80076b8:	b084      	sub	sp, #16
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	f107 001c 	add.w	r0, r7, #28
 80076c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80076ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80076d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80076d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80076d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80076d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80076da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80076dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80076de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80076e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80076f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	431a      	orrs	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	b004      	add	sp, #16
 800770c:	4770      	bx	lr

0800770e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2203      	movs	r2, #3
 8007756:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0303 	and.w	r3, r3, #3
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077a0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80077a6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80077ac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80077bc:	f023 030f 	bic.w	r3, r3, #15
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b083      	sub	sp, #12
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	b2db      	uxtb	r3, r3
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3314      	adds	r3, #20
 80077fe:	461a      	mov	r2, r3
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	4413      	add	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
}  
 800780a:	4618      	mov	r0, r3
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800783c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007842:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007848:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007854:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	431a      	orrs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007860:	2300      	movs	r3, #0

}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b088      	sub	sp, #32
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800787c:	2310      	movs	r3, #16
 800787e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007880:	2340      	movs	r3, #64	@ 0x40
 8007882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007884:	2300      	movs	r3, #0
 8007886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800788c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800788e:	f107 0308 	add.w	r3, r7, #8
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff ff74 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800789a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800789e:	2110      	movs	r1, #16
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9d7 	bl	8007c54 <SDMMC_GetCmdResp1>
 80078a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078a8:	69fb      	ldr	r3, [r7, #28]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3720      	adds	r7, #32
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b088      	sub	sp, #32
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80078c0:	2311      	movs	r3, #17
 80078c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078c4:	2340      	movs	r3, #64	@ 0x40
 80078c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078d2:	f107 0308 	add.w	r3, r7, #8
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff ff52 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80078de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078e2:	2111      	movs	r1, #17
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f9b5 	bl	8007c54 <SDMMC_GetCmdResp1>
 80078ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078ec:	69fb      	ldr	r3, [r7, #28]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3720      	adds	r7, #32
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b088      	sub	sp, #32
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007904:	2312      	movs	r3, #18
 8007906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007908:	2340      	movs	r3, #64	@ 0x40
 800790a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007914:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007916:	f107 0308 	add.w	r3, r7, #8
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff ff30 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007926:	2112      	movs	r1, #18
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f993 	bl	8007c54 <SDMMC_GetCmdResp1>
 800792e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007930:	69fb      	ldr	r3, [r7, #28]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3720      	adds	r7, #32
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b088      	sub	sp, #32
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007948:	2318      	movs	r3, #24
 800794a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800794c:	2340      	movs	r3, #64	@ 0x40
 800794e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007954:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007958:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800795a:	f107 0308 	add.w	r3, r7, #8
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff ff0e 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800796a:	2118      	movs	r1, #24
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f971 	bl	8007c54 <SDMMC_GetCmdResp1>
 8007972:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007974:	69fb      	ldr	r3, [r7, #28]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3720      	adds	r7, #32
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b088      	sub	sp, #32
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800798c:	2319      	movs	r3, #25
 800798e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007990:	2340      	movs	r3, #64	@ 0x40
 8007992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800799c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800799e:	f107 0308 	add.w	r3, r7, #8
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff feec 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80079aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ae:	2119      	movs	r1, #25
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f94f 	bl	8007c54 <SDMMC_GetCmdResp1>
 80079b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079b8:	69fb      	ldr	r3, [r7, #28]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3720      	adds	r7, #32
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80079d0:	230c      	movs	r3, #12
 80079d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079d4:	2340      	movs	r3, #64	@ 0x40
 80079d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079e2:	f107 0308 	add.w	r3, r7, #8
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff feca 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80079ee:	4a05      	ldr	r2, [pc, #20]	@ (8007a04 <SDMMC_CmdStopTransfer+0x40>)
 80079f0:	210c      	movs	r1, #12
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f92e 	bl	8007c54 <SDMMC_GetCmdResp1>
 80079f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079fa:	69fb      	ldr	r3, [r7, #28]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3720      	adds	r7, #32
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	05f5e100 	.word	0x05f5e100

08007a08 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	@ 0x28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007a18:	2307      	movs	r3, #7
 8007a1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a1c:	2340      	movs	r3, #64	@ 0x40
 8007a1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a28:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a2a:	f107 0310 	add.w	r3, r7, #16
 8007a2e:	4619      	mov	r1, r3
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f7ff fea6 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a3a:	2107      	movs	r1, #7
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f909 	bl	8007c54 <SDMMC_GetCmdResp1>
 8007a42:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3728      	adds	r7, #40	@ 0x28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b088      	sub	sp, #32
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a62:	2300      	movs	r3, #0
 8007a64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a6c:	f107 0308 	add.w	r3, r7, #8
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff fe85 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fb23 	bl	80080c4 <SDMMC_GetCmdError>
 8007a7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a80:	69fb      	ldr	r3, [r7, #28]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b088      	sub	sp, #32
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007a92:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007a96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007a98:	2308      	movs	r3, #8
 8007a9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a9c:	2340      	movs	r3, #64	@ 0x40
 8007a9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007aa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007aaa:	f107 0308 	add.w	r3, r7, #8
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff fe66 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fab6 	bl	8008028 <SDMMC_GetCmdResp7>
 8007abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007abe:	69fb      	ldr	r3, [r7, #28]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007ad6:	2337      	movs	r3, #55	@ 0x37
 8007ad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ada:	2340      	movs	r3, #64	@ 0x40
 8007adc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ae6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ae8:	f107 0308 	add.w	r3, r7, #8
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff fe47 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007af8:	2137      	movs	r1, #55	@ 0x37
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f8aa 	bl	8007c54 <SDMMC_GetCmdResp1>
 8007b00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b02:	69fb      	ldr	r3, [r7, #28]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3720      	adds	r7, #32
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007b22:	2329      	movs	r3, #41	@ 0x29
 8007b24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b26:	2340      	movs	r3, #64	@ 0x40
 8007b28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b34:	f107 0308 	add.w	r3, r7, #8
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff fe21 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f9bd 	bl	8007ec0 <SDMMC_GetCmdResp3>
 8007b46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b48:	69fb      	ldr	r3, [r7, #28]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3720      	adds	r7, #32
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b088      	sub	sp, #32
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007b62:	23c0      	movs	r3, #192	@ 0xc0
 8007b64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b66:	2300      	movs	r3, #0
 8007b68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b70:	f107 0308 	add.w	r3, r7, #8
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7ff fe03 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f957 	bl	8007e30 <SDMMC_GetCmdResp2>
 8007b82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b84:	69fb      	ldr	r3, [r7, #28]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b088      	sub	sp, #32
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007b9c:	2309      	movs	r3, #9
 8007b9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007ba0:	23c0      	movs	r3, #192	@ 0xc0
 8007ba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ba8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bae:	f107 0308 	add.w	r3, r7, #8
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fde4 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f938 	bl	8007e30 <SDMMC_GetCmdResp2>
 8007bc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3720      	adds	r7, #32
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bde:	2340      	movs	r3, #64	@ 0x40
 8007be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bec:	f107 0308 	add.w	r3, r7, #8
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff fdc5 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	2103      	movs	r1, #3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f99d 	bl	8007f3c <SDMMC_GetCmdResp6>
 8007c02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c04:	69fb      	ldr	r3, [r7, #28]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3720      	adds	r7, #32
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b088      	sub	sp, #32
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007c1c:	230d      	movs	r3, #13
 8007c1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c20:	2340      	movs	r3, #64	@ 0x40
 8007c22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c2e:	f107 0308 	add.w	r3, r7, #8
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff fda4 	bl	8007782 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c3e:	210d      	movs	r1, #13
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f807 	bl	8007c54 <SDMMC_GetCmdResp1>
 8007c46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c48:	69fb      	ldr	r3, [r7, #28]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3720      	adds	r7, #32
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c62:	4b70      	ldr	r3, [pc, #448]	@ (8007e24 <SDMMC_GetCmdResp1+0x1d0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a70      	ldr	r2, [pc, #448]	@ (8007e28 <SDMMC_GetCmdResp1+0x1d4>)
 8007c68:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6c:	0a5a      	lsrs	r2, r3, #9
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	fb02 f303 	mul.w	r3, r2, r3
 8007c74:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	1e5a      	subs	r2, r3, #1
 8007c7a:	61fa      	str	r2, [r7, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c84:	e0c9      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c8a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0ef      	beq.n	8007c76 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1ea      	bne.n	8007c76 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2204      	movs	r2, #4
 8007cb0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cb2:	2304      	movs	r3, #4
 8007cb4:	e0b1      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e0a6      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	22c5      	movs	r2, #197	@ 0xc5
 8007cd0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f7ff fd7f 	bl	80077d6 <SDIO_GetCommandResponse>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	461a      	mov	r2, r3
 8007cdc:	7afb      	ldrb	r3, [r7, #11]
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d001      	beq.n	8007ce6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e099      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff fd81 	bl	80077f0 <SDIO_GetResponse>
 8007cee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8007e2c <SDMMC_GetCmdResp1+0x1d8>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e08d      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	da02      	bge.n	8007d0a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007d04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d08:	e087      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007d14:	2340      	movs	r3, #64	@ 0x40
 8007d16:	e080      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007d22:	2380      	movs	r3, #128	@ 0x80
 8007d24:	e079      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007d30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d34:	e071      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d44:	e069      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007d50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d54:	e061      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007d60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d64:	e059      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007d74:	e051      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007d80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d84:	e049      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007d90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d94:	e041      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007da0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007da4:	e039      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007db0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007db4:	e031      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007dc0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007dc4:	e029      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007dd0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007dd4:	e021      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007de0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007de4:	e019      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007df0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007df4:	e011      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007e00:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007e04:	e009      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f003 0308 	and.w	r3, r3, #8
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007e10:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007e14:	e001      	b.n	8007e1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3720      	adds	r7, #32
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	2000000c 	.word	0x2000000c
 8007e28:	10624dd3 	.word	0x10624dd3
 8007e2c:	fdffe008 	.word	0xfdffe008

08007e30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e38:	4b1f      	ldr	r3, [pc, #124]	@ (8007eb8 <SDMMC_GetCmdResp2+0x88>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007ebc <SDMMC_GetCmdResp2+0x8c>)
 8007e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e42:	0a5b      	lsrs	r3, r3, #9
 8007e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e48:	fb02 f303 	mul.w	r3, r2, r3
 8007e4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	1e5a      	subs	r2, r3, #1
 8007e52:	60fa      	str	r2, [r7, #12]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d102      	bne.n	8007e5e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007e5c:	e026      	b.n	8007eac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0ef      	beq.n	8007e4e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1ea      	bne.n	8007e4e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2204      	movs	r2, #4
 8007e88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e8a:	2304      	movs	r3, #4
 8007e8c:	e00e      	b.n	8007eac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e003      	b.n	8007eac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	22c5      	movs	r2, #197	@ 0xc5
 8007ea8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	2000000c 	.word	0x2000000c
 8007ebc:	10624dd3 	.word	0x10624dd3

08007ec0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8007f34 <SDMMC_GetCmdResp3+0x74>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8007f38 <SDMMC_GetCmdResp3+0x78>)
 8007ece:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed2:	0a5b      	lsrs	r3, r3, #9
 8007ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ed8:	fb02 f303 	mul.w	r3, r2, r3
 8007edc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	1e5a      	subs	r2, r3, #1
 8007ee2:	60fa      	str	r2, [r7, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d102      	bne.n	8007eee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ee8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007eec:	e01b      	b.n	8007f26 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0ef      	beq.n	8007ede <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1ea      	bne.n	8007ede <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2204      	movs	r2, #4
 8007f18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f1a:	2304      	movs	r3, #4
 8007f1c:	e003      	b.n	8007f26 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	22c5      	movs	r2, #197	@ 0xc5
 8007f22:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	2000000c 	.word	0x2000000c
 8007f38:	10624dd3 	.word	0x10624dd3

08007f3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	460b      	mov	r3, r1
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f4a:	4b35      	ldr	r3, [pc, #212]	@ (8008020 <SDMMC_GetCmdResp6+0xe4>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a35      	ldr	r2, [pc, #212]	@ (8008024 <SDMMC_GetCmdResp6+0xe8>)
 8007f50:	fba2 2303 	umull	r2, r3, r2, r3
 8007f54:	0a5b      	lsrs	r3, r3, #9
 8007f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f5a:	fb02 f303 	mul.w	r3, r2, r3
 8007f5e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	1e5a      	subs	r2, r3, #1
 8007f64:	61fa      	str	r2, [r7, #28]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d102      	bne.n	8007f70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f6e:	e052      	b.n	8008016 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f74:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0ef      	beq.n	8007f60 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1ea      	bne.n	8007f60 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8e:	f003 0304 	and.w	r3, r3, #4
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2204      	movs	r2, #4
 8007f9a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	e03a      	b.n	8008016 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e02f      	b.n	8008016 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7ff fc0d 	bl	80077d6 <SDIO_GetCommandResponse>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	7afb      	ldrb	r3, [r7, #11]
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d001      	beq.n	8007fca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e025      	b.n	8008016 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	22c5      	movs	r2, #197	@ 0xc5
 8007fce:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f7ff fc0c 	bl	80077f0 <SDIO_GetResponse>
 8007fd8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d106      	bne.n	8007ff2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	0c1b      	lsrs	r3, r3, #16
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e011      	b.n	8008016 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008000:	e009      	b.n	8008016 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800800c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008010:	e001      	b.n	8008016 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008012:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008016:	4618      	mov	r0, r3
 8008018:	3720      	adds	r7, #32
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	2000000c 	.word	0x2000000c
 8008024:	10624dd3 	.word	0x10624dd3

08008028 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008030:	4b22      	ldr	r3, [pc, #136]	@ (80080bc <SDMMC_GetCmdResp7+0x94>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a22      	ldr	r2, [pc, #136]	@ (80080c0 <SDMMC_GetCmdResp7+0x98>)
 8008036:	fba2 2303 	umull	r2, r3, r2, r3
 800803a:	0a5b      	lsrs	r3, r3, #9
 800803c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008040:	fb02 f303 	mul.w	r3, r2, r3
 8008044:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1e5a      	subs	r2, r3, #1
 800804a:	60fa      	str	r2, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008050:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008054:	e02c      	b.n	80080b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800805a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0ef      	beq.n	8008046 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1ea      	bne.n	8008046 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b00      	cmp	r3, #0
 800807a:	d004      	beq.n	8008086 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2204      	movs	r2, #4
 8008080:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008082:	2304      	movs	r3, #4
 8008084:	e014      	b.n	80080b0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	d004      	beq.n	800809c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008098:	2301      	movs	r3, #1
 800809a:	e009      	b.n	80080b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2240      	movs	r2, #64	@ 0x40
 80080ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80080ae:	2300      	movs	r3, #0
  
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	2000000c 	.word	0x2000000c
 80080c0:	10624dd3 	.word	0x10624dd3

080080c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080cc:	4b11      	ldr	r3, [pc, #68]	@ (8008114 <SDMMC_GetCmdError+0x50>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a11      	ldr	r2, [pc, #68]	@ (8008118 <SDMMC_GetCmdError+0x54>)
 80080d2:	fba2 2303 	umull	r2, r3, r2, r3
 80080d6:	0a5b      	lsrs	r3, r3, #9
 80080d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080dc:	fb02 f303 	mul.w	r3, r2, r3
 80080e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	1e5a      	subs	r2, r3, #1
 80080e6:	60fa      	str	r2, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80080f0:	e009      	b.n	8008106 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0f1      	beq.n	80080e2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	22c5      	movs	r2, #197	@ 0xc5
 8008102:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	2000000c 	.word	0x2000000c
 8008118:	10624dd3 	.word	0x10624dd3

0800811c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008120:	4904      	ldr	r1, [pc, #16]	@ (8008134 <MX_FATFS_Init+0x18>)
 8008122:	4805      	ldr	r0, [pc, #20]	@ (8008138 <MX_FATFS_Init+0x1c>)
 8008124:	f002 fcf0 	bl	800ab08 <FATFS_LinkDriver>
 8008128:	4603      	mov	r3, r0
 800812a:	461a      	mov	r2, r3
 800812c:	4b03      	ldr	r3, [pc, #12]	@ (800813c <MX_FATFS_Init+0x20>)
 800812e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008130:	bf00      	nop
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20002570 	.word	0x20002570
 8008138:	0800bc7c 	.word	0x0800bc7c
 800813c:	2000256c 	.word	0x2000256c

08008140 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008144:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008146:	4618      	mov	r0, r3
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800815a:	f000 f86b 	bl	8008234 <BSP_SD_IsDetected>
 800815e:	4603      	mov	r3, r0
 8008160:	2b01      	cmp	r3, #1
 8008162:	d001      	beq.n	8008168 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e005      	b.n	8008174 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008168:	4804      	ldr	r0, [pc, #16]	@ (800817c <BSP_SD_Init+0x2c>)
 800816a:	f7fb fefd 	bl	8003f68 <HAL_SD_Init>
 800816e:	4603      	mov	r3, r0
 8008170:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008172:	79fb      	ldrb	r3, [r7, #7]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	200000f8 	.word	0x200000f8

08008180 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b088      	sub	sp, #32
 8008184:	af02      	add	r7, sp, #8
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	68f9      	ldr	r1, [r7, #12]
 800819c:	4806      	ldr	r0, [pc, #24]	@ (80081b8 <BSP_SD_ReadBlocks+0x38>)
 800819e:	f7fb ff93 	bl	80040c8 <HAL_SD_ReadBlocks>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200000f8 	.word	0x200000f8

080081bc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af02      	add	r7, sp, #8
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	4806      	ldr	r0, [pc, #24]	@ (80081f4 <BSP_SD_WriteBlocks+0x38>)
 80081da:	f7fc f95b 	bl	8004494 <HAL_SD_WriteBlocks>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	200000f8 	.word	0x200000f8

080081f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80081fc:	4805      	ldr	r0, [pc, #20]	@ (8008214 <BSP_SD_GetCardState+0x1c>)
 80081fe:	f7fc fca7 	bl	8004b50 <HAL_SD_GetCardState>
 8008202:	4603      	mov	r3, r0
 8008204:	2b04      	cmp	r3, #4
 8008206:	bf14      	ite	ne
 8008208:	2301      	movne	r3, #1
 800820a:	2300      	moveq	r3, #0
 800820c:	b2db      	uxtb	r3, r3
}
 800820e:	4618      	mov	r0, r3
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	200000f8 	.word	0x200000f8

08008218 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	4803      	ldr	r0, [pc, #12]	@ (8008230 <BSP_SD_GetCardInfo+0x18>)
 8008224:	f7fc fc68 	bl	8004af8 <HAL_SD_GetCardInfo>
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	200000f8 	.word	0x200000f8

08008234 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800823a:	2301      	movs	r3, #1
 800823c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	b2db      	uxtb	r3, r3
}
 8008242:	4618      	mov	r0, r3
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
	...

08008250 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800825a:	4b0b      	ldr	r3, [pc, #44]	@ (8008288 <SD_CheckStatus+0x38>)
 800825c:	2201      	movs	r2, #1
 800825e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008260:	f7ff ffca 	bl	80081f8 <BSP_SD_GetCardState>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d107      	bne.n	800827a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800826a:	4b07      	ldr	r3, [pc, #28]	@ (8008288 <SD_CheckStatus+0x38>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	f023 0301 	bic.w	r3, r3, #1
 8008274:	b2da      	uxtb	r2, r3
 8008276:	4b04      	ldr	r3, [pc, #16]	@ (8008288 <SD_CheckStatus+0x38>)
 8008278:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800827a:	4b03      	ldr	r3, [pc, #12]	@ (8008288 <SD_CheckStatus+0x38>)
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	b2db      	uxtb	r3, r3
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20000015 	.word	0x20000015

0800828c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008296:	4b0b      	ldr	r3, [pc, #44]	@ (80082c4 <SD_initialize+0x38>)
 8008298:	2201      	movs	r2, #1
 800829a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800829c:	f7ff ff58 	bl	8008150 <BSP_SD_Init>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d107      	bne.n	80082b6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff ffd1 	bl	8008250 <SD_CheckStatus>
 80082ae:	4603      	mov	r3, r0
 80082b0:	461a      	mov	r2, r3
 80082b2:	4b04      	ldr	r3, [pc, #16]	@ (80082c4 <SD_initialize+0x38>)
 80082b4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80082b6:	4b03      	ldr	r3, [pc, #12]	@ (80082c4 <SD_initialize+0x38>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	b2db      	uxtb	r3, r3
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	20000015 	.word	0x20000015

080082c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff ffbb 	bl	8008250 <SD_CheckStatus>
 80082da:	4603      	mov	r3, r0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	607a      	str	r2, [r7, #4]
 80082ee:	603b      	str	r3, [r7, #0]
 80082f0:	4603      	mov	r3, r0
 80082f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80082f8:	f04f 33ff 	mov.w	r3, #4294967295
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	68b8      	ldr	r0, [r7, #8]
 8008302:	f7ff ff3d 	bl	8008180 <BSP_SD_ReadBlocks>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d107      	bne.n	800831c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800830c:	bf00      	nop
 800830e:	f7ff ff73 	bl	80081f8 <BSP_SD_GetCardState>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1fa      	bne.n	800830e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800831c:	7dfb      	ldrb	r3, [r7, #23]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800833a:	f04f 33ff 	mov.w	r3, #4294967295
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	68b8      	ldr	r0, [r7, #8]
 8008344:	f7ff ff3a 	bl	80081bc <BSP_SD_WriteBlocks>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d107      	bne.n	800835e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800834e:	bf00      	nop
 8008350:	f7ff ff52 	bl	80081f8 <BSP_SD_GetCardState>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1fa      	bne.n	8008350 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800835e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08c      	sub	sp, #48	@ 0x30
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	603a      	str	r2, [r7, #0]
 8008372:	71fb      	strb	r3, [r7, #7]
 8008374:	460b      	mov	r3, r1
 8008376:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800837e:	4b25      	ldr	r3, [pc, #148]	@ (8008414 <SD_ioctl+0xac>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <SD_ioctl+0x28>
 800838c:	2303      	movs	r3, #3
 800838e:	e03c      	b.n	800840a <SD_ioctl+0xa2>

  switch (cmd)
 8008390:	79bb      	ldrb	r3, [r7, #6]
 8008392:	2b03      	cmp	r3, #3
 8008394:	d834      	bhi.n	8008400 <SD_ioctl+0x98>
 8008396:	a201      	add	r2, pc, #4	@ (adr r2, 800839c <SD_ioctl+0x34>)
 8008398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839c:	080083ad 	.word	0x080083ad
 80083a0:	080083b5 	.word	0x080083b5
 80083a4:	080083cd 	.word	0x080083cd
 80083a8:	080083e7 	.word	0x080083e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80083b2:	e028      	b.n	8008406 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80083b4:	f107 030c 	add.w	r3, r7, #12
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff ff2d 	bl	8008218 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80083be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80083ca:	e01c      	b.n	8008406 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80083cc:	f107 030c 	add.w	r3, r7, #12
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff ff21 	bl	8008218 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80083d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d8:	b29a      	uxth	r2, r3
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80083e4:	e00f      	b.n	8008406 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80083e6:	f107 030c 	add.w	r3, r7, #12
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff ff14 	bl	8008218 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80083f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f2:	0a5a      	lsrs	r2, r3, #9
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80083fe:	e002      	b.n	8008406 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008400:	2304      	movs	r3, #4
 8008402:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8008406:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800840a:	4618      	mov	r0, r3
 800840c:	3730      	adds	r7, #48	@ 0x30
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	20000015 	.word	0x20000015

08008418 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	4a08      	ldr	r2, [pc, #32]	@ (8008448 <disk_status+0x30>)
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	79fa      	ldrb	r2, [r7, #7]
 8008430:	4905      	ldr	r1, [pc, #20]	@ (8008448 <disk_status+0x30>)
 8008432:	440a      	add	r2, r1
 8008434:	7a12      	ldrb	r2, [r2, #8]
 8008436:	4610      	mov	r0, r2
 8008438:	4798      	blx	r3
 800843a:	4603      	mov	r3, r0
 800843c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800843e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	2000259c 	.word	0x2000259c

0800844c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	4a0e      	ldr	r2, [pc, #56]	@ (8008498 <disk_initialize+0x4c>)
 800845e:	5cd3      	ldrb	r3, [r2, r3]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d114      	bne.n	800848e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	4a0c      	ldr	r2, [pc, #48]	@ (8008498 <disk_initialize+0x4c>)
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	79fa      	ldrb	r2, [r7, #7]
 8008472:	4909      	ldr	r1, [pc, #36]	@ (8008498 <disk_initialize+0x4c>)
 8008474:	440a      	add	r2, r1
 8008476:	7a12      	ldrb	r2, [r2, #8]
 8008478:	4610      	mov	r0, r2
 800847a:	4798      	blx	r3
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d103      	bne.n	800848e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	4a03      	ldr	r2, [pc, #12]	@ (8008498 <disk_initialize+0x4c>)
 800848a:	2101      	movs	r1, #1
 800848c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800848e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	2000259c 	.word	0x2000259c

0800849c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800849c:	b590      	push	{r4, r7, lr}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	607a      	str	r2, [r7, #4]
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	4a0a      	ldr	r2, [pc, #40]	@ (80084d8 <disk_read+0x3c>)
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	689c      	ldr	r4, [r3, #8]
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	4a07      	ldr	r2, [pc, #28]	@ (80084d8 <disk_read+0x3c>)
 80084bc:	4413      	add	r3, r2
 80084be:	7a18      	ldrb	r0, [r3, #8]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	68b9      	ldr	r1, [r7, #8]
 80084c6:	47a0      	blx	r4
 80084c8:	4603      	mov	r3, r0
 80084ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd90      	pop	{r4, r7, pc}
 80084d6:	bf00      	nop
 80084d8:	2000259c 	.word	0x2000259c

080084dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80084dc:	b590      	push	{r4, r7, lr}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	607a      	str	r2, [r7, #4]
 80084e6:	603b      	str	r3, [r7, #0]
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008518 <disk_write+0x3c>)
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	68dc      	ldr	r4, [r3, #12]
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	4a07      	ldr	r2, [pc, #28]	@ (8008518 <disk_write+0x3c>)
 80084fc:	4413      	add	r3, r2
 80084fe:	7a18      	ldrb	r0, [r3, #8]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	47a0      	blx	r4
 8008508:	4603      	mov	r3, r0
 800850a:	75fb      	strb	r3, [r7, #23]
  return res;
 800850c:	7dfb      	ldrb	r3, [r7, #23]
}
 800850e:	4618      	mov	r0, r3
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	bd90      	pop	{r4, r7, pc}
 8008516:	bf00      	nop
 8008518:	2000259c 	.word	0x2000259c

0800851c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	4603      	mov	r3, r0
 8008524:	603a      	str	r2, [r7, #0]
 8008526:	71fb      	strb	r3, [r7, #7]
 8008528:	460b      	mov	r3, r1
 800852a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800852c:	79fb      	ldrb	r3, [r7, #7]
 800852e:	4a09      	ldr	r2, [pc, #36]	@ (8008554 <disk_ioctl+0x38>)
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	79fa      	ldrb	r2, [r7, #7]
 800853a:	4906      	ldr	r1, [pc, #24]	@ (8008554 <disk_ioctl+0x38>)
 800853c:	440a      	add	r2, r1
 800853e:	7a10      	ldrb	r0, [r2, #8]
 8008540:	79b9      	ldrb	r1, [r7, #6]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	4798      	blx	r3
 8008546:	4603      	mov	r3, r0
 8008548:	73fb      	strb	r3, [r7, #15]
  return res;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	2000259c 	.word	0x2000259c

08008558 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3301      	adds	r3, #1
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008568:	89fb      	ldrh	r3, [r7, #14]
 800856a:	021b      	lsls	r3, r3, #8
 800856c:	b21a      	sxth	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	b21b      	sxth	r3, r3
 8008574:	4313      	orrs	r3, r2
 8008576:	b21b      	sxth	r3, r3
 8008578:	81fb      	strh	r3, [r7, #14]
	return rv;
 800857a:	89fb      	ldrh	r3, [r7, #14]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3303      	adds	r3, #3
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	021b      	lsls	r3, r3, #8
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	3202      	adds	r2, #2
 80085a0:	7812      	ldrb	r2, [r2, #0]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	021b      	lsls	r3, r3, #8
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	3201      	adds	r2, #1
 80085ae:	7812      	ldrb	r2, [r2, #0]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	021b      	lsls	r3, r3, #8
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	7812      	ldrb	r2, [r2, #0]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
	return rv;
 80085c0:	68fb      	ldr	r3, [r7, #12]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	460b      	mov	r3, r1
 80085d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	887a      	ldrh	r2, [r7, #2]
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	701a      	strb	r2, [r3, #0]
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	0a1b      	lsrs	r3, r3, #8
 80085ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	607a      	str	r2, [r7, #4]
 80085f2:	887a      	ldrh	r2, [r7, #2]
 80085f4:	b2d2      	uxtb	r2, r2
 80085f6:	701a      	strb	r2, [r3, #0]
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	b2d2      	uxtb	r2, r2
 8008618:	701a      	strb	r2, [r3, #0]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	0a1b      	lsrs	r3, r3, #8
 800861e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	b2d2      	uxtb	r2, r2
 800862a:	701a      	strb	r2, [r3, #0]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	0a1b      	lsrs	r3, r3, #8
 8008630:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	b2d2      	uxtb	r2, r2
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	0a1b      	lsrs	r3, r3, #8
 8008642:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	607a      	str	r2, [r7, #4]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	b2d2      	uxtb	r2, r2
 800864e:	701a      	strb	r2, [r3, #0]
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00d      	beq.n	8008692 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	1c53      	adds	r3, r2, #1
 800867a:	613b      	str	r3, [r7, #16]
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	1c59      	adds	r1, r3, #1
 8008680:	6179      	str	r1, [r7, #20]
 8008682:	7812      	ldrb	r2, [r2, #0]
 8008684:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3b01      	subs	r3, #1
 800868a:	607b      	str	r3, [r7, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f1      	bne.n	8008676 <mem_cpy+0x1a>
	}
}
 8008692:	bf00      	nop
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800869e:	b480      	push	{r7}
 80086a0:	b087      	sub	sp, #28
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	617a      	str	r2, [r7, #20]
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	b2d2      	uxtb	r2, r2
 80086b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3b01      	subs	r3, #1
 80086be:	607b      	str	r3, [r7, #4]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1f3      	bne.n	80086ae <mem_set+0x10>
}
 80086c6:	bf00      	nop
 80086c8:	bf00      	nop
 80086ca:	371c      	adds	r7, #28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80086d4:	b480      	push	{r7}
 80086d6:	b089      	sub	sp, #36	@ 0x24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	61fa      	str	r2, [r7, #28]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	4619      	mov	r1, r3
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	61ba      	str	r2, [r7, #24]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	1acb      	subs	r3, r1, r3
 8008700:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3b01      	subs	r3, #1
 8008706:	607b      	str	r3, [r7, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <mem_cmp+0x40>
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0eb      	beq.n	80086ec <mem_cmp+0x18>

	return r;
 8008714:	697b      	ldr	r3, [r7, #20]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3724      	adds	r7, #36	@ 0x24
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800872c:	e002      	b.n	8008734 <chk_chr+0x12>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3301      	adds	r3, #1
 8008732:	607b      	str	r3, [r7, #4]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <chk_chr+0x26>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	4293      	cmp	r3, r2
 8008746:	d1f2      	bne.n	800872e <chk_chr+0xc>
	return *str;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	781b      	ldrb	r3, [r3, #0]
}
 800874c:	4618      	mov	r0, r3
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008762:	2300      	movs	r3, #0
 8008764:	60bb      	str	r3, [r7, #8]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	e029      	b.n	80087c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800876c:	4a27      	ldr	r2, [pc, #156]	@ (800880c <chk_lock+0xb4>)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	4413      	add	r3, r2
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d01d      	beq.n	80087b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800877a:	4a24      	ldr	r2, [pc, #144]	@ (800880c <chk_lock+0xb4>)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	4413      	add	r3, r2
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d116      	bne.n	80087ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800878c:	4a1f      	ldr	r2, [pc, #124]	@ (800880c <chk_lock+0xb4>)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	011b      	lsls	r3, r3, #4
 8008792:	4413      	add	r3, r2
 8008794:	3304      	adds	r3, #4
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800879c:	429a      	cmp	r2, r3
 800879e:	d10c      	bne.n	80087ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80087a0:	4a1a      	ldr	r2, [pc, #104]	@ (800880c <chk_lock+0xb4>)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	011b      	lsls	r3, r3, #4
 80087a6:	4413      	add	r3, r2
 80087a8:	3308      	adds	r3, #8
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d102      	bne.n	80087ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80087b4:	e007      	b.n	80087c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80087b6:	2301      	movs	r3, #1
 80087b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3301      	adds	r3, #1
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d9d2      	bls.n	800876c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d109      	bne.n	80087e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d102      	bne.n	80087d8 <chk_lock+0x80>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d101      	bne.n	80087dc <chk_lock+0x84>
 80087d8:	2300      	movs	r3, #0
 80087da:	e010      	b.n	80087fe <chk_lock+0xa6>
 80087dc:	2312      	movs	r3, #18
 80087de:	e00e      	b.n	80087fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d108      	bne.n	80087f8 <chk_lock+0xa0>
 80087e6:	4a09      	ldr	r2, [pc, #36]	@ (800880c <chk_lock+0xb4>)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	011b      	lsls	r3, r3, #4
 80087ec:	4413      	add	r3, r2
 80087ee:	330c      	adds	r3, #12
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087f6:	d101      	bne.n	80087fc <chk_lock+0xa4>
 80087f8:	2310      	movs	r3, #16
 80087fa:	e000      	b.n	80087fe <chk_lock+0xa6>
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	2000257c 	.word	0x2000257c

08008810 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008816:	2300      	movs	r3, #0
 8008818:	607b      	str	r3, [r7, #4]
 800881a:	e002      	b.n	8008822 <enq_lock+0x12>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3301      	adds	r3, #1
 8008820:	607b      	str	r3, [r7, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d806      	bhi.n	8008836 <enq_lock+0x26>
 8008828:	4a09      	ldr	r2, [pc, #36]	@ (8008850 <enq_lock+0x40>)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	011b      	lsls	r3, r3, #4
 800882e:	4413      	add	r3, r2
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1f2      	bne.n	800881c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b02      	cmp	r3, #2
 800883a:	bf14      	ite	ne
 800883c:	2301      	movne	r3, #1
 800883e:	2300      	moveq	r3, #0
 8008840:	b2db      	uxtb	r3, r3
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	2000257c 	.word	0x2000257c

08008854 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	e01f      	b.n	80088a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008864:	4a41      	ldr	r2, [pc, #260]	@ (800896c <inc_lock+0x118>)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	011b      	lsls	r3, r3, #4
 800886a:	4413      	add	r3, r2
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d113      	bne.n	800889e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008876:	4a3d      	ldr	r2, [pc, #244]	@ (800896c <inc_lock+0x118>)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	4413      	add	r3, r2
 800887e:	3304      	adds	r3, #4
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008886:	429a      	cmp	r2, r3
 8008888:	d109      	bne.n	800889e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800888a:	4a38      	ldr	r2, [pc, #224]	@ (800896c <inc_lock+0x118>)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	4413      	add	r3, r2
 8008892:	3308      	adds	r3, #8
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800889a:	429a      	cmp	r2, r3
 800889c:	d006      	beq.n	80088ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3301      	adds	r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d9dc      	bls.n	8008864 <inc_lock+0x10>
 80088aa:	e000      	b.n	80088ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80088ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d132      	bne.n	800891a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80088b4:	2300      	movs	r3, #0
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	e002      	b.n	80088c0 <inc_lock+0x6c>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3301      	adds	r3, #1
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d806      	bhi.n	80088d4 <inc_lock+0x80>
 80088c6:	4a29      	ldr	r2, [pc, #164]	@ (800896c <inc_lock+0x118>)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	011b      	lsls	r3, r3, #4
 80088cc:	4413      	add	r3, r2
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1f2      	bne.n	80088ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d101      	bne.n	80088de <inc_lock+0x8a>
 80088da:	2300      	movs	r3, #0
 80088dc:	e040      	b.n	8008960 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4922      	ldr	r1, [pc, #136]	@ (800896c <inc_lock+0x118>)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	011b      	lsls	r3, r3, #4
 80088e8:	440b      	add	r3, r1
 80088ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	491e      	ldr	r1, [pc, #120]	@ (800896c <inc_lock+0x118>)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	011b      	lsls	r3, r3, #4
 80088f6:	440b      	add	r3, r1
 80088f8:	3304      	adds	r3, #4
 80088fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	695a      	ldr	r2, [r3, #20]
 8008900:	491a      	ldr	r1, [pc, #104]	@ (800896c <inc_lock+0x118>)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	440b      	add	r3, r1
 8008908:	3308      	adds	r3, #8
 800890a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800890c:	4a17      	ldr	r2, [pc, #92]	@ (800896c <inc_lock+0x118>)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	4413      	add	r3, r2
 8008914:	330c      	adds	r3, #12
 8008916:	2200      	movs	r2, #0
 8008918:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d009      	beq.n	8008934 <inc_lock+0xe0>
 8008920:	4a12      	ldr	r2, [pc, #72]	@ (800896c <inc_lock+0x118>)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	4413      	add	r3, r2
 8008928:	330c      	adds	r3, #12
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <inc_lock+0xe0>
 8008930:	2300      	movs	r3, #0
 8008932:	e015      	b.n	8008960 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d108      	bne.n	800894c <inc_lock+0xf8>
 800893a:	4a0c      	ldr	r2, [pc, #48]	@ (800896c <inc_lock+0x118>)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	4413      	add	r3, r2
 8008942:	330c      	adds	r3, #12
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	3301      	adds	r3, #1
 8008948:	b29a      	uxth	r2, r3
 800894a:	e001      	b.n	8008950 <inc_lock+0xfc>
 800894c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008950:	4906      	ldr	r1, [pc, #24]	@ (800896c <inc_lock+0x118>)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	011b      	lsls	r3, r3, #4
 8008956:	440b      	add	r3, r1
 8008958:	330c      	adds	r3, #12
 800895a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3301      	adds	r3, #1
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	2000257c 	.word	0x2000257c

08008970 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3b01      	subs	r3, #1
 800897c:	607b      	str	r3, [r7, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d825      	bhi.n	80089d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008984:	4a17      	ldr	r2, [pc, #92]	@ (80089e4 <dec_lock+0x74>)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	011b      	lsls	r3, r3, #4
 800898a:	4413      	add	r3, r2
 800898c:	330c      	adds	r3, #12
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008992:	89fb      	ldrh	r3, [r7, #14]
 8008994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008998:	d101      	bne.n	800899e <dec_lock+0x2e>
 800899a:	2300      	movs	r3, #0
 800899c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800899e:	89fb      	ldrh	r3, [r7, #14]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <dec_lock+0x3a>
 80089a4:	89fb      	ldrh	r3, [r7, #14]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80089aa:	4a0e      	ldr	r2, [pc, #56]	@ (80089e4 <dec_lock+0x74>)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	4413      	add	r3, r2
 80089b2:	330c      	adds	r3, #12
 80089b4:	89fa      	ldrh	r2, [r7, #14]
 80089b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089b8:	89fb      	ldrh	r3, [r7, #14]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d105      	bne.n	80089ca <dec_lock+0x5a>
 80089be:	4a09      	ldr	r2, [pc, #36]	@ (80089e4 <dec_lock+0x74>)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	4413      	add	r3, r2
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	737b      	strb	r3, [r7, #13]
 80089ce:	e001      	b.n	80089d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80089d0:	2302      	movs	r3, #2
 80089d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80089d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	2000257c 	.word	0x2000257c

080089e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80089f0:	2300      	movs	r3, #0
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	e010      	b.n	8008a18 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80089f6:	4a0d      	ldr	r2, [pc, #52]	@ (8008a2c <clear_lock+0x44>)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	4413      	add	r3, r2
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d105      	bne.n	8008a12 <clear_lock+0x2a>
 8008a06:	4a09      	ldr	r2, [pc, #36]	@ (8008a2c <clear_lock+0x44>)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	011b      	lsls	r3, r3, #4
 8008a0c:	4413      	add	r3, r2
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3301      	adds	r3, #1
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d9eb      	bls.n	80089f6 <clear_lock+0xe>
	}
}
 8008a1e:	bf00      	nop
 8008a20:	bf00      	nop
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	2000257c 	.word	0x2000257c

08008a30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	78db      	ldrb	r3, [r3, #3]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d034      	beq.n	8008aae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	7858      	ldrb	r0, [r3, #1]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a54:	2301      	movs	r3, #1
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	f7ff fd40 	bl	80084dc <disk_write>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	73fb      	strb	r3, [r7, #15]
 8008a66:	e022      	b.n	8008aae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	1ad2      	subs	r2, r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d217      	bcs.n	8008aae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	789b      	ldrb	r3, [r3, #2]
 8008a82:	613b      	str	r3, [r7, #16]
 8008a84:	e010      	b.n	8008aa8 <sync_window+0x78>
					wsect += fs->fsize;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	7858      	ldrb	r0, [r3, #1]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	f7ff fd1d 	bl	80084dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	613b      	str	r3, [r7, #16]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d8eb      	bhi.n	8008a86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d01b      	beq.n	8008b08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff ffad 	bl	8008a30 <sync_window>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d113      	bne.n	8008b08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	7858      	ldrb	r0, [r3, #1]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008aea:	2301      	movs	r3, #1
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	f7ff fcd5 	bl	800849c <disk_read>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d004      	beq.n	8008b02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008af8:	f04f 33ff 	mov.w	r3, #4294967295
 8008afc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff ff87 	bl	8008a30 <sync_window>
 8008b22:	4603      	mov	r3, r0
 8008b24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d158      	bne.n	8008bde <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d148      	bne.n	8008bc6 <sync_fs+0xb2>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	791b      	ldrb	r3, [r3, #4]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d144      	bne.n	8008bc6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3330      	adds	r3, #48	@ 0x30
 8008b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff fda9 	bl	800869e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3330      	adds	r3, #48	@ 0x30
 8008b50:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008b54:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff fd38 	bl	80085ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3330      	adds	r3, #48	@ 0x30
 8008b62:	4921      	ldr	r1, [pc, #132]	@ (8008be8 <sync_fs+0xd4>)
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7ff fd4d 	bl	8008604 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3330      	adds	r3, #48	@ 0x30
 8008b6e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008b72:	491e      	ldr	r1, [pc, #120]	@ (8008bec <sync_fs+0xd8>)
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7ff fd45 	bl	8008604 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3330      	adds	r3, #48	@ 0x30
 8008b7e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	4619      	mov	r1, r3
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f7ff fd3b 	bl	8008604 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3330      	adds	r3, #48	@ 0x30
 8008b92:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f7ff fd31 	bl	8008604 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	7858      	ldrb	r0, [r3, #1]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f7ff fc8e 	bl	80084dc <disk_write>
			fs->fsi_flag = 0;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	785b      	ldrb	r3, [r3, #1]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2100      	movs	r1, #0
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff fca4 	bl	800851c <disk_ioctl>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <sync_fs+0xca>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	41615252 	.word	0x41615252
 8008bec:	61417272 	.word	0x61417272

08008bf0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	3b02      	subs	r3, #2
 8008bfe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	3b02      	subs	r3, #2
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d301      	bcc.n	8008c10 <clust2sect+0x20>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e008      	b.n	8008c22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	895b      	ldrh	r3, [r3, #10]
 8008c14:	461a      	mov	r2, r3
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	fb03 f202 	mul.w	r2, r3, r2
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c20:	4413      	add	r3, r2
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b086      	sub	sp, #24
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d904      	bls.n	8008c4e <get_fat+0x20>
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d302      	bcc.n	8008c54 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008c4e:	2301      	movs	r3, #1
 8008c50:	617b      	str	r3, [r7, #20]
 8008c52:	e08e      	b.n	8008d72 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008c54:	f04f 33ff 	mov.w	r3, #4294967295
 8008c58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d061      	beq.n	8008d26 <get_fat+0xf8>
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	dc7b      	bgt.n	8008d5e <get_fat+0x130>
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d002      	beq.n	8008c70 <get_fat+0x42>
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d041      	beq.n	8008cf2 <get_fat+0xc4>
 8008c6e:	e076      	b.n	8008d5e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	085b      	lsrs	r3, r3, #1
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	6a1a      	ldr	r2, [r3, #32]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	0a5b      	lsrs	r3, r3, #9
 8008c86:	4413      	add	r3, r2
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6938      	ldr	r0, [r7, #16]
 8008c8c:	f7ff ff14 	bl	8008ab8 <move_window>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d166      	bne.n	8008d64 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	60fa      	str	r2, [r7, #12]
 8008c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ca8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	6a1a      	ldr	r2, [r3, #32]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	0a5b      	lsrs	r3, r3, #9
 8008cb2:	4413      	add	r3, r2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6938      	ldr	r0, [r7, #16]
 8008cb8:	f7ff fefe 	bl	8008ab8 <move_window>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d152      	bne.n	8008d68 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008cd0:	021b      	lsls	r3, r3, #8
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <get_fat+0xba>
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	091b      	lsrs	r3, r3, #4
 8008ce6:	e002      	b.n	8008cee <get_fat+0xc0>
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cee:	617b      	str	r3, [r7, #20]
			break;
 8008cf0:	e03f      	b.n	8008d72 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	6a1a      	ldr	r2, [r3, #32]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	0a1b      	lsrs	r3, r3, #8
 8008cfa:	4413      	add	r3, r2
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6938      	ldr	r0, [r7, #16]
 8008d00:	f7ff feda 	bl	8008ab8 <move_window>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d130      	bne.n	8008d6c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008d18:	4413      	add	r3, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7ff fc1c 	bl	8008558 <ld_word>
 8008d20:	4603      	mov	r3, r0
 8008d22:	617b      	str	r3, [r7, #20]
			break;
 8008d24:	e025      	b.n	8008d72 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	6a1a      	ldr	r2, [r3, #32]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	09db      	lsrs	r3, r3, #7
 8008d2e:	4413      	add	r3, r2
 8008d30:	4619      	mov	r1, r3
 8008d32:	6938      	ldr	r0, [r7, #16]
 8008d34:	f7ff fec0 	bl	8008ab8 <move_window>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d118      	bne.n	8008d70 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008d4c:	4413      	add	r3, r2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff fc1a 	bl	8008588 <ld_dword>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008d5a:	617b      	str	r3, [r7, #20]
			break;
 8008d5c:	e009      	b.n	8008d72 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008d5e:	2301      	movs	r3, #1
 8008d60:	617b      	str	r3, [r7, #20]
 8008d62:	e006      	b.n	8008d72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d64:	bf00      	nop
 8008d66:	e004      	b.n	8008d72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d68:	bf00      	nop
 8008d6a:	e002      	b.n	8008d72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d6c:	bf00      	nop
 8008d6e:	e000      	b.n	8008d72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d70:	bf00      	nop
		}
	}

	return val;
 8008d72:	697b      	ldr	r3, [r7, #20]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008d7c:	b590      	push	{r4, r7, lr}
 8008d7e:	b089      	sub	sp, #36	@ 0x24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	f240 80d9 	bls.w	8008f46 <put_fat+0x1ca>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	f080 80d3 	bcs.w	8008f46 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	f000 8096 	beq.w	8008ed6 <put_fat+0x15a>
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	f300 80cb 	bgt.w	8008f46 <put_fat+0x1ca>
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d002      	beq.n	8008dba <put_fat+0x3e>
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d06e      	beq.n	8008e96 <put_fat+0x11a>
 8008db8:	e0c5      	b.n	8008f46 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	61bb      	str	r3, [r7, #24]
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	085b      	lsrs	r3, r3, #1
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a1a      	ldr	r2, [r3, #32]
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	0a5b      	lsrs	r3, r3, #9
 8008dd0:	4413      	add	r3, r2
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f7ff fe6f 	bl	8008ab8 <move_window>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008dde:	7ffb      	ldrb	r3, [r7, #31]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f040 80a9 	bne.w	8008f38 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	1c59      	adds	r1, r3, #1
 8008df0:	61b9      	str	r1, [r7, #24]
 8008df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df6:	4413      	add	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00d      	beq.n	8008e20 <put_fat+0xa4>
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	b25b      	sxtb	r3, r3
 8008e0a:	f003 030f 	and.w	r3, r3, #15
 8008e0e:	b25a      	sxtb	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	b25b      	sxtb	r3, r3
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	b25b      	sxtb	r3, r3
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	e001      	b.n	8008e24 <put_fat+0xa8>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6a1a      	ldr	r2, [r3, #32]
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	0a5b      	lsrs	r3, r3, #9
 8008e36:	4413      	add	r3, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f7ff fe3c 	bl	8008ab8 <move_window>
 8008e40:	4603      	mov	r3, r0
 8008e42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e44:	7ffb      	ldrb	r3, [r7, #31]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d178      	bne.n	8008f3c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e56:	4413      	add	r3, r2
 8008e58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <put_fat+0xf0>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	091b      	lsrs	r3, r3, #4
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	e00e      	b.n	8008e8a <put_fat+0x10e>
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	b25b      	sxtb	r3, r3
 8008e72:	f023 030f 	bic.w	r3, r3, #15
 8008e76:	b25a      	sxtb	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	b25b      	sxtb	r3, r3
 8008e7e:	f003 030f 	and.w	r3, r3, #15
 8008e82:	b25b      	sxtb	r3, r3
 8008e84:	4313      	orrs	r3, r2
 8008e86:	b25b      	sxtb	r3, r3
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	70da      	strb	r2, [r3, #3]
			break;
 8008e94:	e057      	b.n	8008f46 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6a1a      	ldr	r2, [r3, #32]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	0a1b      	lsrs	r3, r3, #8
 8008e9e:	4413      	add	r3, r2
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7ff fe08 	bl	8008ab8 <move_window>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008eac:	7ffb      	ldrb	r3, [r7, #31]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d146      	bne.n	8008f40 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008ec0:	4413      	add	r3, r2
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	b292      	uxth	r2, r2
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff fb80 	bl	80085ce <st_word>
			fs->wflag = 1;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	70da      	strb	r2, [r3, #3]
			break;
 8008ed4:	e037      	b.n	8008f46 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6a1a      	ldr	r2, [r3, #32]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	09db      	lsrs	r3, r3, #7
 8008ede:	4413      	add	r3, r2
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f7ff fde8 	bl	8008ab8 <move_window>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008eec:	7ffb      	ldrb	r3, [r7, #31]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d128      	bne.n	8008f44 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008f06:	4413      	add	r3, r2
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7ff fb3d 	bl	8008588 <ld_dword>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008f14:	4323      	orrs	r3, r4
 8008f16:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008f26:	4413      	add	r3, r2
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7ff fb6a 	bl	8008604 <st_dword>
			fs->wflag = 1;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2201      	movs	r2, #1
 8008f34:	70da      	strb	r2, [r3, #3]
			break;
 8008f36:	e006      	b.n	8008f46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f38:	bf00      	nop
 8008f3a:	e004      	b.n	8008f46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f3c:	bf00      	nop
 8008f3e:	e002      	b.n	8008f46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f40:	bf00      	nop
 8008f42:	e000      	b.n	8008f46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f44:	bf00      	nop
		}
	}
	return res;
 8008f46:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3724      	adds	r7, #36	@ 0x24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd90      	pop	{r4, r7, pc}

08008f50 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d904      	bls.n	8008f76 <remove_chain+0x26>
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d301      	bcc.n	8008f7a <remove_chain+0x2a>
 8008f76:	2302      	movs	r3, #2
 8008f78:	e04b      	b.n	8009012 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00c      	beq.n	8008f9a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008f80:	f04f 32ff 	mov.w	r2, #4294967295
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	69b8      	ldr	r0, [r7, #24]
 8008f88:	f7ff fef8 	bl	8008d7c <put_fat>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008f90:	7ffb      	ldrb	r3, [r7, #31]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <remove_chain+0x4a>
 8008f96:	7ffb      	ldrb	r3, [r7, #31]
 8008f98:	e03b      	b.n	8009012 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008f9a:	68b9      	ldr	r1, [r7, #8]
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f7ff fe46 	bl	8008c2e <get_fat>
 8008fa2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d031      	beq.n	800900e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d101      	bne.n	8008fb4 <remove_chain+0x64>
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	e02e      	b.n	8009012 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fba:	d101      	bne.n	8008fc0 <remove_chain+0x70>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e028      	b.n	8009012 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	68b9      	ldr	r1, [r7, #8]
 8008fc4:	69b8      	ldr	r0, [r7, #24]
 8008fc6:	f7ff fed9 	bl	8008d7c <put_fat>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008fce:	7ffb      	ldrb	r3, [r7, #31]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <remove_chain+0x88>
 8008fd4:	7ffb      	ldrb	r3, [r7, #31]
 8008fd6:	e01c      	b.n	8009012 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	3b02      	subs	r3, #2
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d20b      	bcs.n	8008ffe <remove_chain+0xae>
			fs->free_clst++;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	791b      	ldrb	r3, [r3, #4]
 8008ff4:	f043 0301 	orr.w	r3, r3, #1
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	429a      	cmp	r2, r3
 800900a:	d3c6      	bcc.n	8008f9a <remove_chain+0x4a>
 800900c:	e000      	b.n	8009010 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800900e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b088      	sub	sp, #32
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10d      	bne.n	800904c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d004      	beq.n	8009046 <create_chain+0x2c>
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	429a      	cmp	r2, r3
 8009044:	d31b      	bcc.n	800907e <create_chain+0x64>
 8009046:	2301      	movs	r3, #1
 8009048:	61bb      	str	r3, [r7, #24]
 800904a:	e018      	b.n	800907e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff fded 	bl	8008c2e <get_fat>
 8009054:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d801      	bhi.n	8009060 <create_chain+0x46>
 800905c:	2301      	movs	r3, #1
 800905e:	e070      	b.n	8009142 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009066:	d101      	bne.n	800906c <create_chain+0x52>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	e06a      	b.n	8009142 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	429a      	cmp	r2, r3
 8009074:	d201      	bcs.n	800907a <create_chain+0x60>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	e063      	b.n	8009142 <create_chain+0x128>
		scl = clst;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	3301      	adds	r3, #1
 8009086:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	695b      	ldr	r3, [r3, #20]
 800908c:	69fa      	ldr	r2, [r7, #28]
 800908e:	429a      	cmp	r2, r3
 8009090:	d307      	bcc.n	80090a2 <create_chain+0x88>
				ncl = 2;
 8009092:	2302      	movs	r3, #2
 8009094:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	429a      	cmp	r2, r3
 800909c:	d901      	bls.n	80090a2 <create_chain+0x88>
 800909e:	2300      	movs	r3, #0
 80090a0:	e04f      	b.n	8009142 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80090a2:	69f9      	ldr	r1, [r7, #28]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff fdc2 	bl	8008c2e <get_fat>
 80090aa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00e      	beq.n	80090d0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d003      	beq.n	80090c0 <create_chain+0xa6>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090be:	d101      	bne.n	80090c4 <create_chain+0xaa>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	e03e      	b.n	8009142 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80090c4:	69fa      	ldr	r2, [r7, #28]
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d1da      	bne.n	8009082 <create_chain+0x68>
 80090cc:	2300      	movs	r3, #0
 80090ce:	e038      	b.n	8009142 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80090d0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80090d2:	f04f 32ff 	mov.w	r2, #4294967295
 80090d6:	69f9      	ldr	r1, [r7, #28]
 80090d8:	6938      	ldr	r0, [r7, #16]
 80090da:	f7ff fe4f 	bl	8008d7c <put_fat>
 80090de:	4603      	mov	r3, r0
 80090e0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d109      	bne.n	80090fc <create_chain+0xe2>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d006      	beq.n	80090fc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80090ee:	69fa      	ldr	r2, [r7, #28]
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6938      	ldr	r0, [r7, #16]
 80090f4:	f7ff fe42 	bl	8008d7c <put_fat>
 80090f8:	4603      	mov	r3, r0
 80090fa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d116      	bne.n	8009130 <create_chain+0x116>
		fs->last_clst = ncl;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	69fa      	ldr	r2, [r7, #28]
 8009106:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	3b02      	subs	r3, #2
 8009112:	429a      	cmp	r2, r3
 8009114:	d804      	bhi.n	8009120 <create_chain+0x106>
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	1e5a      	subs	r2, r3, #1
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	791b      	ldrb	r3, [r3, #4]
 8009124:	f043 0301 	orr.w	r3, r3, #1
 8009128:	b2da      	uxtb	r2, r3
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	711a      	strb	r2, [r3, #4]
 800912e:	e007      	b.n	8009140 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009130:	7dfb      	ldrb	r3, [r7, #23]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d102      	bne.n	800913c <create_chain+0x122>
 8009136:	f04f 33ff 	mov.w	r3, #4294967295
 800913a:	e000      	b.n	800913e <create_chain+0x124>
 800913c:	2301      	movs	r3, #1
 800913e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009140:	69fb      	ldr	r3, [r7, #28]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3720      	adds	r7, #32
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800914a:	b480      	push	{r7}
 800914c:	b087      	sub	sp, #28
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915e:	3304      	adds	r3, #4
 8009160:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	0a5b      	lsrs	r3, r3, #9
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	8952      	ldrh	r2, [r2, #10]
 800916a:	fbb3 f3f2 	udiv	r3, r3, r2
 800916e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	1d1a      	adds	r2, r3, #4
 8009174:	613a      	str	r2, [r7, #16]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <clmt_clust+0x3a>
 8009180:	2300      	movs	r3, #0
 8009182:	e010      	b.n	80091a6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	429a      	cmp	r2, r3
 800918a:	d307      	bcc.n	800919c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	3304      	adds	r3, #4
 8009198:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800919a:	e7e9      	b.n	8009170 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800919c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	4413      	add	r3, r2
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b086      	sub	sp, #24
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091c8:	d204      	bcs.n	80091d4 <dir_sdi+0x22>
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	f003 031f 	and.w	r3, r3, #31
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80091d4:	2302      	movs	r3, #2
 80091d6:	e063      	b.n	80092a0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <dir_sdi+0x46>
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d902      	bls.n	80091f8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10c      	bne.n	8009218 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	095b      	lsrs	r3, r3, #5
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	8912      	ldrh	r2, [r2, #8]
 8009206:	4293      	cmp	r3, r2
 8009208:	d301      	bcc.n	800920e <dir_sdi+0x5c>
 800920a:	2302      	movs	r3, #2
 800920c:	e048      	b.n	80092a0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	61da      	str	r2, [r3, #28]
 8009216:	e029      	b.n	800926c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	895b      	ldrh	r3, [r3, #10]
 800921c:	025b      	lsls	r3, r3, #9
 800921e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009220:	e019      	b.n	8009256 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6979      	ldr	r1, [r7, #20]
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff fd01 	bl	8008c2e <get_fat>
 800922c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009234:	d101      	bne.n	800923a <dir_sdi+0x88>
 8009236:	2301      	movs	r3, #1
 8009238:	e032      	b.n	80092a0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d904      	bls.n	800924a <dir_sdi+0x98>
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	429a      	cmp	r2, r3
 8009248:	d301      	bcc.n	800924e <dir_sdi+0x9c>
 800924a:	2302      	movs	r3, #2
 800924c:	e028      	b.n	80092a0 <dir_sdi+0xee>
			ofs -= csz;
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	429a      	cmp	r2, r3
 800925c:	d2e1      	bcs.n	8009222 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800925e:	6979      	ldr	r1, [r7, #20]
 8009260:	6938      	ldr	r0, [r7, #16]
 8009262:	f7ff fcc5 	bl	8008bf0 <clust2sect>
 8009266:	4602      	mov	r2, r0
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <dir_sdi+0xcc>
 800927a:	2302      	movs	r3, #2
 800927c:	e010      	b.n	80092a0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	69da      	ldr	r2, [r3, #28]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	0a5b      	lsrs	r3, r3, #9
 8009286:	441a      	add	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009298:	441a      	add	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	3320      	adds	r3, #32
 80092be:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d003      	beq.n	80092d0 <dir_next+0x28>
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092ce:	d301      	bcc.n	80092d4 <dir_next+0x2c>
 80092d0:	2304      	movs	r3, #4
 80092d2:	e0aa      	b.n	800942a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f040 8098 	bne.w	8009410 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10b      	bne.n	800930a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	095b      	lsrs	r3, r3, #5
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	8912      	ldrh	r2, [r2, #8]
 80092fa:	4293      	cmp	r3, r2
 80092fc:	f0c0 8088 	bcc.w	8009410 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	61da      	str	r2, [r3, #28]
 8009306:	2304      	movs	r3, #4
 8009308:	e08f      	b.n	800942a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	0a5b      	lsrs	r3, r3, #9
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	8952      	ldrh	r2, [r2, #10]
 8009312:	3a01      	subs	r2, #1
 8009314:	4013      	ands	r3, r2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d17a      	bne.n	8009410 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f7ff fc83 	bl	8008c2e <get_fat>
 8009328:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d801      	bhi.n	8009334 <dir_next+0x8c>
 8009330:	2302      	movs	r3, #2
 8009332:	e07a      	b.n	800942a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933a:	d101      	bne.n	8009340 <dir_next+0x98>
 800933c:	2301      	movs	r3, #1
 800933e:	e074      	b.n	800942a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	429a      	cmp	r2, r3
 8009348:	d358      	bcc.n	80093fc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d104      	bne.n	800935a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	61da      	str	r2, [r3, #28]
 8009356:	2304      	movs	r3, #4
 8009358:	e067      	b.n	800942a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	4619      	mov	r1, r3
 8009362:	4610      	mov	r0, r2
 8009364:	f7ff fe59 	bl	800901a <create_chain>
 8009368:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <dir_next+0xcc>
 8009370:	2307      	movs	r3, #7
 8009372:	e05a      	b.n	800942a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d101      	bne.n	800937e <dir_next+0xd6>
 800937a:	2302      	movs	r3, #2
 800937c:	e055      	b.n	800942a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009384:	d101      	bne.n	800938a <dir_next+0xe2>
 8009386:	2301      	movs	r3, #1
 8009388:	e04f      	b.n	800942a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7ff fb50 	bl	8008a30 <sync_window>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <dir_next+0xf2>
 8009396:	2301      	movs	r3, #1
 8009398:	e047      	b.n	800942a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3330      	adds	r3, #48	@ 0x30
 800939e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093a2:	2100      	movs	r1, #0
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7ff f97a 	bl	800869e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093aa:	2300      	movs	r3, #0
 80093ac:	613b      	str	r3, [r7, #16]
 80093ae:	6979      	ldr	r1, [r7, #20]
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f7ff fc1d 	bl	8008bf0 <clust2sect>
 80093b6:	4602      	mov	r2, r0
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80093bc:	e012      	b.n	80093e4 <dir_next+0x13c>
						fs->wflag = 1;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f7ff fb33 	bl	8008a30 <sync_window>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <dir_next+0x12c>
 80093d0:	2301      	movs	r3, #1
 80093d2:	e02a      	b.n	800942a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	3301      	adds	r3, #1
 80093d8:	613b      	str	r3, [r7, #16]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	895b      	ldrh	r3, [r3, #10]
 80093e8:	461a      	mov	r2, r3
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d3e6      	bcc.n	80093be <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	1ad2      	subs	r2, r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009402:	6979      	ldr	r1, [r7, #20]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f7ff fbf3 	bl	8008bf0 <clust2sect>
 800940a:	4602      	mov	r2, r0
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009422:	441a      	add	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b086      	sub	sp, #24
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009442:	2100      	movs	r1, #0
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff feb4 	bl	80091b2 <dir_sdi>
 800944a:	4603      	mov	r3, r0
 800944c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800944e:	7dfb      	ldrb	r3, [r7, #23]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d12b      	bne.n	80094ac <dir_alloc+0x7a>
		n = 0;
 8009454:	2300      	movs	r3, #0
 8009456:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	4619      	mov	r1, r3
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f7ff fb2a 	bl	8008ab8 <move_window>
 8009464:	4603      	mov	r3, r0
 8009466:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d11d      	bne.n	80094aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2be5      	cmp	r3, #229	@ 0xe5
 8009476:	d004      	beq.n	8009482 <dir_alloc+0x50>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a1b      	ldr	r3, [r3, #32]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d107      	bne.n	8009492 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	3301      	adds	r3, #1
 8009486:	613b      	str	r3, [r7, #16]
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	429a      	cmp	r2, r3
 800948e:	d102      	bne.n	8009496 <dir_alloc+0x64>
 8009490:	e00c      	b.n	80094ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009492:	2300      	movs	r3, #0
 8009494:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009496:	2101      	movs	r1, #1
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7ff ff05 	bl	80092a8 <dir_next>
 800949e:	4603      	mov	r3, r0
 80094a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0d7      	beq.n	8009458 <dir_alloc+0x26>
 80094a8:	e000      	b.n	80094ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80094aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d101      	bne.n	80094b6 <dir_alloc+0x84>
 80094b2:	2307      	movs	r3, #7
 80094b4:	75fb      	strb	r3, [r7, #23]
	return res;
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	331a      	adds	r3, #26
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7ff f842 	bl	8008558 <ld_word>
 80094d4:	4603      	mov	r3, r0
 80094d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d109      	bne.n	80094f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	3314      	adds	r3, #20
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff f837 	bl	8008558 <ld_word>
 80094ea:	4603      	mov	r3, r0
 80094ec:	041b      	lsls	r3, r3, #16
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80094f4:	68fb      	ldr	r3, [r7, #12]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	60f8      	str	r0, [r7, #12]
 8009506:	60b9      	str	r1, [r7, #8]
 8009508:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	331a      	adds	r3, #26
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	b292      	uxth	r2, r2
 8009512:	4611      	mov	r1, r2
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff f85a 	bl	80085ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2b03      	cmp	r3, #3
 8009520:	d109      	bne.n	8009536 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f103 0214 	add.w	r2, r3, #20
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	0c1b      	lsrs	r3, r3, #16
 800952c:	b29b      	uxth	r3, r3
 800952e:	4619      	mov	r1, r3
 8009530:	4610      	mov	r0, r2
 8009532:	f7ff f84c 	bl	80085ce <st_word>
	}
}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b086      	sub	sp, #24
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800954c:	2100      	movs	r1, #0
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff fe2f 	bl	80091b2 <dir_sdi>
 8009554:	4603      	mov	r3, r0
 8009556:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <dir_find+0x24>
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	e03e      	b.n	80095e0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	4619      	mov	r1, r3
 8009568:	6938      	ldr	r0, [r7, #16]
 800956a:	f7ff faa5 	bl	8008ab8 <move_window>
 800956e:	4603      	mov	r3, r0
 8009570:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009572:	7dfb      	ldrb	r3, [r7, #23]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d12f      	bne.n	80095d8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a1b      	ldr	r3, [r3, #32]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d102      	bne.n	800958c <dir_find+0x4e>
 8009586:	2304      	movs	r3, #4
 8009588:	75fb      	strb	r3, [r7, #23]
 800958a:	e028      	b.n	80095de <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	330b      	adds	r3, #11
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009598:	b2da      	uxtb	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	330b      	adds	r3, #11
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	f003 0308 	and.w	r3, r3, #8
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <dir_find+0x86>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a18      	ldr	r0, [r3, #32]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	3324      	adds	r3, #36	@ 0x24
 80095b6:	220b      	movs	r2, #11
 80095b8:	4619      	mov	r1, r3
 80095ba:	f7ff f88b 	bl	80086d4 <mem_cmp>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80095c4:	2100      	movs	r1, #0
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff fe6e 	bl	80092a8 <dir_next>
 80095cc:	4603      	mov	r3, r0
 80095ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0c5      	beq.n	8009562 <dir_find+0x24>
 80095d6:	e002      	b.n	80095de <dir_find+0xa0>
		if (res != FR_OK) break;
 80095d8:	bf00      	nop
 80095da:	e000      	b.n	80095de <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80095dc:	bf00      	nop

	return res;
 80095de:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80095f6:	2101      	movs	r1, #1
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff ff1a 	bl	8009432 <dir_alloc>
 80095fe:	4603      	mov	r3, r0
 8009600:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d11c      	bne.n	8009642 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	4619      	mov	r1, r3
 800960e:	68b8      	ldr	r0, [r7, #8]
 8009610:	f7ff fa52 	bl	8008ab8 <move_window>
 8009614:	4603      	mov	r3, r0
 8009616:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d111      	bne.n	8009642 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	2220      	movs	r2, #32
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff f839 	bl	800869e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a18      	ldr	r0, [r3, #32]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3324      	adds	r3, #36	@ 0x24
 8009634:	220b      	movs	r2, #11
 8009636:	4619      	mov	r1, r3
 8009638:	f7ff f810 	bl	800865c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2201      	movs	r2, #1
 8009640:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b088      	sub	sp, #32
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3324      	adds	r3, #36	@ 0x24
 8009660:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009662:	220b      	movs	r2, #11
 8009664:	2120      	movs	r1, #32
 8009666:	68b8      	ldr	r0, [r7, #8]
 8009668:	f7ff f819 	bl	800869e <mem_set>
	si = i = 0; ni = 8;
 800966c:	2300      	movs	r3, #0
 800966e:	613b      	str	r3, [r7, #16]
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	61fb      	str	r3, [r7, #28]
 8009674:	2308      	movs	r3, #8
 8009676:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	61fa      	str	r2, [r7, #28]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009686:	7efb      	ldrb	r3, [r7, #27]
 8009688:	2b20      	cmp	r3, #32
 800968a:	d94e      	bls.n	800972a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800968c:	7efb      	ldrb	r3, [r7, #27]
 800968e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009690:	d006      	beq.n	80096a0 <create_name+0x54>
 8009692:	7efb      	ldrb	r3, [r7, #27]
 8009694:	2b5c      	cmp	r3, #92	@ 0x5c
 8009696:	d110      	bne.n	80096ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009698:	e002      	b.n	80096a0 <create_name+0x54>
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	3301      	adds	r3, #1
 800969e:	61fb      	str	r3, [r7, #28]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	4413      	add	r3, r2
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80096aa:	d0f6      	beq.n	800969a <create_name+0x4e>
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	4413      	add	r3, r2
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80096b6:	d0f0      	beq.n	800969a <create_name+0x4e>
			break;
 80096b8:	e038      	b.n	800972c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80096ba:	7efb      	ldrb	r3, [r7, #27]
 80096bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80096be:	d003      	beq.n	80096c8 <create_name+0x7c>
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d30c      	bcc.n	80096e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2b0b      	cmp	r3, #11
 80096cc:	d002      	beq.n	80096d4 <create_name+0x88>
 80096ce:	7efb      	ldrb	r3, [r7, #27]
 80096d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80096d2:	d001      	beq.n	80096d8 <create_name+0x8c>
 80096d4:	2306      	movs	r3, #6
 80096d6:	e044      	b.n	8009762 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80096d8:	2308      	movs	r3, #8
 80096da:	613b      	str	r3, [r7, #16]
 80096dc:	230b      	movs	r3, #11
 80096de:	617b      	str	r3, [r7, #20]
			continue;
 80096e0:	e022      	b.n	8009728 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80096e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	da04      	bge.n	80096f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80096ea:	7efb      	ldrb	r3, [r7, #27]
 80096ec:	3b80      	subs	r3, #128	@ 0x80
 80096ee:	4a1f      	ldr	r2, [pc, #124]	@ (800976c <create_name+0x120>)
 80096f0:	5cd3      	ldrb	r3, [r2, r3]
 80096f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80096f4:	7efb      	ldrb	r3, [r7, #27]
 80096f6:	4619      	mov	r1, r3
 80096f8:	481d      	ldr	r0, [pc, #116]	@ (8009770 <create_name+0x124>)
 80096fa:	f7ff f812 	bl	8008722 <chk_chr>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <create_name+0xbc>
 8009704:	2306      	movs	r3, #6
 8009706:	e02c      	b.n	8009762 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009708:	7efb      	ldrb	r3, [r7, #27]
 800970a:	2b60      	cmp	r3, #96	@ 0x60
 800970c:	d905      	bls.n	800971a <create_name+0xce>
 800970e:	7efb      	ldrb	r3, [r7, #27]
 8009710:	2b7a      	cmp	r3, #122	@ 0x7a
 8009712:	d802      	bhi.n	800971a <create_name+0xce>
 8009714:	7efb      	ldrb	r3, [r7, #27]
 8009716:	3b20      	subs	r3, #32
 8009718:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	1c5a      	adds	r2, r3, #1
 800971e:	613a      	str	r2, [r7, #16]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	4413      	add	r3, r2
 8009724:	7efa      	ldrb	r2, [r7, #27]
 8009726:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009728:	e7a6      	b.n	8009678 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800972a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	441a      	add	r2, r3
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <create_name+0xf4>
 800973c:	2306      	movs	r3, #6
 800973e:	e010      	b.n	8009762 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2be5      	cmp	r3, #229	@ 0xe5
 8009746:	d102      	bne.n	800974e <create_name+0x102>
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	2205      	movs	r2, #5
 800974c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800974e:	7efb      	ldrb	r3, [r7, #27]
 8009750:	2b20      	cmp	r3, #32
 8009752:	d801      	bhi.n	8009758 <create_name+0x10c>
 8009754:	2204      	movs	r2, #4
 8009756:	e000      	b.n	800975a <create_name+0x10e>
 8009758:	2200      	movs	r2, #0
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	330b      	adds	r3, #11
 800975e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009760:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009762:	4618      	mov	r0, r3
 8009764:	3720      	adds	r7, #32
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	0800bc90 	.word	0x0800bc90
 8009770:	0800aebc 	.word	0x0800aebc

08009774 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009788:	e002      	b.n	8009790 <follow_path+0x1c>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	3301      	adds	r3, #1
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b2f      	cmp	r3, #47	@ 0x2f
 8009796:	d0f8      	beq.n	800978a <follow_path+0x16>
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b5c      	cmp	r3, #92	@ 0x5c
 800979e:	d0f4      	beq.n	800978a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	2200      	movs	r2, #0
 80097a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	2b1f      	cmp	r3, #31
 80097ac:	d80a      	bhi.n	80097c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2280      	movs	r2, #128	@ 0x80
 80097b2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80097b6:	2100      	movs	r1, #0
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7ff fcfa 	bl	80091b2 <dir_sdi>
 80097be:	4603      	mov	r3, r0
 80097c0:	75fb      	strb	r3, [r7, #23]
 80097c2:	e043      	b.n	800984c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80097c4:	463b      	mov	r3, r7
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7ff ff3f 	bl	800964c <create_name>
 80097ce:	4603      	mov	r3, r0
 80097d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d134      	bne.n	8009842 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7ff feb0 	bl	800953e <dir_find>
 80097de:	4603      	mov	r3, r0
 80097e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80097e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00a      	beq.n	8009806 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
 80097f2:	2b04      	cmp	r3, #4
 80097f4:	d127      	bne.n	8009846 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80097f6:	7afb      	ldrb	r3, [r7, #11]
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d122      	bne.n	8009846 <follow_path+0xd2>
 8009800:	2305      	movs	r3, #5
 8009802:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009804:	e01f      	b.n	8009846 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009806:	7afb      	ldrb	r3, [r7, #11]
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	d11c      	bne.n	800984a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	799b      	ldrb	r3, [r3, #6]
 8009814:	f003 0310 	and.w	r3, r3, #16
 8009818:	2b00      	cmp	r3, #0
 800981a:	d102      	bne.n	8009822 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800981c:	2305      	movs	r3, #5
 800981e:	75fb      	strb	r3, [r7, #23]
 8009820:	e014      	b.n	800984c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009830:	4413      	add	r3, r2
 8009832:	4619      	mov	r1, r3
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff fe43 	bl	80094c0 <ld_clust>
 800983a:	4602      	mov	r2, r0
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009840:	e7c0      	b.n	80097c4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009842:	bf00      	nop
 8009844:	e002      	b.n	800984c <follow_path+0xd8>
				break;
 8009846:	bf00      	nop
 8009848:	e000      	b.n	800984c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800984a:	bf00      	nop
			}
		}
	}

	return res;
 800984c:	7dfb      	ldrb	r3, [r7, #23]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009856:	b480      	push	{r7}
 8009858:	b087      	sub	sp, #28
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800985e:	f04f 33ff 	mov.w	r3, #4294967295
 8009862:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d031      	beq.n	80098d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	617b      	str	r3, [r7, #20]
 8009872:	e002      	b.n	800987a <get_ldnumber+0x24>
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	3301      	adds	r3, #1
 8009878:	617b      	str	r3, [r7, #20]
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	2b20      	cmp	r3, #32
 8009880:	d903      	bls.n	800988a <get_ldnumber+0x34>
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	2b3a      	cmp	r3, #58	@ 0x3a
 8009888:	d1f4      	bne.n	8009874 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b3a      	cmp	r3, #58	@ 0x3a
 8009890:	d11c      	bne.n	80098cc <get_ldnumber+0x76>
			tp = *path;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	1c5a      	adds	r2, r3, #1
 800989c:	60fa      	str	r2, [r7, #12]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	3b30      	subs	r3, #48	@ 0x30
 80098a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b09      	cmp	r3, #9
 80098a8:	d80e      	bhi.n	80098c8 <get_ldnumber+0x72>
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d10a      	bne.n	80098c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d107      	bne.n	80098c8 <get_ldnumber+0x72>
					vol = (int)i;
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	3301      	adds	r3, #1
 80098c0:	617b      	str	r3, [r7, #20]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	e002      	b.n	80098d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80098cc:	2300      	movs	r3, #0
 80098ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80098d0:	693b      	ldr	r3, [r7, #16]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	371c      	adds	r7, #28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
	...

080098e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	70da      	strb	r2, [r3, #3]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f04f 32ff 	mov.w	r2, #4294967295
 80098f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7ff f8dc 	bl	8008ab8 <move_window>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <check_fs+0x2a>
 8009906:	2304      	movs	r3, #4
 8009908:	e038      	b.n	800997c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3330      	adds	r3, #48	@ 0x30
 800990e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009912:	4618      	mov	r0, r3
 8009914:	f7fe fe20 	bl	8008558 <ld_word>
 8009918:	4603      	mov	r3, r0
 800991a:	461a      	mov	r2, r3
 800991c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009920:	429a      	cmp	r2, r3
 8009922:	d001      	beq.n	8009928 <check_fs+0x48>
 8009924:	2303      	movs	r3, #3
 8009926:	e029      	b.n	800997c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800992e:	2be9      	cmp	r3, #233	@ 0xe9
 8009930:	d009      	beq.n	8009946 <check_fs+0x66>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009938:	2beb      	cmp	r3, #235	@ 0xeb
 800993a:	d11e      	bne.n	800997a <check_fs+0x9a>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009942:	2b90      	cmp	r3, #144	@ 0x90
 8009944:	d119      	bne.n	800997a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3330      	adds	r3, #48	@ 0x30
 800994a:	3336      	adds	r3, #54	@ 0x36
 800994c:	4618      	mov	r0, r3
 800994e:	f7fe fe1b 	bl	8008588 <ld_dword>
 8009952:	4603      	mov	r3, r0
 8009954:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009958:	4a0a      	ldr	r2, [pc, #40]	@ (8009984 <check_fs+0xa4>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d101      	bne.n	8009962 <check_fs+0x82>
 800995e:	2300      	movs	r3, #0
 8009960:	e00c      	b.n	800997c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3330      	adds	r3, #48	@ 0x30
 8009966:	3352      	adds	r3, #82	@ 0x52
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe fe0d 	bl	8008588 <ld_dword>
 800996e:	4603      	mov	r3, r0
 8009970:	4a05      	ldr	r2, [pc, #20]	@ (8009988 <check_fs+0xa8>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d101      	bne.n	800997a <check_fs+0x9a>
 8009976:	2300      	movs	r3, #0
 8009978:	e000      	b.n	800997c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800997a:	2302      	movs	r3, #2
}
 800997c:	4618      	mov	r0, r3
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	00544146 	.word	0x00544146
 8009988:	33544146 	.word	0x33544146

0800998c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b096      	sub	sp, #88	@ 0x58
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	4613      	mov	r3, r2
 8009998:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f7ff ff58 	bl	8009856 <get_ldnumber>
 80099a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80099a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	da01      	bge.n	80099b2 <find_volume+0x26>
 80099ae:	230b      	movs	r3, #11
 80099b0:	e22d      	b.n	8009e0e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80099b2:	4aa1      	ldr	r2, [pc, #644]	@ (8009c38 <find_volume+0x2ac>)
 80099b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80099bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d101      	bne.n	80099c6 <find_volume+0x3a>
 80099c2:	230c      	movs	r3, #12
 80099c4:	e223      	b.n	8009e0e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80099cc:	79fb      	ldrb	r3, [r7, #7]
 80099ce:	f023 0301 	bic.w	r3, r3, #1
 80099d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80099d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d01a      	beq.n	8009a12 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80099dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099de:	785b      	ldrb	r3, [r3, #1]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fe fd19 	bl	8008418 <disk_status>
 80099e6:	4603      	mov	r3, r0
 80099e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80099ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10c      	bne.n	8009a12 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d007      	beq.n	8009a0e <find_volume+0x82>
 80099fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a02:	f003 0304 	and.w	r3, r3, #4
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009a0a:	230a      	movs	r3, #10
 8009a0c:	e1ff      	b.n	8009e0e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e1fd      	b.n	8009e0e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a14:	2200      	movs	r2, #0
 8009a16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a22:	785b      	ldrb	r3, [r3, #1]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe fd11 	bl	800844c <disk_initialize>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009a30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a34:	f003 0301 	and.w	r3, r3, #1
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e1e6      	b.n	8009e0e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009a40:	79fb      	ldrb	r3, [r7, #7]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d007      	beq.n	8009a56 <find_volume+0xca>
 8009a46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a4a:	f003 0304 	and.w	r3, r3, #4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009a52:	230a      	movs	r3, #10
 8009a54:	e1db      	b.n	8009e0e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009a5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a5c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009a5e:	f7ff ff3f 	bl	80098e0 <check_fs>
 8009a62:	4603      	mov	r3, r0
 8009a64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009a68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d149      	bne.n	8009b04 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a70:	2300      	movs	r3, #0
 8009a72:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a74:	e01e      	b.n	8009ab4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a7e:	011b      	lsls	r3, r3, #4
 8009a80:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009a84:	4413      	add	r3, r2
 8009a86:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d006      	beq.n	8009aa0 <find_volume+0x114>
 8009a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a94:	3308      	adds	r3, #8
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fd76 	bl	8008588 <ld_dword>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	e000      	b.n	8009aa2 <find_volume+0x116>
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	3358      	adds	r3, #88	@ 0x58
 8009aa8:	443b      	add	r3, r7
 8009aaa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d9dd      	bls.n	8009a76 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009aba:	2300      	movs	r3, #0
 8009abc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <find_volume+0x13e>
 8009ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	3358      	adds	r3, #88	@ 0x58
 8009ad0:	443b      	add	r3, r7
 8009ad2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009ad6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d005      	beq.n	8009aea <find_volume+0x15e>
 8009ade:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ae0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ae2:	f7ff fefd 	bl	80098e0 <check_fs>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	e000      	b.n	8009aec <find_volume+0x160>
 8009aea:	2303      	movs	r3, #3
 8009aec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009af0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d905      	bls.n	8009b04 <find_volume+0x178>
 8009af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009afa:	3301      	adds	r3, #1
 8009afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d9e2      	bls.n	8009aca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009b04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b08:	2b04      	cmp	r3, #4
 8009b0a:	d101      	bne.n	8009b10 <find_volume+0x184>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e17e      	b.n	8009e0e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009b10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d901      	bls.n	8009b1c <find_volume+0x190>
 8009b18:	230d      	movs	r3, #13
 8009b1a:	e178      	b.n	8009e0e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	3330      	adds	r3, #48	@ 0x30
 8009b20:	330b      	adds	r3, #11
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe fd18 	bl	8008558 <ld_word>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b2e:	d001      	beq.n	8009b34 <find_volume+0x1a8>
 8009b30:	230d      	movs	r3, #13
 8009b32:	e16c      	b.n	8009e0e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b36:	3330      	adds	r3, #48	@ 0x30
 8009b38:	3316      	adds	r3, #22
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe fd0c 	bl	8008558 <ld_word>
 8009b40:	4603      	mov	r3, r0
 8009b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d106      	bne.n	8009b58 <find_volume+0x1cc>
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4c:	3330      	adds	r3, #48	@ 0x30
 8009b4e:	3324      	adds	r3, #36	@ 0x24
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe fd19 	bl	8008588 <ld_dword>
 8009b56:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b5c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b60:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b66:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6a:	789b      	ldrb	r3, [r3, #2]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d005      	beq.n	8009b7c <find_volume+0x1f0>
 8009b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b72:	789b      	ldrb	r3, [r3, #2]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d001      	beq.n	8009b7c <find_volume+0x1f0>
 8009b78:	230d      	movs	r3, #13
 8009b7a:	e148      	b.n	8009e0e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7e:	789b      	ldrb	r3, [r3, #2]
 8009b80:	461a      	mov	r2, r3
 8009b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b84:	fb02 f303 	mul.w	r3, r2, r3
 8009b88:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b90:	461a      	mov	r2, r3
 8009b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b94:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b98:	895b      	ldrh	r3, [r3, #10]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d008      	beq.n	8009bb0 <find_volume+0x224>
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba0:	895b      	ldrh	r3, [r3, #10]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba6:	895b      	ldrh	r3, [r3, #10]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	4013      	ands	r3, r2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <find_volume+0x228>
 8009bb0:	230d      	movs	r3, #13
 8009bb2:	e12c      	b.n	8009e0e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb6:	3330      	adds	r3, #48	@ 0x30
 8009bb8:	3311      	adds	r3, #17
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fccc 	bl	8008558 <ld_word>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bca:	891b      	ldrh	r3, [r3, #8]
 8009bcc:	f003 030f 	and.w	r3, r3, #15
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <find_volume+0x24e>
 8009bd6:	230d      	movs	r3, #13
 8009bd8:	e119      	b.n	8009e0e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bdc:	3330      	adds	r3, #48	@ 0x30
 8009bde:	3313      	adds	r3, #19
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fe fcb9 	bl	8008558 <ld_word>
 8009be6:	4603      	mov	r3, r0
 8009be8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d106      	bne.n	8009bfe <find_volume+0x272>
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf2:	3330      	adds	r3, #48	@ 0x30
 8009bf4:	3320      	adds	r3, #32
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe fcc6 	bl	8008588 <ld_dword>
 8009bfc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c00:	3330      	adds	r3, #48	@ 0x30
 8009c02:	330e      	adds	r3, #14
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe fca7 	bl	8008558 <ld_word>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009c0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <find_volume+0x28c>
 8009c14:	230d      	movs	r3, #13
 8009c16:	e0fa      	b.n	8009e0e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009c18:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c1c:	4413      	add	r3, r2
 8009c1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c20:	8912      	ldrh	r2, [r2, #8]
 8009c22:	0912      	lsrs	r2, r2, #4
 8009c24:	b292      	uxth	r2, r2
 8009c26:	4413      	add	r3, r2
 8009c28:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d204      	bcs.n	8009c3c <find_volume+0x2b0>
 8009c32:	230d      	movs	r3, #13
 8009c34:	e0eb      	b.n	8009e0e <find_volume+0x482>
 8009c36:	bf00      	nop
 8009c38:	20002574 	.word	0x20002574
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c44:	8952      	ldrh	r2, [r2, #10]
 8009c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c4a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <find_volume+0x2ca>
 8009c52:	230d      	movs	r3, #13
 8009c54:	e0db      	b.n	8009e0e <find_volume+0x482>
		fmt = FS_FAT32;
 8009c56:	2303      	movs	r3, #3
 8009c58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d802      	bhi.n	8009c6c <find_volume+0x2e0>
 8009c66:	2302      	movs	r3, #2
 8009c68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d802      	bhi.n	8009c7c <find_volume+0x2f0>
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7e:	1c9a      	adds	r2, r3, #2
 8009c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c82:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c88:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009c8a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c8e:	441a      	add	r2, r3
 8009c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c92:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009c94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c98:	441a      	add	r2, r3
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8009c9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009ca2:	2b03      	cmp	r3, #3
 8009ca4:	d11e      	bne.n	8009ce4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca8:	3330      	adds	r3, #48	@ 0x30
 8009caa:	332a      	adds	r3, #42	@ 0x2a
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fc53 	bl	8008558 <ld_word>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <find_volume+0x330>
 8009cb8:	230d      	movs	r3, #13
 8009cba:	e0a8      	b.n	8009e0e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbe:	891b      	ldrh	r3, [r3, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <find_volume+0x33c>
 8009cc4:	230d      	movs	r3, #13
 8009cc6:	e0a2      	b.n	8009e0e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cca:	3330      	adds	r3, #48	@ 0x30
 8009ccc:	332c      	adds	r3, #44	@ 0x2c
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fc5a 	bl	8008588 <ld_dword>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ce2:	e01f      	b.n	8009d24 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	891b      	ldrh	r3, [r3, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <find_volume+0x364>
 8009cec:	230d      	movs	r3, #13
 8009cee:	e08e      	b.n	8009e0e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf2:	6a1a      	ldr	r2, [r3, #32]
 8009cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cf6:	441a      	add	r2, r3
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfa:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d103      	bne.n	8009d0c <find_volume+0x380>
 8009d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	e00a      	b.n	8009d22 <find_volume+0x396>
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0e:	695a      	ldr	r2, [r3, #20]
 8009d10:	4613      	mov	r3, r2
 8009d12:	005b      	lsls	r3, r3, #1
 8009d14:	4413      	add	r3, r2
 8009d16:	085a      	lsrs	r2, r3, #1
 8009d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	f003 0301 	and.w	r3, r3, #1
 8009d20:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009d22:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d26:	699a      	ldr	r2, [r3, #24]
 8009d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d2a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009d2e:	0a5b      	lsrs	r3, r3, #9
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d201      	bcs.n	8009d38 <find_volume+0x3ac>
 8009d34:	230d      	movs	r3, #13
 8009d36:	e06a      	b.n	8009e0e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3e:	611a      	str	r2, [r3, #16]
 8009d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d42:	691a      	ldr	r2, [r3, #16]
 8009d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d46:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4a:	2280      	movs	r2, #128	@ 0x80
 8009d4c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009d4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d149      	bne.n	8009dea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d58:	3330      	adds	r3, #48	@ 0x30
 8009d5a:	3330      	adds	r3, #48	@ 0x30
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fe fbfb 	bl	8008558 <ld_word>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d140      	bne.n	8009dea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009d70:	f7fe fea2 	bl	8008ab8 <move_window>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d137      	bne.n	8009dea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d82:	3330      	adds	r3, #48	@ 0x30
 8009d84:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fe fbe5 	bl	8008558 <ld_word>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	461a      	mov	r2, r3
 8009d92:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d127      	bne.n	8009dea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9c:	3330      	adds	r3, #48	@ 0x30
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe fbf2 	bl	8008588 <ld_dword>
 8009da4:	4603      	mov	r3, r0
 8009da6:	4a1c      	ldr	r2, [pc, #112]	@ (8009e18 <find_volume+0x48c>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d11e      	bne.n	8009dea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dae:	3330      	adds	r3, #48	@ 0x30
 8009db0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe fbe7 	bl	8008588 <ld_dword>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	4a17      	ldr	r2, [pc, #92]	@ (8009e1c <find_volume+0x490>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d113      	bne.n	8009dea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc4:	3330      	adds	r3, #48	@ 0x30
 8009dc6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fbdc 	bl	8008588 <ld_dword>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd8:	3330      	adds	r3, #48	@ 0x30
 8009dda:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fbd2 	bl	8008588 <ld_dword>
 8009de4:	4602      	mov	r2, r0
 8009de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dec:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009df0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009df2:	4b0b      	ldr	r3, [pc, #44]	@ (8009e20 <find_volume+0x494>)
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	3301      	adds	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	4b09      	ldr	r3, [pc, #36]	@ (8009e20 <find_volume+0x494>)
 8009dfc:	801a      	strh	r2, [r3, #0]
 8009dfe:	4b08      	ldr	r3, [pc, #32]	@ (8009e20 <find_volume+0x494>)
 8009e00:	881a      	ldrh	r2, [r3, #0]
 8009e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e04:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009e06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e08:	f7fe fdee 	bl	80089e8 <clear_lock>
#endif
	return FR_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3758      	adds	r7, #88	@ 0x58
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	41615252 	.word	0x41615252
 8009e1c:	61417272 	.word	0x61417272
 8009e20:	20002578 	.word	0x20002578

08009e24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009e2e:	2309      	movs	r3, #9
 8009e30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d01c      	beq.n	8009e72 <validate+0x4e>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d018      	beq.n	8009e72 <validate+0x4e>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d013      	beq.n	8009e72 <validate+0x4e>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	889a      	ldrh	r2, [r3, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	88db      	ldrh	r3, [r3, #6]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d10c      	bne.n	8009e72 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	785b      	ldrb	r3, [r3, #1]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fada 	bl	8008418 <disk_status>
 8009e64:	4603      	mov	r3, r0
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <validate+0x4e>
			res = FR_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d102      	bne.n	8009e7e <validate+0x5a>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	e000      	b.n	8009e80 <validate+0x5c>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	6013      	str	r3, [r2, #0]
	return res;
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
	...

08009e90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009ea2:	f107 0310 	add.w	r3, r7, #16
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff fcd5 	bl	8009856 <get_ldnumber>
 8009eac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	da01      	bge.n	8009eb8 <f_mount+0x28>
 8009eb4:	230b      	movs	r3, #11
 8009eb6:	e02b      	b.n	8009f10 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009eb8:	4a17      	ldr	r2, [pc, #92]	@ (8009f18 <f_mount+0x88>)
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ec0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d005      	beq.n	8009ed4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009ec8:	69b8      	ldr	r0, [r7, #24]
 8009eca:	f7fe fd8d 	bl	80089e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	490d      	ldr	r1, [pc, #52]	@ (8009f18 <f_mount+0x88>)
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <f_mount+0x66>
 8009ef0:	79fb      	ldrb	r3, [r7, #7]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d001      	beq.n	8009efa <f_mount+0x6a>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e00a      	b.n	8009f10 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009efa:	f107 010c 	add.w	r1, r7, #12
 8009efe:	f107 0308 	add.w	r3, r7, #8
 8009f02:	2200      	movs	r2, #0
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7ff fd41 	bl	800998c <find_volume>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3720      	adds	r7, #32
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	20002574 	.word	0x20002574

08009f1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b098      	sub	sp, #96	@ 0x60
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	4613      	mov	r3, r2
 8009f28:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <f_open+0x18>
 8009f30:	2309      	movs	r3, #9
 8009f32:	e1a9      	b.n	800a288 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f3a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009f3c:	79fa      	ldrb	r2, [r7, #7]
 8009f3e:	f107 0110 	add.w	r1, r7, #16
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff fd20 	bl	800998c <find_volume>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009f52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f040 818d 	bne.w	800a276 <f_open+0x35a>
		dj.obj.fs = fs;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	f107 0314 	add.w	r3, r7, #20
 8009f66:	4611      	mov	r1, r2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7ff fc03 	bl	8009774 <follow_path>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009f74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d118      	bne.n	8009fae <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009f7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009f80:	b25b      	sxtb	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	da03      	bge.n	8009f8e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009f86:	2306      	movs	r3, #6
 8009f88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009f8c:	e00f      	b.n	8009fae <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	bf8c      	ite	hi
 8009f94:	2301      	movhi	r3, #1
 8009f96:	2300      	movls	r3, #0
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f107 0314 	add.w	r3, r7, #20
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe fbd8 	bl	8008758 <chk_lock>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	f003 031c 	and.w	r3, r3, #28
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d07f      	beq.n	800a0b8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d017      	beq.n	8009ff0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fc4:	2b04      	cmp	r3, #4
 8009fc6:	d10e      	bne.n	8009fe6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009fc8:	f7fe fc22 	bl	8008810 <enq_lock>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d006      	beq.n	8009fe0 <f_open+0xc4>
 8009fd2:	f107 0314 	add.w	r3, r7, #20
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7ff fb06 	bl	80095e8 <dir_register>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	e000      	b.n	8009fe2 <f_open+0xc6>
 8009fe0:	2312      	movs	r3, #18
 8009fe2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	f043 0308 	orr.w	r3, r3, #8
 8009fec:	71fb      	strb	r3, [r7, #7]
 8009fee:	e010      	b.n	800a012 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009ff0:	7ebb      	ldrb	r3, [r7, #26]
 8009ff2:	f003 0311 	and.w	r3, r3, #17
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <f_open+0xe6>
					res = FR_DENIED;
 8009ffa:	2307      	movs	r3, #7
 8009ffc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a000:	e007      	b.n	800a012 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a002:	79fb      	ldrb	r3, [r7, #7]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <f_open+0xf6>
 800a00c:	2308      	movs	r3, #8
 800a00e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a012:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a016:	2b00      	cmp	r3, #0
 800a018:	d168      	bne.n	800a0ec <f_open+0x1d0>
 800a01a:	79fb      	ldrb	r3, [r7, #7]
 800a01c:	f003 0308 	and.w	r3, r3, #8
 800a020:	2b00      	cmp	r3, #0
 800a022:	d063      	beq.n	800a0ec <f_open+0x1d0>
				dw = GET_FATTIME();
 800a024:	f7fe f88c 	bl	8008140 <get_fattime>
 800a028:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a02a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a02c:	330e      	adds	r3, #14
 800a02e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fae7 	bl	8008604 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a038:	3316      	adds	r3, #22
 800a03a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fe fae1 	bl	8008604 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a044:	330b      	adds	r3, #11
 800a046:	2220      	movs	r2, #32
 800a048:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a04e:	4611      	mov	r1, r2
 800a050:	4618      	mov	r0, r3
 800a052:	f7ff fa35 	bl	80094c0 <ld_clust>
 800a056:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a05c:	2200      	movs	r2, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f7ff fa4d 	bl	80094fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a066:	331c      	adds	r3, #28
 800a068:	2100      	movs	r1, #0
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe faca 	bl	8008604 <st_dword>
					fs->wflag = 1;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	2201      	movs	r2, #1
 800a074:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d037      	beq.n	800a0ec <f_open+0x1d0>
						dw = fs->winsect;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a080:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a082:	f107 0314 	add.w	r3, r7, #20
 800a086:	2200      	movs	r2, #0
 800a088:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe ff60 	bl	8008f50 <remove_chain>
 800a090:	4603      	mov	r3, r0
 800a092:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a096:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d126      	bne.n	800a0ec <f_open+0x1d0>
							res = move_window(fs, dw);
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe fd08 	bl	8008ab8 <move_window>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0b2:	3a01      	subs	r2, #1
 800a0b4:	60da      	str	r2, [r3, #12]
 800a0b6:	e019      	b.n	800a0ec <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a0b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d115      	bne.n	800a0ec <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a0c0:	7ebb      	ldrb	r3, [r7, #26]
 800a0c2:	f003 0310 	and.w	r3, r3, #16
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a0ca:	2304      	movs	r3, #4
 800a0cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a0d0:	e00c      	b.n	800a0ec <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	f003 0302 	and.w	r3, r3, #2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d007      	beq.n	800a0ec <f_open+0x1d0>
 800a0dc:	7ebb      	ldrb	r3, [r7, #26]
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <f_open+0x1d0>
						res = FR_DENIED;
 800a0e6:	2307      	movs	r3, #7
 800a0e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a0ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d126      	bne.n	800a142 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	f003 0308 	and.w	r3, r3, #8
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a104:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a10e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a114:	79fb      	ldrb	r3, [r7, #7]
 800a116:	2b01      	cmp	r3, #1
 800a118:	bf8c      	ite	hi
 800a11a:	2301      	movhi	r3, #1
 800a11c:	2300      	movls	r3, #0
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	461a      	mov	r2, r3
 800a122:	f107 0314 	add.w	r3, r7, #20
 800a126:	4611      	mov	r1, r2
 800a128:	4618      	mov	r0, r3
 800a12a:	f7fe fb93 	bl	8008854 <inc_lock>
 800a12e:	4602      	mov	r2, r0
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d102      	bne.n	800a142 <f_open+0x226>
 800a13c:	2302      	movs	r3, #2
 800a13e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a142:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a146:	2b00      	cmp	r3, #0
 800a148:	f040 8095 	bne.w	800a276 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a150:	4611      	mov	r1, r2
 800a152:	4618      	mov	r0, r3
 800a154:	f7ff f9b4 	bl	80094c0 <ld_clust>
 800a158:	4602      	mov	r2, r0
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a160:	331c      	adds	r3, #28
 800a162:	4618      	mov	r0, r3
 800a164:	f7fe fa10 	bl	8008588 <ld_dword>
 800a168:	4602      	mov	r2, r0
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	88da      	ldrh	r2, [r3, #6]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	79fa      	ldrb	r2, [r7, #7]
 800a186:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3330      	adds	r3, #48	@ 0x30
 800a19e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fe fa7a 	bl	800869e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a1aa:	79fb      	ldrb	r3, [r7, #7]
 800a1ac:	f003 0320 	and.w	r3, r3, #32
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d060      	beq.n	800a276 <f_open+0x35a>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d05c      	beq.n	800a276 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	68da      	ldr	r2, [r3, #12]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	895b      	ldrh	r3, [r3, #10]
 800a1c8:	025b      	lsls	r3, r3, #9
 800a1ca:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1d8:	e016      	b.n	800a208 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fe fd25 	bl	8008c2e <get_fat>
 800a1e4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a1e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d802      	bhi.n	800a1f2 <f_open+0x2d6>
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a1f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f8:	d102      	bne.n	800a200 <f_open+0x2e4>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a200:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	657b      	str	r3, [r7, #84]	@ 0x54
 800a208:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d103      	bne.n	800a218 <f_open+0x2fc>
 800a210:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a214:	429a      	cmp	r2, r3
 800a216:	d8e0      	bhi.n	800a1da <f_open+0x2be>
				}
				fp->clust = clst;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a21c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a21e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a222:	2b00      	cmp	r3, #0
 800a224:	d127      	bne.n	800a276 <f_open+0x35a>
 800a226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d022      	beq.n	800a276 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a234:	4618      	mov	r0, r3
 800a236:	f7fe fcdb 	bl	8008bf0 <clust2sect>
 800a23a:	6478      	str	r0, [r7, #68]	@ 0x44
 800a23c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d103      	bne.n	800a24a <f_open+0x32e>
						res = FR_INT_ERR;
 800a242:	2302      	movs	r3, #2
 800a244:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a248:	e015      	b.n	800a276 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a24a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a24c:	0a5a      	lsrs	r2, r3, #9
 800a24e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a250:	441a      	add	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	7858      	ldrb	r0, [r3, #1]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6a1a      	ldr	r2, [r3, #32]
 800a264:	2301      	movs	r3, #1
 800a266:	f7fe f919 	bl	800849c <disk_read>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <f_open+0x35a>
 800a270:	2301      	movs	r3, #1
 800a272:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a276:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d002      	beq.n	800a284 <f_open+0x368>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a284:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3760      	adds	r7, #96	@ 0x60
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08e      	sub	sp, #56	@ 0x38
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
 800a29c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f107 0214 	add.w	r2, r7, #20
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff fdb7 	bl	8009e24 <validate>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a2bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d107      	bne.n	800a2d4 <f_read+0x44>
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	7d5b      	ldrb	r3, [r3, #21]
 800a2c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a2cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <f_read+0x4a>
 800a2d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a2d8:	e115      	b.n	800a506 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	7d1b      	ldrb	r3, [r3, #20]
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <f_read+0x5a>
 800a2e6:	2307      	movs	r3, #7
 800a2e8:	e10d      	b.n	800a506 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	68da      	ldr	r2, [r3, #12]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	f240 80fe 	bls.w	800a4fc <f_read+0x26c>
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a304:	e0fa      	b.n	800a4fc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f040 80c6 	bne.w	800a4a0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	0a5b      	lsrs	r3, r3, #9
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	8952      	ldrh	r2, [r2, #10]
 800a31e:	3a01      	subs	r2, #1
 800a320:	4013      	ands	r3, r2
 800a322:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d12f      	bne.n	800a38a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	633b      	str	r3, [r7, #48]	@ 0x30
 800a338:	e013      	b.n	800a362 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d007      	beq.n	800a352 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	4619      	mov	r1, r3
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7fe fefe 	bl	800914a <clmt_clust>
 800a34e:	6338      	str	r0, [r7, #48]	@ 0x30
 800a350:	e007      	b.n	800a362 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	4619      	mov	r1, r3
 800a35a:	4610      	mov	r0, r2
 800a35c:	f7fe fc67 	bl	8008c2e <get_fat>
 800a360:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a364:	2b01      	cmp	r3, #1
 800a366:	d804      	bhi.n	800a372 <f_read+0xe2>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2202      	movs	r2, #2
 800a36c:	755a      	strb	r2, [r3, #21]
 800a36e:	2302      	movs	r3, #2
 800a370:	e0c9      	b.n	800a506 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a378:	d104      	bne.n	800a384 <f_read+0xf4>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2201      	movs	r2, #1
 800a37e:	755a      	strb	r2, [r3, #21]
 800a380:	2301      	movs	r3, #1
 800a382:	e0c0      	b.n	800a506 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a388:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	4619      	mov	r1, r3
 800a392:	4610      	mov	r0, r2
 800a394:	f7fe fc2c 	bl	8008bf0 <clust2sect>
 800a398:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d104      	bne.n	800a3aa <f_read+0x11a>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	755a      	strb	r2, [r3, #21]
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	e0ad      	b.n	800a506 <f_read+0x276>
			sect += csect;
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	0a5b      	lsrs	r3, r3, #9
 800a3b6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d039      	beq.n	800a432 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a3be:	69fa      	ldr	r2, [r7, #28]
 800a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c2:	4413      	add	r3, r2
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	8952      	ldrh	r2, [r2, #10]
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d905      	bls.n	800a3d8 <f_read+0x148>
					cc = fs->csize - csect;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	895b      	ldrh	r3, [r3, #10]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	7858      	ldrb	r0, [r3, #1]
 800a3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3de:	69ba      	ldr	r2, [r7, #24]
 800a3e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3e2:	f7fe f85b 	bl	800849c <disk_read>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d004      	beq.n	800a3f6 <f_read+0x166>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	755a      	strb	r2, [r3, #21]
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e087      	b.n	800a506 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	7d1b      	ldrb	r3, [r3, #20]
 800a3fa:	b25b      	sxtb	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	da14      	bge.n	800a42a <f_read+0x19a>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6a1a      	ldr	r2, [r3, #32]
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d90d      	bls.n	800a42a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6a1a      	ldr	r2, [r3, #32]
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	025b      	lsls	r3, r3, #9
 800a418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a41a:	18d0      	adds	r0, r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3330      	adds	r3, #48	@ 0x30
 800a420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a424:	4619      	mov	r1, r3
 800a426:	f7fe f919 	bl	800865c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42c:	025b      	lsls	r3, r3, #9
 800a42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a430:	e050      	b.n	800a4d4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d02e      	beq.n	800a49a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	7d1b      	ldrb	r3, [r3, #20]
 800a440:	b25b      	sxtb	r3, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	da18      	bge.n	800a478 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	7858      	ldrb	r0, [r3, #1]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6a1a      	ldr	r2, [r3, #32]
 800a454:	2301      	movs	r3, #1
 800a456:	f7fe f841 	bl	80084dc <disk_write>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d004      	beq.n	800a46a <f_read+0x1da>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2201      	movs	r2, #1
 800a464:	755a      	strb	r2, [r3, #21]
 800a466:	2301      	movs	r3, #1
 800a468:	e04d      	b.n	800a506 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	7d1b      	ldrb	r3, [r3, #20]
 800a46e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a472:	b2da      	uxtb	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	7858      	ldrb	r0, [r3, #1]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a482:	2301      	movs	r3, #1
 800a484:	69ba      	ldr	r2, [r7, #24]
 800a486:	f7fe f809 	bl	800849c <disk_read>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d004      	beq.n	800a49a <f_read+0x20a>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2201      	movs	r2, #1
 800a494:	755a      	strb	r2, [r3, #21]
 800a496:	2301      	movs	r3, #1
 800a498:	e035      	b.n	800a506 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	69ba      	ldr	r2, [r7, #24]
 800a49e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a4ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d901      	bls.n	800a4ba <f_read+0x22a>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4c8:	4413      	add	r3, r2
 800a4ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a4d0:	f7fe f8c4 	bl	800865c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a4d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d8:	4413      	add	r3, r2
 800a4da:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	699a      	ldr	r2, [r3, #24]
 800a4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e2:	441a      	add	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	619a      	str	r2, [r3, #24]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ee:	441a      	add	r2, r3
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f47f af01 	bne.w	800a306 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3738      	adds	r7, #56	@ 0x38
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b086      	sub	sp, #24
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f107 0208 	add.w	r2, r7, #8
 800a51c:	4611      	mov	r1, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff fc80 	bl	8009e24 <validate>
 800a524:	4603      	mov	r3, r0
 800a526:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d168      	bne.n	800a600 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	7d1b      	ldrb	r3, [r3, #20]
 800a532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a536:	2b00      	cmp	r3, #0
 800a538:	d062      	beq.n	800a600 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	7d1b      	ldrb	r3, [r3, #20]
 800a53e:	b25b      	sxtb	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	da15      	bge.n	800a570 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	7858      	ldrb	r0, [r3, #1]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1a      	ldr	r2, [r3, #32]
 800a552:	2301      	movs	r3, #1
 800a554:	f7fd ffc2 	bl	80084dc <disk_write>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <f_sync+0x54>
 800a55e:	2301      	movs	r3, #1
 800a560:	e04f      	b.n	800a602 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	7d1b      	ldrb	r3, [r3, #20]
 800a566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a570:	f7fd fde6 	bl	8008140 <get_fattime>
 800a574:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a57c:	4619      	mov	r1, r3
 800a57e:	4610      	mov	r0, r2
 800a580:	f7fe fa9a 	bl	8008ab8 <move_window>
 800a584:	4603      	mov	r3, r0
 800a586:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a588:	7dfb      	ldrb	r3, [r7, #23]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d138      	bne.n	800a600 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a592:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	330b      	adds	r3, #11
 800a598:	781a      	ldrb	r2, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	330b      	adds	r3, #11
 800a59e:	f042 0220 	orr.w	r2, r2, #32
 800a5a2:	b2d2      	uxtb	r2, r2
 800a5a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6818      	ldr	r0, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	68f9      	ldr	r1, [r7, #12]
 800a5b2:	f7fe ffa4 	bl	80094fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f103 021c 	add.w	r2, r3, #28
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	f7fe f81e 	bl	8008604 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3316      	adds	r3, #22
 800a5cc:	6939      	ldr	r1, [r7, #16]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fe f818 	bl	8008604 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3312      	adds	r3, #18
 800a5d8:	2100      	movs	r1, #0
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fd fff7 	bl	80085ce <st_word>
					fs->wflag = 1;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe fa93 	bl	8008b14 <sync_fs>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	7d1b      	ldrb	r3, [r3, #20]
 800a5f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a600:	7dfb      	ldrb	r3, [r7, #23]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b084      	sub	sp, #16
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff ff7b 	bl	800a50e <f_sync>
 800a618:	4603      	mov	r3, r0
 800a61a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d118      	bne.n	800a654 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f107 0208 	add.w	r2, r7, #8
 800a628:	4611      	mov	r1, r2
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff fbfa 	bl	8009e24 <validate>
 800a630:	4603      	mov	r3, r0
 800a632:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10c      	bne.n	800a654 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe f996 	bl	8008970 <dec_lock>
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d102      	bne.n	800a654 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a654:	7bfb      	ldrb	r3, [r7, #15]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b090      	sub	sp, #64	@ 0x40
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f107 0208 	add.w	r2, r7, #8
 800a66e:	4611      	mov	r1, r2
 800a670:	4618      	mov	r0, r3
 800a672:	f7ff fbd7 	bl	8009e24 <validate>
 800a676:	4603      	mov	r3, r0
 800a678:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a67c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a680:	2b00      	cmp	r3, #0
 800a682:	d103      	bne.n	800a68c <f_lseek+0x2e>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	7d5b      	ldrb	r3, [r3, #21]
 800a688:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a68c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a690:	2b00      	cmp	r3, #0
 800a692:	d002      	beq.n	800a69a <f_lseek+0x3c>
 800a694:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a698:	e1e6      	b.n	800aa68 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f000 80d1 	beq.w	800a846 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6aa:	d15a      	bne.n	800a762 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b4:	1d1a      	adds	r2, r3, #4
 800a6b6:	627a      	str	r2, [r7, #36]	@ 0x24
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	617b      	str	r3, [r7, #20]
 800a6bc:	2302      	movs	r3, #2
 800a6be:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d03a      	beq.n	800a742 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ce:	613b      	str	r3, [r7, #16]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d6:	3302      	adds	r3, #2
 800a6d8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6dc:	60fb      	str	r3, [r7, #12]
 800a6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fe faa0 	bl	8008c2e <get_fat>
 800a6ee:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d804      	bhi.n	800a700 <f_lseek+0xa2>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	755a      	strb	r2, [r3, #21]
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e1b3      	b.n	800aa68 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a706:	d104      	bne.n	800a712 <f_lseek+0xb4>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	755a      	strb	r2, [r3, #21]
 800a70e:	2301      	movs	r3, #1
 800a710:	e1aa      	b.n	800aa68 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3301      	adds	r3, #1
 800a716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a718:	429a      	cmp	r2, r3
 800a71a:	d0de      	beq.n	800a6da <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a71c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	429a      	cmp	r2, r3
 800a722:	d809      	bhi.n	800a738 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a726:	1d1a      	adds	r2, r3, #4
 800a728:	627a      	str	r2, [r7, #36]	@ 0x24
 800a72a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a730:	1d1a      	adds	r2, r3, #4
 800a732:	627a      	str	r2, [r7, #36]	@ 0x24
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a73e:	429a      	cmp	r2, r3
 800a740:	d3c4      	bcc.n	800a6cc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a748:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a74a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d803      	bhi.n	800a75a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a754:	2200      	movs	r2, #0
 800a756:	601a      	str	r2, [r3, #0]
 800a758:	e184      	b.n	800aa64 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a75a:	2311      	movs	r3, #17
 800a75c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a760:	e180      	b.n	800aa64 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d902      	bls.n	800a772 <f_lseek+0x114>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 8172 	beq.w	800aa64 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	3b01      	subs	r3, #1
 800a784:	4619      	mov	r1, r3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f7fe fcdf 	bl	800914a <clmt_clust>
 800a78c:	4602      	mov	r2, r0
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	69db      	ldr	r3, [r3, #28]
 800a798:	4619      	mov	r1, r3
 800a79a:	4610      	mov	r0, r2
 800a79c:	f7fe fa28 	bl	8008bf0 <clust2sect>
 800a7a0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d104      	bne.n	800a7b2 <f_lseek+0x154>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	755a      	strb	r2, [r3, #21]
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	e15a      	b.n	800aa68 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	0a5b      	lsrs	r3, r3, #9
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	8952      	ldrh	r2, [r2, #10]
 800a7bc:	3a01      	subs	r2, #1
 800a7be:	4013      	ands	r3, r2
 800a7c0:	69ba      	ldr	r2, [r7, #24]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f000 8148 	beq.w	800aa64 <f_lseek+0x406>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	69ba      	ldr	r2, [r7, #24]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	f000 8142 	beq.w	800aa64 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	7d1b      	ldrb	r3, [r3, #20]
 800a7e4:	b25b      	sxtb	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	da18      	bge.n	800a81c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	7858      	ldrb	r0, [r3, #1]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a1a      	ldr	r2, [r3, #32]
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	f7fd fe6f 	bl	80084dc <disk_write>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d004      	beq.n	800a80e <f_lseek+0x1b0>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	755a      	strb	r2, [r3, #21]
 800a80a:	2301      	movs	r3, #1
 800a80c:	e12c      	b.n	800aa68 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	7d1b      	ldrb	r3, [r3, #20]
 800a812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a816:	b2da      	uxtb	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	7858      	ldrb	r0, [r3, #1]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a826:	2301      	movs	r3, #1
 800a828:	69ba      	ldr	r2, [r7, #24]
 800a82a:	f7fd fe37 	bl	800849c <disk_read>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d004      	beq.n	800a83e <f_lseek+0x1e0>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	755a      	strb	r2, [r3, #21]
 800a83a:	2301      	movs	r3, #1
 800a83c:	e114      	b.n	800aa68 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	69ba      	ldr	r2, [r7, #24]
 800a842:	621a      	str	r2, [r3, #32]
 800a844:	e10e      	b.n	800aa64 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d908      	bls.n	800a862 <f_lseek+0x204>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	7d1b      	ldrb	r3, [r3, #20]
 800a854:	f003 0302 	and.w	r3, r3, #2
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d102      	bne.n	800a862 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a870:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 80a7 	beq.w	800a9c8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	895b      	ldrh	r3, [r3, #10]
 800a87e:	025b      	lsls	r3, r3, #9
 800a880:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d01b      	beq.n	800a8c0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	1e5a      	subs	r2, r3, #1
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	1e59      	subs	r1, r3, #1
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d30f      	bcc.n	800a8c0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	1e5a      	subs	r2, r3, #1
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	425b      	negs	r3, r3
 800a8a8:	401a      	ands	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8be:	e022      	b.n	800a906 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d119      	bne.n	800a900 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7fe fba2 	bl	800901a <create_chain>
 800a8d6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d104      	bne.n	800a8e8 <f_lseek+0x28a>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	755a      	strb	r2, [r3, #21]
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	e0bf      	b.n	800aa68 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ee:	d104      	bne.n	800a8fa <f_lseek+0x29c>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	755a      	strb	r2, [r3, #21]
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e0b6      	b.n	800aa68 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8fe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a904:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d05d      	beq.n	800a9c8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a90c:	e03a      	b.n	800a984 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	603b      	str	r3, [r7, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	699a      	ldr	r2, [r3, #24]
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	441a      	add	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	7d1b      	ldrb	r3, [r3, #20]
 800a926:	f003 0302 	and.w	r3, r3, #2
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00b      	beq.n	800a946 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe fb71 	bl	800901a <create_chain>
 800a938:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d108      	bne.n	800a952 <f_lseek+0x2f4>
							ofs = 0; break;
 800a940:	2300      	movs	r3, #0
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	e022      	b.n	800a98c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe f96f 	bl	8008c2e <get_fat>
 800a950:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a958:	d104      	bne.n	800a964 <f_lseek+0x306>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	755a      	strb	r2, [r3, #21]
 800a960:	2301      	movs	r3, #1
 800a962:	e081      	b.n	800aa68 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a966:	2b01      	cmp	r3, #1
 800a968:	d904      	bls.n	800a974 <f_lseek+0x316>
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a970:	429a      	cmp	r2, r3
 800a972:	d304      	bcc.n	800a97e <f_lseek+0x320>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2202      	movs	r2, #2
 800a978:	755a      	strb	r2, [r3, #21]
 800a97a:	2302      	movs	r3, #2
 800a97c:	e074      	b.n	800aa68 <f_lseek+0x40a>
					fp->clust = clst;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a982:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d8c0      	bhi.n	800a90e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	699a      	ldr	r2, [r3, #24]
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	441a      	add	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d012      	beq.n	800a9c8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe f922 	bl	8008bf0 <clust2sect>
 800a9ac:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a9ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d104      	bne.n	800a9be <f_lseek+0x360>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	755a      	strb	r2, [r3, #21]
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	e054      	b.n	800aa68 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	0a5b      	lsrs	r3, r3, #9
 800a9c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9c4:	4413      	add	r3, r2
 800a9c6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	699a      	ldr	r2, [r3, #24]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d90a      	bls.n	800a9ea <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	699a      	ldr	r2, [r3, #24]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	7d1b      	ldrb	r3, [r3, #20]
 800a9e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d036      	beq.n	800aa64 <f_lseek+0x406>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d031      	beq.n	800aa64 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	7d1b      	ldrb	r3, [r3, #20]
 800aa04:	b25b      	sxtb	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	da18      	bge.n	800aa3c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	7858      	ldrb	r0, [r3, #1]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a1a      	ldr	r2, [r3, #32]
 800aa18:	2301      	movs	r3, #1
 800aa1a:	f7fd fd5f 	bl	80084dc <disk_write>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d004      	beq.n	800aa2e <f_lseek+0x3d0>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	755a      	strb	r2, [r3, #21]
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e01c      	b.n	800aa68 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	7d1b      	ldrb	r3, [r3, #20]
 800aa32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	7858      	ldrb	r0, [r3, #1]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa46:	2301      	movs	r3, #1
 800aa48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa4a:	f7fd fd27 	bl	800849c <disk_read>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d004      	beq.n	800aa5e <f_lseek+0x400>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	755a      	strb	r2, [r3, #21]
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e004      	b.n	800aa68 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa62:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800aa64:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3740      	adds	r7, #64	@ 0x40
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aa86:	4b1f      	ldr	r3, [pc, #124]	@ (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aa88:	7a5b      	ldrb	r3, [r3, #9]
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d131      	bne.n	800aaf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aa90:	4b1c      	ldr	r3, [pc, #112]	@ (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aa92:	7a5b      	ldrb	r3, [r3, #9]
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	461a      	mov	r2, r3
 800aa98:	4b1a      	ldr	r3, [pc, #104]	@ (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aa9e:	4b19      	ldr	r3, [pc, #100]	@ (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aaa0:	7a5b      	ldrb	r3, [r3, #9]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	4a17      	ldr	r2, [pc, #92]	@ (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aaae:	4b15      	ldr	r3, [pc, #84]	@ (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aab0:	7a5b      	ldrb	r3, [r3, #9]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	461a      	mov	r2, r3
 800aab6:	4b13      	ldr	r3, [pc, #76]	@ (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aab8:	4413      	add	r3, r2
 800aaba:	79fa      	ldrb	r2, [r7, #7]
 800aabc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aabe:	4b11      	ldr	r3, [pc, #68]	@ (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aac0:	7a5b      	ldrb	r3, [r3, #9]
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	b2d1      	uxtb	r1, r2
 800aac8:	4a0e      	ldr	r2, [pc, #56]	@ (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aaca:	7251      	strb	r1, [r2, #9]
 800aacc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aace:	7dbb      	ldrb	r3, [r7, #22]
 800aad0:	3330      	adds	r3, #48	@ 0x30
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	3301      	adds	r3, #1
 800aadc:	223a      	movs	r2, #58	@ 0x3a
 800aade:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	3302      	adds	r3, #2
 800aae4:	222f      	movs	r2, #47	@ 0x2f
 800aae6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	3303      	adds	r3, #3
 800aaec:	2200      	movs	r2, #0
 800aaee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	371c      	adds	r7, #28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	2000259c 	.word	0x2000259c

0800ab08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab12:	2200      	movs	r2, #0
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7ff ffaa 	bl	800aa70 <FATFS_LinkDriverEx>
 800ab1c:	4603      	mov	r3, r0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <malloc>:
 800ab28:	4b02      	ldr	r3, [pc, #8]	@ (800ab34 <malloc+0xc>)
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	f000 b82d 	b.w	800ab8c <_malloc_r>
 800ab32:	bf00      	nop
 800ab34:	20000018 	.word	0x20000018

0800ab38 <free>:
 800ab38:	4b02      	ldr	r3, [pc, #8]	@ (800ab44 <free+0xc>)
 800ab3a:	4601      	mov	r1, r0
 800ab3c:	6818      	ldr	r0, [r3, #0]
 800ab3e:	f000 b939 	b.w	800adb4 <_free_r>
 800ab42:	bf00      	nop
 800ab44:	20000018 	.word	0x20000018

0800ab48 <sbrk_aligned>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	4e0f      	ldr	r6, [pc, #60]	@ (800ab88 <sbrk_aligned+0x40>)
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	6831      	ldr	r1, [r6, #0]
 800ab50:	4605      	mov	r5, r0
 800ab52:	b911      	cbnz	r1, 800ab5a <sbrk_aligned+0x12>
 800ab54:	f000 f8e4 	bl	800ad20 <_sbrk_r>
 800ab58:	6030      	str	r0, [r6, #0]
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	f000 f8df 	bl	800ad20 <_sbrk_r>
 800ab62:	1c43      	adds	r3, r0, #1
 800ab64:	d103      	bne.n	800ab6e <sbrk_aligned+0x26>
 800ab66:	f04f 34ff 	mov.w	r4, #4294967295
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	bd70      	pop	{r4, r5, r6, pc}
 800ab6e:	1cc4      	adds	r4, r0, #3
 800ab70:	f024 0403 	bic.w	r4, r4, #3
 800ab74:	42a0      	cmp	r0, r4
 800ab76:	d0f8      	beq.n	800ab6a <sbrk_aligned+0x22>
 800ab78:	1a21      	subs	r1, r4, r0
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	f000 f8d0 	bl	800ad20 <_sbrk_r>
 800ab80:	3001      	adds	r0, #1
 800ab82:	d1f2      	bne.n	800ab6a <sbrk_aligned+0x22>
 800ab84:	e7ef      	b.n	800ab66 <sbrk_aligned+0x1e>
 800ab86:	bf00      	nop
 800ab88:	200025a8 	.word	0x200025a8

0800ab8c <_malloc_r>:
 800ab8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab90:	1ccd      	adds	r5, r1, #3
 800ab92:	f025 0503 	bic.w	r5, r5, #3
 800ab96:	3508      	adds	r5, #8
 800ab98:	2d0c      	cmp	r5, #12
 800ab9a:	bf38      	it	cc
 800ab9c:	250c      	movcc	r5, #12
 800ab9e:	2d00      	cmp	r5, #0
 800aba0:	4606      	mov	r6, r0
 800aba2:	db01      	blt.n	800aba8 <_malloc_r+0x1c>
 800aba4:	42a9      	cmp	r1, r5
 800aba6:	d904      	bls.n	800abb2 <_malloc_r+0x26>
 800aba8:	230c      	movs	r3, #12
 800abaa:	6033      	str	r3, [r6, #0]
 800abac:	2000      	movs	r0, #0
 800abae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac88 <_malloc_r+0xfc>
 800abb6:	f000 f869 	bl	800ac8c <__malloc_lock>
 800abba:	f8d8 3000 	ldr.w	r3, [r8]
 800abbe:	461c      	mov	r4, r3
 800abc0:	bb44      	cbnz	r4, 800ac14 <_malloc_r+0x88>
 800abc2:	4629      	mov	r1, r5
 800abc4:	4630      	mov	r0, r6
 800abc6:	f7ff ffbf 	bl	800ab48 <sbrk_aligned>
 800abca:	1c43      	adds	r3, r0, #1
 800abcc:	4604      	mov	r4, r0
 800abce:	d158      	bne.n	800ac82 <_malloc_r+0xf6>
 800abd0:	f8d8 4000 	ldr.w	r4, [r8]
 800abd4:	4627      	mov	r7, r4
 800abd6:	2f00      	cmp	r7, #0
 800abd8:	d143      	bne.n	800ac62 <_malloc_r+0xd6>
 800abda:	2c00      	cmp	r4, #0
 800abdc:	d04b      	beq.n	800ac76 <_malloc_r+0xea>
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	4639      	mov	r1, r7
 800abe2:	4630      	mov	r0, r6
 800abe4:	eb04 0903 	add.w	r9, r4, r3
 800abe8:	f000 f89a 	bl	800ad20 <_sbrk_r>
 800abec:	4581      	cmp	r9, r0
 800abee:	d142      	bne.n	800ac76 <_malloc_r+0xea>
 800abf0:	6821      	ldr	r1, [r4, #0]
 800abf2:	1a6d      	subs	r5, r5, r1
 800abf4:	4629      	mov	r1, r5
 800abf6:	4630      	mov	r0, r6
 800abf8:	f7ff ffa6 	bl	800ab48 <sbrk_aligned>
 800abfc:	3001      	adds	r0, #1
 800abfe:	d03a      	beq.n	800ac76 <_malloc_r+0xea>
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	442b      	add	r3, r5
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	f8d8 3000 	ldr.w	r3, [r8]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	bb62      	cbnz	r2, 800ac68 <_malloc_r+0xdc>
 800ac0e:	f8c8 7000 	str.w	r7, [r8]
 800ac12:	e00f      	b.n	800ac34 <_malloc_r+0xa8>
 800ac14:	6822      	ldr	r2, [r4, #0]
 800ac16:	1b52      	subs	r2, r2, r5
 800ac18:	d420      	bmi.n	800ac5c <_malloc_r+0xd0>
 800ac1a:	2a0b      	cmp	r2, #11
 800ac1c:	d917      	bls.n	800ac4e <_malloc_r+0xc2>
 800ac1e:	1961      	adds	r1, r4, r5
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	6025      	str	r5, [r4, #0]
 800ac24:	bf18      	it	ne
 800ac26:	6059      	strne	r1, [r3, #4]
 800ac28:	6863      	ldr	r3, [r4, #4]
 800ac2a:	bf08      	it	eq
 800ac2c:	f8c8 1000 	streq.w	r1, [r8]
 800ac30:	5162      	str	r2, [r4, r5]
 800ac32:	604b      	str	r3, [r1, #4]
 800ac34:	4630      	mov	r0, r6
 800ac36:	f000 f82f 	bl	800ac98 <__malloc_unlock>
 800ac3a:	f104 000b 	add.w	r0, r4, #11
 800ac3e:	1d23      	adds	r3, r4, #4
 800ac40:	f020 0007 	bic.w	r0, r0, #7
 800ac44:	1ac2      	subs	r2, r0, r3
 800ac46:	bf1c      	itt	ne
 800ac48:	1a1b      	subne	r3, r3, r0
 800ac4a:	50a3      	strne	r3, [r4, r2]
 800ac4c:	e7af      	b.n	800abae <_malloc_r+0x22>
 800ac4e:	6862      	ldr	r2, [r4, #4]
 800ac50:	42a3      	cmp	r3, r4
 800ac52:	bf0c      	ite	eq
 800ac54:	f8c8 2000 	streq.w	r2, [r8]
 800ac58:	605a      	strne	r2, [r3, #4]
 800ac5a:	e7eb      	b.n	800ac34 <_malloc_r+0xa8>
 800ac5c:	4623      	mov	r3, r4
 800ac5e:	6864      	ldr	r4, [r4, #4]
 800ac60:	e7ae      	b.n	800abc0 <_malloc_r+0x34>
 800ac62:	463c      	mov	r4, r7
 800ac64:	687f      	ldr	r7, [r7, #4]
 800ac66:	e7b6      	b.n	800abd6 <_malloc_r+0x4a>
 800ac68:	461a      	mov	r2, r3
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	42a3      	cmp	r3, r4
 800ac6e:	d1fb      	bne.n	800ac68 <_malloc_r+0xdc>
 800ac70:	2300      	movs	r3, #0
 800ac72:	6053      	str	r3, [r2, #4]
 800ac74:	e7de      	b.n	800ac34 <_malloc_r+0xa8>
 800ac76:	230c      	movs	r3, #12
 800ac78:	6033      	str	r3, [r6, #0]
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	f000 f80c 	bl	800ac98 <__malloc_unlock>
 800ac80:	e794      	b.n	800abac <_malloc_r+0x20>
 800ac82:	6005      	str	r5, [r0, #0]
 800ac84:	e7d6      	b.n	800ac34 <_malloc_r+0xa8>
 800ac86:	bf00      	nop
 800ac88:	200025ac 	.word	0x200025ac

0800ac8c <__malloc_lock>:
 800ac8c:	4801      	ldr	r0, [pc, #4]	@ (800ac94 <__malloc_lock+0x8>)
 800ac8e:	f000 b881 	b.w	800ad94 <__retarget_lock_acquire_recursive>
 800ac92:	bf00      	nop
 800ac94:	200026ec 	.word	0x200026ec

0800ac98 <__malloc_unlock>:
 800ac98:	4801      	ldr	r0, [pc, #4]	@ (800aca0 <__malloc_unlock+0x8>)
 800ac9a:	f000 b87c 	b.w	800ad96 <__retarget_lock_release_recursive>
 800ac9e:	bf00      	nop
 800aca0:	200026ec 	.word	0x200026ec

0800aca4 <realloc>:
 800aca4:	4b02      	ldr	r3, [pc, #8]	@ (800acb0 <realloc+0xc>)
 800aca6:	460a      	mov	r2, r1
 800aca8:	4601      	mov	r1, r0
 800acaa:	6818      	ldr	r0, [r3, #0]
 800acac:	f000 b802 	b.w	800acb4 <_realloc_r>
 800acb0:	20000018 	.word	0x20000018

0800acb4 <_realloc_r>:
 800acb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb8:	4680      	mov	r8, r0
 800acba:	4615      	mov	r5, r2
 800acbc:	460c      	mov	r4, r1
 800acbe:	b921      	cbnz	r1, 800acca <_realloc_r+0x16>
 800acc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acc4:	4611      	mov	r1, r2
 800acc6:	f7ff bf61 	b.w	800ab8c <_malloc_r>
 800acca:	b92a      	cbnz	r2, 800acd8 <_realloc_r+0x24>
 800accc:	f000 f872 	bl	800adb4 <_free_r>
 800acd0:	2400      	movs	r4, #0
 800acd2:	4620      	mov	r0, r4
 800acd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd8:	f000 f8b6 	bl	800ae48 <_malloc_usable_size_r>
 800acdc:	4285      	cmp	r5, r0
 800acde:	4606      	mov	r6, r0
 800ace0:	d802      	bhi.n	800ace8 <_realloc_r+0x34>
 800ace2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ace6:	d8f4      	bhi.n	800acd2 <_realloc_r+0x1e>
 800ace8:	4629      	mov	r1, r5
 800acea:	4640      	mov	r0, r8
 800acec:	f7ff ff4e 	bl	800ab8c <_malloc_r>
 800acf0:	4607      	mov	r7, r0
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d0ec      	beq.n	800acd0 <_realloc_r+0x1c>
 800acf6:	42b5      	cmp	r5, r6
 800acf8:	462a      	mov	r2, r5
 800acfa:	4621      	mov	r1, r4
 800acfc:	bf28      	it	cs
 800acfe:	4632      	movcs	r2, r6
 800ad00:	f000 f84a 	bl	800ad98 <memcpy>
 800ad04:	4621      	mov	r1, r4
 800ad06:	4640      	mov	r0, r8
 800ad08:	f000 f854 	bl	800adb4 <_free_r>
 800ad0c:	463c      	mov	r4, r7
 800ad0e:	e7e0      	b.n	800acd2 <_realloc_r+0x1e>

0800ad10 <memset>:
 800ad10:	4402      	add	r2, r0
 800ad12:	4603      	mov	r3, r0
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d100      	bne.n	800ad1a <memset+0xa>
 800ad18:	4770      	bx	lr
 800ad1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad1e:	e7f9      	b.n	800ad14 <memset+0x4>

0800ad20 <_sbrk_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d06      	ldr	r5, [pc, #24]	@ (800ad3c <_sbrk_r+0x1c>)
 800ad24:	2300      	movs	r3, #0
 800ad26:	4604      	mov	r4, r0
 800ad28:	4608      	mov	r0, r1
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	f7f7 fad6 	bl	80022dc <_sbrk>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_sbrk_r+0x1a>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_sbrk_r+0x1a>
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	200026e8 	.word	0x200026e8

0800ad40 <__errno>:
 800ad40:	4b01      	ldr	r3, [pc, #4]	@ (800ad48 <__errno+0x8>)
 800ad42:	6818      	ldr	r0, [r3, #0]
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20000018 	.word	0x20000018

0800ad4c <__libc_init_array>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ad84 <__libc_init_array+0x38>)
 800ad50:	4c0d      	ldr	r4, [pc, #52]	@ (800ad88 <__libc_init_array+0x3c>)
 800ad52:	1b64      	subs	r4, r4, r5
 800ad54:	10a4      	asrs	r4, r4, #2
 800ad56:	2600      	movs	r6, #0
 800ad58:	42a6      	cmp	r6, r4
 800ad5a:	d109      	bne.n	800ad70 <__libc_init_array+0x24>
 800ad5c:	4d0b      	ldr	r5, [pc, #44]	@ (800ad8c <__libc_init_array+0x40>)
 800ad5e:	4c0c      	ldr	r4, [pc, #48]	@ (800ad90 <__libc_init_array+0x44>)
 800ad60:	f000 f87a 	bl	800ae58 <_init>
 800ad64:	1b64      	subs	r4, r4, r5
 800ad66:	10a4      	asrs	r4, r4, #2
 800ad68:	2600      	movs	r6, #0
 800ad6a:	42a6      	cmp	r6, r4
 800ad6c:	d105      	bne.n	800ad7a <__libc_init_array+0x2e>
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}
 800ad70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad74:	4798      	blx	r3
 800ad76:	3601      	adds	r6, #1
 800ad78:	e7ee      	b.n	800ad58 <__libc_init_array+0xc>
 800ad7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7e:	4798      	blx	r3
 800ad80:	3601      	adds	r6, #1
 800ad82:	e7f2      	b.n	800ad6a <__libc_init_array+0x1e>
 800ad84:	0800bd18 	.word	0x0800bd18
 800ad88:	0800bd18 	.word	0x0800bd18
 800ad8c:	0800bd18 	.word	0x0800bd18
 800ad90:	0800bd1c 	.word	0x0800bd1c

0800ad94 <__retarget_lock_acquire_recursive>:
 800ad94:	4770      	bx	lr

0800ad96 <__retarget_lock_release_recursive>:
 800ad96:	4770      	bx	lr

0800ad98 <memcpy>:
 800ad98:	440a      	add	r2, r1
 800ad9a:	4291      	cmp	r1, r2
 800ad9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ada0:	d100      	bne.n	800ada4 <memcpy+0xc>
 800ada2:	4770      	bx	lr
 800ada4:	b510      	push	{r4, lr}
 800ada6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adae:	4291      	cmp	r1, r2
 800adb0:	d1f9      	bne.n	800ada6 <memcpy+0xe>
 800adb2:	bd10      	pop	{r4, pc}

0800adb4 <_free_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4605      	mov	r5, r0
 800adb8:	2900      	cmp	r1, #0
 800adba:	d041      	beq.n	800ae40 <_free_r+0x8c>
 800adbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc0:	1f0c      	subs	r4, r1, #4
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	bfb8      	it	lt
 800adc6:	18e4      	addlt	r4, r4, r3
 800adc8:	f7ff ff60 	bl	800ac8c <__malloc_lock>
 800adcc:	4a1d      	ldr	r2, [pc, #116]	@ (800ae44 <_free_r+0x90>)
 800adce:	6813      	ldr	r3, [r2, #0]
 800add0:	b933      	cbnz	r3, 800ade0 <_free_r+0x2c>
 800add2:	6063      	str	r3, [r4, #4]
 800add4:	6014      	str	r4, [r2, #0]
 800add6:	4628      	mov	r0, r5
 800add8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800addc:	f7ff bf5c 	b.w	800ac98 <__malloc_unlock>
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	d908      	bls.n	800adf6 <_free_r+0x42>
 800ade4:	6820      	ldr	r0, [r4, #0]
 800ade6:	1821      	adds	r1, r4, r0
 800ade8:	428b      	cmp	r3, r1
 800adea:	bf01      	itttt	eq
 800adec:	6819      	ldreq	r1, [r3, #0]
 800adee:	685b      	ldreq	r3, [r3, #4]
 800adf0:	1809      	addeq	r1, r1, r0
 800adf2:	6021      	streq	r1, [r4, #0]
 800adf4:	e7ed      	b.n	800add2 <_free_r+0x1e>
 800adf6:	461a      	mov	r2, r3
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	b10b      	cbz	r3, 800ae00 <_free_r+0x4c>
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	d9fa      	bls.n	800adf6 <_free_r+0x42>
 800ae00:	6811      	ldr	r1, [r2, #0]
 800ae02:	1850      	adds	r0, r2, r1
 800ae04:	42a0      	cmp	r0, r4
 800ae06:	d10b      	bne.n	800ae20 <_free_r+0x6c>
 800ae08:	6820      	ldr	r0, [r4, #0]
 800ae0a:	4401      	add	r1, r0
 800ae0c:	1850      	adds	r0, r2, r1
 800ae0e:	4283      	cmp	r3, r0
 800ae10:	6011      	str	r1, [r2, #0]
 800ae12:	d1e0      	bne.n	800add6 <_free_r+0x22>
 800ae14:	6818      	ldr	r0, [r3, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	6053      	str	r3, [r2, #4]
 800ae1a:	4408      	add	r0, r1
 800ae1c:	6010      	str	r0, [r2, #0]
 800ae1e:	e7da      	b.n	800add6 <_free_r+0x22>
 800ae20:	d902      	bls.n	800ae28 <_free_r+0x74>
 800ae22:	230c      	movs	r3, #12
 800ae24:	602b      	str	r3, [r5, #0]
 800ae26:	e7d6      	b.n	800add6 <_free_r+0x22>
 800ae28:	6820      	ldr	r0, [r4, #0]
 800ae2a:	1821      	adds	r1, r4, r0
 800ae2c:	428b      	cmp	r3, r1
 800ae2e:	bf04      	itt	eq
 800ae30:	6819      	ldreq	r1, [r3, #0]
 800ae32:	685b      	ldreq	r3, [r3, #4]
 800ae34:	6063      	str	r3, [r4, #4]
 800ae36:	bf04      	itt	eq
 800ae38:	1809      	addeq	r1, r1, r0
 800ae3a:	6021      	streq	r1, [r4, #0]
 800ae3c:	6054      	str	r4, [r2, #4]
 800ae3e:	e7ca      	b.n	800add6 <_free_r+0x22>
 800ae40:	bd38      	pop	{r3, r4, r5, pc}
 800ae42:	bf00      	nop
 800ae44:	200025ac 	.word	0x200025ac

0800ae48 <_malloc_usable_size_r>:
 800ae48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae4c:	1f18      	subs	r0, r3, #4
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	bfbc      	itt	lt
 800ae52:	580b      	ldrlt	r3, [r1, r0]
 800ae54:	18c0      	addlt	r0, r0, r3
 800ae56:	4770      	bx	lr

0800ae58 <_init>:
 800ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5a:	bf00      	nop
 800ae5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae5e:	bc08      	pop	{r3}
 800ae60:	469e      	mov	lr, r3
 800ae62:	4770      	bx	lr

0800ae64 <_fini>:
 800ae64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae66:	bf00      	nop
 800ae68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae6a:	bc08      	pop	{r3}
 800ae6c:	469e      	mov	lr, r3
 800ae6e:	4770      	bx	lr
