
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eec  0800bb70  0800bb70  0000cb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca5c  0800ca5c  0000e068  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca5c  0800ca5c  0000da5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca64  0800ca64  0000e068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca64  0800ca64  0000da64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca68  0800ca68  0000da68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800ca6c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e068  2**0
                  CONTENTS
 10 .bss          00000698  20000068  20000068  0000e068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000700  20000700  0000e068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ee1  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d5b  00000000  00000000  00027f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  0002bcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000123f  00000000  00000000  0002d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b3b  00000000  00000000  0002e6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f38f  00000000  00000000  000541fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d69fc  00000000  00000000  00073589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149f85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000671c  00000000  00000000  00149fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001506e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bb58 	.word	0x0800bb58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800bb58 	.word	0x0800bb58

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <play_audio_file>:

static uint32_t *buffer; /*Buffer pentru redare audio folosit static in fisier*/


void play_audio_file(char *path)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af02      	add	r7, sp, #8
 80004be:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 80004c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004c4:	f00b f9b0 	bl	800b828 <malloc>
 80004c8:	4603      	mov	r3, r0
 80004ca:	461a      	mov	r2, r3
 80004cc:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <play_audio_file+0x98>)
 80004ce:	601a      	str	r2, [r3, #0]

	if(buffer == NULL)
 80004d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <play_audio_file+0x98>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d036      	beq.n	8000546 <play_audio_file+0x8e>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 80004d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <play_audio_file+0x98>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f001 ffe8 	bl	80024b4 <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <play_audio_file+0x98>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	2300      	movs	r3, #0
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004f0:	2100      	movs	r1, #0
 80004f2:	4818      	ldr	r0, [pc, #96]	@ (8000554 <play_audio_file+0x9c>)
 80004f4:	f002 ffae 	bl	8003454 <HAL_DAC_Start_DMA>

	while(1)
	{
		read_audio_file(path, buffer+1024);
 80004f8:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <play_audio_file+0x98>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000500:	4619      	mov	r1, r3
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f001 ffd6 	bl	80024b4 <read_audio_file>
		while(flagDmaDAC == 0);
 8000508:	bf00      	nop
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <play_audio_file+0xa0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f083 0301 	eor.w	r3, r3, #1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f7      	bne.n	800050a <play_audio_file+0x52>
		flagDmaDAC = 0;
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <play_audio_file+0xa0>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer);
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <play_audio_file+0x98>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f001 ffc4 	bl	80024b4 <read_audio_file>
		while(flagDmaDAC == 0);
 800052c:	bf00      	nop
 800052e:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <play_audio_file+0xa0>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1f7      	bne.n	800052e <play_audio_file+0x76>
		flagDmaDAC = 0;
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <play_audio_file+0xa0>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer+1024);
 8000544:	e7d8      	b.n	80004f8 <play_audio_file+0x40>
		return;
 8000546:	bf00      	nop

	}

	free(buffer);

}
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000084 	.word	0x20000084
 8000554:	20000088 	.word	0x20000088
 8000558:	2000032a 	.word	0x2000032a

0800055c <convert_color_16_to_18>:

extern SPI_HandleTypeDef hspi1;
volatile extern uint8_t flagDmaSpiTx;

void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	6039      	str	r1, [r7, #0]
 8000566:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	0adb      	lsrs	r3, r3, #11
 800056c:	b29b      	uxth	r3, r3
 800056e:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	115b      	asrs	r3, r3, #5
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800057a:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 031f 	and.w	r3, r3, #31
 8000584:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 8000586:	7bfa      	ldrb	r2, [r7, #15]
 8000588:	4613      	mov	r3, r2
 800058a:	019b      	lsls	r3, r3, #6
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <convert_color_16_to_18+0x8c>)
 8000590:	fb82 1203 	smull	r1, r2, r2, r3
 8000594:	441a      	add	r2, r3
 8000596:	1112      	asrs	r2, r2, #4
 8000598:	17db      	asrs	r3, r3, #31
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	b2db      	uxtb	r3, r3
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80005a2:	7bbb      	ldrb	r3, [r7, #14]
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 80005a8:	7b7a      	ldrb	r2, [r7, #13]
 80005aa:	4613      	mov	r3, r2
 80005ac:	019b      	lsls	r3, r3, #6
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <convert_color_16_to_18+0x8c>)
 80005b2:	fb82 1203 	smull	r1, r2, r2, r3
 80005b6:	441a      	add	r2, r3
 80005b8:	1112      	asrs	r2, r2, #4
 80005ba:	17db      	asrs	r3, r3, #31
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	7bfa      	ldrb	r2, [r7, #15]
 80005c8:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	7bba      	ldrb	r2, [r7, #14]
 80005d0:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	3302      	adds	r3, #2
 80005d6:	7b7a      	ldrb	r2, [r7, #13]
 80005d8:	701a      	strb	r2, [r3, #0]

}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	84210843 	.word	0x84210843

080005ec <write_color>:


void write_color(uint16_t color)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 80005f6:	f107 020c 	add.w	r2, r7, #12
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffac 	bl	800055c <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000604:	f107 010c 	add.w	r1, r7, #12
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	2203      	movs	r2, #3
 800060e:	4803      	ldr	r0, [pc, #12]	@ (800061c <write_color+0x30>)
 8000610:	f005 fb4b 	bl	8005caa <HAL_SPI_Transmit>


}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000180 	.word	0x20000180

08000620 <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b085      	sub	sp, #20
 8000624:	af02      	add	r7, sp, #8
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
 800062a:	460b      	mov	r3, r1
 800062c:	80bb      	strh	r3, [r7, #4]
 800062e:	4613      	mov	r3, r2
 8000630:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 8000632:	88bb      	ldrh	r3, [r7, #4]
 8000634:	88fa      	ldrh	r2, [r7, #6]
 8000636:	88b9      	ldrh	r1, [r7, #4]
 8000638:	88f8      	ldrh	r0, [r7, #6]
 800063a:	2477      	movs	r4, #119	@ 0x77
 800063c:	9400      	str	r4, [sp, #0]
 800063e:	f000 ff65 	bl	800150c <set_adress_window>

	DC_DATA();
 8000642:	2201      	movs	r2, #1
 8000644:	2108      	movs	r1, #8
 8000646:	480a      	ldr	r0, [pc, #40]	@ (8000670 <draw_pixel+0x50>)
 8000648:	f003 fe5c 	bl	8004304 <HAL_GPIO_WritePin>
	CS_A();
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4807      	ldr	r0, [pc, #28]	@ (8000670 <draw_pixel+0x50>)
 8000652:	f003 fe57 	bl	8004304 <HAL_GPIO_WritePin>

	write_color(color);
 8000656:	887b      	ldrh	r3, [r7, #2]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffc7 	bl	80005ec <write_color>

	CS_D();
 800065e:	2201      	movs	r2, #1
 8000660:	2110      	movs	r1, #16
 8000662:	4803      	ldr	r0, [pc, #12]	@ (8000670 <draw_pixel+0x50>)
 8000664:	f003 fe4e 	bl	8004304 <HAL_GPIO_WritePin>

}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	40020c00 	.word	0x40020c00

08000674 <fill_screen1>:




void fill_screen1(uint16_t color)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 800067e:	f107 020c 	add.w	r2, r7, #12
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff68 	bl	800055c <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 800068c:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8000690:	f00b f8ca 	bl	800b828 <malloc>
 8000694:	4603      	mov	r3, r0
 8000696:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000698:	2377      	movs	r3, #119	@ 0x77
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	f240 13df 	movw	r3, #479	@ 0x1df
 80006a0:	f240 123f 	movw	r2, #319	@ 0x13f
 80006a4:	2100      	movs	r1, #0
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 ff30 	bl	800150c <set_adress_window>

	DC_DATA();
 80006ac:	2201      	movs	r2, #1
 80006ae:	2108      	movs	r1, #8
 80006b0:	481e      	ldr	r0, [pc, #120]	@ (800072c <fill_screen1+0xb8>)
 80006b2:	f003 fe27 	bl	8004304 <HAL_GPIO_WritePin>
	CS_A();
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	481c      	ldr	r0, [pc, #112]	@ (800072c <fill_screen1+0xb8>)
 80006bc:	f003 fe22 	bl	8004304 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	82fb      	strh	r3, [r7, #22]
 80006c4:	e00f      	b.n	80006e6 <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 80006c6:	8afa      	ldrh	r2, [r7, #22]
 80006c8:	4613      	mov	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	4413      	add	r3, r2
 80006d2:	461a      	mov	r2, r3
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	8819      	ldrh	r1, [r3, #0]
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	8011      	strh	r1, [r2, #0]
 80006de:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80006e0:	8afb      	ldrh	r3, [r7, #22]
 80006e2:	3301      	adds	r3, #1
 80006e4:	82fb      	strh	r3, [r7, #22]
 80006e6:	8afb      	ldrh	r3, [r7, #22]
 80006e8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006ec:	d3eb      	bcc.n	80006c6 <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	82bb      	strh	r3, [r7, #20]
 80006f2:	e00a      	b.n	800070a <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80006fc:	6939      	ldr	r1, [r7, #16]
 80006fe:	480c      	ldr	r0, [pc, #48]	@ (8000730 <fill_screen1+0xbc>)
 8000700:	f005 fad3 	bl	8005caa <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 8000704:	8abb      	ldrh	r3, [r7, #20]
 8000706:	3301      	adds	r3, #1
 8000708:	82bb      	strh	r3, [r7, #20]
 800070a:	8abb      	ldrh	r3, [r7, #20]
 800070c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000710:	d3f0      	bcc.n	80006f4 <fill_screen1+0x80>

	}

	free(line);
 8000712:	6938      	ldr	r0, [r7, #16]
 8000714:	f00b f890 	bl	800b838 <free>

	CS_D();
 8000718:	2201      	movs	r2, #1
 800071a:	2110      	movs	r1, #16
 800071c:	4803      	ldr	r0, [pc, #12]	@ (800072c <fill_screen1+0xb8>)
 800071e:	f003 fdf1 	bl	8004304 <HAL_GPIO_WritePin>

}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40020c00 	.word	0x40020c00
 8000730:	20000180 	.word	0x20000180

08000734 <fill_screen2>:


void fill_screen2(uint16_t color)
{
 8000734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000738:	b08f      	sub	sp, #60	@ 0x3c
 800073a:	af02      	add	r7, sp, #8
 800073c:	4603      	mov	r3, r0
 800073e:	80fb      	strh	r3, [r7, #6]
 8000740:	466b      	mov	r3, sp
 8000742:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000744:	2377      	movs	r3, #119	@ 0x77
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	f240 13df 	movw	r3, #479	@ 0x1df
 800074c:	f240 123f 	movw	r2, #319	@ 0x13f
 8000750:	2100      	movs	r1, #0
 8000752:	2000      	movs	r0, #0
 8000754:	f000 feda 	bl	800150c <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 8000758:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 800075e:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8000762:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	0adb      	lsrs	r3, r3, #11
 8000768:	b29b      	uxth	r3, r3
 800076a:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	115b      	asrs	r3, r3, #5
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000776:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8000782:	7ffa      	ldrb	r2, [r7, #31]
 8000784:	4613      	mov	r3, r2
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	4a4f      	ldr	r2, [pc, #316]	@ (80008c8 <fill_screen2+0x194>)
 800078c:	fb82 1203 	smull	r1, r2, r2, r3
 8000790:	441a      	add	r2, r3
 8000792:	1112      	asrs	r2, r2, #4
 8000794:	17db      	asrs	r3, r3, #31
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 800079a:	7fba      	ldrb	r2, [r7, #30]
 800079c:	4613      	mov	r3, r2
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	1a9b      	subs	r3, r3, r2
 80007a2:	4a4a      	ldr	r2, [pc, #296]	@ (80008cc <fill_screen2+0x198>)
 80007a4:	fb82 1203 	smull	r1, r2, r2, r3
 80007a8:	441a      	add	r2, r3
 80007aa:	1152      	asrs	r2, r2, #5
 80007ac:	17db      	asrs	r3, r3, #31
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 80007b2:	7f7a      	ldrb	r2, [r7, #29]
 80007b4:	4613      	mov	r3, r2
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	1a9b      	subs	r3, r3, r2
 80007ba:	4a43      	ldr	r2, [pc, #268]	@ (80008c8 <fill_screen2+0x194>)
 80007bc:	fb82 1203 	smull	r1, r2, r2, r3
 80007c0:	441a      	add	r2, r3
 80007c2:	1112      	asrs	r2, r2, #4
 80007c4:	17db      	asrs	r3, r3, #31
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 80007ca:	2201      	movs	r2, #1
 80007cc:	2108      	movs	r1, #8
 80007ce:	4840      	ldr	r0, [pc, #256]	@ (80008d0 <fill_screen2+0x19c>)
 80007d0:	f003 fd98 	bl	8004304 <HAL_GPIO_WritePin>
	CS_A();
 80007d4:	2200      	movs	r2, #0
 80007d6:	2110      	movs	r1, #16
 80007d8:	483d      	ldr	r0, [pc, #244]	@ (80008d0 <fill_screen2+0x19c>)
 80007da:	f003 fd93 	bl	8004304 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80007de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007e0:	460b      	mov	r3, r1
 80007e2:	3b01      	subs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	2300      	movs	r3, #0
 80007e8:	4688      	mov	r8, r1
 80007ea:	4699      	mov	r9, r3
 80007ec:	f04f 0200 	mov.w	r2, #0
 80007f0:	f04f 0300 	mov.w	r3, #0
 80007f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000800:	2300      	movs	r3, #0
 8000802:	460c      	mov	r4, r1
 8000804:	461d      	mov	r5, r3
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	00eb      	lsls	r3, r5, #3
 8000810:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000814:	00e2      	lsls	r2, r4, #3
 8000816:	1dcb      	adds	r3, r1, #7
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	ebad 0d03 	sub.w	sp, sp, r3
 8000820:	ab02      	add	r3, sp, #8
 8000822:	3300      	adds	r3, #0
 8000824:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800082a:	e011      	b.n	8000850 <fill_screen2+0x11c>
	{
		frame[j] = r;
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000830:	4413      	add	r3, r2
 8000832:	7ffa      	ldrb	r2, [r7, #31]
 8000834:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 8000836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000838:	3301      	adds	r3, #1
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	7fb9      	ldrb	r1, [r7, #30]
 800083e:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8000840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000842:	3302      	adds	r3, #2
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	7f79      	ldrb	r1, [r7, #29]
 8000848:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 800084a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800084c:	3303      	adds	r3, #3
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	429a      	cmp	r2, r3
 8000856:	d3e9      	bcc.n	800082c <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 8000858:	6a3a      	ldr	r2, [r7, #32]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000866:	fbb2 f3f3 	udiv	r3, r2, r3
 800086a:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 800086c:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <fill_screen2+0x1a0>)
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000876:	e012      	b.n	800089e <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 8000878:	bf00      	nop
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <fill_screen2+0x1a0>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0fa      	beq.n	800087a <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <fill_screen2+0x1a0>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 800088a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088c:	b29b      	uxth	r3, r3
 800088e:	461a      	mov	r2, r3
 8000890:	6979      	ldr	r1, [r7, #20]
 8000892:	4811      	ldr	r0, [pc, #68]	@ (80008d8 <fill_screen2+0x1a4>)
 8000894:	f005 fe10 	bl	80064b8 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 8000898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089a:	3301      	adds	r3, #1
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800089e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d3e8      	bcc.n	8000878 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 80008a6:	bf00      	nop
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <fill_screen2+0x1a0>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0fa      	beq.n	80008a8 <fill_screen2+0x174>
	CS_D();
 80008b2:	2201      	movs	r2, #1
 80008b4:	2110      	movs	r1, #16
 80008b6:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <fill_screen2+0x19c>)
 80008b8:	f003 fd24 	bl	8004304 <HAL_GPIO_WritePin>
 80008bc:	46b5      	mov	sp, r6
}
 80008be:	bf00      	nop
 80008c0:	3734      	adds	r7, #52	@ 0x34
 80008c2:	46bd      	mov	sp, r7
 80008c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008c8:	84210843 	.word	0x84210843
 80008cc:	82082083 	.word	0x82082083
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	20000328 	.word	0x20000328
 80008d8:	20000180 	.word	0x20000180

080008dc <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b089      	sub	sp, #36	@ 0x24
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	4623      	mov	r3, r4
 80008ec:	80fb      	strh	r3, [r7, #6]
 80008ee:	4603      	mov	r3, r0
 80008f0:	80bb      	strh	r3, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	70fb      	strb	r3, [r7, #3]
 80008f6:	4613      	mov	r3, r2
 80008f8:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 80008fa:	4b3a      	ldr	r3, [pc, #232]	@ (80009e4 <print_character+0x108>)
 80008fc:	889a      	ldrh	r2, [r3, #4]
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	4413      	add	r3, r2
 8000902:	b29b      	uxth	r3, r3
 8000904:	3b01      	subs	r3, #1
 8000906:	b29c      	uxth	r4, r3
 8000908:	4b36      	ldr	r3, [pc, #216]	@ (80009e4 <print_character+0x108>)
 800090a:	88da      	ldrh	r2, [r3, #6]
 800090c:	88bb      	ldrh	r3, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	3b01      	subs	r3, #1
 8000914:	b29b      	uxth	r3, r3
 8000916:	88b9      	ldrh	r1, [r7, #4]
 8000918:	88f8      	ldrh	r0, [r7, #6]
 800091a:	2277      	movs	r2, #119	@ 0x77
 800091c:	9200      	str	r2, [sp, #0]
 800091e:	4622      	mov	r2, r4
 8000920:	f000 fdf4 	bl	800150c <set_adress_window>

	uint16_t mask = 0x8000;
 8000924:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000928:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 800092e:	f107 020c 	add.w	r2, r7, #12
 8000932:	883b      	ldrh	r3, [r7, #0]
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fe10 	bl	800055c <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 800093c:	f107 0208 	add.w	r2, r7, #8
 8000940:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fe09 	bl	800055c <convert_color_16_to_18>


	DC_DATA();
 800094a:	2201      	movs	r2, #1
 800094c:	2108      	movs	r1, #8
 800094e:	4826      	ldr	r0, [pc, #152]	@ (80009e8 <print_character+0x10c>)
 8000950:	f003 fcd8 	bl	8004304 <HAL_GPIO_WritePin>
	CS_A();
 8000954:	2200      	movs	r2, #0
 8000956:	2110      	movs	r1, #16
 8000958:	4823      	ldr	r0, [pc, #140]	@ (80009e8 <print_character+0x10c>)
 800095a:	f003 fcd3 	bl	8004304 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 800095e:	2300      	movs	r3, #0
 8000960:	75fb      	strb	r3, [r7, #23]
 8000962:	e030      	b.n	80009c6 <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <print_character+0x108>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	3b20      	subs	r3, #32
 800096c:	491d      	ldr	r1, [pc, #116]	@ (80009e4 <print_character+0x108>)
 800096e:	88c9      	ldrh	r1, [r1, #6]
 8000970:	fb03 f101 	mul.w	r1, r3, r1
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	440b      	add	r3, r1
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000980:	2300      	movs	r3, #0
 8000982:	75bb      	strb	r3, [r7, #22]
 8000984:	e016      	b.n	80009b4 <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 8000986:	8a7a      	ldrh	r2, [r7, #18]
 8000988:	7dbb      	ldrb	r3, [r7, #22]
 800098a:	409a      	lsls	r2, r3
 800098c:	8abb      	ldrh	r3, [r7, #20]
 800098e:	4013      	ands	r3, r2
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2103      	movs	r1, #3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fc1e 	bl	80011dc <LCD_send_data_multi>
 80009a0:	e005      	b.n	80009ae <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2103      	movs	r1, #3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fc17 	bl	80011dc <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 80009ae:	7dbb      	ldrb	r3, [r7, #22]
 80009b0:	3301      	adds	r3, #1
 80009b2:	75bb      	strb	r3, [r7, #22]
 80009b4:	7dbb      	ldrb	r3, [r7, #22]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <print_character+0x108>)
 80009ba:	889b      	ldrh	r3, [r3, #4]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d3e2      	bcc.n	8000986 <print_character+0xaa>
	for(i=0; i<font.height; i++)
 80009c0:	7dfb      	ldrb	r3, [r7, #23]
 80009c2:	3301      	adds	r3, #1
 80009c4:	75fb      	strb	r3, [r7, #23]
 80009c6:	7dfb      	ldrb	r3, [r7, #23]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <print_character+0x108>)
 80009cc:	88db      	ldrh	r3, [r3, #6]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d3c8      	bcc.n	8000964 <print_character+0x88>
			}
		}
	}

	CS_D();
 80009d2:	2201      	movs	r2, #1
 80009d4:	2110      	movs	r1, #16
 80009d6:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <print_character+0x10c>)
 80009d8:	f003 fc94 	bl	8004304 <HAL_GPIO_WritePin>

}
 80009dc:	bf00      	nop
 80009de:	371c      	adds	r7, #28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	40020c00 	.word	0x40020c00

080009ec <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b089      	sub	sp, #36	@ 0x24
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	60ba      	str	r2, [r7, #8]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4603      	mov	r3, r0
 80009f8:	81fb      	strh	r3, [r7, #14]
 80009fa:	460b      	mov	r3, r1
 80009fc:	81bb      	strh	r3, [r7, #12]
 80009fe:	4613      	mov	r3, r2
 8000a00:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 8000a06:	e027      	b.n	8000a58 <print_string+0x6c>
	{
		if(x + font.width > 320)
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	4a19      	ldr	r2, [pc, #100]	@ (8000a70 <print_string+0x84>)
 8000a0c:	8892      	ldrh	r2, [r2, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a14:	dd07      	ble.n	8000a26 <print_string+0x3a>
		{
			x = font.width;
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <print_string+0x84>)
 8000a18:	889b      	ldrh	r3, [r3, #4]
 8000a1a:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <print_string+0x84>)
 8000a1e:	88da      	ldrh	r2, [r3, #6]
 8000a20:	89bb      	ldrh	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 8000a26:	89bb      	ldrh	r3, [r7, #12]
 8000a28:	4a11      	ldr	r2, [pc, #68]	@ (8000a70 <print_string+0x84>)
 8000a2a:	88d2      	ldrh	r2, [r2, #6]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a32:	dc18      	bgt.n	8000a66 <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000a3a:	89b9      	ldrh	r1, [r7, #12]
 8000a3c:	89f8      	ldrh	r0, [r7, #14]
 8000a3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	4623      	mov	r3, r4
 8000a44:	f7ff ff4a 	bl	80008dc <print_character>
		string++;
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <print_string+0x84>)
 8000a50:	889a      	ldrh	r2, [r3, #4]
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	4413      	add	r3, r2
 8000a56:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3d1      	bcc.n	8000a08 <print_string+0x1c>
 8000a64:	e000      	b.n	8000a68 <print_string+0x7c>
			return;
 8000a66:	bf00      	nop
	}

}
 8000a68:	371c      	adds	r7, #28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd90      	pop	{r4, r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000000 	.word	0x20000000

08000a74 <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4608      	mov	r0, r1
 8000a7e:	4611      	mov	r1, r2
 8000a80:	461a      	mov	r2, r3
 8000a82:	4623      	mov	r3, r4
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	4603      	mov	r3, r0
 8000a88:	80bb      	strh	r3, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	807b      	strh	r3, [r7, #2]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000a92:	88fa      	ldrh	r2, [r7, #6]
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	4413      	add	r3, r2
 8000a98:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	88bb      	ldrh	r3, [r7, #4]
 8000aa2:	88b9      	ldrh	r1, [r7, #4]
 8000aa4:	88f8      	ldrh	r0, [r7, #6]
 8000aa6:	2477      	movs	r4, #119	@ 0x77
 8000aa8:	9400      	str	r4, [sp, #0]
 8000aaa:	f000 fd2f 	bl	800150c <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000aae:	f107 0208 	add.w	r2, r7, #8
 8000ab2:	883b      	ldrh	r3, [r7, #0]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fd50 	bl	800055c <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	81fb      	strh	r3, [r7, #14]
 8000ac0:	e008      	b.n	8000ad4 <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2103      	movs	r1, #3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fb87 	bl	80011dc <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000ace:	89fb      	ldrh	r3, [r7, #14]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	81fb      	strh	r3, [r7, #14]
 8000ad4:	89fa      	ldrh	r2, [r7, #14]
 8000ad6:	8879      	ldrh	r1, [r7, #2]
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	1acb      	subs	r3, r1, r3
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbf0      	blt.n	8000ac2 <draw_horizontal_line+0x4e>
	}


}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}

08000aea <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000aea:	b590      	push	{r4, r7, lr}
 8000aec:	b087      	sub	sp, #28
 8000aee:	af02      	add	r7, sp, #8
 8000af0:	4604      	mov	r4, r0
 8000af2:	4608      	mov	r0, r1
 8000af4:	4611      	mov	r1, r2
 8000af6:	461a      	mov	r2, r3
 8000af8:	4623      	mov	r3, r4
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	4603      	mov	r3, r0
 8000afe:	80bb      	strh	r3, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
 8000b04:	4613      	mov	r3, r2
 8000b06:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000b08:	88ba      	ldrh	r2, [r7, #4]
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000b10:	887b      	ldrh	r3, [r7, #2]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	88fa      	ldrh	r2, [r7, #6]
 8000b18:	88b9      	ldrh	r1, [r7, #4]
 8000b1a:	88f8      	ldrh	r0, [r7, #6]
 8000b1c:	2477      	movs	r4, #119	@ 0x77
 8000b1e:	9400      	str	r4, [sp, #0]
 8000b20:	f000 fcf4 	bl	800150c <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000b24:	f107 0208 	add.w	r2, r7, #8
 8000b28:	883b      	ldrh	r3, [r7, #0]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fd15 	bl	800055c <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	81fb      	strh	r3, [r7, #14]
 8000b36:	e008      	b.n	8000b4a <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fb4c 	bl	80011dc <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000b44:	89fb      	ldrh	r3, [r7, #14]
 8000b46:	3301      	adds	r3, #1
 8000b48:	81fb      	strh	r3, [r7, #14]
 8000b4a:	89fa      	ldrh	r2, [r7, #14]
 8000b4c:	8879      	ldrh	r1, [r7, #2]
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	429a      	cmp	r2, r3
 8000b54:	dbf0      	blt.n	8000b38 <draw_vertical_line+0x4e>
	}


}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd90      	pop	{r4, r7, pc}

08000b60 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b089      	sub	sp, #36	@ 0x24
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	4604      	mov	r4, r0
 8000b68:	4608      	mov	r0, r1
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4623      	mov	r3, r4
 8000b70:	80fb      	strh	r3, [r7, #6]
 8000b72:	4603      	mov	r3, r0
 8000b74:	80bb      	strh	r3, [r7, #4]
 8000b76:	460b      	mov	r3, r1
 8000b78:	807b      	strh	r3, [r7, #2]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	883b      	ldrh	r3, [r7, #0]
 8000b82:	fb12 f303 	smulbb	r3, r2, r3
 8000b86:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8000b88:	f107 020c 	add.w	r2, r7, #12
 8000b8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fce3 	bl	800055c <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8000b96:	8aba      	ldrh	r2, [r7, #20]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00a fe42 	bl	800b828 <malloc>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	82fb      	strh	r3, [r7, #22]
 8000bac:	e00f      	b.n	8000bce <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000bae:	8afa      	ldrh	r2, [r7, #22]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4413      	add	r3, r2
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	8819      	ldrh	r1, [r3, #0]
 8000bc2:	789b      	ldrb	r3, [r3, #2]
 8000bc4:	8011      	strh	r1, [r2, #0]
 8000bc6:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8000bc8:	8afb      	ldrh	r3, [r7, #22]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	82fb      	strh	r3, [r7, #22]
 8000bce:	8afa      	ldrh	r2, [r7, #22]
 8000bd0:	8abb      	ldrh	r3, [r7, #20]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d3eb      	bcc.n	8000bae <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8000bd6:	88fa      	ldrh	r2, [r7, #6]
 8000bd8:	887b      	ldrh	r3, [r7, #2]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b29c      	uxth	r4, r3
 8000be2:	88ba      	ldrh	r2, [r7, #4]
 8000be4:	883b      	ldrh	r3, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	3b01      	subs	r3, #1
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	88b9      	ldrh	r1, [r7, #4]
 8000bf0:	88f8      	ldrh	r0, [r7, #6]
 8000bf2:	2277      	movs	r2, #119	@ 0x77
 8000bf4:	9200      	str	r2, [sp, #0]
 8000bf6:	4622      	mov	r2, r4
 8000bf8:	f000 fc88 	bl	800150c <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000bfc:	8aba      	ldrh	r2, [r7, #20]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	4619      	mov	r1, r3
 8000c06:	6938      	ldr	r0, [r7, #16]
 8000c08:	f000 fae8 	bl	80011dc <LCD_send_data_multi>

	free(data);
 8000c0c:	6938      	ldr	r0, [r7, #16]
 8000c0e:	f00a fe13 	bl	800b838 <free>

}
 8000c12:	bf00      	nop
 8000c14:	371c      	adds	r7, #28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
	...

08000c1c <draw_entity>:


void draw_entity(ENTITY *entity, char *filePathName)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b089      	sub	sp, #36	@ 0x24
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]

	if((entity->id != 0) || (filePathName==NULL))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <draw_entity+0x1c>
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d163      	bne.n	8000d00 <draw_entity+0xe4>
	{
		/*Avem imagine monocolor sub 32x32 -> imagine nu se afla pe cardul SD!*/

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	fb12 f303 	smulbb	r3, r2, r3
 8000c4c:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->color, pixel);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	899b      	ldrh	r3, [r3, #12]
 8000c52:	f107 020c 	add.w	r2, r7, #12
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fc7f 	bl	800055c <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8000c5e:	8aba      	ldrh	r2, [r7, #20]
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f00a fdde 	bl	800b828 <malloc>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8000c70:	2300      	movs	r3, #0
 8000c72:	82fb      	strh	r3, [r7, #22]
 8000c74:	e00f      	b.n	8000c96 <draw_entity+0x7a>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000c76:	8afa      	ldrh	r2, [r7, #22]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4413      	add	r3, r2
 8000c82:	461a      	mov	r2, r3
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	8819      	ldrh	r1, [r3, #0]
 8000c8a:	789b      	ldrb	r3, [r3, #2]
 8000c8c:	8011      	strh	r1, [r2, #0]
 8000c8e:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8000c90:	8afb      	ldrh	r3, [r7, #22]
 8000c92:	3301      	adds	r3, #1
 8000c94:	82fb      	strh	r3, [r7, #22]
 8000c96:	8afa      	ldrh	r2, [r7, #22]
 8000c98:	8abb      	ldrh	r3, [r7, #20]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d3eb      	bcc.n	8000c76 <draw_entity+0x5a>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ca4:	b298      	uxth	r0, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cac:	b299      	uxth	r1, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	b29c      	uxth	r4, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	2277      	movs	r2, #119	@ 0x77
 8000ce0:	9200      	str	r2, [sp, #0]
 8000ce2:	4622      	mov	r2, r4
 8000ce4:	f000 fc12 	bl	800150c <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000ce8:	8aba      	ldrh	r2, [r7, #20]
 8000cea:	4613      	mov	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6938      	ldr	r0, [r7, #16]
 8000cf4:	f000 fa72 	bl	80011dc <LCD_send_data_multi>

		free(data);
 8000cf8:	6938      	ldr	r0, [r7, #16]
 8000cfa:	f00a fd9d 	bl	800b838 <free>
	{
 8000cfe:	e084      	b.n	8000e0a <draw_entity+0x1ee>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 8000d00:	2300      	movs	r3, #0
 8000d02:	817b      	strh	r3, [r7, #10]

		read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000d04:	f107 030f 	add.w	r3, r7, #15
 8000d08:	f107 020a 	add.w	r2, r7, #10
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	6838      	ldr	r0, [r7, #0]
 8000d10:	f001 fcfc 	bl	800270c <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d1a:	b298      	uxth	r0, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d22:	b299      	uxth	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	b29c      	uxth	r4, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	3b01      	subs	r3, #1
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	2277      	movs	r2, #119	@ 0x77
 8000d56:	9200      	str	r2, [sp, #0]
 8000d58:	4622      	mov	r2, r4
 8000d5a:	f000 fbd7 	bl	800150c <set_adress_window>

		DC_DATA();
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2108      	movs	r1, #8
 8000d62:	482b      	ldr	r0, [pc, #172]	@ (8000e10 <draw_entity+0x1f4>)
 8000d64:	f003 face 	bl	8004304 <HAL_GPIO_WritePin>
		CS_A();
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4828      	ldr	r0, [pc, #160]	@ (8000e10 <draw_entity+0x1f4>)
 8000d6e:	f003 fac9 	bl	8004304 <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 8000d72:	897b      	ldrh	r3, [r7, #10]
 8000d74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000d78:	d20c      	bcs.n	8000d94 <draw_entity+0x178>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->data, byteNr);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	897a      	ldrh	r2, [r7, #10]
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fa2a 	bl	80011dc <LCD_send_data_multi>
			free(entity->data);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f00a fd53 	bl	800b838 <free>
 8000d92:	e03a      	b.n	8000e0a <draw_entity+0x1ee>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <draw_entity+0x1f8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	897a      	ldrh	r2, [r7, #10]
 8000da0:	4619      	mov	r1, r3
 8000da2:	481d      	ldr	r0, [pc, #116]	@ (8000e18 <draw_entity+0x1fc>)
 8000da4:	f005 fb88 	bl	80064b8 <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d11c      	bne.n	8000de8 <draw_entity+0x1cc>
				{
					break;
				}

				read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000dae:	f107 030f 	add.w	r3, r7, #15
 8000db2:	f107 020a 	add.w	r2, r7, #10
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f001 fca7 	bl	800270c <read_image_file>

				while(flagDmaSpiTx == 0);
 8000dbe:	bf00      	nop
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <draw_entity+0x1f8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0fa      	beq.n	8000dc0 <draw_entity+0x1a4>
				flagDmaSpiTx = 0;
 8000dca:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <draw_entity+0x1f8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	897a      	ldrh	r2, [r7, #10]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480f      	ldr	r0, [pc, #60]	@ (8000e18 <draw_entity+0x1fc>)
 8000dda:	f005 fb6d 	bl	80064b8 <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8000dde:	897b      	ldrh	r3, [r7, #10]
 8000de0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000de4:	d2e0      	bcs.n	8000da8 <draw_entity+0x18c>
 8000de6:	e000      	b.n	8000dea <draw_entity+0x1ce>
					break;
 8000de8:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8000dea:	bf00      	nop
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <draw_entity+0x1f8>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0fa      	beq.n	8000dec <draw_entity+0x1d0>
		free(entity->data);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00a fd1c 	bl	800b838 <free>
		CS_D();
 8000e00:	2201      	movs	r2, #1
 8000e02:	2110      	movs	r1, #16
 8000e04:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <draw_entity+0x1f4>)
 8000e06:	f003 fa7d 	bl	8004304 <HAL_GPIO_WritePin>

	}


}
 8000e0a:	371c      	adds	r7, #28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	40020c00 	.word	0x40020c00
 8000e14:	20000328 	.word	0x20000328
 8000e18:	20000180 	.word	0x20000180

08000e1c <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b08b      	sub	sp, #44	@ 0x2c
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	817b      	strh	r3, [r7, #10]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	813b      	strh	r3, [r7, #8]
 8000e32:	4613      	mov	r3, r2
 8000e34:	71fb      	strb	r3, [r7, #7]
	 * de afisat
	 * Momentan de rezumam la un exemplu simplu pentru a demonstra functionalitatea
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 8000e36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f2c0 80e4 	blt.w	8001008 <translation_entity+0x1ec>
 8000e40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e44:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e48:	f300 80de 	bgt.w	8001008 <translation_entity+0x1ec>
 8000e4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f2c0 80d9 	blt.w	8001008 <translation_entity+0x1ec>
 8000e56:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e5a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000e5e:	f300 80d3 	bgt.w	8001008 <translation_entity+0x1ec>

		return;
	}


	ENTITY temp = *entity;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f107 0410 	add.w	r4, r7, #16
 8000e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	entity->x0 = x;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	897a      	ldrh	r2, [r7, #10]
 8000e72:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	893a      	ldrh	r2, [r7, #8]
 8000e78:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8000e7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e7e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d157      	bne.n	8000f36 <translation_entity+0x11a>
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d054      	beq.n	8000f36 <translation_entity+0x11a>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8000e8c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e9a:	440b      	add	r3, r1
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	da1d      	bge.n	8000edc <translation_entity+0xc0>
 8000ea0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ea4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dd17      	ble.n	8000edc <translation_entity+0xc0>
		{
			/*Pentru cazul deplasarii pe +x*/
			draw_entity(entity, NULL);
 8000eac:	2100      	movs	r1, #0
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f7ff feb4 	bl	8000c1c <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, 0xFFFF); /*Culoare background*/
 8000eb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000eb8:	b298      	uxth	r0, r3
 8000eba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ebe:	b299      	uxth	r1, r3
 8000ec0:	897a      	ldrh	r2, [r7, #10]
 8000ec2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000ed6:	9400      	str	r4, [sp, #0]
 8000ed8:	f7ff fe42 	bl	8000b60 <draw_rectangle>
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000edc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ee0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	f280 8091 	bge.w	800100c <translation_entity+0x1f0>
 8000eea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000eee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	f340 8087 	ble.w	800100c <translation_entity+0x1f0>
		{
			/*Pentru cazul deplasarii pe -x*/
			draw_entity(entity, NULL);
 8000efe:	2100      	movs	r1, #0
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f7ff fe8b 	bl	8000c1c <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, 0xFFFF); /*Culoare background*/
 8000f06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	897b      	ldrh	r3, [r7, #10]
 8000f0e:	4413      	add	r3, r2
 8000f10:	b298      	uxth	r0, r3
 8000f12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f16:	b299      	uxth	r1, r3
 8000f18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	897b      	ldrh	r3, [r7, #10]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000f2e:	9400      	str	r4, [sp, #0]
 8000f30:	f7ff fe16 	bl	8000b60 <draw_rectangle>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000f34:	e06a      	b.n	800100c <translation_entity+0x1f0>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8000f36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f3a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d157      	bne.n	8000ff2 <translation_entity+0x1d6>
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d054      	beq.n	8000ff2 <translation_entity+0x1d6>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8000f48:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f56:	440b      	add	r3, r1
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	da1e      	bge.n	8000f9a <translation_entity+0x17e>
 8000f5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f60:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dd18      	ble.n	8000f9a <translation_entity+0x17e>
			{
				/*Pentru cazul deplasarii pe +y*/
				draw_entity(entity, NULL);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff fe56 	bl	8000c1c <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, 0xFFFF);
 8000f70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f74:	b298      	uxth	r0, r3
 8000f76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f7a:	b299      	uxth	r1, r3
 8000f7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f80:	b29c      	uxth	r4, r3
 8000f82:	893a      	ldrh	r2, [r7, #8]
 8000f84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f92:	9200      	str	r2, [sp, #0]
 8000f94:	4622      	mov	r2, r4
 8000f96:	f7ff fde3 	bl	8000b60 <draw_rectangle>
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8000f9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f9e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	da34      	bge.n	8001010 <translation_entity+0x1f4>
 8000fa6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000faa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000fae:	4413      	add	r3, r2
 8000fb0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	dd2b      	ble.n	8001010 <translation_entity+0x1f4>
			{
				/*Pentru cazul deplasarii pe -y*/
				draw_entity(entity, NULL);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f7ff fe2e 	bl	8000c1c <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, 0xFFFF);
 8000fc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fc4:	b298      	uxth	r0, r3
 8000fc6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	893b      	ldrh	r3, [r7, #8]
 8000fce:	4413      	add	r3, r2
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fd6:	b29c      	uxth	r4, r3
 8000fd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	893b      	ldrh	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fe8:	9200      	str	r2, [sp, #0]
 8000fea:	4622      	mov	r2, r4
 8000fec:	f7ff fdb8 	bl	8000b60 <draw_rectangle>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8000ff0:	e00e      	b.n	8001010 <translation_entity+0x1f4>

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/

			draw_entity(entity, NULL);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff fe11 	bl	8000c1c <draw_entity>
			draw_entity(&temp, NULL);
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fe0b 	bl	8000c1c <draw_entity>
 8001006:	e004      	b.n	8001012 <translation_entity+0x1f6>
		return;
 8001008:	bf00      	nop
 800100a:	e002      	b.n	8001012 <translation_entity+0x1f6>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 800100c:	bf00      	nop
 800100e:	e000      	b.n	8001012 <translation_entity+0x1f6>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001010:	bf00      	nop
		}


}
 8001012:	3724      	adds	r7, #36	@ 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd90      	pop	{r4, r7, pc}

08001018 <translation_test>:


void translation_test(ENTITY *entity, uint8_t step, uint16_t delay)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	803b      	strh	r3, [r7, #0]


	while(1)
	{
		while((entity->x0 + entity->x1) < LCD_Width)
 8001028:	e013      	b.n	8001052 <translation_test+0x3a>
		{
			translation_entity(entity, entity->x0+step, entity->y0, 1);//, color);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001030:	b29a      	uxth	r2, r3
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	b29b      	uxth	r3, r3
 8001036:	4413      	add	r3, r2
 8001038:	b29b      	uxth	r3, r3
 800103a:	b219      	sxth	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001042:	2301      	movs	r3, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fee9 	bl	8000e1c <translation_entity>
			HAL_Delay(delay);
 800104a:	883b      	ldrh	r3, [r7, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f002 f8a9 	bl	80031a4 <HAL_Delay>
		while((entity->x0 + entity->x1) < LCD_Width)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001060:	4413      	add	r3, r2
 8001062:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001066:	dbe0      	blt.n	800102a <translation_test+0x12>
		}

		draw_entity(entity, NULL);
 8001068:	2100      	movs	r1, #0
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff fdd6 	bl	8000c1c <draw_entity>
		entity->x0 = LCD_Width - entity->x1;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001076:	b29b      	uxth	r3, r3
 8001078:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800107c:	b29b      	uxth	r3, r3
 800107e:	b21a      	sxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	805a      	strh	r2, [r3, #2]

		while((entity->y0 + entity->y1) < LCD_Length)
 8001084:	e013      	b.n	80010ae <translation_test+0x96>
		{

			translation_entity(entity, entity->x0, entity->y0+step, 1);//, color);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4413      	add	r3, r2
 800109a:	b29b      	uxth	r3, r3
 800109c:	b21a      	sxth	r2, r3
 800109e:	2301      	movs	r3, #1
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff febb 	bl	8000e1c <translation_entity>
			HAL_Delay(delay);
 80010a6:	883b      	ldrh	r3, [r7, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 f87b 	bl	80031a4 <HAL_Delay>
		while((entity->y0 + entity->y1) < LCD_Length)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010b4:	461a      	mov	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010bc:	4413      	add	r3, r2
 80010be:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80010c2:	dbe0      	blt.n	8001086 <translation_test+0x6e>
		}

		draw_entity(entity, NULL);
 80010c4:	2100      	movs	r1, #0
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fda8 	bl	8000c1c <draw_entity>
		entity->y0 = LCD_Length - entity->y1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 80010d8:	b29b      	uxth	r3, r3
 80010da:	b21a      	sxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	809a      	strh	r2, [r3, #4]

		while((entity->x0 - step) > 0)
 80010e0:	e013      	b.n	800110a <translation_test+0xf2>
		{
			translation_entity(entity, entity->x0-step, entity->y0, 1);//, color);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b219      	sxth	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80010fa:	2301      	movs	r3, #1
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff fe8d 	bl	8000e1c <translation_entity>
			HAL_Delay(delay);
 8001102:	883b      	ldrh	r3, [r7, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f002 f84d 	bl	80031a4 <HAL_Delay>
		while((entity->x0 - step) > 0)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001110:	461a      	mov	r2, r3
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	dce3      	bgt.n	80010e2 <translation_test+0xca>
		}

		entity->color = 0xFFFF;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001120:	819a      	strh	r2, [r3, #12]
		draw_entity(entity, NULL);
 8001122:	2100      	movs	r1, #0
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fd79 	bl	8000c1c <draw_entity>
		entity->color = 0xF100;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001130:	819a      	strh	r2, [r3, #12]
		entity->x0 = 0;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	805a      	strh	r2, [r3, #2]

		while((entity->y0 - step) > 0)
 8001138:	e013      	b.n	8001162 <translation_test+0x14a>
		{
			translation_entity(entity, entity->x0, entity->y0-step, 1);//, color);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001146:	b29a      	uxth	r2, r3
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	b29b      	uxth	r3, r3
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	b21a      	sxth	r2, r3
 8001152:	2301      	movs	r3, #1
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fe61 	bl	8000e1c <translation_entity>
			HAL_Delay(delay);
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f002 f821 	bl	80031a4 <HAL_Delay>
		while((entity->y0 - step) > 0)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001168:	461a      	mov	r2, r3
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	dce3      	bgt.n	800113a <translation_test+0x122>
		}
		entity->color = 0xFFFF;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001178:	819a      	strh	r2, [r3, #12]
		draw_entity(entity, NULL);
 800117a:	2100      	movs	r1, #0
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fd4d 	bl	8000c1c <draw_entity>
		entity->color = 0xF100;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001188:	819a      	strh	r2, [r3, #12]
		entity->y0 = 0;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	809a      	strh	r2, [r3, #4]
		while((entity->x0 + entity->x1) < LCD_Width)
 8001190:	e75f      	b.n	8001052 <translation_test+0x3a>
	...

08001194 <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 800119e:	2200      	movs	r2, #0
 80011a0:	2108      	movs	r1, #8
 80011a2:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <LCD_send_command+0x40>)
 80011a4:	f003 f8ae 	bl	8004304 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 80011a8:	2200      	movs	r2, #0
 80011aa:	2110      	movs	r1, #16
 80011ac:	4809      	ldr	r0, [pc, #36]	@ (80011d4 <LCD_send_command+0x40>)
 80011ae:	f003 f8a9 	bl	8004304 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 80011b2:	1df9      	adds	r1, r7, #7
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	2201      	movs	r2, #1
 80011ba:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <LCD_send_command+0x44>)
 80011bc:	f004 fd75 	bl	8005caa <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 80011c0:	2201      	movs	r2, #1
 80011c2:	2110      	movs	r1, #16
 80011c4:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <LCD_send_command+0x40>)
 80011c6:	f003 f89d 	bl	8004304 <HAL_GPIO_WritePin>


}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	20000180 	.word	0x20000180

080011dc <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 80011e6:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 80011ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011f0:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	fbb3 f2f2 	udiv	r2, r3, r2
 8001204:	6939      	ldr	r1, [r7, #16]
 8001206:	fb01 f202 	mul.w	r2, r1, r2
 800120a:	1a9b      	subs	r3, r3, r2
 800120c:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 800120e:	2201      	movs	r2, #1
 8001210:	2108      	movs	r1, #8
 8001212:	482a      	ldr	r0, [pc, #168]	@ (80012bc <LCD_send_data_multi+0xe0>)
 8001214:	f003 f876 	bl	8004304 <HAL_GPIO_WritePin>
	CS_A();
 8001218:	2200      	movs	r2, #0
 800121a:	2110      	movs	r1, #16
 800121c:	4827      	ldr	r0, [pc, #156]	@ (80012bc <LCD_send_data_multi+0xe0>)
 800121e:	f003 f871 	bl	8004304 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	429a      	cmp	r2, r3
 8001228:	d821      	bhi.n	800126e <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 800122a:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <LCD_send_data_multi+0xe4>)
 800123a:	f005 f93d 	bl	80064b8 <HAL_SPI_Transmit_DMA>
 800123e:	e02c      	b.n	800129a <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 8001240:	bf00      	nop
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0fa      	beq.n	8001242 <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 800124c:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	b29b      	uxth	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4819      	ldr	r0, [pc, #100]	@ (80012c0 <LCD_send_data_multi+0xe4>)
 800125c:	f005 f92c 	bl	80064b8 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4413      	add	r3, r2
 8001266:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3b01      	subs	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e5      	bne.n	8001240 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00f      	beq.n	800129a <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 800127a:	bf00      	nop
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0fa      	beq.n	800127c <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	480a      	ldr	r0, [pc, #40]	@ (80012c0 <LCD_send_data_multi+0xe4>)
 8001296:	f005 f90f 	bl	80064b8 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 800129a:	bf00      	nop
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <LCD_send_data_multi+0xdc>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0fa      	beq.n	800129c <LCD_send_data_multi+0xc0>
	CS_D();
 80012a6:	2201      	movs	r2, #1
 80012a8:	2110      	movs	r1, #16
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <LCD_send_data_multi+0xe0>)
 80012ac:	f003 f82a 	bl	8004304 <HAL_GPIO_WritePin>

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000328 	.word	0x20000328
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	20000180 	.word	0x20000180

080012c4 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 80012ce:	2201      	movs	r2, #1
 80012d0:	2108      	movs	r1, #8
 80012d2:	480c      	ldr	r0, [pc, #48]	@ (8001304 <LCD_send_data+0x40>)
 80012d4:	f003 f816 	bl	8004304 <HAL_GPIO_WritePin>
	CS_A();
 80012d8:	2200      	movs	r2, #0
 80012da:	2110      	movs	r1, #16
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <LCD_send_data+0x40>)
 80012de:	f003 f811 	bl	8004304 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 80012e2:	1df9      	adds	r1, r7, #7
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	2201      	movs	r2, #1
 80012ea:	4807      	ldr	r0, [pc, #28]	@ (8001308 <LCD_send_data+0x44>)
 80012ec:	f004 fcdd 	bl	8005caa <HAL_SPI_Transmit>

	CS_D();
 80012f0:	2201      	movs	r2, #1
 80012f2:	2110      	movs	r1, #16
 80012f4:	4803      	ldr	r0, [pc, #12]	@ (8001304 <LCD_send_data+0x40>)
 80012f6:	f003 f805 	bl	8004304 <HAL_GPIO_WritePin>

}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020c00 	.word	0x40020c00
 8001308:	20000180 	.word	0x20000180

0800130c <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8001310:	2200      	movs	r2, #0
 8001312:	2140      	movs	r1, #64	@ 0x40
 8001314:	487c      	ldr	r0, [pc, #496]	@ (8001508 <ILI9488_driver_init+0x1fc>)
 8001316:	f002 fff5 	bl	8004304 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800131a:	200a      	movs	r0, #10
 800131c:	f001 ff42 	bl	80031a4 <HAL_Delay>
	RST_D();
 8001320:	2201      	movs	r2, #1
 8001322:	2140      	movs	r1, #64	@ 0x40
 8001324:	4878      	ldr	r0, [pc, #480]	@ (8001508 <ILI9488_driver_init+0x1fc>)
 8001326:	f002 ffed 	bl	8004304 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff ff32 	bl	8001194 <LCD_send_command>
	HAL_Delay(150);
 8001330:	2096      	movs	r0, #150	@ 0x96
 8001332:	f001 ff37 	bl	80031a4 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 8001336:	2011      	movs	r0, #17
 8001338:	f7ff ff2c 	bl	8001194 <LCD_send_command>
	HAL_Delay(255);
 800133c:	20ff      	movs	r0, #255	@ 0xff
 800133e:	f001 ff31 	bl	80031a4 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8001342:	20e0      	movs	r0, #224	@ 0xe0
 8001344:	f7ff ff26 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff ffbb 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0C);
 800134e:	200c      	movs	r0, #12
 8001350:	f7ff ffb8 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x05);
 8001354:	2005      	movs	r0, #5
 8001356:	f7ff ffb5 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x04);
 800135a:	2004      	movs	r0, #4
 800135c:	f7ff ffb2 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0F);
 8001360:	200f      	movs	r0, #15
 8001362:	f7ff ffaf 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x06);
 8001366:	2006      	movs	r0, #6
 8001368:	f7ff ffac 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x3A);
 800136c:	203a      	movs	r0, #58	@ 0x3a
 800136e:	f7ff ffa9 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x56);
 8001372:	2056      	movs	r0, #86	@ 0x56
 8001374:	f7ff ffa6 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x4D);
 8001378:	204d      	movs	r0, #77	@ 0x4d
 800137a:	f7ff ffa3 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x03);
 800137e:	2003      	movs	r0, #3
 8001380:	f7ff ffa0 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0A);
 8001384:	200a      	movs	r0, #10
 8001386:	f7ff ff9d 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x06);
 800138a:	2006      	movs	r0, #6
 800138c:	f7ff ff9a 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x30);
 8001390:	2030      	movs	r0, #48	@ 0x30
 8001392:	f7ff ff97 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x3E);
 8001396:	203e      	movs	r0, #62	@ 0x3e
 8001398:	f7ff ff94 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0F);
 800139c:	200f      	movs	r0, #15
 800139e:	f7ff ff91 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 80013a2:	20e1      	movs	r0, #225	@ 0xe1
 80013a4:	f7ff fef6 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x00);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ff8b 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x13);
 80013ae:	2013      	movs	r0, #19
 80013b0:	f7ff ff88 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x18);
 80013b4:	2018      	movs	r0, #24
 80013b6:	f7ff ff85 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x01);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff ff82 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x11);
 80013c0:	2011      	movs	r0, #17
 80013c2:	f7ff ff7f 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x06);
 80013c6:	2006      	movs	r0, #6
 80013c8:	f7ff ff7c 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x38);
 80013cc:	2038      	movs	r0, #56	@ 0x38
 80013ce:	f7ff ff79 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x34);
 80013d2:	2034      	movs	r0, #52	@ 0x34
 80013d4:	f7ff ff76 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x4D);
 80013d8:	204d      	movs	r0, #77	@ 0x4d
 80013da:	f7ff ff73 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x06);
 80013de:	2006      	movs	r0, #6
 80013e0:	f7ff ff70 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0D);
 80013e4:	200d      	movs	r0, #13
 80013e6:	f7ff ff6d 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0B);
 80013ea:	200b      	movs	r0, #11
 80013ec:	f7ff ff6a 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x31);
 80013f0:	2031      	movs	r0, #49	@ 0x31
 80013f2:	f7ff ff67 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x37);
 80013f6:	2037      	movs	r0, #55	@ 0x37
 80013f8:	f7ff ff64 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0F);
 80013fc:	200f      	movs	r0, #15
 80013fe:	f7ff ff61 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 8001402:	20c0      	movs	r0, #192	@ 0xc0
 8001404:	f7ff fec6 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x18);
 8001408:	2018      	movs	r0, #24
 800140a:	f7ff ff5b 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x16);
 800140e:	2016      	movs	r0, #22
 8001410:	f7ff ff58 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 8001414:	20c1      	movs	r0, #193	@ 0xc1
 8001416:	f7ff febd 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x45);
 800141a:	2045      	movs	r0, #69	@ 0x45
 800141c:	f7ff ff52 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8001420:	20c2      	movs	r0, #194	@ 0xc2
 8001422:	f7ff feb7 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x33);
 8001426:	2033      	movs	r0, #51	@ 0x33
 8001428:	f7ff ff4c 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 800142c:	20c3      	movs	r0, #195	@ 0xc3
 800142e:	f7ff feb1 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x33);
 8001432:	2033      	movs	r0, #51	@ 0x33
 8001434:	f7ff ff46 	bl	80012c4 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8001438:	2036      	movs	r0, #54	@ 0x36
 800143a:	f7ff feab 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 800143e:	205c      	movs	r0, #92	@ 0x5c
 8001440:	f7ff ff40 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8001444:	203a      	movs	r0, #58	@ 0x3a
 8001446:	f7ff fea5 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 800144a:	2006      	movs	r0, #6
 800144c:	f7ff ff3a 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff fe9f 	bl	8001194 <LCD_send_command>
	LCD_send_command(0x00);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fe9c 	bl	8001194 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 800145c:	20b0      	movs	r0, #176	@ 0xb0
 800145e:	f7ff fe99 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ff2e 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8001468:	20b1      	movs	r0, #177	@ 0xb1
 800146a:	f7ff fe93 	bl	8001194 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 800146e:	20a0      	movs	r0, #160	@ 0xa0
 8001470:	f7ff ff28 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8001474:	2011      	movs	r0, #17
 8001476:	f7ff ff25 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 800147a:	20b4      	movs	r0, #180	@ 0xb4
 800147c:	f7ff fe8a 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff ff1f 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8001486:	20b5      	movs	r0, #181	@ 0xb5
 8001488:	f7ff fe84 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x02);
 800148c:	2002      	movs	r0, #2
 800148e:	f7ff ff19 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x02);
 8001492:	2002      	movs	r0, #2
 8001494:	f7ff ff16 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x0A);
 8001498:	200a      	movs	r0, #10
 800149a:	f7ff ff13 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x04);
 800149e:	2004      	movs	r0, #4
 80014a0:	f7ff ff10 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 80014a4:	20b6      	movs	r0, #182	@ 0xb6
 80014a6:	f7ff fe75 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x02);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f7ff ff0a 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x02);
 80014b0:	2002      	movs	r0, #2
 80014b2:	f7ff ff07 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x3B);
 80014b6:	203b      	movs	r0, #59	@ 0x3b
 80014b8:	f7ff ff04 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 80014bc:	20e9      	movs	r0, #233	@ 0xe9
 80014be:	f7ff fe69 	bl	8001194 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff fefe 	bl	80012c4 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 80014c8:	20f7      	movs	r0, #247	@ 0xf7
 80014ca:	f7ff fe63 	bl	8001194 <LCD_send_command>
	LCD_send_data(0xA9);
 80014ce:	20a9      	movs	r0, #169	@ 0xa9
 80014d0:	f7ff fef8 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x51);
 80014d4:	2051      	movs	r0, #81	@ 0x51
 80014d6:	f7ff fef5 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x2C);
 80014da:	202c      	movs	r0, #44	@ 0x2c
 80014dc:	f7ff fef2 	bl	80012c4 <LCD_send_data>
	LCD_send_data(0x82);
 80014e0:	2082      	movs	r0, #130	@ 0x82
 80014e2:	f7ff feef 	bl	80012c4 <LCD_send_data>


	LCD_send_command(0x11);
 80014e6:	2011      	movs	r0, #17
 80014e8:	f7ff fe54 	bl	8001194 <LCD_send_command>
	HAL_Delay(255);
 80014ec:	20ff      	movs	r0, #255	@ 0xff
 80014ee:	f001 fe59 	bl	80031a4 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 80014f2:	2051      	movs	r0, #81	@ 0x51
 80014f4:	f7ff fe4e 	bl	8001194 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 80014f8:	20ff      	movs	r0, #255	@ 0xff
 80014fa:	f7ff fee3 	bl	80012c4 <LCD_send_data>
	LCD_send_command(0x29); //Display on
 80014fe:	2029      	movs	r0, #41	@ 0x29
 8001500:	f7ff fe48 	bl	8001194 <LCD_send_command>


}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40020c00 	.word	0x40020c00

0800150c <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	4604      	mov	r4, r0
 8001514:	4608      	mov	r0, r1
 8001516:	4611      	mov	r1, r2
 8001518:	461a      	mov	r2, r3
 800151a:	4623      	mov	r3, r4
 800151c:	80fb      	strh	r3, [r7, #6]
 800151e:	4603      	mov	r3, r0
 8001520:	80bb      	strh	r3, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]
 8001526:	4613      	mov	r3, r2
 8001528:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 800152a:	202a      	movs	r0, #42	@ 0x2a
 800152c:	f7ff fe32 	bl	8001194 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b29b      	uxth	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	733b      	strb	r3, [r7, #12]
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	b29b      	uxth	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	73bb      	strb	r3, [r7, #14]
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2104      	movs	r1, #4
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fe40 	bl	80011dc <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 800155c:	202b      	movs	r0, #43	@ 0x2b
 800155e:	f7ff fe19 	bl	8001194 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	b29b      	uxth	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	733b      	strb	r3, [r7, #12]
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8001572:	883b      	ldrh	r3, [r7, #0]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	73bb      	strb	r3, [r7, #14]
 800157c:	883b      	ldrh	r3, [r7, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	2104      	movs	r1, #4
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fe27 	bl	80011dc <LCD_send_data_multi>

	if(x == 'w')
 800158e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001592:	2b77      	cmp	r3, #119	@ 0x77
 8001594:	d102      	bne.n	800159c <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8001596:	202c      	movs	r0, #44	@ 0x2c
 8001598:	f7ff fdfc 	bl	8001194 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 800159c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a0:	2b72      	cmp	r3, #114	@ 0x72
 80015a2:	d102      	bne.n	80015aa <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 80015a4:	202e      	movs	r0, #46	@ 0x2e
 80015a6:	f7ff fdf5 	bl	8001194 <LCD_send_command>
	}


}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
	...

080015b4 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4604      	mov	r4, r0
 80015bc:	4608      	mov	r0, r1
 80015be:	4611      	mov	r1, r2
 80015c0:	461a      	mov	r2, r3
 80015c2:	4623      	mov	r3, r4
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	4603      	mov	r3, r0
 80015c8:	80bb      	strh	r3, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]
 80015ce:	4613      	mov	r3, r2
 80015d0:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 80015d2:	4b7d      	ldr	r3, [pc, #500]	@ (80017c8 <read_pixel_frame+0x214>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b7b      	ldr	r3, [pc, #492]	@ (80017c8 <read_pixel_frame+0x214>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015e0:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 80015e2:	4b79      	ldr	r3, [pc, #484]	@ (80017c8 <read_pixel_frame+0x214>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b77      	ldr	r3, [pc, #476]	@ (80017c8 <read_pixel_frame+0x214>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80015f0:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 80015f2:	4b75      	ldr	r3, [pc, #468]	@ (80017c8 <read_pixel_frame+0x214>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b73      	ldr	r3, [pc, #460]	@ (80017c8 <read_pixel_frame+0x214>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0210 	orr.w	r2, r2, #16
 8001600:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001602:	4b71      	ldr	r3, [pc, #452]	@ (80017c8 <read_pixel_frame+0x214>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b6f      	ldr	r3, [pc, #444]	@ (80017c8 <read_pixel_frame+0x214>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001610:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 8001612:	4b6e      	ldr	r3, [pc, #440]	@ (80017cc <read_pixel_frame+0x218>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 800161c:	887a      	ldrh	r2, [r7, #2]
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	bfb8      	it	lt
 8001626:	425b      	neglt	r3, r3
 8001628:	b29a      	uxth	r2, r3
 800162a:	8839      	ldrh	r1, [r7, #0]
 800162c:	88bb      	ldrh	r3, [r7, #4]
 800162e:	1acb      	subs	r3, r1, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	bfb8      	it	lt
 8001634:	425b      	neglt	r3, r3
 8001636:	b29b      	uxth	r3, r3
 8001638:	fb12 f303 	smulbb	r3, r2, r3
 800163c:	b29b      	uxth	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	0052      	lsls	r2, r2, #1
 8001642:	4413      	add	r3, r2
 8001644:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 8001646:	2300      	movs	r3, #0
 8001648:	753b      	strb	r3, [r7, #20]

    free(data);
 800164a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800164c:	f00a f8f4 	bl	800b838 <free>
    data = malloc(byteNr);
 8001650:	8afb      	ldrh	r3, [r7, #22]
 8001652:	4618      	mov	r0, r3
 8001654:	f00a f8e8 	bl	800b828 <malloc>
 8001658:	4603      	mov	r3, r0
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 800165c:	887b      	ldrh	r3, [r7, #2]
 800165e:	3b01      	subs	r3, #1
 8001660:	807b      	strh	r3, [r7, #2]
    y--;
 8001662:	883b      	ldrh	r3, [r7, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	743b      	strb	r3, [r7, #16]
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	747b      	strb	r3, [r7, #17]
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	b29b      	uxth	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	74bb      	strb	r3, [r7, #18]
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8001688:	88bb      	ldrh	r3, [r7, #4]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	b29b      	uxth	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	733b      	strb	r3, [r7, #12]
 8001692:	88bb      	ldrh	r3, [r7, #4]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	737b      	strb	r3, [r7, #13]
 8001698:	883b      	ldrh	r3, [r7, #0]
 800169a:	0a1b      	lsrs	r3, r3, #8
 800169c:	b29b      	uxth	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	73bb      	strb	r3, [r7, #14]
 80016a2:	883b      	ldrh	r3, [r7, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	73fb      	strb	r3, [r7, #15]

    CS_A();
 80016a8:	2200      	movs	r2, #0
 80016aa:	2110      	movs	r1, #16
 80016ac:	4848      	ldr	r0, [pc, #288]	@ (80017d0 <read_pixel_frame+0x21c>)
 80016ae:	f002 fe29 	bl	8004304 <HAL_GPIO_WritePin>

    DC_COMMAND();
 80016b2:	2200      	movs	r2, #0
 80016b4:	2108      	movs	r1, #8
 80016b6:	4846      	ldr	r0, [pc, #280]	@ (80017d0 <read_pixel_frame+0x21c>)
 80016b8:	f002 fe24 	bl	8004304 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 80016bc:	232a      	movs	r3, #42	@ 0x2a
 80016be:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 80016c0:	f107 010b 	add.w	r1, r7, #11
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	2201      	movs	r2, #1
 80016ca:	483f      	ldr	r0, [pc, #252]	@ (80017c8 <read_pixel_frame+0x214>)
 80016cc:	f004 faed 	bl	8005caa <HAL_SPI_Transmit>
    DC_DATA();
 80016d0:	2201      	movs	r2, #1
 80016d2:	2108      	movs	r1, #8
 80016d4:	483e      	ldr	r0, [pc, #248]	@ (80017d0 <read_pixel_frame+0x21c>)
 80016d6:	f002 fe15 	bl	8004304 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 80016da:	f107 0110 	add.w	r1, r7, #16
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	2204      	movs	r2, #4
 80016e4:	4838      	ldr	r0, [pc, #224]	@ (80017c8 <read_pixel_frame+0x214>)
 80016e6:	f004 fae0 	bl	8005caa <HAL_SPI_Transmit>

    DC_COMMAND();
 80016ea:	2200      	movs	r2, #0
 80016ec:	2108      	movs	r1, #8
 80016ee:	4838      	ldr	r0, [pc, #224]	@ (80017d0 <read_pixel_frame+0x21c>)
 80016f0:	f002 fe08 	bl	8004304 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 80016f4:	232b      	movs	r3, #43	@ 0x2b
 80016f6:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 80016f8:	f107 010a 	add.w	r1, r7, #10
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	2201      	movs	r2, #1
 8001702:	4831      	ldr	r0, [pc, #196]	@ (80017c8 <read_pixel_frame+0x214>)
 8001704:	f004 fad1 	bl	8005caa <HAL_SPI_Transmit>
    DC_DATA();
 8001708:	2201      	movs	r2, #1
 800170a:	2108      	movs	r1, #8
 800170c:	4830      	ldr	r0, [pc, #192]	@ (80017d0 <read_pixel_frame+0x21c>)
 800170e:	f002 fdf9 	bl	8004304 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 8001712:	f107 010c 	add.w	r1, r7, #12
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	2204      	movs	r2, #4
 800171c:	482a      	ldr	r0, [pc, #168]	@ (80017c8 <read_pixel_frame+0x214>)
 800171e:	f004 fac4 	bl	8005caa <HAL_SPI_Transmit>

    DC_COMMAND();
 8001722:	2200      	movs	r2, #0
 8001724:	2108      	movs	r1, #8
 8001726:	482a      	ldr	r0, [pc, #168]	@ (80017d0 <read_pixel_frame+0x21c>)
 8001728:	f002 fdec 	bl	8004304 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 800172c:	232e      	movs	r3, #46	@ 0x2e
 800172e:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 8001730:	f107 0109 	add.w	r1, r7, #9
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	2201      	movs	r2, #1
 800173a:	4823      	ldr	r0, [pc, #140]	@ (80017c8 <read_pixel_frame+0x214>)
 800173c:	f004 fab5 	bl	8005caa <HAL_SPI_Transmit>
    DC_DATA();
 8001740:	2201      	movs	r2, #1
 8001742:	2108      	movs	r1, #8
 8001744:	4822      	ldr	r0, [pc, #136]	@ (80017d0 <read_pixel_frame+0x21c>)
 8001746:	f002 fddd 	bl	8004304 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 800174a:	f107 0114 	add.w	r1, r7, #20
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	2201      	movs	r2, #1
 8001754:	481c      	ldr	r0, [pc, #112]	@ (80017c8 <read_pixel_frame+0x214>)
 8001756:	f004 fbec 	bl	8005f32 <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 800175a:	8afb      	ldrh	r3, [r7, #22]
 800175c:	461a      	mov	r2, r3
 800175e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001760:	4819      	ldr	r0, [pc, #100]	@ (80017c8 <read_pixel_frame+0x214>)
 8001762:	f004 ff5b 	bl	800661c <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 8001766:	bf00      	nop
 8001768:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <read_pixel_frame+0x218>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0fa      	beq.n	8001768 <read_pixel_frame+0x1b4>
    CS_D();
 8001772:	2201      	movs	r2, #1
 8001774:	2110      	movs	r1, #16
 8001776:	4816      	ldr	r0, [pc, #88]	@ (80017d0 <read_pixel_frame+0x21c>)
 8001778:	f002 fdc4 	bl	8004304 <HAL_GPIO_WritePin>

    free(data);
 800177c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800177e:	f00a f85b 	bl	800b838 <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <read_pixel_frame+0x214>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <read_pixel_frame+0x214>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001790:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <read_pixel_frame+0x214>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <read_pixel_frame+0x214>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80017a0:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <read_pixel_frame+0x214>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <read_pixel_frame+0x214>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <read_pixel_frame+0x214>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <read_pixel_frame+0x214>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017bc:	601a      	str	r2, [r3, #0]

}
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000180 	.word	0x20000180
 80017cc:	20000329 	.word	0x20000329
 80017d0:	40020c00 	.word	0x40020c00

080017d4 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


  void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	   * folosind DMA. Odata terminat transferul SPI prin DMA,
	   * aceasta functia de CallBack se va apela, setandu-ne un flag
	   * pentru a indica starea acestui transfer de date.
	   */

	  flagDmaSpiTx = 1;
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <HAL_SPI_TxCpltCallback+0x1c>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]

  }
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000328 	.word	0x20000328

080017f4 <HAL_SPI_RxCpltCallback>:


  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	  /*
	   * Functie de CallBack pentru terminarea receptiei datelor
	   * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	   */

	  flagDmaSpiRx = 1;
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <HAL_SPI_RxCpltCallback+0x1c>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]

  }
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000329 	.word	0x20000329

08001814 <HAL_DAC_ConvHalfCpltCallbackCh1>:


  void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
  {
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
      /*
       * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
       */

	  flagDmaDAC = 1;
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]

  }
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2000032a 	.word	0x2000032a

08001834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800183a:	b082      	sub	sp, #8
 800183c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183e:	f001 fc3f 	bl	80030c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001842:	f000 fb3d 	bl	8001ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001846:	f000 fcd9 	bl	80021fc <MX_GPIO_Init>
  MX_DMA_Init();
 800184a:	f000 fc99 	bl	8002180 <MX_DMA_Init>
  MX_SPI1_Init();
 800184e:	f000 fbeb 	bl	8002028 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001852:	f000 fc6b 	bl	800212c <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001856:	f000 fb9d 	bl	8001f94 <MX_DAC_Init>
  MX_TIM2_Init();
 800185a:	f000 fc1b 	bl	8002094 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 800185e:	f000 fbc3 	bl	8001fe8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001862:	f007 fadb 	bl	8008e1c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 8001866:	f000 fd2d 	bl	80022c4 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 800186a:	f7ff fd4f 	bl	800130c <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 800186e:	48df      	ldr	r0, [pc, #892]	@ (8001bec <main+0x3b8>)
 8001870:	f005 fb92 	bl	8006f98 <HAL_TIM_Base_Start>


  fill_screen1(0xF100);
 8001874:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001878:	f7fe fefc 	bl	8000674 <fill_screen1>
  HAL_Delay(1000);
 800187c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001880:	f001 fc90 	bl	80031a4 <HAL_Delay>
  fill_screen2(0xF00F);
 8001884:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8001888:	f7fe ff54 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 800188c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001890:	f001 fc88 	bl	80031a4 <HAL_Delay>
  fill_screen2(0x3F51);
 8001894:	f643 7051 	movw	r0, #16209	@ 0x3f51
 8001898:	f7fe ff4c 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 800189c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018a0:	f001 fc80 	bl	80031a4 <HAL_Delay>

  unsigned int startTick = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80018aa:	f102 0218 	add.w	r2, r2, #24
 80018ae:	6013      	str	r3, [r2, #0]
  unsigned int endTick = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80018b6:	f102 0214 	add.w	r2, r2, #20
 80018ba:	6013      	str	r3, [r2, #0]
  unsigned int getTime = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80018c2:	f102 0210 	add.w	r2, r2, #16
 80018c6:	6013      	str	r3, [r2, #0]

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80018ce:	f102 021a 	add.w	r2, r2, #26
 80018d2:	8013      	strh	r3, [r2, #0]
  ent.y0 = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80018da:	f102 021c 	add.w	r2, r2, #28
 80018de:	8013      	strh	r3, [r2, #0]
  ent.id = 0x00;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80018e6:	f102 0218 	add.w	r2, r2, #24
 80018ea:	7013      	strb	r3, [r2, #0]
  draw_entity(&ent, "graphic/img4.txt");
 80018ec:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80018f0:	f103 0318 	add.w	r3, r3, #24
 80018f4:	49be      	ldr	r1, [pc, #760]	@ (8001bf0 <main+0x3bc>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f990 	bl	8000c1c <draw_entity>
  HAL_Delay(1000);
 80018fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001900:	f001 fc50 	bl	80031a4 <HAL_Delay>
  ent.x0 = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800190a:	f102 021a 	add.w	r2, r2, #26
 800190e:	8013      	strh	r3, [r2, #0]
  ent.y0 = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001916:	f102 021c 	add.w	r2, r2, #28
 800191a:	8013      	strh	r3, [r2, #0]
  startTick = HAL_GetTick();
 800191c:	f001 fc36 	bl	800318c <HAL_GetTick>
 8001920:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001924:	f103 0318 	add.w	r3, r3, #24
 8001928:	6018      	str	r0, [r3, #0]
  draw_entity(&ent, "graphic/img10.txt");
 800192a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800192e:	f103 0318 	add.w	r3, r3, #24
 8001932:	49b0      	ldr	r1, [pc, #704]	@ (8001bf4 <main+0x3c0>)
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff f971 	bl	8000c1c <draw_entity>
  endTick = HAL_GetTick();
 800193a:	f001 fc27 	bl	800318c <HAL_GetTick>
 800193e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001942:	f103 0314 	add.w	r3, r3, #20
 8001946:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001948:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800194c:	f103 0314 	add.w	r3, r3, #20
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001956:	f103 0318 	add.w	r3, r3, #24
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001962:	f102 0210 	add.w	r2, r2, #16
 8001966:	6013      	str	r3, [r2, #0]
  HAL_Delay(1000);
 8001968:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800196c:	f001 fc1a 	bl	80031a4 <HAL_Delay>
  ent.x0 = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001976:	f102 021a 	add.w	r2, r2, #26
 800197a:	8013      	strh	r3, [r2, #0]
  ent.y0 = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001982:	f102 021c 	add.w	r2, r2, #28
 8001986:	8013      	strh	r3, [r2, #0]
  //draw_entity(&ent, "graphic/img51.txt");
  //HAL_Delay(2000);
  draw_entity(&ent, "graphic/img6.txt");
 8001988:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800198c:	f103 0318 	add.w	r3, r3, #24
 8001990:	4999      	ldr	r1, [pc, #612]	@ (8001bf8 <main+0x3c4>)
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f942 	bl	8000c1c <draw_entity>
  HAL_Delay(2000);
 8001998:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800199c:	f001 fc02 	bl	80031a4 <HAL_Delay>
  draw_entity(&ent, "graphic/img8.txt");
 80019a0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80019a4:	f103 0318 	add.w	r3, r3, #24
 80019a8:	4994      	ldr	r1, [pc, #592]	@ (8001bfc <main+0x3c8>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f936 	bl	8000c1c <draw_entity>
  HAL_Delay(2000);
 80019b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019b4:	f001 fbf6 	bl	80031a4 <HAL_Delay>

  //Test translation

  ENTITY entity;

  entity.x0 = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019be:	f102 020a 	add.w	r2, r2, #10
 80019c2:	8013      	strh	r3, [r2, #0]
  entity.y0 = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019ca:	f102 020c 	add.w	r2, r2, #12
 80019ce:	8013      	strh	r3, [r2, #0]
  entity.x1 = 64;
 80019d0:	2340      	movs	r3, #64	@ 0x40
 80019d2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019d6:	f102 020e 	add.w	r2, r2, #14
 80019da:	8013      	strh	r3, [r2, #0]
  entity.y1 = 64;
 80019dc:	2340      	movs	r3, #64	@ 0x40
 80019de:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019e2:	f102 0210 	add.w	r2, r2, #16
 80019e6:	8013      	strh	r3, [r2, #0]
  entity.color = 0xF100;
 80019e8:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80019ec:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019f0:	f102 0214 	add.w	r2, r2, #20
 80019f4:	8013      	strh	r3, [r2, #0]

  //draw_entity(&entity,NULL);
  HAL_Delay(500);
 80019f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019fa:	f001 fbd3 	bl	80031a4 <HAL_Delay>

  translation_test(&entity, 1, 0);
 80019fe:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a02:	f103 0308 	add.w	r3, r3, #8
 8001a06:	2200      	movs	r2, #0
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fb04 	bl	8001018 <translation_test>

  HAL_Delay(500);
 8001a10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a14:	f001 fbc6 	bl	80031a4 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 1);//, 0xF100);
 8001a18:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a1c:	f103 030a 	add.w	r3, r3, #10
 8001a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3364      	adds	r3, #100	@ 0x64
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b219      	sxth	r1, r3
 8001a2c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a30:	f103 030c 	add.w	r3, r3, #12
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3364      	adds	r3, #100	@ 0x64
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001a44:	f100 0008 	add.w	r0, r0, #8
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f7ff f9e7 	bl	8000e1c <translation_entity>
  HAL_Delay(2000);
 8001a4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a52:	f001 fba7 	bl	80031a4 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 1);//, 0xF100);
 8001a56:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a5a:	f103 030a 	add.w	r3, r3, #10
 8001a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3320      	adds	r3, #32
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b219      	sxth	r1, r3
 8001a6a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a6e:	f103 030c 	add.w	r3, r3, #12
 8001a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3320      	adds	r3, #32
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001a82:	f100 0008 	add.w	r0, r0, #8
 8001a86:	2301      	movs	r3, #1
 8001a88:	f7ff f9c8 	bl	8000e1c <translation_entity>
  HAL_Delay(500);
 8001a8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a90:	f001 fb88 	bl	80031a4 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 1);//, 0xF100);
 8001a94:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a98:	f103 030a 	add.w	r3, r3, #10
 8001a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	330c      	adds	r3, #12
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	b219      	sxth	r1, r3
 8001aa8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001aac:	f103 030c 	add.w	r3, r3, #12
 8001ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	3320      	adds	r3, #32
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001ac0:	f100 0008 	add.w	r0, r0, #8
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f7ff f9a9 	bl	8000e1c <translation_entity>
  HAL_Delay(500);
 8001aca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ace:	f001 fb69 	bl	80031a4 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0, 1);//, 0xF100);
 8001ad2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001ad6:	f103 030a 	add.w	r3, r3, #10
 8001ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	330c      	adds	r3, #12
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	b219      	sxth	r1, r3
 8001ae6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001aea:	f103 030c 	add.w	r3, r3, #12
 8001aee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001af2:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001af6:	f100 0008 	add.w	r0, r0, #8
 8001afa:	2301      	movs	r3, #1
 8001afc:	f7ff f98e 	bl	8000e1c <translation_entity>
  HAL_Delay(500);
 8001b00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b04:	f001 fb4e 	bl	80031a4 <HAL_Delay>


  //Test_SD_Card();

  play_audio_file("audio/mine.txt"); //doremi mine songita song22
 8001b08:	483d      	ldr	r0, [pc, #244]	@ (8001c00 <main+0x3cc>)
 8001b0a:	f7fe fcd5 	bl	80004b8 <play_audio_file>

  char *fileData = NULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001b14:	f102 020c 	add.w	r2, r2, #12
 8001b18:	6013      	str	r3, [r2, #0]
  read_file("audio/text.txt", fileData);
 8001b1a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b1e:	f103 030c 	add.w	r3, r3, #12
 8001b22:	6819      	ldr	r1, [r3, #0]
 8001b24:	4837      	ldr	r0, [pc, #220]	@ (8001c04 <main+0x3d0>)
 8001b26:	f000 fbdb 	bl	80022e0 <read_file>
  HAL_Delay(1000);
 8001b2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b2e:	f001 fb39 	bl	80031a4 <HAL_Delay>

  uint32_t sampleData[1024]; /*23 de ms pentru redare DMA dintre care 7 ms pentru citire din fisier*/
  	  	  	  	  	  	  	 /*Vor ramane aproximativ 16 ms pentru prelucrarea frame-ului (pentru 1024 de esantioane)*/

  startTick = HAL_GetTick();
 8001b32:	f001 fb2b 	bl	800318c <HAL_GetTick>
 8001b36:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b3a:	f103 0318 	add.w	r3, r3, #24
 8001b3e:	6018      	str	r0, [r3, #0]
  read_audio_file("audio/random.txt", sampleData);
 8001b40:	f107 0320 	add.w	r3, r7, #32
 8001b44:	3b18      	subs	r3, #24
 8001b46:	4619      	mov	r1, r3
 8001b48:	482f      	ldr	r0, [pc, #188]	@ (8001c08 <main+0x3d4>)
 8001b4a:	f000 fcb3 	bl	80024b4 <read_audio_file>
  endTick = HAL_GetTick();
 8001b4e:	f001 fb1d 	bl	800318c <HAL_GetTick>
 8001b52:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b56:	f103 0314 	add.w	r3, r3, #20
 8001b5a:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001b5c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b60:	f103 0314 	add.w	r3, r3, #20
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b6a:	f103 0318 	add.w	r3, r3, #24
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001b76:	f102 0210 	add.w	r2, r2, #16
 8001b7a:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001b7c:	2064      	movs	r0, #100	@ 0x64
 8001b7e:	f001 fb11 	bl	80031a4 <HAL_Delay>

  startTick = HAL_GetTick();
 8001b82:	f001 fb03 	bl	800318c <HAL_GetTick>
 8001b86:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b8a:	f103 0318 	add.w	r3, r3, #24
 8001b8e:	6018      	str	r0, [r3, #0]
  read_audio_file("audio/random.txt", sampleData);
 8001b90:	f107 0320 	add.w	r3, r7, #32
 8001b94:	3b18      	subs	r3, #24
 8001b96:	4619      	mov	r1, r3
 8001b98:	481b      	ldr	r0, [pc, #108]	@ (8001c08 <main+0x3d4>)
 8001b9a:	f000 fc8b 	bl	80024b4 <read_audio_file>
  endTick = HAL_GetTick();
 8001b9e:	f001 faf5 	bl	800318c <HAL_GetTick>
 8001ba2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ba6:	f103 0314 	add.w	r3, r3, #20
 8001baa:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001bac:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001bb0:	f103 0314 	add.w	r3, r3, #20
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001bba:	f103 0318 	add.w	r3, r3, #24
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001bc6:	f102 0210 	add.w	r2, r2, #16
 8001bca:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001bcc:	2064      	movs	r0, #100	@ 0x64
 8001bce:	f001 fae9 	bl	80031a4 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001bd2:	f107 0320 	add.w	r3, r7, #32
 8001bd6:	3b18      	subs	r3, #24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480a      	ldr	r0, [pc, #40]	@ (8001c04 <main+0x3d0>)
 8001bdc:	f000 fc6a 	bl	80024b4 <read_audio_file>
  HAL_Delay(100);
 8001be0:	2064      	movs	r0, #100	@ 0x64
 8001be2:	f001 fadf 	bl	80031a4 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	e00f      	b.n	8001c0c <main+0x3d8>
 8001bec:	20000298 	.word	0x20000298
 8001bf0:	0800bb70 	.word	0x0800bb70
 8001bf4:	0800bb84 	.word	0x0800bb84
 8001bf8:	0800bb98 	.word	0x0800bb98
 8001bfc:	0800bbac 	.word	0x0800bbac
 8001c00:	0800bbc0 	.word	0x0800bbc0
 8001c04:	0800bbd0 	.word	0x0800bbd0
 8001c08:	0800bbe0 	.word	0x0800bbe0
 8001c0c:	3b18      	subs	r3, #24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	48a6      	ldr	r0, [pc, #664]	@ (8001eac <main+0x678>)
 8001c12:	f000 fc4f 	bl	80024b4 <read_audio_file>
  HAL_Delay(100);
 8001c16:	2064      	movs	r0, #100	@ 0x64
 8001c18:	f001 fac4 	bl	80031a4 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001c1c:	f107 0320 	add.w	r3, r7, #32
 8001c20:	3b18      	subs	r3, #24
 8001c22:	4619      	mov	r1, r3
 8001c24:	48a1      	ldr	r0, [pc, #644]	@ (8001eac <main+0x678>)
 8001c26:	f000 fc45 	bl	80024b4 <read_audio_file>
  HAL_Delay(100);
 8001c2a:	2064      	movs	r0, #100	@ 0x64
 8001c2c:	f001 faba 	bl	80031a4 <HAL_Delay>

  for(uint8_t i=0;i<100;i++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c36:	f102 021f 	add.w	r2, r2, #31
 8001c3a:	7013      	strb	r3, [r2, #0]
 8001c3c:	e09c      	b.n	8001d78 <main+0x544>
  {
	  for(uint8_t j=0; j<100;j++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c44:	f102 021e 	add.w	r2, r2, #30
 8001c48:	7013      	strb	r3, [r2, #0]
 8001c4a:	e082      	b.n	8001d52 <main+0x51e>
	  {

		  if(i==j)
 8001c4c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c50:	f103 031f 	add.w	r3, r3, #31
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c5a:	f103 031e 	add.w	r3, r3, #30
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d111      	bne.n	8001c88 <main+0x454>
		  {
			  draw_pixel(i,j,0xF100);
 8001c64:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c68:	f103 031f 	add.w	r3, r3, #31
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c74:	f102 021e 	add.w	r2, r2, #30
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	b291      	uxth	r1, r2
 8001c7c:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fccd 	bl	8000620 <draw_pixel>
			  continue;
 8001c86:	e059      	b.n	8001d3c <main+0x508>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8001c88:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c8c:	f103 031f 	add.w	r3, r3, #31
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b50      	cmp	r3, #80	@ 0x50
 8001c94:	d106      	bne.n	8001ca4 <main+0x470>
 8001c96:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c9a:	f103 031e 	add.w	r3, r3, #30
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b14      	cmp	r3, #20
 8001ca2:	d029      	beq.n	8001cf8 <main+0x4c4>
 8001ca4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ca8:	f103 031f 	add.w	r3, r3, #31
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b50      	cmp	r3, #80	@ 0x50
 8001cb0:	d106      	bne.n	8001cc0 <main+0x48c>
 8001cb2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cb6:	f103 031e 	add.w	r3, r3, #30
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b13      	cmp	r3, #19
 8001cbe:	d01b      	beq.n	8001cf8 <main+0x4c4>
 8001cc0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cc4:	f103 031f 	add.w	r3, r3, #31
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b51      	cmp	r3, #81	@ 0x51
 8001ccc:	d106      	bne.n	8001cdc <main+0x4a8>
 8001cce:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cd2:	f103 031e 	add.w	r3, r3, #30
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b14      	cmp	r3, #20
 8001cda:	d00d      	beq.n	8001cf8 <main+0x4c4>
 8001cdc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ce0:	f103 031f 	add.w	r3, r3, #31
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b51      	cmp	r3, #81	@ 0x51
 8001ce8:	d117      	bne.n	8001d1a <main+0x4e6>
 8001cea:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cee:	f103 031e 	add.w	r3, r3, #30
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b13      	cmp	r3, #19
 8001cf6:	d110      	bne.n	8001d1a <main+0x4e6>
		  {
			  draw_pixel(i,j,0x001F);
 8001cf8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cfc:	f103 031f 	add.w	r3, r3, #31
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d08:	f102 021e 	add.w	r2, r2, #30
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	b291      	uxth	r1, r2
 8001d10:	221f      	movs	r2, #31
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc84 	bl	8000620 <draw_pixel>
			  continue;
 8001d18:	e010      	b.n	8001d3c <main+0x508>
		  }


		  draw_pixel(i,j,0xFFFF);
 8001d1a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d1e:	f103 031f 	add.w	r3, r3, #31
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d2a:	f102 021e 	add.w	r2, r2, #30
 8001d2e:	7812      	ldrb	r2, [r2, #0]
 8001d30:	b291      	uxth	r1, r2
 8001d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc72 	bl	8000620 <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8001d3c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d40:	f103 031e 	add.w	r3, r3, #30
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d4c:	f102 021e 	add.w	r2, r2, #30
 8001d50:	7013      	strb	r3, [r2, #0]
 8001d52:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d56:	f103 031e 	add.w	r3, r3, #30
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b63      	cmp	r3, #99	@ 0x63
 8001d5e:	f67f af75 	bls.w	8001c4c <main+0x418>
  for(uint8_t i=0;i<100;i++)
 8001d62:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d66:	f103 031f 	add.w	r3, r3, #31
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d72:	f102 021f 	add.w	r2, r2, #31
 8001d76:	7013      	strb	r3, [r2, #0]
 8001d78:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d7c:	f103 031f 	add.w	r3, r3, #31
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b63      	cmp	r3, #99	@ 0x63
 8001d84:	f67f af5b 	bls.w	8001c3e <main+0x40a>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8001d88:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001d8c:	f7fe fcd2 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 8001d90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d94:	f001 fa06 	bl	80031a4 <HAL_Delay>
  fill_screen2(0xF150);
 8001d98:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8001d9c:	f7fe fcca 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 8001da0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001da4:	f001 f9fe 	bl	80031a4 <HAL_Delay>
  fill_screen2(0xF111);
 8001da8:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8001dac:	f7fe fcc2 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 8001db0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001db4:	f001 f9f6 	bl	80031a4 <HAL_Delay>
  fill_screen2(0xF10F);
 8001db8:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8001dbc:	f7fe fcba 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 8001dc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dc4:	f001 f9ee 	bl	80031a4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001dc8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001dcc:	f7fe fcb2 	bl	8000734 <fill_screen2>
  HAL_Delay(1000);
 8001dd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dd4:	f001 f9e6 	bl	80031a4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001dd8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ddc:	f7fe fcaa 	bl	8000734 <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 8001de0:	231f      	movs	r3, #31
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	230c      	movs	r3, #12
 8001dec:	4a30      	ldr	r2, [pc, #192]	@ (8001eb0 <main+0x67c>)
 8001dee:	21c8      	movs	r1, #200	@ 0xc8
 8001df0:	2024      	movs	r0, #36	@ 0x24
 8001df2:	f7fe fdfb 	bl	80009ec <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8001df6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <main+0x680>)
 8001dfe:	f842 3c3c 	str.w	r3, [r2, #-60]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	3b1c      	subs	r3, #28
 8001e08:	2204      	movs	r2, #4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	482a      	ldr	r0, [pc, #168]	@ (8001eb8 <main+0x684>)
 8001e0e:	f004 fb53 	bl	80064b8 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 8001e12:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001e16:	2250      	movs	r2, #80	@ 0x50
 8001e18:	2114      	movs	r1, #20
 8001e1a:	2014      	movs	r0, #20
 8001e1c:	f7fe fe2a 	bl	8000a74 <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 8001e20:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001e24:	2250      	movs	r2, #80	@ 0x50
 8001e26:	2114      	movs	r1, #20
 8001e28:	2014      	movs	r0, #20
 8001e2a:	f7fe fe5e 	bl	8000aea <draw_vertical_line>

  flagDmaSpiTx = 0;
 8001e2e:	4b23      	ldr	r3, [pc, #140]	@ (8001ebc <main+0x688>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 8001e34:	221f      	movs	r2, #31
 8001e36:	2100      	movs	r1, #0
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7fe fbf1 	bl	8000620 <draw_pixel>
  draw_pixel(1,0,0xF800);
 8001e3e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e42:	2100      	movs	r1, #0
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7fe fbeb 	bl	8000620 <draw_pixel>
  draw_pixel(0,1,0x001F);
 8001e4a:	221f      	movs	r2, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7fe fbe6 	bl	8000620 <draw_pixel>
  draw_pixel(1,1,0xF800);
 8001e54:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7fe fbe0 	bl	8000620 <draw_pixel>

  HAL_Delay(50);
 8001e60:	2032      	movs	r0, #50	@ 0x32
 8001e62:	f001 f99f 	bl	80031a4 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 8001e66:	2001      	movs	r0, #1
 8001e68:	f009 fcde 	bl	800b828 <malloc>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001e72:	f102 0208 	add.w	r2, r2, #8
 8001e76:	6013      	str	r3, [r2, #0]
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 8001e78:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001e7c:	f103 0308 	add.w	r3, r3, #8
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2302      	movs	r3, #2
 8001e86:	2202      	movs	r2, #2
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff fb92 	bl	80015b4 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 8001e90:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001e94:	f103 0308 	add.w	r3, r3, #8
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	f009 fccd 	bl	800b838 <free>

  HAL_Delay(3000);
 8001e9e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001ea2:	f001 f97f 	bl	80031a4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ea6:	bf00      	nop
 8001ea8:	e7fd      	b.n	8001ea6 <main+0x672>
 8001eaa:	bf00      	nop
 8001eac:	0800bbd0 	.word	0x0800bbd0
 8001eb0:	0800bbf4 	.word	0x0800bbf4
 8001eb4:	04030201 	.word	0x04030201
 8001eb8:	20000180 	.word	0x20000180
 8001ebc:	20000328 	.word	0x20000328

08001ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b094      	sub	sp, #80	@ 0x50
 8001ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec6:	f107 0320 	add.w	r3, r7, #32
 8001eca:	2230      	movs	r2, #48	@ 0x30
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f009 fd9e 	bl	800ba10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	4b28      	ldr	r3, [pc, #160]	@ (8001f8c <SystemClock_Config+0xcc>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	4a27      	ldr	r2, [pc, #156]	@ (8001f8c <SystemClock_Config+0xcc>)
 8001eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <SystemClock_Config+0xcc>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <SystemClock_Config+0xd0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a21      	ldr	r2, [pc, #132]	@ (8001f90 <SystemClock_Config+0xd0>)
 8001f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b1f      	ldr	r3, [pc, #124]	@ (8001f90 <SystemClock_Config+0xd0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f26:	2302      	movs	r3, #2
 8001f28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f30:	2304      	movs	r3, #4
 8001f32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f34:	23a8      	movs	r3, #168	@ 0xa8
 8001f36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f40:	f107 0320 	add.w	r3, r7, #32
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 f9f7 	bl	8004338 <HAL_RCC_OscConfig>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f50:	f000 f9b2 	bl	80022b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f54:	230f      	movs	r3, #15
 8001f56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f60:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	2105      	movs	r1, #5
 8001f72:	4618      	mov	r0, r3
 8001f74:	f002 fc58 	bl	8004828 <HAL_RCC_ClockConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f7e:	f000 f99b 	bl	80022b8 <Error_Handler>
  }
}
 8001f82:	bf00      	nop
 8001f84:	3750      	adds	r7, #80	@ 0x50
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40007000 	.word	0x40007000

08001f94 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <MX_DAC_Init+0x4c>)
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <MX_DAC_Init+0x50>)
 8001fa6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001fa8:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <MX_DAC_Init+0x4c>)
 8001faa:	f001 fa30 	bl	800340e <HAL_DAC_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001fb4:	f000 f980 	bl	80022b8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001fb8:	2324      	movs	r3, #36	@ 0x24
 8001fba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4806      	ldr	r0, [pc, #24]	@ (8001fe0 <MX_DAC_Init+0x4c>)
 8001fc8:	f001 fb1a 	bl	8003600 <HAL_DAC_ConfigChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001fd2:	f000 f971 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000088 	.word	0x20000088
 8001fe4:	40007400 	.word	0x40007400

08001fe8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <MX_SDIO_SD_Init+0x38>)
 8001fee:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <MX_SDIO_SD_Init+0x3c>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <MX_SDIO_SD_Init+0x38>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <MX_SDIO_SD_Init+0x38>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <MX_SDIO_SD_Init+0x38>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <MX_SDIO_SD_Init+0x38>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800200a:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <MX_SDIO_SD_Init+0x38>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8002010:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <MX_SDIO_SD_Init+0x38>)
 8002012:	2208      	movs	r2, #8
 8002014:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	200000fc 	.word	0x200000fc
 8002024:	40012c00 	.word	0x40012c00

08002028 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800202c:	4b17      	ldr	r3, [pc, #92]	@ (800208c <MX_SPI1_Init+0x64>)
 800202e:	4a18      	ldr	r2, [pc, #96]	@ (8002090 <MX_SPI1_Init+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002032:	4b16      	ldr	r3, [pc, #88]	@ (800208c <MX_SPI1_Init+0x64>)
 8002034:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002038:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800203a:	4b14      	ldr	r3, [pc, #80]	@ (800208c <MX_SPI1_Init+0x64>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002040:	4b12      	ldr	r3, [pc, #72]	@ (800208c <MX_SPI1_Init+0x64>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002046:	4b11      	ldr	r3, [pc, #68]	@ (800208c <MX_SPI1_Init+0x64>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800204c:	4b0f      	ldr	r3, [pc, #60]	@ (800208c <MX_SPI1_Init+0x64>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002052:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <MX_SPI1_Init+0x64>)
 8002054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002058:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800205a:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <MX_SPI1_Init+0x64>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002060:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <MX_SPI1_Init+0x64>)
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002066:	4b09      	ldr	r3, [pc, #36]	@ (800208c <MX_SPI1_Init+0x64>)
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206c:	4b07      	ldr	r3, [pc, #28]	@ (800208c <MX_SPI1_Init+0x64>)
 800206e:	2200      	movs	r2, #0
 8002070:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <MX_SPI1_Init+0x64>)
 8002074:	220a      	movs	r2, #10
 8002076:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002078:	4804      	ldr	r0, [pc, #16]	@ (800208c <MX_SPI1_Init+0x64>)
 800207a:	f003 fd8d 	bl	8005b98 <HAL_SPI_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002084:	f000 f918 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000180 	.word	0x20000180
 8002090:	40013000 	.word	0x40013000

08002094 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a8:	463b      	mov	r3, r7
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <MX_TIM2_Init+0x94>)
 80020b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <MX_TIM2_Init+0x94>)
 80020ba:	2253      	movs	r2, #83	@ 0x53
 80020bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020be:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <MX_TIM2_Init+0x94>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23;
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <MX_TIM2_Init+0x94>)
 80020c6:	2217      	movs	r2, #23
 80020c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ca:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <MX_TIM2_Init+0x94>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d0:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <MX_TIM2_Init+0x94>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020d6:	4814      	ldr	r0, [pc, #80]	@ (8002128 <MX_TIM2_Init+0x94>)
 80020d8:	f004 ff0e 	bl	8006ef8 <HAL_TIM_Base_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80020e2:	f000 f8e9 	bl	80022b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ec:	f107 0308 	add.w	r3, r7, #8
 80020f0:	4619      	mov	r1, r3
 80020f2:	480d      	ldr	r0, [pc, #52]	@ (8002128 <MX_TIM2_Init+0x94>)
 80020f4:	f004 ffb8 	bl	8007068 <HAL_TIM_ConfigClockSource>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80020fe:	f000 f8db 	bl	80022b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002102:	2320      	movs	r3, #32
 8002104:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800210a:	463b      	mov	r3, r7
 800210c:	4619      	mov	r1, r3
 800210e:	4806      	ldr	r0, [pc, #24]	@ (8002128 <MX_TIM2_Init+0x94>)
 8002110:	f005 f9b8 	bl	8007484 <HAL_TIMEx_MasterConfigSynchronization>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800211a:	f000 f8cd 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000298 	.word	0x20000298

0800212c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002132:	4a12      	ldr	r2, [pc, #72]	@ (800217c <MX_USART1_UART_Init+0x50>)
 8002134:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002138:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800213c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800213e:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800214a:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002152:	220c      	movs	r2, #12
 8002154:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002162:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002164:	f005 fa0a 	bl	800757c <HAL_UART_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800216e:	f000 f8a3 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200002e0 	.word	0x200002e0
 800217c:	40011000 	.word	0x40011000

08002180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <MX_DMA_Init+0x78>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a1a      	ldr	r2, [pc, #104]	@ (80021f8 <MX_DMA_Init+0x78>)
 8002190:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <MX_DMA_Init+0x78>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <MX_DMA_Init+0x78>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	4a13      	ldr	r2, [pc, #76]	@ (80021f8 <MX_DMA_Init+0x78>)
 80021ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <MX_DMA_Init+0x78>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2010      	movs	r0, #16
 80021c4:	f001 f8ed 	bl	80033a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021c8:	2010      	movs	r0, #16
 80021ca:	f001 f906 	bl	80033da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2038      	movs	r0, #56	@ 0x38
 80021d4:	f001 f8e5 	bl	80033a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021d8:	2038      	movs	r0, #56	@ 0x38
 80021da:	f001 f8fe 	bl	80033da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	203b      	movs	r0, #59	@ 0x3b
 80021e4:	f001 f8dd 	bl	80033a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80021e8:	203b      	movs	r0, #59	@ 0x3b
 80021ea:	f001 f8f6 	bl	80033da <HAL_NVIC_EnableIRQ>

}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800

080021fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	@ 0x28
 8002200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b26      	ldr	r3, [pc, #152]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a25      	ldr	r2, [pc, #148]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 800221c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b23      	ldr	r3, [pc, #140]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a1e      	ldr	r2, [pc, #120]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a17      	ldr	r2, [pc, #92]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a10      	ldr	r2, [pc, #64]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 8002270:	f043 0308 	orr.w	r3, r3, #8
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <MX_GPIO_Init+0xb4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	2158      	movs	r1, #88	@ 0x58
 8002286:	480b      	ldr	r0, [pc, #44]	@ (80022b4 <MX_GPIO_Init+0xb8>)
 8002288:	f002 f83c 	bl	8004304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 800228c:	2358      	movs	r3, #88	@ 0x58
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002290:	2301      	movs	r3, #1
 8002292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	4804      	ldr	r0, [pc, #16]	@ (80022b4 <MX_GPIO_Init+0xb8>)
 80022a4:	f001 fe92 	bl	8003fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022a8:	bf00      	nop
 80022aa:	3728      	adds	r7, #40	@ 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020c00 	.word	0x40020c00

080022b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022bc:	b672      	cpsid	i
}
 80022be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <Error_Handler+0x8>

080022c4 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 80022c8:	2201      	movs	r2, #1
 80022ca:	4903      	ldr	r1, [pc, #12]	@ (80022d8 <init_cardSD+0x14>)
 80022cc:	4803      	ldr	r0, [pc, #12]	@ (80022dc <init_cardSD+0x18>)
 80022ce:	f008 fc5f 	bl	800ab90 <f_mount>

}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	0800bc04 	.word	0x0800bc04
 80022dc:	2000032c 	.word	0x2000032c

080022e0 <read_file>:



void read_file(char *filePathName, char*fileData)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80022ec:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80022f0:	6018      	str	r0, [r3, #0]
 80022f2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80022f6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80022fa:	6019      	str	r1, [r3, #0]

	FRESULT res;  //stocarea starii cardului SD (util pentru depanare)
	FIL file;  //stocarea informatiilor despre fisierul deschis
	UINT byteRead;  //contor pentru numarul total de octeti cititi efectivi

	fileData = (char*)malloc(128*sizeof(char));
 80022fc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002300:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 8002304:	2080      	movs	r0, #128	@ 0x80
 8002306:	f009 fa8f 	bl	800b828 <malloc>
 800230a:	4603      	mov	r3, r0
 800230c:	6023      	str	r3, [r4, #0]

	res = f_open(&file, filePathName, FA_READ);
 800230e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002312:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002316:	f107 000c 	add.w	r0, r7, #12
 800231a:	2201      	movs	r2, #1
 800231c:	6819      	ldr	r1, [r3, #0]
 800231e:	f008 fc7d 	bl	800ac1c <f_open>
 8002322:	4603      	mov	r3, r0
 8002324:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

	if(res != FR_OK)
 8002328:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800232c:	2b00      	cmp	r3, #0
 800232e:	d131      	bne.n	8002394 <read_file+0xb4>
	{
		return;
	}

	f_read(&file, fileData, (sizeof(fileData)*128)-1, &byteRead);
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8002338:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 800233c:	f107 000c 	add.w	r0, r7, #12
 8002340:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002344:	6809      	ldr	r1, [r1, #0]
 8002346:	f008 fe23 	bl	800af90 <f_read>
	fileData[byteRead] = '\0';
 800234a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800234e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8002358:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	4413      	add	r3, r2
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]

	fileData = (char*)realloc(fileData, byteRead);
 8002364:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002368:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002372:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 8002376:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800237a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800237e:	4611      	mov	r1, r2
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	f009 fb0f 	bl	800b9a4 <realloc>
 8002386:	6020      	str	r0, [r4, #0]

	f_close(&file);
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4618      	mov	r0, r3
 800238e:	f008 ffbc 	bl	800b30a <f_close>
 8002392:	e000      	b.n	8002396 <read_file+0xb6>
		return;
 8002394:	bf00      	nop


}
 8002396:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 800239a:	46bd      	mov	sp, r7
 800239c:	bd90      	pop	{r4, r7, pc}

0800239e <string_to_int>:
}



static uint16_t string_to_int(char *string)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 80023aa:	e015      	b.n	80023d8 <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80023b2:	d90e      	bls.n	80023d2 <string_to_int+0x34>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b39      	cmp	r3, #57	@ 0x39
 80023ba:	d80a      	bhi.n	80023d2 <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	461a      	mov	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	3b30      	subs	r3, #48	@ 0x30
 80023d0:	60fb      	str	r3, [r7, #12]
		}

		string++;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3301      	adds	r3, #1
 80023d6:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b0a      	cmp	r3, #10
 80023de:	d1e5      	bne.n	80023ac <string_to_int+0xe>
	}

	return number;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	b29b      	uxth	r3, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <stringHexa_to_int>:


static int16_t stringHexa_to_int(char *string)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
	uint8_t temp = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	72fb      	strb	r3, [r7, #11]

	while((*string) != '\n')
 8002400:	e04b      	b.n	800249a <stringHexa_to_int+0xaa>
	{

		if(((*string) >= '0') && ((*string)<='9'))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b2f      	cmp	r3, #47	@ 0x2f
 8002408:	d90b      	bls.n	8002422 <stringHexa_to_int+0x32>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b39      	cmp	r3, #57	@ 0x39
 8002410:	d807      	bhi.n	8002422 <stringHexa_to_int+0x32>
		{
			number = number * 16 + ((*string) - '0');
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	4413      	add	r3, r2
 800241c:	3b30      	subs	r3, #48	@ 0x30
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e038      	b.n	8002494 <stringHexa_to_int+0xa4>
		}

		else
			if((*string) >= 'A' && ((*string)<='F') )
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b40      	cmp	r3, #64	@ 0x40
 8002428:	d932      	bls.n	8002490 <stringHexa_to_int+0xa0>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b46      	cmp	r3, #70	@ 0x46
 8002430:	d82e      	bhi.n	8002490 <stringHexa_to_int+0xa0>
			{
				switch((*string))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	3b41      	subs	r3, #65	@ 0x41
 8002438:	2b05      	cmp	r3, #5
 800243a:	d821      	bhi.n	8002480 <stringHexa_to_int+0x90>
 800243c:	a201      	add	r2, pc, #4	@ (adr r2, 8002444 <stringHexa_to_int+0x54>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	0800245d 	.word	0x0800245d
 8002448:	08002463 	.word	0x08002463
 800244c:	08002469 	.word	0x08002469
 8002450:	0800246f 	.word	0x0800246f
 8002454:	08002475 	.word	0x08002475
 8002458:	0800247b 	.word	0x0800247b
				{
					case 'A':
						temp = 10;
 800245c:	230a      	movs	r3, #10
 800245e:	72fb      	strb	r3, [r7, #11]
						break;
 8002460:	e010      	b.n	8002484 <stringHexa_to_int+0x94>
					case 'B':
						temp = 11;
 8002462:	230b      	movs	r3, #11
 8002464:	72fb      	strb	r3, [r7, #11]
						break;
 8002466:	e00d      	b.n	8002484 <stringHexa_to_int+0x94>
					case 'C':
						temp = 12;
 8002468:	230c      	movs	r3, #12
 800246a:	72fb      	strb	r3, [r7, #11]
						break;
 800246c:	e00a      	b.n	8002484 <stringHexa_to_int+0x94>
					case 'D':
						temp = 13;
 800246e:	230d      	movs	r3, #13
 8002470:	72fb      	strb	r3, [r7, #11]
						break;
 8002472:	e007      	b.n	8002484 <stringHexa_to_int+0x94>
					case 'E':
						temp = 14;
 8002474:	230e      	movs	r3, #14
 8002476:	72fb      	strb	r3, [r7, #11]
						break;
 8002478:	e004      	b.n	8002484 <stringHexa_to_int+0x94>
					case 'F':
						temp = 15;
 800247a:	230f      	movs	r3, #15
 800247c:	72fb      	strb	r3, [r7, #11]
						break;
 800247e:	e001      	b.n	8002484 <stringHexa_to_int+0x94>
					default:
						temp = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	72fb      	strb	r3, [r7, #11]
				}

				number = number * 16 + temp;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	011a      	lsls	r2, r3, #4
 8002488:	7afb      	ldrb	r3, [r7, #11]
 800248a:	4413      	add	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e001      	b.n	8002494 <stringHexa_to_int+0xa4>

			}

			else
			{
				return 1;
 8002490:	2301      	movs	r3, #1
 8002492:	e008      	b.n	80024a6 <stringHexa_to_int+0xb6>
			}

		string++;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3301      	adds	r3, #1
 8002498:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b0a      	cmp	r3, #10
 80024a0:	d1af      	bne.n	8002402 <stringHexa_to_int+0x12>
	}

	return number;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	b21b      	sxth	r3, r3

}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop

080024b4 <read_audio_file>:



void read_audio_file(char *filePathName, uint32_t *buffer)
{
 80024b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80024bc:	af00      	add	r7, sp, #0
 80024be:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80024c2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80024c6:	6018      	str	r0, [r3, #0]
 80024c8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80024cc:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80024d0:	6019      	str	r1, [r3, #0]
 80024d2:	466b      	mov	r3, sp
 80024d4:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 80024d6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80024da:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80024de:	f107 0018 	add.w	r0, r7, #24
 80024e2:	2201      	movs	r2, #1
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	f008 fb99 	bl	800ac1c <f_open>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 80024f0:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f040 80fa 	bne.w	80026ee <read_audio_file+0x23a>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 80024fa:	4b80      	ldr	r3, [pc, #512]	@ (80026fc <read_audio_file+0x248>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f107 0318 	add.w	r3, r7, #24
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f008 ff2a 	bl	800b35e <f_lseek>


	if(flagNewAudioFile == 1)
 800250a:	4b7d      	ldr	r3, [pc, #500]	@ (8002700 <read_audio_file+0x24c>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d017      	beq.n	8002542 <read_audio_file+0x8e>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 8002512:	4b7b      	ldr	r3, [pc, #492]	@ (8002700 <read_audio_file+0x24c>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002518:	4b7a      	ldr	r3, [pc, #488]	@ (8002704 <read_audio_file+0x250>)
 800251a:	2200      	movs	r2, #0
 800251c:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 800251e:	4b77      	ldr	r3, [pc, #476]	@ (80026fc <read_audio_file+0x248>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 8002524:	4b75      	ldr	r3, [pc, #468]	@ (80026fc <read_audio_file+0x248>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	f107 0318 	add.w	r3, r7, #24
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f008 ff15 	bl	800b35e <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 8002534:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002538:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a72      	ldr	r2, [pc, #456]	@ (8002708 <read_audio_file+0x254>)
 8002540:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 8002542:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002546:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	unsigned int nrFrames = fileSize / n;
 800254a:	4b6f      	ldr	r3, [pc, #444]	@ (8002708 <read_audio_file+0x254>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

	if(fileSize%n != 0)
 800255a:	4b6b      	ldr	r3, [pc, #428]	@ (8002708 <read_audio_file+0x254>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8002562:	fbb3 f1f2 	udiv	r1, r3, r2
 8002566:	fb01 f202 	mul.w	r2, r1, r2
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <read_audio_file+0xc6>
	{
		nrFrames++;
 8002570:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8002574:	3301      	adds	r3, #1
 8002576:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	}

	uint8_t index = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	char tempBuffer[n];
 8002580:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002584:	3b01      	subs	r3, #1
 8002586:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800258a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800258e:	2200      	movs	r2, #0
 8002590:	4698      	mov	r8, r3
 8002592:	4691      	mov	r9, r2
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025a8:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80025ac:	2200      	movs	r2, #0
 80025ae:	461c      	mov	r4, r3
 80025b0:	4615      	mov	r5, r2
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	00eb      	lsls	r3, r5, #3
 80025bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025c0:	00e2      	lsls	r2, r4, #3
 80025c2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80025c6:	3307      	adds	r3, #7
 80025c8:	08db      	lsrs	r3, r3, #3
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	ebad 0d03 	sub.w	sp, sp, r3
 80025d0:	466b      	mov	r3, sp
 80025d2:	3300      	adds	r3, #0
 80025d4:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 80025d8:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80025dc:	1e5a      	subs	r2, r3, #1
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	f107 0018 	add.w	r0, r7, #24
 80025e6:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80025ea:	f008 fcd1 	bl	800af90 <f_read>
	tempBuffer[byteRead] = '\n';
 80025ee:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80025f2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80025fc:	210a      	movs	r1, #10
 80025fe:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 8002600:	2300      	movs	r3, #0
 8002602:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 8002606:	e040      	b.n	800268a <read_audio_file+0x1d6>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 8002608:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 800260c:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8002610:	5cd3      	ldrb	r3, [r2, r3]
 8002612:	2b0a      	cmp	r3, #10
 8002614:	d011      	beq.n	800263a <read_audio_file+0x186>
		{
			nrCharBuffer[index] = tempBuffer[i];
 8002616:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 800261a:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 800261e:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8002622:	5c89      	ldrb	r1, [r1, r2]
 8002624:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002628:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 800262c:	54d1      	strb	r1, [r2, r3]
			index++;
 800262e:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 8002632:	3301      	adds	r3, #1
 8002634:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 8002638:	e022      	b.n	8002680 <read_audio_file+0x1cc>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 800263a:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 800263e:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002642:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8002646:	210a      	movs	r1, #10
 8002648:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fea5 	bl	800239e <string_to_int>
 8002654:	4603      	mov	r3, r0
 8002656:	461a      	mov	r2, r3
 8002658:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800265c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	601a      	str	r2, [r3, #0]
			buffer++;
 8002664:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002668:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800266c:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002670:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	3204      	adds	r2, #4
 8002678:	601a      	str	r2, [r3, #0]

			index = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	for(uint16_t i=0; i< byteRead; i++)
 8002680:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 8002684:	3301      	adds	r3, #1
 8002686:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 800268a:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 800268e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002692:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d3b5      	bcc.n	8002608 <read_audio_file+0x154>


	}


	if(currentFrame == nrFrames)
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <read_audio_file+0x250>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d108      	bne.n	80026bc <read_audio_file+0x208>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 80026aa:	4b15      	ldr	r3, [pc, #84]	@ (8002700 <read_audio_file+0x24c>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 80026b0:	f107 0318 	add.w	r3, r7, #24
 80026b4:	4618      	mov	r0, r3
 80026b6:	f008 fe28 	bl	800b30a <f_close>
		return;
 80026ba:	e018      	b.n	80026ee <read_audio_file+0x23a>
	}

	currentFrame++;
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <read_audio_file+0x250>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002704 <read_audio_file+0x250>)
 80026c6:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 80026c8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80026cc:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <read_audio_file+0x248>)
 80026d4:	6013      	str	r3, [r2, #0]
	currentPosition++;
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <read_audio_file+0x248>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	4a07      	ldr	r2, [pc, #28]	@ (80026fc <read_audio_file+0x248>)
 80026de:	6013      	str	r3, [r2, #0]

	f_close(&file);
 80026e0:	f107 0318 	add.w	r3, r7, #24
 80026e4:	4618      	mov	r0, r3
 80026e6:	f008 fe10 	bl	800b30a <f_close>
 80026ea:	46b5      	mov	sp, r6
 80026ec:	e000      	b.n	80026f0 <read_audio_file+0x23c>
		return;
 80026ee:	46b5      	mov	sp, r6


}
 80026f0:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 80026f4:	46bd      	mov	sp, r7
 80026f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026fa:	bf00      	nop
 80026fc:	2000055c 	.word	0x2000055c
 8002700:	20000008 	.word	0x20000008
 8002704:	20000560 	.word	0x20000560
 8002708:	20000564 	.word	0x20000564

0800270c <read_image_file>:


void read_image_file(char *filePathName, ENTITY *entity, uint16_t *index, bool *flagImgDone)
{
 800270c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002710:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 8002714:	af00      	add	r7, sp, #0
 8002716:	f507 761a 	add.w	r6, r7, #616	@ 0x268
 800271a:	f5a6 7617 	sub.w	r6, r6, #604	@ 0x25c
 800271e:	6030      	str	r0, [r6, #0]
 8002720:	f507 701a 	add.w	r0, r7, #616	@ 0x268
 8002724:	f5a0 7018 	sub.w	r0, r0, #608	@ 0x260
 8002728:	6001      	str	r1, [r0, #0]
 800272a:	f507 711a 	add.w	r1, r7, #616	@ 0x268
 800272e:	f5a1 7119 	sub.w	r1, r1, #612	@ 0x264
 8002732:	600a      	str	r2, [r1, #0]
 8002734:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8002738:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	466b      	mov	r3, sp
 8002740:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8002742:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002746:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800274a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800274e:	2201      	movs	r2, #1
 8002750:	6819      	ldr	r1, [r3, #0]
 8002752:	f008 fa63 	bl	800ac1c <f_open>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 3261 	strb.w	r3, [r7, #609]	@ 0x261

	if(res != FR_OK)
 800275c:	f897 3261 	ldrb.w	r3, [r7, #609]	@ 0x261
 8002760:	2b00      	cmp	r3, #0
 8002762:	f040 81a5 	bne.w	8002ab0 <read_image_file+0x3a4>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8002766:	4bce      	ldr	r3, [pc, #824]	@ (8002aa0 <read_image_file+0x394>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f008 fdf4 	bl	800b35e <f_lseek>


	if(flagNewImageFile == 1)
 8002776:	4bcb      	ldr	r3, [pc, #812]	@ (8002aa4 <read_image_file+0x398>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80a2 	beq.w	80028c4 <read_image_file+0x1b8>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primele 8 caractere*/

		char headerBuffer[8];

		currentPosition = 0;
 8002780:	4bc7      	ldr	r3, [pc, #796]	@ (8002aa0 <read_image_file+0x394>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8002786:	4bc6      	ldr	r3, [pc, #792]	@ (8002aa0 <read_image_file+0x394>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f008 fde4 	bl	800b35e <f_lseek>


		f_read(&file, headerBuffer, (sizeof(headerBuffer))-1, &byteRead);
 8002796:	f107 0320 	add.w	r3, r7, #32
 800279a:	f107 0114 	add.w	r1, r7, #20
 800279e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80027a2:	2207      	movs	r2, #7
 80027a4:	f008 fbf4 	bl	800af90 <f_read>
		headerBuffer[byteRead] = '\n';
 80027a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80027ac:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80027b6:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80027ba:	210a      	movs	r1, #10
 80027bc:	54d1      	strb	r1, [r2, r3]

		/*conversie ascii to zecimal*/

		entity->x1 = stringHexa_to_int(headerBuffer); /*latimea*/
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fe14 	bl	80023f0 <stringHexa_to_int>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80027d0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	80da      	strh	r2, [r3, #6]
		entity->y1 = stringHexa_to_int(headerBuffer+4); /*lungimea*/
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	3304      	adds	r3, #4
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fe06 	bl	80023f0 <stringHexa_to_int>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80027ec:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	811a      	strh	r2, [r3, #8]

		if((entity->x1)*(entity->y1) < 1024)
 80027f4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80027f8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002802:	461a      	mov	r2, r3
 8002804:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002808:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800281a:	da1f      	bge.n	800285c <read_image_file+0x150>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 800281c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002820:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800282a:	461a      	mov	r2, r3
 800282c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002830:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800283a:	fb03 f202 	mul.w	r2, r3, r2
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f008 ffef 	bl	800b828 <malloc>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002852:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	e00b      	b.n	8002874 <read_image_file+0x168>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->data = malloc(sizeof(char)*3072);
 800285c:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002860:	f008 ffe2 	bl	800b828 <malloc>
 8002864:	4603      	mov	r3, r0
 8002866:	461a      	mov	r2, r3
 8002868:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800286c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 8002874:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa4 <read_image_file+0x398>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 800287a:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa8 <read_image_file+0x39c>)
 800287c:	2200      	movs	r2, #0
 800287e:	801a      	strh	r2, [r3, #0]

		currentPosition = ++byteRead;
 8002880:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002884:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002890:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800289a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a7f      	ldr	r2, [pc, #508]	@ (8002aa0 <read_image_file+0x394>)
 80028a2:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 80028a4:	4b7e      	ldr	r3, [pc, #504]	@ (8002aa0 <read_image_file+0x394>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f008 fd55 	bl	800b35e <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 8;
 80028b4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80028b8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	3b08      	subs	r3, #8
 80028c0:	4a7a      	ldr	r2, [pc, #488]	@ (8002aac <read_image_file+0x3a0>)
 80028c2:	6013      	str	r3, [r2, #0]

		}


	const int n = 6144; /* 6*32*32 -> 6144 de octeti de prelucrat din fisier per frame*/
 80028c4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80028c8:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	/*care vor deveni 3072 deocteti in *data -> date reale*/

	unsigned int nrFrames = fileSize / n;
 80028cc:	4b77      	ldr	r3, [pc, #476]	@ (8002aac <read_image_file+0x3a0>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

	if(n == fileSize)
 80028dc:	4b73      	ldr	r3, [pc, #460]	@ (8002aac <read_image_file+0x3a0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d104      	bne.n	80028f4 <read_image_file+0x1e8>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 80028ea:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80028ee:	3b01      	subs	r3, #1
 80028f0:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
	}

	if(fileSize%n != 0 && nrFrames!=0)
 80028f4:	4b6d      	ldr	r3, [pc, #436]	@ (8002aac <read_image_file+0x3a0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80028fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002900:	fb01 f202 	mul.w	r2, r1, r2
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <read_image_file+0x210>
 800290a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800290e:	2b00      	cmp	r3, #0
 8002910:	d004      	beq.n	800291c <read_image_file+0x210>
	{
		nrFrames++;
 8002912:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8002916:	3301      	adds	r3, #1
 8002918:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
	}

	*index = 0;
 800291c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002920:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2200      	movs	r2, #0
 8002928:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 800292a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800292e:	3b01      	subs	r3, #1
 8002930:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8002934:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8002938:	2200      	movs	r2, #0
 800293a:	4698      	mov	r8, r3
 800293c:	4691      	mov	r9, r2
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800294a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800294e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002952:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8002956:	2200      	movs	r2, #0
 8002958:	461c      	mov	r4, r3
 800295a:	4615      	mov	r5, r2
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	00eb      	lsls	r3, r5, #3
 8002966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800296a:	00e2      	lsls	r2, r4, #3
 800296c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8002970:	3307      	adds	r3, #7
 8002972:	08db      	lsrs	r3, r3, #3
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	ebad 0d03 	sub.w	sp, sp, r3
 800297a:	466b      	mov	r3, sp
 800297c:	3300      	adds	r3, #0
 800297e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
	char nrCharBuffer[3];

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 8002982:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8002986:	f107 0320 	add.w	r3, r7, #32
 800298a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800298e:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8002992:	f008 fafd 	bl	800af90 <f_read>

	for(uint16_t i=0; i<byteRead; i++)
 8002996:	2300      	movs	r3, #0
 8002998:	f8a7 3262 	strh.w	r3, [r7, #610]	@ 0x262
 800299c:	e043      	b.n	8002a26 <read_image_file+0x31a>
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		nrCharBuffer[i%2] = tempBuffer[i];
 800299e:	f8b7 2262 	ldrh.w	r2, [r7, #610]	@ 0x262
 80029a2:	f8b7 3262 	ldrh.w	r3, [r7, #610]	@ 0x262
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 80029ae:	5c89      	ldrb	r1, [r1, r2]
 80029b0:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80029b4:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80029b8:	54d1      	strb	r1, [r2, r3]

		if(i%2 != 0)
 80029ba:	f8b7 3262 	ldrh.w	r3, [r7, #610]	@ 0x262
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d029      	beq.n	8002a1c <read_image_file+0x310>
		{
			/*Functie pentru transformare din ascii hexa in zecimal*/

			nrCharBuffer[2] = '\n';
 80029c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80029cc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80029d0:	220a      	movs	r2, #10
 80029d2:	709a      	strb	r2, [r3, #2]
			entity->data[(*index)] = stringHexa_to_int(nrCharBuffer);
 80029d4:	f107 031c 	add.w	r3, r7, #28
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fd09 	bl	80023f0 <stringHexa_to_int>
 80029de:	4603      	mov	r3, r0
 80029e0:	4619      	mov	r1, r3
 80029e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80029e6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80029f2:	f5a2 7219 	sub.w	r2, r2, #612	@ 0x264
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	8812      	ldrh	r2, [r2, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	b2ca      	uxtb	r2, r1
 80029fe:	701a      	strb	r2, [r3, #0]
			(*index)++;
 8002a00:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002a04:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002a14:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 8002a1c:	f8b7 3262 	ldrh.w	r3, [r7, #610]	@ 0x262
 8002a20:	3301      	adds	r3, #1
 8002a22:	f8a7 3262 	strh.w	r3, [r7, #610]	@ 0x262
 8002a26:	f8b7 2262 	ldrh.w	r2, [r7, #610]	@ 0x262
 8002a2a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002a2e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d3b2      	bcc.n	800299e <read_image_file+0x292>


	}


	currentFrame++;
 8002a38:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <read_image_file+0x39c>)
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <read_image_file+0x39c>)
 8002a42:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(index)) < 3072))
 8002a44:	4b18      	ldr	r3, [pc, #96]	@ (8002aa8 <read_image_file+0x39c>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d908      	bls.n	8002a64 <read_image_file+0x358>
 8002a52:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002a56:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002a62:	d20f      	bcs.n	8002a84 <read_image_file+0x378>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 8002a64:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002a68:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <read_image_file+0x398>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8002a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f008 fc44 	bl	800b30a <f_close>
		return;
 8002a82:	e015      	b.n	8002ab0 <read_image_file+0x3a4>
	}


	currentPosition = f_tell(&file);
 8002a84:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002a88:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <read_image_file+0x394>)
 8002a90:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8002a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a96:	4618      	mov	r0, r3
 8002a98:	f008 fc37 	bl	800b30a <f_close>
 8002a9c:	46b5      	mov	sp, r6
 8002a9e:	e008      	b.n	8002ab2 <read_image_file+0x3a6>
 8002aa0:	20000568 	.word	0x20000568
 8002aa4:	20000009 	.word	0x20000009
 8002aa8:	2000056c 	.word	0x2000056c
 8002aac:	20000570 	.word	0x20000570
		return;
 8002ab0:	46b5      	mov	sp, r6


}
 8002ab2:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	4b10      	ldr	r3, [pc, #64]	@ (8002b08 <HAL_MspInit+0x4c>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	4a0f      	ldr	r2, [pc, #60]	@ (8002b08 <HAL_MspInit+0x4c>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <HAL_MspInit+0x4c>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ada:	607b      	str	r3, [r7, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	603b      	str	r3, [r7, #0]
 8002ae2:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <HAL_MspInit+0x4c>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	4a08      	ldr	r2, [pc, #32]	@ (8002b08 <HAL_MspInit+0x4c>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_MspInit+0x4c>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800

08002b0c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	@ 0x28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a30      	ldr	r2, [pc, #192]	@ (8002bec <HAL_DAC_MspInit+0xe0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d159      	bne.n	8002be2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf0 <HAL_DAC_MspInit+0xe4>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	4a2e      	ldr	r2, [pc, #184]	@ (8002bf0 <HAL_DAC_MspInit+0xe4>)
 8002b38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <HAL_DAC_MspInit+0xe4>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b28      	ldr	r3, [pc, #160]	@ (8002bf0 <HAL_DAC_MspInit+0xe4>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	4a27      	ldr	r2, [pc, #156]	@ (8002bf0 <HAL_DAC_MspInit+0xe4>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5a:	4b25      	ldr	r3, [pc, #148]	@ (8002bf0 <HAL_DAC_MspInit+0xe4>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b66:	2310      	movs	r3, #16
 8002b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	4619      	mov	r1, r3
 8002b78:	481e      	ldr	r0, [pc, #120]	@ (8002bf4 <HAL_DAC_MspInit+0xe8>)
 8002b7a:	f001 fa27 	bl	8003fcc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002b80:	4a1e      	ldr	r2, [pc, #120]	@ (8002bfc <HAL_DAC_MspInit+0xf0>)
 8002b82:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002b84:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002b86:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002b8a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002b8e:	2240      	movs	r2, #64	@ 0x40
 8002b90:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b92:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002b98:	4b17      	ldr	r3, [pc, #92]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002b9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b9e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ba0:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002ba2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ba6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ba8:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002baa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bae:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002bb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bb6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002bba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002bbe:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002bc6:	480c      	ldr	r0, [pc, #48]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002bc8:	f000 fdfe 	bl	80037c8 <HAL_DMA_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002bd2:	f7ff fb71 	bl	80022b8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a07      	ldr	r2, [pc, #28]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	4a06      	ldr	r2, [pc, #24]	@ (8002bf8 <HAL_DAC_MspInit+0xec>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002be2:	bf00      	nop
 8002be4:	3728      	adds	r7, #40	@ 0x28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40007400 	.word	0x40007400
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	2000009c 	.word	0x2000009c
 8002bfc:	40026088 	.word	0x40026088

08002c00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	@ 0x28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a31      	ldr	r2, [pc, #196]	@ (8002ce4 <HAL_SD_MspInit+0xe4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d15b      	bne.n	8002cda <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b30      	ldr	r3, [pc, #192]	@ (8002ce8 <HAL_SD_MspInit+0xe8>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ce8 <HAL_SD_MspInit+0xe8>)
 8002c2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <HAL_SD_MspInit+0xe8>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b29      	ldr	r3, [pc, #164]	@ (8002ce8 <HAL_SD_MspInit+0xe8>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a28      	ldr	r2, [pc, #160]	@ (8002ce8 <HAL_SD_MspInit+0xe8>)
 8002c48:	f043 0304 	orr.w	r3, r3, #4
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <HAL_SD_MspInit+0xe8>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ce8 <HAL_SD_MspInit+0xe8>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a21      	ldr	r2, [pc, #132]	@ (8002ce8 <HAL_SD_MspInit+0xe8>)
 8002c64:	f043 0308 	orr.w	r3, r3, #8
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce8 <HAL_SD_MspInit+0xe8>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c80:	2301      	movs	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c84:	2303      	movs	r3, #3
 8002c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002c88:	230c      	movs	r3, #12
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	4619      	mov	r1, r3
 8002c92:	4816      	ldr	r0, [pc, #88]	@ (8002cec <HAL_SD_MspInit+0xec>)
 8002c94:	f001 f99a 	bl	8003fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002caa:	230c      	movs	r3, #12
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cae:	f107 0314 	add.w	r3, r7, #20
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	480d      	ldr	r0, [pc, #52]	@ (8002cec <HAL_SD_MspInit+0xec>)
 8002cb6:	f001 f989 	bl	8003fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cba:	2304      	movs	r3, #4
 8002cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002cca:	230c      	movs	r3, #12
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cce:	f107 0314 	add.w	r3, r7, #20
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4806      	ldr	r0, [pc, #24]	@ (8002cf0 <HAL_SD_MspInit+0xf0>)
 8002cd6:	f001 f979 	bl	8003fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002cda:	bf00      	nop
 8002cdc:	3728      	adds	r7, #40	@ 0x28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40012c00 	.word	0x40012c00
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40020800 	.word	0x40020800
 8002cf0:	40020c00 	.word	0x40020c00

08002cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	@ 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a47      	ldr	r2, [pc, #284]	@ (8002e30 <HAL_SPI_MspInit+0x13c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	f040 8088 	bne.w	8002e28 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	4b45      	ldr	r3, [pc, #276]	@ (8002e34 <HAL_SPI_MspInit+0x140>)
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d20:	4a44      	ldr	r2, [pc, #272]	@ (8002e34 <HAL_SPI_MspInit+0x140>)
 8002d22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d26:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d28:	4b42      	ldr	r3, [pc, #264]	@ (8002e34 <HAL_SPI_MspInit+0x140>)
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	4b3e      	ldr	r3, [pc, #248]	@ (8002e34 <HAL_SPI_MspInit+0x140>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8002e34 <HAL_SPI_MspInit+0x140>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d44:	4b3b      	ldr	r3, [pc, #236]	@ (8002e34 <HAL_SPI_MspInit+0x140>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d50:	23e0      	movs	r3, #224	@ 0xe0
 8002d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d60:	2305      	movs	r3, #5
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4833      	ldr	r0, [pc, #204]	@ (8002e38 <HAL_SPI_MspInit+0x144>)
 8002d6c:	f001 f92e 	bl	8003fcc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002d70:	4b32      	ldr	r3, [pc, #200]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002d72:	4a33      	ldr	r2, [pc, #204]	@ (8002e40 <HAL_SPI_MspInit+0x14c>)
 8002d74:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002d76:	4b31      	ldr	r3, [pc, #196]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002d78:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002d7c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002d80:	2240      	movs	r2, #64	@ 0x40
 8002d82:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d84:	4b2d      	ldr	r3, [pc, #180]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002d8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d90:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d92:	4b2a      	ldr	r3, [pc, #168]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d98:	4b28      	ldr	r3, [pc, #160]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002d9e:	4b27      	ldr	r3, [pc, #156]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002da4:	4b25      	ldr	r3, [pc, #148]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002daa:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002db0:	4822      	ldr	r0, [pc, #136]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002db2:	f000 fd09 	bl	80037c8 <HAL_DMA_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002dbc:	f7ff fa7c 	bl	80022b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002dc4:	649a      	str	r2, [r3, #72]	@ 0x48
 8002dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e3c <HAL_SPI_MspInit+0x148>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002dce:	4a1e      	ldr	r2, [pc, #120]	@ (8002e48 <HAL_SPI_MspInit+0x154>)
 8002dd0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002dd4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002dd8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dda:	4b1a      	ldr	r3, [pc, #104]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de0:	4b18      	ldr	r3, [pc, #96]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002de6:	4b17      	ldr	r3, [pc, #92]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002de8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dec:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dee:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002df4:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002dfa:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e00:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e06:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002e0c:	480d      	ldr	r0, [pc, #52]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002e0e:	f000 fcdb 	bl	80037c8 <HAL_DMA_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002e18:	f7ff fa4e 	bl	80022b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a09      	ldr	r2, [pc, #36]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002e20:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002e22:	4a08      	ldr	r2, [pc, #32]	@ (8002e44 <HAL_SPI_MspInit+0x150>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e28:	bf00      	nop
 8002e2a:	3728      	adds	r7, #40	@ 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40013000 	.word	0x40013000
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	200001d8 	.word	0x200001d8
 8002e40:	40026458 	.word	0x40026458
 8002e44:	20000238 	.word	0x20000238
 8002e48:	40026410 	.word	0x40026410

08002e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e5c:	d10d      	bne.n	8002e7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_TIM_Base_MspInit+0x3c>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	4a08      	ldr	r2, [pc, #32]	@ (8002e88 <HAL_TIM_Base_MspInit+0x3c>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_TIM_Base_MspInit+0x3c>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800

08002e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	@ 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f20 <HAL_UART_MspInit+0x94>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d134      	bne.n	8002f18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f24 <HAL_UART_MspInit+0x98>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f24 <HAL_UART_MspInit+0x98>)
 8002eb8:	f043 0310 	orr.w	r3, r3, #16
 8002ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ebe:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <HAL_UART_MspInit+0x98>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b15      	ldr	r3, [pc, #84]	@ (8002f24 <HAL_UART_MspInit+0x98>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	4a14      	ldr	r2, [pc, #80]	@ (8002f24 <HAL_UART_MspInit+0x98>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eda:	4b12      	ldr	r3, [pc, #72]	@ (8002f24 <HAL_UART_MspInit+0x98>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ee6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ef8:	2307      	movs	r3, #7
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4619      	mov	r1, r3
 8002f02:	4809      	ldr	r0, [pc, #36]	@ (8002f28 <HAL_UART_MspInit+0x9c>)
 8002f04:	f001 f862 	bl	8003fcc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	2025      	movs	r0, #37	@ 0x25
 8002f0e:	f000 fa48 	bl	80033a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f12:	2025      	movs	r0, #37	@ 0x25
 8002f14:	f000 fa61 	bl	80033da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f18:	bf00      	nop
 8002f1a:	3728      	adds	r7, #40	@ 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40011000 	.word	0x40011000
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40020000 	.word	0x40020000

08002f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <NMI_Handler+0x4>

08002f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <HardFault_Handler+0x4>

08002f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f40:	bf00      	nop
 8002f42:	e7fd      	b.n	8002f40 <MemManage_Handler+0x4>

08002f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f48:	bf00      	nop
 8002f4a:	e7fd      	b.n	8002f48 <BusFault_Handler+0x4>

08002f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f50:	bf00      	nop
 8002f52:	e7fd      	b.n	8002f50 <UsageFault_Handler+0x4>

08002f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f82:	f000 f8ef 	bl	8003164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002f90:	4802      	ldr	r0, [pc, #8]	@ (8002f9c <DMA1_Stream5_IRQHandler+0x10>)
 8002f92:	f000 fdb1 	bl	8003af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2000009c 	.word	0x2000009c

08002fa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fa4:	4802      	ldr	r0, [pc, #8]	@ (8002fb0 <USART1_IRQHandler+0x10>)
 8002fa6:	f004 fb39 	bl	800761c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200002e0 	.word	0x200002e0

08002fb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002fb8:	4802      	ldr	r0, [pc, #8]	@ (8002fc4 <DMA2_Stream0_IRQHandler+0x10>)
 8002fba:	f000 fd9d 	bl	8003af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000238 	.word	0x20000238

08002fc8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002fcc:	4802      	ldr	r0, [pc, #8]	@ (8002fd8 <DMA2_Stream3_IRQHandler+0x10>)
 8002fce:	f000 fd93 	bl	8003af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200001d8 	.word	0x200001d8

08002fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe4:	4a14      	ldr	r2, [pc, #80]	@ (8003038 <_sbrk+0x5c>)
 8002fe6:	4b15      	ldr	r3, [pc, #84]	@ (800303c <_sbrk+0x60>)
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ff0:	4b13      	ldr	r3, [pc, #76]	@ (8003040 <_sbrk+0x64>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d102      	bne.n	8002ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff8:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <_sbrk+0x64>)
 8002ffa:	4a12      	ldr	r2, [pc, #72]	@ (8003044 <_sbrk+0x68>)
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ffe:	4b10      	ldr	r3, [pc, #64]	@ (8003040 <_sbrk+0x64>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	429a      	cmp	r2, r3
 800300a:	d207      	bcs.n	800301c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800300c:	f008 fd18 	bl	800ba40 <__errno>
 8003010:	4603      	mov	r3, r0
 8003012:	220c      	movs	r2, #12
 8003014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003016:	f04f 33ff 	mov.w	r3, #4294967295
 800301a:	e009      	b.n	8003030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800301c:	4b08      	ldr	r3, [pc, #32]	@ (8003040 <_sbrk+0x64>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003022:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <_sbrk+0x64>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	4a05      	ldr	r2, [pc, #20]	@ (8003040 <_sbrk+0x64>)
 800302c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20020000 	.word	0x20020000
 800303c:	00000400 	.word	0x00000400
 8003040:	20000574 	.word	0x20000574
 8003044:	20000700 	.word	0x20000700

08003048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800304c:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <SystemInit+0x20>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003052:	4a05      	ldr	r2, [pc, #20]	@ (8003068 <SystemInit+0x20>)
 8003054:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003058:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800306c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003070:	f7ff ffea 	bl	8003048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003074:	480c      	ldr	r0, [pc, #48]	@ (80030a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003076:	490d      	ldr	r1, [pc, #52]	@ (80030ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003078:	4a0d      	ldr	r2, [pc, #52]	@ (80030b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800307a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800307c:	e002      	b.n	8003084 <LoopCopyDataInit>

0800307e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800307e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003082:	3304      	adds	r3, #4

08003084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003088:	d3f9      	bcc.n	800307e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800308a:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800308c:	4c0a      	ldr	r4, [pc, #40]	@ (80030b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800308e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003090:	e001      	b.n	8003096 <LoopFillZerobss>

08003092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003094:	3204      	adds	r2, #4

08003096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003098:	d3fb      	bcc.n	8003092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800309a:	f008 fcd7 	bl	800ba4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800309e:	f7fe fbc9 	bl	8001834 <main>
  bx  lr    
 80030a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80030b0:	0800ca6c 	.word	0x0800ca6c
  ldr r2, =_sbss
 80030b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80030b8:	20000700 	.word	0x20000700

080030bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030bc:	e7fe      	b.n	80030bc <ADC_IRQHandler>
	...

080030c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <HAL_Init+0x40>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003100 <HAL_Init+0x40>)
 80030ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <HAL_Init+0x40>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003100 <HAL_Init+0x40>)
 80030d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030dc:	4b08      	ldr	r3, [pc, #32]	@ (8003100 <HAL_Init+0x40>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a07      	ldr	r2, [pc, #28]	@ (8003100 <HAL_Init+0x40>)
 80030e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e8:	2003      	movs	r0, #3
 80030ea:	f000 f94f 	bl	800338c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ee:	200f      	movs	r0, #15
 80030f0:	f000 f808 	bl	8003104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f4:	f7ff fce2 	bl	8002abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023c00 	.word	0x40023c00

08003104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800310c:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <HAL_InitTick+0x54>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b12      	ldr	r3, [pc, #72]	@ (800315c <HAL_InitTick+0x58>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	4619      	mov	r1, r3
 8003116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800311a:	fbb3 f3f1 	udiv	r3, r3, r1
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f967 	bl	80033f6 <HAL_SYSTICK_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e00e      	b.n	8003150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b0f      	cmp	r3, #15
 8003136:	d80a      	bhi.n	800314e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003138:	2200      	movs	r2, #0
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	f04f 30ff 	mov.w	r0, #4294967295
 8003140:	f000 f92f 	bl	80033a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003144:	4a06      	ldr	r2, [pc, #24]	@ (8003160 <HAL_InitTick+0x5c>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e000      	b.n	8003150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000000c 	.word	0x2000000c
 800315c:	20000014 	.word	0x20000014
 8003160:	20000010 	.word	0x20000010

08003164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003168:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <HAL_IncTick+0x20>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_IncTick+0x24>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4413      	add	r3, r2
 8003174:	4a04      	ldr	r2, [pc, #16]	@ (8003188 <HAL_IncTick+0x24>)
 8003176:	6013      	str	r3, [r2, #0]
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000014 	.word	0x20000014
 8003188:	20000578 	.word	0x20000578

0800318c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return uwTick;
 8003190:	4b03      	ldr	r3, [pc, #12]	@ (80031a0 <HAL_GetTick+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000578 	.word	0x20000578

080031a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031ac:	f7ff ffee 	bl	800318c <HAL_GetTick>
 80031b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d005      	beq.n	80031ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031be:	4b0a      	ldr	r3, [pc, #40]	@ (80031e8 <HAL_Delay+0x44>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ca:	bf00      	nop
 80031cc:	f7ff ffde 	bl	800318c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d8f7      	bhi.n	80031cc <HAL_Delay+0x28>
  {
  }
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000014 	.word	0x20000014

080031ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003208:	4013      	ands	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800321c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321e:	4a04      	ldr	r2, [pc, #16]	@ (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	60d3      	str	r3, [r2, #12]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003238:	4b04      	ldr	r3, [pc, #16]	@ (800324c <__NVIC_GetPriorityGrouping+0x18>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	f003 0307 	and.w	r3, r3, #7
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	db0b      	blt.n	800327a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	f003 021f 	and.w	r2, r3, #31
 8003268:	4907      	ldr	r1, [pc, #28]	@ (8003288 <__NVIC_EnableIRQ+0x38>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2001      	movs	r0, #1
 8003272:	fa00 f202 	lsl.w	r2, r0, r2
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000e100 	.word	0xe000e100

0800328c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	2b00      	cmp	r3, #0
 800329e:	db0a      	blt.n	80032b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	490c      	ldr	r1, [pc, #48]	@ (80032d8 <__NVIC_SetPriority+0x4c>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	440b      	add	r3, r1
 80032b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b4:	e00a      	b.n	80032cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4908      	ldr	r1, [pc, #32]	@ (80032dc <__NVIC_SetPriority+0x50>)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	3b04      	subs	r3, #4
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	440b      	add	r3, r1
 80032ca:	761a      	strb	r2, [r3, #24]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000e100 	.word	0xe000e100
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	@ 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f1c3 0307 	rsb	r3, r3, #7
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	bf28      	it	cs
 80032fe:	2304      	movcs	r3, #4
 8003300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3304      	adds	r3, #4
 8003306:	2b06      	cmp	r3, #6
 8003308:	d902      	bls.n	8003310 <NVIC_EncodePriority+0x30>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3b03      	subs	r3, #3
 800330e:	e000      	b.n	8003312 <NVIC_EncodePriority+0x32>
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	f04f 32ff 	mov.w	r2, #4294967295
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	401a      	ands	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003328:	f04f 31ff 	mov.w	r1, #4294967295
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43d9      	mvns	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	4313      	orrs	r3, r2
         );
}
 800333a:	4618      	mov	r0, r3
 800333c:	3724      	adds	r7, #36	@ 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003358:	d301      	bcc.n	800335e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800335a:	2301      	movs	r3, #1
 800335c:	e00f      	b.n	800337e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800335e:	4a0a      	ldr	r2, [pc, #40]	@ (8003388 <SysTick_Config+0x40>)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003366:	210f      	movs	r1, #15
 8003368:	f04f 30ff 	mov.w	r0, #4294967295
 800336c:	f7ff ff8e 	bl	800328c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <SysTick_Config+0x40>)
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003376:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <SysTick_Config+0x40>)
 8003378:	2207      	movs	r2, #7
 800337a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	e000e010 	.word	0xe000e010

0800338c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff29 	bl	80031ec <__NVIC_SetPriorityGrouping>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b086      	sub	sp, #24
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	4603      	mov	r3, r0
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b4:	f7ff ff3e 	bl	8003234 <__NVIC_GetPriorityGrouping>
 80033b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f7ff ff8e 	bl	80032e0 <NVIC_EncodePriority>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff5d 	bl	800328c <__NVIC_SetPriority>
}
 80033d2:	bf00      	nop
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff31 	bl	8003250 <__NVIC_EnableIRQ>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ffa2 	bl	8003348 <SysTick_Config>
 8003404:	4603      	mov	r3, r0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e014      	b.n	800344a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	791b      	ldrb	r3, [r3, #4]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d105      	bne.n	8003436 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff fb6b 	bl	8002b0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0a2      	b.n	80035b6 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	795b      	ldrb	r3, [r3, #5]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_DAC_Start_DMA+0x28>
 8003478:	2302      	movs	r3, #2
 800347a:	e09c      	b.n	80035b6 <HAL_DAC_Start_DMA+0x162>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2202      	movs	r2, #2
 8003486:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d129      	bne.n	80034e2 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4a4b      	ldr	r2, [pc, #300]	@ (80035c0 <HAL_DAC_Start_DMA+0x16c>)
 8003494:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	4a4a      	ldr	r2, [pc, #296]	@ (80035c4 <HAL_DAC_Start_DMA+0x170>)
 800349c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4a49      	ldr	r2, [pc, #292]	@ (80035c8 <HAL_DAC_Start_DMA+0x174>)
 80034a4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_DAC_Start_DMA+0x70>
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d005      	beq.n	80034ce <HAL_DAC_Start_DMA+0x7a>
 80034c2:	e009      	b.n	80034d8 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3308      	adds	r3, #8
 80034ca:	613b      	str	r3, [r7, #16]
        break;
 80034cc:	e033      	b.n	8003536 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	613b      	str	r3, [r7, #16]
        break;
 80034d6:	e02e      	b.n	8003536 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3310      	adds	r3, #16
 80034de:	613b      	str	r3, [r7, #16]
        break;
 80034e0:	e029      	b.n	8003536 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	4a39      	ldr	r2, [pc, #228]	@ (80035cc <HAL_DAC_Start_DMA+0x178>)
 80034e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	4a38      	ldr	r2, [pc, #224]	@ (80035d0 <HAL_DAC_Start_DMA+0x17c>)
 80034f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4a37      	ldr	r2, [pc, #220]	@ (80035d4 <HAL_DAC_Start_DMA+0x180>)
 80034f8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003508:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_DAC_Start_DMA+0xc4>
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	2b04      	cmp	r3, #4
 8003514:	d005      	beq.n	8003522 <HAL_DAC_Start_DMA+0xce>
 8003516:	e009      	b.n	800352c <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3314      	adds	r3, #20
 800351e:	613b      	str	r3, [r7, #16]
        break;
 8003520:	e009      	b.n	8003536 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3318      	adds	r3, #24
 8003528:	613b      	str	r3, [r7, #16]
        break;
 800352a:	e004      	b.n	8003536 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	331c      	adds	r3, #28
 8003532:	613b      	str	r3, [r7, #16]
        break;
 8003534:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d111      	bne.n	8003560 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800354a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6898      	ldr	r0, [r3, #8]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	f000 f9e5 	bl	8003924 <HAL_DMA_Start_IT>
 800355a:	4603      	mov	r3, r0
 800355c:	75fb      	strb	r3, [r7, #23]
 800355e:	e010      	b.n	8003582 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800356e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68d8      	ldr	r0, [r3, #12]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	f000 f9d3 	bl	8003924 <HAL_DMA_Start_IT>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10c      	bne.n	80035a8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2201      	movs	r2, #1
 800359c:	409a      	lsls	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e005      	b.n	80035b4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f043 0204 	orr.w	r2, r3, #4
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	080036b3 	.word	0x080036b3
 80035c4:	080036d5 	.word	0x080036d5
 80035c8:	080036f1 	.word	0x080036f1
 80035cc:	0800375b 	.word	0x0800375b
 80035d0:	0800377d 	.word	0x0800377d
 80035d4:	08003799 	.word	0x08003799

080035d8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	@ 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_DAC_ConfigChannel+0x1c>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e042      	b.n	80036a6 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	795b      	ldrb	r3, [r3, #5]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_DAC_ConfigChannel+0x2c>
 8003628:	2302      	movs	r3, #2
 800362a:	e03c      	b.n	80036a6 <HAL_DAC_ConfigChannel+0xa6>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2202      	movs	r2, #2
 8003636:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	22c0      	movs	r2, #192	@ 0xc0
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43da      	mvns	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	400a      	ands	r2, r1
 8003696:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80036a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	@ 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036be:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff ff89 	bl	80035d8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	711a      	strb	r2, [r3, #4]
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7fe f896 	bl	8001814 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f043 0204 	orr.w	r2, r3, #4
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7ff ff6e 	bl	80035ec <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	711a      	strb	r2, [r3, #4]
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7ff ffd8 	bl	800371e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	711a      	strb	r2, [r3, #4]
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7ff ffd1 	bl	8003732 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f7ff ffc7 	bl	8003746 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	711a      	strb	r2, [r3, #4]
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037d4:	f7ff fcda 	bl	800318c <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e099      	b.n	8003918 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003804:	e00f      	b.n	8003826 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003806:	f7ff fcc1 	bl	800318c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b05      	cmp	r3, #5
 8003812:	d908      	bls.n	8003826 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2203      	movs	r2, #3
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e078      	b.n	8003918 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e8      	bne.n	8003806 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4b38      	ldr	r3, [pc, #224]	@ (8003920 <HAL_DMA_Init+0x158>)
 8003840:	4013      	ands	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003852:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	2b04      	cmp	r3, #4
 800387e:	d107      	bne.n	8003890 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	4313      	orrs	r3, r2
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0307 	bic.w	r3, r3, #7
 80038a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d117      	bne.n	80038ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00e      	beq.n	80038ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fb01 	bl	8003ed4 <DMA_CheckFifoParam>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2240      	movs	r2, #64	@ 0x40
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80038e6:	2301      	movs	r3, #1
 80038e8:	e016      	b.n	8003918 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fab8 	bl	8003e68 <DMA_CalcBaseAndBitshift>
 80038f8:	4603      	mov	r3, r0
 80038fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	223f      	movs	r2, #63	@ 0x3f
 8003902:	409a      	lsls	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	f010803f 	.word	0xf010803f

08003924 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_DMA_Start_IT+0x26>
 8003946:	2302      	movs	r3, #2
 8003948:	e040      	b.n	80039cc <HAL_DMA_Start_IT+0xa8>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d12f      	bne.n	80039be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 fa4a 	bl	8003e0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397c:	223f      	movs	r2, #63	@ 0x3f
 800397e:	409a      	lsls	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0216 	orr.w	r2, r2, #22
 8003992:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0208 	orr.w	r2, r2, #8
 80039aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e005      	b.n	80039ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
 80039c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039e2:	f7ff fbd3 	bl	800318c <HAL_GetTick>
 80039e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d008      	beq.n	8003a06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2280      	movs	r2, #128	@ 0x80
 80039f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e052      	b.n	8003aac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0216 	bic.w	r2, r2, #22
 8003a14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <HAL_DMA_Abort+0x62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0208 	bic.w	r2, r2, #8
 8003a44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a56:	e013      	b.n	8003a80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a58:	f7ff fb98 	bl	800318c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d90c      	bls.n	8003a80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e015      	b.n	8003aac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e4      	bne.n	8003a58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a92:	223f      	movs	r2, #63	@ 0x3f
 8003a94:	409a      	lsls	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2280      	movs	r2, #128	@ 0x80
 8003acc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e00c      	b.n	8003aec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2205      	movs	r2, #5
 8003ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b04:	4b8e      	ldr	r3, [pc, #568]	@ (8003d40 <HAL_DMA_IRQHandler+0x248>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a8e      	ldr	r2, [pc, #568]	@ (8003d44 <HAL_DMA_IRQHandler+0x24c>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0a9b      	lsrs	r3, r3, #10
 8003b10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b22:	2208      	movs	r2, #8
 8003b24:	409a      	lsls	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01a      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d013      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0204 	bic.w	r2, r2, #4
 8003b4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b50:	2208      	movs	r2, #8
 8003b52:	409a      	lsls	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b68:	2201      	movs	r2, #1
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d012      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b86:	2201      	movs	r2, #1
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b92:	f043 0202 	orr.w	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d012      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	f043 0204 	orr.w	r2, r3, #4
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d043      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d03c      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf2:	2210      	movs	r2, #16
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d018      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d108      	bne.n	8003c28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d024      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
 8003c26:	e01f      	b.n	8003c68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01b      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
 8003c38:	e016      	b.n	8003c68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0208 	bic.w	r2, r2, #8
 8003c56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 808f 	beq.w	8003d98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8087 	beq.w	8003d98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8e:	2220      	movs	r2, #32
 8003c90:	409a      	lsls	r2, r3
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b05      	cmp	r3, #5
 8003ca0:	d136      	bne.n	8003d10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0216 	bic.w	r2, r2, #22
 8003cb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d103      	bne.n	8003cd2 <HAL_DMA_IRQHandler+0x1da>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0208 	bic.w	r2, r2, #8
 8003ce0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce6:	223f      	movs	r2, #63	@ 0x3f
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d07e      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4798      	blx	r3
        }
        return;
 8003d0e:	e079      	b.n	8003e04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01d      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10d      	bne.n	8003d48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d031      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
 8003d3c:	e02c      	b.n	8003d98 <HAL_DMA_IRQHandler+0x2a0>
 8003d3e:	bf00      	nop
 8003d40:	2000000c 	.word	0x2000000c
 8003d44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d023      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4798      	blx	r3
 8003d58:	e01e      	b.n	8003d98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10f      	bne.n	8003d88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0210 	bic.w	r2, r2, #16
 8003d76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d032      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d022      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2205      	movs	r2, #5
 8003db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0201 	bic.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d307      	bcc.n	8003de0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f2      	bne.n	8003dc4 <HAL_DMA_IRQHandler+0x2cc>
 8003dde:	e000      	b.n	8003de2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003de0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
 8003e02:	e000      	b.n	8003e06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e04:	bf00      	nop
    }
  }
}
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b40      	cmp	r3, #64	@ 0x40
 8003e38:	d108      	bne.n	8003e4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e4a:	e007      	b.n	8003e5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	60da      	str	r2, [r3, #12]
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	3b10      	subs	r3, #16
 8003e78:	4a14      	ldr	r2, [pc, #80]	@ (8003ecc <DMA_CalcBaseAndBitshift+0x64>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e82:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d909      	bls.n	8003eaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	1d1a      	adds	r2, r3, #4
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ea8:	e007      	b.n	8003eba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003eb2:	f023 0303 	bic.w	r3, r3, #3
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	aaaaaaab 	.word	0xaaaaaaab
 8003ed0:	0800c9c0 	.word	0x0800c9c0

08003ed4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d11f      	bne.n	8003f2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d856      	bhi.n	8003fa2 <DMA_CheckFifoParam+0xce>
 8003ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8003efc <DMA_CheckFifoParam+0x28>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f0d 	.word	0x08003f0d
 8003f00:	08003f1f 	.word	0x08003f1f
 8003f04:	08003f0d 	.word	0x08003f0d
 8003f08:	08003fa3 	.word	0x08003fa3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d046      	beq.n	8003fa6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1c:	e043      	b.n	8003fa6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f26:	d140      	bne.n	8003faa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2c:	e03d      	b.n	8003faa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f36:	d121      	bne.n	8003f7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d837      	bhi.n	8003fae <DMA_CheckFifoParam+0xda>
 8003f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f44 <DMA_CheckFifoParam+0x70>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f55 	.word	0x08003f55
 8003f48:	08003f5b 	.word	0x08003f5b
 8003f4c:	08003f55 	.word	0x08003f55
 8003f50:	08003f6d 	.word	0x08003f6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      break;
 8003f58:	e030      	b.n	8003fbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d025      	beq.n	8003fb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f6a:	e022      	b.n	8003fb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f74:	d11f      	bne.n	8003fb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f7a:	e01c      	b.n	8003fb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d903      	bls.n	8003f8a <DMA_CheckFifoParam+0xb6>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d003      	beq.n	8003f90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f88:	e018      	b.n	8003fbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8e:	e015      	b.n	8003fbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00e      	beq.n	8003fba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa0:	e00b      	b.n	8003fba <DMA_CheckFifoParam+0xe6>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e00a      	b.n	8003fbc <DMA_CheckFifoParam+0xe8>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e008      	b.n	8003fbc <DMA_CheckFifoParam+0xe8>
      break;
 8003faa:	bf00      	nop
 8003fac:	e006      	b.n	8003fbc <DMA_CheckFifoParam+0xe8>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e004      	b.n	8003fbc <DMA_CheckFifoParam+0xe8>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e002      	b.n	8003fbc <DMA_CheckFifoParam+0xe8>
      break;   
 8003fb6:	bf00      	nop
 8003fb8:	e000      	b.n	8003fbc <DMA_CheckFifoParam+0xe8>
      break;
 8003fba:	bf00      	nop
    }
  } 
  
  return status; 
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop

08003fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	@ 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	e16b      	b.n	80042c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fe8:	2201      	movs	r2, #1
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	429a      	cmp	r2, r3
 8004002:	f040 815a 	bne.w	80042ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b01      	cmp	r3, #1
 8004010:	d005      	beq.n	800401e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800401a:	2b02      	cmp	r3, #2
 800401c:	d130      	bne.n	8004080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	2203      	movs	r2, #3
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004054:	2201      	movs	r2, #1
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 0201 	and.w	r2, r3, #1
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b03      	cmp	r3, #3
 800408a:	d017      	beq.n	80040bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	2203      	movs	r2, #3
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4013      	ands	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d123      	bne.n	8004110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	08da      	lsrs	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3208      	adds	r2, #8
 80040d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	220f      	movs	r2, #15
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	08da      	lsrs	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3208      	adds	r2, #8
 800410a:	69b9      	ldr	r1, [r7, #24]
 800410c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	2203      	movs	r2, #3
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 0203 	and.w	r2, r3, #3
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80b4 	beq.w	80042ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	4b60      	ldr	r3, [pc, #384]	@ (80042d8 <HAL_GPIO_Init+0x30c>)
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	4a5f      	ldr	r2, [pc, #380]	@ (80042d8 <HAL_GPIO_Init+0x30c>)
 800415c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004160:	6453      	str	r3, [r2, #68]	@ 0x44
 8004162:	4b5d      	ldr	r3, [pc, #372]	@ (80042d8 <HAL_GPIO_Init+0x30c>)
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800416e:	4a5b      	ldr	r2, [pc, #364]	@ (80042dc <HAL_GPIO_Init+0x310>)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	3302      	adds	r3, #2
 8004176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	220f      	movs	r2, #15
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4013      	ands	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a52      	ldr	r2, [pc, #328]	@ (80042e0 <HAL_GPIO_Init+0x314>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d02b      	beq.n	80041f2 <HAL_GPIO_Init+0x226>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a51      	ldr	r2, [pc, #324]	@ (80042e4 <HAL_GPIO_Init+0x318>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d025      	beq.n	80041ee <HAL_GPIO_Init+0x222>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a50      	ldr	r2, [pc, #320]	@ (80042e8 <HAL_GPIO_Init+0x31c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01f      	beq.n	80041ea <HAL_GPIO_Init+0x21e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4f      	ldr	r2, [pc, #316]	@ (80042ec <HAL_GPIO_Init+0x320>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d019      	beq.n	80041e6 <HAL_GPIO_Init+0x21a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a4e      	ldr	r2, [pc, #312]	@ (80042f0 <HAL_GPIO_Init+0x324>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <HAL_GPIO_Init+0x216>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a4d      	ldr	r2, [pc, #308]	@ (80042f4 <HAL_GPIO_Init+0x328>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00d      	beq.n	80041de <HAL_GPIO_Init+0x212>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a4c      	ldr	r2, [pc, #304]	@ (80042f8 <HAL_GPIO_Init+0x32c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d007      	beq.n	80041da <HAL_GPIO_Init+0x20e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a4b      	ldr	r2, [pc, #300]	@ (80042fc <HAL_GPIO_Init+0x330>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d101      	bne.n	80041d6 <HAL_GPIO_Init+0x20a>
 80041d2:	2307      	movs	r3, #7
 80041d4:	e00e      	b.n	80041f4 <HAL_GPIO_Init+0x228>
 80041d6:	2308      	movs	r3, #8
 80041d8:	e00c      	b.n	80041f4 <HAL_GPIO_Init+0x228>
 80041da:	2306      	movs	r3, #6
 80041dc:	e00a      	b.n	80041f4 <HAL_GPIO_Init+0x228>
 80041de:	2305      	movs	r3, #5
 80041e0:	e008      	b.n	80041f4 <HAL_GPIO_Init+0x228>
 80041e2:	2304      	movs	r3, #4
 80041e4:	e006      	b.n	80041f4 <HAL_GPIO_Init+0x228>
 80041e6:	2303      	movs	r3, #3
 80041e8:	e004      	b.n	80041f4 <HAL_GPIO_Init+0x228>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e002      	b.n	80041f4 <HAL_GPIO_Init+0x228>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <HAL_GPIO_Init+0x228>
 80041f2:	2300      	movs	r3, #0
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	f002 0203 	and.w	r2, r2, #3
 80041fa:	0092      	lsls	r2, r2, #2
 80041fc:	4093      	lsls	r3, r2
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4313      	orrs	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004204:	4935      	ldr	r1, [pc, #212]	@ (80042dc <HAL_GPIO_Init+0x310>)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	089b      	lsrs	r3, r3, #2
 800420a:	3302      	adds	r3, #2
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004212:	4b3b      	ldr	r3, [pc, #236]	@ (8004300 <HAL_GPIO_Init+0x334>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	43db      	mvns	r3, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4013      	ands	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004236:	4a32      	ldr	r2, [pc, #200]	@ (8004300 <HAL_GPIO_Init+0x334>)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800423c:	4b30      	ldr	r3, [pc, #192]	@ (8004300 <HAL_GPIO_Init+0x334>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	43db      	mvns	r3, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4013      	ands	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004260:	4a27      	ldr	r2, [pc, #156]	@ (8004300 <HAL_GPIO_Init+0x334>)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004266:	4b26      	ldr	r3, [pc, #152]	@ (8004300 <HAL_GPIO_Init+0x334>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	43db      	mvns	r3, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4013      	ands	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800428a:	4a1d      	ldr	r2, [pc, #116]	@ (8004300 <HAL_GPIO_Init+0x334>)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004290:	4b1b      	ldr	r3, [pc, #108]	@ (8004300 <HAL_GPIO_Init+0x334>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042b4:	4a12      	ldr	r2, [pc, #72]	@ (8004300 <HAL_GPIO_Init+0x334>)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3301      	adds	r3, #1
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b0f      	cmp	r3, #15
 80042c4:	f67f ae90 	bls.w	8003fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	3724      	adds	r7, #36	@ 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40013800 	.word	0x40013800
 80042e0:	40020000 	.word	0x40020000
 80042e4:	40020400 	.word	0x40020400
 80042e8:	40020800 	.word	0x40020800
 80042ec:	40020c00 	.word	0x40020c00
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40021400 	.word	0x40021400
 80042f8:	40021800 	.word	0x40021800
 80042fc:	40021c00 	.word	0x40021c00
 8004300:	40013c00 	.word	0x40013c00

08004304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	807b      	strh	r3, [r7, #2]
 8004310:	4613      	mov	r3, r2
 8004312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004314:	787b      	ldrb	r3, [r7, #1]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800431a:	887a      	ldrh	r2, [r7, #2]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004320:	e003      	b.n	800432a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004322:	887b      	ldrh	r3, [r7, #2]
 8004324:	041a      	lsls	r2, r3, #16
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	619a      	str	r2, [r3, #24]
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e267      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d075      	beq.n	8004442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004356:	4b88      	ldr	r3, [pc, #544]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b04      	cmp	r3, #4
 8004360:	d00c      	beq.n	800437c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004362:	4b85      	ldr	r3, [pc, #532]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800436a:	2b08      	cmp	r3, #8
 800436c:	d112      	bne.n	8004394 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436e:	4b82      	ldr	r3, [pc, #520]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800437a:	d10b      	bne.n	8004394 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	4b7e      	ldr	r3, [pc, #504]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d05b      	beq.n	8004440 <HAL_RCC_OscConfig+0x108>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d157      	bne.n	8004440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e242      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800439c:	d106      	bne.n	80043ac <HAL_RCC_OscConfig+0x74>
 800439e:	4b76      	ldr	r3, [pc, #472]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a75      	ldr	r2, [pc, #468]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e01d      	b.n	80043e8 <HAL_RCC_OscConfig+0xb0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x98>
 80043b6:	4b70      	ldr	r3, [pc, #448]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a6f      	ldr	r2, [pc, #444]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a6c      	ldr	r2, [pc, #432]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_OscConfig+0xb0>
 80043d0:	4b69      	ldr	r3, [pc, #420]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a68      	ldr	r2, [pc, #416]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b66      	ldr	r3, [pc, #408]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a65      	ldr	r2, [pc, #404]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d013      	beq.n	8004418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fe fecc 	bl	800318c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fe fec8 	bl	800318c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	@ 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e207      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b5b      	ldr	r3, [pc, #364]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0xc0>
 8004416:	e014      	b.n	8004442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fe feb8 	bl	800318c <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004420:	f7fe feb4 	bl	800318c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	@ 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e1f3      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	4b51      	ldr	r3, [pc, #324]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0xe8>
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d063      	beq.n	8004516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800444e:	4b4a      	ldr	r3, [pc, #296]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445a:	4b47      	ldr	r3, [pc, #284]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004462:	2b08      	cmp	r3, #8
 8004464:	d11c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004466:	4b44      	ldr	r3, [pc, #272]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d116      	bne.n	80044a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004472:	4b41      	ldr	r3, [pc, #260]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_RCC_OscConfig+0x152>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d001      	beq.n	800448a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e1c7      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448a:	4b3b      	ldr	r3, [pc, #236]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4937      	ldr	r1, [pc, #220]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800449a:	4313      	orrs	r3, r2
 800449c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449e:	e03a      	b.n	8004516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d020      	beq.n	80044ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a8:	4b34      	ldr	r3, [pc, #208]	@ (800457c <HAL_RCC_OscConfig+0x244>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fe fe6d 	bl	800318c <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b6:	f7fe fe69 	bl	800318c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e1a8      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d4:	4b28      	ldr	r3, [pc, #160]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4925      	ldr	r1, [pc, #148]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]
 80044e8:	e015      	b.n	8004516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ea:	4b24      	ldr	r3, [pc, #144]	@ (800457c <HAL_RCC_OscConfig+0x244>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fe fe4c 	bl	800318c <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f8:	f7fe fe48 	bl	800318c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e187      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450a:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d036      	beq.n	8004590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d016      	beq.n	8004558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452a:	4b15      	ldr	r3, [pc, #84]	@ (8004580 <HAL_RCC_OscConfig+0x248>)
 800452c:	2201      	movs	r2, #1
 800452e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004530:	f7fe fe2c 	bl	800318c <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004538:	f7fe fe28 	bl	800318c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e167      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454a:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800454c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0x200>
 8004556:	e01b      	b.n	8004590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004558:	4b09      	ldr	r3, [pc, #36]	@ (8004580 <HAL_RCC_OscConfig+0x248>)
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455e:	f7fe fe15 	bl	800318c <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004564:	e00e      	b.n	8004584 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004566:	f7fe fe11 	bl	800318c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d907      	bls.n	8004584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e150      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
 8004578:	40023800 	.word	0x40023800
 800457c:	42470000 	.word	0x42470000
 8004580:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004584:	4b88      	ldr	r3, [pc, #544]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ea      	bne.n	8004566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8097 	beq.w	80046cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a2:	4b81      	ldr	r3, [pc, #516]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10f      	bne.n	80045ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	4b7d      	ldr	r3, [pc, #500]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	4a7c      	ldr	r2, [pc, #496]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80045b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80045be:	4b7a      	ldr	r3, [pc, #488]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	60bb      	str	r3, [r7, #8]
 80045c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ca:	2301      	movs	r3, #1
 80045cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ce:	4b77      	ldr	r3, [pc, #476]	@ (80047ac <HAL_RCC_OscConfig+0x474>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d118      	bne.n	800460c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045da:	4b74      	ldr	r3, [pc, #464]	@ (80047ac <HAL_RCC_OscConfig+0x474>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a73      	ldr	r2, [pc, #460]	@ (80047ac <HAL_RCC_OscConfig+0x474>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e6:	f7fe fdd1 	bl	800318c <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ee:	f7fe fdcd 	bl	800318c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e10c      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004600:	4b6a      	ldr	r3, [pc, #424]	@ (80047ac <HAL_RCC_OscConfig+0x474>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x2ea>
 8004614:	4b64      	ldr	r3, [pc, #400]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004618:	4a63      	ldr	r2, [pc, #396]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004620:	e01c      	b.n	800465c <HAL_RCC_OscConfig+0x324>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b05      	cmp	r3, #5
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x30c>
 800462a:	4b5f      	ldr	r3, [pc, #380]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	4a5e      	ldr	r2, [pc, #376]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004630:	f043 0304 	orr.w	r3, r3, #4
 8004634:	6713      	str	r3, [r2, #112]	@ 0x70
 8004636:	4b5c      	ldr	r3, [pc, #368]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463a:	4a5b      	ldr	r2, [pc, #364]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	6713      	str	r3, [r2, #112]	@ 0x70
 8004642:	e00b      	b.n	800465c <HAL_RCC_OscConfig+0x324>
 8004644:	4b58      	ldr	r3, [pc, #352]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004648:	4a57      	ldr	r2, [pc, #348]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004650:	4b55      	ldr	r3, [pc, #340]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004654:	4a54      	ldr	r2, [pc, #336]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004656:	f023 0304 	bic.w	r3, r3, #4
 800465a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d015      	beq.n	8004690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fe fd92 	bl	800318c <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	e00a      	b.n	8004682 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fe fd8e 	bl	800318c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e0cb      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004682:	4b49      	ldr	r3, [pc, #292]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0ee      	beq.n	800466c <HAL_RCC_OscConfig+0x334>
 800468e:	e014      	b.n	80046ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004690:	f7fe fd7c 	bl	800318c <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004696:	e00a      	b.n	80046ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fe fd78 	bl	800318c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e0b5      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ae:	4b3e      	ldr	r3, [pc, #248]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1ee      	bne.n	8004698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d105      	bne.n	80046cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c0:	4b39      	ldr	r3, [pc, #228]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	4a38      	ldr	r2, [pc, #224]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80046c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80a1 	beq.w	8004818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046d6:	4b34      	ldr	r3, [pc, #208]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d05c      	beq.n	800479c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d141      	bne.n	800476e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ea:	4b31      	ldr	r3, [pc, #196]	@ (80047b0 <HAL_RCC_OscConfig+0x478>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fe fd4c 	bl	800318c <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fe fd48 	bl	800318c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e087      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470a:	4b27      	ldr	r3, [pc, #156]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	019b      	lsls	r3, r3, #6
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	3b01      	subs	r3, #1
 8004730:	041b      	lsls	r3, r3, #16
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	491b      	ldr	r1, [pc, #108]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004740:	4b1b      	ldr	r3, [pc, #108]	@ (80047b0 <HAL_RCC_OscConfig+0x478>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fe fd21 	bl	800318c <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474e:	f7fe fd1d 	bl	800318c <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e05c      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004760:	4b11      	ldr	r3, [pc, #68]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x416>
 800476c:	e054      	b.n	8004818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476e:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <HAL_RCC_OscConfig+0x478>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fe fd0a 	bl	800318c <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477c:	f7fe fd06 	bl	800318c <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e045      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478e:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x444>
 800479a:	e03d      	b.n	8004818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e038      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40007000 	.word	0x40007000
 80047b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004824 <HAL_RCC_OscConfig+0x4ec>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d028      	beq.n	8004814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d121      	bne.n	8004814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	429a      	cmp	r2, r3
 80047dc:	d11a      	bne.n	8004814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d111      	bne.n	8004814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	3b01      	subs	r3, #1
 80047fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d107      	bne.n	8004814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800

08004828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0cc      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800483c:	4b68      	ldr	r3, [pc, #416]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d90c      	bls.n	8004864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b65      	ldr	r3, [pc, #404]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	4b63      	ldr	r3, [pc, #396]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0b8      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d020      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800487c:	4b59      	ldr	r3, [pc, #356]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4a58      	ldr	r2, [pc, #352]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004886:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004894:	4b53      	ldr	r3, [pc, #332]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a52      	ldr	r2, [pc, #328]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800489e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a0:	4b50      	ldr	r3, [pc, #320]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	494d      	ldr	r1, [pc, #308]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d044      	beq.n	8004948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	4b47      	ldr	r3, [pc, #284]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d119      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e07f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d003      	beq.n	80048e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e6:	4b3f      	ldr	r3, [pc, #252]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e06f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f6:	4b3b      	ldr	r3, [pc, #236]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e067      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004906:	4b37      	ldr	r3, [pc, #220]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f023 0203 	bic.w	r2, r3, #3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4934      	ldr	r1, [pc, #208]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	4313      	orrs	r3, r2
 8004916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004918:	f7fe fc38 	bl	800318c <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	e00a      	b.n	8004936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004920:	f7fe fc34 	bl	800318c <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e04f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004936:	4b2b      	ldr	r3, [pc, #172]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 020c 	and.w	r2, r3, #12
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	429a      	cmp	r2, r3
 8004946:	d1eb      	bne.n	8004920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004948:	4b25      	ldr	r3, [pc, #148]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d20c      	bcs.n	8004970 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b22      	ldr	r3, [pc, #136]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b20      	ldr	r3, [pc, #128]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e032      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800497c:	4b19      	ldr	r3, [pc, #100]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4916      	ldr	r1, [pc, #88]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499a:	4b12      	ldr	r3, [pc, #72]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	490e      	ldr	r1, [pc, #56]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ae:	f000 f821 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 80049b2:	4602      	mov	r2, r0
 80049b4:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	490a      	ldr	r1, [pc, #40]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c0>)
 80049c0:	5ccb      	ldrb	r3, [r1, r3]
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	4a09      	ldr	r2, [pc, #36]	@ (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049ca:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fb98 	bl	8003104 <HAL_InitTick>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40023c00 	.word	0x40023c00
 80049e4:	40023800 	.word	0x40023800
 80049e8:	0800c9a8 	.word	0x0800c9a8
 80049ec:	2000000c 	.word	0x2000000c
 80049f0:	20000010 	.word	0x20000010

080049f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f8:	b094      	sub	sp, #80	@ 0x50
 80049fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a0c:	4b79      	ldr	r3, [pc, #484]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 030c 	and.w	r3, r3, #12
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d00d      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x40>
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	f200 80e1 	bhi.w	8004be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x34>
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d003      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a26:	e0db      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a28:	4b73      	ldr	r3, [pc, #460]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a2c:	e0db      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a2e:	4b73      	ldr	r3, [pc, #460]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x208>)
 8004a30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a32:	e0d8      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a34:	4b6f      	ldr	r3, [pc, #444]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d063      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	099b      	lsrs	r3, r3, #6
 8004a50:	2200      	movs	r2, #0
 8004a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a5e:	2300      	movs	r3, #0
 8004a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a66:	4622      	mov	r2, r4
 8004a68:	462b      	mov	r3, r5
 8004a6a:	f04f 0000 	mov.w	r0, #0
 8004a6e:	f04f 0100 	mov.w	r1, #0
 8004a72:	0159      	lsls	r1, r3, #5
 8004a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a78:	0150      	lsls	r0, r2, #5
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4621      	mov	r1, r4
 8004a80:	1a51      	subs	r1, r2, r1
 8004a82:	6139      	str	r1, [r7, #16]
 8004a84:	4629      	mov	r1, r5
 8004a86:	eb63 0301 	sbc.w	r3, r3, r1
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a98:	4659      	mov	r1, fp
 8004a9a:	018b      	lsls	r3, r1, #6
 8004a9c:	4651      	mov	r1, sl
 8004a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aa2:	4651      	mov	r1, sl
 8004aa4:	018a      	lsls	r2, r1, #6
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8004aac:	4659      	mov	r1, fp
 8004aae:	eb63 0901 	sbc.w	r9, r3, r1
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac6:	4690      	mov	r8, r2
 8004ac8:	4699      	mov	r9, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	eb18 0303 	adds.w	r3, r8, r3
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	462b      	mov	r3, r5
 8004ad4:	eb49 0303 	adc.w	r3, r9, r3
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	024b      	lsls	r3, r1, #9
 8004aea:	4621      	mov	r1, r4
 8004aec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004af0:	4621      	mov	r1, r4
 8004af2:	024a      	lsls	r2, r1, #9
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004afa:	2200      	movs	r2, #0
 8004afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b04:	f7fb fb60 	bl	80001c8 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b10:	e058      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b12:	4b38      	ldr	r3, [pc, #224]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	099b      	lsrs	r3, r3, #6
 8004b18:	2200      	movs	r2, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b22:	623b      	str	r3, [r7, #32]
 8004b24:	2300      	movs	r3, #0
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	f04f 0000 	mov.w	r0, #0
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	0159      	lsls	r1, r3, #5
 8004b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b3e:	0150      	lsls	r0, r2, #5
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4641      	mov	r1, r8
 8004b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b64:	ebb2 040a 	subs.w	r4, r2, sl
 8004b68:	eb63 050b 	sbc.w	r5, r3, fp
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	00eb      	lsls	r3, r5, #3
 8004b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b7a:	00e2      	lsls	r2, r4, #3
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	461d      	mov	r5, r3
 8004b80:	4643      	mov	r3, r8
 8004b82:	18e3      	adds	r3, r4, r3
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	464b      	mov	r3, r9
 8004b88:	eb45 0303 	adc.w	r3, r5, r3
 8004b8c:	607b      	str	r3, [r7, #4]
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	028b      	lsls	r3, r1, #10
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	028a      	lsls	r2, r1, #10
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bae:	2200      	movs	r2, #0
 8004bb0:	61bb      	str	r3, [r7, #24]
 8004bb2:	61fa      	str	r2, [r7, #28]
 8004bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb8:	f7fb fb06 	bl	80001c8 <__aeabi_uldivmod>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	3301      	adds	r3, #1
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bde:	e002      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be0:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004be2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3750      	adds	r7, #80	@ 0x50
 8004bec:	46bd      	mov	sp, r7
 8004bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	00f42400 	.word	0x00f42400
 8004bfc:	007a1200 	.word	0x007a1200

08004c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c04:	4b03      	ldr	r3, [pc, #12]	@ (8004c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c06:	681b      	ldr	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	2000000c 	.word	0x2000000c

08004c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c1c:	f7ff fff0 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0a9b      	lsrs	r3, r3, #10
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4903      	ldr	r1, [pc, #12]	@ (8004c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	0800c9b8 	.word	0x0800c9b8

08004c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c44:	f7ff ffdc 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	0b5b      	lsrs	r3, r3, #13
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	4903      	ldr	r1, [pc, #12]	@ (8004c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c56:	5ccb      	ldrb	r3, [r1, r3]
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40023800 	.word	0x40023800
 8004c64:	0800c9b8 	.word	0x0800c9b8

08004c68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e022      	b.n	8004cc0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d105      	bne.n	8004c92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fd ffb7 	bl	8002c00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2203      	movs	r2, #3
 8004c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f814 	bl	8004cc8 <HAL_SD_InitCard>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e00a      	b.n	8004cc0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004cc8:	b5b0      	push	{r4, r5, r7, lr}
 8004cca:	b08e      	sub	sp, #56	@ 0x38
 8004ccc:	af04      	add	r7, sp, #16
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004ce4:	2376      	movs	r3, #118	@ 0x76
 8004ce6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681d      	ldr	r5, [r3, #0]
 8004cec:	466c      	mov	r4, sp
 8004cee:	f107 0314 	add.w	r3, r7, #20
 8004cf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004cfa:	f107 0308 	add.w	r3, r7, #8
 8004cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d00:	4628      	mov	r0, r5
 8004d02:	f003 fb59 	bl	80083b8 <SDIO_Init>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e04f      	b.n	8004db8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004d18:	4b29      	ldr	r3, [pc, #164]	@ (8004dc0 <HAL_SD_InitCard+0xf8>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f003 fb91 	bl	800844a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004d28:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <HAL_SD_InitCard+0xf8>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004d2e:	2002      	movs	r0, #2
 8004d30:	f7fe fa38 	bl	80031a4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fe79 	bl	8005a2c <SD_PowerON>
 8004d3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e02e      	b.n	8004db8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fd98 	bl	8005890 <SD_InitCard>
 8004d60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e01b      	b.n	8004db8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f003 fbf0 	bl	800856e <SDMMC_CmdBlockLength>
 8004d8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00f      	beq.n	8004db6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc4 <HAL_SD_InitCard+0xfc>)
 8004d9c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3728      	adds	r7, #40	@ 0x28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8004dc0:	422580a0 	.word	0x422580a0
 8004dc4:	004005ff 	.word	0x004005ff

08004dc8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b092      	sub	sp, #72	@ 0x48
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004dd6:	f7fe f9d9 	bl	800318c <HAL_GetTick>
 8004dda:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e1c5      	b.n	8005186 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	f040 81b8 	bne.w	8005178 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d907      	bls.n	8004e2c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e20:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e1ac      	b.n	8005186 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2203      	movs	r2, #3
 8004e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d002      	beq.n	8004e4a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e46:	025b      	lsls	r3, r3, #9
 8004e48:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	025b      	lsls	r3, r3, #9
 8004e54:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004e56:	2390      	movs	r3, #144	@ 0x90
 8004e58:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004e62:	2301      	movs	r3, #1
 8004e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f107 0214 	add.w	r2, r7, #20
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f003 fb50 	bl	8008516 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d90a      	bls.n	8004e92 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f003 fbb4 	bl	80085f6 <SDMMC_CmdReadMultiBlock>
 8004e8e:	6478      	str	r0, [r7, #68]	@ 0x44
 8004e90:	e009      	b.n	8004ea6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f003 fb87 	bl	80085b2 <SDMMC_CmdReadSingleBlock>
 8004ea4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d012      	beq.n	8004ed2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a7e      	ldr	r2, [pc, #504]	@ (80050ac <HAL_SD_ReadBlocks+0x2e4>)
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e159      	b.n	8005186 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004ed6:	e061      	b.n	8004f9c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d03c      	beq.n	8004f60 <HAL_SD_ReadBlocks+0x198>
 8004ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d039      	beq.n	8004f60 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004eec:	2300      	movs	r3, #0
 8004eee:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ef0:	e033      	b.n	8004f5a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f003 fa89 	bl	800840e <SDIO_ReadFIFO>
 8004efc:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f04:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f08:	3301      	adds	r3, #1
 8004f0a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1e:	3301      	adds	r3, #1
 8004f20:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f24:	3b01      	subs	r3, #1
 8004f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2a:	0c1b      	lsrs	r3, r3, #16
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f34:	3301      	adds	r3, #1
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f40:	0e1b      	lsrs	r3, r3, #24
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f46:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f50:	3b01      	subs	r3, #1
 8004f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8004f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f56:	3301      	adds	r3, #1
 8004f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f5c:	2b07      	cmp	r3, #7
 8004f5e:	d9c8      	bls.n	8004ef2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004f60:	f7fe f914 	bl	800318c <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d902      	bls.n	8004f76 <HAL_SD_ReadBlocks+0x1ae>
 8004f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d112      	bne.n	8004f9c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80050ac <HAL_SD_ReadBlocks+0x2e4>)
 8004f7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f82:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e0f4      	b.n	8005186 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fa2:	f240 332a 	movw	r3, #810	@ 0x32a
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d095      	beq.n	8004ed8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d022      	beq.n	8005000 <HAL_SD_ReadBlocks+0x238>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d91f      	bls.n	8005000 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d01b      	beq.n	8005000 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f003 fb79 	bl	80086c4 <SDMMC_CmdStopTransfer>
 8004fd2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d012      	beq.n	8005000 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a33      	ldr	r2, [pc, #204]	@ (80050ac <HAL_SD_ReadBlocks+0x2e4>)
 8004fe0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0c2      	b.n	8005186 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_SD_ReadBlocks+0x254>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005018:	2b00      	cmp	r3, #0
 800501a:	d012      	beq.n	8005042 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a22      	ldr	r2, [pc, #136]	@ (80050ac <HAL_SD_ReadBlocks+0x2e4>)
 8005022:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005028:	f043 0208 	orr.w	r2, r3, #8
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e0a1      	b.n	8005186 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d012      	beq.n	8005076 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a15      	ldr	r2, [pc, #84]	@ (80050ac <HAL_SD_ReadBlocks+0x2e4>)
 8005056:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505c:	f043 0202 	orr.w	r2, r3, #2
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e087      	b.n	8005186 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d064      	beq.n	800514e <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a08      	ldr	r2, [pc, #32]	@ (80050ac <HAL_SD_ReadBlocks+0x2e4>)
 800508a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005090:	f043 0220 	orr.w	r2, r3, #32
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e06d      	b.n	8005186 <HAL_SD_ReadBlocks+0x3be>
 80050aa:	bf00      	nop
 80050ac:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f003 f9aa 	bl	800840e <SDIO_ReadFIFO>
 80050ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80050bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80050c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c6:	3301      	adds	r3, #1
 80050c8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80050ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050cc:	3b01      	subs	r3, #1
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80050d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d2:	0a1b      	lsrs	r3, r3, #8
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80050da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050dc:	3301      	adds	r3, #1
 80050de:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80050e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e2:	3b01      	subs	r3, #1
 80050e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80050e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e8:	0c1b      	lsrs	r3, r3, #16
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80050f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f2:	3301      	adds	r3, #1
 80050f4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80050f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f8:	3b01      	subs	r3, #1
 80050fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80050fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fe:	0e1b      	lsrs	r3, r3, #24
 8005100:	b2da      	uxtb	r2, r3
 8005102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005104:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005108:	3301      	adds	r3, #1
 800510a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800510c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510e:	3b01      	subs	r3, #1
 8005110:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005112:	f7fe f83b 	bl	800318c <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800511e:	429a      	cmp	r2, r3
 8005120:	d902      	bls.n	8005128 <HAL_SD_ReadBlocks+0x360>
 8005122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005124:	2b00      	cmp	r3, #0
 8005126:	d112      	bne.n	800514e <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a18      	ldr	r2, [pc, #96]	@ (8005190 <HAL_SD_ReadBlocks+0x3c8>)
 800512e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e01b      	b.n	8005186 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_SD_ReadBlocks+0x39a>
 800515c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1a6      	bne.n	80050b0 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f240 523a 	movw	r2, #1338	@ 0x53a
 800516a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e006      	b.n	8005186 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
  }
}
 8005186:	4618      	mov	r0, r3
 8005188:	3748      	adds	r7, #72	@ 0x48
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	004005ff 	.word	0x004005ff

08005194 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b092      	sub	sp, #72	@ 0x48
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80051a2:	f7fd fff3 	bl	800318c <HAL_GetTick>
 80051a6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d107      	bne.n	80051c6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e16d      	b.n	80054a2 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	f040 8160 	bne.w	8005494 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80051da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	441a      	add	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d907      	bls.n	80051f8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e154      	b.n	80054a2 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2203      	movs	r2, #3
 80051fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2200      	movs	r2, #0
 8005206:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520c:	2b01      	cmp	r3, #1
 800520e:	d002      	beq.n	8005216 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005212:	025b      	lsls	r3, r3, #9
 8005214:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005216:	f04f 33ff 	mov.w	r3, #4294967295
 800521a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	025b      	lsls	r3, r3, #9
 8005220:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005222:	2390      	movs	r3, #144	@ 0x90
 8005224:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005226:	2300      	movs	r3, #0
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800522a:	2300      	movs	r3, #0
 800522c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800522e:	2301      	movs	r3, #1
 8005230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f107 0218 	add.w	r2, r7, #24
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f003 f96a 	bl	8008516 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d90a      	bls.n	800525e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005254:	4618      	mov	r0, r3
 8005256:	f003 fa12 	bl	800867e <SDMMC_CmdWriteMultiBlock>
 800525a:	6478      	str	r0, [r7, #68]	@ 0x44
 800525c:	e009      	b.n	8005272 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2210      	movs	r2, #16
 8005262:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800526a:	4618      	mov	r0, r3
 800526c:	f003 f9e5 	bl	800863a <SDMMC_CmdWriteSingleBlock>
 8005270:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005274:	2b00      	cmp	r3, #0
 8005276:	d012      	beq.n	800529e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a8b      	ldr	r2, [pc, #556]	@ (80054ac <HAL_SD_WriteBlocks+0x318>)
 800527e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005286:	431a      	orrs	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e101      	b.n	80054a2 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80052a2:	e065      	b.n	8005370 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d040      	beq.n	8005334 <HAL_SD_WriteBlocks+0x1a0>
 80052b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d03d      	beq.n	8005334 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80052b8:	2300      	movs	r3, #0
 80052ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80052bc:	e037      	b.n	800532e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80052be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80052c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c6:	3301      	adds	r3, #1
 80052c8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80052ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052cc:	3b01      	subs	r3, #1
 80052ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80052d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	021a      	lsls	r2, r3, #8
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80052dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052de:	3301      	adds	r3, #1
 80052e0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80052e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052e4:	3b01      	subs	r3, #1
 80052e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80052e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	041a      	lsls	r2, r3, #16
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80052f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f6:	3301      	adds	r3, #1
 80052f8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80052fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052fc:	3b01      	subs	r3, #1
 80052fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	061a      	lsls	r2, r3, #24
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800530c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530e:	3301      	adds	r3, #1
 8005310:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005314:	3b01      	subs	r3, #1
 8005316:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f107 0214 	add.w	r2, r7, #20
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f003 f880 	bl	8008428 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800532a:	3301      	adds	r3, #1
 800532c:	643b      	str	r3, [r7, #64]	@ 0x40
 800532e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005330:	2b07      	cmp	r3, #7
 8005332:	d9c4      	bls.n	80052be <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005334:	f7fd ff2a 	bl	800318c <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005340:	429a      	cmp	r2, r3
 8005342:	d902      	bls.n	800534a <HAL_SD_WriteBlocks+0x1b6>
 8005344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005346:	2b00      	cmp	r3, #0
 8005348:	d112      	bne.n	8005370 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a57      	ldr	r2, [pc, #348]	@ (80054ac <HAL_SD_WriteBlocks+0x318>)
 8005350:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e098      	b.n	80054a2 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005376:	f240 331a 	movw	r3, #794	@ 0x31a
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d091      	beq.n	80052a4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d022      	beq.n	80053d4 <HAL_SD_WriteBlocks+0x240>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d91f      	bls.n	80053d4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005398:	2b03      	cmp	r3, #3
 800539a:	d01b      	beq.n	80053d4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f003 f98f 	bl	80086c4 <SDMMC_CmdStopTransfer>
 80053a6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80053a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d012      	beq.n	80053d4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a3e      	ldr	r2, [pc, #248]	@ (80054ac <HAL_SD_WriteBlocks+0x318>)
 80053b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053bc:	431a      	orrs	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e066      	b.n	80054a2 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <HAL_SD_WriteBlocks+0x25c>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d012      	beq.n	8005416 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2d      	ldr	r2, [pc, #180]	@ (80054ac <HAL_SD_WriteBlocks+0x318>)
 80053f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fc:	f043 0208 	orr.w	r2, r3, #8
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e045      	b.n	80054a2 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d012      	beq.n	800544a <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a20      	ldr	r2, [pc, #128]	@ (80054ac <HAL_SD_WriteBlocks+0x318>)
 800542a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005430:	f043 0202 	orr.w	r2, r3, #2
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e02b      	b.n	80054a2 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a13      	ldr	r2, [pc, #76]	@ (80054ac <HAL_SD_WriteBlocks+0x318>)
 800545e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005464:	f043 0210 	orr.w	r2, r3, #16
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e011      	b.n	80054a2 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005486:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	e006      	b.n	80054a2 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005498:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
  }
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3748      	adds	r7, #72	@ 0x48
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	004005ff 	.word	0x004005ff

080054b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054be:	0f9b      	lsrs	r3, r3, #30
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ca:	0e9b      	lsrs	r3, r3, #26
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054dc:	0e1b      	lsrs	r3, r3, #24
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ee:	0c1b      	lsrs	r3, r3, #16
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005506:	b2da      	uxtb	r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005510:	0d1b      	lsrs	r3, r3, #20
 8005512:	b29a      	uxth	r2, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	b2da      	uxtb	r2, r3
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800552e:	0bdb      	lsrs	r3, r3, #15
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	b2da      	uxtb	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005540:	0b9b      	lsrs	r3, r3, #14
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	b2da      	uxtb	r2, r3
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005552:	0b5b      	lsrs	r3, r3, #13
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	b2da      	uxtb	r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005564:	0b1b      	lsrs	r3, r3, #12
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	b2da      	uxtb	r2, r3
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2200      	movs	r2, #0
 8005576:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557c:	2b00      	cmp	r3, #0
 800557e:	d163      	bne.n	8005648 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005584:	009a      	lsls	r2, r3, #2
 8005586:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800558a:	4013      	ands	r3, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005590:	0f92      	lsrs	r2, r2, #30
 8005592:	431a      	orrs	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800559c:	0edb      	lsrs	r3, r3, #27
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ae:	0e1b      	lsrs	r3, r3, #24
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055c0:	0d5b      	lsrs	r3, r3, #21
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055d2:	0c9b      	lsrs	r3, r3, #18
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055e4:	0bdb      	lsrs	r3, r3, #15
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	7e1b      	ldrb	r3, [r3, #24]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	3302      	adds	r3, #2
 8005608:	2201      	movs	r2, #1
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005612:	fb03 f202 	mul.w	r2, r3, r2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	7a1b      	ldrb	r3, [r3, #8]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	2201      	movs	r2, #1
 8005626:	409a      	lsls	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005634:	0a52      	lsrs	r2, r2, #9
 8005636:	fb03 f202 	mul.w	r2, r3, r2
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005644:	661a      	str	r2, [r3, #96]	@ 0x60
 8005646:	e031      	b.n	80056ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564c:	2b01      	cmp	r3, #1
 800564e:	d11d      	bne.n	800568c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800565e:	0c1b      	lsrs	r3, r3, #16
 8005660:	431a      	orrs	r2, r3
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	3301      	adds	r3, #1
 800566c:	029a      	lsls	r2, r3, #10
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005680:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	661a      	str	r2, [r3, #96]	@ 0x60
 800568a:	e00f      	b.n	80056ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a58      	ldr	r2, [pc, #352]	@ (80057f4 <HAL_SD_GetCardCSD+0x344>)
 8005692:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005698:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e09d      	b.n	80057e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b0:	0b9b      	lsrs	r3, r3, #14
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056c2:	09db      	lsrs	r3, r3, #7
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e4:	0fdb      	lsrs	r3, r3, #31
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f0:	0f5b      	lsrs	r3, r3, #29
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005702:	0e9b      	lsrs	r3, r3, #26
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	b2da      	uxtb	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005714:	0d9b      	lsrs	r3, r3, #22
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	b2da      	uxtb	r2, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005726:	0d5b      	lsrs	r3, r3, #21
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	b2da      	uxtb	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	b2db      	uxtb	r3, r3
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	b2da      	uxtb	r2, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005756:	0bdb      	lsrs	r3, r3, #15
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	b2da      	uxtb	r2, r3
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576a:	0b9b      	lsrs	r3, r3, #14
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577e:	0b5b      	lsrs	r3, r3, #13
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	b2da      	uxtb	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005792:	0b1b      	lsrs	r3, r3, #12
 8005794:	b2db      	uxtb	r3, r3
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	b2da      	uxtb	r2, r3
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a6:	0a9b      	lsrs	r3, r3, #10
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ba:	0a1b      	lsrs	r3, r3, #8
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	004005ff 	.word	0x004005ff

080057f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800585c:	f107 030c 	add.w	r3, r7, #12
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f970 	bl	8005b48 <SD_SendStatus>
 8005868:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	0a5b      	lsrs	r3, r3, #9
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005886:	693b      	ldr	r3, [r7, #16]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005890:	b5b0      	push	{r4, r5, r7, lr}
 8005892:	b094      	sub	sp, #80	@ 0x50
 8005894:	af04      	add	r7, sp, #16
 8005896:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005898:	2301      	movs	r3, #1
 800589a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f002 fde0 	bl	8008466 <SDIO_GetPowerState>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058ac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80058b0:	e0b8      	b.n	8005a24 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d02f      	beq.n	800591a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f002 ffc7 	bl	8008852 <SDMMC_CmdSendCID>
 80058c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80058c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80058cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ce:	e0a9      	b.n	8005a24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2100      	movs	r1, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f002 fe0a 	bl	80084f0 <SDIO_GetResponse>
 80058dc:	4602      	mov	r2, r0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2104      	movs	r1, #4
 80058e8:	4618      	mov	r0, r3
 80058ea:	f002 fe01 	bl	80084f0 <SDIO_GetResponse>
 80058ee:	4602      	mov	r2, r0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2108      	movs	r1, #8
 80058fa:	4618      	mov	r0, r3
 80058fc:	f002 fdf8 	bl	80084f0 <SDIO_GetResponse>
 8005900:	4602      	mov	r2, r0
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	210c      	movs	r1, #12
 800590c:	4618      	mov	r0, r3
 800590e:	f002 fdef 	bl	80084f0 <SDIO_GetResponse>
 8005912:	4602      	mov	r2, r0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591e:	2b03      	cmp	r3, #3
 8005920:	d00d      	beq.n	800593e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f107 020e 	add.w	r2, r7, #14
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f002 ffcd 	bl	80088cc <SDMMC_CmdSetRelAdd>
 8005932:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <SD_InitCard+0xae>
    {
      return errorstate;
 800593a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800593c:	e072      	b.n	8005a24 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005942:	2b03      	cmp	r3, #3
 8005944:	d036      	beq.n	80059b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005946:	89fb      	ldrh	r3, [r7, #14]
 8005948:	461a      	mov	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005956:	041b      	lsls	r3, r3, #16
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f002 ff97 	bl	800888e <SDMMC_CmdSendCSD>
 8005960:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800596a:	e05b      	b.n	8005a24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f002 fdbc 	bl	80084f0 <SDIO_GetResponse>
 8005978:	4602      	mov	r2, r0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2104      	movs	r1, #4
 8005984:	4618      	mov	r0, r3
 8005986:	f002 fdb3 	bl	80084f0 <SDIO_GetResponse>
 800598a:	4602      	mov	r2, r0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2108      	movs	r1, #8
 8005996:	4618      	mov	r0, r3
 8005998:	f002 fdaa 	bl	80084f0 <SDIO_GetResponse>
 800599c:	4602      	mov	r2, r0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	210c      	movs	r1, #12
 80059a8:	4618      	mov	r0, r3
 80059aa:	f002 fda1 	bl	80084f0 <SDIO_GetResponse>
 80059ae:	4602      	mov	r2, r0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2104      	movs	r1, #4
 80059ba:	4618      	mov	r0, r3
 80059bc:	f002 fd98 	bl	80084f0 <SDIO_GetResponse>
 80059c0:	4603      	mov	r3, r0
 80059c2:	0d1a      	lsrs	r2, r3, #20
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80059c8:	f107 0310 	add.w	r3, r7, #16
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fd6e 	bl	80054b0 <HAL_SD_GetCardCSD>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80059de:	e021      	b.n	8005a24 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e8:	041b      	lsls	r3, r3, #16
 80059ea:	2200      	movs	r2, #0
 80059ec:	461c      	mov	r4, r3
 80059ee:	4615      	mov	r5, r2
 80059f0:	4622      	mov	r2, r4
 80059f2:	462b      	mov	r3, r5
 80059f4:	4608      	mov	r0, r1
 80059f6:	f002 fe87 	bl	8008708 <SDMMC_CmdSelDesel>
 80059fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80059fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <SD_InitCard+0x176>
  {
    return errorstate;
 8005a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a04:	e00e      	b.n	8005a24 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681d      	ldr	r5, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	466c      	mov	r4, sp
 8005a0e:	f103 0210 	add.w	r2, r3, #16
 8005a12:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a18:	3304      	adds	r3, #4
 8005a1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	f002 fccb 	bl	80083b8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3740      	adds	r7, #64	@ 0x40
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bdb0      	pop	{r4, r5, r7, pc}

08005a2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f002 fe82 	bl	800874e <SDMMC_CmdGoIdleState>
 8005a4a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	e072      	b.n	8005b3c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f002 fe95 	bl	800878a <SDMMC_CmdOperCond>
 8005a60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00d      	beq.n	8005a84 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f002 fe6b 	bl	800874e <SDMMC_CmdGoIdleState>
 8005a78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	e05b      	b.n	8005b3c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d137      	bne.n	8005b02 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f002 fe95 	bl	80087c8 <SDMMC_CmdAppCommand>
 8005a9e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d02d      	beq.n	8005b02 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005aa6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005aaa:	e047      	b.n	8005b3c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f002 fe88 	bl	80087c8 <SDMMC_CmdAppCommand>
 8005ab8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <SD_PowerON+0x98>
    {
      return errorstate;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	e03b      	b.n	8005b3c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	491e      	ldr	r1, [pc, #120]	@ (8005b44 <SD_PowerON+0x118>)
 8005aca:	4618      	mov	r0, r3
 8005acc:	f002 fe9e 	bl	800880c <SDMMC_CmdAppOperCommand>
 8005ad0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ad8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005adc:	e02e      	b.n	8005b3c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f002 fd03 	bl	80084f0 <SDIO_GetResponse>
 8005aea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	0fdb      	lsrs	r3, r3, #31
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <SD_PowerON+0xcc>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <SD_PowerON+0xce>
 8005af8:	2300      	movs	r3, #0
 8005afa:	613b      	str	r3, [r7, #16]

    count++;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d802      	bhi.n	8005b12 <SD_PowerON+0xe6>
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0cc      	beq.n	8005aac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d902      	bls.n	8005b22 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005b1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b20:	e00c      	b.n	8005b3c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b32:	e002      	b.n	8005b3a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	c1100000 	.word	0xc1100000

08005b48 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005b58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b5c:	e018      	b.n	8005b90 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b66:	041b      	lsls	r3, r3, #16
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f002 fecf 	bl	800890e <SDMMC_CmdSendStatus>
 8005b70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	e009      	b.n	8005b90 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f002 fcb4 	bl	80084f0 <SDIO_GetResponse>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e07b      	b.n	8005ca2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d108      	bne.n	8005bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bba:	d009      	beq.n	8005bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	61da      	str	r2, [r3, #28]
 8005bc2:	e005      	b.n	8005bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fd f882 	bl	8002cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c54:	ea42 0103 	orr.w	r1, r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	0c1b      	lsrs	r3, r3, #16
 8005c6e:	f003 0104 	and.w	r1, r3, #4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c76:	f003 0210 	and.w	r2, r3, #16
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b088      	sub	sp, #32
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	603b      	str	r3, [r7, #0]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cba:	f7fd fa67 	bl	800318c <HAL_GetTick>
 8005cbe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d001      	beq.n	8005cd4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e12a      	b.n	8005f2a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <HAL_SPI_Transmit+0x36>
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e122      	b.n	8005f2a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_SPI_Transmit+0x48>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e11b      	b.n	8005f2a <HAL_SPI_Transmit+0x280>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	88fa      	ldrh	r2, [r7, #6]
 8005d12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	88fa      	ldrh	r2, [r7, #6]
 8005d18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d40:	d10f      	bne.n	8005d62 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6c:	2b40      	cmp	r3, #64	@ 0x40
 8005d6e:	d007      	beq.n	8005d80 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d88:	d152      	bne.n	8005e30 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_SPI_Transmit+0xee>
 8005d92:	8b7b      	ldrh	r3, [r7, #26]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d145      	bne.n	8005e24 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9c:	881a      	ldrh	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005dbc:	e032      	b.n	8005e24 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d112      	bne.n	8005df2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd0:	881a      	ldrh	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ddc:	1c9a      	adds	r2, r3, #2
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005df0:	e018      	b.n	8005e24 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005df2:	f7fd f9cb 	bl	800318c <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d803      	bhi.n	8005e0a <HAL_SPI_Transmit+0x160>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d102      	bne.n	8005e10 <HAL_SPI_Transmit+0x166>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d109      	bne.n	8005e24 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e082      	b.n	8005f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1c7      	bne.n	8005dbe <HAL_SPI_Transmit+0x114>
 8005e2e:	e053      	b.n	8005ed8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <HAL_SPI_Transmit+0x194>
 8005e38:	8b7b      	ldrh	r3, [r7, #26]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d147      	bne.n	8005ece <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e64:	e033      	b.n	8005ece <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d113      	bne.n	8005e9c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	7812      	ldrb	r2, [r2, #0]
 8005e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e9a:	e018      	b.n	8005ece <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e9c:	f7fd f976 	bl	800318c <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d803      	bhi.n	8005eb4 <HAL_SPI_Transmit+0x20a>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb2:	d102      	bne.n	8005eba <HAL_SPI_Transmit+0x210>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d109      	bne.n	8005ece <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e02d      	b.n	8005f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1c6      	bne.n	8005e66 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 ffb7 	bl	8006e50 <SPI_EndRxTxTransaction>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10a      	bne.n	8005f0c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005f28:	2300      	movs	r3, #0
  }
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b088      	sub	sp, #32
 8005f36:	af02      	add	r7, sp, #8
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	603b      	str	r3, [r7, #0]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d001      	beq.n	8005f52 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e104      	b.n	800615c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f5a:	d112      	bne.n	8005f82 <HAL_SPI_Receive+0x50>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10e      	bne.n	8005f82 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2204      	movs	r2, #4
 8005f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f6c:	88fa      	ldrh	r2, [r7, #6]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	4613      	mov	r3, r2
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f8f3 	bl	8006164 <HAL_SPI_TransmitReceive>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	e0ec      	b.n	800615c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f82:	f7fd f903 	bl	800318c <HAL_GetTick>
 8005f86:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_SPI_Receive+0x62>
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0e1      	b.n	800615c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_SPI_Receive+0x74>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e0da      	b.n	800615c <HAL_SPI_Receive+0x22a>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2204      	movs	r2, #4
 8005fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ff4:	d10f      	bne.n	8006016 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006004:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006014:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006020:	2b40      	cmp	r3, #64	@ 0x40
 8006022:	d007      	beq.n	8006034 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006032:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d170      	bne.n	800611e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800603c:	e035      	b.n	80060aa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b01      	cmp	r3, #1
 800604a:	d115      	bne.n	8006078 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f103 020c 	add.w	r2, r3, #12
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006058:	7812      	ldrb	r2, [r2, #0]
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006076:	e018      	b.n	80060aa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006078:	f7fd f888 	bl	800318c <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d803      	bhi.n	8006090 <HAL_SPI_Receive+0x15e>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d102      	bne.n	8006096 <HAL_SPI_Receive+0x164>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e058      	b.n	800615c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1c4      	bne.n	800603e <HAL_SPI_Receive+0x10c>
 80060b4:	e038      	b.n	8006128 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d113      	bne.n	80060ec <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ce:	b292      	uxth	r2, r2
 80060d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	1c9a      	adds	r2, r3, #2
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060ea:	e018      	b.n	800611e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ec:	f7fd f84e 	bl	800318c <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d803      	bhi.n	8006104 <HAL_SPI_Receive+0x1d2>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d102      	bne.n	800610a <HAL_SPI_Receive+0x1d8>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e01e      	b.n	800615c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1c6      	bne.n	80060b6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fe29 	bl	8006d84 <SPI_EndRxTransaction>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800615a:	2300      	movs	r3, #0
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	@ 0x28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006172:	2301      	movs	r3, #1
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006176:	f7fd f809 	bl	800318c <HAL_GetTick>
 800617a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006182:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800618a:	887b      	ldrh	r3, [r7, #2]
 800618c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800618e:	7ffb      	ldrb	r3, [r7, #31]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d00c      	beq.n	80061ae <HAL_SPI_TransmitReceive+0x4a>
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800619a:	d106      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x46>
 80061a4:	7ffb      	ldrb	r3, [r7, #31]
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d001      	beq.n	80061ae <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80061aa:	2302      	movs	r3, #2
 80061ac:	e17f      	b.n	80064ae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <HAL_SPI_TransmitReceive+0x5c>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_SPI_TransmitReceive+0x5c>
 80061ba:	887b      	ldrh	r3, [r7, #2]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e174      	b.n	80064ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_SPI_TransmitReceive+0x6e>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e16d      	b.n	80064ae <HAL_SPI_TransmitReceive+0x34a>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d003      	beq.n	80061ee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2205      	movs	r2, #5
 80061ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	887a      	ldrh	r2, [r7, #2]
 80061fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	887a      	ldrh	r2, [r7, #2]
 8006204:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	887a      	ldrh	r2, [r7, #2]
 8006210:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	887a      	ldrh	r2, [r7, #2]
 8006216:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622e:	2b40      	cmp	r3, #64	@ 0x40
 8006230:	d007      	beq.n	8006242 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800624a:	d17e      	bne.n	800634a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_SPI_TransmitReceive+0xf6>
 8006254:	8afb      	ldrh	r3, [r7, #22]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d16c      	bne.n	8006334 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625e:	881a      	ldrh	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626a:	1c9a      	adds	r2, r3, #2
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800627e:	e059      	b.n	8006334 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d11b      	bne.n	80062c6 <HAL_SPI_TransmitReceive+0x162>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d016      	beq.n	80062c6 <HAL_SPI_TransmitReceive+0x162>
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	2b01      	cmp	r3, #1
 800629c:	d113      	bne.n	80062c6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a2:	881a      	ldrh	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ae:	1c9a      	adds	r2, r3, #2
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d119      	bne.n	8006308 <HAL_SPI_TransmitReceive+0x1a4>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d014      	beq.n	8006308 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	b292      	uxth	r2, r2
 80062ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	1c9a      	adds	r2, r3, #2
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006304:	2301      	movs	r3, #1
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006308:	f7fc ff40 	bl	800318c <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006314:	429a      	cmp	r2, r3
 8006316:	d80d      	bhi.n	8006334 <HAL_SPI_TransmitReceive+0x1d0>
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631e:	d009      	beq.n	8006334 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e0bc      	b.n	80064ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1a0      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x11c>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006342:	b29b      	uxth	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d19b      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x11c>
 8006348:	e082      	b.n	8006450 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <HAL_SPI_TransmitReceive+0x1f4>
 8006352:	8afb      	ldrh	r3, [r7, #22]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d171      	bne.n	800643c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	7812      	ldrb	r2, [r2, #0]
 8006364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800637e:	e05d      	b.n	800643c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d11c      	bne.n	80063c8 <HAL_SPI_TransmitReceive+0x264>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d017      	beq.n	80063c8 <HAL_SPI_TransmitReceive+0x264>
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	2b01      	cmp	r3, #1
 800639c:	d114      	bne.n	80063c8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	330c      	adds	r3, #12
 80063a8:	7812      	ldrb	r2, [r2, #0]
 80063aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d119      	bne.n	800640a <HAL_SPI_TransmitReceive+0x2a6>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d014      	beq.n	800640a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006406:	2301      	movs	r3, #1
 8006408:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800640a:	f7fc febf 	bl	800318c <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006416:	429a      	cmp	r2, r3
 8006418:	d803      	bhi.n	8006422 <HAL_SPI_TransmitReceive+0x2be>
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d102      	bne.n	8006428 <HAL_SPI_TransmitReceive+0x2c4>
 8006422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e038      	b.n	80064ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d19c      	bne.n	8006380 <HAL_SPI_TransmitReceive+0x21c>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d197      	bne.n	8006380 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006450:	6a3a      	ldr	r2, [r7, #32]
 8006452:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fcfb 	bl	8006e50 <SPI_EndRxTxTransaction>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d008      	beq.n	8006472 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e01d      	b.n	80064ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800647a:	2300      	movs	r3, #0
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
  }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3728      	adds	r7, #40	@ 0x28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d001      	beq.n	80064d6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
 80064d4:	e097      	b.n	8006606 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <HAL_SPI_Transmit_DMA+0x2a>
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e08f      	b.n	8006606 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_SPI_Transmit_DMA+0x3c>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e088      	b.n	8006606 <HAL_SPI_Transmit_DMA+0x14e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2203      	movs	r2, #3
 8006500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	88fa      	ldrh	r2, [r7, #6]
 8006514:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	88fa      	ldrh	r2, [r7, #6]
 800651a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006542:	d10f      	bne.n	8006564 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006552:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006562:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006568:	4a29      	ldr	r2, [pc, #164]	@ (8006610 <HAL_SPI_Transmit_DMA+0x158>)
 800656a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006570:	4a28      	ldr	r2, [pc, #160]	@ (8006614 <HAL_SPI_Transmit_DMA+0x15c>)
 8006572:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006578:	4a27      	ldr	r2, [pc, #156]	@ (8006618 <HAL_SPI_Transmit_DMA+0x160>)
 800657a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006580:	2200      	movs	r2, #0
 8006582:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658c:	4619      	mov	r1, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800659a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800659c:	f7fd f9c2 	bl	8003924 <HAL_DMA_Start_IT>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00b      	beq.n	80065be <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065aa:	f043 0210 	orr.w	r2, r3, #16
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e023      	b.n	8006606 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c8:	2b40      	cmp	r3, #64	@ 0x40
 80065ca:	d007      	beq.n	80065dc <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065da:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0220 	orr.w	r2, r2, #32
 80065f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0202 	orr.w	r2, r2, #2
 8006602:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	08006be1 	.word	0x08006be1
 8006614:	08006a01 	.word	0x08006a01
 8006618:	08006c35 	.word	0x08006c35

0800661c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	4613      	mov	r3, r2
 8006628:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b01      	cmp	r3, #1
 8006634:	d001      	beq.n	800663a <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8006636:	2302      	movs	r3, #2
 8006638:	e0a9      	b.n	800678e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d110      	bne.n	8006664 <HAL_SPI_Receive_DMA+0x48>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800664a:	d10b      	bne.n	8006664 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2204      	movs	r2, #4
 8006650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f8a2 	bl	80067a4 <HAL_SPI_TransmitReceive_DMA>
 8006660:	4603      	mov	r3, r0
 8006662:	e094      	b.n	800678e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <HAL_SPI_Receive_DMA+0x54>
 800666a:	88fb      	ldrh	r3, [r7, #6]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e08c      	b.n	800678e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <HAL_SPI_Receive_DMA+0x66>
 800667e:	2302      	movs	r3, #2
 8006680:	e085      	b.n	800678e <HAL_SPI_Receive_DMA+0x172>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2204      	movs	r2, #4
 800668e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	88fa      	ldrh	r2, [r7, #6]
 80066a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	88fa      	ldrh	r2, [r7, #6]
 80066a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066ca:	d10f      	bne.n	80066ec <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f0:	4a29      	ldr	r2, [pc, #164]	@ (8006798 <HAL_SPI_Receive_DMA+0x17c>)
 80066f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f8:	4a28      	ldr	r2, [pc, #160]	@ (800679c <HAL_SPI_Receive_DMA+0x180>)
 80066fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006700:	4a27      	ldr	r2, [pc, #156]	@ (80067a0 <HAL_SPI_Receive_DMA+0x184>)
 8006702:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006708:	2200      	movs	r2, #0
 800670a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	330c      	adds	r3, #12
 8006716:	4619      	mov	r1, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006722:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006724:	f7fd f8fe 	bl	8003924 <HAL_DMA_Start_IT>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006732:	f043 0210 	orr.w	r2, r3, #16
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e023      	b.n	800678e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006750:	2b40      	cmp	r3, #64	@ 0x40
 8006752:	d007      	beq.n	8006764 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006762:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0220 	orr.w	r2, r2, #32
 800677a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	08006bfd 	.word	0x08006bfd
 800679c:	08006aa9 	.word	0x08006aa9
 80067a0:	08006c35 	.word	0x08006c35

080067a4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067b8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d00c      	beq.n	80067e0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067cc:	d106      	bne.n	80067dc <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d102      	bne.n	80067dc <HAL_SPI_TransmitReceive_DMA+0x38>
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d001      	beq.n	80067e0 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 80067dc:	2302      	movs	r3, #2
 80067de:	e0cf      	b.n	8006980 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80067ec:	887b      	ldrh	r3, [r7, #2]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e0c4      	b.n	8006980 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_SPI_TransmitReceive_DMA+0x60>
 8006800:	2302      	movs	r3, #2
 8006802:	e0bd      	b.n	8006980 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b04      	cmp	r3, #4
 8006816:	d003      	beq.n	8006820 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2205      	movs	r2, #5
 800681c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	887a      	ldrh	r2, [r7, #2]
 8006830:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	887a      	ldrh	r2, [r7, #2]
 8006836:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	887a      	ldrh	r2, [r7, #2]
 8006842:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	887a      	ldrh	r2, [r7, #2]
 8006848:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b04      	cmp	r3, #4
 8006860:	d108      	bne.n	8006874 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006866:	4a48      	ldr	r2, [pc, #288]	@ (8006988 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8006868:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800686e:	4a47      	ldr	r2, [pc, #284]	@ (800698c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006870:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006872:	e007      	b.n	8006884 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006878:	4a45      	ldr	r2, [pc, #276]	@ (8006990 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800687a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006880:	4a44      	ldr	r2, [pc, #272]	@ (8006994 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006882:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006888:	4a43      	ldr	r2, [pc, #268]	@ (8006998 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800688a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006890:	2200      	movs	r2, #0
 8006892:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	330c      	adds	r3, #12
 800689e:	4619      	mov	r1, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80068ac:	f7fd f83a 	bl	8003924 <HAL_DMA_Start_IT>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ba:	f043 0210 	orr.w	r2, r3, #16
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e058      	b.n	8006980 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0201 	orr.w	r2, r2, #1
 80068dc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068e2:	2200      	movs	r2, #0
 80068e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ea:	2200      	movs	r2, #0
 80068ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068f2:	2200      	movs	r2, #0
 80068f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068fa:	2200      	movs	r2, #0
 80068fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006906:	4619      	mov	r1, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	330c      	adds	r3, #12
 800690e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006914:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006916:	f7fd f805 	bl	8003924 <HAL_DMA_Start_IT>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006924:	f043 0210 	orr.w	r2, r3, #16
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e023      	b.n	8006980 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006942:	2b40      	cmp	r3, #64	@ 0x40
 8006944:	d007      	beq.n	8006956 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006954:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0220 	orr.w	r2, r2, #32
 800696c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f042 0202 	orr.w	r2, r2, #2
 800697c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	08006bfd 	.word	0x08006bfd
 800698c:	08006aa9 	.word	0x08006aa9
 8006990:	08006c19 	.word	0x08006c19
 8006994:	08006b51 	.word	0x08006b51
 8006998:	08006c35 	.word	0x08006c35

0800699c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a0e:	f7fc fbbd 	bl	800318c <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a22:	d03b      	beq.n	8006a9c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0220 	bic.w	r2, r2, #32
 8006a32:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0202 	bic.w	r2, r2, #2
 8006a42:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	2164      	movs	r1, #100	@ 0x64
 8006a48:	6978      	ldr	r0, [r7, #20]
 8006a4a:	f000 fa01 	bl	8006e50 <SPI_EndRxTxTransaction>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a58:	f043 0220 	orr.w	r2, r3, #32
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2200      	movs	r2, #0
 8006a82:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a94:	6978      	ldr	r0, [r7, #20]
 8006a96:	f7ff ffa9 	bl	80069ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a9a:	e002      	b.n	8006aa2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006a9c:	6978      	ldr	r0, [r7, #20]
 8006a9e:	f7fa fe99 	bl	80017d4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ab6:	f7fc fb69 	bl	800318c <HAL_GetTick>
 8006aba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aca:	d03b      	beq.n	8006b44 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0220 	bic.w	r2, r2, #32
 8006ada:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10d      	bne.n	8006b00 <SPI_DMAReceiveCplt+0x58>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aec:	d108      	bne.n	8006b00 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0203 	bic.w	r2, r2, #3
 8006afc:	605a      	str	r2, [r3, #4]
 8006afe:	e007      	b.n	8006b10 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	2164      	movs	r1, #100	@ 0x64
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f935 	bl	8006d84 <SPI_EndRxTransaction>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7ff ff55 	bl	80069ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006b42:	e002      	b.n	8006b4a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f7fa fe55 	bl	80017f4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b5e:	f7fc fb15 	bl	800318c <HAL_GetTick>
 8006b62:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b72:	d02f      	beq.n	8006bd4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0220 	bic.w	r2, r2, #32
 8006b82:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	2164      	movs	r1, #100	@ 0x64
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f961 	bl	8006e50 <SPI_EndRxTxTransaction>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b98:	f043 0220 	orr.w	r2, r3, #32
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0203 	bic.w	r2, r2, #3
 8006bae:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff ff0d 	bl	80069ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006bd2:	e002      	b.n	8006bda <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f7ff fee1 	bl	800699c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff fede 	bl	80069b0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c08:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7ff feda 	bl	80069c4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c10:	bf00      	nop
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c24:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fed6 	bl	80069d8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0203 	bic.w	r2, r2, #3
 8006c50:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c56:	f043 0210 	orr.w	r2, r3, #16
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff fec0 	bl	80069ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	4613      	mov	r3, r2
 8006c82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c84:	f7fc fa82 	bl	800318c <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	1a9b      	subs	r3, r3, r2
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	4413      	add	r3, r2
 8006c92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c94:	f7fc fa7a 	bl	800318c <HAL_GetTick>
 8006c98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c9a:	4b39      	ldr	r3, [pc, #228]	@ (8006d80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	015b      	lsls	r3, r3, #5
 8006ca0:	0d1b      	lsrs	r3, r3, #20
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	fb02 f303 	mul.w	r3, r2, r3
 8006ca8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006caa:	e054      	b.n	8006d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d050      	beq.n	8006d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cb4:	f7fc fa6a 	bl	800318c <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d902      	bls.n	8006cca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d13d      	bne.n	8006d46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ce2:	d111      	bne.n	8006d08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cec:	d004      	beq.n	8006cf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf6:	d107      	bne.n	8006d08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d10:	d10f      	bne.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e017      	b.n	8006d76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	bf0c      	ite	eq
 8006d66:	2301      	moveq	r3, #1
 8006d68:	2300      	movne	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d19b      	bne.n	8006cac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000000c 	.word	0x2000000c

08006d84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d98:	d111      	bne.n	8006dbe <SPI_EndRxTransaction+0x3a>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006da2:	d004      	beq.n	8006dae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dac:	d107      	bne.n	8006dbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dc6:	d12a      	bne.n	8006e1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd0:	d012      	beq.n	8006df8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2180      	movs	r1, #128	@ 0x80
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff ff49 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d02d      	beq.n	8006e44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dec:	f043 0220 	orr.w	r2, r3, #32
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e026      	b.n	8006e46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2101      	movs	r1, #1
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff ff36 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d01a      	beq.n	8006e44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e12:	f043 0220 	orr.w	r2, r3, #32
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e013      	b.n	8006e46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2200      	movs	r2, #0
 8006e26:	2101      	movs	r1, #1
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f7ff ff23 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d007      	beq.n	8006e44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e38:	f043 0220 	orr.w	r2, r3, #32
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e000      	b.n	8006e46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2201      	movs	r2, #1
 8006e64:	2102      	movs	r1, #2
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff ff04 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d007      	beq.n	8006e82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e76:	f043 0220 	orr.w	r2, r3, #32
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e032      	b.n	8006ee8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e82:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef0 <SPI_EndRxTxTransaction+0xa0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef4 <SPI_EndRxTxTransaction+0xa4>)
 8006e88:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8c:	0d5b      	lsrs	r3, r3, #21
 8006e8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
 8006e96:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ea0:	d112      	bne.n	8006ec8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2180      	movs	r1, #128	@ 0x80
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7ff fee1 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d016      	beq.n	8006ee6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebc:	f043 0220 	orr.w	r2, r3, #32
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e00f      	b.n	8006ee8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ede:	2b80      	cmp	r3, #128	@ 0x80
 8006ee0:	d0f2      	beq.n	8006ec8 <SPI_EndRxTxTransaction+0x78>
 8006ee2:	e000      	b.n	8006ee6 <SPI_EndRxTxTransaction+0x96>
        break;
 8006ee4:	bf00      	nop
  }

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	2000000c 	.word	0x2000000c
 8006ef4:	165e9f81 	.word	0x165e9f81

08006ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e041      	b.n	8006f8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fb ff94 	bl	8002e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f000 f95e 	bl	80071f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d001      	beq.n	8006fb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e046      	b.n	800703e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a23      	ldr	r2, [pc, #140]	@ (800704c <HAL_TIM_Base_Start+0xb4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d022      	beq.n	8007008 <HAL_TIM_Base_Start+0x70>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fca:	d01d      	beq.n	8007008 <HAL_TIM_Base_Start+0x70>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8007050 <HAL_TIM_Base_Start+0xb8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d018      	beq.n	8007008 <HAL_TIM_Base_Start+0x70>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1e      	ldr	r2, [pc, #120]	@ (8007054 <HAL_TIM_Base_Start+0xbc>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d013      	beq.n	8007008 <HAL_TIM_Base_Start+0x70>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8007058 <HAL_TIM_Base_Start+0xc0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00e      	beq.n	8007008 <HAL_TIM_Base_Start+0x70>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1b      	ldr	r2, [pc, #108]	@ (800705c <HAL_TIM_Base_Start+0xc4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d009      	beq.n	8007008 <HAL_TIM_Base_Start+0x70>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a19      	ldr	r2, [pc, #100]	@ (8007060 <HAL_TIM_Base_Start+0xc8>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d004      	beq.n	8007008 <HAL_TIM_Base_Start+0x70>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a18      	ldr	r2, [pc, #96]	@ (8007064 <HAL_TIM_Base_Start+0xcc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d111      	bne.n	800702c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b06      	cmp	r3, #6
 8007018:	d010      	beq.n	800703c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0201 	orr.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800702a:	e007      	b.n	800703c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f042 0201 	orr.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40010000 	.word	0x40010000
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
 800705c:	40010400 	.word	0x40010400
 8007060:	40014000 	.word	0x40014000
 8007064:	40001800 	.word	0x40001800

08007068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800707c:	2b01      	cmp	r3, #1
 800707e:	d101      	bne.n	8007084 <HAL_TIM_ConfigClockSource+0x1c>
 8007080:	2302      	movs	r3, #2
 8007082:	e0b4      	b.n	80071ee <HAL_TIM_ConfigClockSource+0x186>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070bc:	d03e      	beq.n	800713c <HAL_TIM_ConfigClockSource+0xd4>
 80070be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070c2:	f200 8087 	bhi.w	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ca:	f000 8086 	beq.w	80071da <HAL_TIM_ConfigClockSource+0x172>
 80070ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070d2:	d87f      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070d4:	2b70      	cmp	r3, #112	@ 0x70
 80070d6:	d01a      	beq.n	800710e <HAL_TIM_ConfigClockSource+0xa6>
 80070d8:	2b70      	cmp	r3, #112	@ 0x70
 80070da:	d87b      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070dc:	2b60      	cmp	r3, #96	@ 0x60
 80070de:	d050      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x11a>
 80070e0:	2b60      	cmp	r3, #96	@ 0x60
 80070e2:	d877      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070e4:	2b50      	cmp	r3, #80	@ 0x50
 80070e6:	d03c      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0xfa>
 80070e8:	2b50      	cmp	r3, #80	@ 0x50
 80070ea:	d873      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070ec:	2b40      	cmp	r3, #64	@ 0x40
 80070ee:	d058      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x13a>
 80070f0:	2b40      	cmp	r3, #64	@ 0x40
 80070f2:	d86f      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070f4:	2b30      	cmp	r3, #48	@ 0x30
 80070f6:	d064      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15a>
 80070f8:	2b30      	cmp	r3, #48	@ 0x30
 80070fa:	d86b      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d060      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007100:	2b20      	cmp	r3, #32
 8007102:	d867      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d05c      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007108:	2b10      	cmp	r3, #16
 800710a:	d05a      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15a>
 800710c:	e062      	b.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800711e:	f000 f991 	bl	8007444 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	609a      	str	r2, [r3, #8]
      break;
 800713a:	e04f      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800714c:	f000 f97a 	bl	8007444 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800715e:	609a      	str	r2, [r3, #8]
      break;
 8007160:	e03c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800716e:	461a      	mov	r2, r3
 8007170:	f000 f8ee 	bl	8007350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2150      	movs	r1, #80	@ 0x50
 800717a:	4618      	mov	r0, r3
 800717c:	f000 f947 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 8007180:	e02c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800718e:	461a      	mov	r2, r3
 8007190:	f000 f90d 	bl	80073ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2160      	movs	r1, #96	@ 0x60
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f937 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 80071a0:	e01c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ae:	461a      	mov	r2, r3
 80071b0:	f000 f8ce 	bl	8007350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2140      	movs	r1, #64	@ 0x40
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f927 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 80071c0:	e00c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f000 f91e 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 80071d2:	e003      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	73fb      	strb	r3, [r7, #15]
      break;
 80071d8:	e000      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a46      	ldr	r2, [pc, #280]	@ (8007324 <TIM_Base_SetConfig+0x12c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d013      	beq.n	8007238 <TIM_Base_SetConfig+0x40>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007216:	d00f      	beq.n	8007238 <TIM_Base_SetConfig+0x40>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a43      	ldr	r2, [pc, #268]	@ (8007328 <TIM_Base_SetConfig+0x130>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00b      	beq.n	8007238 <TIM_Base_SetConfig+0x40>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a42      	ldr	r2, [pc, #264]	@ (800732c <TIM_Base_SetConfig+0x134>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d007      	beq.n	8007238 <TIM_Base_SetConfig+0x40>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a41      	ldr	r2, [pc, #260]	@ (8007330 <TIM_Base_SetConfig+0x138>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d003      	beq.n	8007238 <TIM_Base_SetConfig+0x40>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a40      	ldr	r2, [pc, #256]	@ (8007334 <TIM_Base_SetConfig+0x13c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d108      	bne.n	800724a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800723e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a35      	ldr	r2, [pc, #212]	@ (8007324 <TIM_Base_SetConfig+0x12c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d02b      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007258:	d027      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a32      	ldr	r2, [pc, #200]	@ (8007328 <TIM_Base_SetConfig+0x130>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d023      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a31      	ldr	r2, [pc, #196]	@ (800732c <TIM_Base_SetConfig+0x134>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d01f      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a30      	ldr	r2, [pc, #192]	@ (8007330 <TIM_Base_SetConfig+0x138>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01b      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a2f      	ldr	r2, [pc, #188]	@ (8007334 <TIM_Base_SetConfig+0x13c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d017      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a2e      	ldr	r2, [pc, #184]	@ (8007338 <TIM_Base_SetConfig+0x140>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a2d      	ldr	r2, [pc, #180]	@ (800733c <TIM_Base_SetConfig+0x144>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00f      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a2c      	ldr	r2, [pc, #176]	@ (8007340 <TIM_Base_SetConfig+0x148>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00b      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a2b      	ldr	r2, [pc, #172]	@ (8007344 <TIM_Base_SetConfig+0x14c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d007      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a2a      	ldr	r2, [pc, #168]	@ (8007348 <TIM_Base_SetConfig+0x150>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d003      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a29      	ldr	r2, [pc, #164]	@ (800734c <TIM_Base_SetConfig+0x154>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d108      	bne.n	80072bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a10      	ldr	r2, [pc, #64]	@ (8007324 <TIM_Base_SetConfig+0x12c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d003      	beq.n	80072f0 <TIM_Base_SetConfig+0xf8>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a12      	ldr	r2, [pc, #72]	@ (8007334 <TIM_Base_SetConfig+0x13c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d103      	bne.n	80072f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b01      	cmp	r3, #1
 8007308:	d105      	bne.n	8007316 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f023 0201 	bic.w	r2, r3, #1
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	611a      	str	r2, [r3, #16]
  }
}
 8007316:	bf00      	nop
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	40010000 	.word	0x40010000
 8007328:	40000400 	.word	0x40000400
 800732c:	40000800 	.word	0x40000800
 8007330:	40000c00 	.word	0x40000c00
 8007334:	40010400 	.word	0x40010400
 8007338:	40014000 	.word	0x40014000
 800733c:	40014400 	.word	0x40014400
 8007340:	40014800 	.word	0x40014800
 8007344:	40001800 	.word	0x40001800
 8007348:	40001c00 	.word	0x40001c00
 800734c:	40002000 	.word	0x40002000

08007350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f023 0201 	bic.w	r2, r3, #1
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800737a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	4313      	orrs	r3, r2
 8007384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f023 030a 	bic.w	r3, r3, #10
 800738c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	621a      	str	r2, [r3, #32]
}
 80073a2:	bf00      	nop
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b087      	sub	sp, #28
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	f023 0210 	bic.w	r2, r3, #16
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	031b      	lsls	r3, r3, #12
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	011b      	lsls	r3, r3, #4
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	f043 0307 	orr.w	r3, r3, #7
 8007430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	609a      	str	r2, [r3, #8]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800745e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	021a      	lsls	r2, r3, #8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	431a      	orrs	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4313      	orrs	r3, r2
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	609a      	str	r2, [r3, #8]
}
 8007478:	bf00      	nop
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007498:	2302      	movs	r3, #2
 800749a:	e05a      	b.n	8007552 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a21      	ldr	r2, [pc, #132]	@ (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d022      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e8:	d01d      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007564 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d018      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007568 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d013      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a1a      	ldr	r2, [pc, #104]	@ (800756c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00e      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a18      	ldr	r2, [pc, #96]	@ (8007570 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d009      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a17      	ldr	r2, [pc, #92]	@ (8007574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d004      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a15      	ldr	r2, [pc, #84]	@ (8007578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d10c      	bne.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800752c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	4313      	orrs	r3, r2
 8007536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40010000 	.word	0x40010000
 8007564:	40000400 	.word	0x40000400
 8007568:	40000800 	.word	0x40000800
 800756c:	40000c00 	.word	0x40000c00
 8007570:	40010400 	.word	0x40010400
 8007574:	40014000 	.word	0x40014000
 8007578:	40001800 	.word	0x40001800

0800757c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e042      	b.n	8007614 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fb fc72 	bl	8002e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2224      	movs	r2, #36	@ 0x24
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fc85 	bl	8007ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695a      	ldr	r2, [r3, #20]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b0ba      	sub	sp, #232	@ 0xe8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007642:	2300      	movs	r3, #0
 8007644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007648:	2300      	movs	r3, #0
 800764a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800764e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800765a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10f      	bne.n	8007682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d009      	beq.n	8007682 <HAL_UART_IRQHandler+0x66>
 800766e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007672:	f003 0320 	and.w	r3, r3, #32
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fb69 	bl	8007d52 <UART_Receive_IT>
      return;
 8007680:	e25b      	b.n	8007b3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 80de 	beq.w	8007848 <HAL_UART_IRQHandler+0x22c>
 800768c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d106      	bne.n	80076a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800769c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 80d1 	beq.w	8007848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <HAL_UART_IRQHandler+0xae>
 80076b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c2:	f043 0201 	orr.w	r2, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00b      	beq.n	80076ee <HAL_UART_IRQHandler+0xd2>
 80076d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e6:	f043 0202 	orr.w	r2, r3, #2
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00b      	beq.n	8007712 <HAL_UART_IRQHandler+0xf6>
 80076fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800770a:	f043 0204 	orr.w	r2, r3, #4
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d011      	beq.n	8007742 <HAL_UART_IRQHandler+0x126>
 800771e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d105      	bne.n	8007736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800772a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d005      	beq.n	8007742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800773a:	f043 0208 	orr.w	r2, r3, #8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 81f2 	beq.w	8007b30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800774c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d008      	beq.n	800776a <HAL_UART_IRQHandler+0x14e>
 8007758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800775c:	f003 0320 	and.w	r3, r3, #32
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 faf4 	bl	8007d52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007774:	2b40      	cmp	r3, #64	@ 0x40
 8007776:	bf0c      	ite	eq
 8007778:	2301      	moveq	r3, #1
 800777a:	2300      	movne	r3, #0
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007786:	f003 0308 	and.w	r3, r3, #8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <HAL_UART_IRQHandler+0x17a>
 800778e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007792:	2b00      	cmp	r3, #0
 8007794:	d04f      	beq.n	8007836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f9fc 	bl	8007b94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a6:	2b40      	cmp	r3, #64	@ 0x40
 80077a8:	d141      	bne.n	800782e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3314      	adds	r3, #20
 80077b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80077c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3314      	adds	r3, #20
 80077d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80077d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80077da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80077e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80077ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1d9      	bne.n	80077aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d013      	beq.n	8007826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007802:	4a7e      	ldr	r2, [pc, #504]	@ (80079fc <HAL_UART_IRQHandler+0x3e0>)
 8007804:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780a:	4618      	mov	r0, r3
 800780c:	f7fc f952 	bl	8003ab4 <HAL_DMA_Abort_IT>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d016      	beq.n	8007844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007820:	4610      	mov	r0, r2
 8007822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007824:	e00e      	b.n	8007844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f99e 	bl	8007b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800782c:	e00a      	b.n	8007844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f99a 	bl	8007b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007834:	e006      	b.n	8007844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f996 	bl	8007b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007842:	e175      	b.n	8007b30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007844:	bf00      	nop
    return;
 8007846:	e173      	b.n	8007b30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784c:	2b01      	cmp	r3, #1
 800784e:	f040 814f 	bne.w	8007af0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007856:	f003 0310 	and.w	r3, r3, #16
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 8148 	beq.w	8007af0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007864:	f003 0310 	and.w	r3, r3, #16
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 8141 	beq.w	8007af0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	60bb      	str	r3, [r7, #8]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	60bb      	str	r3, [r7, #8]
 8007882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800788e:	2b40      	cmp	r3, #64	@ 0x40
 8007890:	f040 80b6 	bne.w	8007a00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8145 	beq.w	8007b34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078b2:	429a      	cmp	r2, r3
 80078b4:	f080 813e 	bcs.w	8007b34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ca:	f000 8088 	beq.w	80079de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	330c      	adds	r3, #12
 80078d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80078e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	330c      	adds	r3, #12
 80078f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80078fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80078fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007906:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1d9      	bne.n	80078ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3314      	adds	r3, #20
 8007920:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800792a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3314      	adds	r3, #20
 800793a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800793e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007942:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007946:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e1      	bne.n	800791a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3314      	adds	r3, #20
 800795c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800796c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3314      	adds	r3, #20
 8007976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800797a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800797c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007980:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e3      	bne.n	8007956 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	330c      	adds	r3, #12
 80079a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079ae:	f023 0310 	bic.w	r3, r3, #16
 80079b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	330c      	adds	r3, #12
 80079bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80079c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80079c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e3      	bne.n	800799c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fb fffb 	bl	80039d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f8c1 	bl	8007b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079fa:	e09b      	b.n	8007b34 <HAL_UART_IRQHandler+0x518>
 80079fc:	08007c5b 	.word	0x08007c5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 808e 	beq.w	8007b38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8089 	beq.w	8007b38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007a4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e3      	bne.n	8007a26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3314      	adds	r3, #20
 8007a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	f023 0301 	bic.w	r3, r3, #1
 8007a74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3314      	adds	r3, #20
 8007a7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a82:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e3      	bne.n	8007a5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	330c      	adds	r3, #12
 8007aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0310 	bic.w	r3, r3, #16
 8007aba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	330c      	adds	r3, #12
 8007ac4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ac8:	61fa      	str	r2, [r7, #28]
 8007aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	69b9      	ldr	r1, [r7, #24]
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e3      	bne.n	8007aa4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ae2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f847 	bl	8007b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aee:	e023      	b.n	8007b38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d009      	beq.n	8007b10 <HAL_UART_IRQHandler+0x4f4>
 8007afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f8ba 	bl	8007c82 <UART_Transmit_IT>
    return;
 8007b0e:	e014      	b.n	8007b3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00e      	beq.n	8007b3a <HAL_UART_IRQHandler+0x51e>
 8007b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d008      	beq.n	8007b3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f8fa 	bl	8007d22 <UART_EndTransmit_IT>
    return;
 8007b2e:	e004      	b.n	8007b3a <HAL_UART_IRQHandler+0x51e>
    return;
 8007b30:	bf00      	nop
 8007b32:	e002      	b.n	8007b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8007b34:	bf00      	nop
 8007b36:	e000      	b.n	8007b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8007b38:	bf00      	nop
  }
}
 8007b3a:	37e8      	adds	r7, #232	@ 0xe8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b095      	sub	sp, #84	@ 0x54
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	330c      	adds	r3, #12
 8007ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	330c      	adds	r3, #12
 8007bba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007bbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8007bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e5      	bne.n	8007b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3314      	adds	r3, #20
 8007bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	f023 0301 	bic.w	r3, r3, #1
 8007be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3314      	adds	r3, #20
 8007bee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e5      	bne.n	8007bd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d119      	bne.n	8007c40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	330c      	adds	r3, #12
 8007c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f023 0310 	bic.w	r3, r3, #16
 8007c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	330c      	adds	r3, #12
 8007c2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c2c:	61ba      	str	r2, [r7, #24]
 8007c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6979      	ldr	r1, [r7, #20]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e5      	bne.n	8007c0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c4e:	bf00      	nop
 8007c50:	3754      	adds	r7, #84	@ 0x54
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f7ff ff77 	bl	8007b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c7a:	bf00      	nop
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b21      	cmp	r3, #33	@ 0x21
 8007c94:	d13e      	bne.n	8007d14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c9e:	d114      	bne.n	8007cca <UART_Transmit_IT+0x48>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d110      	bne.n	8007cca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	1c9a      	adds	r2, r3, #2
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	621a      	str	r2, [r3, #32]
 8007cc8:	e008      	b.n	8007cdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	1c59      	adds	r1, r3, #1
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	6211      	str	r1, [r2, #32]
 8007cd4:	781a      	ldrb	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10f      	bne.n	8007d10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007cfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	e000      	b.n	8007d16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d14:	2302      	movs	r3, #2
  }
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff fefc 	bl	8007b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b08c      	sub	sp, #48	@ 0x30
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b22      	cmp	r3, #34	@ 0x22
 8007d64:	f040 80ae 	bne.w	8007ec4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d70:	d117      	bne.n	8007da2 <UART_Receive_IT+0x50>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d113      	bne.n	8007da2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d82:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9a:	1c9a      	adds	r2, r3, #2
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007da0:	e026      	b.n	8007df0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007da8:	2300      	movs	r3, #0
 8007daa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007db4:	d007      	beq.n	8007dc6 <UART_Receive_IT+0x74>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <UART_Receive_IT+0x82>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d106      	bne.n	8007dd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	e008      	b.n	8007de6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d15d      	bne.n	8007ec0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f022 0220 	bic.w	r2, r2, #32
 8007e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695a      	ldr	r2, [r3, #20]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0201 	bic.w	r2, r2, #1
 8007e32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d135      	bne.n	8007eb6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	330c      	adds	r3, #12
 8007e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	e853 3f00 	ldrex	r3, [r3]
 8007e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f023 0310 	bic.w	r3, r3, #16
 8007e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	330c      	adds	r3, #12
 8007e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e70:	623a      	str	r2, [r7, #32]
 8007e72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	69f9      	ldr	r1, [r7, #28]
 8007e76:	6a3a      	ldr	r2, [r7, #32]
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e5      	bne.n	8007e50 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0310 	and.w	r3, r3, #16
 8007e8e:	2b10      	cmp	r3, #16
 8007e90:	d10a      	bne.n	8007ea8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fe64 	bl	8007b7c <HAL_UARTEx_RxEventCallback>
 8007eb4:	e002      	b.n	8007ebc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff fe4c 	bl	8007b54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e002      	b.n	8007ec6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e000      	b.n	8007ec6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ec4:	2302      	movs	r3, #2
  }
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3730      	adds	r7, #48	@ 0x30
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed4:	b0c0      	sub	sp, #256	@ 0x100
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eec:	68d9      	ldr	r1, [r3, #12]
 8007eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	ea40 0301 	orr.w	r3, r0, r1
 8007ef8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	431a      	orrs	r2, r3
 8007f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f28:	f021 010c 	bic.w	r1, r1, #12
 8007f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f36:	430b      	orrs	r3, r1
 8007f38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f4a:	6999      	ldr	r1, [r3, #24]
 8007f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	ea40 0301 	orr.w	r3, r0, r1
 8007f56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	4b8f      	ldr	r3, [pc, #572]	@ (800819c <UART_SetConfig+0x2cc>)
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d005      	beq.n	8007f70 <UART_SetConfig+0xa0>
 8007f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80081a0 <UART_SetConfig+0x2d0>)
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d104      	bne.n	8007f7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f70:	f7fc fe66 	bl	8004c40 <HAL_RCC_GetPCLK2Freq>
 8007f74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f78:	e003      	b.n	8007f82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f7a:	f7fc fe4d 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8007f7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f8c:	f040 810c 	bne.w	80081a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	1891      	adds	r1, r2, r2
 8007fa8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007faa:	415b      	adcs	r3, r3
 8007fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	eb12 0801 	adds.w	r8, r2, r1
 8007fb8:	4629      	mov	r1, r5
 8007fba:	eb43 0901 	adc.w	r9, r3, r1
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	f04f 0300 	mov.w	r3, #0
 8007fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fd2:	4690      	mov	r8, r2
 8007fd4:	4699      	mov	r9, r3
 8007fd6:	4623      	mov	r3, r4
 8007fd8:	eb18 0303 	adds.w	r3, r8, r3
 8007fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fe0:	462b      	mov	r3, r5
 8007fe2:	eb49 0303 	adc.w	r3, r9, r3
 8007fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ff6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ffa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ffe:	460b      	mov	r3, r1
 8008000:	18db      	adds	r3, r3, r3
 8008002:	653b      	str	r3, [r7, #80]	@ 0x50
 8008004:	4613      	mov	r3, r2
 8008006:	eb42 0303 	adc.w	r3, r2, r3
 800800a:	657b      	str	r3, [r7, #84]	@ 0x54
 800800c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008010:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008014:	f7f8 f8d8 	bl	80001c8 <__aeabi_uldivmod>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4b61      	ldr	r3, [pc, #388]	@ (80081a4 <UART_SetConfig+0x2d4>)
 800801e:	fba3 2302 	umull	r2, r3, r3, r2
 8008022:	095b      	lsrs	r3, r3, #5
 8008024:	011c      	lsls	r4, r3, #4
 8008026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800802a:	2200      	movs	r2, #0
 800802c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008030:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008034:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008038:	4642      	mov	r2, r8
 800803a:	464b      	mov	r3, r9
 800803c:	1891      	adds	r1, r2, r2
 800803e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008040:	415b      	adcs	r3, r3
 8008042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008048:	4641      	mov	r1, r8
 800804a:	eb12 0a01 	adds.w	sl, r2, r1
 800804e:	4649      	mov	r1, r9
 8008050:	eb43 0b01 	adc.w	fp, r3, r1
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008060:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008068:	4692      	mov	sl, r2
 800806a:	469b      	mov	fp, r3
 800806c:	4643      	mov	r3, r8
 800806e:	eb1a 0303 	adds.w	r3, sl, r3
 8008072:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008076:	464b      	mov	r3, r9
 8008078:	eb4b 0303 	adc.w	r3, fp, r3
 800807c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800808c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008090:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008094:	460b      	mov	r3, r1
 8008096:	18db      	adds	r3, r3, r3
 8008098:	643b      	str	r3, [r7, #64]	@ 0x40
 800809a:	4613      	mov	r3, r2
 800809c:	eb42 0303 	adc.w	r3, r2, r3
 80080a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80080a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80080aa:	f7f8 f88d 	bl	80001c8 <__aeabi_uldivmod>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	4611      	mov	r1, r2
 80080b4:	4b3b      	ldr	r3, [pc, #236]	@ (80081a4 <UART_SetConfig+0x2d4>)
 80080b6:	fba3 2301 	umull	r2, r3, r3, r1
 80080ba:	095b      	lsrs	r3, r3, #5
 80080bc:	2264      	movs	r2, #100	@ 0x64
 80080be:	fb02 f303 	mul.w	r3, r2, r3
 80080c2:	1acb      	subs	r3, r1, r3
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80080ca:	4b36      	ldr	r3, [pc, #216]	@ (80081a4 <UART_SetConfig+0x2d4>)
 80080cc:	fba3 2302 	umull	r2, r3, r3, r2
 80080d0:	095b      	lsrs	r3, r3, #5
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80080d8:	441c      	add	r4, r3
 80080da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080de:	2200      	movs	r2, #0
 80080e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80080e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80080ec:	4642      	mov	r2, r8
 80080ee:	464b      	mov	r3, r9
 80080f0:	1891      	adds	r1, r2, r2
 80080f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80080f4:	415b      	adcs	r3, r3
 80080f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80080fc:	4641      	mov	r1, r8
 80080fe:	1851      	adds	r1, r2, r1
 8008100:	6339      	str	r1, [r7, #48]	@ 0x30
 8008102:	4649      	mov	r1, r9
 8008104:	414b      	adcs	r3, r1
 8008106:	637b      	str	r3, [r7, #52]	@ 0x34
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008114:	4659      	mov	r1, fp
 8008116:	00cb      	lsls	r3, r1, #3
 8008118:	4651      	mov	r1, sl
 800811a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800811e:	4651      	mov	r1, sl
 8008120:	00ca      	lsls	r2, r1, #3
 8008122:	4610      	mov	r0, r2
 8008124:	4619      	mov	r1, r3
 8008126:	4603      	mov	r3, r0
 8008128:	4642      	mov	r2, r8
 800812a:	189b      	adds	r3, r3, r2
 800812c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008130:	464b      	mov	r3, r9
 8008132:	460a      	mov	r2, r1
 8008134:	eb42 0303 	adc.w	r3, r2, r3
 8008138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008148:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800814c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008150:	460b      	mov	r3, r1
 8008152:	18db      	adds	r3, r3, r3
 8008154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008156:	4613      	mov	r3, r2
 8008158:	eb42 0303 	adc.w	r3, r2, r3
 800815c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800815e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008162:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008166:	f7f8 f82f 	bl	80001c8 <__aeabi_uldivmod>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4b0d      	ldr	r3, [pc, #52]	@ (80081a4 <UART_SetConfig+0x2d4>)
 8008170:	fba3 1302 	umull	r1, r3, r3, r2
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	2164      	movs	r1, #100	@ 0x64
 8008178:	fb01 f303 	mul.w	r3, r1, r3
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	3332      	adds	r3, #50	@ 0x32
 8008182:	4a08      	ldr	r2, [pc, #32]	@ (80081a4 <UART_SetConfig+0x2d4>)
 8008184:	fba2 2303 	umull	r2, r3, r2, r3
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	f003 0207 	and.w	r2, r3, #7
 800818e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4422      	add	r2, r4
 8008196:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008198:	e106      	b.n	80083a8 <UART_SetConfig+0x4d8>
 800819a:	bf00      	nop
 800819c:	40011000 	.word	0x40011000
 80081a0:	40011400 	.word	0x40011400
 80081a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80081b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80081ba:	4642      	mov	r2, r8
 80081bc:	464b      	mov	r3, r9
 80081be:	1891      	adds	r1, r2, r2
 80081c0:	6239      	str	r1, [r7, #32]
 80081c2:	415b      	adcs	r3, r3
 80081c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80081c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081ca:	4641      	mov	r1, r8
 80081cc:	1854      	adds	r4, r2, r1
 80081ce:	4649      	mov	r1, r9
 80081d0:	eb43 0501 	adc.w	r5, r3, r1
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 0300 	mov.w	r3, #0
 80081dc:	00eb      	lsls	r3, r5, #3
 80081de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081e2:	00e2      	lsls	r2, r4, #3
 80081e4:	4614      	mov	r4, r2
 80081e6:	461d      	mov	r5, r3
 80081e8:	4643      	mov	r3, r8
 80081ea:	18e3      	adds	r3, r4, r3
 80081ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081f0:	464b      	mov	r3, r9
 80081f2:	eb45 0303 	adc.w	r3, r5, r3
 80081f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008206:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800820a:	f04f 0200 	mov.w	r2, #0
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008216:	4629      	mov	r1, r5
 8008218:	008b      	lsls	r3, r1, #2
 800821a:	4621      	mov	r1, r4
 800821c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008220:	4621      	mov	r1, r4
 8008222:	008a      	lsls	r2, r1, #2
 8008224:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008228:	f7f7 ffce 	bl	80001c8 <__aeabi_uldivmod>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4b60      	ldr	r3, [pc, #384]	@ (80083b4 <UART_SetConfig+0x4e4>)
 8008232:	fba3 2302 	umull	r2, r3, r3, r2
 8008236:	095b      	lsrs	r3, r3, #5
 8008238:	011c      	lsls	r4, r3, #4
 800823a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800823e:	2200      	movs	r2, #0
 8008240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008244:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008248:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800824c:	4642      	mov	r2, r8
 800824e:	464b      	mov	r3, r9
 8008250:	1891      	adds	r1, r2, r2
 8008252:	61b9      	str	r1, [r7, #24]
 8008254:	415b      	adcs	r3, r3
 8008256:	61fb      	str	r3, [r7, #28]
 8008258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800825c:	4641      	mov	r1, r8
 800825e:	1851      	adds	r1, r2, r1
 8008260:	6139      	str	r1, [r7, #16]
 8008262:	4649      	mov	r1, r9
 8008264:	414b      	adcs	r3, r1
 8008266:	617b      	str	r3, [r7, #20]
 8008268:	f04f 0200 	mov.w	r2, #0
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008274:	4659      	mov	r1, fp
 8008276:	00cb      	lsls	r3, r1, #3
 8008278:	4651      	mov	r1, sl
 800827a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800827e:	4651      	mov	r1, sl
 8008280:	00ca      	lsls	r2, r1, #3
 8008282:	4610      	mov	r0, r2
 8008284:	4619      	mov	r1, r3
 8008286:	4603      	mov	r3, r0
 8008288:	4642      	mov	r2, r8
 800828a:	189b      	adds	r3, r3, r2
 800828c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008290:	464b      	mov	r3, r9
 8008292:	460a      	mov	r2, r1
 8008294:	eb42 0303 	adc.w	r3, r2, r3
 8008298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800829c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80082b4:	4649      	mov	r1, r9
 80082b6:	008b      	lsls	r3, r1, #2
 80082b8:	4641      	mov	r1, r8
 80082ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082be:	4641      	mov	r1, r8
 80082c0:	008a      	lsls	r2, r1, #2
 80082c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80082c6:	f7f7 ff7f 	bl	80001c8 <__aeabi_uldivmod>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4611      	mov	r1, r2
 80082d0:	4b38      	ldr	r3, [pc, #224]	@ (80083b4 <UART_SetConfig+0x4e4>)
 80082d2:	fba3 2301 	umull	r2, r3, r3, r1
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	2264      	movs	r2, #100	@ 0x64
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	1acb      	subs	r3, r1, r3
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	3332      	adds	r3, #50	@ 0x32
 80082e4:	4a33      	ldr	r2, [pc, #204]	@ (80083b4 <UART_SetConfig+0x4e4>)
 80082e6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ea:	095b      	lsrs	r3, r3, #5
 80082ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082f0:	441c      	add	r4, r3
 80082f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082f6:	2200      	movs	r2, #0
 80082f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80082fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80082fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008300:	4642      	mov	r2, r8
 8008302:	464b      	mov	r3, r9
 8008304:	1891      	adds	r1, r2, r2
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	415b      	adcs	r3, r3
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008310:	4641      	mov	r1, r8
 8008312:	1851      	adds	r1, r2, r1
 8008314:	6039      	str	r1, [r7, #0]
 8008316:	4649      	mov	r1, r9
 8008318:	414b      	adcs	r3, r1
 800831a:	607b      	str	r3, [r7, #4]
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008328:	4659      	mov	r1, fp
 800832a:	00cb      	lsls	r3, r1, #3
 800832c:	4651      	mov	r1, sl
 800832e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008332:	4651      	mov	r1, sl
 8008334:	00ca      	lsls	r2, r1, #3
 8008336:	4610      	mov	r0, r2
 8008338:	4619      	mov	r1, r3
 800833a:	4603      	mov	r3, r0
 800833c:	4642      	mov	r2, r8
 800833e:	189b      	adds	r3, r3, r2
 8008340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008342:	464b      	mov	r3, r9
 8008344:	460a      	mov	r2, r1
 8008346:	eb42 0303 	adc.w	r3, r2, r3
 800834a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	663b      	str	r3, [r7, #96]	@ 0x60
 8008356:	667a      	str	r2, [r7, #100]	@ 0x64
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008364:	4649      	mov	r1, r9
 8008366:	008b      	lsls	r3, r1, #2
 8008368:	4641      	mov	r1, r8
 800836a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800836e:	4641      	mov	r1, r8
 8008370:	008a      	lsls	r2, r1, #2
 8008372:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008376:	f7f7 ff27 	bl	80001c8 <__aeabi_uldivmod>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	4b0d      	ldr	r3, [pc, #52]	@ (80083b4 <UART_SetConfig+0x4e4>)
 8008380:	fba3 1302 	umull	r1, r3, r3, r2
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	2164      	movs	r1, #100	@ 0x64
 8008388:	fb01 f303 	mul.w	r3, r1, r3
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	011b      	lsls	r3, r3, #4
 8008390:	3332      	adds	r3, #50	@ 0x32
 8008392:	4a08      	ldr	r2, [pc, #32]	@ (80083b4 <UART_SetConfig+0x4e4>)
 8008394:	fba2 2303 	umull	r2, r3, r2, r3
 8008398:	095b      	lsrs	r3, r3, #5
 800839a:	f003 020f 	and.w	r2, r3, #15
 800839e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4422      	add	r2, r4
 80083a6:	609a      	str	r2, [r3, #8]
}
 80083a8:	bf00      	nop
 80083aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80083ae:	46bd      	mov	sp, r7
 80083b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083b4:	51eb851f 	.word	0x51eb851f

080083b8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80083b8:	b084      	sub	sp, #16
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	f107 001c 	add.w	r0, r7, #28
 80083c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80083ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80083d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80083d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80083d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80083d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80083d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80083da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80083dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80083de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80083e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80083e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80083f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	431a      	orrs	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	b004      	add	sp, #16
 800840c:	4770      	bx	lr

0800840e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2203      	movs	r2, #3
 8008456:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0303 	and.w	r3, r3, #3
}
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084a0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80084a6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80084ac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80084bc:	f023 030f 	bic.w	r3, r3, #15
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	b2db      	uxtb	r3, r3
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	3314      	adds	r3, #20
 80084fe:	461a      	mov	r2, r3
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	4413      	add	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
}  
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008516:	b480      	push	{r7}
 8008518:	b085      	sub	sp, #20
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800853c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008542:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008548:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	4313      	orrs	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008554:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	431a      	orrs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008560:	2300      	movs	r3, #0

}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b088      	sub	sp, #32
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800857c:	2310      	movs	r3, #16
 800857e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008580:	2340      	movs	r3, #64	@ 0x40
 8008582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008584:	2300      	movs	r3, #0
 8008586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008588:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800858c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800858e:	f107 0308 	add.w	r3, r7, #8
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff ff74 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800859a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800859e:	2110      	movs	r1, #16
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f9d7 	bl	8008954 <SDMMC_GetCmdResp1>
 80085a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085a8:	69fb      	ldr	r3, [r7, #28]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3720      	adds	r7, #32
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b088      	sub	sp, #32
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80085c0:	2311      	movs	r3, #17
 80085c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085c4:	2340      	movs	r3, #64	@ 0x40
 80085c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085d2:	f107 0308 	add.w	r3, r7, #8
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7ff ff52 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80085de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085e2:	2111      	movs	r1, #17
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f9b5 	bl	8008954 <SDMMC_GetCmdResp1>
 80085ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085ec:	69fb      	ldr	r3, [r7, #28]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3720      	adds	r7, #32
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b088      	sub	sp, #32
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008604:	2312      	movs	r3, #18
 8008606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008608:	2340      	movs	r3, #64	@ 0x40
 800860a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800860c:	2300      	movs	r3, #0
 800860e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008614:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008616:	f107 0308 	add.w	r3, r7, #8
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff ff30 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008626:	2112      	movs	r1, #18
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f993 	bl	8008954 <SDMMC_GetCmdResp1>
 800862e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008630:	69fb      	ldr	r3, [r7, #28]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3720      	adds	r7, #32
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b088      	sub	sp, #32
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008648:	2318      	movs	r3, #24
 800864a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800864c:	2340      	movs	r3, #64	@ 0x40
 800864e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008650:	2300      	movs	r3, #0
 8008652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008658:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800865a:	f107 0308 	add.w	r3, r7, #8
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff ff0e 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800866a:	2118      	movs	r1, #24
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f971 	bl	8008954 <SDMMC_GetCmdResp1>
 8008672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008674:	69fb      	ldr	r3, [r7, #28]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b088      	sub	sp, #32
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800868c:	2319      	movs	r3, #25
 800868e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008690:	2340      	movs	r3, #64	@ 0x40
 8008692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008698:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800869c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800869e:	f107 0308 	add.w	r3, r7, #8
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7ff feec 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80086aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086ae:	2119      	movs	r1, #25
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f94f 	bl	8008954 <SDMMC_GetCmdResp1>
 80086b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086b8:	69fb      	ldr	r3, [r7, #28]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3720      	adds	r7, #32
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80086d0:	230c      	movs	r3, #12
 80086d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086d4:	2340      	movs	r3, #64	@ 0x40
 80086d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086d8:	2300      	movs	r3, #0
 80086da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086e2:	f107 0308 	add.w	r3, r7, #8
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7ff feca 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80086ee:	4a05      	ldr	r2, [pc, #20]	@ (8008704 <SDMMC_CmdStopTransfer+0x40>)
 80086f0:	210c      	movs	r1, #12
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f92e 	bl	8008954 <SDMMC_GetCmdResp1>
 80086f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086fa:	69fb      	ldr	r3, [r7, #28]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3720      	adds	r7, #32
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	05f5e100 	.word	0x05f5e100

08008708 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08a      	sub	sp, #40	@ 0x28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008718:	2307      	movs	r3, #7
 800871a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800871c:	2340      	movs	r3, #64	@ 0x40
 800871e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008720:	2300      	movs	r3, #0
 8008722:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008724:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008728:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800872a:	f107 0310 	add.w	r3, r7, #16
 800872e:	4619      	mov	r1, r3
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff fea6 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800873a:	2107      	movs	r1, #7
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f909 	bl	8008954 <SDMMC_GetCmdResp1>
 8008742:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008746:	4618      	mov	r0, r3
 8008748:	3728      	adds	r7, #40	@ 0x28
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b088      	sub	sp, #32
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800875a:	2300      	movs	r3, #0
 800875c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800875e:	2300      	movs	r3, #0
 8008760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008762:	2300      	movs	r3, #0
 8008764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800876a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800876c:	f107 0308 	add.w	r3, r7, #8
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff fe85 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fb23 	bl	8008dc4 <SDMMC_GetCmdError>
 800877e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008780:	69fb      	ldr	r3, [r7, #28]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3720      	adds	r7, #32
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b088      	sub	sp, #32
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008792:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008798:	2308      	movs	r3, #8
 800879a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800879c:	2340      	movs	r3, #64	@ 0x40
 800879e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087a0:	2300      	movs	r3, #0
 80087a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087aa:	f107 0308 	add.w	r3, r7, #8
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff fe66 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fab6 	bl	8008d28 <SDMMC_GetCmdResp7>
 80087bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087be:	69fb      	ldr	r3, [r7, #28]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3720      	adds	r7, #32
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80087d6:	2337      	movs	r3, #55	@ 0x37
 80087d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087da:	2340      	movs	r3, #64	@ 0x40
 80087dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087de:	2300      	movs	r3, #0
 80087e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087e8:	f107 0308 	add.w	r3, r7, #8
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7ff fe47 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80087f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087f8:	2137      	movs	r1, #55	@ 0x37
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f8aa 	bl	8008954 <SDMMC_GetCmdResp1>
 8008800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008802:	69fb      	ldr	r3, [r7, #28]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3720      	adds	r7, #32
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800881c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008822:	2329      	movs	r3, #41	@ 0x29
 8008824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008826:	2340      	movs	r3, #64	@ 0x40
 8008828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800882a:	2300      	movs	r3, #0
 800882c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800882e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008832:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff fe21 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f9bd 	bl	8008bc0 <SDMMC_GetCmdResp3>
 8008846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008848:	69fb      	ldr	r3, [r7, #28]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3720      	adds	r7, #32
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b088      	sub	sp, #32
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800885e:	2302      	movs	r3, #2
 8008860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008862:	23c0      	movs	r3, #192	@ 0xc0
 8008864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008866:	2300      	movs	r3, #0
 8008868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800886a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800886e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008870:	f107 0308 	add.w	r3, r7, #8
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff fe03 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f957 	bl	8008b30 <SDMMC_GetCmdResp2>
 8008882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008884:	69fb      	ldr	r3, [r7, #28]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3720      	adds	r7, #32
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b088      	sub	sp, #32
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800889c:	2309      	movs	r3, #9
 800889e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80088a0:	23c0      	movs	r3, #192	@ 0xc0
 80088a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088a4:	2300      	movs	r3, #0
 80088a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088ae:	f107 0308 	add.w	r3, r7, #8
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff fde4 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f938 	bl	8008b30 <SDMMC_GetCmdResp2>
 80088c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088c2:	69fb      	ldr	r3, [r7, #28]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3720      	adds	r7, #32
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80088da:	2303      	movs	r3, #3
 80088dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088de:	2340      	movs	r3, #64	@ 0x40
 80088e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088ec:	f107 0308 	add.w	r3, r7, #8
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7ff fdc5 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	2103      	movs	r1, #3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f99d 	bl	8008c3c <SDMMC_GetCmdResp6>
 8008902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008904:	69fb      	ldr	r3, [r7, #28]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3720      	adds	r7, #32
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b088      	sub	sp, #32
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800891c:	230d      	movs	r3, #13
 800891e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008920:	2340      	movs	r3, #64	@ 0x40
 8008922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800892c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800892e:	f107 0308 	add.w	r3, r7, #8
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fda4 	bl	8008482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800893a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800893e:	210d      	movs	r1, #13
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f807 	bl	8008954 <SDMMC_GetCmdResp1>
 8008946:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008948:	69fb      	ldr	r3, [r7, #28]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3720      	adds	r7, #32
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b088      	sub	sp, #32
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	460b      	mov	r3, r1
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008962:	4b70      	ldr	r3, [pc, #448]	@ (8008b24 <SDMMC_GetCmdResp1+0x1d0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a70      	ldr	r2, [pc, #448]	@ (8008b28 <SDMMC_GetCmdResp1+0x1d4>)
 8008968:	fba2 2303 	umull	r2, r3, r2, r3
 800896c:	0a5a      	lsrs	r2, r3, #9
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	fb02 f303 	mul.w	r3, r2, r3
 8008974:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	1e5a      	subs	r2, r3, #1
 800897a:	61fa      	str	r2, [r7, #28]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d102      	bne.n	8008986 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008980:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008984:	e0c9      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800898a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0ef      	beq.n	8008976 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1ea      	bne.n	8008976 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2204      	movs	r2, #4
 80089b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089b2:	2304      	movs	r3, #4
 80089b4:	e0b1      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d004      	beq.n	80089cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2201      	movs	r2, #1
 80089c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0a6      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	22c5      	movs	r2, #197	@ 0xc5
 80089d0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f7ff fd7f 	bl	80084d6 <SDIO_GetCommandResponse>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	7afb      	ldrb	r3, [r7, #11]
 80089de:	4293      	cmp	r3, r2
 80089e0:	d001      	beq.n	80089e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e099      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80089e6:	2100      	movs	r1, #0
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7ff fd81 	bl	80084f0 <SDIO_GetResponse>
 80089ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	4b4e      	ldr	r3, [pc, #312]	@ (8008b2c <SDMMC_GetCmdResp1+0x1d8>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e08d      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	da02      	bge.n	8008a0a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008a04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a08:	e087      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008a14:	2340      	movs	r3, #64	@ 0x40
 8008a16:	e080      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008a22:	2380      	movs	r3, #128	@ 0x80
 8008a24:	e079      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008a30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a34:	e071      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008a40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a44:	e069      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a54:	e061      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008a60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008a64:	e059      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a74:	e051      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008a84:	e049      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008a90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008a94:	e041      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008aa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aa4:	e039      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008ab0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008ab4:	e031      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008ac0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008ac4:	e029      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008ad0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008ad4:	e021      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008ae0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008ae4:	e019      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008af0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008af4:	e011      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008b00:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008b04:	e009      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f003 0308 	and.w	r3, r3, #8
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008b10:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008b14:	e001      	b.n	8008b1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008b16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3720      	adds	r7, #32
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	2000000c 	.word	0x2000000c
 8008b28:	10624dd3 	.word	0x10624dd3
 8008b2c:	fdffe008 	.word	0xfdffe008

08008b30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b38:	4b1f      	ldr	r3, [pc, #124]	@ (8008bb8 <SDMMC_GetCmdResp2+0x88>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8008bbc <SDMMC_GetCmdResp2+0x8c>)
 8008b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b42:	0a5b      	lsrs	r3, r3, #9
 8008b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b48:	fb02 f303 	mul.w	r3, r2, r3
 8008b4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	1e5a      	subs	r2, r3, #1
 8008b52:	60fa      	str	r2, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008b5c:	e026      	b.n	8008bac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0ef      	beq.n	8008b4e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1ea      	bne.n	8008b4e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2204      	movs	r2, #4
 8008b88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b8a:	2304      	movs	r3, #4
 8008b8c:	e00e      	b.n	8008bac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e003      	b.n	8008bac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	22c5      	movs	r2, #197	@ 0xc5
 8008ba8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	2000000c 	.word	0x2000000c
 8008bbc:	10624dd3 	.word	0x10624dd3

08008bc0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c34 <SDMMC_GetCmdResp3+0x74>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8008c38 <SDMMC_GetCmdResp3+0x78>)
 8008bce:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd2:	0a5b      	lsrs	r3, r3, #9
 8008bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bd8:	fb02 f303 	mul.w	r3, r2, r3
 8008bdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	1e5a      	subs	r2, r3, #1
 8008be2:	60fa      	str	r2, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d102      	bne.n	8008bee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008be8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008bec:	e01b      	b.n	8008c26 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0ef      	beq.n	8008bde <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1ea      	bne.n	8008bde <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d004      	beq.n	8008c1e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2204      	movs	r2, #4
 8008c18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c1a:	2304      	movs	r3, #4
 8008c1c:	e003      	b.n	8008c26 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	22c5      	movs	r2, #197	@ 0xc5
 8008c22:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	2000000c 	.word	0x2000000c
 8008c38:	10624dd3 	.word	0x10624dd3

08008c3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	460b      	mov	r3, r1
 8008c46:	607a      	str	r2, [r7, #4]
 8008c48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c4a:	4b35      	ldr	r3, [pc, #212]	@ (8008d20 <SDMMC_GetCmdResp6+0xe4>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a35      	ldr	r2, [pc, #212]	@ (8008d24 <SDMMC_GetCmdResp6+0xe8>)
 8008c50:	fba2 2303 	umull	r2, r3, r2, r3
 8008c54:	0a5b      	lsrs	r3, r3, #9
 8008c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c5a:	fb02 f303 	mul.w	r3, r2, r3
 8008c5e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	1e5a      	subs	r2, r3, #1
 8008c64:	61fa      	str	r2, [r7, #28]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008c6e:	e052      	b.n	8008d16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c74:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0ef      	beq.n	8008c60 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1ea      	bne.n	8008c60 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c8e:	f003 0304 	and.w	r3, r3, #4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d004      	beq.n	8008ca0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2204      	movs	r2, #4
 8008c9a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c9c:	2304      	movs	r3, #4
 8008c9e:	e03a      	b.n	8008d16 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d004      	beq.n	8008cb6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e02f      	b.n	8008d16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f7ff fc0d 	bl	80084d6 <SDIO_GetCommandResponse>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	7afb      	ldrb	r3, [r7, #11]
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d001      	beq.n	8008cca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e025      	b.n	8008d16 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	22c5      	movs	r2, #197	@ 0xc5
 8008cce:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff fc0c 	bl	80084f0 <SDIO_GetResponse>
 8008cd8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d106      	bne.n	8008cf2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	0c1b      	lsrs	r3, r3, #16
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e011      	b.n	8008d16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008d00:	e009      	b.n	8008d16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008d10:	e001      	b.n	8008d16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3720      	adds	r7, #32
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	2000000c 	.word	0x2000000c
 8008d24:	10624dd3 	.word	0x10624dd3

08008d28 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d30:	4b22      	ldr	r3, [pc, #136]	@ (8008dbc <SDMMC_GetCmdResp7+0x94>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a22      	ldr	r2, [pc, #136]	@ (8008dc0 <SDMMC_GetCmdResp7+0x98>)
 8008d36:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3a:	0a5b      	lsrs	r3, r3, #9
 8008d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d40:	fb02 f303 	mul.w	r3, r2, r3
 8008d44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	1e5a      	subs	r2, r3, #1
 8008d4a:	60fa      	str	r2, [r7, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008d54:	e02c      	b.n	8008db0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0ef      	beq.n	8008d46 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1ea      	bne.n	8008d46 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d004      	beq.n	8008d86 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2204      	movs	r2, #4
 8008d80:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d82:	2304      	movs	r3, #4
 8008d84:	e014      	b.n	8008db0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d004      	beq.n	8008d9c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e009      	b.n	8008db0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2240      	movs	r2, #64	@ 0x40
 8008dac:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008dae:	2300      	movs	r3, #0
  
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	2000000c 	.word	0x2000000c
 8008dc0:	10624dd3 	.word	0x10624dd3

08008dc4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008dcc:	4b11      	ldr	r3, [pc, #68]	@ (8008e14 <SDMMC_GetCmdError+0x50>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a11      	ldr	r2, [pc, #68]	@ (8008e18 <SDMMC_GetCmdError+0x54>)
 8008dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd6:	0a5b      	lsrs	r3, r3, #9
 8008dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ddc:	fb02 f303 	mul.w	r3, r2, r3
 8008de0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	1e5a      	subs	r2, r3, #1
 8008de6:	60fa      	str	r2, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d102      	bne.n	8008df2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008dec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008df0:	e009      	b.n	8008e06 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0f1      	beq.n	8008de2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	22c5      	movs	r2, #197	@ 0xc5
 8008e02:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	2000000c 	.word	0x2000000c
 8008e18:	10624dd3 	.word	0x10624dd3

08008e1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008e20:	4904      	ldr	r1, [pc, #16]	@ (8008e34 <MX_FATFS_Init+0x18>)
 8008e22:	4805      	ldr	r0, [pc, #20]	@ (8008e38 <MX_FATFS_Init+0x1c>)
 8008e24:	f002 fcf0 	bl	800b808 <FATFS_LinkDriver>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	4b03      	ldr	r3, [pc, #12]	@ (8008e3c <MX_FATFS_Init+0x20>)
 8008e2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008e30:	bf00      	nop
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	20000580 	.word	0x20000580
 8008e38:	0800c9c8 	.word	0x0800c9c8
 8008e3c:	2000057c 	.word	0x2000057c

08008e40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008e40:	b480      	push	{r7}
 8008e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008e44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008e5a:	f000 f86b 	bl	8008f34 <BSP_SD_IsDetected>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d001      	beq.n	8008e68 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e005      	b.n	8008e74 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008e68:	4804      	ldr	r0, [pc, #16]	@ (8008e7c <BSP_SD_Init+0x2c>)
 8008e6a:	f7fb fefd 	bl	8004c68 <HAL_SD_Init>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008e72:	79fb      	ldrb	r3, [r7, #7]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	200000fc 	.word	0x200000fc

08008e80 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	68f9      	ldr	r1, [r7, #12]
 8008e9c:	4806      	ldr	r0, [pc, #24]	@ (8008eb8 <BSP_SD_ReadBlocks+0x38>)
 8008e9e:	f7fb ff93 	bl	8004dc8 <HAL_SD_ReadBlocks>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	200000fc 	.word	0x200000fc

08008ebc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af02      	add	r7, sp, #8
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	68f9      	ldr	r1, [r7, #12]
 8008ed8:	4806      	ldr	r0, [pc, #24]	@ (8008ef4 <BSP_SD_WriteBlocks+0x38>)
 8008eda:	f7fc f95b 	bl	8005194 <HAL_SD_WriteBlocks>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3718      	adds	r7, #24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	200000fc 	.word	0x200000fc

08008ef8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008efc:	4805      	ldr	r0, [pc, #20]	@ (8008f14 <BSP_SD_GetCardState+0x1c>)
 8008efe:	f7fc fca7 	bl	8005850 <HAL_SD_GetCardState>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	bf14      	ite	ne
 8008f08:	2301      	movne	r3, #1
 8008f0a:	2300      	moveq	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	200000fc 	.word	0x200000fc

08008f18 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	4803      	ldr	r0, [pc, #12]	@ (8008f30 <BSP_SD_GetCardInfo+0x18>)
 8008f24:	f7fc fc68 	bl	80057f8 <HAL_SD_GetCardInfo>
}
 8008f28:	bf00      	nop
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	200000fc 	.word	0x200000fc

08008f34 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	b2db      	uxtb	r3, r3
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
	...

08008f50 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f88 <SD_CheckStatus+0x38>)
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008f60:	f7ff ffca 	bl	8008ef8 <BSP_SD_GetCardState>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d107      	bne.n	8008f7a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008f6a:	4b07      	ldr	r3, [pc, #28]	@ (8008f88 <SD_CheckStatus+0x38>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	f023 0301 	bic.w	r3, r3, #1
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	4b04      	ldr	r3, [pc, #16]	@ (8008f88 <SD_CheckStatus+0x38>)
 8008f78:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008f7a:	4b03      	ldr	r3, [pc, #12]	@ (8008f88 <SD_CheckStatus+0x38>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b2db      	uxtb	r3, r3
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	20000015 	.word	0x20000015

08008f8c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008f96:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc4 <SD_initialize+0x38>)
 8008f98:	2201      	movs	r2, #1
 8008f9a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008f9c:	f7ff ff58 	bl	8008e50 <BSP_SD_Init>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d107      	bne.n	8008fb6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff ffd1 	bl	8008f50 <SD_CheckStatus>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	4b04      	ldr	r3, [pc, #16]	@ (8008fc4 <SD_initialize+0x38>)
 8008fb4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008fb6:	4b03      	ldr	r3, [pc, #12]	@ (8008fc4 <SD_initialize+0x38>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	b2db      	uxtb	r3, r3
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	20000015 	.word	0x20000015

08008fc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff ffbb 	bl	8008f50 <SD_CheckStatus>
 8008fda:	4603      	mov	r3, r0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
 8008fee:	603b      	str	r3, [r7, #0]
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	68b8      	ldr	r0, [r7, #8]
 8009002:	f7ff ff3d 	bl	8008e80 <BSP_SD_ReadBlocks>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d107      	bne.n	800901c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800900c:	bf00      	nop
 800900e:	f7ff ff73 	bl	8008ef8 <BSP_SD_GetCardState>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1fa      	bne.n	800900e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800901c:	7dfb      	ldrb	r3, [r7, #23]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b086      	sub	sp, #24
 800902a:	af00      	add	r7, sp, #0
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
 8009030:	603b      	str	r3, [r7, #0]
 8009032:	4603      	mov	r3, r0
 8009034:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800903a:	f04f 33ff 	mov.w	r3, #4294967295
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	68b8      	ldr	r0, [r7, #8]
 8009044:	f7ff ff3a 	bl	8008ebc <BSP_SD_WriteBlocks>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d107      	bne.n	800905e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800904e:	bf00      	nop
 8009050:	f7ff ff52 	bl	8008ef8 <BSP_SD_GetCardState>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1fa      	bne.n	8009050 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08c      	sub	sp, #48	@ 0x30
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	603a      	str	r2, [r7, #0]
 8009072:	71fb      	strb	r3, [r7, #7]
 8009074:	460b      	mov	r3, r1
 8009076:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800907e:	4b25      	ldr	r3, [pc, #148]	@ (8009114 <SD_ioctl+0xac>)
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	b2db      	uxtb	r3, r3
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <SD_ioctl+0x28>
 800908c:	2303      	movs	r3, #3
 800908e:	e03c      	b.n	800910a <SD_ioctl+0xa2>

  switch (cmd)
 8009090:	79bb      	ldrb	r3, [r7, #6]
 8009092:	2b03      	cmp	r3, #3
 8009094:	d834      	bhi.n	8009100 <SD_ioctl+0x98>
 8009096:	a201      	add	r2, pc, #4	@ (adr r2, 800909c <SD_ioctl+0x34>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	080090ad 	.word	0x080090ad
 80090a0:	080090b5 	.word	0x080090b5
 80090a4:	080090cd 	.word	0x080090cd
 80090a8:	080090e7 	.word	0x080090e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80090b2:	e028      	b.n	8009106 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80090b4:	f107 030c 	add.w	r3, r7, #12
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7ff ff2d 	bl	8008f18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80090be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80090ca:	e01c      	b.n	8009106 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80090cc:	f107 030c 	add.w	r3, r7, #12
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7ff ff21 	bl	8008f18 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80090d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d8:	b29a      	uxth	r2, r3
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80090e4:	e00f      	b.n	8009106 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80090e6:	f107 030c 	add.w	r3, r7, #12
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff ff14 	bl	8008f18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80090f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f2:	0a5a      	lsrs	r2, r3, #9
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80090fe:	e002      	b.n	8009106 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009100:	2304      	movs	r3, #4
 8009102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009106:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800910a:	4618      	mov	r0, r3
 800910c:	3730      	adds	r7, #48	@ 0x30
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20000015 	.word	0x20000015

08009118 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009122:	79fb      	ldrb	r3, [r7, #7]
 8009124:	4a08      	ldr	r2, [pc, #32]	@ (8009148 <disk_status+0x30>)
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	79fa      	ldrb	r2, [r7, #7]
 8009130:	4905      	ldr	r1, [pc, #20]	@ (8009148 <disk_status+0x30>)
 8009132:	440a      	add	r2, r1
 8009134:	7a12      	ldrb	r2, [r2, #8]
 8009136:	4610      	mov	r0, r2
 8009138:	4798      	blx	r3
 800913a:	4603      	mov	r3, r0
 800913c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	200005ac 	.word	0x200005ac

0800914c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	4a0e      	ldr	r2, [pc, #56]	@ (8009198 <disk_initialize+0x4c>)
 800915e:	5cd3      	ldrb	r3, [r2, r3]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d114      	bne.n	800918e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	4a0c      	ldr	r2, [pc, #48]	@ (8009198 <disk_initialize+0x4c>)
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	79fa      	ldrb	r2, [r7, #7]
 8009172:	4909      	ldr	r1, [pc, #36]	@ (8009198 <disk_initialize+0x4c>)
 8009174:	440a      	add	r2, r1
 8009176:	7a12      	ldrb	r2, [r2, #8]
 8009178:	4610      	mov	r0, r2
 800917a:	4798      	blx	r3
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d103      	bne.n	800918e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009186:	79fb      	ldrb	r3, [r7, #7]
 8009188:	4a03      	ldr	r2, [pc, #12]	@ (8009198 <disk_initialize+0x4c>)
 800918a:	2101      	movs	r1, #1
 800918c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	200005ac 	.word	0x200005ac

0800919c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800919c:	b590      	push	{r4, r7, lr}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60b9      	str	r1, [r7, #8]
 80091a4:	607a      	str	r2, [r7, #4]
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
 80091ae:	4a0a      	ldr	r2, [pc, #40]	@ (80091d8 <disk_read+0x3c>)
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	689c      	ldr	r4, [r3, #8]
 80091b8:	7bfb      	ldrb	r3, [r7, #15]
 80091ba:	4a07      	ldr	r2, [pc, #28]	@ (80091d8 <disk_read+0x3c>)
 80091bc:	4413      	add	r3, r2
 80091be:	7a18      	ldrb	r0, [r3, #8]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	68b9      	ldr	r1, [r7, #8]
 80091c6:	47a0      	blx	r4
 80091c8:	4603      	mov	r3, r0
 80091ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	371c      	adds	r7, #28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd90      	pop	{r4, r7, pc}
 80091d6:	bf00      	nop
 80091d8:	200005ac 	.word	0x200005ac

080091dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80091dc:	b590      	push	{r4, r7, lr}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	607a      	str	r2, [r7, #4]
 80091e6:	603b      	str	r3, [r7, #0]
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009218 <disk_write+0x3c>)
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	68dc      	ldr	r4, [r3, #12]
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	4a07      	ldr	r2, [pc, #28]	@ (8009218 <disk_write+0x3c>)
 80091fc:	4413      	add	r3, r2
 80091fe:	7a18      	ldrb	r0, [r3, #8]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	68b9      	ldr	r1, [r7, #8]
 8009206:	47a0      	blx	r4
 8009208:	4603      	mov	r3, r0
 800920a:	75fb      	strb	r3, [r7, #23]
  return res;
 800920c:	7dfb      	ldrb	r3, [r7, #23]
}
 800920e:	4618      	mov	r0, r3
 8009210:	371c      	adds	r7, #28
 8009212:	46bd      	mov	sp, r7
 8009214:	bd90      	pop	{r4, r7, pc}
 8009216:	bf00      	nop
 8009218:	200005ac 	.word	0x200005ac

0800921c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	603a      	str	r2, [r7, #0]
 8009226:	71fb      	strb	r3, [r7, #7]
 8009228:	460b      	mov	r3, r1
 800922a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	4a09      	ldr	r2, [pc, #36]	@ (8009254 <disk_ioctl+0x38>)
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	79fa      	ldrb	r2, [r7, #7]
 800923a:	4906      	ldr	r1, [pc, #24]	@ (8009254 <disk_ioctl+0x38>)
 800923c:	440a      	add	r2, r1
 800923e:	7a10      	ldrb	r0, [r2, #8]
 8009240:	79b9      	ldrb	r1, [r7, #6]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	4798      	blx	r3
 8009246:	4603      	mov	r3, r0
 8009248:	73fb      	strb	r3, [r7, #15]
  return res;
 800924a:	7bfb      	ldrb	r3, [r7, #15]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	200005ac 	.word	0x200005ac

08009258 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3301      	adds	r3, #1
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009268:	89fb      	ldrh	r3, [r7, #14]
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	b21a      	sxth	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	b21b      	sxth	r3, r3
 8009274:	4313      	orrs	r3, r2
 8009276:	b21b      	sxth	r3, r3
 8009278:	81fb      	strh	r3, [r7, #14]
	return rv;
 800927a:	89fb      	ldrh	r3, [r7, #14]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3303      	adds	r3, #3
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	021b      	lsls	r3, r3, #8
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	3202      	adds	r2, #2
 80092a0:	7812      	ldrb	r2, [r2, #0]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	021b      	lsls	r3, r3, #8
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	3201      	adds	r2, #1
 80092ae:	7812      	ldrb	r2, [r2, #0]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	021b      	lsls	r3, r3, #8
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	7812      	ldrb	r2, [r2, #0]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]
	return rv;
 80092c0:	68fb      	ldr	r3, [r7, #12]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	1c5a      	adds	r2, r3, #1
 80092de:	607a      	str	r2, [r7, #4]
 80092e0:	887a      	ldrh	r2, [r7, #2]
 80092e2:	b2d2      	uxtb	r2, r2
 80092e4:	701a      	strb	r2, [r3, #0]
 80092e6:	887b      	ldrh	r3, [r7, #2]
 80092e8:	0a1b      	lsrs	r3, r3, #8
 80092ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	607a      	str	r2, [r7, #4]
 80092f2:	887a      	ldrh	r2, [r7, #2]
 80092f4:	b2d2      	uxtb	r2, r2
 80092f6:	701a      	strb	r2, [r3, #0]
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	607a      	str	r2, [r7, #4]
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	b2d2      	uxtb	r2, r2
 8009318:	701a      	strb	r2, [r3, #0]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	0a1b      	lsrs	r3, r3, #8
 800931e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	607a      	str	r2, [r7, #4]
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	b2d2      	uxtb	r2, r2
 800932a:	701a      	strb	r2, [r3, #0]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	0a1b      	lsrs	r3, r3, #8
 8009330:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	b2d2      	uxtb	r2, r2
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	0a1b      	lsrs	r3, r3, #8
 8009342:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	607a      	str	r2, [r7, #4]
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	b2d2      	uxtb	r2, r2
 800934e:	701a      	strb	r2, [r3, #0]
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800935c:	b480      	push	{r7}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00d      	beq.n	8009392 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	1c53      	adds	r3, r2, #1
 800937a:	613b      	str	r3, [r7, #16]
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	1c59      	adds	r1, r3, #1
 8009380:	6179      	str	r1, [r7, #20]
 8009382:	7812      	ldrb	r2, [r2, #0]
 8009384:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	3b01      	subs	r3, #1
 800938a:	607b      	str	r3, [r7, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1f1      	bne.n	8009376 <mem_cpy+0x1a>
	}
}
 8009392:	bf00      	nop
 8009394:	371c      	adds	r7, #28
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800939e:	b480      	push	{r7}
 80093a0:	b087      	sub	sp, #28
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	60f8      	str	r0, [r7, #12]
 80093a6:	60b9      	str	r1, [r7, #8]
 80093a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	617a      	str	r2, [r7, #20]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	b2d2      	uxtb	r2, r2
 80093b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	3b01      	subs	r3, #1
 80093be:	607b      	str	r3, [r7, #4]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1f3      	bne.n	80093ae <mem_set+0x10>
}
 80093c6:	bf00      	nop
 80093c8:	bf00      	nop
 80093ca:	371c      	adds	r7, #28
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80093d4:	b480      	push	{r7}
 80093d6:	b089      	sub	sp, #36	@ 0x24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	61fa      	str	r2, [r7, #28]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	4619      	mov	r1, r3
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	61ba      	str	r2, [r7, #24]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	1acb      	subs	r3, r1, r3
 8009400:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3b01      	subs	r3, #1
 8009406:	607b      	str	r3, [r7, #4]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <mem_cmp+0x40>
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0eb      	beq.n	80093ec <mem_cmp+0x18>

	return r;
 8009414:	697b      	ldr	r3, [r7, #20]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3724      	adds	r7, #36	@ 0x24
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800942c:	e002      	b.n	8009434 <chk_chr+0x12>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	3301      	adds	r3, #1
 8009432:	607b      	str	r3, [r7, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d005      	beq.n	8009448 <chk_chr+0x26>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	461a      	mov	r2, r3
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	4293      	cmp	r3, r2
 8009446:	d1f2      	bne.n	800942e <chk_chr+0xc>
	return *str;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	781b      	ldrb	r3, [r3, #0]
}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009462:	2300      	movs	r3, #0
 8009464:	60bb      	str	r3, [r7, #8]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	60fb      	str	r3, [r7, #12]
 800946a:	e029      	b.n	80094c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800946c:	4a27      	ldr	r2, [pc, #156]	@ (800950c <chk_lock+0xb4>)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	011b      	lsls	r3, r3, #4
 8009472:	4413      	add	r3, r2
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d01d      	beq.n	80094b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800947a:	4a24      	ldr	r2, [pc, #144]	@ (800950c <chk_lock+0xb4>)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	4413      	add	r3, r2
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d116      	bne.n	80094ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800948c:	4a1f      	ldr	r2, [pc, #124]	@ (800950c <chk_lock+0xb4>)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	011b      	lsls	r3, r3, #4
 8009492:	4413      	add	r3, r2
 8009494:	3304      	adds	r3, #4
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800949c:	429a      	cmp	r2, r3
 800949e:	d10c      	bne.n	80094ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80094a0:	4a1a      	ldr	r2, [pc, #104]	@ (800950c <chk_lock+0xb4>)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	011b      	lsls	r3, r3, #4
 80094a6:	4413      	add	r3, r2
 80094a8:	3308      	adds	r3, #8
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d102      	bne.n	80094ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80094b4:	e007      	b.n	80094c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80094b6:	2301      	movs	r3, #1
 80094b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3301      	adds	r3, #1
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d9d2      	bls.n	800946c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d109      	bne.n	80094e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d102      	bne.n	80094d8 <chk_lock+0x80>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d101      	bne.n	80094dc <chk_lock+0x84>
 80094d8:	2300      	movs	r3, #0
 80094da:	e010      	b.n	80094fe <chk_lock+0xa6>
 80094dc:	2312      	movs	r3, #18
 80094de:	e00e      	b.n	80094fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d108      	bne.n	80094f8 <chk_lock+0xa0>
 80094e6:	4a09      	ldr	r2, [pc, #36]	@ (800950c <chk_lock+0xb4>)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	4413      	add	r3, r2
 80094ee:	330c      	adds	r3, #12
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094f6:	d101      	bne.n	80094fc <chk_lock+0xa4>
 80094f8:	2310      	movs	r3, #16
 80094fa:	e000      	b.n	80094fe <chk_lock+0xa6>
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	2000058c 	.word	0x2000058c

08009510 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009516:	2300      	movs	r3, #0
 8009518:	607b      	str	r3, [r7, #4]
 800951a:	e002      	b.n	8009522 <enq_lock+0x12>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3301      	adds	r3, #1
 8009520:	607b      	str	r3, [r7, #4]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d806      	bhi.n	8009536 <enq_lock+0x26>
 8009528:	4a09      	ldr	r2, [pc, #36]	@ (8009550 <enq_lock+0x40>)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	011b      	lsls	r3, r3, #4
 800952e:	4413      	add	r3, r2
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1f2      	bne.n	800951c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b02      	cmp	r3, #2
 800953a:	bf14      	ite	ne
 800953c:	2301      	movne	r3, #1
 800953e:	2300      	moveq	r3, #0
 8009540:	b2db      	uxtb	r3, r3
}
 8009542:	4618      	mov	r0, r3
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	2000058c 	.word	0x2000058c

08009554 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	e01f      	b.n	80095a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009564:	4a41      	ldr	r2, [pc, #260]	@ (800966c <inc_lock+0x118>)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	4413      	add	r3, r2
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	429a      	cmp	r2, r3
 8009574:	d113      	bne.n	800959e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009576:	4a3d      	ldr	r2, [pc, #244]	@ (800966c <inc_lock+0x118>)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	011b      	lsls	r3, r3, #4
 800957c:	4413      	add	r3, r2
 800957e:	3304      	adds	r3, #4
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009586:	429a      	cmp	r2, r3
 8009588:	d109      	bne.n	800959e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800958a:	4a38      	ldr	r2, [pc, #224]	@ (800966c <inc_lock+0x118>)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	4413      	add	r3, r2
 8009592:	3308      	adds	r3, #8
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800959a:	429a      	cmp	r2, r3
 800959c:	d006      	beq.n	80095ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3301      	adds	r3, #1
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d9dc      	bls.n	8009564 <inc_lock+0x10>
 80095aa:	e000      	b.n	80095ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80095ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d132      	bne.n	800961a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	e002      	b.n	80095c0 <inc_lock+0x6c>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3301      	adds	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d806      	bhi.n	80095d4 <inc_lock+0x80>
 80095c6:	4a29      	ldr	r2, [pc, #164]	@ (800966c <inc_lock+0x118>)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	011b      	lsls	r3, r3, #4
 80095cc:	4413      	add	r3, r2
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1f2      	bne.n	80095ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d101      	bne.n	80095de <inc_lock+0x8a>
 80095da:	2300      	movs	r3, #0
 80095dc:	e040      	b.n	8009660 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	4922      	ldr	r1, [pc, #136]	@ (800966c <inc_lock+0x118>)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	011b      	lsls	r3, r3, #4
 80095e8:	440b      	add	r3, r1
 80095ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	491e      	ldr	r1, [pc, #120]	@ (800966c <inc_lock+0x118>)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	011b      	lsls	r3, r3, #4
 80095f6:	440b      	add	r3, r1
 80095f8:	3304      	adds	r3, #4
 80095fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	695a      	ldr	r2, [r3, #20]
 8009600:	491a      	ldr	r1, [pc, #104]	@ (800966c <inc_lock+0x118>)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	011b      	lsls	r3, r3, #4
 8009606:	440b      	add	r3, r1
 8009608:	3308      	adds	r3, #8
 800960a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800960c:	4a17      	ldr	r2, [pc, #92]	@ (800966c <inc_lock+0x118>)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	011b      	lsls	r3, r3, #4
 8009612:	4413      	add	r3, r2
 8009614:	330c      	adds	r3, #12
 8009616:	2200      	movs	r2, #0
 8009618:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d009      	beq.n	8009634 <inc_lock+0xe0>
 8009620:	4a12      	ldr	r2, [pc, #72]	@ (800966c <inc_lock+0x118>)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	011b      	lsls	r3, r3, #4
 8009626:	4413      	add	r3, r2
 8009628:	330c      	adds	r3, #12
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <inc_lock+0xe0>
 8009630:	2300      	movs	r3, #0
 8009632:	e015      	b.n	8009660 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d108      	bne.n	800964c <inc_lock+0xf8>
 800963a:	4a0c      	ldr	r2, [pc, #48]	@ (800966c <inc_lock+0x118>)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	4413      	add	r3, r2
 8009642:	330c      	adds	r3, #12
 8009644:	881b      	ldrh	r3, [r3, #0]
 8009646:	3301      	adds	r3, #1
 8009648:	b29a      	uxth	r2, r3
 800964a:	e001      	b.n	8009650 <inc_lock+0xfc>
 800964c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009650:	4906      	ldr	r1, [pc, #24]	@ (800966c <inc_lock+0x118>)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	011b      	lsls	r3, r3, #4
 8009656:	440b      	add	r3, r1
 8009658:	330c      	adds	r3, #12
 800965a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3301      	adds	r3, #1
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	2000058c 	.word	0x2000058c

08009670 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3b01      	subs	r3, #1
 800967c:	607b      	str	r3, [r7, #4]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d825      	bhi.n	80096d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009684:	4a17      	ldr	r2, [pc, #92]	@ (80096e4 <dec_lock+0x74>)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	011b      	lsls	r3, r3, #4
 800968a:	4413      	add	r3, r2
 800968c:	330c      	adds	r3, #12
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009692:	89fb      	ldrh	r3, [r7, #14]
 8009694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009698:	d101      	bne.n	800969e <dec_lock+0x2e>
 800969a:	2300      	movs	r3, #0
 800969c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800969e:	89fb      	ldrh	r3, [r7, #14]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <dec_lock+0x3a>
 80096a4:	89fb      	ldrh	r3, [r7, #14]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80096aa:	4a0e      	ldr	r2, [pc, #56]	@ (80096e4 <dec_lock+0x74>)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	4413      	add	r3, r2
 80096b2:	330c      	adds	r3, #12
 80096b4:	89fa      	ldrh	r2, [r7, #14]
 80096b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80096b8:	89fb      	ldrh	r3, [r7, #14]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d105      	bne.n	80096ca <dec_lock+0x5a>
 80096be:	4a09      	ldr	r2, [pc, #36]	@ (80096e4 <dec_lock+0x74>)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	011b      	lsls	r3, r3, #4
 80096c4:	4413      	add	r3, r2
 80096c6:	2200      	movs	r2, #0
 80096c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	737b      	strb	r3, [r7, #13]
 80096ce:	e001      	b.n	80096d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80096d0:	2302      	movs	r3, #2
 80096d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80096d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	2000058c 	.word	0x2000058c

080096e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80096f0:	2300      	movs	r3, #0
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	e010      	b.n	8009718 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80096f6:	4a0d      	ldr	r2, [pc, #52]	@ (800972c <clear_lock+0x44>)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	011b      	lsls	r3, r3, #4
 80096fc:	4413      	add	r3, r2
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	429a      	cmp	r2, r3
 8009704:	d105      	bne.n	8009712 <clear_lock+0x2a>
 8009706:	4a09      	ldr	r2, [pc, #36]	@ (800972c <clear_lock+0x44>)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	011b      	lsls	r3, r3, #4
 800970c:	4413      	add	r3, r2
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3301      	adds	r3, #1
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d9eb      	bls.n	80096f6 <clear_lock+0xe>
	}
}
 800971e:	bf00      	nop
 8009720:	bf00      	nop
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	2000058c 	.word	0x2000058c

08009730 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	78db      	ldrb	r3, [r3, #3]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d034      	beq.n	80097ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009748:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	7858      	ldrb	r0, [r3, #1]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009754:	2301      	movs	r3, #1
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	f7ff fd40 	bl	80091dc <disk_write>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009762:	2301      	movs	r3, #1
 8009764:	73fb      	strb	r3, [r7, #15]
 8009766:	e022      	b.n	80097ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	1ad2      	subs	r2, r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	429a      	cmp	r2, r3
 800977c:	d217      	bcs.n	80097ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	789b      	ldrb	r3, [r3, #2]
 8009782:	613b      	str	r3, [r7, #16]
 8009784:	e010      	b.n	80097a8 <sync_window+0x78>
					wsect += fs->fsize;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	4413      	add	r3, r2
 800978e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	7858      	ldrb	r0, [r3, #1]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800979a:	2301      	movs	r3, #1
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	f7ff fd1d 	bl	80091dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	613b      	str	r3, [r7, #16]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d8eb      	bhi.n	8009786 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d01b      	beq.n	8009808 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7ff ffad 	bl	8009730 <sync_window>
 80097d6:	4603      	mov	r3, r0
 80097d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d113      	bne.n	8009808 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	7858      	ldrb	r0, [r3, #1]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80097ea:	2301      	movs	r3, #1
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	f7ff fcd5 	bl	800919c <disk_read>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d004      	beq.n	8009802 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80097f8:	f04f 33ff 	mov.w	r3, #4294967295
 80097fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80097fe:	2301      	movs	r3, #1
 8009800:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8009808:	7bfb      	ldrb	r3, [r7, #15]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff ff87 	bl	8009730 <sync_window>
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d158      	bne.n	80098de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b03      	cmp	r3, #3
 8009832:	d148      	bne.n	80098c6 <sync_fs+0xb2>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	791b      	ldrb	r3, [r3, #4]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d144      	bne.n	80098c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	3330      	adds	r3, #48	@ 0x30
 8009840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009844:	2100      	movs	r1, #0
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff fda9 	bl	800939e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3330      	adds	r3, #48	@ 0x30
 8009850:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009854:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff fd38 	bl	80092ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3330      	adds	r3, #48	@ 0x30
 8009862:	4921      	ldr	r1, [pc, #132]	@ (80098e8 <sync_fs+0xd4>)
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff fd4d 	bl	8009304 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3330      	adds	r3, #48	@ 0x30
 800986e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009872:	491e      	ldr	r1, [pc, #120]	@ (80098ec <sync_fs+0xd8>)
 8009874:	4618      	mov	r0, r3
 8009876:	f7ff fd45 	bl	8009304 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	3330      	adds	r3, #48	@ 0x30
 800987e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	4619      	mov	r1, r3
 8009888:	4610      	mov	r0, r2
 800988a:	f7ff fd3b 	bl	8009304 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3330      	adds	r3, #48	@ 0x30
 8009892:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	4619      	mov	r1, r3
 800989c:	4610      	mov	r0, r2
 800989e:	f7ff fd31 	bl	8009304 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	7858      	ldrb	r0, [r3, #1]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ba:	2301      	movs	r3, #1
 80098bc:	f7ff fc8e 	bl	80091dc <disk_write>
			fs->fsi_flag = 0;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	785b      	ldrb	r3, [r3, #1]
 80098ca:	2200      	movs	r2, #0
 80098cc:	2100      	movs	r1, #0
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fca4 	bl	800921c <disk_ioctl>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <sync_fs+0xca>
 80098da:	2301      	movs	r3, #1
 80098dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	41615252 	.word	0x41615252
 80098ec:	61417272 	.word	0x61417272

080098f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	3b02      	subs	r3, #2
 80098fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	3b02      	subs	r3, #2
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	429a      	cmp	r2, r3
 800990a:	d301      	bcc.n	8009910 <clust2sect+0x20>
 800990c:	2300      	movs	r3, #0
 800990e:	e008      	b.n	8009922 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	895b      	ldrh	r3, [r3, #10]
 8009914:	461a      	mov	r2, r3
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	fb03 f202 	mul.w	r2, r3, r2
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009920:	4413      	add	r3, r2
}
 8009922:	4618      	mov	r0, r3
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b086      	sub	sp, #24
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d904      	bls.n	800994e <get_fat+0x20>
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d302      	bcc.n	8009954 <get_fat+0x26>
		val = 1;	/* Internal error */
 800994e:	2301      	movs	r3, #1
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	e08e      	b.n	8009a72 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009954:	f04f 33ff 	mov.w	r3, #4294967295
 8009958:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b03      	cmp	r3, #3
 8009960:	d061      	beq.n	8009a26 <get_fat+0xf8>
 8009962:	2b03      	cmp	r3, #3
 8009964:	dc7b      	bgt.n	8009a5e <get_fat+0x130>
 8009966:	2b01      	cmp	r3, #1
 8009968:	d002      	beq.n	8009970 <get_fat+0x42>
 800996a:	2b02      	cmp	r3, #2
 800996c:	d041      	beq.n	80099f2 <get_fat+0xc4>
 800996e:	e076      	b.n	8009a5e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	085b      	lsrs	r3, r3, #1
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	4413      	add	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	6a1a      	ldr	r2, [r3, #32]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	0a5b      	lsrs	r3, r3, #9
 8009986:	4413      	add	r3, r2
 8009988:	4619      	mov	r1, r3
 800998a:	6938      	ldr	r0, [r7, #16]
 800998c:	f7ff ff14 	bl	80097b8 <move_window>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d166      	bne.n	8009a64 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	1c5a      	adds	r2, r3, #1
 800999a:	60fa      	str	r2, [r7, #12]
 800999c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	4413      	add	r3, r2
 80099a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80099a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	6a1a      	ldr	r2, [r3, #32]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	0a5b      	lsrs	r3, r3, #9
 80099b2:	4413      	add	r3, r2
 80099b4:	4619      	mov	r1, r3
 80099b6:	6938      	ldr	r0, [r7, #16]
 80099b8:	f7ff fefe 	bl	80097b8 <move_window>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d152      	bne.n	8009a68 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	4413      	add	r3, r2
 80099cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80099d0:	021b      	lsls	r3, r3, #8
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	f003 0301 	and.w	r3, r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <get_fat+0xba>
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	091b      	lsrs	r3, r3, #4
 80099e6:	e002      	b.n	80099ee <get_fat+0xc0>
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099ee:	617b      	str	r3, [r7, #20]
			break;
 80099f0:	e03f      	b.n	8009a72 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	6a1a      	ldr	r2, [r3, #32]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	0a1b      	lsrs	r3, r3, #8
 80099fa:	4413      	add	r3, r2
 80099fc:	4619      	mov	r1, r3
 80099fe:	6938      	ldr	r0, [r7, #16]
 8009a00:	f7ff feda 	bl	80097b8 <move_window>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d130      	bne.n	8009a6c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009a18:	4413      	add	r3, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff fc1c 	bl	8009258 <ld_word>
 8009a20:	4603      	mov	r3, r0
 8009a22:	617b      	str	r3, [r7, #20]
			break;
 8009a24:	e025      	b.n	8009a72 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6a1a      	ldr	r2, [r3, #32]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	09db      	lsrs	r3, r3, #7
 8009a2e:	4413      	add	r3, r2
 8009a30:	4619      	mov	r1, r3
 8009a32:	6938      	ldr	r0, [r7, #16]
 8009a34:	f7ff fec0 	bl	80097b8 <move_window>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d118      	bne.n	8009a70 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009a4c:	4413      	add	r3, r2
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff fc1a 	bl	8009288 <ld_dword>
 8009a54:	4603      	mov	r3, r0
 8009a56:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009a5a:	617b      	str	r3, [r7, #20]
			break;
 8009a5c:	e009      	b.n	8009a72 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009a5e:	2301      	movs	r3, #1
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	e006      	b.n	8009a72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a64:	bf00      	nop
 8009a66:	e004      	b.n	8009a72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a68:	bf00      	nop
 8009a6a:	e002      	b.n	8009a72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009a6c:	bf00      	nop
 8009a6e:	e000      	b.n	8009a72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009a70:	bf00      	nop
		}
	}

	return val;
 8009a72:	697b      	ldr	r3, [r7, #20]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009a7c:	b590      	push	{r4, r7, lr}
 8009a7e:	b089      	sub	sp, #36	@ 0x24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009a88:	2302      	movs	r3, #2
 8009a8a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	f240 80d9 	bls.w	8009c46 <put_fat+0x1ca>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	f080 80d3 	bcs.w	8009c46 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	f000 8096 	beq.w	8009bd6 <put_fat+0x15a>
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	f300 80cb 	bgt.w	8009c46 <put_fat+0x1ca>
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d002      	beq.n	8009aba <put_fat+0x3e>
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d06e      	beq.n	8009b96 <put_fat+0x11a>
 8009ab8:	e0c5      	b.n	8009c46 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	61bb      	str	r3, [r7, #24]
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	085b      	lsrs	r3, r3, #1
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6a1a      	ldr	r2, [r3, #32]
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	0a5b      	lsrs	r3, r3, #9
 8009ad0:	4413      	add	r3, r2
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f7ff fe6f 	bl	80097b8 <move_window>
 8009ada:	4603      	mov	r3, r0
 8009adc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ade:	7ffb      	ldrb	r3, [r7, #31]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f040 80a9 	bne.w	8009c38 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	1c59      	adds	r1, r3, #1
 8009af0:	61b9      	str	r1, [r7, #24]
 8009af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af6:	4413      	add	r3, r2
 8009af8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00d      	beq.n	8009b20 <put_fat+0xa4>
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	b25b      	sxtb	r3, r3
 8009b0a:	f003 030f 	and.w	r3, r3, #15
 8009b0e:	b25a      	sxtb	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	011b      	lsls	r3, r3, #4
 8009b16:	b25b      	sxtb	r3, r3
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	b25b      	sxtb	r3, r3
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	e001      	b.n	8009b24 <put_fat+0xa8>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6a1a      	ldr	r2, [r3, #32]
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	0a5b      	lsrs	r3, r3, #9
 8009b36:	4413      	add	r3, r2
 8009b38:	4619      	mov	r1, r3
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f7ff fe3c 	bl	80097b8 <move_window>
 8009b40:	4603      	mov	r3, r0
 8009b42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b44:	7ffb      	ldrb	r3, [r7, #31]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d178      	bne.n	8009c3c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b56:	4413      	add	r3, r2
 8009b58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <put_fat+0xf0>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	091b      	lsrs	r3, r3, #4
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	e00e      	b.n	8009b8a <put_fat+0x10e>
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	b25b      	sxtb	r3, r3
 8009b72:	f023 030f 	bic.w	r3, r3, #15
 8009b76:	b25a      	sxtb	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	0a1b      	lsrs	r3, r3, #8
 8009b7c:	b25b      	sxtb	r3, r3
 8009b7e:	f003 030f 	and.w	r3, r3, #15
 8009b82:	b25b      	sxtb	r3, r3
 8009b84:	4313      	orrs	r3, r2
 8009b86:	b25b      	sxtb	r3, r3
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	70da      	strb	r2, [r3, #3]
			break;
 8009b94:	e057      	b.n	8009c46 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a1a      	ldr	r2, [r3, #32]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	0a1b      	lsrs	r3, r3, #8
 8009b9e:	4413      	add	r3, r2
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f7ff fe08 	bl	80097b8 <move_window>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009bac:	7ffb      	ldrb	r3, [r7, #31]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d146      	bne.n	8009c40 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009bc0:	4413      	add	r3, r2
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	b292      	uxth	r2, r2
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7ff fb80 	bl	80092ce <st_word>
			fs->wflag = 1;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	70da      	strb	r2, [r3, #3]
			break;
 8009bd4:	e037      	b.n	8009c46 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6a1a      	ldr	r2, [r3, #32]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	09db      	lsrs	r3, r3, #7
 8009bde:	4413      	add	r3, r2
 8009be0:	4619      	mov	r1, r3
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f7ff fde8 	bl	80097b8 <move_window>
 8009be8:	4603      	mov	r3, r0
 8009bea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009bec:	7ffb      	ldrb	r3, [r7, #31]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d128      	bne.n	8009c44 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009c06:	4413      	add	r3, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff fb3d 	bl	8009288 <ld_dword>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009c14:	4323      	orrs	r3, r4
 8009c16:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009c26:	4413      	add	r3, r2
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7ff fb6a 	bl	8009304 <st_dword>
			fs->wflag = 1;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2201      	movs	r2, #1
 8009c34:	70da      	strb	r2, [r3, #3]
			break;
 8009c36:	e006      	b.n	8009c46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009c38:	bf00      	nop
 8009c3a:	e004      	b.n	8009c46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009c3c:	bf00      	nop
 8009c3e:	e002      	b.n	8009c46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009c40:	bf00      	nop
 8009c42:	e000      	b.n	8009c46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009c44:	bf00      	nop
		}
	}
	return res;
 8009c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3724      	adds	r7, #36	@ 0x24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd90      	pop	{r4, r7, pc}

08009c50 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d904      	bls.n	8009c76 <remove_chain+0x26>
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d301      	bcc.n	8009c7a <remove_chain+0x2a>
 8009c76:	2302      	movs	r3, #2
 8009c78:	e04b      	b.n	8009d12 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00c      	beq.n	8009c9a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009c80:	f04f 32ff 	mov.w	r2, #4294967295
 8009c84:	6879      	ldr	r1, [r7, #4]
 8009c86:	69b8      	ldr	r0, [r7, #24]
 8009c88:	f7ff fef8 	bl	8009a7c <put_fat>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009c90:	7ffb      	ldrb	r3, [r7, #31]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <remove_chain+0x4a>
 8009c96:	7ffb      	ldrb	r3, [r7, #31]
 8009c98:	e03b      	b.n	8009d12 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009c9a:	68b9      	ldr	r1, [r7, #8]
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f7ff fe46 	bl	800992e <get_fat>
 8009ca2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d031      	beq.n	8009d0e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d101      	bne.n	8009cb4 <remove_chain+0x64>
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	e02e      	b.n	8009d12 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cba:	d101      	bne.n	8009cc0 <remove_chain+0x70>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e028      	b.n	8009d12 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	68b9      	ldr	r1, [r7, #8]
 8009cc4:	69b8      	ldr	r0, [r7, #24]
 8009cc6:	f7ff fed9 	bl	8009a7c <put_fat>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009cce:	7ffb      	ldrb	r3, [r7, #31]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <remove_chain+0x88>
 8009cd4:	7ffb      	ldrb	r3, [r7, #31]
 8009cd6:	e01c      	b.n	8009d12 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	691a      	ldr	r2, [r3, #16]
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	3b02      	subs	r3, #2
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d20b      	bcs.n	8009cfe <remove_chain+0xae>
			fs->free_clst++;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	791b      	ldrb	r3, [r3, #4]
 8009cf4:	f043 0301 	orr.w	r3, r3, #1
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d3c6      	bcc.n	8009c9a <remove_chain+0x4a>
 8009d0c:	e000      	b.n	8009d10 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009d0e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3720      	adds	r7, #32
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b088      	sub	sp, #32
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10d      	bne.n	8009d4c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d004      	beq.n	8009d46 <create_chain+0x2c>
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	69ba      	ldr	r2, [r7, #24]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d31b      	bcc.n	8009d7e <create_chain+0x64>
 8009d46:	2301      	movs	r3, #1
 8009d48:	61bb      	str	r3, [r7, #24]
 8009d4a:	e018      	b.n	8009d7e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7ff fded 	bl	800992e <get_fat>
 8009d54:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d801      	bhi.n	8009d60 <create_chain+0x46>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e070      	b.n	8009e42 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d66:	d101      	bne.n	8009d6c <create_chain+0x52>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	e06a      	b.n	8009e42 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d201      	bcs.n	8009d7a <create_chain+0x60>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	e063      	b.n	8009e42 <create_chain+0x128>
		scl = clst;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	3301      	adds	r3, #1
 8009d86:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	69fa      	ldr	r2, [r7, #28]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d307      	bcc.n	8009da2 <create_chain+0x88>
				ncl = 2;
 8009d92:	2302      	movs	r3, #2
 8009d94:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009d96:	69fa      	ldr	r2, [r7, #28]
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d901      	bls.n	8009da2 <create_chain+0x88>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	e04f      	b.n	8009e42 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009da2:	69f9      	ldr	r1, [r7, #28]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7ff fdc2 	bl	800992e <get_fat>
 8009daa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00e      	beq.n	8009dd0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d003      	beq.n	8009dc0 <create_chain+0xa6>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbe:	d101      	bne.n	8009dc4 <create_chain+0xaa>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	e03e      	b.n	8009e42 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009dc4:	69fa      	ldr	r2, [r7, #28]
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d1da      	bne.n	8009d82 <create_chain+0x68>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	e038      	b.n	8009e42 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009dd0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd6:	69f9      	ldr	r1, [r7, #28]
 8009dd8:	6938      	ldr	r0, [r7, #16]
 8009dda:	f7ff fe4f 	bl	8009a7c <put_fat>
 8009dde:	4603      	mov	r3, r0
 8009de0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d109      	bne.n	8009dfc <create_chain+0xe2>
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d006      	beq.n	8009dfc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009dee:	69fa      	ldr	r2, [r7, #28]
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6938      	ldr	r0, [r7, #16]
 8009df4:	f7ff fe42 	bl	8009a7c <put_fat>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009dfc:	7dfb      	ldrb	r3, [r7, #23]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d116      	bne.n	8009e30 <create_chain+0x116>
		fs->last_clst = ncl;
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	69fa      	ldr	r2, [r7, #28]
 8009e06:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	691a      	ldr	r2, [r3, #16]
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	695b      	ldr	r3, [r3, #20]
 8009e10:	3b02      	subs	r3, #2
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d804      	bhi.n	8009e20 <create_chain+0x106>
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	1e5a      	subs	r2, r3, #1
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	791b      	ldrb	r3, [r3, #4]
 8009e24:	f043 0301 	orr.w	r3, r3, #1
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	711a      	strb	r2, [r3, #4]
 8009e2e:	e007      	b.n	8009e40 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d102      	bne.n	8009e3c <create_chain+0x122>
 8009e36:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3a:	e000      	b.n	8009e3e <create_chain+0x124>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009e40:	69fb      	ldr	r3, [r7, #28]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3720      	adds	r7, #32
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b087      	sub	sp, #28
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5e:	3304      	adds	r3, #4
 8009e60:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	0a5b      	lsrs	r3, r3, #9
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	8952      	ldrh	r2, [r2, #10]
 8009e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e6e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	1d1a      	adds	r2, r3, #4
 8009e74:	613a      	str	r2, [r7, #16]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <clmt_clust+0x3a>
 8009e80:	2300      	movs	r3, #0
 8009e82:	e010      	b.n	8009ea6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d307      	bcc.n	8009e9c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	617b      	str	r3, [r7, #20]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	3304      	adds	r3, #4
 8009e98:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009e9a:	e7e9      	b.n	8009e70 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009e9c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	4413      	add	r3, r2
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	371c      	adds	r7, #28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b086      	sub	sp, #24
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ec8:	d204      	bcs.n	8009ed4 <dir_sdi+0x22>
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	f003 031f 	and.w	r3, r3, #31
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	e063      	b.n	8009fa0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d106      	bne.n	8009ef8 <dir_sdi+0x46>
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d902      	bls.n	8009ef8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10c      	bne.n	8009f18 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	095b      	lsrs	r3, r3, #5
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	8912      	ldrh	r2, [r2, #8]
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d301      	bcc.n	8009f0e <dir_sdi+0x5c>
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	e048      	b.n	8009fa0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	61da      	str	r2, [r3, #28]
 8009f16:	e029      	b.n	8009f6c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	895b      	ldrh	r3, [r3, #10]
 8009f1c:	025b      	lsls	r3, r3, #9
 8009f1e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009f20:	e019      	b.n	8009f56 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6979      	ldr	r1, [r7, #20]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff fd01 	bl	800992e <get_fat>
 8009f2c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f34:	d101      	bne.n	8009f3a <dir_sdi+0x88>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e032      	b.n	8009fa0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d904      	bls.n	8009f4a <dir_sdi+0x98>
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d301      	bcc.n	8009f4e <dir_sdi+0x9c>
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	e028      	b.n	8009fa0 <dir_sdi+0xee>
			ofs -= csz;
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d2e1      	bcs.n	8009f22 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009f5e:	6979      	ldr	r1, [r7, #20]
 8009f60:	6938      	ldr	r0, [r7, #16]
 8009f62:	f7ff fcc5 	bl	80098f0 <clust2sect>
 8009f66:	4602      	mov	r2, r0
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	69db      	ldr	r3, [r3, #28]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d101      	bne.n	8009f7e <dir_sdi+0xcc>
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	e010      	b.n	8009fa0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	69da      	ldr	r2, [r3, #28]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	0a5b      	lsrs	r3, r3, #9
 8009f86:	441a      	add	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f98:	441a      	add	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	3320      	adds	r3, #32
 8009fbe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <dir_next+0x28>
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009fce:	d301      	bcc.n	8009fd4 <dir_next+0x2c>
 8009fd0:	2304      	movs	r3, #4
 8009fd2:	e0aa      	b.n	800a12a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f040 8098 	bne.w	800a110 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	69db      	ldr	r3, [r3, #28]
 8009fe4:	1c5a      	adds	r2, r3, #1
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	699b      	ldr	r3, [r3, #24]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10b      	bne.n	800a00a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	095b      	lsrs	r3, r3, #5
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	8912      	ldrh	r2, [r2, #8]
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	f0c0 8088 	bcc.w	800a110 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	61da      	str	r2, [r3, #28]
 800a006:	2304      	movs	r3, #4
 800a008:	e08f      	b.n	800a12a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	0a5b      	lsrs	r3, r3, #9
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	8952      	ldrh	r2, [r2, #10]
 800a012:	3a01      	subs	r2, #1
 800a014:	4013      	ands	r3, r2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d17a      	bne.n	800a110 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	4619      	mov	r1, r3
 800a022:	4610      	mov	r0, r2
 800a024:	f7ff fc83 	bl	800992e <get_fat>
 800a028:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d801      	bhi.n	800a034 <dir_next+0x8c>
 800a030:	2302      	movs	r3, #2
 800a032:	e07a      	b.n	800a12a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03a:	d101      	bne.n	800a040 <dir_next+0x98>
 800a03c:	2301      	movs	r3, #1
 800a03e:	e074      	b.n	800a12a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	695b      	ldr	r3, [r3, #20]
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	429a      	cmp	r2, r3
 800a048:	d358      	bcc.n	800a0fc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d104      	bne.n	800a05a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	61da      	str	r2, [r3, #28]
 800a056:	2304      	movs	r3, #4
 800a058:	e067      	b.n	800a12a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	4619      	mov	r1, r3
 800a062:	4610      	mov	r0, r2
 800a064:	f7ff fe59 	bl	8009d1a <create_chain>
 800a068:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <dir_next+0xcc>
 800a070:	2307      	movs	r3, #7
 800a072:	e05a      	b.n	800a12a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d101      	bne.n	800a07e <dir_next+0xd6>
 800a07a:	2302      	movs	r3, #2
 800a07c:	e055      	b.n	800a12a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a084:	d101      	bne.n	800a08a <dir_next+0xe2>
 800a086:	2301      	movs	r3, #1
 800a088:	e04f      	b.n	800a12a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f7ff fb50 	bl	8009730 <sync_window>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <dir_next+0xf2>
 800a096:	2301      	movs	r3, #1
 800a098:	e047      	b.n	800a12a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3330      	adds	r3, #48	@ 0x30
 800a09e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff f97a 	bl	800939e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	613b      	str	r3, [r7, #16]
 800a0ae:	6979      	ldr	r1, [r7, #20]
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f7ff fc1d 	bl	80098f0 <clust2sect>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a0bc:	e012      	b.n	800a0e4 <dir_next+0x13c>
						fs->wflag = 1;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7ff fb33 	bl	8009730 <sync_window>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <dir_next+0x12c>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e02a      	b.n	800a12a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	613b      	str	r3, [r7, #16]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0de:	1c5a      	adds	r2, r3, #1
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	895b      	ldrh	r3, [r3, #10]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d3e6      	bcc.n	800a0be <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	1ad2      	subs	r2, r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a102:	6979      	ldr	r1, [r7, #20]
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f7ff fbf3 	bl	80098f0 <clust2sect>
 800a10a:	4602      	mov	r2, r0
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a122:	441a      	add	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b086      	sub	sp, #24
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a142:	2100      	movs	r1, #0
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7ff feb4 	bl	8009eb2 <dir_sdi>
 800a14a:	4603      	mov	r3, r0
 800a14c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d12b      	bne.n	800a1ac <dir_alloc+0x7a>
		n = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	4619      	mov	r1, r3
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f7ff fb2a 	bl	80097b8 <move_window>
 800a164:	4603      	mov	r3, r0
 800a166:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a168:	7dfb      	ldrb	r3, [r7, #23]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d11d      	bne.n	800a1aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2be5      	cmp	r3, #229	@ 0xe5
 800a176:	d004      	beq.n	800a182 <dir_alloc+0x50>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d107      	bne.n	800a192 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	3301      	adds	r3, #1
 800a186:	613b      	str	r3, [r7, #16]
 800a188:	693a      	ldr	r2, [r7, #16]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d102      	bne.n	800a196 <dir_alloc+0x64>
 800a190:	e00c      	b.n	800a1ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a192:	2300      	movs	r3, #0
 800a194:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a196:	2101      	movs	r1, #1
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff ff05 	bl	8009fa8 <dir_next>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d0d7      	beq.n	800a158 <dir_alloc+0x26>
 800a1a8:	e000      	b.n	800a1ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a1aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a1ac:	7dfb      	ldrb	r3, [r7, #23]
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	d101      	bne.n	800a1b6 <dir_alloc+0x84>
 800a1b2:	2307      	movs	r3, #7
 800a1b4:	75fb      	strb	r3, [r7, #23]
	return res;
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	331a      	adds	r3, #26
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7ff f842 	bl	8009258 <ld_word>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d109      	bne.n	800a1f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	3314      	adds	r3, #20
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7ff f837 	bl	8009258 <ld_word>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	041b      	lsls	r3, r3, #16
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	331a      	adds	r3, #26
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	b292      	uxth	r2, r2
 800a212:	4611      	mov	r1, r2
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff f85a 	bl	80092ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d109      	bne.n	800a236 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	f103 0214 	add.w	r2, r3, #20
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	0c1b      	lsrs	r3, r3, #16
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	4619      	mov	r1, r3
 800a230:	4610      	mov	r0, r2
 800a232:	f7ff f84c 	bl	80092ce <st_word>
	}
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b086      	sub	sp, #24
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a24c:	2100      	movs	r1, #0
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7ff fe2f 	bl	8009eb2 <dir_sdi>
 800a254:	4603      	mov	r3, r0
 800a256:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a258:	7dfb      	ldrb	r3, [r7, #23]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <dir_find+0x24>
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
 800a260:	e03e      	b.n	800a2e0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	69db      	ldr	r3, [r3, #28]
 800a266:	4619      	mov	r1, r3
 800a268:	6938      	ldr	r0, [r7, #16]
 800a26a:	f7ff faa5 	bl	80097b8 <move_window>
 800a26e:	4603      	mov	r3, r0
 800a270:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a272:	7dfb      	ldrb	r3, [r7, #23]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d12f      	bne.n	800a2d8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a280:	7bfb      	ldrb	r3, [r7, #15]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d102      	bne.n	800a28c <dir_find+0x4e>
 800a286:	2304      	movs	r3, #4
 800a288:	75fb      	strb	r3, [r7, #23]
 800a28a:	e028      	b.n	800a2de <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a1b      	ldr	r3, [r3, #32]
 800a290:	330b      	adds	r3, #11
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a298:	b2da      	uxtb	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	330b      	adds	r3, #11
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	f003 0308 	and.w	r3, r3, #8
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10a      	bne.n	800a2c4 <dir_find+0x86>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a18      	ldr	r0, [r3, #32]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	3324      	adds	r3, #36	@ 0x24
 800a2b6:	220b      	movs	r2, #11
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	f7ff f88b 	bl	80093d4 <mem_cmp>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f7ff fe6e 	bl	8009fa8 <dir_next>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0c5      	beq.n	800a262 <dir_find+0x24>
 800a2d6:	e002      	b.n	800a2de <dir_find+0xa0>
		if (res != FR_OK) break;
 800a2d8:	bf00      	nop
 800a2da:	e000      	b.n	800a2de <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a2dc:	bf00      	nop

	return res;
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff ff1a 	bl	800a132 <dir_alloc>
 800a2fe:	4603      	mov	r3, r0
 800a300:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d11c      	bne.n	800a342 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	4619      	mov	r1, r3
 800a30e:	68b8      	ldr	r0, [r7, #8]
 800a310:	f7ff fa52 	bl	80097b8 <move_window>
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d111      	bne.n	800a342 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	2220      	movs	r2, #32
 800a324:	2100      	movs	r1, #0
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff f839 	bl	800939e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a18      	ldr	r0, [r3, #32]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3324      	adds	r3, #36	@ 0x24
 800a334:	220b      	movs	r2, #11
 800a336:	4619      	mov	r1, r3
 800a338:	f7ff f810 	bl	800935c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2201      	movs	r2, #1
 800a340:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a342:	7bfb      	ldrb	r3, [r7, #15]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	3324      	adds	r3, #36	@ 0x24
 800a360:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a362:	220b      	movs	r2, #11
 800a364:	2120      	movs	r1, #32
 800a366:	68b8      	ldr	r0, [r7, #8]
 800a368:	f7ff f819 	bl	800939e <mem_set>
	si = i = 0; ni = 8;
 800a36c:	2300      	movs	r3, #0
 800a36e:	613b      	str	r3, [r7, #16]
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	61fb      	str	r3, [r7, #28]
 800a374:	2308      	movs	r3, #8
 800a376:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	61fa      	str	r2, [r7, #28]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4413      	add	r3, r2
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a386:	7efb      	ldrb	r3, [r7, #27]
 800a388:	2b20      	cmp	r3, #32
 800a38a:	d94e      	bls.n	800a42a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a38c:	7efb      	ldrb	r3, [r7, #27]
 800a38e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a390:	d006      	beq.n	800a3a0 <create_name+0x54>
 800a392:	7efb      	ldrb	r3, [r7, #27]
 800a394:	2b5c      	cmp	r3, #92	@ 0x5c
 800a396:	d110      	bne.n	800a3ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a398:	e002      	b.n	800a3a0 <create_name+0x54>
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	3301      	adds	r3, #1
 800a39e:	61fb      	str	r3, [r7, #28]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	2b2f      	cmp	r3, #47	@ 0x2f
 800a3aa:	d0f6      	beq.n	800a39a <create_name+0x4e>
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800a3b6:	d0f0      	beq.n	800a39a <create_name+0x4e>
			break;
 800a3b8:	e038      	b.n	800a42c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a3ba:	7efb      	ldrb	r3, [r7, #27]
 800a3bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3be:	d003      	beq.n	800a3c8 <create_name+0x7c>
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d30c      	bcc.n	800a3e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2b0b      	cmp	r3, #11
 800a3cc:	d002      	beq.n	800a3d4 <create_name+0x88>
 800a3ce:	7efb      	ldrb	r3, [r7, #27]
 800a3d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3d2:	d001      	beq.n	800a3d8 <create_name+0x8c>
 800a3d4:	2306      	movs	r3, #6
 800a3d6:	e044      	b.n	800a462 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a3d8:	2308      	movs	r3, #8
 800a3da:	613b      	str	r3, [r7, #16]
 800a3dc:	230b      	movs	r3, #11
 800a3de:	617b      	str	r3, [r7, #20]
			continue;
 800a3e0:	e022      	b.n	800a428 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a3e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	da04      	bge.n	800a3f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a3ea:	7efb      	ldrb	r3, [r7, #27]
 800a3ec:	3b80      	subs	r3, #128	@ 0x80
 800a3ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a46c <create_name+0x120>)
 800a3f0:	5cd3      	ldrb	r3, [r2, r3]
 800a3f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a3f4:	7efb      	ldrb	r3, [r7, #27]
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	481d      	ldr	r0, [pc, #116]	@ (800a470 <create_name+0x124>)
 800a3fa:	f7ff f812 	bl	8009422 <chk_chr>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <create_name+0xbc>
 800a404:	2306      	movs	r3, #6
 800a406:	e02c      	b.n	800a462 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a408:	7efb      	ldrb	r3, [r7, #27]
 800a40a:	2b60      	cmp	r3, #96	@ 0x60
 800a40c:	d905      	bls.n	800a41a <create_name+0xce>
 800a40e:	7efb      	ldrb	r3, [r7, #27]
 800a410:	2b7a      	cmp	r3, #122	@ 0x7a
 800a412:	d802      	bhi.n	800a41a <create_name+0xce>
 800a414:	7efb      	ldrb	r3, [r7, #27]
 800a416:	3b20      	subs	r3, #32
 800a418:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	613a      	str	r2, [r7, #16]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	4413      	add	r3, r2
 800a424:	7efa      	ldrb	r2, [r7, #27]
 800a426:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a428:	e7a6      	b.n	800a378 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a42a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	441a      	add	r2, r3
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <create_name+0xf4>
 800a43c:	2306      	movs	r3, #6
 800a43e:	e010      	b.n	800a462 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	2be5      	cmp	r3, #229	@ 0xe5
 800a446:	d102      	bne.n	800a44e <create_name+0x102>
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2205      	movs	r2, #5
 800a44c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a44e:	7efb      	ldrb	r3, [r7, #27]
 800a450:	2b20      	cmp	r3, #32
 800a452:	d801      	bhi.n	800a458 <create_name+0x10c>
 800a454:	2204      	movs	r2, #4
 800a456:	e000      	b.n	800a45a <create_name+0x10e>
 800a458:	2200      	movs	r2, #0
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	330b      	adds	r3, #11
 800a45e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a460:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a462:	4618      	mov	r0, r3
 800a464:	3720      	adds	r7, #32
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	0800c9dc 	.word	0x0800c9dc
 800a470:	0800bc08 	.word	0x0800bc08

0800a474 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a488:	e002      	b.n	800a490 <follow_path+0x1c>
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	3301      	adds	r3, #1
 800a48e:	603b      	str	r3, [r7, #0]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b2f      	cmp	r3, #47	@ 0x2f
 800a496:	d0f8      	beq.n	800a48a <follow_path+0x16>
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a49e:	d0f4      	beq.n	800a48a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	2b1f      	cmp	r3, #31
 800a4ac:	d80a      	bhi.n	800a4c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2280      	movs	r2, #128	@ 0x80
 800a4b2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7ff fcfa 	bl	8009eb2 <dir_sdi>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	75fb      	strb	r3, [r7, #23]
 800a4c2:	e043      	b.n	800a54c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a4c4:	463b      	mov	r3, r7
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff ff3f 	bl	800a34c <create_name>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d134      	bne.n	800a542 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7ff feb0 	bl	800a23e <dir_find>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a4e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00a      	beq.n	800a506 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
 800a4f2:	2b04      	cmp	r3, #4
 800a4f4:	d127      	bne.n	800a546 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a4f6:	7afb      	ldrb	r3, [r7, #11]
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d122      	bne.n	800a546 <follow_path+0xd2>
 800a500:	2305      	movs	r3, #5
 800a502:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a504:	e01f      	b.n	800a546 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a506:	7afb      	ldrb	r3, [r7, #11]
 800a508:	f003 0304 	and.w	r3, r3, #4
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d11c      	bne.n	800a54a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	799b      	ldrb	r3, [r3, #6]
 800a514:	f003 0310 	and.w	r3, r3, #16
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d102      	bne.n	800a522 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a51c:	2305      	movs	r3, #5
 800a51e:	75fb      	strb	r3, [r7, #23]
 800a520:	e014      	b.n	800a54c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	695b      	ldr	r3, [r3, #20]
 800a52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a530:	4413      	add	r3, r2
 800a532:	4619      	mov	r1, r3
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f7ff fe43 	bl	800a1c0 <ld_clust>
 800a53a:	4602      	mov	r2, r0
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a540:	e7c0      	b.n	800a4c4 <follow_path+0x50>
			if (res != FR_OK) break;
 800a542:	bf00      	nop
 800a544:	e002      	b.n	800a54c <follow_path+0xd8>
				break;
 800a546:	bf00      	nop
 800a548:	e000      	b.n	800a54c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a54a:	bf00      	nop
			}
		}
	}

	return res;
 800a54c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a556:	b480      	push	{r7}
 800a558:	b087      	sub	sp, #28
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a55e:	f04f 33ff 	mov.w	r3, #4294967295
 800a562:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d031      	beq.n	800a5d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	617b      	str	r3, [r7, #20]
 800a572:	e002      	b.n	800a57a <get_ldnumber+0x24>
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	3301      	adds	r3, #1
 800a578:	617b      	str	r3, [r7, #20]
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b20      	cmp	r3, #32
 800a580:	d903      	bls.n	800a58a <get_ldnumber+0x34>
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b3a      	cmp	r3, #58	@ 0x3a
 800a588:	d1f4      	bne.n	800a574 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	2b3a      	cmp	r3, #58	@ 0x3a
 800a590:	d11c      	bne.n	800a5cc <get_ldnumber+0x76>
			tp = *path;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	1c5a      	adds	r2, r3, #1
 800a59c:	60fa      	str	r2, [r7, #12]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	3b30      	subs	r3, #48	@ 0x30
 800a5a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2b09      	cmp	r3, #9
 800a5a8:	d80e      	bhi.n	800a5c8 <get_ldnumber+0x72>
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d10a      	bne.n	800a5c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d107      	bne.n	800a5c8 <get_ldnumber+0x72>
					vol = (int)i;
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	617b      	str	r3, [r7, #20]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	e002      	b.n	800a5d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a5d0:	693b      	ldr	r3, [r7, #16]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	371c      	adds	r7, #28
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
	...

0800a5e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	70da      	strb	r2, [r3, #3]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff f8dc 	bl	80097b8 <move_window>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <check_fs+0x2a>
 800a606:	2304      	movs	r3, #4
 800a608:	e038      	b.n	800a67c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	3330      	adds	r3, #48	@ 0x30
 800a60e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe fe20 	bl	8009258 <ld_word>
 800a618:	4603      	mov	r3, r0
 800a61a:	461a      	mov	r2, r3
 800a61c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a620:	429a      	cmp	r2, r3
 800a622:	d001      	beq.n	800a628 <check_fs+0x48>
 800a624:	2303      	movs	r3, #3
 800a626:	e029      	b.n	800a67c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a62e:	2be9      	cmp	r3, #233	@ 0xe9
 800a630:	d009      	beq.n	800a646 <check_fs+0x66>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a638:	2beb      	cmp	r3, #235	@ 0xeb
 800a63a:	d11e      	bne.n	800a67a <check_fs+0x9a>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a642:	2b90      	cmp	r3, #144	@ 0x90
 800a644:	d119      	bne.n	800a67a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3330      	adds	r3, #48	@ 0x30
 800a64a:	3336      	adds	r3, #54	@ 0x36
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe fe1b 	bl	8009288 <ld_dword>
 800a652:	4603      	mov	r3, r0
 800a654:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a658:	4a0a      	ldr	r2, [pc, #40]	@ (800a684 <check_fs+0xa4>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d101      	bne.n	800a662 <check_fs+0x82>
 800a65e:	2300      	movs	r3, #0
 800a660:	e00c      	b.n	800a67c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3330      	adds	r3, #48	@ 0x30
 800a666:	3352      	adds	r3, #82	@ 0x52
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe fe0d 	bl	8009288 <ld_dword>
 800a66e:	4603      	mov	r3, r0
 800a670:	4a05      	ldr	r2, [pc, #20]	@ (800a688 <check_fs+0xa8>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d101      	bne.n	800a67a <check_fs+0x9a>
 800a676:	2300      	movs	r3, #0
 800a678:	e000      	b.n	800a67c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a67a:	2302      	movs	r3, #2
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	00544146 	.word	0x00544146
 800a688:	33544146 	.word	0x33544146

0800a68c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b096      	sub	sp, #88	@ 0x58
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	4613      	mov	r3, r2
 800a698:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	2200      	movs	r2, #0
 800a69e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f7ff ff58 	bl	800a556 <get_ldnumber>
 800a6a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	da01      	bge.n	800a6b2 <find_volume+0x26>
 800a6ae:	230b      	movs	r3, #11
 800a6b0:	e22d      	b.n	800ab0e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a6b2:	4aa1      	ldr	r2, [pc, #644]	@ (800a938 <find_volume+0x2ac>)
 800a6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <find_volume+0x3a>
 800a6c2:	230c      	movs	r3, #12
 800a6c4:	e223      	b.n	800ab0e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a6cc:	79fb      	ldrb	r3, [r7, #7]
 800a6ce:	f023 0301 	bic.w	r3, r3, #1
 800a6d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d01a      	beq.n	800a712 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6de:	785b      	ldrb	r3, [r3, #1]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe fd19 	bl	8009118 <disk_status>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a6ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a6f0:	f003 0301 	and.w	r3, r3, #1
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10c      	bne.n	800a712 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d007      	beq.n	800a70e <find_volume+0x82>
 800a6fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a702:	f003 0304 	and.w	r3, r3, #4
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a70a:	230a      	movs	r3, #10
 800a70c:	e1ff      	b.n	800ab0e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a70e:	2300      	movs	r3, #0
 800a710:	e1fd      	b.n	800ab0e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a714:	2200      	movs	r2, #0
 800a716:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a722:	785b      	ldrb	r3, [r3, #1]
 800a724:	4618      	mov	r0, r3
 800a726:	f7fe fd11 	bl	800914c <disk_initialize>
 800a72a:	4603      	mov	r3, r0
 800a72c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a730:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a734:	f003 0301 	and.w	r3, r3, #1
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d001      	beq.n	800a740 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a73c:	2303      	movs	r3, #3
 800a73e:	e1e6      	b.n	800ab0e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d007      	beq.n	800a756 <find_volume+0xca>
 800a746:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a74a:	f003 0304 	and.w	r3, r3, #4
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a752:	230a      	movs	r3, #10
 800a754:	e1db      	b.n	800ab0e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a75a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a75c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a75e:	f7ff ff3f 	bl	800a5e0 <check_fs>
 800a762:	4603      	mov	r3, r0
 800a764:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a768:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d149      	bne.n	800a804 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a770:	2300      	movs	r3, #0
 800a772:	643b      	str	r3, [r7, #64]	@ 0x40
 800a774:	e01e      	b.n	800a7b4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a778:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a77c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a77e:	011b      	lsls	r3, r3, #4
 800a780:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a784:	4413      	add	r3, r2
 800a786:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78a:	3304      	adds	r3, #4
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d006      	beq.n	800a7a0 <find_volume+0x114>
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	3308      	adds	r3, #8
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fd76 	bl	8009288 <ld_dword>
 800a79c:	4602      	mov	r2, r0
 800a79e:	e000      	b.n	800a7a2 <find_volume+0x116>
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	3358      	adds	r3, #88	@ 0x58
 800a7a8:	443b      	add	r3, r7
 800a7aa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a7ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d9dd      	bls.n	800a776 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a7be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d002      	beq.n	800a7ca <find_volume+0x13e>
 800a7c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a7ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	3358      	adds	r3, #88	@ 0x58
 800a7d0:	443b      	add	r3, r7
 800a7d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a7d6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a7d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d005      	beq.n	800a7ea <find_volume+0x15e>
 800a7de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a7e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a7e2:	f7ff fefd 	bl	800a5e0 <check_fs>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	e000      	b.n	800a7ec <find_volume+0x160>
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a7f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d905      	bls.n	800a804 <find_volume+0x178>
 800a7f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a800:	2b03      	cmp	r3, #3
 800a802:	d9e2      	bls.n	800a7ca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a804:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d101      	bne.n	800a810 <find_volume+0x184>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e17e      	b.n	800ab0e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a810:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a814:	2b01      	cmp	r3, #1
 800a816:	d901      	bls.n	800a81c <find_volume+0x190>
 800a818:	230d      	movs	r3, #13
 800a81a:	e178      	b.n	800ab0e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81e:	3330      	adds	r3, #48	@ 0x30
 800a820:	330b      	adds	r3, #11
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe fd18 	bl	8009258 <ld_word>
 800a828:	4603      	mov	r3, r0
 800a82a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a82e:	d001      	beq.n	800a834 <find_volume+0x1a8>
 800a830:	230d      	movs	r3, #13
 800a832:	e16c      	b.n	800ab0e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a836:	3330      	adds	r3, #48	@ 0x30
 800a838:	3316      	adds	r3, #22
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fd0c 	bl	8009258 <ld_word>
 800a840:	4603      	mov	r3, r0
 800a842:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a846:	2b00      	cmp	r3, #0
 800a848:	d106      	bne.n	800a858 <find_volume+0x1cc>
 800a84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84c:	3330      	adds	r3, #48	@ 0x30
 800a84e:	3324      	adds	r3, #36	@ 0x24
 800a850:	4618      	mov	r0, r3
 800a852:	f7fe fd19 	bl	8009288 <ld_dword>
 800a856:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a85c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a860:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800a864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a866:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86a:	789b      	ldrb	r3, [r3, #2]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d005      	beq.n	800a87c <find_volume+0x1f0>
 800a870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a872:	789b      	ldrb	r3, [r3, #2]
 800a874:	2b02      	cmp	r3, #2
 800a876:	d001      	beq.n	800a87c <find_volume+0x1f0>
 800a878:	230d      	movs	r3, #13
 800a87a:	e148      	b.n	800ab0e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	789b      	ldrb	r3, [r3, #2]
 800a880:	461a      	mov	r2, r3
 800a882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a884:	fb02 f303 	mul.w	r3, r2, r3
 800a888:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a890:	461a      	mov	r2, r3
 800a892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a894:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a898:	895b      	ldrh	r3, [r3, #10]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d008      	beq.n	800a8b0 <find_volume+0x224>
 800a89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a0:	895b      	ldrh	r3, [r3, #10]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a6:	895b      	ldrh	r3, [r3, #10]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <find_volume+0x228>
 800a8b0:	230d      	movs	r3, #13
 800a8b2:	e12c      	b.n	800ab0e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b6:	3330      	adds	r3, #48	@ 0x30
 800a8b8:	3311      	adds	r3, #17
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fe fccc 	bl	8009258 <ld_word>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ca:	891b      	ldrh	r3, [r3, #8]
 800a8cc:	f003 030f 	and.w	r3, r3, #15
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <find_volume+0x24e>
 800a8d6:	230d      	movs	r3, #13
 800a8d8:	e119      	b.n	800ab0e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8dc:	3330      	adds	r3, #48	@ 0x30
 800a8de:	3313      	adds	r3, #19
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fe fcb9 	bl	8009258 <ld_word>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a8ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d106      	bne.n	800a8fe <find_volume+0x272>
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f2:	3330      	adds	r3, #48	@ 0x30
 800a8f4:	3320      	adds	r3, #32
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe fcc6 	bl	8009288 <ld_dword>
 800a8fc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a900:	3330      	adds	r3, #48	@ 0x30
 800a902:	330e      	adds	r3, #14
 800a904:	4618      	mov	r0, r3
 800a906:	f7fe fca7 	bl	8009258 <ld_word>
 800a90a:	4603      	mov	r3, r0
 800a90c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a90e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <find_volume+0x28c>
 800a914:	230d      	movs	r3, #13
 800a916:	e0fa      	b.n	800ab0e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a918:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a91a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a91c:	4413      	add	r3, r2
 800a91e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a920:	8912      	ldrh	r2, [r2, #8]
 800a922:	0912      	lsrs	r2, r2, #4
 800a924:	b292      	uxth	r2, r2
 800a926:	4413      	add	r3, r2
 800a928:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a92a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a92e:	429a      	cmp	r2, r3
 800a930:	d204      	bcs.n	800a93c <find_volume+0x2b0>
 800a932:	230d      	movs	r3, #13
 800a934:	e0eb      	b.n	800ab0e <find_volume+0x482>
 800a936:	bf00      	nop
 800a938:	20000584 	.word	0x20000584
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a93c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a944:	8952      	ldrh	r2, [r2, #10]
 800a946:	fbb3 f3f2 	udiv	r3, r3, r2
 800a94a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <find_volume+0x2ca>
 800a952:	230d      	movs	r3, #13
 800a954:	e0db      	b.n	800ab0e <find_volume+0x482>
		fmt = FS_FAT32;
 800a956:	2303      	movs	r3, #3
 800a958:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a962:	4293      	cmp	r3, r2
 800a964:	d802      	bhi.n	800a96c <find_volume+0x2e0>
 800a966:	2302      	movs	r3, #2
 800a968:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a972:	4293      	cmp	r3, r2
 800a974:	d802      	bhi.n	800a97c <find_volume+0x2f0>
 800a976:	2301      	movs	r3, #1
 800a978:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	1c9a      	adds	r2, r3, #2
 800a980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a982:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a986:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a988:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a98a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a98c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a98e:	441a      	add	r2, r3
 800a990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a992:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a994:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a998:	441a      	add	r2, r3
 800a99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800a99e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d11e      	bne.n	800a9e4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a8:	3330      	adds	r3, #48	@ 0x30
 800a9aa:	332a      	adds	r3, #42	@ 0x2a
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fe fc53 	bl	8009258 <ld_word>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <find_volume+0x330>
 800a9b8:	230d      	movs	r3, #13
 800a9ba:	e0a8      	b.n	800ab0e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9be:	891b      	ldrh	r3, [r3, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <find_volume+0x33c>
 800a9c4:	230d      	movs	r3, #13
 800a9c6:	e0a2      	b.n	800ab0e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ca:	3330      	adds	r3, #48	@ 0x30
 800a9cc:	332c      	adds	r3, #44	@ 0x2c
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fe fc5a 	bl	8009288 <ld_dword>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9dc:	695b      	ldr	r3, [r3, #20]
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9e2:	e01f      	b.n	800aa24 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e6:	891b      	ldrh	r3, [r3, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d101      	bne.n	800a9f0 <find_volume+0x364>
 800a9ec:	230d      	movs	r3, #13
 800a9ee:	e08e      	b.n	800ab0e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f2:	6a1a      	ldr	r2, [r3, #32]
 800a9f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9f6:	441a      	add	r2, r3
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fa:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a9fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d103      	bne.n	800aa0c <find_volume+0x380>
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	695b      	ldr	r3, [r3, #20]
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	e00a      	b.n	800aa22 <find_volume+0x396>
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0e:	695a      	ldr	r2, [r3, #20]
 800aa10:	4613      	mov	r3, r2
 800aa12:	005b      	lsls	r3, r3, #1
 800aa14:	4413      	add	r3, r2
 800aa16:	085a      	lsrs	r2, r3, #1
 800aa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	f003 0301 	and.w	r3, r3, #1
 800aa20:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800aa22:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800aa24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa26:	699a      	ldr	r2, [r3, #24]
 800aa28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa2a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800aa2e:	0a5b      	lsrs	r3, r3, #9
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d201      	bcs.n	800aa38 <find_volume+0x3ac>
 800aa34:	230d      	movs	r3, #13
 800aa36:	e06a      	b.n	800ab0e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aa38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3e:	611a      	str	r2, [r3, #16]
 800aa40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa42:	691a      	ldr	r2, [r3, #16]
 800aa44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa46:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4a:	2280      	movs	r2, #128	@ 0x80
 800aa4c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800aa4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d149      	bne.n	800aaea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800aa56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa58:	3330      	adds	r3, #48	@ 0x30
 800aa5a:	3330      	adds	r3, #48	@ 0x30
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fe fbfb 	bl	8009258 <ld_word>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d140      	bne.n	800aaea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800aa68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aa70:	f7fe fea2 	bl	80097b8 <move_window>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d137      	bne.n	800aaea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aa80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa82:	3330      	adds	r3, #48	@ 0x30
 800aa84:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe fbe5 	bl	8009258 <ld_word>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	461a      	mov	r2, r3
 800aa92:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d127      	bne.n	800aaea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9c:	3330      	adds	r3, #48	@ 0x30
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fbf2 	bl	8009288 <ld_dword>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	4a1c      	ldr	r2, [pc, #112]	@ (800ab18 <find_volume+0x48c>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d11e      	bne.n	800aaea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aaac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaae:	3330      	adds	r3, #48	@ 0x30
 800aab0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fe fbe7 	bl	8009288 <ld_dword>
 800aaba:	4603      	mov	r3, r0
 800aabc:	4a17      	ldr	r2, [pc, #92]	@ (800ab1c <find_volume+0x490>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d113      	bne.n	800aaea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac4:	3330      	adds	r3, #48	@ 0x30
 800aac6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe fbdc 	bl	8009288 <ld_dword>
 800aad0:	4602      	mov	r2, r0
 800aad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad8:	3330      	adds	r3, #48	@ 0x30
 800aada:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fe fbd2 	bl	8009288 <ld_dword>
 800aae4:	4602      	mov	r2, r0
 800aae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aaea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaec:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800aaf0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aaf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ab20 <find_volume+0x494>)
 800aaf4:	881b      	ldrh	r3, [r3, #0]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	4b09      	ldr	r3, [pc, #36]	@ (800ab20 <find_volume+0x494>)
 800aafc:	801a      	strh	r2, [r3, #0]
 800aafe:	4b08      	ldr	r3, [pc, #32]	@ (800ab20 <find_volume+0x494>)
 800ab00:	881a      	ldrh	r2, [r3, #0]
 800ab02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab04:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ab06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ab08:	f7fe fdee 	bl	80096e8 <clear_lock>
#endif
	return FR_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3758      	adds	r7, #88	@ 0x58
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	41615252 	.word	0x41615252
 800ab1c:	61417272 	.word	0x61417272
 800ab20:	20000588 	.word	0x20000588

0800ab24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ab2e:	2309      	movs	r3, #9
 800ab30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01c      	beq.n	800ab72 <validate+0x4e>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d018      	beq.n	800ab72 <validate+0x4e>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d013      	beq.n	800ab72 <validate+0x4e>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	889a      	ldrh	r2, [r3, #4]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	88db      	ldrh	r3, [r3, #6]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d10c      	bne.n	800ab72 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	785b      	ldrb	r3, [r3, #1]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe fada 	bl	8009118 <disk_status>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <validate+0x4e>
			res = FR_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ab72:	7bfb      	ldrb	r3, [r7, #15]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d102      	bne.n	800ab7e <validate+0x5a>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	e000      	b.n	800ab80 <validate+0x5c>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	6013      	str	r3, [r2, #0]
	return res;
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
	...

0800ab90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aba2:	f107 0310 	add.w	r3, r7, #16
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff fcd5 	bl	800a556 <get_ldnumber>
 800abac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	da01      	bge.n	800abb8 <f_mount+0x28>
 800abb4:	230b      	movs	r3, #11
 800abb6:	e02b      	b.n	800ac10 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800abb8:	4a17      	ldr	r2, [pc, #92]	@ (800ac18 <f_mount+0x88>)
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abc0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d005      	beq.n	800abd4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800abc8:	69b8      	ldr	r0, [r7, #24]
 800abca:	f7fe fd8d 	bl	80096e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	2200      	movs	r2, #0
 800abd2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	490d      	ldr	r1, [pc, #52]	@ (800ac18 <f_mount+0x88>)
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <f_mount+0x66>
 800abf0:	79fb      	ldrb	r3, [r7, #7]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d001      	beq.n	800abfa <f_mount+0x6a>
 800abf6:	2300      	movs	r3, #0
 800abf8:	e00a      	b.n	800ac10 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800abfa:	f107 010c 	add.w	r1, r7, #12
 800abfe:	f107 0308 	add.w	r3, r7, #8
 800ac02:	2200      	movs	r2, #0
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff fd41 	bl	800a68c <find_volume>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3720      	adds	r7, #32
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	20000584 	.word	0x20000584

0800ac1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b098      	sub	sp, #96	@ 0x60
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	4613      	mov	r3, r2
 800ac28:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <f_open+0x18>
 800ac30:	2309      	movs	r3, #9
 800ac32:	e1a9      	b.n	800af88 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ac34:	79fb      	ldrb	r3, [r7, #7]
 800ac36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac3a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ac3c:	79fa      	ldrb	r2, [r7, #7]
 800ac3e:	f107 0110 	add.w	r1, r7, #16
 800ac42:	f107 0308 	add.w	r3, r7, #8
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7ff fd20 	bl	800a68c <find_volume>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ac52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f040 818d 	bne.w	800af76 <f_open+0x35a>
		dj.obj.fs = fs;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	f107 0314 	add.w	r3, r7, #20
 800ac66:	4611      	mov	r1, r2
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7ff fc03 	bl	800a474 <follow_path>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ac74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d118      	bne.n	800acae <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ac7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac80:	b25b      	sxtb	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	da03      	bge.n	800ac8e <f_open+0x72>
				res = FR_INVALID_NAME;
 800ac86:	2306      	movs	r3, #6
 800ac88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ac8c:	e00f      	b.n	800acae <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac8e:	79fb      	ldrb	r3, [r7, #7]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	bf8c      	ite	hi
 800ac94:	2301      	movhi	r3, #1
 800ac96:	2300      	movls	r3, #0
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f107 0314 	add.w	r3, r7, #20
 800aca0:	4611      	mov	r1, r2
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe fbd8 	bl	8009458 <chk_lock>
 800aca8:	4603      	mov	r3, r0
 800acaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800acae:	79fb      	ldrb	r3, [r7, #7]
 800acb0:	f003 031c 	and.w	r3, r3, #28
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d07f      	beq.n	800adb8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800acb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d017      	beq.n	800acf0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800acc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d10e      	bne.n	800ace6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800acc8:	f7fe fc22 	bl	8009510 <enq_lock>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d006      	beq.n	800ace0 <f_open+0xc4>
 800acd2:	f107 0314 	add.w	r3, r7, #20
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7ff fb06 	bl	800a2e8 <dir_register>
 800acdc:	4603      	mov	r3, r0
 800acde:	e000      	b.n	800ace2 <f_open+0xc6>
 800ace0:	2312      	movs	r3, #18
 800ace2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	f043 0308 	orr.w	r3, r3, #8
 800acec:	71fb      	strb	r3, [r7, #7]
 800acee:	e010      	b.n	800ad12 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800acf0:	7ebb      	ldrb	r3, [r7, #26]
 800acf2:	f003 0311 	and.w	r3, r3, #17
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <f_open+0xe6>
					res = FR_DENIED;
 800acfa:	2307      	movs	r3, #7
 800acfc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ad00:	e007      	b.n	800ad12 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <f_open+0xf6>
 800ad0c:	2308      	movs	r3, #8
 800ad0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ad12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d168      	bne.n	800adec <f_open+0x1d0>
 800ad1a:	79fb      	ldrb	r3, [r7, #7]
 800ad1c:	f003 0308 	and.w	r3, r3, #8
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d063      	beq.n	800adec <f_open+0x1d0>
				dw = GET_FATTIME();
 800ad24:	f7fe f88c 	bl	8008e40 <get_fattime>
 800ad28:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ad2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad2c:	330e      	adds	r3, #14
 800ad2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe fae7 	bl	8009304 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ad36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad38:	3316      	adds	r3, #22
 800ad3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe fae1 	bl	8009304 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ad42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad44:	330b      	adds	r3, #11
 800ad46:	2220      	movs	r2, #32
 800ad48:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7ff fa35 	bl	800a1c0 <ld_clust>
 800ad56:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff fa4d 	bl	800a1fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ad64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad66:	331c      	adds	r3, #28
 800ad68:	2100      	movs	r1, #0
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fe faca 	bl	8009304 <st_dword>
					fs->wflag = 1;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	2201      	movs	r2, #1
 800ad74:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ad76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d037      	beq.n	800adec <f_open+0x1d0>
						dw = fs->winsect;
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad80:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ad82:	f107 0314 	add.w	r3, r7, #20
 800ad86:	2200      	movs	r2, #0
 800ad88:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe ff60 	bl	8009c50 <remove_chain>
 800ad90:	4603      	mov	r3, r0
 800ad92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800ad96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d126      	bne.n	800adec <f_open+0x1d0>
							res = move_window(fs, dw);
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe fd08 	bl	80097b8 <move_window>
 800ada8:	4603      	mov	r3, r0
 800adaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800adb2:	3a01      	subs	r2, #1
 800adb4:	60da      	str	r2, [r3, #12]
 800adb6:	e019      	b.n	800adec <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800adb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d115      	bne.n	800adec <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800adc0:	7ebb      	ldrb	r3, [r7, #26]
 800adc2:	f003 0310 	and.w	r3, r3, #16
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800adca:	2304      	movs	r3, #4
 800adcc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800add0:	e00c      	b.n	800adec <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	f003 0302 	and.w	r3, r3, #2
 800add8:	2b00      	cmp	r3, #0
 800adda:	d007      	beq.n	800adec <f_open+0x1d0>
 800addc:	7ebb      	ldrb	r3, [r7, #26]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <f_open+0x1d0>
						res = FR_DENIED;
 800ade6:	2307      	movs	r3, #7
 800ade8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800adec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d126      	bne.n	800ae42 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800adf4:	79fb      	ldrb	r3, [r7, #7]
 800adf6:	f003 0308 	and.w	r3, r3, #8
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800adfe:	79fb      	ldrb	r3, [r7, #7]
 800ae00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae04:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ae0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	bf8c      	ite	hi
 800ae1a:	2301      	movhi	r3, #1
 800ae1c:	2300      	movls	r3, #0
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	f107 0314 	add.w	r3, r7, #20
 800ae26:	4611      	mov	r1, r2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe fb93 	bl	8009554 <inc_lock>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d102      	bne.n	800ae42 <f_open+0x226>
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ae42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f040 8095 	bne.w	800af76 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae50:	4611      	mov	r1, r2
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7ff f9b4 	bl	800a1c0 <ld_clust>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ae5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae60:	331c      	adds	r3, #28
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fe fa10 	bl	8009288 <ld_dword>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	88da      	ldrh	r2, [r3, #6]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	79fa      	ldrb	r2, [r7, #7]
 800ae86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	3330      	adds	r3, #48	@ 0x30
 800ae9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aea2:	2100      	movs	r1, #0
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7fe fa7a 	bl	800939e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aeaa:	79fb      	ldrb	r3, [r7, #7]
 800aeac:	f003 0320 	and.w	r3, r3, #32
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d060      	beq.n	800af76 <f_open+0x35a>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d05c      	beq.n	800af76 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	68da      	ldr	r2, [r3, #12]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	895b      	ldrh	r3, [r3, #10]
 800aec8:	025b      	lsls	r3, r3, #9
 800aeca:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	657b      	str	r3, [r7, #84]	@ 0x54
 800aed8:	e016      	b.n	800af08 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fe fd25 	bl	800992e <get_fat>
 800aee4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800aee6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d802      	bhi.n	800aef2 <f_open+0x2d6>
 800aeec:	2302      	movs	r3, #2
 800aeee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aef2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef8:	d102      	bne.n	800af00 <f_open+0x2e4>
 800aefa:	2301      	movs	r3, #1
 800aefc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800af02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	657b      	str	r3, [r7, #84]	@ 0x54
 800af08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d103      	bne.n	800af18 <f_open+0x2fc>
 800af10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800af12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af14:	429a      	cmp	r2, r3
 800af16:	d8e0      	bhi.n	800aeda <f_open+0x2be>
				}
				fp->clust = clst;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800af1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af22:	2b00      	cmp	r3, #0
 800af24:	d127      	bne.n	800af76 <f_open+0x35a>
 800af26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d022      	beq.n	800af76 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800af34:	4618      	mov	r0, r3
 800af36:	f7fe fcdb 	bl	80098f0 <clust2sect>
 800af3a:	6478      	str	r0, [r7, #68]	@ 0x44
 800af3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d103      	bne.n	800af4a <f_open+0x32e>
						res = FR_INT_ERR;
 800af42:	2302      	movs	r3, #2
 800af44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800af48:	e015      	b.n	800af76 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800af4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af4c:	0a5a      	lsrs	r2, r3, #9
 800af4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af50:	441a      	add	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	7858      	ldrb	r0, [r3, #1]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6a1a      	ldr	r2, [r3, #32]
 800af64:	2301      	movs	r3, #1
 800af66:	f7fe f919 	bl	800919c <disk_read>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <f_open+0x35a>
 800af70:	2301      	movs	r3, #1
 800af72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800af76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <f_open+0x368>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800af84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3760      	adds	r7, #96	@ 0x60
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b08e      	sub	sp, #56	@ 0x38
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
 800af9c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2200      	movs	r2, #0
 800afa6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f107 0214 	add.w	r2, r7, #20
 800afae:	4611      	mov	r1, r2
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7ff fdb7 	bl	800ab24 <validate>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800afbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d107      	bne.n	800afd4 <f_read+0x44>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	7d5b      	ldrb	r3, [r3, #21]
 800afc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800afcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <f_read+0x4a>
 800afd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800afd8:	e115      	b.n	800b206 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	7d1b      	ldrb	r3, [r3, #20]
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <f_read+0x5a>
 800afe6:	2307      	movs	r3, #7
 800afe8:	e10d      	b.n	800b206 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	68da      	ldr	r2, [r3, #12]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	6a3b      	ldr	r3, [r7, #32]
 800affa:	429a      	cmp	r2, r3
 800affc:	f240 80fe 	bls.w	800b1fc <f_read+0x26c>
 800b000:	6a3b      	ldr	r3, [r7, #32]
 800b002:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b004:	e0fa      	b.n	800b1fc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f040 80c6 	bne.w	800b1a0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	0a5b      	lsrs	r3, r3, #9
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	8952      	ldrh	r2, [r2, #10]
 800b01e:	3a01      	subs	r2, #1
 800b020:	4013      	ands	r3, r2
 800b022:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d12f      	bne.n	800b08a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d103      	bne.n	800b03a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	633b      	str	r3, [r7, #48]	@ 0x30
 800b038:	e013      	b.n	800b062 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d007      	beq.n	800b052 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	699b      	ldr	r3, [r3, #24]
 800b046:	4619      	mov	r1, r3
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f7fe fefe 	bl	8009e4a <clmt_clust>
 800b04e:	6338      	str	r0, [r7, #48]	@ 0x30
 800b050:	e007      	b.n	800b062 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	69db      	ldr	r3, [r3, #28]
 800b058:	4619      	mov	r1, r3
 800b05a:	4610      	mov	r0, r2
 800b05c:	f7fe fc67 	bl	800992e <get_fat>
 800b060:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b064:	2b01      	cmp	r3, #1
 800b066:	d804      	bhi.n	800b072 <f_read+0xe2>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2202      	movs	r2, #2
 800b06c:	755a      	strb	r2, [r3, #21]
 800b06e:	2302      	movs	r3, #2
 800b070:	e0c9      	b.n	800b206 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b078:	d104      	bne.n	800b084 <f_read+0xf4>
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2201      	movs	r2, #1
 800b07e:	755a      	strb	r2, [r3, #21]
 800b080:	2301      	movs	r3, #1
 800b082:	e0c0      	b.n	800b206 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b088:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	69db      	ldr	r3, [r3, #28]
 800b090:	4619      	mov	r1, r3
 800b092:	4610      	mov	r0, r2
 800b094:	f7fe fc2c 	bl	80098f0 <clust2sect>
 800b098:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d104      	bne.n	800b0aa <f_read+0x11a>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	755a      	strb	r2, [r3, #21]
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	e0ad      	b.n	800b206 <f_read+0x276>
			sect += csect;
 800b0aa:	69ba      	ldr	r2, [r7, #24]
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	0a5b      	lsrs	r3, r3, #9
 800b0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d039      	beq.n	800b132 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b0be:	69fa      	ldr	r2, [r7, #28]
 800b0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c2:	4413      	add	r3, r2
 800b0c4:	697a      	ldr	r2, [r7, #20]
 800b0c6:	8952      	ldrh	r2, [r2, #10]
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d905      	bls.n	800b0d8 <f_read+0x148>
					cc = fs->csize - csect;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	895b      	ldrh	r3, [r3, #10]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	7858      	ldrb	r0, [r3, #1]
 800b0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0de:	69ba      	ldr	r2, [r7, #24]
 800b0e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b0e2:	f7fe f85b 	bl	800919c <disk_read>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d004      	beq.n	800b0f6 <f_read+0x166>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	755a      	strb	r2, [r3, #21]
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e087      	b.n	800b206 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	7d1b      	ldrb	r3, [r3, #20]
 800b0fa:	b25b      	sxtb	r3, r3
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	da14      	bge.n	800b12a <f_read+0x19a>
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6a1a      	ldr	r2, [r3, #32]
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d90d      	bls.n	800b12a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6a1a      	ldr	r2, [r3, #32]
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	025b      	lsls	r3, r3, #9
 800b118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b11a:	18d0      	adds	r0, r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3330      	adds	r3, #48	@ 0x30
 800b120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b124:	4619      	mov	r1, r3
 800b126:	f7fe f919 	bl	800935c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12c:	025b      	lsls	r3, r3, #9
 800b12e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800b130:	e050      	b.n	800b1d4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d02e      	beq.n	800b19a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	7d1b      	ldrb	r3, [r3, #20]
 800b140:	b25b      	sxtb	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	da18      	bge.n	800b178 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	7858      	ldrb	r0, [r3, #1]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6a1a      	ldr	r2, [r3, #32]
 800b154:	2301      	movs	r3, #1
 800b156:	f7fe f841 	bl	80091dc <disk_write>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d004      	beq.n	800b16a <f_read+0x1da>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2201      	movs	r2, #1
 800b164:	755a      	strb	r2, [r3, #21]
 800b166:	2301      	movs	r3, #1
 800b168:	e04d      	b.n	800b206 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	7d1b      	ldrb	r3, [r3, #20]
 800b16e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b172:	b2da      	uxtb	r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	7858      	ldrb	r0, [r3, #1]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b182:	2301      	movs	r3, #1
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	f7fe f809 	bl	800919c <disk_read>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d004      	beq.n	800b19a <f_read+0x20a>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2201      	movs	r2, #1
 800b194:	755a      	strb	r2, [r3, #21]
 800b196:	2301      	movs	r3, #1
 800b198:	e035      	b.n	800b206 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	69ba      	ldr	r2, [r7, #24]
 800b19e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b1ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d901      	bls.n	800b1ba <f_read+0x22a>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c8:	4413      	add	r3, r2
 800b1ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b1d0:	f7fe f8c4 	bl	800935c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b1d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d8:	4413      	add	r3, r2
 800b1da:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	699a      	ldr	r2, [r3, #24]
 800b1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e2:	441a      	add	r2, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	619a      	str	r2, [r3, #24]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ee:	441a      	add	r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f47f af01 	bne.w	800b006 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3738      	adds	r7, #56	@ 0x38
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b086      	sub	sp, #24
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f107 0208 	add.w	r2, r7, #8
 800b21c:	4611      	mov	r1, r2
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff fc80 	bl	800ab24 <validate>
 800b224:	4603      	mov	r3, r0
 800b226:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d168      	bne.n	800b300 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	7d1b      	ldrb	r3, [r3, #20]
 800b232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b236:	2b00      	cmp	r3, #0
 800b238:	d062      	beq.n	800b300 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	7d1b      	ldrb	r3, [r3, #20]
 800b23e:	b25b      	sxtb	r3, r3
 800b240:	2b00      	cmp	r3, #0
 800b242:	da15      	bge.n	800b270 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	7858      	ldrb	r0, [r3, #1]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a1a      	ldr	r2, [r3, #32]
 800b252:	2301      	movs	r3, #1
 800b254:	f7fd ffc2 	bl	80091dc <disk_write>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <f_sync+0x54>
 800b25e:	2301      	movs	r3, #1
 800b260:	e04f      	b.n	800b302 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	7d1b      	ldrb	r3, [r3, #20]
 800b266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b270:	f7fd fde6 	bl	8008e40 <get_fattime>
 800b274:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27c:	4619      	mov	r1, r3
 800b27e:	4610      	mov	r0, r2
 800b280:	f7fe fa9a 	bl	80097b8 <move_window>
 800b284:	4603      	mov	r3, r0
 800b286:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d138      	bne.n	800b300 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b292:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	330b      	adds	r3, #11
 800b298:	781a      	ldrb	r2, [r3, #0]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	330b      	adds	r3, #11
 800b29e:	f042 0220 	orr.w	r2, r2, #32
 800b2a2:	b2d2      	uxtb	r2, r2
 800b2a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6818      	ldr	r0, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	68f9      	ldr	r1, [r7, #12]
 800b2b2:	f7fe ffa4 	bl	800a1fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f103 021c 	add.w	r2, r3, #28
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	f7fe f81e 	bl	8009304 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	3316      	adds	r3, #22
 800b2cc:	6939      	ldr	r1, [r7, #16]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7fe f818 	bl	8009304 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	3312      	adds	r3, #18
 800b2d8:	2100      	movs	r1, #0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fd fff7 	bl	80092ce <st_word>
					fs->wflag = 1;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fe fa93 	bl	8009814 <sync_fs>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	7d1b      	ldrb	r3, [r3, #20]
 800b2f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b300:	7dfb      	ldrb	r3, [r7, #23]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7ff ff7b 	bl	800b20e <f_sync>
 800b318:	4603      	mov	r3, r0
 800b31a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d118      	bne.n	800b354 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f107 0208 	add.w	r2, r7, #8
 800b328:	4611      	mov	r1, r2
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7ff fbfa 	bl	800ab24 <validate>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10c      	bne.n	800b354 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fe f996 	bl	8009670 <dec_lock>
 800b344:	4603      	mov	r3, r0
 800b346:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b348:	7bfb      	ldrb	r3, [r7, #15]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d102      	bne.n	800b354 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b354:	7bfb      	ldrb	r3, [r7, #15]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b090      	sub	sp, #64	@ 0x40
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f107 0208 	add.w	r2, r7, #8
 800b36e:	4611      	mov	r1, r2
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff fbd7 	bl	800ab24 <validate>
 800b376:	4603      	mov	r3, r0
 800b378:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b37c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b380:	2b00      	cmp	r3, #0
 800b382:	d103      	bne.n	800b38c <f_lseek+0x2e>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	7d5b      	ldrb	r3, [r3, #21]
 800b388:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b38c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <f_lseek+0x3c>
 800b394:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b398:	e1e6      	b.n	800b768 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f000 80d1 	beq.w	800b546 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3aa:	d15a      	bne.n	800b462 <f_lseek+0x104>
			tbl = fp->cltbl;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b4:	1d1a      	adds	r2, r3, #4
 800b3b6:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	617b      	str	r3, [r7, #20]
 800b3bc:	2302      	movs	r3, #2
 800b3be:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d03a      	beq.n	800b442 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ce:	613b      	str	r3, [r7, #16]
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d6:	3302      	adds	r3, #2
 800b3d8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800b3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3dc:	60fb      	str	r3, [r7, #12]
 800b3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7fe faa0 	bl	800992e <get_fat>
 800b3ee:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d804      	bhi.n	800b400 <f_lseek+0xa2>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2202      	movs	r2, #2
 800b3fa:	755a      	strb	r2, [r3, #21]
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	e1b3      	b.n	800b768 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b406:	d104      	bne.n	800b412 <f_lseek+0xb4>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	755a      	strb	r2, [r3, #21]
 800b40e:	2301      	movs	r3, #1
 800b410:	e1aa      	b.n	800b768 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3301      	adds	r3, #1
 800b416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b418:	429a      	cmp	r2, r3
 800b41a:	d0de      	beq.n	800b3da <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b41c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	429a      	cmp	r2, r3
 800b422:	d809      	bhi.n	800b438 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b426:	1d1a      	adds	r2, r3, #4
 800b428:	627a      	str	r2, [r7, #36]	@ 0x24
 800b42a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b430:	1d1a      	adds	r2, r3, #4
 800b432:	627a      	str	r2, [r7, #36]	@ 0x24
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	695b      	ldr	r3, [r3, #20]
 800b43c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b43e:	429a      	cmp	r2, r3
 800b440:	d3c4      	bcc.n	800b3cc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b448:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b44a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d803      	bhi.n	800b45a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	e184      	b.n	800b764 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b45a:	2311      	movs	r3, #17
 800b45c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b460:	e180      	b.n	800b764 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d902      	bls.n	800b472 <f_lseek+0x114>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	683a      	ldr	r2, [r7, #0]
 800b476:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 8172 	beq.w	800b764 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	3b01      	subs	r3, #1
 800b484:	4619      	mov	r1, r3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7fe fcdf 	bl	8009e4a <clmt_clust>
 800b48c:	4602      	mov	r2, r0
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	4619      	mov	r1, r3
 800b49a:	4610      	mov	r0, r2
 800b49c:	f7fe fa28 	bl	80098f0 <clust2sect>
 800b4a0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d104      	bne.n	800b4b2 <f_lseek+0x154>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2202      	movs	r2, #2
 800b4ac:	755a      	strb	r2, [r3, #21]
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	e15a      	b.n	800b768 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	0a5b      	lsrs	r3, r3, #9
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	8952      	ldrh	r2, [r2, #10]
 800b4bc:	3a01      	subs	r2, #1
 800b4be:	4013      	ands	r3, r2
 800b4c0:	69ba      	ldr	r2, [r7, #24]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 8148 	beq.w	800b764 <f_lseek+0x406>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
 800b4d8:	69ba      	ldr	r2, [r7, #24]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	f000 8142 	beq.w	800b764 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	7d1b      	ldrb	r3, [r3, #20]
 800b4e4:	b25b      	sxtb	r3, r3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	da18      	bge.n	800b51c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	7858      	ldrb	r0, [r3, #1]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6a1a      	ldr	r2, [r3, #32]
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	f7fd fe6f 	bl	80091dc <disk_write>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d004      	beq.n	800b50e <f_lseek+0x1b0>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	755a      	strb	r2, [r3, #21]
 800b50a:	2301      	movs	r3, #1
 800b50c:	e12c      	b.n	800b768 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	7d1b      	ldrb	r3, [r3, #20]
 800b512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b516:	b2da      	uxtb	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	7858      	ldrb	r0, [r3, #1]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b526:	2301      	movs	r3, #1
 800b528:	69ba      	ldr	r2, [r7, #24]
 800b52a:	f7fd fe37 	bl	800919c <disk_read>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d004      	beq.n	800b53e <f_lseek+0x1e0>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	755a      	strb	r2, [r3, #21]
 800b53a:	2301      	movs	r3, #1
 800b53c:	e114      	b.n	800b768 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	69ba      	ldr	r2, [r7, #24]
 800b542:	621a      	str	r2, [r3, #32]
 800b544:	e10e      	b.n	800b764 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d908      	bls.n	800b562 <f_lseek+0x204>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	7d1b      	ldrb	r3, [r3, #20]
 800b554:	f003 0302 	and.w	r3, r3, #2
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d102      	bne.n	800b562 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	699b      	ldr	r3, [r3, #24]
 800b566:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b570:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 80a7 	beq.w	800b6c8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	895b      	ldrh	r3, [r3, #10]
 800b57e:	025b      	lsls	r3, r3, #9
 800b580:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01b      	beq.n	800b5c0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	1e5a      	subs	r2, r3, #1
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b592:	6a3b      	ldr	r3, [r7, #32]
 800b594:	1e59      	subs	r1, r3, #1
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d30f      	bcc.n	800b5c0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	1e5a      	subs	r2, r3, #1
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	425b      	negs	r3, r3
 800b5a8:	401a      	ands	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	699b      	ldr	r3, [r3, #24]
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	69db      	ldr	r3, [r3, #28]
 800b5bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b5be:	e022      	b.n	800b606 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d119      	bne.n	800b600 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fe fba2 	bl	8009d1a <create_chain>
 800b5d6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d104      	bne.n	800b5e8 <f_lseek+0x28a>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	755a      	strb	r2, [r3, #21]
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	e0bf      	b.n	800b768 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ee:	d104      	bne.n	800b5fa <f_lseek+0x29c>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	755a      	strb	r2, [r3, #21]
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e0b6      	b.n	800b768 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5fe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b604:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d05d      	beq.n	800b6c8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800b60c:	e03a      	b.n	800b684 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	603b      	str	r3, [r7, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	699a      	ldr	r2, [r3, #24]
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	441a      	add	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	7d1b      	ldrb	r3, [r3, #20]
 800b626:	f003 0302 	and.w	r3, r3, #2
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00b      	beq.n	800b646 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe fb71 	bl	8009d1a <create_chain>
 800b638:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d108      	bne.n	800b652 <f_lseek+0x2f4>
							ofs = 0; break;
 800b640:	2300      	movs	r3, #0
 800b642:	603b      	str	r3, [r7, #0]
 800b644:	e022      	b.n	800b68c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fe f96f 	bl	800992e <get_fat>
 800b650:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b658:	d104      	bne.n	800b664 <f_lseek+0x306>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	755a      	strb	r2, [r3, #21]
 800b660:	2301      	movs	r3, #1
 800b662:	e081      	b.n	800b768 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b666:	2b01      	cmp	r3, #1
 800b668:	d904      	bls.n	800b674 <f_lseek+0x316>
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b670:	429a      	cmp	r2, r3
 800b672:	d304      	bcc.n	800b67e <f_lseek+0x320>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	755a      	strb	r2, [r3, #21]
 800b67a:	2302      	movs	r3, #2
 800b67c:	e074      	b.n	800b768 <f_lseek+0x40a>
					fp->clust = clst;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b682:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b684:	683a      	ldr	r2, [r7, #0]
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d8c0      	bhi.n	800b60e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	699a      	ldr	r2, [r3, #24]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	441a      	add	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d012      	beq.n	800b6c8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe f922 	bl	80098f0 <clust2sect>
 800b6ac:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d104      	bne.n	800b6be <f_lseek+0x360>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	755a      	strb	r2, [r3, #21]
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	e054      	b.n	800b768 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	0a5b      	lsrs	r3, r3, #9
 800b6c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6c4:	4413      	add	r3, r2
 800b6c6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	699a      	ldr	r2, [r3, #24]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d90a      	bls.n	800b6ea <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	699a      	ldr	r2, [r3, #24]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	7d1b      	ldrb	r3, [r3, #20]
 800b6e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	699b      	ldr	r3, [r3, #24]
 800b6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d036      	beq.n	800b764 <f_lseek+0x406>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a1b      	ldr	r3, [r3, #32]
 800b6fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d031      	beq.n	800b764 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	7d1b      	ldrb	r3, [r3, #20]
 800b704:	b25b      	sxtb	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	da18      	bge.n	800b73c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	7858      	ldrb	r0, [r3, #1]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a1a      	ldr	r2, [r3, #32]
 800b718:	2301      	movs	r3, #1
 800b71a:	f7fd fd5f 	bl	80091dc <disk_write>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d004      	beq.n	800b72e <f_lseek+0x3d0>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	755a      	strb	r2, [r3, #21]
 800b72a:	2301      	movs	r3, #1
 800b72c:	e01c      	b.n	800b768 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	7d1b      	ldrb	r3, [r3, #20]
 800b732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b736:	b2da      	uxtb	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	7858      	ldrb	r0, [r3, #1]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b746:	2301      	movs	r3, #1
 800b748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b74a:	f7fd fd27 	bl	800919c <disk_read>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d004      	beq.n	800b75e <f_lseek+0x400>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	755a      	strb	r2, [r3, #21]
 800b75a:	2301      	movs	r3, #1
 800b75c:	e004      	b.n	800b768 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b762:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b764:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3740      	adds	r7, #64	@ 0x40
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	4613      	mov	r3, r2
 800b77c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b77e:	2301      	movs	r3, #1
 800b780:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b786:	4b1f      	ldr	r3, [pc, #124]	@ (800b804 <FATFS_LinkDriverEx+0x94>)
 800b788:	7a5b      	ldrb	r3, [r3, #9]
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d131      	bne.n	800b7f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b790:	4b1c      	ldr	r3, [pc, #112]	@ (800b804 <FATFS_LinkDriverEx+0x94>)
 800b792:	7a5b      	ldrb	r3, [r3, #9]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	461a      	mov	r2, r3
 800b798:	4b1a      	ldr	r3, [pc, #104]	@ (800b804 <FATFS_LinkDriverEx+0x94>)
 800b79a:	2100      	movs	r1, #0
 800b79c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b79e:	4b19      	ldr	r3, [pc, #100]	@ (800b804 <FATFS_LinkDriverEx+0x94>)
 800b7a0:	7a5b      	ldrb	r3, [r3, #9]
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	4a17      	ldr	r2, [pc, #92]	@ (800b804 <FATFS_LinkDriverEx+0x94>)
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4413      	add	r3, r2
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b7ae:	4b15      	ldr	r3, [pc, #84]	@ (800b804 <FATFS_LinkDriverEx+0x94>)
 800b7b0:	7a5b      	ldrb	r3, [r3, #9]
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	4b13      	ldr	r3, [pc, #76]	@ (800b804 <FATFS_LinkDriverEx+0x94>)
 800b7b8:	4413      	add	r3, r2
 800b7ba:	79fa      	ldrb	r2, [r7, #7]
 800b7bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b7be:	4b11      	ldr	r3, [pc, #68]	@ (800b804 <FATFS_LinkDriverEx+0x94>)
 800b7c0:	7a5b      	ldrb	r3, [r3, #9]
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	1c5a      	adds	r2, r3, #1
 800b7c6:	b2d1      	uxtb	r1, r2
 800b7c8:	4a0e      	ldr	r2, [pc, #56]	@ (800b804 <FATFS_LinkDriverEx+0x94>)
 800b7ca:	7251      	strb	r1, [r2, #9]
 800b7cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b7ce:	7dbb      	ldrb	r3, [r7, #22]
 800b7d0:	3330      	adds	r3, #48	@ 0x30
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	223a      	movs	r2, #58	@ 0x3a
 800b7de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	3302      	adds	r3, #2
 800b7e4:	222f      	movs	r2, #47	@ 0x2f
 800b7e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	3303      	adds	r3, #3
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	371c      	adds	r7, #28
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	200005ac 	.word	0x200005ac

0800b808 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b812:	2200      	movs	r2, #0
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff ffaa 	bl	800b770 <FATFS_LinkDriverEx>
 800b81c:	4603      	mov	r3, r0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <malloc>:
 800b828:	4b02      	ldr	r3, [pc, #8]	@ (800b834 <malloc+0xc>)
 800b82a:	4601      	mov	r1, r0
 800b82c:	6818      	ldr	r0, [r3, #0]
 800b82e:	f000 b82d 	b.w	800b88c <_malloc_r>
 800b832:	bf00      	nop
 800b834:	20000018 	.word	0x20000018

0800b838 <free>:
 800b838:	4b02      	ldr	r3, [pc, #8]	@ (800b844 <free+0xc>)
 800b83a:	4601      	mov	r1, r0
 800b83c:	6818      	ldr	r0, [r3, #0]
 800b83e:	f000 b939 	b.w	800bab4 <_free_r>
 800b842:	bf00      	nop
 800b844:	20000018 	.word	0x20000018

0800b848 <sbrk_aligned>:
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	4e0f      	ldr	r6, [pc, #60]	@ (800b888 <sbrk_aligned+0x40>)
 800b84c:	460c      	mov	r4, r1
 800b84e:	6831      	ldr	r1, [r6, #0]
 800b850:	4605      	mov	r5, r0
 800b852:	b911      	cbnz	r1, 800b85a <sbrk_aligned+0x12>
 800b854:	f000 f8e4 	bl	800ba20 <_sbrk_r>
 800b858:	6030      	str	r0, [r6, #0]
 800b85a:	4621      	mov	r1, r4
 800b85c:	4628      	mov	r0, r5
 800b85e:	f000 f8df 	bl	800ba20 <_sbrk_r>
 800b862:	1c43      	adds	r3, r0, #1
 800b864:	d103      	bne.n	800b86e <sbrk_aligned+0x26>
 800b866:	f04f 34ff 	mov.w	r4, #4294967295
 800b86a:	4620      	mov	r0, r4
 800b86c:	bd70      	pop	{r4, r5, r6, pc}
 800b86e:	1cc4      	adds	r4, r0, #3
 800b870:	f024 0403 	bic.w	r4, r4, #3
 800b874:	42a0      	cmp	r0, r4
 800b876:	d0f8      	beq.n	800b86a <sbrk_aligned+0x22>
 800b878:	1a21      	subs	r1, r4, r0
 800b87a:	4628      	mov	r0, r5
 800b87c:	f000 f8d0 	bl	800ba20 <_sbrk_r>
 800b880:	3001      	adds	r0, #1
 800b882:	d1f2      	bne.n	800b86a <sbrk_aligned+0x22>
 800b884:	e7ef      	b.n	800b866 <sbrk_aligned+0x1e>
 800b886:	bf00      	nop
 800b888:	200005b8 	.word	0x200005b8

0800b88c <_malloc_r>:
 800b88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b890:	1ccd      	adds	r5, r1, #3
 800b892:	f025 0503 	bic.w	r5, r5, #3
 800b896:	3508      	adds	r5, #8
 800b898:	2d0c      	cmp	r5, #12
 800b89a:	bf38      	it	cc
 800b89c:	250c      	movcc	r5, #12
 800b89e:	2d00      	cmp	r5, #0
 800b8a0:	4606      	mov	r6, r0
 800b8a2:	db01      	blt.n	800b8a8 <_malloc_r+0x1c>
 800b8a4:	42a9      	cmp	r1, r5
 800b8a6:	d904      	bls.n	800b8b2 <_malloc_r+0x26>
 800b8a8:	230c      	movs	r3, #12
 800b8aa:	6033      	str	r3, [r6, #0]
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b988 <_malloc_r+0xfc>
 800b8b6:	f000 f869 	bl	800b98c <__malloc_lock>
 800b8ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b8be:	461c      	mov	r4, r3
 800b8c0:	bb44      	cbnz	r4, 800b914 <_malloc_r+0x88>
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f7ff ffbf 	bl	800b848 <sbrk_aligned>
 800b8ca:	1c43      	adds	r3, r0, #1
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	d158      	bne.n	800b982 <_malloc_r+0xf6>
 800b8d0:	f8d8 4000 	ldr.w	r4, [r8]
 800b8d4:	4627      	mov	r7, r4
 800b8d6:	2f00      	cmp	r7, #0
 800b8d8:	d143      	bne.n	800b962 <_malloc_r+0xd6>
 800b8da:	2c00      	cmp	r4, #0
 800b8dc:	d04b      	beq.n	800b976 <_malloc_r+0xea>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	4639      	mov	r1, r7
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	eb04 0903 	add.w	r9, r4, r3
 800b8e8:	f000 f89a 	bl	800ba20 <_sbrk_r>
 800b8ec:	4581      	cmp	r9, r0
 800b8ee:	d142      	bne.n	800b976 <_malloc_r+0xea>
 800b8f0:	6821      	ldr	r1, [r4, #0]
 800b8f2:	1a6d      	subs	r5, r5, r1
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f7ff ffa6 	bl	800b848 <sbrk_aligned>
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	d03a      	beq.n	800b976 <_malloc_r+0xea>
 800b900:	6823      	ldr	r3, [r4, #0]
 800b902:	442b      	add	r3, r5
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	f8d8 3000 	ldr.w	r3, [r8]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	bb62      	cbnz	r2, 800b968 <_malloc_r+0xdc>
 800b90e:	f8c8 7000 	str.w	r7, [r8]
 800b912:	e00f      	b.n	800b934 <_malloc_r+0xa8>
 800b914:	6822      	ldr	r2, [r4, #0]
 800b916:	1b52      	subs	r2, r2, r5
 800b918:	d420      	bmi.n	800b95c <_malloc_r+0xd0>
 800b91a:	2a0b      	cmp	r2, #11
 800b91c:	d917      	bls.n	800b94e <_malloc_r+0xc2>
 800b91e:	1961      	adds	r1, r4, r5
 800b920:	42a3      	cmp	r3, r4
 800b922:	6025      	str	r5, [r4, #0]
 800b924:	bf18      	it	ne
 800b926:	6059      	strne	r1, [r3, #4]
 800b928:	6863      	ldr	r3, [r4, #4]
 800b92a:	bf08      	it	eq
 800b92c:	f8c8 1000 	streq.w	r1, [r8]
 800b930:	5162      	str	r2, [r4, r5]
 800b932:	604b      	str	r3, [r1, #4]
 800b934:	4630      	mov	r0, r6
 800b936:	f000 f82f 	bl	800b998 <__malloc_unlock>
 800b93a:	f104 000b 	add.w	r0, r4, #11
 800b93e:	1d23      	adds	r3, r4, #4
 800b940:	f020 0007 	bic.w	r0, r0, #7
 800b944:	1ac2      	subs	r2, r0, r3
 800b946:	bf1c      	itt	ne
 800b948:	1a1b      	subne	r3, r3, r0
 800b94a:	50a3      	strne	r3, [r4, r2]
 800b94c:	e7af      	b.n	800b8ae <_malloc_r+0x22>
 800b94e:	6862      	ldr	r2, [r4, #4]
 800b950:	42a3      	cmp	r3, r4
 800b952:	bf0c      	ite	eq
 800b954:	f8c8 2000 	streq.w	r2, [r8]
 800b958:	605a      	strne	r2, [r3, #4]
 800b95a:	e7eb      	b.n	800b934 <_malloc_r+0xa8>
 800b95c:	4623      	mov	r3, r4
 800b95e:	6864      	ldr	r4, [r4, #4]
 800b960:	e7ae      	b.n	800b8c0 <_malloc_r+0x34>
 800b962:	463c      	mov	r4, r7
 800b964:	687f      	ldr	r7, [r7, #4]
 800b966:	e7b6      	b.n	800b8d6 <_malloc_r+0x4a>
 800b968:	461a      	mov	r2, r3
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	42a3      	cmp	r3, r4
 800b96e:	d1fb      	bne.n	800b968 <_malloc_r+0xdc>
 800b970:	2300      	movs	r3, #0
 800b972:	6053      	str	r3, [r2, #4]
 800b974:	e7de      	b.n	800b934 <_malloc_r+0xa8>
 800b976:	230c      	movs	r3, #12
 800b978:	6033      	str	r3, [r6, #0]
 800b97a:	4630      	mov	r0, r6
 800b97c:	f000 f80c 	bl	800b998 <__malloc_unlock>
 800b980:	e794      	b.n	800b8ac <_malloc_r+0x20>
 800b982:	6005      	str	r5, [r0, #0]
 800b984:	e7d6      	b.n	800b934 <_malloc_r+0xa8>
 800b986:	bf00      	nop
 800b988:	200005bc 	.word	0x200005bc

0800b98c <__malloc_lock>:
 800b98c:	4801      	ldr	r0, [pc, #4]	@ (800b994 <__malloc_lock+0x8>)
 800b98e:	f000 b881 	b.w	800ba94 <__retarget_lock_acquire_recursive>
 800b992:	bf00      	nop
 800b994:	200006fc 	.word	0x200006fc

0800b998 <__malloc_unlock>:
 800b998:	4801      	ldr	r0, [pc, #4]	@ (800b9a0 <__malloc_unlock+0x8>)
 800b99a:	f000 b87c 	b.w	800ba96 <__retarget_lock_release_recursive>
 800b99e:	bf00      	nop
 800b9a0:	200006fc 	.word	0x200006fc

0800b9a4 <realloc>:
 800b9a4:	4b02      	ldr	r3, [pc, #8]	@ (800b9b0 <realloc+0xc>)
 800b9a6:	460a      	mov	r2, r1
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	6818      	ldr	r0, [r3, #0]
 800b9ac:	f000 b802 	b.w	800b9b4 <_realloc_r>
 800b9b0:	20000018 	.word	0x20000018

0800b9b4 <_realloc_r>:
 800b9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	4615      	mov	r5, r2
 800b9bc:	460c      	mov	r4, r1
 800b9be:	b921      	cbnz	r1, 800b9ca <_realloc_r+0x16>
 800b9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	f7ff bf61 	b.w	800b88c <_malloc_r>
 800b9ca:	b92a      	cbnz	r2, 800b9d8 <_realloc_r+0x24>
 800b9cc:	f000 f872 	bl	800bab4 <_free_r>
 800b9d0:	2400      	movs	r4, #0
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d8:	f000 f8b6 	bl	800bb48 <_malloc_usable_size_r>
 800b9dc:	4285      	cmp	r5, r0
 800b9de:	4606      	mov	r6, r0
 800b9e0:	d802      	bhi.n	800b9e8 <_realloc_r+0x34>
 800b9e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b9e6:	d8f4      	bhi.n	800b9d2 <_realloc_r+0x1e>
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	f7ff ff4e 	bl	800b88c <_malloc_r>
 800b9f0:	4607      	mov	r7, r0
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d0ec      	beq.n	800b9d0 <_realloc_r+0x1c>
 800b9f6:	42b5      	cmp	r5, r6
 800b9f8:	462a      	mov	r2, r5
 800b9fa:	4621      	mov	r1, r4
 800b9fc:	bf28      	it	cs
 800b9fe:	4632      	movcs	r2, r6
 800ba00:	f000 f84a 	bl	800ba98 <memcpy>
 800ba04:	4621      	mov	r1, r4
 800ba06:	4640      	mov	r0, r8
 800ba08:	f000 f854 	bl	800bab4 <_free_r>
 800ba0c:	463c      	mov	r4, r7
 800ba0e:	e7e0      	b.n	800b9d2 <_realloc_r+0x1e>

0800ba10 <memset>:
 800ba10:	4402      	add	r2, r0
 800ba12:	4603      	mov	r3, r0
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d100      	bne.n	800ba1a <memset+0xa>
 800ba18:	4770      	bx	lr
 800ba1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba1e:	e7f9      	b.n	800ba14 <memset+0x4>

0800ba20 <_sbrk_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d06      	ldr	r5, [pc, #24]	@ (800ba3c <_sbrk_r+0x1c>)
 800ba24:	2300      	movs	r3, #0
 800ba26:	4604      	mov	r4, r0
 800ba28:	4608      	mov	r0, r1
 800ba2a:	602b      	str	r3, [r5, #0]
 800ba2c:	f7f7 fad6 	bl	8002fdc <_sbrk>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_sbrk_r+0x1a>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_sbrk_r+0x1a>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	200006f8 	.word	0x200006f8

0800ba40 <__errno>:
 800ba40:	4b01      	ldr	r3, [pc, #4]	@ (800ba48 <__errno+0x8>)
 800ba42:	6818      	ldr	r0, [r3, #0]
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop
 800ba48:	20000018 	.word	0x20000018

0800ba4c <__libc_init_array>:
 800ba4c:	b570      	push	{r4, r5, r6, lr}
 800ba4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ba84 <__libc_init_array+0x38>)
 800ba50:	4c0d      	ldr	r4, [pc, #52]	@ (800ba88 <__libc_init_array+0x3c>)
 800ba52:	1b64      	subs	r4, r4, r5
 800ba54:	10a4      	asrs	r4, r4, #2
 800ba56:	2600      	movs	r6, #0
 800ba58:	42a6      	cmp	r6, r4
 800ba5a:	d109      	bne.n	800ba70 <__libc_init_array+0x24>
 800ba5c:	4d0b      	ldr	r5, [pc, #44]	@ (800ba8c <__libc_init_array+0x40>)
 800ba5e:	4c0c      	ldr	r4, [pc, #48]	@ (800ba90 <__libc_init_array+0x44>)
 800ba60:	f000 f87a 	bl	800bb58 <_init>
 800ba64:	1b64      	subs	r4, r4, r5
 800ba66:	10a4      	asrs	r4, r4, #2
 800ba68:	2600      	movs	r6, #0
 800ba6a:	42a6      	cmp	r6, r4
 800ba6c:	d105      	bne.n	800ba7a <__libc_init_array+0x2e>
 800ba6e:	bd70      	pop	{r4, r5, r6, pc}
 800ba70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba74:	4798      	blx	r3
 800ba76:	3601      	adds	r6, #1
 800ba78:	e7ee      	b.n	800ba58 <__libc_init_array+0xc>
 800ba7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba7e:	4798      	blx	r3
 800ba80:	3601      	adds	r6, #1
 800ba82:	e7f2      	b.n	800ba6a <__libc_init_array+0x1e>
 800ba84:	0800ca64 	.word	0x0800ca64
 800ba88:	0800ca64 	.word	0x0800ca64
 800ba8c:	0800ca64 	.word	0x0800ca64
 800ba90:	0800ca68 	.word	0x0800ca68

0800ba94 <__retarget_lock_acquire_recursive>:
 800ba94:	4770      	bx	lr

0800ba96 <__retarget_lock_release_recursive>:
 800ba96:	4770      	bx	lr

0800ba98 <memcpy>:
 800ba98:	440a      	add	r2, r1
 800ba9a:	4291      	cmp	r1, r2
 800ba9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800baa0:	d100      	bne.n	800baa4 <memcpy+0xc>
 800baa2:	4770      	bx	lr
 800baa4:	b510      	push	{r4, lr}
 800baa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baae:	4291      	cmp	r1, r2
 800bab0:	d1f9      	bne.n	800baa6 <memcpy+0xe>
 800bab2:	bd10      	pop	{r4, pc}

0800bab4 <_free_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4605      	mov	r5, r0
 800bab8:	2900      	cmp	r1, #0
 800baba:	d041      	beq.n	800bb40 <_free_r+0x8c>
 800babc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac0:	1f0c      	subs	r4, r1, #4
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	bfb8      	it	lt
 800bac6:	18e4      	addlt	r4, r4, r3
 800bac8:	f7ff ff60 	bl	800b98c <__malloc_lock>
 800bacc:	4a1d      	ldr	r2, [pc, #116]	@ (800bb44 <_free_r+0x90>)
 800bace:	6813      	ldr	r3, [r2, #0]
 800bad0:	b933      	cbnz	r3, 800bae0 <_free_r+0x2c>
 800bad2:	6063      	str	r3, [r4, #4]
 800bad4:	6014      	str	r4, [r2, #0]
 800bad6:	4628      	mov	r0, r5
 800bad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800badc:	f7ff bf5c 	b.w	800b998 <__malloc_unlock>
 800bae0:	42a3      	cmp	r3, r4
 800bae2:	d908      	bls.n	800baf6 <_free_r+0x42>
 800bae4:	6820      	ldr	r0, [r4, #0]
 800bae6:	1821      	adds	r1, r4, r0
 800bae8:	428b      	cmp	r3, r1
 800baea:	bf01      	itttt	eq
 800baec:	6819      	ldreq	r1, [r3, #0]
 800baee:	685b      	ldreq	r3, [r3, #4]
 800baf0:	1809      	addeq	r1, r1, r0
 800baf2:	6021      	streq	r1, [r4, #0]
 800baf4:	e7ed      	b.n	800bad2 <_free_r+0x1e>
 800baf6:	461a      	mov	r2, r3
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	b10b      	cbz	r3, 800bb00 <_free_r+0x4c>
 800bafc:	42a3      	cmp	r3, r4
 800bafe:	d9fa      	bls.n	800baf6 <_free_r+0x42>
 800bb00:	6811      	ldr	r1, [r2, #0]
 800bb02:	1850      	adds	r0, r2, r1
 800bb04:	42a0      	cmp	r0, r4
 800bb06:	d10b      	bne.n	800bb20 <_free_r+0x6c>
 800bb08:	6820      	ldr	r0, [r4, #0]
 800bb0a:	4401      	add	r1, r0
 800bb0c:	1850      	adds	r0, r2, r1
 800bb0e:	4283      	cmp	r3, r0
 800bb10:	6011      	str	r1, [r2, #0]
 800bb12:	d1e0      	bne.n	800bad6 <_free_r+0x22>
 800bb14:	6818      	ldr	r0, [r3, #0]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	6053      	str	r3, [r2, #4]
 800bb1a:	4408      	add	r0, r1
 800bb1c:	6010      	str	r0, [r2, #0]
 800bb1e:	e7da      	b.n	800bad6 <_free_r+0x22>
 800bb20:	d902      	bls.n	800bb28 <_free_r+0x74>
 800bb22:	230c      	movs	r3, #12
 800bb24:	602b      	str	r3, [r5, #0]
 800bb26:	e7d6      	b.n	800bad6 <_free_r+0x22>
 800bb28:	6820      	ldr	r0, [r4, #0]
 800bb2a:	1821      	adds	r1, r4, r0
 800bb2c:	428b      	cmp	r3, r1
 800bb2e:	bf04      	itt	eq
 800bb30:	6819      	ldreq	r1, [r3, #0]
 800bb32:	685b      	ldreq	r3, [r3, #4]
 800bb34:	6063      	str	r3, [r4, #4]
 800bb36:	bf04      	itt	eq
 800bb38:	1809      	addeq	r1, r1, r0
 800bb3a:	6021      	streq	r1, [r4, #0]
 800bb3c:	6054      	str	r4, [r2, #4]
 800bb3e:	e7ca      	b.n	800bad6 <_free_r+0x22>
 800bb40:	bd38      	pop	{r3, r4, r5, pc}
 800bb42:	bf00      	nop
 800bb44:	200005bc 	.word	0x200005bc

0800bb48 <_malloc_usable_size_r>:
 800bb48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb4c:	1f18      	subs	r0, r3, #4
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	bfbc      	itt	lt
 800bb52:	580b      	ldrlt	r3, [r1, r0]
 800bb54:	18c0      	addlt	r0, r0, r3
 800bb56:	4770      	bx	lr

0800bb58 <_init>:
 800bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5a:	bf00      	nop
 800bb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb5e:	bc08      	pop	{r3}
 800bb60:	469e      	mov	lr, r3
 800bb62:	4770      	bx	lr

0800bb64 <_fini>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	bf00      	nop
 800bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6a:	bc08      	pop	{r3}
 800bb6c:	469e      	mov	lr, r3
 800bb6e:	4770      	bx	lr
