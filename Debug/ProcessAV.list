
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d318  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  0800d4a0  0800d4a0  0000e4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3c8  0800e3c8  00010068  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3c8  0800e3c8  0000f3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3d0  0800e3d0  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3d0  0800e3d0  0000f3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3d4  0800e3d4  0000f3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800e3d8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010068  2**0
                  CONTENTS
 10 .bss          00000754  20000068  20000068  00010068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007bc  200007bc  00010068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a664  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ccb  00000000  00000000  0002a6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d0  00000000  00000000  0002e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051ea  00000000  00000000  0002fb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f092  00000000  00000000  00034d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6c05  00000000  00000000  00053e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012aa19  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00001277  00000000  00000000  0012aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000688c  00000000  00000000  0012bcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00132560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d488 	.word	0x0800d488

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800d488 	.word	0x0800d488

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <convert_color_16_to_18>:

uint16_t BackGroundColor = 0xFFFF; /*Variabila globala pentru culoarea de fundal curenta*/


void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80004d4:	88fb      	ldrh	r3, [r7, #6]
 80004d6:	0adb      	lsrs	r3, r3, #11
 80004d8:	b29b      	uxth	r3, r3
 80004da:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 80004dc:	88fb      	ldrh	r3, [r7, #6]
 80004de:	115b      	asrs	r3, r3, #5
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80004e6:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 80004e8:	88fb      	ldrh	r3, [r7, #6]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	f003 031f 	and.w	r3, r3, #31
 80004f0:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	4613      	mov	r3, r2
 80004f6:	019b      	lsls	r3, r3, #6
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4a16      	ldr	r2, [pc, #88]	@ (8000554 <convert_color_16_to_18+0x8c>)
 80004fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000500:	441a      	add	r2, r3
 8000502:	1112      	asrs	r2, r2, #4
 8000504:	17db      	asrs	r3, r3, #31
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	b2db      	uxtb	r3, r3
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 800050e:	7bbb      	ldrb	r3, [r7, #14]
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8000514:	7b7a      	ldrb	r2, [r7, #13]
 8000516:	4613      	mov	r3, r2
 8000518:	019b      	lsls	r3, r3, #6
 800051a:	1a9b      	subs	r3, r3, r2
 800051c:	4a0d      	ldr	r2, [pc, #52]	@ (8000554 <convert_color_16_to_18+0x8c>)
 800051e:	fb82 1203 	smull	r1, r2, r2, r3
 8000522:	441a      	add	r2, r3
 8000524:	1112      	asrs	r2, r2, #4
 8000526:	17db      	asrs	r3, r3, #31
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	b2db      	uxtb	r3, r3
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	7bfa      	ldrb	r2, [r7, #15]
 8000534:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	7bba      	ldrb	r2, [r7, #14]
 800053c:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	3302      	adds	r3, #2
 8000542:	7b7a      	ldrb	r2, [r7, #13]
 8000544:	701a      	strb	r2, [r3, #0]

}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	84210843 	.word	0x84210843

08000558 <write_color>:


void write_color(uint16_t color)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 8000562:	f107 020c 	add.w	r2, r7, #12
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	4611      	mov	r1, r2
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ffac 	bl	80004c8 <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000570:	f107 010c 	add.w	r1, r7, #12
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	2203      	movs	r2, #3
 800057a:	4803      	ldr	r0, [pc, #12]	@ (8000588 <write_color+0x30>)
 800057c:	f005 ff45 	bl	800640a <HAL_SPI_Transmit>


}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000188 	.word	0x20000188

0800058c <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b085      	sub	sp, #20
 8000590:	af02      	add	r7, sp, #8
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
 8000596:	460b      	mov	r3, r1
 8000598:	80bb      	strh	r3, [r7, #4]
 800059a:	4613      	mov	r3, r2
 800059c:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 800059e:	88bb      	ldrh	r3, [r7, #4]
 80005a0:	88fa      	ldrh	r2, [r7, #6]
 80005a2:	88b9      	ldrh	r1, [r7, #4]
 80005a4:	88f8      	ldrh	r0, [r7, #6]
 80005a6:	2477      	movs	r4, #119	@ 0x77
 80005a8:	9400      	str	r4, [sp, #0]
 80005aa:	f001 fa15 	bl	80019d8 <set_adress_window>

	DC_DATA();
 80005ae:	2201      	movs	r2, #1
 80005b0:	2108      	movs	r1, #8
 80005b2:	480a      	ldr	r0, [pc, #40]	@ (80005dc <draw_pixel+0x50>)
 80005b4:	f004 fa56 	bl	8004a64 <HAL_GPIO_WritePin>
	CS_A();
 80005b8:	2200      	movs	r2, #0
 80005ba:	2110      	movs	r1, #16
 80005bc:	4807      	ldr	r0, [pc, #28]	@ (80005dc <draw_pixel+0x50>)
 80005be:	f004 fa51 	bl	8004a64 <HAL_GPIO_WritePin>

	write_color(color);
 80005c2:	887b      	ldrh	r3, [r7, #2]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ffc7 	bl	8000558 <write_color>

	CS_D();
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	4803      	ldr	r0, [pc, #12]	@ (80005dc <draw_pixel+0x50>)
 80005d0:	f004 fa48 	bl	8004a64 <HAL_GPIO_WritePin>

}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	40020c00 	.word	0x40020c00

080005e0 <draw_pixel_data>:


static inline void draw_pixel_data(uint16_t x, uint16_t y, uint8_t *data)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	4603      	mov	r3, r0
 80005e8:	603a      	str	r2, [r7, #0]
 80005ea:	80fb      	strh	r3, [r7, #6]
 80005ec:	460b      	mov	r3, r1
 80005ee:	80bb      	strh	r3, [r7, #4]
	set_adress_window(x,y,x,y, 'w');
 80005f0:	88bb      	ldrh	r3, [r7, #4]
 80005f2:	88fa      	ldrh	r2, [r7, #6]
 80005f4:	88b9      	ldrh	r1, [r7, #4]
 80005f6:	88f8      	ldrh	r0, [r7, #6]
 80005f8:	2477      	movs	r4, #119	@ 0x77
 80005fa:	9400      	str	r4, [sp, #0]
 80005fc:	f001 f9ec 	bl	80019d8 <set_adress_window>

	DC_DATA();
 8000600:	2201      	movs	r2, #1
 8000602:	2108      	movs	r1, #8
 8000604:	480b      	ldr	r0, [pc, #44]	@ (8000634 <draw_pixel_data+0x54>)
 8000606:	f004 fa2d 	bl	8004a64 <HAL_GPIO_WritePin>
	CS_A();
 800060a:	2200      	movs	r2, #0
 800060c:	2110      	movs	r1, #16
 800060e:	4809      	ldr	r0, [pc, #36]	@ (8000634 <draw_pixel_data+0x54>)
 8000610:	f004 fa28 	bl	8004a64 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	2203      	movs	r2, #3
 800061a:	6839      	ldr	r1, [r7, #0]
 800061c:	4806      	ldr	r0, [pc, #24]	@ (8000638 <draw_pixel_data+0x58>)
 800061e:	f005 fef4 	bl	800640a <HAL_SPI_Transmit>

	CS_D();
 8000622:	2201      	movs	r2, #1
 8000624:	2110      	movs	r1, #16
 8000626:	4803      	ldr	r0, [pc, #12]	@ (8000634 <draw_pixel_data+0x54>)
 8000628:	f004 fa1c 	bl	8004a64 <HAL_GPIO_WritePin>

}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	40020c00 	.word	0x40020c00
 8000638:	20000188 	.word	0x20000188

0800063c <fill_screen1>:



void fill_screen1(uint16_t color)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af02      	add	r7, sp, #8
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff3a 	bl	80004c8 <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 8000654:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8000658:	f00c fd42 	bl	800d0e0 <malloc>
 800065c:	4603      	mov	r3, r0
 800065e:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000660:	2377      	movs	r3, #119	@ 0x77
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	f240 13df 	movw	r3, #479	@ 0x1df
 8000668:	f240 123f 	movw	r2, #319	@ 0x13f
 800066c:	2100      	movs	r1, #0
 800066e:	2000      	movs	r0, #0
 8000670:	f001 f9b2 	bl	80019d8 <set_adress_window>

	DC_DATA();
 8000674:	2201      	movs	r2, #1
 8000676:	2108      	movs	r1, #8
 8000678:	481e      	ldr	r0, [pc, #120]	@ (80006f4 <fill_screen1+0xb8>)
 800067a:	f004 f9f3 	bl	8004a64 <HAL_GPIO_WritePin>
	CS_A();
 800067e:	2200      	movs	r2, #0
 8000680:	2110      	movs	r1, #16
 8000682:	481c      	ldr	r0, [pc, #112]	@ (80006f4 <fill_screen1+0xb8>)
 8000684:	f004 f9ee 	bl	8004a64 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8000688:	2300      	movs	r3, #0
 800068a:	82fb      	strh	r3, [r7, #22]
 800068c:	e00f      	b.n	80006ae <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 800068e:	8afa      	ldrh	r2, [r7, #22]
 8000690:	4613      	mov	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4413      	add	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4413      	add	r3, r2
 800069a:	461a      	mov	r2, r3
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	8819      	ldrh	r1, [r3, #0]
 80006a2:	789b      	ldrb	r3, [r3, #2]
 80006a4:	8011      	strh	r1, [r2, #0]
 80006a6:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80006a8:	8afb      	ldrh	r3, [r7, #22]
 80006aa:	3301      	adds	r3, #1
 80006ac:	82fb      	strh	r3, [r7, #22]
 80006ae:	8afb      	ldrh	r3, [r7, #22]
 80006b0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006b4:	d3eb      	bcc.n	800068e <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	82bb      	strh	r3, [r7, #20]
 80006ba:	e00a      	b.n	80006d2 <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80006c4:	6939      	ldr	r1, [r7, #16]
 80006c6:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <fill_screen1+0xbc>)
 80006c8:	f005 fe9f 	bl	800640a <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 80006cc:	8abb      	ldrh	r3, [r7, #20]
 80006ce:	3301      	adds	r3, #1
 80006d0:	82bb      	strh	r3, [r7, #20]
 80006d2:	8abb      	ldrh	r3, [r7, #20]
 80006d4:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80006d8:	d3f0      	bcc.n	80006bc <fill_screen1+0x80>

	}

	free(line);
 80006da:	6938      	ldr	r0, [r7, #16]
 80006dc:	f00c fd08 	bl	800d0f0 <free>

	CS_D();
 80006e0:	2201      	movs	r2, #1
 80006e2:	2110      	movs	r1, #16
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <fill_screen1+0xb8>)
 80006e6:	f004 f9bd 	bl	8004a64 <HAL_GPIO_WritePin>

}
 80006ea:	bf00      	nop
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	20000188 	.word	0x20000188

080006fc <fill_screen2>:


void fill_screen2(uint16_t color)
{
 80006fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000700:	b08f      	sub	sp, #60	@ 0x3c
 8000702:	af02      	add	r7, sp, #8
 8000704:	4603      	mov	r3, r0
 8000706:	80fb      	strh	r3, [r7, #6]
 8000708:	466b      	mov	r3, sp
 800070a:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 800070c:	2377      	movs	r3, #119	@ 0x77
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	f240 13df 	movw	r3, #479	@ 0x1df
 8000714:	f240 123f 	movw	r2, #319	@ 0x13f
 8000718:	2100      	movs	r1, #0
 800071a:	2000      	movs	r0, #0
 800071c:	f001 f95c 	bl	80019d8 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 8000720:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8000726:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 800072a:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	0adb      	lsrs	r3, r3, #11
 8000730:	b29b      	uxth	r3, r3
 8000732:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	115b      	asrs	r3, r3, #5
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800073e:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 031f 	and.w	r3, r3, #31
 8000748:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 800074a:	7ffa      	ldrb	r2, [r7, #31]
 800074c:	4613      	mov	r3, r2
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	4a4f      	ldr	r2, [pc, #316]	@ (8000890 <fill_screen2+0x194>)
 8000754:	fb82 1203 	smull	r1, r2, r2, r3
 8000758:	441a      	add	r2, r3
 800075a:	1112      	asrs	r2, r2, #4
 800075c:	17db      	asrs	r3, r3, #31
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 8000762:	7fba      	ldrb	r2, [r7, #30]
 8000764:	4613      	mov	r3, r2
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	4a4a      	ldr	r2, [pc, #296]	@ (8000894 <fill_screen2+0x198>)
 800076c:	fb82 1203 	smull	r1, r2, r2, r3
 8000770:	441a      	add	r2, r3
 8000772:	1152      	asrs	r2, r2, #5
 8000774:	17db      	asrs	r3, r3, #31
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 800077a:	7f7a      	ldrb	r2, [r7, #29]
 800077c:	4613      	mov	r3, r2
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	4a43      	ldr	r2, [pc, #268]	@ (8000890 <fill_screen2+0x194>)
 8000784:	fb82 1203 	smull	r1, r2, r2, r3
 8000788:	441a      	add	r2, r3
 800078a:	1112      	asrs	r2, r2, #4
 800078c:	17db      	asrs	r3, r3, #31
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 8000792:	2201      	movs	r2, #1
 8000794:	2108      	movs	r1, #8
 8000796:	4840      	ldr	r0, [pc, #256]	@ (8000898 <fill_screen2+0x19c>)
 8000798:	f004 f964 	bl	8004a64 <HAL_GPIO_WritePin>
	CS_A();
 800079c:	2200      	movs	r2, #0
 800079e:	2110      	movs	r1, #16
 80007a0:	483d      	ldr	r0, [pc, #244]	@ (8000898 <fill_screen2+0x19c>)
 80007a2:	f004 f95f 	bl	8004a64 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80007a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007a8:	460b      	mov	r3, r1
 80007aa:	3b01      	subs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	2300      	movs	r3, #0
 80007b0:	4688      	mov	r8, r1
 80007b2:	4699      	mov	r9, r3
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007c8:	2300      	movs	r3, #0
 80007ca:	460c      	mov	r4, r1
 80007cc:	461d      	mov	r5, r3
 80007ce:	f04f 0200 	mov.w	r2, #0
 80007d2:	f04f 0300 	mov.w	r3, #0
 80007d6:	00eb      	lsls	r3, r5, #3
 80007d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007dc:	00e2      	lsls	r2, r4, #3
 80007de:	1dcb      	adds	r3, r1, #7
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	ebad 0d03 	sub.w	sp, sp, r3
 80007e8:	ab02      	add	r3, sp, #8
 80007ea:	3300      	adds	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007f2:	e011      	b.n	8000818 <fill_screen2+0x11c>
	{
		frame[j] = r;
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f8:	4413      	add	r3, r2
 80007fa:	7ffa      	ldrb	r2, [r7, #31]
 80007fc:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 80007fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000800:	3301      	adds	r3, #1
 8000802:	697a      	ldr	r2, [r7, #20]
 8000804:	7fb9      	ldrb	r1, [r7, #30]
 8000806:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8000808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800080a:	3302      	adds	r3, #2
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	7f79      	ldrb	r1, [r7, #29]
 8000810:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 8000812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000814:	3303      	adds	r3, #3
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081c:	429a      	cmp	r2, r3
 800081e:	d3e9      	bcc.n	80007f4 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 8000820:	6a3a      	ldr	r2, [r7, #32]
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <fill_screen2+0x1a0>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800083e:	e012      	b.n	8000866 <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 8000840:	bf00      	nop
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <fill_screen2+0x1a0>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0fa      	beq.n	8000842 <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 800084c:	4b13      	ldr	r3, [pc, #76]	@ (800089c <fill_screen2+0x1a0>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	6979      	ldr	r1, [r7, #20]
 800085a:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <fill_screen2+0x1a4>)
 800085c:	f006 fb02 	bl	8006e64 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 8000860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000862:	3301      	adds	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	429a      	cmp	r2, r3
 800086c:	d3e8      	bcc.n	8000840 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 800086e:	bf00      	nop
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <fill_screen2+0x1a0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0fa      	beq.n	8000870 <fill_screen2+0x174>
	CS_D();
 800087a:	2201      	movs	r2, #1
 800087c:	2110      	movs	r1, #16
 800087e:	4806      	ldr	r0, [pc, #24]	@ (8000898 <fill_screen2+0x19c>)
 8000880:	f004 f8f0 	bl	8004a64 <HAL_GPIO_WritePin>
 8000884:	46b5      	mov	sp, r6
}
 8000886:	bf00      	nop
 8000888:	3734      	adds	r7, #52	@ 0x34
 800088a:	46bd      	mov	sp, r7
 800088c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000890:	84210843 	.word	0x84210843
 8000894:	82082083 	.word	0x82082083
 8000898:	40020c00 	.word	0x40020c00
 800089c:	200003d0 	.word	0x200003d0
 80008a0:	20000188 	.word	0x20000188

080008a4 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	@ 0x24
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	4604      	mov	r4, r0
 80008ac:	4608      	mov	r0, r1
 80008ae:	4611      	mov	r1, r2
 80008b0:	461a      	mov	r2, r3
 80008b2:	4623      	mov	r3, r4
 80008b4:	80fb      	strh	r3, [r7, #6]
 80008b6:	4603      	mov	r3, r0
 80008b8:	80bb      	strh	r3, [r7, #4]
 80008ba:	460b      	mov	r3, r1
 80008bc:	70fb      	strb	r3, [r7, #3]
 80008be:	4613      	mov	r3, r2
 80008c0:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 80008c2:	4b3a      	ldr	r3, [pc, #232]	@ (80009ac <print_character+0x108>)
 80008c4:	889a      	ldrh	r2, [r3, #4]
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	4413      	add	r3, r2
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	3b01      	subs	r3, #1
 80008ce:	b29c      	uxth	r4, r3
 80008d0:	4b36      	ldr	r3, [pc, #216]	@ (80009ac <print_character+0x108>)
 80008d2:	88da      	ldrh	r2, [r3, #6]
 80008d4:	88bb      	ldrh	r3, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	b29b      	uxth	r3, r3
 80008da:	3b01      	subs	r3, #1
 80008dc:	b29b      	uxth	r3, r3
 80008de:	88b9      	ldrh	r1, [r7, #4]
 80008e0:	88f8      	ldrh	r0, [r7, #6]
 80008e2:	2277      	movs	r2, #119	@ 0x77
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	4622      	mov	r2, r4
 80008e8:	f001 f876 	bl	80019d8 <set_adress_window>

	uint16_t mask = 0x8000;
 80008ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f0:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 80008f6:	f107 020c 	add.w	r2, r7, #12
 80008fa:	883b      	ldrh	r3, [r7, #0]
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fde2 	bl	80004c8 <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 8000904:	f107 0208 	add.w	r2, r7, #8
 8000908:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fddb 	bl	80004c8 <convert_color_16_to_18>


	DC_DATA();
 8000912:	2201      	movs	r2, #1
 8000914:	2108      	movs	r1, #8
 8000916:	4826      	ldr	r0, [pc, #152]	@ (80009b0 <print_character+0x10c>)
 8000918:	f004 f8a4 	bl	8004a64 <HAL_GPIO_WritePin>
	CS_A();
 800091c:	2200      	movs	r2, #0
 800091e:	2110      	movs	r1, #16
 8000920:	4823      	ldr	r0, [pc, #140]	@ (80009b0 <print_character+0x10c>)
 8000922:	f004 f89f 	bl	8004a64 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 8000926:	2300      	movs	r3, #0
 8000928:	75fb      	strb	r3, [r7, #23]
 800092a:	e030      	b.n	800098e <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 800092c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <print_character+0x108>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	3b20      	subs	r3, #32
 8000934:	491d      	ldr	r1, [pc, #116]	@ (80009ac <print_character+0x108>)
 8000936:	88c9      	ldrh	r1, [r1, #6]
 8000938:	fb03 f101 	mul.w	r1, r3, r1
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	440b      	add	r3, r1
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000948:	2300      	movs	r3, #0
 800094a:	75bb      	strb	r3, [r7, #22]
 800094c:	e016      	b.n	800097c <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 800094e:	8a7a      	ldrh	r2, [r7, #18]
 8000950:	7dbb      	ldrb	r3, [r7, #22]
 8000952:	409a      	lsls	r2, r3
 8000954:	8abb      	ldrh	r3, [r7, #20]
 8000956:	4013      	ands	r3, r2
 8000958:	2b00      	cmp	r3, #0
 800095a:	d006      	beq.n	800096a <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2103      	movs	r1, #3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fea0 	bl	80016a8 <LCD_send_data_multi>
 8000968:	e005      	b.n	8000976 <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2103      	movs	r1, #3
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fe99 	bl	80016a8 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 8000976:	7dbb      	ldrb	r3, [r7, #22]
 8000978:	3301      	adds	r3, #1
 800097a:	75bb      	strb	r3, [r7, #22]
 800097c:	7dbb      	ldrb	r3, [r7, #22]
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <print_character+0x108>)
 8000982:	889b      	ldrh	r3, [r3, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	d3e2      	bcc.n	800094e <print_character+0xaa>
	for(i=0; i<font.height; i++)
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	3301      	adds	r3, #1
 800098c:	75fb      	strb	r3, [r7, #23]
 800098e:	7dfb      	ldrb	r3, [r7, #23]
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <print_character+0x108>)
 8000994:	88db      	ldrh	r3, [r3, #6]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3c8      	bcc.n	800092c <print_character+0x88>
			}
		}
	}

	CS_D();
 800099a:	2201      	movs	r2, #1
 800099c:	2110      	movs	r1, #16
 800099e:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <print_character+0x10c>)
 80009a0:	f004 f860 	bl	8004a64 <HAL_GPIO_WritePin>

}
 80009a4:	bf00      	nop
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd90      	pop	{r4, r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	40020c00 	.word	0x40020c00

080009b4 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b089      	sub	sp, #36	@ 0x24
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	60ba      	str	r2, [r7, #8]
 80009bc:	461a      	mov	r2, r3
 80009be:	4603      	mov	r3, r0
 80009c0:	81fb      	strh	r3, [r7, #14]
 80009c2:	460b      	mov	r3, r1
 80009c4:	81bb      	strh	r3, [r7, #12]
 80009c6:	4613      	mov	r3, r2
 80009c8:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 80009ce:	e027      	b.n	8000a20 <print_string+0x6c>
	{
		if(x + font.width > 320)
 80009d0:	89fb      	ldrh	r3, [r7, #14]
 80009d2:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <print_string+0x84>)
 80009d4:	8892      	ldrh	r2, [r2, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009dc:	dd07      	ble.n	80009ee <print_string+0x3a>
		{
			x = font.width;
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <print_string+0x84>)
 80009e0:	889b      	ldrh	r3, [r3, #4]
 80009e2:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <print_string+0x84>)
 80009e6:	88da      	ldrh	r2, [r3, #6]
 80009e8:	89bb      	ldrh	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 80009ee:	89bb      	ldrh	r3, [r7, #12]
 80009f0:	4a11      	ldr	r2, [pc, #68]	@ (8000a38 <print_string+0x84>)
 80009f2:	88d2      	ldrh	r2, [r2, #6]
 80009f4:	4413      	add	r3, r2
 80009f6:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80009fa:	dc18      	bgt.n	8000a2e <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000a02:	89b9      	ldrh	r1, [r7, #12]
 8000a04:	89f8      	ldrh	r0, [r7, #14]
 8000a06:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	4623      	mov	r3, r4
 8000a0c:	f7ff ff4a 	bl	80008a4 <print_character>
		string++;
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <print_string+0x84>)
 8000a18:	889a      	ldrh	r2, [r3, #4]
 8000a1a:	89fb      	ldrh	r3, [r7, #14]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	4413      	add	r3, r2
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d3d1      	bcc.n	80009d0 <print_string+0x1c>
 8000a2c:	e000      	b.n	8000a30 <print_string+0x7c>
			return;
 8000a2e:	bf00      	nop
	}

}
 8000a30:	371c      	adds	r7, #28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd90      	pop	{r4, r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000

08000a3c <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	4604      	mov	r4, r0
 8000a44:	4608      	mov	r0, r1
 8000a46:	4611      	mov	r1, r2
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4623      	mov	r3, r4
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80bb      	strh	r3, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	807b      	strh	r3, [r7, #2]
 8000a56:	4613      	mov	r3, r2
 8000a58:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	887b      	ldrh	r3, [r7, #2]
 8000a5e:	4413      	add	r3, r2
 8000a60:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	88b9      	ldrh	r1, [r7, #4]
 8000a6c:	88f8      	ldrh	r0, [r7, #6]
 8000a6e:	2477      	movs	r4, #119	@ 0x77
 8000a70:	9400      	str	r4, [sp, #0]
 8000a72:	f000 ffb1 	bl	80019d8 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000a76:	f107 0208 	add.w	r2, r7, #8
 8000a7a:	883b      	ldrh	r3, [r7, #0]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fd22 	bl	80004c8 <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	81fb      	strh	r3, [r7, #14]
 8000a88:	e008      	b.n	8000a9c <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	2103      	movs	r1, #3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fe09 	bl	80016a8 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	81fb      	strh	r3, [r7, #14]
 8000a9c:	89fa      	ldrh	r2, [r7, #14]
 8000a9e:	8879      	ldrh	r1, [r7, #2]
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	1acb      	subs	r3, r1, r3
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf0      	blt.n	8000a8a <draw_horizontal_line+0x4e>
	}


}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}

08000ab2 <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000ab2:	b590      	push	{r4, r7, lr}
 8000ab4:	b087      	sub	sp, #28
 8000ab6:	af02      	add	r7, sp, #8
 8000ab8:	4604      	mov	r4, r0
 8000aba:	4608      	mov	r0, r1
 8000abc:	4611      	mov	r1, r2
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	80fb      	strh	r3, [r7, #6]
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	80bb      	strh	r3, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
 8000acc:	4613      	mov	r3, r2
 8000ace:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000ad0:	88ba      	ldrh	r2, [r7, #4]
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	88fa      	ldrh	r2, [r7, #6]
 8000ae0:	88b9      	ldrh	r1, [r7, #4]
 8000ae2:	88f8      	ldrh	r0, [r7, #6]
 8000ae4:	2477      	movs	r4, #119	@ 0x77
 8000ae6:	9400      	str	r4, [sp, #0]
 8000ae8:	f000 ff76 	bl	80019d8 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000aec:	f107 0208 	add.w	r2, r7, #8
 8000af0:	883b      	ldrh	r3, [r7, #0]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fce7 	bl	80004c8 <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	81fb      	strh	r3, [r7, #14]
 8000afe:	e008      	b.n	8000b12 <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2103      	movs	r1, #3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fdce 	bl	80016a8 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	81fb      	strh	r3, [r7, #14]
 8000b12:	89fa      	ldrh	r2, [r7, #14]
 8000b14:	8879      	ldrh	r1, [r7, #2]
 8000b16:	88bb      	ldrh	r3, [r7, #4]
 8000b18:	1acb      	subs	r3, r1, r3
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf0      	blt.n	8000b00 <draw_vertical_line+0x4e>
	}


}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}

08000b28 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b089      	sub	sp, #36	@ 0x24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4608      	mov	r0, r1
 8000b32:	4611      	mov	r1, r2
 8000b34:	461a      	mov	r2, r3
 8000b36:	4623      	mov	r3, r4
 8000b38:	80fb      	strh	r3, [r7, #6]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80bb      	strh	r3, [r7, #4]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	807b      	strh	r3, [r7, #2]
 8000b42:	4613      	mov	r3, r2
 8000b44:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	883b      	ldrh	r3, [r7, #0]
 8000b4a:	fb12 f303 	smulbb	r3, r2, r3
 8000b4e:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8000b50:	f107 020c 	add.w	r2, r7, #12
 8000b54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fcb5 	bl	80004c8 <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8000b5e:	8aba      	ldrh	r2, [r7, #20]
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f00c faba 	bl	800d0e0 <malloc>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	82fb      	strh	r3, [r7, #22]
 8000b74:	e00f      	b.n	8000b96 <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000b76:	8afa      	ldrh	r2, [r7, #22]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4413      	add	r3, r2
 8000b82:	461a      	mov	r2, r3
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	8819      	ldrh	r1, [r3, #0]
 8000b8a:	789b      	ldrb	r3, [r3, #2]
 8000b8c:	8011      	strh	r1, [r2, #0]
 8000b8e:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8000b90:	8afb      	ldrh	r3, [r7, #22]
 8000b92:	3301      	adds	r3, #1
 8000b94:	82fb      	strh	r3, [r7, #22]
 8000b96:	8afa      	ldrh	r2, [r7, #22]
 8000b98:	8abb      	ldrh	r3, [r7, #20]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d3eb      	bcc.n	8000b76 <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8000b9e:	88fa      	ldrh	r2, [r7, #6]
 8000ba0:	887b      	ldrh	r3, [r7, #2]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	b29c      	uxth	r4, r3
 8000baa:	88ba      	ldrh	r2, [r7, #4]
 8000bac:	883b      	ldrh	r3, [r7, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	88b9      	ldrh	r1, [r7, #4]
 8000bb8:	88f8      	ldrh	r0, [r7, #6]
 8000bba:	2277      	movs	r2, #119	@ 0x77
 8000bbc:	9200      	str	r2, [sp, #0]
 8000bbe:	4622      	mov	r2, r4
 8000bc0:	f000 ff0a 	bl	80019d8 <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000bc4:	8aba      	ldrh	r2, [r7, #20]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	4619      	mov	r1, r3
 8000bce:	6938      	ldr	r0, [r7, #16]
 8000bd0:	f000 fd6a 	bl	80016a8 <LCD_send_data_multi>

	free(data);
 8000bd4:	6938      	ldr	r0, [r7, #16]
 8000bd6:	f00c fa8b 	bl	800d0f0 <free>

}
 8000bda:	bf00      	nop
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd90      	pop	{r4, r7, pc}

08000be2 <init_entity_sd>:


void init_entity_sd(ENTITY *entity)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	entity->x0 = 0;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	805a      	strh	r2, [r3, #2]
	entity->y0 = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	809a      	strh	r2, [r3, #4]
	entity->y1 = 0;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	811a      	strh	r2, [r3, #8]
	entity->x1 = 0;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	80da      	strh	r2, [r3, #6]

	entity->ST.SD.filePathName = malloc(sizeof(char)*20);
 8000c02:	2014      	movs	r0, #20
 8000c04:	f00c fa6c 	bl	800d0e0 <malloc>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	611a      	str	r2, [r3, #16]
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <free_entity_sd>:


void free_entity_sd(ENTITY *entity)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	free(entity->ST.SD.filePathName);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f00c fa63 	bl	800d0f0 <free>
	free(entity->ST.SD.data);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00c fa5e 	bl	800d0f0 <free>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <draw_entity>:


void draw_entity(ENTITY *entity)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b089      	sub	sp, #36	@ 0x24
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	6078      	str	r0, [r7, #4]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]

	if(((entity->id & 1<<7) != 0))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da72      	bge.n	8000d38 <draw_entity+0xfc>
	{
		/*Avem imagine monocolor <= 32x32 -> imagine nu se afla pe cardul SD!*/

		if((entity->id & (0xC0)) == 0xC0)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000c5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8000c5c:	d108      	bne.n	8000c70 <draw_entity+0x34>
		{
			/*
			 * Imagine stocata local in bufferul *data din afara structurii
			 */

			LCD_send_data_multi(entity->ST.LC.data, entity->ST.LC.size);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	4619      	mov	r1, r3
 8000c68:	4610      	mov	r0, r2
 8000c6a:	f000 fd1d 	bl	80016a8 <LCD_send_data_multi>
 8000c6e:	e0e8      	b.n	8000e42 <draw_entity+0x206>
			return;

		}

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	fb12 f303 	smulbb	r3, r2, r3
 8000c84:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->ST.color, pixel);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	899b      	ldrh	r3, [r3, #12]
 8000c8a:	f107 020c 	add.w	r2, r7, #12
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fc19 	bl	80004c8 <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8000c96:	8aba      	ldrh	r2, [r7, #20]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00c fa1e 	bl	800d0e0 <malloc>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8000ca8:	2300      	movs	r3, #0
 8000caa:	82fb      	strh	r3, [r7, #22]
 8000cac:	e00f      	b.n	8000cce <draw_entity+0x92>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000cae:	8afa      	ldrh	r2, [r7, #22]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4413      	add	r3, r2
 8000cba:	461a      	mov	r2, r3
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	8819      	ldrh	r1, [r3, #0]
 8000cc2:	789b      	ldrb	r3, [r3, #2]
 8000cc4:	8011      	strh	r1, [r2, #0]
 8000cc6:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8000cc8:	8afb      	ldrh	r3, [r7, #22]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	82fb      	strh	r3, [r7, #22]
 8000cce:	8afa      	ldrh	r2, [r7, #22]
 8000cd0:	8abb      	ldrh	r3, [r7, #20]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d3eb      	bcc.n	8000cae <draw_entity+0x72>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cdc:	b298      	uxth	r0, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ce4:	b299      	uxth	r1, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	b29c      	uxth	r4, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	3b01      	subs	r3, #1
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	2277      	movs	r2, #119	@ 0x77
 8000d18:	9200      	str	r2, [sp, #0]
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	f000 fe5c 	bl	80019d8 <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000d20:	8aba      	ldrh	r2, [r7, #20]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6938      	ldr	r0, [r7, #16]
 8000d2c:	f000 fcbc 	bl	80016a8 <LCD_send_data_multi>

		free(data);
 8000d30:	6938      	ldr	r0, [r7, #16]
 8000d32:	f00c f9dd 	bl	800d0f0 <free>
 8000d36:	e084      	b.n	8000e42 <draw_entity+0x206>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 8000d38:	2300      	movs	r3, #0
 8000d3a:	817b      	strh	r3, [r7, #10]

		read_image_file(entity, &byteNr, &flagImgDone);
 8000d3c:	f107 020f 	add.w	r2, r7, #15
 8000d40:	f107 030a 	add.w	r3, r7, #10
 8000d44:	4619      	mov	r1, r3
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f001 fe1c 	bl	8002984 <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d52:	b298      	uxth	r0, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d5a:	b299      	uxth	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	3b01      	subs	r3, #1
 8000d72:	b29c      	uxth	r4, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	2277      	movs	r2, #119	@ 0x77
 8000d8e:	9200      	str	r2, [sp, #0]
 8000d90:	4622      	mov	r2, r4
 8000d92:	f000 fe21 	bl	80019d8 <set_adress_window>

		DC_DATA();
 8000d96:	2201      	movs	r2, #1
 8000d98:	2108      	movs	r1, #8
 8000d9a:	482b      	ldr	r0, [pc, #172]	@ (8000e48 <draw_entity+0x20c>)
 8000d9c:	f003 fe62 	bl	8004a64 <HAL_GPIO_WritePin>
		CS_A();
 8000da0:	2200      	movs	r2, #0
 8000da2:	2110      	movs	r1, #16
 8000da4:	4828      	ldr	r0, [pc, #160]	@ (8000e48 <draw_entity+0x20c>)
 8000da6:	f003 fe5d 	bl	8004a64 <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 8000daa:	897b      	ldrh	r3, [r7, #10]
 8000dac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000db0:	d20c      	bcs.n	8000dcc <draw_entity+0x190>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->ST.SD.data, byteNr);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	897a      	ldrh	r2, [r7, #10]
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fc74 	bl	80016a8 <LCD_send_data_multi>
			free(entity->ST.SD.data);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00c f993 	bl	800d0f0 <free>
 8000dca:	e03a      	b.n	8000e42 <draw_entity+0x206>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <draw_entity+0x210>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	897a      	ldrh	r2, [r7, #10]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	481d      	ldr	r0, [pc, #116]	@ (8000e50 <draw_entity+0x214>)
 8000ddc:	f006 f842 	bl	8006e64 <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d11c      	bne.n	8000e20 <draw_entity+0x1e4>
				{
					break;
				}

				read_image_file(entity, &byteNr, &flagImgDone);
 8000de6:	f107 020f 	add.w	r2, r7, #15
 8000dea:	f107 030a 	add.w	r3, r7, #10
 8000dee:	4619      	mov	r1, r3
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f001 fdc7 	bl	8002984 <read_image_file>

				while(flagDmaSpiTx == 0);
 8000df6:	bf00      	nop
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <draw_entity+0x210>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0fa      	beq.n	8000df8 <draw_entity+0x1bc>
				flagDmaSpiTx = 0;
 8000e02:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <draw_entity+0x210>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	897a      	ldrh	r2, [r7, #10]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480f      	ldr	r0, [pc, #60]	@ (8000e50 <draw_entity+0x214>)
 8000e12:	f006 f827 	bl	8006e64 <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8000e16:	897b      	ldrh	r3, [r7, #10]
 8000e18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000e1c:	d2e0      	bcs.n	8000de0 <draw_entity+0x1a4>
 8000e1e:	e000      	b.n	8000e22 <draw_entity+0x1e6>
					break;
 8000e20:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8000e22:	bf00      	nop
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <draw_entity+0x210>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0fa      	beq.n	8000e24 <draw_entity+0x1e8>
		free(entity->ST.SD.data);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f00c f95c 	bl	800d0f0 <free>
		CS_D();
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <draw_entity+0x20c>)
 8000e3e:	f003 fe11 	bl	8004a64 <HAL_GPIO_WritePin>

	}


}
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	40020c00 	.word	0x40020c00
 8000e4c:	200003d0 	.word	0x200003d0
 8000e50:	20000188 	.word	0x20000188

08000e54 <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b08c      	sub	sp, #48	@ 0x30
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	4611      	mov	r1, r2
 8000e60:	461a      	mov	r2, r3
 8000e62:	4603      	mov	r3, r0
 8000e64:	817b      	strh	r3, [r7, #10]
 8000e66:	460b      	mov	r3, r1
 8000e68:	813b      	strh	r3, [r7, #8]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	71fb      	strb	r3, [r7, #7]
	 * 		  Modul de Step activ 1, neactiv 0 (deplasare in interiorul ferestrei initiale)
	 * Output: Void
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 8000e6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f2c0 80f1 	blt.w	800105a <translation_entity+0x206>
 8000e78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e7c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e80:	f300 80eb 	bgt.w	800105a <translation_entity+0x206>
 8000e84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f2c0 80e6 	blt.w	800105a <translation_entity+0x206>
 8000e8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e92:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000e96:	f300 80e0 	bgt.w	800105a <translation_entity+0x206>

		return;
	}


	ENTITY temp = *entity;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f107 0414 	add.w	r4, r7, #20
 8000ea0:	461d      	mov	r5, r3
 8000ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea6:	682b      	ldr	r3, [r5, #0]
 8000ea8:	6023      	str	r3, [r4, #0]

	entity->x0 = x;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	897a      	ldrh	r2, [r7, #10]
 8000eae:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	893a      	ldrh	r2, [r7, #8]
 8000eb4:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8000eb6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000eba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d157      	bne.n	8000f72 <translation_entity+0x11e>
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d054      	beq.n	8000f72 <translation_entity+0x11e>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8000ec8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ecc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ed6:	440b      	add	r3, r1
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	da1d      	bge.n	8000f18 <translation_entity+0xc4>
 8000edc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ee0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dd17      	ble.n	8000f18 <translation_entity+0xc4>
		{
			/*Pentru cazul deplasarii pe +x*/
			draw_entity(entity);
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f7ff fea7 	bl	8000c3c <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, BackGroundColor); /*Culoare background*/
 8000eee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ef2:	b298      	uxth	r0, r3
 8000ef4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ef8:	b299      	uxth	r1, r3
 8000efa:	897a      	ldrh	r2, [r7, #10]
 8000efc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f0a:	b29c      	uxth	r4, r3
 8000f0c:	4b57      	ldr	r3, [pc, #348]	@ (800106c <translation_entity+0x218>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	4623      	mov	r3, r4
 8000f14:	f7ff fe08 	bl	8000b28 <draw_rectangle>
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000f18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f1c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f280 809c 	bge.w	800105e <translation_entity+0x20a>
 8000f26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f2a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000f2e:	4413      	add	r3, r2
 8000f30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f34:	4293      	cmp	r3, r2
 8000f36:	f340 8092 	ble.w	800105e <translation_entity+0x20a>
		{
			/*Pentru cazul deplasarii pe -x*/
			draw_entity(entity);
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f7ff fe7e 	bl	8000c3c <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, BackGroundColor); /*Culoare background*/
 8000f40:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	897b      	ldrh	r3, [r7, #10]
 8000f48:	4413      	add	r3, r2
 8000f4a:	b298      	uxth	r0, r3
 8000f4c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f50:	b299      	uxth	r1, r3
 8000f52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	897b      	ldrh	r3, [r7, #10]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f62:	b29c      	uxth	r4, r3
 8000f64:	4b41      	ldr	r3, [pc, #260]	@ (800106c <translation_entity+0x218>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	f7ff fddc 	bl	8000b28 <draw_rectangle>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000f70:	e075      	b.n	800105e <translation_entity+0x20a>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8000f72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f76:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d157      	bne.n	800102e <translation_entity+0x1da>
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d054      	beq.n	800102e <translation_entity+0x1da>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8000f84:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f88:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f92:	440b      	add	r3, r1
 8000f94:	429a      	cmp	r2, r3
 8000f96:	da1e      	bge.n	8000fd6 <translation_entity+0x182>
 8000f98:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f9c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dd18      	ble.n	8000fd6 <translation_entity+0x182>
			{
				/*Pentru cazul deplasarii pe +y*/
				draw_entity(entity);
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff fe49 	bl	8000c3c <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, BackGroundColor);
 8000faa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fae:	b298      	uxth	r0, r3
 8000fb0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fba:	b29c      	uxth	r4, r3
 8000fbc:	893a      	ldrh	r2, [r7, #8]
 8000fbe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b28      	ldr	r3, [pc, #160]	@ (800106c <translation_entity+0x218>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	4622      	mov	r2, r4
 8000fd2:	f7ff fda9 	bl	8000b28 <draw_rectangle>
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8000fd6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fda:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	da3f      	bge.n	8001062 <translation_entity+0x20e>
 8000fe2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000fe6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000fea:	4413      	add	r3, r2
 8000fec:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	dd36      	ble.n	8001062 <translation_entity+0x20e>
			{
				/*Pentru cazul deplasarii pe -y*/
				draw_entity(entity);
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff fe21 	bl	8000c3c <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, BackGroundColor);
 8000ffa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ffe:	b298      	uxth	r0, r3
 8001000:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001004:	b29a      	uxth	r2, r3
 8001006:	893b      	ldrh	r3, [r7, #8]
 8001008:	4413      	add	r3, r2
 800100a:	b299      	uxth	r1, r3
 800100c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001010:	b29c      	uxth	r4, r3
 8001012:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001016:	b29a      	uxth	r2, r3
 8001018:	893b      	ldrh	r3, [r7, #8]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b13      	ldr	r3, [pc, #76]	@ (800106c <translation_entity+0x218>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	4622      	mov	r2, r4
 8001028:	f7ff fd7e 	bl	8000b28 <draw_rectangle>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 800102c:	e019      	b.n	8001062 <translation_entity+0x20e>

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/

			draw_entity(entity);
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f7ff fe04 	bl	8000c3c <draw_entity>
			draw_rectangle(temp.x0, temp.y0, temp.x1, temp.y1, BackGroundColor);
 8001034:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001038:	b298      	uxth	r0, r3
 800103a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800103e:	b299      	uxth	r1, r3
 8001040:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001044:	b29a      	uxth	r2, r3
 8001046:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800104a:	b29c      	uxth	r4, r3
 800104c:	4b07      	ldr	r3, [pc, #28]	@ (800106c <translation_entity+0x218>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4623      	mov	r3, r4
 8001054:	f7ff fd68 	bl	8000b28 <draw_rectangle>
 8001058:	e004      	b.n	8001064 <translation_entity+0x210>
		return;
 800105a:	bf00      	nop
 800105c:	e002      	b.n	8001064 <translation_entity+0x210>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 800105e:	bf00      	nop
 8001060:	e000      	b.n	8001064 <translation_entity+0x210>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001062:	bf00      	nop
		}


}
 8001064:	3728      	adds	r7, #40	@ 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bdb0      	pop	{r4, r5, r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <scaling_entity>:
	}
}


void scaling_entity(ENTITY *entity, const float factor)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b093      	sub	sp, #76	@ 0x4c
 8001074:	af02      	add	r7, sp, #8
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	ed87 0a00 	vstr	s0, [r7]
	 * o referinta catre entitatea de scalat si factorul asociat
	 */

	/*Vom elimina din sfera vizuala imaginea de scalat*/

	draw_rectangle(entity->x0, entity->y0, entity->x1, entity->y1, BackGroundColor);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001082:	b298      	uxth	r0, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800108a:	b299      	uxth	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001092:	b29a      	uxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800109a:	b29c      	uxth	r4, r3
 800109c:	4bb2      	ldr	r3, [pc, #712]	@ (8001368 <scaling_entity+0x2f8>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	4623      	mov	r3, r4
 80010a4:	f7ff fd40 	bl	8000b28 <draw_rectangle>
	 * de scalat
	 */

	FRESULT res;
	char *scalFilePath;
	char *tempFile = "graphic/scalare/temp.bin";
 80010a8:	4bb0      	ldr	r3, [pc, #704]	@ (800136c <scaling_entity+0x2fc>)
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char *fileName = return_file_name_current_path(entity->ST.SD.filePathName);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 fc31 	bl	8002918 <return_file_name_current_path>
 80010b6:	62b8      	str	r0, [r7, #40]	@ 0x28

	scalFilePath = assign_filePath("graphic/scalare/");
 80010b8:	48ad      	ldr	r0, [pc, #692]	@ (8001370 <scaling_entity+0x300>)
 80010ba:	f001 fc09 	bl	80028d0 <assign_filePath>
 80010be:	6278      	str	r0, [r7, #36]	@ 0x24
	scalFilePath = realloc(scalFilePath, strlen(scalFilePath)+ strlen(fileName) +1 );
 80010c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010c2:	f7ff f881 	bl	80001c8 <strlen>
 80010c6:	4604      	mov	r4, r0
 80010c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80010ca:	f7ff f87d 	bl	80001c8 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4423      	add	r3, r4
 80010d2:	3301      	adds	r3, #1
 80010d4:	4619      	mov	r1, r3
 80010d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010d8:	f00c f8c0 	bl	800d25c <realloc>
 80010dc:	6278      	str	r0, [r7, #36]	@ 0x24
	strcat(scalFilePath, fileName);
 80010de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010e2:	f00c f8f9 	bl	800d2d8 <strcat>

	uint16_t x = 0; /*nr d elinii de prelucrat din M1 ai sa avem 32x32 pixeli de prelucrat in M2*/
 80010e6:	2300      	movs	r3, #0
 80010e8:	81fb      	strh	r3, [r7, #14]
	bool flagTerm = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	737b      	strb	r3, [r7, #13]

	int i = 0; /*indexi de referinta in M2*/
 80010ee:	2300      	movs	r3, #0
 80010f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int j = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	int ik = 0; /*indexi de referinta in M1*/
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
	int jk = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]

	bool flagPixel = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	uint8_t *data = malloc(sizeof(uint8_t)*3072);
 8001104:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001108:	f00b ffea 	bl	800d0e0 <malloc>
 800110c:	4603      	mov	r3, r0
 800110e:	61bb      	str	r3, [r7, #24]
	int16_t x1 = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	82fb      	strh	r3, [r7, #22]
	int16_t y1 = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	82bb      	strh	r3, [r7, #20]
	int16_t index = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	827b      	strh	r3, [r7, #18]

	x1 = (int16_t)((entity->x1)*factor);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112a:	edd7 7a00 	vldr	s15, [r7]
 800112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001136:	ee17 3a90 	vmov	r3, s15
 800113a:	82fb      	strh	r3, [r7, #22]
	y1 = (int16_t)((entity->y1)*factor);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114a:	edd7 7a00 	vldr	s15, [r7]
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001156:	ee17 3a90 	vmov	r3, s15
 800115a:	82bb      	strh	r3, [r7, #20]



	while(!flagTerm)
 800115c:	e0d2      	b.n	8001304 <scaling_entity+0x294>
	{
		read_image_file_scaling(entity->ST.SD.filePathName, entity, factor, &x, &flagTerm);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6918      	ldr	r0, [r3, #16]
 8001162:	f107 030d 	add.w	r3, r7, #13
 8001166:	f107 020e 	add.w	r2, r7, #14
 800116a:	ed97 0a00 	vldr	s0, [r7]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f001 fe74 	bl	8002e5c <read_image_file_scaling>

		i = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
		j = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	63bb      	str	r3, [r7, #56]	@ 0x38

		ik = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
		jk = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]

		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8001184:	2300      	movs	r3, #0
 8001186:	633b      	str	r3, [r7, #48]	@ 0x30
 8001188:	e07d      	b.n	8001286 <scaling_entity+0x216>
		{
			/*
			 * Parcurgem frameul asociat matricei scalate M2
			 */

			if((k%(x1*3)==0) && (k!=0))
 800118a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	441a      	add	r2, r3
 8001194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001196:	fb93 f1f2 	sdiv	r1, r3, r2
 800119a:	fb01 f202 	mul.w	r2, r1, r2
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d107      	bne.n	80011b4 <scaling_entity+0x144>
 80011a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <scaling_entity+0x144>
			{
				/*
				 * new line
				 */

				i++;
 80011aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ac:	3301      	adds	r3, #1
 80011ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
				j = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			if(k%3 == 0)
 80011b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80011b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001374 <scaling_entity+0x304>)
 80011b8:	fb83 3201 	smull	r3, r2, r3, r1
 80011bc:	17cb      	asrs	r3, r1, #31
 80011be:	1ad2      	subs	r2, r2, r3
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	1aca      	subs	r2, r1, r3
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	d102      	bne.n	80011d2 <scaling_entity+0x162>
			{
				flagPixel = 1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}

			if(flagPixel == 1)
 80011d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d052      	beq.n	8001280 <scaling_entity+0x210>
			{
				ik = (int)i/factor;
 80011da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011e4:	ed97 7a00 	vldr	s14, [r7]
 80011e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f0:	ee17 3a90 	vmov	r3, s15
 80011f4:	623b      	str	r3, [r7, #32]
				jk = (int)j/factor;
 80011f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001200:	ed97 7a00 	vldr	s14, [r7]
 8001204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120c:	ee17 3a90 	vmov	r3, s15
 8001210:	61fb      	str	r3, [r7, #28]

				index = ik*(entity->x1)*3 + jk*3; /*index normat la M1*/
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001218:	461a      	mov	r2, r3
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	fb03 f202 	mul.w	r2, r3, r2
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	4413      	add	r3, r2
 8001224:	b29b      	uxth	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	0052      	lsls	r2, r2, #1
 800122a:	4413      	add	r3, r2
 800122c:	b29b      	uxth	r3, r3
 800122e:	827b      	strh	r3, [r7, #18]

				data[k] = entity->ST.SD.data[index];
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001238:	441a      	add	r2, r3
 800123a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800123c:	69b9      	ldr	r1, [r7, #24]
 800123e:	440b      	add	r3, r1
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	701a      	strb	r2, [r3, #0]
				data[k+1] = entity->ST.SD.data[index + 1];
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800124c:	3301      	adds	r3, #1
 800124e:	441a      	add	r2, r3
 8001250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001252:	3301      	adds	r3, #1
 8001254:	69b9      	ldr	r1, [r7, #24]
 8001256:	440b      	add	r3, r1
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	701a      	strb	r2, [r3, #0]
				data[k+2] = entity->ST.SD.data[index + 2];
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001264:	3302      	adds	r3, #2
 8001266:	441a      	add	r2, r3
 8001268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800126a:	3302      	adds	r3, #2
 800126c:	69b9      	ldr	r1, [r7, #24]
 800126e:	440b      	add	r3, r1
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	701a      	strb	r2, [r3, #0]

				j++;
 8001274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001276:	3301      	adds	r3, #1
 8001278:	63bb      	str	r3, [r7, #56]	@ 0x38
				flagPixel = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8001280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001282:	3301      	adds	r3, #1
 8001284:	633b      	str	r3, [r7, #48]	@ 0x30
 8001286:	89fb      	ldrh	r3, [r7, #14]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001290:	edd7 7a00 	vldr	s15, [r7]
 8001294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001298:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80012ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b4:	ee17 2a90 	vmov	r2, s15
 80012b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ba:	4293      	cmp	r3, r2
 80012bc:	f6ff af65 	blt.w	800118a <scaling_entity+0x11a>
		/*
		 * Scriem in fisier datele obitnute din frame-ul curent in fisiserul aferent.
		 * Fisiserul va fi salvat in folderul de scalare
		 */

		write_image_file(tempFile, data, (int)(x1*factor)*x*3, x1, y1, flagTerm);
 80012c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012cc:	edd7 7a00 	vldr	s15, [r7]
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d8:	ee17 2a90 	vmov	r2, s15
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	fb03 f202 	mul.w	r2, r3, r2
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	7b7b      	ldrb	r3, [r7, #13]
 80012ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	460a      	mov	r2, r1
 80012fc:	69b9      	ldr	r1, [r7, #24]
 80012fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001300:	f001 ffaa 	bl	8003258 <write_image_file>
	while(!flagTerm)
 8001304:	7b7b      	ldrb	r3, [r7, #13]
 8001306:	f083 0301 	eor.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	f47f af26 	bne.w	800115e <scaling_entity+0xee>
	 * renumind fisiserul tempFile in care ne-am scris datele din temp.bin in
	 * numele aferent acestuia stocat in scalFilePath
	 */


	res = f_unlink(scalFilePath);
 8001312:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001314:	f00b fce3 	bl	800ccde <f_unlink>
 8001318:	4603      	mov	r3, r0
 800131a:	747b      	strb	r3, [r7, #17]

	if((res != FR_OK) && (res != FR_NO_FILE))
 800131c:	7c7b      	ldrb	r3, [r7, #17]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <scaling_entity+0x2b8>
 8001322:	7c7b      	ldrb	r3, [r7, #17]
 8001324:	2b04      	cmp	r3, #4
 8001326:	d119      	bne.n	800135c <scaling_entity+0x2ec>
	{
		return;
	}

	res = f_rename(tempFile, scalFilePath);
 8001328:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800132a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800132c:	f00b fd82 	bl	800ce34 <f_rename>
 8001330:	4603      	mov	r3, r0
 8001332:	747b      	strb	r3, [r7, #17]

	if(res != FR_OK)
 8001334:	7c7b      	ldrb	r3, [r7, #17]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d112      	bne.n	8001360 <scaling_entity+0x2f0>
	 * Atribuim noile valori entitatii prelucrate
	 */

	//free(entity->filePathName);

	entity->x1=x1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	8afa      	ldrh	r2, [r7, #22]
 800133e:	80da      	strh	r2, [r3, #6]
	entity->y1=y1;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	8aba      	ldrh	r2, [r7, #20]
 8001344:	811a      	strh	r2, [r3, #8]
	assign_file_path_entity(entity, scalFilePath);
 8001346:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f001 fb0b 	bl	8002964 <assign_file_path_entity>

	free(data);
 800134e:	69b8      	ldr	r0, [r7, #24]
 8001350:	f00b fece 	bl	800d0f0 <free>
	free(scalFilePath);
 8001354:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001356:	f00b fecb 	bl	800d0f0 <free>
 800135a:	e002      	b.n	8001362 <scaling_entity+0x2f2>
		return;
 800135c:	bf00      	nop
 800135e:	e000      	b.n	8001362 <scaling_entity+0x2f2>
		return;
 8001360:	bf00      	nop
	//free(entity->data);

}
 8001362:	3744      	adds	r7, #68	@ 0x44
 8001364:	46bd      	mov	sp, r7
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	20000008 	.word	0x20000008
 800136c:	0800d4a0 	.word	0x0800d4a0
 8001370:	0800d4bc 	.word	0x0800d4bc
 8001374:	55555556 	.word	0x55555556

08001378 <rotate_entity>:


void rotate_entity(ENTITY *entity, int theta)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b08b      	sub	sp, #44	@ 0x2c
 800137c:	af02      	add	r7, sp, #8
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	 */


	/*Vom elimina din campul vizual imaginea curenta*/

	draw_rectangle(entity->x0, entity->y0, entity->x1, entity->y1, BackGroundColor);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001388:	b298      	uxth	r0, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001390:	b299      	uxth	r1, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013a0:	b29c      	uxth	r4, r3
 80013a2:	4b64      	ldr	r3, [pc, #400]	@ (8001534 <rotate_entity+0x1bc>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	4623      	mov	r3, r4
 80013aa:	f7ff fbbd 	bl	8000b28 <draw_rectangle>

	/*Aflam initial coordonatele pivotului de referinta*/

	const int16_t pivotX = entity->x0 + (int16_t)(entity->x1/2);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013bc:	0fd9      	lsrs	r1, r3, #31
 80013be:	440b      	add	r3, r1
 80013c0:	105b      	asrs	r3, r3, #1
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	82fb      	strh	r3, [r7, #22]
	const int16_t pivotY = entity->y0 + (int16_t)(entity->y1/2);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013da:	0fd9      	lsrs	r1, r3, #31
 80013dc:	440b      	add	r3, r1
 80013de:	105b      	asrs	r3, r3, #1
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	82bb      	strh	r3, [r7, #20]

	int16_t i = (int16_t)(-(entity->y1/2));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013f0:	0fda      	lsrs	r2, r3, #31
 80013f2:	4413      	add	r3, r2
 80013f4:	105b      	asrs	r3, r3, #1
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	425b      	negs	r3, r3
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	83fb      	strh	r3, [r7, #30]
	int16_t j = (int16_t)(-(entity->x1/2));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001406:	0fda      	lsrs	r2, r3, #31
 8001408:	4413      	add	r3, r2
 800140a:	105b      	asrs	r3, r3, #1
 800140c:	b21b      	sxth	r3, r3
 800140e:	b29b      	uxth	r3, r3
 8001410:	425b      	negs	r3, r3
 8001412:	b29b      	uxth	r3, r3
 8001414:	83bb      	strh	r3, [r7, #28]

	int16_t rotPosX = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	827b      	strh	r3, [r7, #18]
	int16_t rotPosY = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	823b      	strh	r3, [r7, #16]

	bool flagImgDone = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
	bool flagPixel = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	76fb      	strb	r3, [r7, #27]
	uint16_t byteNr = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	81bb      	strh	r3, [r7, #12]

	uint8_t pixel[3];


	while(!flagImgDone)
 800142a:	e074      	b.n	8001516 <rotate_entity+0x19e>
	{
		read_image_file(entity, &byteNr, &flagImgDone);
 800142c:	f107 020f 	add.w	r2, r7, #15
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	4619      	mov	r1, r3
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f001 faa4 	bl	8002984 <read_image_file>


		for(int16_t k = 0; k<byteNr; k++)
 800143c:	2300      	movs	r3, #0
 800143e:	833b      	strh	r3, [r7, #24]
 8001440:	e064      	b.n	800150c <rotate_entity+0x194>
		{
			if(j == (entity->x1/2))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001448:	0fda      	lsrs	r2, r3, #31
 800144a:	4413      	add	r3, r2
 800144c:	105b      	asrs	r3, r3, #1
 800144e:	b21b      	sxth	r3, r3
 8001450:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001454:	429a      	cmp	r2, r3
 8001456:	d110      	bne.n	800147a <rotate_entity+0x102>
			{
				i++;
 8001458:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145c:	b29b      	uxth	r3, r3
 800145e:	3301      	adds	r3, #1
 8001460:	b29b      	uxth	r3, r3
 8001462:	83fb      	strh	r3, [r7, #30]
				j = (int16_t)(-(entity->x1/2));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800146a:	0fda      	lsrs	r2, r3, #31
 800146c:	4413      	add	r3, r2
 800146e:	105b      	asrs	r3, r3, #1
 8001470:	b21b      	sxth	r3, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	425b      	negs	r3, r3
 8001476:	b29b      	uxth	r3, r3
 8001478:	83bb      	strh	r3, [r7, #28]

			}

			if(k%3 == 0)
 800147a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800147e:	4b2e      	ldr	r3, [pc, #184]	@ (8001538 <rotate_entity+0x1c0>)
 8001480:	fb83 3102 	smull	r3, r1, r3, r2
 8001484:	17d3      	asrs	r3, r2, #31
 8001486:	1ac9      	subs	r1, r1, r3
 8001488:	460b      	mov	r3, r1
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	440b      	add	r3, r1
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	b21b      	sxth	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <rotate_entity+0x122>
			{
				flagPixel = 1;
 8001496:	2301      	movs	r3, #1
 8001498:	76fb      	strb	r3, [r7, #27]
			}

			if(flagPixel == 1)
 800149a:	7efb      	ldrb	r3, [r7, #27]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d02f      	beq.n	8001500 <rotate_entity+0x188>
			{
				pixel[0] = entity->ST.SD.data[k];
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	723b      	strb	r3, [r7, #8]
				pixel[1] = entity->ST.SD.data[k+1];
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	727b      	strb	r3, [r7, #9]
				pixel[2] = entity->ST.SD.data[k+2];
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014c6:	3302      	adds	r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	72bb      	strb	r3, [r7, #10]

				/*Test pentru 90 de grade*/

				rotPosX = -i + pivotX;
 80014ce:	8afa      	ldrh	r2, [r7, #22]
 80014d0:	8bfb      	ldrh	r3, [r7, #30]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	827b      	strh	r3, [r7, #18]
				rotPosY =  j + pivotY;
 80014d8:	8bba      	ldrh	r2, [r7, #28]
 80014da:	8abb      	ldrh	r3, [r7, #20]
 80014dc:	4413      	add	r3, r2
 80014de:	b29b      	uxth	r3, r3
 80014e0:	823b      	strh	r3, [r7, #16]

				draw_pixel_data(rotPosX, rotPosY, pixel);
 80014e2:	8a7b      	ldrh	r3, [r7, #18]
 80014e4:	8a39      	ldrh	r1, [r7, #16]
 80014e6:	f107 0208 	add.w	r2, r7, #8
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f878 	bl	80005e0 <draw_pixel_data>

				j++;
 80014f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	83bb      	strh	r3, [r7, #28]
				flagPixel = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	76fb      	strb	r3, [r7, #27]
		for(int16_t k = 0; k<byteNr; k++)
 8001500:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001504:	b29b      	uxth	r3, r3
 8001506:	3301      	adds	r3, #1
 8001508:	b29b      	uxth	r3, r3
 800150a:	833b      	strh	r3, [r7, #24]
 800150c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001510:	89ba      	ldrh	r2, [r7, #12]
 8001512:	4293      	cmp	r3, r2
 8001514:	db95      	blt.n	8001442 <rotate_entity+0xca>
	while(!flagImgDone)
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	f083 0301 	eor.w	r3, r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d184      	bne.n	800142c <rotate_entity+0xb4>

		}
	}


	free(entity->ST.SD.data);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	4618      	mov	r0, r3
 8001528:	f00b fde2 	bl	800d0f0 <free>

}
 800152c:	bf00      	nop
 800152e:	3724      	adds	r7, #36	@ 0x24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	20000008 	.word	0x20000008
 8001538:	55555556 	.word	0x55555556

0800153c <rtos_init>:
		   /*Procesul cu PID-ul 0 este root-ul*/

TCB *activeProcess;

void rtos_init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	 * Functie de initializare a kernelului.
	 * Alocarea memoriei pentru primul proces
	 * Vom avea o LSI cu procesele curente
	 */

	prim = (TCB*)malloc(sizeof(TCB));
 8001542:	f44f 6001 	mov.w	r0, #2064	@ 0x810
 8001546:	f00b fdcb 	bl	800d0e0 <malloc>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <rtos_init+0x64>)
 8001550:	601a      	str	r2, [r3, #0]

	if(prim == NULL)
 8001552:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <rtos_init+0x64>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d01e      	beq.n	8001598 <rtos_init+0x5c>
	{
		return;
	}

	prim->pid = currentPID++;
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <rtos_init+0x68>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	b2d1      	uxtb	r1, r2
 8001562:	4a10      	ldr	r2, [pc, #64]	@ (80015a4 <rtos_init+0x68>)
 8001564:	7011      	strb	r1, [r2, #0]
 8001566:	4a0e      	ldr	r2, [pc, #56]	@ (80015a0 <rtos_init+0x64>)
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	7013      	strb	r3, [r2, #0]
	prim->pnext = NULL;
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <rtos_init+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001576:	f3ef 8314 	mrs	r3, CONTROL
 800157a:	603b      	str	r3, [r7, #0]
  return(result);
 800157c:	683b      	ldr	r3, [r7, #0]

	/*Vom intra in modul user thread al procesorului privilegiat*/

	__set_CONTROL(__get_CONTROL() | 0x2);
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	607b      	str	r3, [r7, #4]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 800158a:	f3bf 8f6f 	isb	sy
}
 800158e:	bf00      	nop
  __ISB();
}
 8001590:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001592:	f3bf 8f6f 	isb	sy
}
 8001596:	e000      	b.n	800159a <rtos_init+0x5e>
		return;
 8001598:	bf00      	nop
	__ISB();




}
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000088 	.word	0x20000088
 80015a4:	20000084 	.word	0x20000084

080015a8 <rtos_add_process>:


void rtos_add_process(void (*function)(void))
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	 * Output: void
	 */

	/*Asociem parametrii noului proces*/

	TCB *q = (TCB*)malloc(sizeof(TCB));
 80015b0:	f44f 6001 	mov.w	r0, #2064	@ 0x810
 80015b4:	f00b fd94 	bl	800d0e0 <malloc>
 80015b8:	4603      	mov	r3, r0
 80015ba:	60fb      	str	r3, [r7, #12]

	if(q == NULL)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01d      	beq.n	80015fe <rtos_add_process+0x56>
	{
		return;
	}

	q->pid = currentPID++;
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <rtos_add_process+0x60>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	b2d1      	uxtb	r1, r2
 80015ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001608 <rtos_add_process+0x60>)
 80015cc:	7011      	strb	r1, [r2, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	7013      	strb	r3, [r2, #0]
	q->processFunction = function;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	q->stackPointer = &(q->stack[STACK_SIZE-1]);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
	q->state = BLOCKED;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2202      	movs	r2, #2
 80015ea:	705a      	strb	r2, [r3, #1]

	/*Adaugam noul proces in lista dinamica*/

	q->pnext = prim;
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <rtos_add_process+0x64>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	prim = q;
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <rtos_add_process+0x64>)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e000      	b.n	8001600 <rtos_add_process+0x58>
		return;
 80015fe:	bf00      	nop

}
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000084 	.word	0x20000084
 800160c:	20000088 	.word	0x20000088

08001610 <rtos_scheduler>:

}


void rtos_scheduler(uint8_t processID)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	if(processID == 0)
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d014      	beq.n	800164a <rtos_scheduler+0x3a>
	{
		return;
	}

	TCB *temp = prim;
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <rtos_scheduler+0x48>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

	while((temp!=NULL))
 8001626:	e00c      	b.n	8001642 <rtos_scheduler+0x32>
	{
		if(processID == temp->pid)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	429a      	cmp	r2, r3
 8001630:	d103      	bne.n	800163a <rtos_scheduler+0x2a>
		{
			activeProcess = temp;
 8001632:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <rtos_scheduler+0x4c>)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6013      	str	r3, [r2, #0]
			break;
 8001638:	e008      	b.n	800164c <rtos_scheduler+0x3c>
		}

		else
		{
			temp = temp->pnext;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8001640:	60fb      	str	r3, [r7, #12]
	while((temp!=NULL))
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ef      	bne.n	8001628 <rtos_scheduler+0x18>
 8001648:	e000      	b.n	800164c <rtos_scheduler+0x3c>
		return;
 800164a:	bf00      	nop
		}

	}


}
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000088 	.word	0x20000088
 800165c:	2000008c 	.word	0x2000008c

08001660 <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 800166a:	2200      	movs	r2, #0
 800166c:	2108      	movs	r1, #8
 800166e:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <LCD_send_command+0x40>)
 8001670:	f003 f9f8 	bl	8004a64 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8001674:	2200      	movs	r2, #0
 8001676:	2110      	movs	r1, #16
 8001678:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <LCD_send_command+0x40>)
 800167a:	f003 f9f3 	bl	8004a64 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 800167e:	1df9      	adds	r1, r7, #7
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	2201      	movs	r2, #1
 8001686:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <LCD_send_command+0x44>)
 8001688:	f004 febf 	bl	800640a <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 800168c:	2201      	movs	r2, #1
 800168e:	2110      	movs	r1, #16
 8001690:	4803      	ldr	r0, [pc, #12]	@ (80016a0 <LCD_send_command+0x40>)
 8001692:	f003 f9e7 	bl	8004a64 <HAL_GPIO_WritePin>


}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	20000188 	.word	0x20000188

080016a8 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 80016b2:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <LCD_send_data_multi+0xdc>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 80016b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016bc:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80016d0:	6939      	ldr	r1, [r7, #16]
 80016d2:	fb01 f202 	mul.w	r2, r1, r2
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 80016da:	2201      	movs	r2, #1
 80016dc:	2108      	movs	r1, #8
 80016de:	482a      	ldr	r0, [pc, #168]	@ (8001788 <LCD_send_data_multi+0xe0>)
 80016e0:	f003 f9c0 	bl	8004a64 <HAL_GPIO_WritePin>
	CS_A();
 80016e4:	2200      	movs	r2, #0
 80016e6:	2110      	movs	r1, #16
 80016e8:	4827      	ldr	r0, [pc, #156]	@ (8001788 <LCD_send_data_multi+0xe0>)
 80016ea:	f003 f9bb 	bl	8004a64 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d821      	bhi.n	800173a <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 80016f6:	4b23      	ldr	r3, [pc, #140]	@ (8001784 <LCD_send_data_multi+0xdc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4821      	ldr	r0, [pc, #132]	@ (800178c <LCD_send_data_multi+0xe4>)
 8001706:	f005 fbad 	bl	8006e64 <HAL_SPI_Transmit_DMA>
 800170a:	e02c      	b.n	8001766 <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 800170c:	bf00      	nop
 800170e:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <LCD_send_data_multi+0xdc>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0fa      	beq.n	800170e <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <LCD_send_data_multi+0xdc>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	b29b      	uxth	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4819      	ldr	r0, [pc, #100]	@ (800178c <LCD_send_data_multi+0xe4>)
 8001728:	f005 fb9c 	bl	8006e64 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4413      	add	r3, r2
 8001732:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3b01      	subs	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e5      	bne.n	800170c <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00f      	beq.n	8001766 <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 8001746:	bf00      	nop
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <LCD_send_data_multi+0xdc>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0fa      	beq.n	8001748 <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 8001752:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <LCD_send_data_multi+0xdc>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	b29b      	uxth	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	480a      	ldr	r0, [pc, #40]	@ (800178c <LCD_send_data_multi+0xe4>)
 8001762:	f005 fb7f 	bl	8006e64 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 8001766:	bf00      	nop
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <LCD_send_data_multi+0xdc>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0fa      	beq.n	8001768 <LCD_send_data_multi+0xc0>
	CS_D();
 8001772:	2201      	movs	r2, #1
 8001774:	2110      	movs	r1, #16
 8001776:	4804      	ldr	r0, [pc, #16]	@ (8001788 <LCD_send_data_multi+0xe0>)
 8001778:	f003 f974 	bl	8004a64 <HAL_GPIO_WritePin>

}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200003d0 	.word	0x200003d0
 8001788:	40020c00 	.word	0x40020c00
 800178c:	20000188 	.word	0x20000188

08001790 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 800179a:	2201      	movs	r2, #1
 800179c:	2108      	movs	r1, #8
 800179e:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <LCD_send_data+0x40>)
 80017a0:	f003 f960 	bl	8004a64 <HAL_GPIO_WritePin>
	CS_A();
 80017a4:	2200      	movs	r2, #0
 80017a6:	2110      	movs	r1, #16
 80017a8:	4809      	ldr	r0, [pc, #36]	@ (80017d0 <LCD_send_data+0x40>)
 80017aa:	f003 f95b 	bl	8004a64 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 80017ae:	1df9      	adds	r1, r7, #7
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
 80017b4:	2201      	movs	r2, #1
 80017b6:	4807      	ldr	r0, [pc, #28]	@ (80017d4 <LCD_send_data+0x44>)
 80017b8:	f004 fe27 	bl	800640a <HAL_SPI_Transmit>

	CS_D();
 80017bc:	2201      	movs	r2, #1
 80017be:	2110      	movs	r1, #16
 80017c0:	4803      	ldr	r0, [pc, #12]	@ (80017d0 <LCD_send_data+0x40>)
 80017c2:	f003 f94f 	bl	8004a64 <HAL_GPIO_WritePin>

}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	20000188 	.word	0x20000188

080017d8 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 80017dc:	2200      	movs	r2, #0
 80017de:	2140      	movs	r1, #64	@ 0x40
 80017e0:	487c      	ldr	r0, [pc, #496]	@ (80019d4 <ILI9488_driver_init+0x1fc>)
 80017e2:	f003 f93f 	bl	8004a64 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017e6:	200a      	movs	r0, #10
 80017e8:	f002 f9ee 	bl	8003bc8 <HAL_Delay>
	RST_D();
 80017ec:	2201      	movs	r2, #1
 80017ee:	2140      	movs	r1, #64	@ 0x40
 80017f0:	4878      	ldr	r0, [pc, #480]	@ (80019d4 <ILI9488_driver_init+0x1fc>)
 80017f2:	f003 f937 	bl	8004a64 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 80017f6:	2001      	movs	r0, #1
 80017f8:	f7ff ff32 	bl	8001660 <LCD_send_command>
	HAL_Delay(150);
 80017fc:	2096      	movs	r0, #150	@ 0x96
 80017fe:	f002 f9e3 	bl	8003bc8 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 8001802:	2011      	movs	r0, #17
 8001804:	f7ff ff2c 	bl	8001660 <LCD_send_command>
	HAL_Delay(255);
 8001808:	20ff      	movs	r0, #255	@ 0xff
 800180a:	f002 f9dd 	bl	8003bc8 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 800180e:	20e0      	movs	r0, #224	@ 0xe0
 8001810:	f7ff ff26 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff ffbb 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x0C);
 800181a:	200c      	movs	r0, #12
 800181c:	f7ff ffb8 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x05);
 8001820:	2005      	movs	r0, #5
 8001822:	f7ff ffb5 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x04);
 8001826:	2004      	movs	r0, #4
 8001828:	f7ff ffb2 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x0F);
 800182c:	200f      	movs	r0, #15
 800182e:	f7ff ffaf 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x06);
 8001832:	2006      	movs	r0, #6
 8001834:	f7ff ffac 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x3A);
 8001838:	203a      	movs	r0, #58	@ 0x3a
 800183a:	f7ff ffa9 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x56);
 800183e:	2056      	movs	r0, #86	@ 0x56
 8001840:	f7ff ffa6 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x4D);
 8001844:	204d      	movs	r0, #77	@ 0x4d
 8001846:	f7ff ffa3 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x03);
 800184a:	2003      	movs	r0, #3
 800184c:	f7ff ffa0 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x0A);
 8001850:	200a      	movs	r0, #10
 8001852:	f7ff ff9d 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x06);
 8001856:	2006      	movs	r0, #6
 8001858:	f7ff ff9a 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x30);
 800185c:	2030      	movs	r0, #48	@ 0x30
 800185e:	f7ff ff97 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x3E);
 8001862:	203e      	movs	r0, #62	@ 0x3e
 8001864:	f7ff ff94 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x0F);
 8001868:	200f      	movs	r0, #15
 800186a:	f7ff ff91 	bl	8001790 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 800186e:	20e1      	movs	r0, #225	@ 0xe1
 8001870:	f7ff fef6 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x00);
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff ff8b 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x13);
 800187a:	2013      	movs	r0, #19
 800187c:	f7ff ff88 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x18);
 8001880:	2018      	movs	r0, #24
 8001882:	f7ff ff85 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x01);
 8001886:	2001      	movs	r0, #1
 8001888:	f7ff ff82 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x11);
 800188c:	2011      	movs	r0, #17
 800188e:	f7ff ff7f 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x06);
 8001892:	2006      	movs	r0, #6
 8001894:	f7ff ff7c 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x38);
 8001898:	2038      	movs	r0, #56	@ 0x38
 800189a:	f7ff ff79 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x34);
 800189e:	2034      	movs	r0, #52	@ 0x34
 80018a0:	f7ff ff76 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x4D);
 80018a4:	204d      	movs	r0, #77	@ 0x4d
 80018a6:	f7ff ff73 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x06);
 80018aa:	2006      	movs	r0, #6
 80018ac:	f7ff ff70 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x0D);
 80018b0:	200d      	movs	r0, #13
 80018b2:	f7ff ff6d 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x0B);
 80018b6:	200b      	movs	r0, #11
 80018b8:	f7ff ff6a 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x31);
 80018bc:	2031      	movs	r0, #49	@ 0x31
 80018be:	f7ff ff67 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x37);
 80018c2:	2037      	movs	r0, #55	@ 0x37
 80018c4:	f7ff ff64 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x0F);
 80018c8:	200f      	movs	r0, #15
 80018ca:	f7ff ff61 	bl	8001790 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 80018ce:	20c0      	movs	r0, #192	@ 0xc0
 80018d0:	f7ff fec6 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x18);
 80018d4:	2018      	movs	r0, #24
 80018d6:	f7ff ff5b 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x16);
 80018da:	2016      	movs	r0, #22
 80018dc:	f7ff ff58 	bl	8001790 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 80018e0:	20c1      	movs	r0, #193	@ 0xc1
 80018e2:	f7ff febd 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x45);
 80018e6:	2045      	movs	r0, #69	@ 0x45
 80018e8:	f7ff ff52 	bl	8001790 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 80018ec:	20c2      	movs	r0, #194	@ 0xc2
 80018ee:	f7ff feb7 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x33);
 80018f2:	2033      	movs	r0, #51	@ 0x33
 80018f4:	f7ff ff4c 	bl	8001790 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 80018f8:	20c3      	movs	r0, #195	@ 0xc3
 80018fa:	f7ff feb1 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x33);
 80018fe:	2033      	movs	r0, #51	@ 0x33
 8001900:	f7ff ff46 	bl	8001790 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8001904:	2036      	movs	r0, #54	@ 0x36
 8001906:	f7ff feab 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 800190a:	205c      	movs	r0, #92	@ 0x5c
 800190c:	f7ff ff40 	bl	8001790 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8001910:	203a      	movs	r0, #58	@ 0x3a
 8001912:	f7ff fea5 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 8001916:	2006      	movs	r0, #6
 8001918:	f7ff ff3a 	bl	8001790 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff fe9f 	bl	8001660 <LCD_send_command>
	LCD_send_command(0x00);
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fe9c 	bl	8001660 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 8001928:	20b0      	movs	r0, #176	@ 0xb0
 800192a:	f7ff fe99 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff ff2e 	bl	8001790 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8001934:	20b1      	movs	r0, #177	@ 0xb1
 8001936:	f7ff fe93 	bl	8001660 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 800193a:	20a0      	movs	r0, #160	@ 0xa0
 800193c:	f7ff ff28 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8001940:	2011      	movs	r0, #17
 8001942:	f7ff ff25 	bl	8001790 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8001946:	20b4      	movs	r0, #180	@ 0xb4
 8001948:	f7ff fe8a 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 800194c:	2002      	movs	r0, #2
 800194e:	f7ff ff1f 	bl	8001790 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8001952:	20b5      	movs	r0, #181	@ 0xb5
 8001954:	f7ff fe84 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x02);
 8001958:	2002      	movs	r0, #2
 800195a:	f7ff ff19 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x02);
 800195e:	2002      	movs	r0, #2
 8001960:	f7ff ff16 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x0A);
 8001964:	200a      	movs	r0, #10
 8001966:	f7ff ff13 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x04);
 800196a:	2004      	movs	r0, #4
 800196c:	f7ff ff10 	bl	8001790 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8001970:	20b6      	movs	r0, #182	@ 0xb6
 8001972:	f7ff fe75 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x02);
 8001976:	2002      	movs	r0, #2
 8001978:	f7ff ff0a 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x02);
 800197c:	2002      	movs	r0, #2
 800197e:	f7ff ff07 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x3B);
 8001982:	203b      	movs	r0, #59	@ 0x3b
 8001984:	f7ff ff04 	bl	8001790 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8001988:	20e9      	movs	r0, #233	@ 0xe9
 800198a:	f7ff fe69 	bl	8001660 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fefe 	bl	8001790 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8001994:	20f7      	movs	r0, #247	@ 0xf7
 8001996:	f7ff fe63 	bl	8001660 <LCD_send_command>
	LCD_send_data(0xA9);
 800199a:	20a9      	movs	r0, #169	@ 0xa9
 800199c:	f7ff fef8 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x51);
 80019a0:	2051      	movs	r0, #81	@ 0x51
 80019a2:	f7ff fef5 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x2C);
 80019a6:	202c      	movs	r0, #44	@ 0x2c
 80019a8:	f7ff fef2 	bl	8001790 <LCD_send_data>
	LCD_send_data(0x82);
 80019ac:	2082      	movs	r0, #130	@ 0x82
 80019ae:	f7ff feef 	bl	8001790 <LCD_send_data>


	LCD_send_command(0x11);
 80019b2:	2011      	movs	r0, #17
 80019b4:	f7ff fe54 	bl	8001660 <LCD_send_command>
	HAL_Delay(255);
 80019b8:	20ff      	movs	r0, #255	@ 0xff
 80019ba:	f002 f905 	bl	8003bc8 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 80019be:	2051      	movs	r0, #81	@ 0x51
 80019c0:	f7ff fe4e 	bl	8001660 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 80019c4:	20ff      	movs	r0, #255	@ 0xff
 80019c6:	f7ff fee3 	bl	8001790 <LCD_send_data>
	LCD_send_command(0x29); //Display on
 80019ca:	2029      	movs	r0, #41	@ 0x29
 80019cc:	f7ff fe48 	bl	8001660 <LCD_send_command>


}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40020c00 	.word	0x40020c00

080019d8 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4604      	mov	r4, r0
 80019e0:	4608      	mov	r0, r1
 80019e2:	4611      	mov	r1, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	80fb      	strh	r3, [r7, #6]
 80019ea:	4603      	mov	r3, r0
 80019ec:	80bb      	strh	r3, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	807b      	strh	r3, [r7, #2]
 80019f2:	4613      	mov	r3, r2
 80019f4:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 80019f6:	202a      	movs	r0, #42	@ 0x2a
 80019f8:	f7ff fe32 	bl	8001660 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	733b      	strb	r3, [r7, #12]
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	73bb      	strb	r3, [r7, #14]
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2104      	movs	r1, #4
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fe40 	bl	80016a8 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 8001a28:	202b      	movs	r0, #43	@ 0x2b
 8001a2a:	f7ff fe19 	bl	8001660 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	733b      	strb	r3, [r7, #12]
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8001a3e:	883b      	ldrh	r3, [r7, #0]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	73bb      	strb	r3, [r7, #14]
 8001a48:	883b      	ldrh	r3, [r7, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	2104      	movs	r1, #4
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fe27 	bl	80016a8 <LCD_send_data_multi>

	if(x == 'w')
 8001a5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a5e:	2b77      	cmp	r3, #119	@ 0x77
 8001a60:	d102      	bne.n	8001a68 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8001a62:	202c      	movs	r0, #44	@ 0x2c
 8001a64:	f7ff fdfc 	bl	8001660 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8001a68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a6c:	2b72      	cmp	r3, #114	@ 0x72
 8001a6e:	d102      	bne.n	8001a76 <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8001a70:	202e      	movs	r0, #46	@ 0x2e
 8001a72:	f7ff fdf5 	bl	8001660 <LCD_send_command>
	}


}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
	...

08001a80 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4604      	mov	r4, r0
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4623      	mov	r3, r4
 8001a90:	80fb      	strh	r3, [r7, #6]
 8001a92:	4603      	mov	r3, r0
 8001a94:	80bb      	strh	r3, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	807b      	strh	r3, [r7, #2]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 8001a9e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c94 <read_pixel_frame+0x214>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8001c94 <read_pixel_frame+0x214>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001aac:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 8001aae:	4b79      	ldr	r3, [pc, #484]	@ (8001c94 <read_pixel_frame+0x214>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b77      	ldr	r3, [pc, #476]	@ (8001c94 <read_pixel_frame+0x214>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8001abc:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 8001abe:	4b75      	ldr	r3, [pc, #468]	@ (8001c94 <read_pixel_frame+0x214>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b73      	ldr	r3, [pc, #460]	@ (8001c94 <read_pixel_frame+0x214>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0210 	orr.w	r2, r2, #16
 8001acc:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001ace:	4b71      	ldr	r3, [pc, #452]	@ (8001c94 <read_pixel_frame+0x214>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b6f      	ldr	r3, [pc, #444]	@ (8001c94 <read_pixel_frame+0x214>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001adc:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 8001ade:	4b6e      	ldr	r3, [pc, #440]	@ (8001c98 <read_pixel_frame+0x218>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 8001ae8:	887a      	ldrh	r2, [r7, #2]
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bfb8      	it	lt
 8001af2:	425b      	neglt	r3, r3
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	8839      	ldrh	r1, [r7, #0]
 8001af8:	88bb      	ldrh	r3, [r7, #4]
 8001afa:	1acb      	subs	r3, r1, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bfb8      	it	lt
 8001b00:	425b      	neglt	r3, r3
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	fb12 f303 	smulbb	r3, r2, r3
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	0052      	lsls	r2, r2, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 8001b12:	2300      	movs	r3, #0
 8001b14:	753b      	strb	r3, [r7, #20]

    free(data);
 8001b16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b18:	f00b faea 	bl	800d0f0 <free>
    data = malloc(byteNr);
 8001b1c:	8afb      	ldrh	r3, [r7, #22]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00b fade 	bl	800d0e0 <malloc>
 8001b24:	4603      	mov	r3, r0
 8001b26:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 8001b28:	887b      	ldrh	r3, [r7, #2]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	807b      	strh	r3, [r7, #2]
    y--;
 8001b2e:	883b      	ldrh	r3, [r7, #0]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	743b      	strb	r3, [r7, #16]
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	747b      	strb	r3, [r7, #17]
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	74bb      	strb	r3, [r7, #18]
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	733b      	strb	r3, [r7, #12]
 8001b5e:	88bb      	ldrh	r3, [r7, #4]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	737b      	strb	r3, [r7, #13]
 8001b64:	883b      	ldrh	r3, [r7, #0]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	73bb      	strb	r3, [r7, #14]
 8001b6e:	883b      	ldrh	r3, [r7, #0]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8001b74:	2200      	movs	r2, #0
 8001b76:	2110      	movs	r1, #16
 8001b78:	4848      	ldr	r0, [pc, #288]	@ (8001c9c <read_pixel_frame+0x21c>)
 8001b7a:	f002 ff73 	bl	8004a64 <HAL_GPIO_WritePin>

    DC_COMMAND();
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2108      	movs	r1, #8
 8001b82:	4846      	ldr	r0, [pc, #280]	@ (8001c9c <read_pixel_frame+0x21c>)
 8001b84:	f002 ff6e 	bl	8004a64 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 8001b88:	232a      	movs	r3, #42	@ 0x2a
 8001b8a:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 8001b8c:	f107 010b 	add.w	r1, r7, #11
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
 8001b94:	2201      	movs	r2, #1
 8001b96:	483f      	ldr	r0, [pc, #252]	@ (8001c94 <read_pixel_frame+0x214>)
 8001b98:	f004 fc37 	bl	800640a <HAL_SPI_Transmit>
    DC_DATA();
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	483e      	ldr	r0, [pc, #248]	@ (8001c9c <read_pixel_frame+0x21c>)
 8001ba2:	f002 ff5f 	bl	8004a64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 8001ba6:	f107 0110 	add.w	r1, r7, #16
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	2204      	movs	r2, #4
 8001bb0:	4838      	ldr	r0, [pc, #224]	@ (8001c94 <read_pixel_frame+0x214>)
 8001bb2:	f004 fc2a 	bl	800640a <HAL_SPI_Transmit>

    DC_COMMAND();
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2108      	movs	r1, #8
 8001bba:	4838      	ldr	r0, [pc, #224]	@ (8001c9c <read_pixel_frame+0x21c>)
 8001bbc:	f002 ff52 	bl	8004a64 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 8001bc0:	232b      	movs	r3, #43	@ 0x2b
 8001bc2:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 8001bc4:	f107 010a 	add.w	r1, r7, #10
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4831      	ldr	r0, [pc, #196]	@ (8001c94 <read_pixel_frame+0x214>)
 8001bd0:	f004 fc1b 	bl	800640a <HAL_SPI_Transmit>
    DC_DATA();
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2108      	movs	r1, #8
 8001bd8:	4830      	ldr	r0, [pc, #192]	@ (8001c9c <read_pixel_frame+0x21c>)
 8001bda:	f002 ff43 	bl	8004a64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 8001bde:	f107 010c 	add.w	r1, r7, #12
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	2204      	movs	r2, #4
 8001be8:	482a      	ldr	r0, [pc, #168]	@ (8001c94 <read_pixel_frame+0x214>)
 8001bea:	f004 fc0e 	bl	800640a <HAL_SPI_Transmit>

    DC_COMMAND();
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	482a      	ldr	r0, [pc, #168]	@ (8001c9c <read_pixel_frame+0x21c>)
 8001bf4:	f002 ff36 	bl	8004a64 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 8001bf8:	232e      	movs	r3, #46	@ 0x2e
 8001bfa:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 8001bfc:	f107 0109 	add.w	r1, r7, #9
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	2201      	movs	r2, #1
 8001c06:	4823      	ldr	r0, [pc, #140]	@ (8001c94 <read_pixel_frame+0x214>)
 8001c08:	f004 fbff 	bl	800640a <HAL_SPI_Transmit>
    DC_DATA();
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2108      	movs	r1, #8
 8001c10:	4822      	ldr	r0, [pc, #136]	@ (8001c9c <read_pixel_frame+0x21c>)
 8001c12:	f002 ff27 	bl	8004a64 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 8001c16:	f107 0114 	add.w	r1, r7, #20
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	2201      	movs	r2, #1
 8001c20:	481c      	ldr	r0, [pc, #112]	@ (8001c94 <read_pixel_frame+0x214>)
 8001c22:	f004 fd36 	bl	8006692 <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 8001c26:	8afb      	ldrh	r3, [r7, #22]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c2c:	4819      	ldr	r0, [pc, #100]	@ (8001c94 <read_pixel_frame+0x214>)
 8001c2e:	f005 f9cb 	bl	8006fc8 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 8001c32:	bf00      	nop
 8001c34:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <read_pixel_frame+0x218>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0fa      	beq.n	8001c34 <read_pixel_frame+0x1b4>
    CS_D();
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2110      	movs	r1, #16
 8001c42:	4816      	ldr	r0, [pc, #88]	@ (8001c9c <read_pixel_frame+0x21c>)
 8001c44:	f002 ff0e 	bl	8004a64 <HAL_GPIO_WritePin>

    free(data);
 8001c48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c4a:	f00b fa51 	bl	800d0f0 <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <read_pixel_frame+0x214>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <read_pixel_frame+0x214>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c5c:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <read_pixel_frame+0x214>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <read_pixel_frame+0x214>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8001c6c:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 8001c6e:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <read_pixel_frame+0x214>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <read_pixel_frame+0x214>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <read_pixel_frame+0x214>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <read_pixel_frame+0x214>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c88:	601a      	str	r2, [r3, #0]

}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd90      	pop	{r4, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000188 	.word	0x20000188
 8001c98:	200003d1 	.word	0x200003d1
 8001c9c:	40020c00 	.word	0x40020c00

08001ca0 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	if(hspi->Instance == SPI1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a05      	ldr	r2, [pc, #20]	@ (8001cc4 <HAL_SPI_TxCpltCallback+0x24>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d102      	bne.n	8001cb8 <HAL_SPI_TxCpltCallback+0x18>
	{
		flagDmaSpiTx = 1;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <HAL_SPI_TxCpltCallback+0x28>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
	}



}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40013000 	.word	0x40013000
 8001cc8:	200003d0 	.word	0x200003d0

08001ccc <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	if(hspi->Instance == SPI1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d84 <HAL_SPI_RxCpltCallback+0xb8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d102      	bne.n	8001ce4 <HAL_SPI_RxCpltCallback+0x18>
	{
		/*
		 * SPI1 folosit pentru LCD
		 */

		flagDmaSpiRx = 1;
 8001cde:	4b2a      	ldr	r3, [pc, #168]	@ (8001d88 <HAL_SPI_RxCpltCallback+0xbc>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]

	}


	if(hspi->Instance == SPI2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a28      	ldr	r2, [pc, #160]	@ (8001d8c <HAL_SPI_RxCpltCallback+0xc0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d145      	bne.n	8001d7a <HAL_SPI_RxCpltCallback+0xae>
	{
		/*
		 * Receptionare comenzi controller
		 */

		switch(dataController)
 8001cee:	4b28      	ldr	r3, [pc, #160]	@ (8001d90 <HAL_SPI_RxCpltCallback+0xc4>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d837      	bhi.n	8001d68 <HAL_SPI_RxCpltCallback+0x9c>
 8001cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8001d00 <HAL_SPI_RxCpltCallback+0x34>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d41 	.word	0x08001d41
 8001d04:	08001d49 	.word	0x08001d49
 8001d08:	08001d69 	.word	0x08001d69
 8001d0c:	08001d51 	.word	0x08001d51
 8001d10:	08001d69 	.word	0x08001d69
 8001d14:	08001d69 	.word	0x08001d69
 8001d18:	08001d69 	.word	0x08001d69
 8001d1c:	08001d59 	.word	0x08001d59
 8001d20:	08001d69 	.word	0x08001d69
 8001d24:	08001d69 	.word	0x08001d69
 8001d28:	08001d69 	.word	0x08001d69
 8001d2c:	08001d69 	.word	0x08001d69
 8001d30:	08001d69 	.word	0x08001d69
 8001d34:	08001d69 	.word	0x08001d69
 8001d38:	08001d69 	.word	0x08001d69
 8001d3c:	08001d61 	.word	0x08001d61
		{
		  	case DxRight:
		  	  currentDx = DxRight;
 8001d40:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <HAL_SPI_RxCpltCallback+0xc8>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001d46:	e013      	b.n	8001d70 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxLeft:
		  	  currentDx = DxLeft;
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_SPI_RxCpltCallback+0xc8>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001d4e:	e00f      	b.n	8001d70 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxUp:
		  	  currentDx = DxUp;
 8001d50:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_SPI_RxCpltCallback+0xc8>)
 8001d52:	2204      	movs	r2, #4
 8001d54:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001d56:	e00b      	b.n	8001d70 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxDown:
		  	  currentDx = DxDown;
 8001d58:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <HAL_SPI_RxCpltCallback+0xc8>)
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001d5e:	e007      	b.n	8001d70 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxStart:
		  	  currentDx = DxStart;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <HAL_SPI_RxCpltCallback+0xc8>)
 8001d62:	2210      	movs	r2, #16
 8001d64:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001d66:	e003      	b.n	8001d70 <HAL_SPI_RxCpltCallback+0xa4>
		  	default:
		  	  currentDx = 0x00;
 8001d68:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <HAL_SPI_RxCpltCallback+0xc8>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001d6e:	bf00      	nop
		}

		/*Reinitializare intrerupere rcpt SPI2 intr Controller*/

		HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController));
 8001d70:	2201      	movs	r2, #1
 8001d72:	4907      	ldr	r1, [pc, #28]	@ (8001d90 <HAL_SPI_RxCpltCallback+0xc4>)
 8001d74:	4808      	ldr	r0, [pc, #32]	@ (8001d98 <HAL_SPI_RxCpltCallback+0xcc>)
 8001d76:	f004 ff4f 	bl	8006c18 <HAL_SPI_Receive_IT>

	}

}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40013000 	.word	0x40013000
 8001d88:	200003d1 	.word	0x200003d1
 8001d8c:	40003800 	.word	0x40003800
 8001d90:	200003d2 	.word	0x200003d2
 8001d94:	200003d3 	.word	0x200003d3
 8001d98:	200001e0 	.word	0x200001e0

08001d9c <HAL_TIM_PeriodElapsedCallback>:
}

unsigned int timp = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10c      	bne.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {

        timp = (timp+1)%50;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001db6:	fba3 1302 	umull	r1, r3, r3, r2
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	2132      	movs	r1, #50	@ 0x32
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001dc6:	6013      	str	r3, [r2, #0]
        {
        	/*realizam comutarea de context*/
        }

    }
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	200003d4 	.word	0x200003d4
 8001ddc:	51eb851f 	.word	0x51eb851f

08001de0 <process1>:

extern TCB *prim;

void process1(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	while(1)
	{
		fill_screen2(0xFFFF);
 8001de4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001de8:	f7fe fc88 	bl	80006fc <fill_screen2>
 8001dec:	e7fa      	b.n	8001de4 <process1+0x4>

08001dee <process2>:
	}
}


void process2(void)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0
	while(1)
	{
		fill_screen2(0xF100);
 8001df2:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001df6:	f7fe fc81 	bl	80006fc <fill_screen2>
 8001dfa:	e7fa      	b.n	8001df2 <process2+0x4>

08001dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b093      	sub	sp, #76	@ 0x4c
 8001e00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e02:	f001 fe6f 	bl	8003ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e06:	f000 fabf 	bl	8002388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e0a:	f000 fce1 	bl	80027d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e0e:	f000 fca1 	bl	8002754 <MX_DMA_Init>
  MX_SPI1_Init();
 8001e12:	f000 fb6d 	bl	80024f0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001e16:	f000 fc73 	bl	8002700 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001e1a:	f000 fb1f 	bl	800245c <MX_DAC_Init>
  MX_TIM2_Init();
 8001e1e:	f000 fbd5 	bl	80025cc <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8001e22:	f000 fb45 	bl	80024b0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001e26:	f008 f8bf 	bl	8009fa8 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001e2a:	f000 fb97 	bl	800255c <MX_SPI2_Init>
  MX_TIM4_Init();
 8001e2e:	f000 fc19 	bl	8002664 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 8001e32:	f000 fd3f 	bl	80028b4 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 8001e36:	f7ff fccf 	bl	80017d8 <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 8001e3a:	48d3      	ldr	r0, [pc, #844]	@ (8002188 <main+0x38c>)
 8001e3c:	f006 f846 	bl	8007ecc <HAL_TIM_Base_Start>
  HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController)); /*Initializare SPI2 intr Controller*/
 8001e40:	2201      	movs	r2, #1
 8001e42:	49d2      	ldr	r1, [pc, #840]	@ (800218c <main+0x390>)
 8001e44:	48d2      	ldr	r0, [pc, #840]	@ (8002190 <main+0x394>)
 8001e46:	f004 fee7 	bl	8006c18 <HAL_SPI_Receive_IT>

  rtos_init();
 8001e4a:	f7ff fb77 	bl	800153c <rtos_init>
  rtos_add_process(process1);
 8001e4e:	48d1      	ldr	r0, [pc, #836]	@ (8002194 <main+0x398>)
 8001e50:	f7ff fbaa 	bl	80015a8 <rtos_add_process>
  rtos_add_process(process2);
 8001e54:	48d0      	ldr	r0, [pc, #832]	@ (8002198 <main+0x39c>)
 8001e56:	f7ff fba7 	bl	80015a8 <rtos_add_process>
  rtos_scheduler(1);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff fbd8 	bl	8001610 <rtos_scheduler>
  HAL_TIM_Base_Start(&htim4);
 8001e60:	48ce      	ldr	r0, [pc, #824]	@ (800219c <main+0x3a0>)
 8001e62:	f006 f833 	bl	8007ecc <HAL_TIM_Base_Start>
  process1();
 8001e66:	f7ff ffbb 	bl	8001de0 <process1>
  /*Test pentru tastatura*/

  fill_screen1(0x0000);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7fe fbe6 	bl	800063c <fill_screen1>
  //play_audio_file_echo("Audio/acoustic.txt", 22, 0);
  //HAL_Delay(1000);
  //play_audio_file("Audio/king.txt"); //doremi mine songita song22 king acoustic bambina


  fill_screen1(0xF100);
 8001e70:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001e74:	f7fe fbe2 	bl	800063c <fill_screen1>
  HAL_Delay(1000);
 8001e78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e7c:	f001 fea4 	bl	8003bc8 <HAL_Delay>
  fill_screen2(0xF00F);
 8001e80:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8001e84:	f7fe fc3a 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001e88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e8c:	f001 fe9c 	bl	8003bc8 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001e90:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e94:	f7fe fc32 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001e98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e9c:	f001 fe94 	bl	8003bc8 <HAL_Delay>

  unsigned int startTick = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int endTick = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int getTime = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	633b      	str	r3, [r7, #48]	@ 0x30

  ENTITY entity;
  init_entity_sd(&entity);
 8001eac:	f107 0318 	add.w	r3, r7, #24
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fe96 	bl	8000be2 <init_entity_sd>

  /*Test SCALARE*/

  fill_screen2(0xFFFF);
 8001eb6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001eba:	f7fe fc1f 	bl	80006fc <fill_screen2>

  BackGroundColor = 0xFFFF;
 8001ebe:	4bb8      	ldr	r3, [pc, #736]	@ (80021a0 <main+0x3a4>)
 8001ec0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec4:	801a      	strh	r2, [r3, #0]

  entity.x0 = 100;
 8001ec6:	2364      	movs	r3, #100	@ 0x64
 8001ec8:	837b      	strh	r3, [r7, #26]
  entity.y0 = 100;
 8001eca:	2364      	movs	r3, #100	@ 0x64
 8001ecc:	83bb      	strh	r3, [r7, #28]
  entity.id = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	763b      	strb	r3, [r7, #24]
  assign_file_path_entity(&entity, "graphic/multi2.bin");
 8001ed2:	f107 0318 	add.w	r3, r7, #24
 8001ed6:	49b3      	ldr	r1, [pc, #716]	@ (80021a4 <main+0x3a8>)
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fd43 	bl	8002964 <assign_file_path_entity>
  draw_entity(&entity);
 8001ede:	f107 0318 	add.w	r3, r7, #24
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe feaa 	bl	8000c3c <draw_entity>
  HAL_Delay(1000);
 8001ee8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eec:	f001 fe6c 	bl	8003bc8 <HAL_Delay>
  //fill_screen2(0xFFFF);
  scaling_entity(&entity, 38);
 8001ef0:	f107 0318 	add.w	r3, r7, #24
 8001ef4:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 80021a8 <main+0x3ac>
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f8b9 	bl	8001070 <scaling_entity>
  HAL_Delay(1000);
 8001efe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f02:	f001 fe61 	bl	8003bc8 <HAL_Delay>
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 8001f06:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f0a:	b298      	uxth	r0, r3
 8001f0c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f10:	b299      	uxth	r1, r3
 8001f12:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001f1c:	b29c      	uxth	r4, r3
 8001f1e:	4ba0      	ldr	r3, [pc, #640]	@ (80021a0 <main+0x3a4>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	4623      	mov	r3, r4
 8001f26:	f7fe fdff 	bl	8000b28 <draw_rectangle>
  draw_entity(&entity);
 8001f2a:	f107 0318 	add.w	r3, r7, #24
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fe84 	bl	8000c3c <draw_entity>

  //--------------------------------------------

  HAL_Delay(1000);
 8001f34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f38:	f001 fe46 	bl	8003bc8 <HAL_Delay>
  //fill_screen2(0xFFFF);

  rotate_entity(&entity, 90);
 8001f3c:	f107 0318 	add.w	r3, r7, #24
 8001f40:	215a      	movs	r1, #90	@ 0x5a
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fa18 	bl	8001378 <rotate_entity>

  HAL_Delay(1000);
 8001f48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f4c:	f001 fe3c 	bl	8003bc8 <HAL_Delay>

  //---------------------------------------------

  HAL_Delay(1000);
 8001f50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f54:	f001 fe38 	bl	8003bc8 <HAL_Delay>

  //fill_screen2(0xFFFF);
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 8001f58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f5c:	b298      	uxth	r0, r3
 8001f5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f62:	b299      	uxth	r1, r3
 8001f64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001f6e:	b29c      	uxth	r4, r3
 8001f70:	4b8b      	ldr	r3, [pc, #556]	@ (80021a0 <main+0x3a4>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	4623      	mov	r3, r4
 8001f78:	f7fe fdd6 	bl	8000b28 <draw_rectangle>
  draw_entity(&entity);
 8001f7c:	f107 0318 	add.w	r3, r7, #24
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fe5b 	bl	8000c3c <draw_entity>
  HAL_Delay(1000);
 8001f86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f8a:	f001 fe1d 	bl	8003bc8 <HAL_Delay>
  //fill_screen2(0xFFFF);
  scaling_entity(&entity, 0.5);
 8001f8e:	f107 0318 	add.w	r3, r7, #24
 8001f92:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff f86a 	bl	8001070 <scaling_entity>
  HAL_Delay(1000);
 8001f9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fa0:	f001 fe12 	bl	8003bc8 <HAL_Delay>
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 8001fa4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001fa8:	b298      	uxth	r0, r3
 8001faa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fae:	b299      	uxth	r1, r3
 8001fb0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001fba:	b29c      	uxth	r4, r3
 8001fbc:	4b78      	ldr	r3, [pc, #480]	@ (80021a0 <main+0x3a4>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4623      	mov	r3, r4
 8001fc4:	f7fe fdb0 	bl	8000b28 <draw_rectangle>
  draw_entity(&entity);
 8001fc8:	f107 0318 	add.w	r3, r7, #24
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fe35 	bl	8000c3c <draw_entity>
  HAL_Delay(1000);
 8001fd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fd6:	f001 fdf7 	bl	8003bc8 <HAL_Delay>

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	80fb      	strh	r3, [r7, #6]
  ent.y0 = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	813b      	strh	r3, [r7, #8]
  ent.id = 0x00;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	713b      	strb	r3, [r7, #4]
  init_entity_sd(&ent);
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fdfa 	bl	8000be2 <init_entity_sd>
  assign_file_path_entity(&ent, "graphic/img5.bin");
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	496e      	ldr	r1, [pc, #440]	@ (80021ac <main+0x3b0>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fcb6 	bl	8002964 <assign_file_path_entity>
  draw_entity(&ent);
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe1e 	bl	8000c3c <draw_entity>
  HAL_Delay(2000);
 8002000:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002004:	f001 fde0 	bl	8003bc8 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img6.bin");
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	4969      	ldr	r1, [pc, #420]	@ (80021b0 <main+0x3b4>)
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fca9 	bl	8002964 <assign_file_path_entity>
  draw_entity(&ent);
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fe11 	bl	8000c3c <draw_entity>
  HAL_Delay(2000);
 800201a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800201e:	f001 fdd3 	bl	8003bc8 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img8.bin");
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4963      	ldr	r1, [pc, #396]	@ (80021b4 <main+0x3b8>)
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fc9c 	bl	8002964 <assign_file_path_entity>
  draw_entity(&ent);
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fe04 	bl	8000c3c <draw_entity>
  HAL_Delay(2000);
 8002034:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002038:	f001 fdc6 	bl	8003bc8 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img9.bin");
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	495e      	ldr	r1, [pc, #376]	@ (80021b8 <main+0x3bc>)
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fc8f 	bl	8002964 <assign_file_path_entity>
  draw_entity(&ent);
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fdf7 	bl	8000c3c <draw_entity>
  HAL_Delay(2000);
 800204e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002052:	f001 fdb9 	bl	8003bc8 <HAL_Delay>
  startTick = HAL_GetTick();
 8002056:	f001 fdab 	bl	8003bb0 <HAL_GetTick>
 800205a:	63b8      	str	r0, [r7, #56]	@ 0x38
  assign_file_path_entity(&ent, "graphic/img92.bin");
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	4957      	ldr	r1, [pc, #348]	@ (80021bc <main+0x3c0>)
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fc7f 	bl	8002964 <assign_file_path_entity>
  draw_entity(&ent);
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fde7 	bl	8000c3c <draw_entity>
  endTick = HAL_GetTick();
 800206e:	f001 fd9f 	bl	8003bb0 <HAL_GetTick>
 8002072:	6378      	str	r0, [r7, #52]	@ 0x34
  getTime = endTick - startTick;
 8002074:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	633b      	str	r3, [r7, #48]	@ 0x30

  fill_screen2(0x0000);
 800207c:	2000      	movs	r0, #0
 800207e:	f7fe fb3d 	bl	80006fc <fill_screen2>
  assign_file_path_entity(&ent, "graphic/pixel1.bin");
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	494e      	ldr	r1, [pc, #312]	@ (80021c0 <main+0x3c4>)
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fc6c 	bl	8002964 <assign_file_path_entity>
  draw_entity(&ent);
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fdd4 	bl	8000c3c <draw_entity>
  HAL_Delay(3000);
 8002094:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002098:	f001 fd96 	bl	8003bc8 <HAL_Delay>

  //Test translation

  //ENTITY entity;

  free_entity_sd(&entity);
 800209c:	f107 0318 	add.w	r3, r7, #24
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fdb9 	bl	8000c18 <free_entity_sd>

  entity.x0 = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	83bb      	strh	r3, [r7, #28]
  entity.x1 = 64;
 80020ae:	2340      	movs	r3, #64	@ 0x40
 80020b0:	83fb      	strh	r3, [r7, #30]
  entity.y1 = 64;
 80020b2:	2340      	movs	r3, #64	@ 0x40
 80020b4:	843b      	strh	r3, [r7, #32]
  entity.id = 0x80;
 80020b6:	2380      	movs	r3, #128	@ 0x80
 80020b8:	763b      	strb	r3, [r7, #24]
  entity.ST.color = 0xF100;
 80020ba:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80020be:	84bb      	strh	r3, [r7, #36]	@ 0x24

  //draw_entity(&entity,NULL);

  //translation_test(&entity, 1, 0);

  HAL_Delay(500);
 80020c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020c4:	f001 fd80 	bl	8003bc8 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 0);//, 0xF100);
 80020c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3364      	adds	r3, #100	@ 0x64
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	b219      	sxth	r1, r3
 80020d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3364      	adds	r3, #100	@ 0x64
 80020dc:	b29b      	uxth	r3, r3
 80020de:	b21a      	sxth	r2, r3
 80020e0:	f107 0018 	add.w	r0, r7, #24
 80020e4:	2300      	movs	r3, #0
 80020e6:	f7fe feb5 	bl	8000e54 <translation_entity>
  HAL_Delay(2000);
 80020ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80020ee:	f001 fd6b 	bl	8003bc8 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 0);//, 0xF100);
 80020f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3320      	adds	r3, #32
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	b219      	sxth	r1, r3
 80020fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002102:	b29b      	uxth	r3, r3
 8002104:	3320      	adds	r3, #32
 8002106:	b29b      	uxth	r3, r3
 8002108:	b21a      	sxth	r2, r3
 800210a:	f107 0018 	add.w	r0, r7, #24
 800210e:	2300      	movs	r3, #0
 8002110:	f7fe fea0 	bl	8000e54 <translation_entity>
  HAL_Delay(500);
 8002114:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002118:	f001 fd56 	bl	8003bc8 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 0);//, 0xF100);
 800211c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002120:	b29b      	uxth	r3, r3
 8002122:	330c      	adds	r3, #12
 8002124:	b29b      	uxth	r3, r3
 8002126:	b219      	sxth	r1, r3
 8002128:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800212c:	b29b      	uxth	r3, r3
 800212e:	3320      	adds	r3, #32
 8002130:	b29b      	uxth	r3, r3
 8002132:	b21a      	sxth	r2, r3
 8002134:	f107 0018 	add.w	r0, r7, #24
 8002138:	2300      	movs	r3, #0
 800213a:	f7fe fe8b 	bl	8000e54 <translation_entity>
  HAL_Delay(500);
 800213e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002142:	f001 fd41 	bl	8003bc8 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0, 0);//, 0xF100);
 8002146:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800214a:	b29b      	uxth	r3, r3
 800214c:	330c      	adds	r3, #12
 800214e:	b29b      	uxth	r3, r3
 8002150:	b219      	sxth	r1, r3
 8002152:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002156:	f107 0018 	add.w	r0, r7, #24
 800215a:	2300      	movs	r3, #0
 800215c:	f7fe fe7a 	bl	8000e54 <translation_entity>
  HAL_Delay(500);
 8002160:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002164:	f001 fd30 	bl	8003bc8 <HAL_Delay>

  //Test_SD_Card();

  //play_audio_file("audio/mine.txt"); //doremi mine songita song22

  fill_screen2(0xF100);
 8002168:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 800216c:	f7fe fac6 	bl	80006fc <fill_screen2>
  //startTick = HAL_GetTick();
  //read_audio_file("audio/random.txt", sampleData);
  //endTick = HAL_GetTick();
  //getTime = endTick - startTick;

  HAL_Delay(100);
 8002170:	2064      	movs	r0, #100	@ 0x64
 8002172:	f001 fd29 	bl	8003bc8 <HAL_Delay>


  for(uint8_t i=0;i<100;i++)
 8002176:	2300      	movs	r3, #0
 8002178:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800217c:	e078      	b.n	8002270 <main+0x474>
  {
	  for(uint8_t j=0; j<100;j++)
 800217e:	2300      	movs	r3, #0
 8002180:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002184:	e06b      	b.n	800225e <main+0x462>
 8002186:	bf00      	nop
 8002188:	200002f8 	.word	0x200002f8
 800218c:	200003d2 	.word	0x200003d2
 8002190:	200001e0 	.word	0x200001e0
 8002194:	08001de1 	.word	0x08001de1
 8002198:	08001def 	.word	0x08001def
 800219c:	20000340 	.word	0x20000340
 80021a0:	20000008 	.word	0x20000008
 80021a4:	0800d4d0 	.word	0x0800d4d0
 80021a8:	42180000 	.word	0x42180000
 80021ac:	0800d4e4 	.word	0x0800d4e4
 80021b0:	0800d4f8 	.word	0x0800d4f8
 80021b4:	0800d50c 	.word	0x0800d50c
 80021b8:	0800d520 	.word	0x0800d520
 80021bc:	0800d534 	.word	0x0800d534
 80021c0:	0800d548 	.word	0x0800d548
	  {

		  if(i==j)
 80021c4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80021c8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d10b      	bne.n	80021e8 <main+0x3ec>
		  {
			  draw_pixel(i,j,0xF100);
 80021d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80021da:	b291      	uxth	r1, r2
 80021dc:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f9d3 	bl	800058c <draw_pixel>
			  continue;
 80021e6:	e035      	b.n	8002254 <main+0x458>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 80021e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021ec:	2b50      	cmp	r3, #80	@ 0x50
 80021ee:	d103      	bne.n	80021f8 <main+0x3fc>
 80021f0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80021f4:	2b14      	cmp	r3, #20
 80021f6:	d017      	beq.n	8002228 <main+0x42c>
 80021f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021fc:	2b50      	cmp	r3, #80	@ 0x50
 80021fe:	d103      	bne.n	8002208 <main+0x40c>
 8002200:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002204:	2b13      	cmp	r3, #19
 8002206:	d00f      	beq.n	8002228 <main+0x42c>
 8002208:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800220c:	2b51      	cmp	r3, #81	@ 0x51
 800220e:	d103      	bne.n	8002218 <main+0x41c>
 8002210:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002214:	2b14      	cmp	r3, #20
 8002216:	d007      	beq.n	8002228 <main+0x42c>
 8002218:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800221c:	2b51      	cmp	r3, #81	@ 0x51
 800221e:	d10e      	bne.n	800223e <main+0x442>
 8002220:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002224:	2b13      	cmp	r3, #19
 8002226:	d10a      	bne.n	800223e <main+0x442>
		  {
			  draw_pixel(i,j,0x001F);
 8002228:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800222c:	b29b      	uxth	r3, r3
 800222e:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002232:	b291      	uxth	r1, r2
 8002234:	221f      	movs	r2, #31
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f9a8 	bl	800058c <draw_pixel>
			  continue;
 800223c:	e00a      	b.n	8002254 <main+0x458>
		  }


		  draw_pixel(i,j,0xFFFF);
 800223e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002242:	b29b      	uxth	r3, r3
 8002244:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002248:	b291      	uxth	r1, r2
 800224a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f99c 	bl	800058c <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8002254:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002258:	3301      	adds	r3, #1
 800225a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800225e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002262:	2b63      	cmp	r3, #99	@ 0x63
 8002264:	d9ae      	bls.n	80021c4 <main+0x3c8>
  for(uint8_t i=0;i<100;i++)
 8002266:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800226a:	3301      	adds	r3, #1
 800226c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002270:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002274:	2b63      	cmp	r3, #99	@ 0x63
 8002276:	d982      	bls.n	800217e <main+0x382>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8002278:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 800227c:	f7fe fa3e 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8002280:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002284:	f001 fca0 	bl	8003bc8 <HAL_Delay>
  fill_screen2(0xF150);
 8002288:	f24f 1050 	movw	r0, #61776	@ 0xf150
 800228c:	f7fe fa36 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8002290:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002294:	f001 fc98 	bl	8003bc8 <HAL_Delay>
  fill_screen2(0xF111);
 8002298:	f24f 1011 	movw	r0, #61713	@ 0xf111
 800229c:	f7fe fa2e 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 80022a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022a4:	f001 fc90 	bl	8003bc8 <HAL_Delay>
  fill_screen2(0xF10F);
 80022a8:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 80022ac:	f7fe fa26 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 80022b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022b4:	f001 fc88 	bl	8003bc8 <HAL_Delay>
  fill_screen2(0xFFFF);
 80022b8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022bc:	f7fe fa1e 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 80022c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022c4:	f001 fc80 	bl	8003bc8 <HAL_Delay>
  fill_screen2(0xFFFF);
 80022c8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022cc:	f7fe fa16 	bl	80006fc <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 80022d0:	231f      	movs	r3, #31
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	230c      	movs	r3, #12
 80022dc:	4a26      	ldr	r2, [pc, #152]	@ (8002378 <main+0x57c>)
 80022de:	21c8      	movs	r1, #200	@ 0xc8
 80022e0:	2024      	movs	r0, #36	@ 0x24
 80022e2:	f7fe fb67 	bl	80009b4 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 80022e6:	4b25      	ldr	r3, [pc, #148]	@ (800237c <main+0x580>)
 80022e8:	603b      	str	r3, [r7, #0]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 80022ea:	463b      	mov	r3, r7
 80022ec:	2204      	movs	r2, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	4823      	ldr	r0, [pc, #140]	@ (8002380 <main+0x584>)
 80022f2:	f004 fdb7 	bl	8006e64 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 80022f6:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80022fa:	2250      	movs	r2, #80	@ 0x50
 80022fc:	2114      	movs	r1, #20
 80022fe:	2014      	movs	r0, #20
 8002300:	f7fe fb9c 	bl	8000a3c <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 8002304:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002308:	2250      	movs	r2, #80	@ 0x50
 800230a:	2114      	movs	r1, #20
 800230c:	2014      	movs	r0, #20
 800230e:	f7fe fbd0 	bl	8000ab2 <draw_vertical_line>

  flagDmaSpiTx = 0;
 8002312:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <main+0x588>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 8002318:	221f      	movs	r2, #31
 800231a:	2100      	movs	r1, #0
 800231c:	2000      	movs	r0, #0
 800231e:	f7fe f935 	bl	800058c <draw_pixel>
  draw_pixel(1,0,0xF800);
 8002322:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002326:	2100      	movs	r1, #0
 8002328:	2001      	movs	r0, #1
 800232a:	f7fe f92f 	bl	800058c <draw_pixel>
  draw_pixel(0,1,0x001F);
 800232e:	221f      	movs	r2, #31
 8002330:	2101      	movs	r1, #1
 8002332:	2000      	movs	r0, #0
 8002334:	f7fe f92a 	bl	800058c <draw_pixel>
  draw_pixel(1,1,0xF800);
 8002338:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800233c:	2101      	movs	r1, #1
 800233e:	2001      	movs	r0, #1
 8002340:	f7fe f924 	bl	800058c <draw_pixel>

  HAL_Delay(50);
 8002344:	2032      	movs	r0, #50	@ 0x32
 8002346:	f001 fc3f 	bl	8003bc8 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 800234a:	2001      	movs	r0, #1
 800234c:	f00a fec8 	bl	800d0e0 <malloc>
 8002350:	4603      	mov	r3, r0
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 8002354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2302      	movs	r3, #2
 800235a:	2202      	movs	r2, #2
 800235c:	2100      	movs	r1, #0
 800235e:	2000      	movs	r0, #0
 8002360:	f7ff fb8e 	bl	8001a80 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 8002364:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002366:	f00a fec3 	bl	800d0f0 <free>

  HAL_Delay(3000);
 800236a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800236e:	f001 fc2b 	bl	8003bc8 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002372:	bf00      	nop
 8002374:	e7fd      	b.n	8002372 <main+0x576>
 8002376:	bf00      	nop
 8002378:	0800d55c 	.word	0x0800d55c
 800237c:	04030201 	.word	0x04030201
 8002380:	20000188 	.word	0x20000188
 8002384:	200003d0 	.word	0x200003d0

08002388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b094      	sub	sp, #80	@ 0x50
 800238c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800238e:	f107 0320 	add.w	r3, r7, #32
 8002392:	2230      	movs	r2, #48	@ 0x30
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f00a ff96 	bl	800d2c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	4b28      	ldr	r3, [pc, #160]	@ (8002454 <SystemClock_Config+0xcc>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	4a27      	ldr	r2, [pc, #156]	@ (8002454 <SystemClock_Config+0xcc>)
 80023b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80023bc:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <SystemClock_Config+0xcc>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	4b22      	ldr	r3, [pc, #136]	@ (8002458 <SystemClock_Config+0xd0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a21      	ldr	r2, [pc, #132]	@ (8002458 <SystemClock_Config+0xd0>)
 80023d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <SystemClock_Config+0xd0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023e4:	2301      	movs	r3, #1
 80023e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ee:	2302      	movs	r3, #2
 80023f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023f8:	2304      	movs	r3, #4
 80023fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023fc:	23a8      	movs	r3, #168	@ 0xa8
 80023fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002400:	2302      	movs	r3, #2
 8002402:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002404:	2307      	movs	r3, #7
 8002406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002408:	f107 0320 	add.w	r3, r7, #32
 800240c:	4618      	mov	r0, r3
 800240e:	f002 fb43 	bl	8004a98 <HAL_RCC_OscConfig>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002418:	f000 fa46 	bl	80028a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800241c:	230f      	movs	r3, #15
 800241e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002420:	2302      	movs	r3, #2
 8002422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002428:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800242c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800242e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002432:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	2105      	movs	r1, #5
 800243a:	4618      	mov	r0, r3
 800243c:	f002 fda4 	bl	8004f88 <HAL_RCC_ClockConfig>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002446:	f000 fa2f 	bl	80028a8 <Error_Handler>
  }
}
 800244a:	bf00      	nop
 800244c:	3750      	adds	r7, #80	@ 0x50
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	40007000 	.word	0x40007000

0800245c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002462:	463b      	mov	r3, r7
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <MX_DAC_Init+0x4c>)
 800246c:	4a0f      	ldr	r2, [pc, #60]	@ (80024ac <MX_DAC_Init+0x50>)
 800246e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002470:	480d      	ldr	r0, [pc, #52]	@ (80024a8 <MX_DAC_Init+0x4c>)
 8002472:	f001 fcde 	bl	8003e32 <HAL_DAC_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800247c:	f000 fa14 	bl	80028a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002480:	2324      	movs	r3, #36	@ 0x24
 8002482:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002488:	463b      	mov	r3, r7
 800248a:	2200      	movs	r2, #0
 800248c:	4619      	mov	r1, r3
 800248e:	4806      	ldr	r0, [pc, #24]	@ (80024a8 <MX_DAC_Init+0x4c>)
 8002490:	f001 fcf1 	bl	8003e76 <HAL_DAC_ConfigChannel>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800249a:	f000 fa05 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000090 	.word	0x20000090
 80024ac:	40007400 	.word	0x40007400

080024b0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024b6:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <MX_SDIO_SD_Init+0x3c>)
 80024b8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024bc:	2200      	movs	r2, #0
 80024be:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80024c0:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80024c6:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80024d2:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 80024d8:	4b03      	ldr	r3, [pc, #12]	@ (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024da:	2208      	movs	r2, #8
 80024dc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	20000104 	.word	0x20000104
 80024ec:	40012c00 	.word	0x40012c00

080024f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024f4:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <MX_SPI1_Init+0x64>)
 80024f6:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <MX_SPI1_Init+0x68>)
 80024f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024fa:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <MX_SPI1_Init+0x64>)
 80024fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <MX_SPI1_Init+0x64>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002508:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <MX_SPI1_Init+0x64>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <MX_SPI1_Init+0x64>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002514:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <MX_SPI1_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800251a:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <MX_SPI1_Init+0x64>)
 800251c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002520:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002522:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <MX_SPI1_Init+0x64>)
 8002524:	2200      	movs	r2, #0
 8002526:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002528:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <MX_SPI1_Init+0x64>)
 800252a:	2200      	movs	r2, #0
 800252c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800252e:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <MX_SPI1_Init+0x64>)
 8002530:	2200      	movs	r2, #0
 8002532:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002534:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <MX_SPI1_Init+0x64>)
 8002536:	2200      	movs	r2, #0
 8002538:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <MX_SPI1_Init+0x64>)
 800253c:	220a      	movs	r2, #10
 800253e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002540:	4804      	ldr	r0, [pc, #16]	@ (8002554 <MX_SPI1_Init+0x64>)
 8002542:	f003 fed9 	bl	80062f8 <HAL_SPI_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800254c:	f000 f9ac 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000188 	.word	0x20000188
 8002558:	40013000 	.word	0x40013000

0800255c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002560:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <MX_SPI2_Init+0x68>)
 8002562:	4a19      	ldr	r2, [pc, #100]	@ (80025c8 <MX_SPI2_Init+0x6c>)
 8002564:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002566:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <MX_SPI2_Init+0x68>)
 8002568:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800256c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <MX_SPI2_Init+0x68>)
 8002570:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002574:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002576:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <MX_SPI2_Init+0x68>)
 8002578:	2200      	movs	r2, #0
 800257a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <MX_SPI2_Init+0x68>)
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002582:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <MX_SPI2_Init+0x68>)
 8002584:	2200      	movs	r2, #0
 8002586:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002588:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <MX_SPI2_Init+0x68>)
 800258a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800258e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <MX_SPI2_Init+0x68>)
 8002592:	2208      	movs	r2, #8
 8002594:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <MX_SPI2_Init+0x68>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800259c:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <MX_SPI2_Init+0x68>)
 800259e:	2200      	movs	r2, #0
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a2:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <MX_SPI2_Init+0x68>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025a8:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <MX_SPI2_Init+0x68>)
 80025aa:	220a      	movs	r2, #10
 80025ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025ae:	4805      	ldr	r0, [pc, #20]	@ (80025c4 <MX_SPI2_Init+0x68>)
 80025b0:	f003 fea2 	bl	80062f8 <HAL_SPI_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80025ba:	f000 f975 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200001e0 	.word	0x200001e0
 80025c8:	40003800 	.word	0x40003800

080025cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e0:	463b      	mov	r3, r7
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <MX_TIM2_Init+0x94>)
 80025ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <MX_TIM2_Init+0x94>)
 80025f2:	2229      	movs	r2, #41	@ 0x29
 80025f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002660 <MX_TIM2_Init+0x94>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 27;
 80025fc:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <MX_TIM2_Init+0x94>)
 80025fe:	221b      	movs	r2, #27
 8002600:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002602:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <MX_TIM2_Init+0x94>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002608:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <MX_TIM2_Init+0x94>)
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800260e:	4814      	ldr	r0, [pc, #80]	@ (8002660 <MX_TIM2_Init+0x94>)
 8002610:	f005 fc0d 	bl	8007e2e <HAL_TIM_Base_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800261a:	f000 f945 	bl	80028a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002622:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002624:	f107 0308 	add.w	r3, r7, #8
 8002628:	4619      	mov	r1, r3
 800262a:	480d      	ldr	r0, [pc, #52]	@ (8002660 <MX_TIM2_Init+0x94>)
 800262c:	f005 fda6 	bl	800817c <HAL_TIM_ConfigClockSource>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002636:	f000 f937 	bl	80028a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800263a:	2320      	movs	r3, #32
 800263c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002642:	463b      	mov	r3, r7
 8002644:	4619      	mov	r1, r3
 8002646:	4806      	ldr	r0, [pc, #24]	@ (8002660 <MX_TIM2_Init+0x94>)
 8002648:	f005 ffce 	bl	80085e8 <HAL_TIMEx_MasterConfigSynchronization>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002652:	f000 f929 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200002f8 	.word	0x200002f8

08002664 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002680:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <MX_TIM4_Init+0x94>)
 8002682:	4a1e      	ldr	r2, [pc, #120]	@ (80026fc <MX_TIM4_Init+0x98>)
 8002684:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8002686:	4b1c      	ldr	r3, [pc, #112]	@ (80026f8 <MX_TIM4_Init+0x94>)
 8002688:	2254      	movs	r2, #84	@ 0x54
 800268a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268c:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <MX_TIM4_Init+0x94>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8002692:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <MX_TIM4_Init+0x94>)
 8002694:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002698:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269a:	4b17      	ldr	r3, [pc, #92]	@ (80026f8 <MX_TIM4_Init+0x94>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a0:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <MX_TIM4_Init+0x94>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026a6:	4814      	ldr	r0, [pc, #80]	@ (80026f8 <MX_TIM4_Init+0x94>)
 80026a8:	f005 fbc1 	bl	8007e2e <HAL_TIM_Base_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80026b2:	f000 f8f9 	bl	80028a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80026bc:	f107 0308 	add.w	r3, r7, #8
 80026c0:	4619      	mov	r1, r3
 80026c2:	480d      	ldr	r0, [pc, #52]	@ (80026f8 <MX_TIM4_Init+0x94>)
 80026c4:	f005 fd5a 	bl	800817c <HAL_TIM_ConfigClockSource>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80026ce:	f000 f8eb 	bl	80028a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026da:	463b      	mov	r3, r7
 80026dc:	4619      	mov	r1, r3
 80026de:	4806      	ldr	r0, [pc, #24]	@ (80026f8 <MX_TIM4_Init+0x94>)
 80026e0:	f005 ff82 	bl	80085e8 <HAL_TIMEx_MasterConfigSynchronization>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80026ea:	f000 f8dd 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000340 	.word	0x20000340
 80026fc:	40000800 	.word	0x40000800

08002700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <MX_USART1_UART_Init+0x4c>)
 8002706:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <MX_USART1_UART_Init+0x50>)
 8002708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <MX_USART1_UART_Init+0x4c>)
 800270c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <MX_USART1_UART_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <MX_USART1_UART_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <MX_USART1_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <MX_USART1_UART_Init+0x4c>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <MX_USART1_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <MX_USART1_UART_Init+0x4c>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	@ (800274c <MX_USART1_UART_Init+0x4c>)
 8002738:	f005 ffe6 	bl	8008708 <HAL_UART_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002742:	f000 f8b1 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000388 	.word	0x20000388
 8002750:	40011000 	.word	0x40011000

08002754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <MX_DMA_Init+0x78>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	4a1a      	ldr	r2, [pc, #104]	@ (80027cc <MX_DMA_Init+0x78>)
 8002764:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002768:	6313      	str	r3, [r2, #48]	@ 0x30
 800276a:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <MX_DMA_Init+0x78>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <MX_DMA_Init+0x78>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a13      	ldr	r2, [pc, #76]	@ (80027cc <MX_DMA_Init+0x78>)
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <MX_DMA_Init+0x78>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	2010      	movs	r0, #16
 8002798:	f001 fb15 	bl	8003dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800279c:	2010      	movs	r0, #16
 800279e:	f001 fb2e 	bl	8003dfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	2038      	movs	r0, #56	@ 0x38
 80027a8:	f001 fb0d 	bl	8003dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80027ac:	2038      	movs	r0, #56	@ 0x38
 80027ae:	f001 fb26 	bl	8003dfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	203b      	movs	r0, #59	@ 0x3b
 80027b8:	f001 fb05 	bl	8003dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80027bc:	203b      	movs	r0, #59	@ 0x3b
 80027be:	f001 fb1e 	bl	8003dfe <HAL_NVIC_EnableIRQ>

}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	@ 0x28
 80027d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
 80027e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	4b2d      	ldr	r3, [pc, #180]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a2c      	ldr	r2, [pc, #176]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 80027f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b2a      	ldr	r3, [pc, #168]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b26      	ldr	r3, [pc, #152]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a25      	ldr	r2, [pc, #148]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b23      	ldr	r3, [pc, #140]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	4b1f      	ldr	r3, [pc, #124]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	4a1e      	ldr	r2, [pc, #120]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	@ 0x30
 800282e:	4b1c      	ldr	r3, [pc, #112]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	6313      	str	r3, [r2, #48]	@ 0x30
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	4a10      	ldr	r2, [pc, #64]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	6313      	str	r3, [r2, #48]	@ 0x30
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <MX_GPIO_Init+0xd0>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8002872:	2200      	movs	r2, #0
 8002874:	2158      	movs	r1, #88	@ 0x58
 8002876:	480b      	ldr	r0, [pc, #44]	@ (80028a4 <MX_GPIO_Init+0xd4>)
 8002878:	f002 f8f4 	bl	8004a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 800287c:	2358      	movs	r3, #88	@ 0x58
 800287e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002880:	2301      	movs	r3, #1
 8002882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4619      	mov	r1, r3
 8002892:	4804      	ldr	r0, [pc, #16]	@ (80028a4 <MX_GPIO_Init+0xd4>)
 8002894:	f001 ff4a 	bl	800472c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002898:	bf00      	nop
 800289a:	3728      	adds	r7, #40	@ 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020c00 	.word	0x40020c00

080028a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028ac:	b672      	cpsid	i
}
 80028ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <Error_Handler+0x8>

080028b4 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 80028b8:	2201      	movs	r2, #1
 80028ba:	4903      	ldr	r1, [pc, #12]	@ (80028c8 <init_cardSD+0x14>)
 80028bc:	4803      	ldr	r0, [pc, #12]	@ (80028cc <init_cardSD+0x18>)
 80028be:	f009 faa9 	bl	800be14 <f_mount>

}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	0800d56c 	.word	0x0800d56c
 80028cc:	200003d8 	.word	0x200003d8

080028d0 <assign_filePath>:

}


char* assign_filePath(const char *filePathName)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	 * Output: adresa char* catre calea
	 * ! alocat dinamic
	 */

	char *string;
	uint8_t i = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]


	while(filePathName[i] != '\0')
 80028dc:	e002      	b.n	80028e4 <assign_filePath+0x14>
	{
		i++;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	3301      	adds	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
	while(filePathName[i] != '\0')
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f6      	bne.n	80028de <assign_filePath+0xe>
	}

	i++;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	3301      	adds	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]

	string = (char*)malloc(sizeof(char)*i);
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f00a fbf1 	bl	800d0e0 <malloc>
 80028fe:	4603      	mov	r3, r0
 8002900:	60bb      	str	r3, [r7, #8]
	memcpy(string, filePathName, i);
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	461a      	mov	r2, r3
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	68b8      	ldr	r0, [r7, #8]
 800290a:	f00a fd4f 	bl	800d3ac <memcpy>

	return string;
 800290e:	68bb      	ldr	r3, [r7, #8]


}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <return_file_name_current_path>:


char* return_file_name_current_path(char *filePathName)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	 * Input: calea fisierului
	 * Output: pointer catre nume
	 */


	char *fileName = strrchr(filePathName, '/');
 8002920:	212f      	movs	r1, #47	@ 0x2f
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f00a fce7 	bl	800d2f6 <strrchr>
 8002928:	60f8      	str	r0, [r7, #12]

	if(fileName == NULL)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <return_file_name_current_path+0x20>
	{
		fileName = filePathName;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	60fb      	str	r3, [r7, #12]
		return fileName;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	e011      	b.n	800295c <return_file_name_current_path+0x44>
	}

	else
	{
		fileName++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3301      	adds	r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
	}

	char *string = malloc(strlen(fileName) + 1);
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7fd fc42 	bl	80001c8 <strlen>
 8002944:	4603      	mov	r3, r0
 8002946:	3301      	adds	r3, #1
 8002948:	4618      	mov	r0, r3
 800294a:	f00a fbc9 	bl	800d0e0 <malloc>
 800294e:	4603      	mov	r3, r0
 8002950:	60bb      	str	r3, [r7, #8]
	strcpy(string, fileName);
 8002952:	68f9      	ldr	r1, [r7, #12]
 8002954:	68b8      	ldr	r0, [r7, #8]
 8002956:	f00a fd21 	bl	800d39c <strcpy>

	return string;
 800295a:	68bb      	ldr	r3, [r7, #8]

}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <assign_file_path_entity>:


void assign_file_path_entity(ENTITY *entity, const char *filePathName)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
	 * Input: adresa entitatii si calea literara
	 * Output: Void
	 */


	strcpy(entity->ST.SD.filePathName, filePathName);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	6839      	ldr	r1, [r7, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f00a fd11 	bl	800d39c <strcpy>

}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <read_image_file>:

}


void read_image_file(ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 8002984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002988:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 800298c:	af00      	add	r7, sp, #0
 800298e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002992:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002996:	6018      	str	r0, [r3, #0]
 8002998:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800299c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029a0:	6019      	str	r1, [r3, #0]
 80029a2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029a6:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	466b      	mov	r3, sp
 80029ae:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, entity->ST.SD.filePathName, FA_READ);
 80029b0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029b4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6919      	ldr	r1, [r3, #16]
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	2201      	movs	r2, #1
 80029c2:	4618      	mov	r0, r3
 80029c4:	f009 fa6c 	bl	800bea0 <f_open>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 80029ce:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 81af 	bne.w	8002d36 <read_image_file+0x3b2>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 80029d8:	4ba8      	ldr	r3, [pc, #672]	@ (8002c7c <read_image_file+0x2f8>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80d6 	beq.w	8002b8e <read_image_file+0x20a>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 80029e2:	4ba7      	ldr	r3, [pc, #668]	@ (8002c80 <read_image_file+0x2fc>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 80029e8:	4ba5      	ldr	r3, [pc, #660]	@ (8002c80 <read_image_file+0x2fc>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f009 ff6a 	bl	800c8cc <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 80029f8:	f107 0318 	add.w	r3, r7, #24
 80029fc:	f107 0114 	add.w	r1, r7, #20
 8002a00:	f107 001c 	add.w	r0, r7, #28
 8002a04:	2204      	movs	r2, #4
 8002a06:	f009 fc05 	bl	800c214 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8002a0a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a0e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2200      	movs	r2, #0
 8002a16:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8002a18:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a1c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8002a26:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a2a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002a34:	461a      	mov	r2, r3
 8002a36:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a3a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002a3e:	785b      	ldrb	r3, [r3, #1]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	b21a      	sxth	r2, r3
 8002a46:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a4a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8002a54:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a58:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	430b      	orrs	r3, r1
 8002a62:	b21b      	sxth	r3, r3
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b21a      	sxth	r2, r3
 8002a68:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a6c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8002a74:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a78:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a82:	461a      	mov	r2, r3
 8002a84:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a88:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002a8c:	78db      	ldrb	r3, [r3, #3]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	b21a      	sxth	r2, r3
 8002a94:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a98:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8002aa2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002aa6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002aaa:	789b      	ldrb	r3, [r3, #2]
 8002aac:	b21b      	sxth	r3, r3
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	b21b      	sxth	r3, r3
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	b21a      	sxth	r2, r3
 8002ab6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002aba:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 8002ac2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ac6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ad6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ae8:	da1f      	bge.n	8002b2a <read_image_file+0x1a6>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8002aea:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002aee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002af8:	461a      	mov	r2, r3
 8002afa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002afe:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b08:	fb03 f202 	mul.w	r2, r3, r2
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f00a fae4 	bl	800d0e0 <malloc>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b20:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60da      	str	r2, [r3, #12]
 8002b28:	e00b      	b.n	8002b42 <read_image_file+0x1be>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->ST.SD.data = malloc(sizeof(char)*3072);
 8002b2a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002b2e:	f00a fad7 	bl	800d0e0 <malloc>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b3a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 8002b42:	4b4e      	ldr	r3, [pc, #312]	@ (8002c7c <read_image_file+0x2f8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002b48:	4b4e      	ldr	r3, [pc, #312]	@ (8002c84 <read_image_file+0x300>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8002b4e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b52:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a49      	ldr	r2, [pc, #292]	@ (8002c80 <read_image_file+0x2fc>)
 8002b5a:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8002b5c:	4b48      	ldr	r3, [pc, #288]	@ (8002c80 <read_image_file+0x2fc>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f009 feb0 	bl	800c8cc <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8002b6c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b70:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	3b04      	subs	r3, #4
 8002b78:	4a43      	ldr	r2, [pc, #268]	@ (8002c88 <read_image_file+0x304>)
 8002b7a:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 8002b7c:	4b42      	ldr	r3, [pc, #264]	@ (8002c88 <read_image_file+0x304>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a42      	ldr	r2, [pc, #264]	@ (8002c8c <read_image_file+0x308>)
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b88:	4a41      	ldr	r2, [pc, #260]	@ (8002c90 <read_image_file+0x30c>)
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	e007      	b.n	8002b9e <read_image_file+0x21a>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8002b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c80 <read_image_file+0x2fc>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	f107 031c 	add.w	r3, r7, #28
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f009 fe97 	bl	800c8cc <f_lseek>
	}



	if(fileSize == n)
 8002b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c88 <read_image_file+0x304>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a3a      	ldr	r2, [pc, #232]	@ (8002c8c <read_image_file+0x308>)
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d104      	bne.n	8002bb4 <read_image_file+0x230>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 8002baa:	4b39      	ldr	r3, [pc, #228]	@ (8002c90 <read_image_file+0x30c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	4a37      	ldr	r2, [pc, #220]	@ (8002c90 <read_image_file+0x30c>)
 8002bb2:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 8002bb4:	4b34      	ldr	r3, [pc, #208]	@ (8002c88 <read_image_file+0x304>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a34      	ldr	r2, [pc, #208]	@ (8002c8c <read_image_file+0x308>)
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bc0:	fb01 f202 	mul.w	r2, r1, r2
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <read_image_file+0x258>
 8002bca:	4b31      	ldr	r3, [pc, #196]	@ (8002c90 <read_image_file+0x30c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <read_image_file+0x258>
	{
		nrFrames++;
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c90 <read_image_file+0x30c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c90 <read_image_file+0x30c>)
 8002bda:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 8002bdc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002be0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 8002bea:	4b28      	ldr	r3, [pc, #160]	@ (8002c8c <read_image_file+0x308>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8002bf4:	4b25      	ldr	r3, [pc, #148]	@ (8002c8c <read_image_file+0x308>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	4690      	mov	r8, r2
 8002bfe:	4699      	mov	r9, r3
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c14:	4b1d      	ldr	r3, [pc, #116]	@ (8002c8c <read_image_file+0x308>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	4614      	mov	r4, r2
 8002c1e:	461d      	mov	r5, r3
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	00eb      	lsls	r3, r5, #3
 8002c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2e:	00e2      	lsls	r2, r4, #3
 8002c30:	4b16      	ldr	r3, [pc, #88]	@ (8002c8c <read_image_file+0x308>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3307      	adds	r3, #7
 8002c36:	08db      	lsrs	r3, r3, #3
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	ebad 0d03 	sub.w	sp, sp, r3
 8002c3e:	466b      	mov	r3, sp
 8002c40:	3300      	adds	r3, #0
 8002c42:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 8002c46:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <read_image_file+0x308>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f107 0318 	add.w	r3, r7, #24
 8002c50:	f107 001c 	add.w	r0, r7, #28
 8002c54:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002c58:	f009 fadc 	bl	800c214 <f_read>
	(*indexFlag) = byteRead;
 8002c5c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002c60:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002c6c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8002c7a:	e01f      	b.n	8002cbc <read_image_file+0x338>
 8002c7c:	2000000a 	.word	0x2000000a
 8002c80:	20000608 	.word	0x20000608
 8002c84:	2000060c 	.word	0x2000060c
 8002c88:	20000610 	.word	0x20000610
 8002c8c:	0800e310 	.word	0x0800e310
 8002c90:	20000614 	.word	0x20000614
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->ST.SD.data[i] = tempBuffer[i];
 8002c94:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8002c98:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002c9c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68d9      	ldr	r1, [r3, #12]
 8002ca4:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8002ca8:	440b      	add	r3, r1
 8002caa:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002cae:	5c8a      	ldrb	r2, [r1, r2]
 8002cb0:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 8002cb2:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8002cbc:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8002cc0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002cc4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d3e2      	bcc.n	8002c94 <read_image_file+0x310>

	}


	currentFrame++;
 8002cce:	4b1d      	ldr	r3, [pc, #116]	@ (8002d44 <read_image_file+0x3c0>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <read_image_file+0x3c0>)
 8002cd8:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 8002cda:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <read_image_file+0x3c0>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <read_image_file+0x3c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d208      	bcs.n	8002cfa <read_image_file+0x376>
 8002ce8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002cec:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002cf8:	d20f      	bcs.n	8002d1a <read_image_file+0x396>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 8002cfa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002cfe:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 8002d08:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <read_image_file+0x3c8>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8002d0e:	f107 031c 	add.w	r3, r7, #28
 8002d12:	4618      	mov	r0, r3
 8002d14:	f009 fdb0 	bl	800c878 <f_close>
		return;
 8002d18:	e00d      	b.n	8002d36 <read_image_file+0x3b2>
	}


	currentPosition = f_tell(&file);
 8002d1a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d1e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	4a0a      	ldr	r2, [pc, #40]	@ (8002d50 <read_image_file+0x3cc>)
 8002d26:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f009 fda3 	bl	800c878 <f_close>
 8002d32:	46b5      	mov	sp, r6
 8002d34:	e000      	b.n	8002d38 <read_image_file+0x3b4>
		return;
 8002d36:	46b5      	mov	sp, r6


}
 8002d38:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d42:	bf00      	nop
 8002d44:	2000060c 	.word	0x2000060c
 8002d48:	20000614 	.word	0x20000614
 8002d4c:	2000000a 	.word	0x2000000a
 8002d50:	20000608 	.word	0x20000608

08002d54 <frame_number_x>:



static uint16_t frame_number_x(ENTITY *entity, const float factor)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	ed87 0a02 	vstr	s0, [r7, #8]

	uint8_t x = 1;
 8002d60:	2301      	movs	r3, #1
 8002d62:	75fb      	strb	r3, [r7, #23]

	if(factor > 1)
 8002d64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d74:	dd33      	ble.n	8002dde <frame_number_x+0x8a>
	{
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8002d76:	e00b      	b.n	8002d90 <frame_number_x+0x3c>
		{
			if(x == entity->y1)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d102      	bne.n	8002d8a <frame_number_x+0x36>
			{
				return x;
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	e05f      	b.n	8002e4a <frame_number_x+0xf6>
			}

			x++;
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002daa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
 8002db0:	ee07 3a90 	vmov	s15, r3
 8002db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002e58 <frame_number_x+0x104>
 8002dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc8:	d9d6      	bls.n	8002d78 <frame_number_x+0x24>
		}


		if(x==1)
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <frame_number_x+0x80>
		{
			return 1;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e03a      	b.n	8002e4a <frame_number_x+0xf6>
		}

		else
		{
			return (x-1);
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	e035      	b.n	8002e4a <frame_number_x+0xf6>
	}


	else
	{
		x = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	75fb      	strb	r3, [r7, #23]

		while((((int)(entity->x1)*x) <= (32*32)))
 8002de2:	e016      	b.n	8002e12 <frame_number_x+0xbe>
		{
			if(x == entity->y1)
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d102      	bne.n	8002df6 <frame_number_x+0xa2>
			{
				return x;
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	e029      	b.n	8002e4a <frame_number_x+0xf6>
			}

			x = x + (int)(1/factor);
 8002df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dfa:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e06:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e0a:	793a      	ldrb	r2, [r7, #4]
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	4413      	add	r3, r2
 8002e10:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*x) <= (32*32)))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	fb02 f303 	mul.w	r3, r2, r3
 8002e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e24:	ddde      	ble.n	8002de4 <frame_number_x+0x90>
		}


		return (x-(1/factor));
 8002e26:	7dfb      	ldrb	r3, [r7, #23]
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e30:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002e34:	edd7 6a02 	vldr	s13, [r7, #8]
 8002e38:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e44:	ee17 3a90 	vmov	r3, s15
 8002e48:	b29b      	uxth	r3, r3

	}


}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	44800000 	.word	0x44800000

08002e5c <read_image_file_scaling>:



void read_image_file_scaling(char *filePathName, ENTITY *entity, const float factor, uint16_t *px, bool *flagTerm)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8002e68:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8002e6c:	6020      	str	r0, [r4, #0]
 8002e6e:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8002e72:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8002e76:	6001      	str	r1, [r0, #0]
 8002e78:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8002e7c:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8002e80:	ed81 0a00 	vstr	s0, [r1]
 8002e84:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8002e88:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8002e8c:	600a      	str	r2, [r1, #0]
 8002e8e:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002e92:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8002e96:	6013      	str	r3, [r2, #0]

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8002e98:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e9c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002ea0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	6819      	ldr	r1, [r3, #0]
 8002ea8:	f008 fffa 	bl	800bea0 <f_open>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 8002eb2:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 81be 	bne.w	8003238 <read_image_file_scaling+0x3dc>
	static FSIZE_t currentPosition = 0;

	static uint16_t x = 0; /*Numarul de linii din M1 ai sa avem sub 32x32 pixeli de prelucrat in M2*/
	static unsigned int nrFrames = 0;

	if(flagNewImageFile == 1)
 8002ebc:	4ba9      	ldr	r3, [pc, #676]	@ (8003164 <read_image_file_scaling+0x308>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8112 	beq.w	80030ea <read_image_file_scaling+0x28e>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8002ec6:	4ba8      	ldr	r3, [pc, #672]	@ (8003168 <read_image_file_scaling+0x30c>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8002ecc:	4ba6      	ldr	r3, [pc, #664]	@ (8003168 <read_image_file_scaling+0x30c>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f009 fcf8 	bl	800c8cc <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8002edc:	f107 0320 	add.w	r3, r7, #32
 8002ee0:	f107 011c 	add.w	r1, r7, #28
 8002ee4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002ee8:	2204      	movs	r2, #4
 8002eea:	f009 f993 	bl	800c214 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8002eee:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ef2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8002efc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f00:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8002f0a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f0e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f1e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	b21a      	sxth	r2, r3
 8002f2a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f2e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8002f38:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f3c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	b21b      	sxth	r3, r3
 8002f44:	430b      	orrs	r3, r1
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	b21a      	sxth	r2, r3
 8002f4c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f50:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8002f58:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f5c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f6c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002f70:	78db      	ldrb	r3, [r3, #3]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	b21a      	sxth	r2, r3
 8002f78:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f7c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8002f86:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f8a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002f8e:	789b      	ldrb	r3, [r3, #2]
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	430b      	orrs	r3, r1
 8002f94:	b21b      	sxth	r3, r3
 8002f96:	4313      	orrs	r3, r2
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f9e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	811a      	strh	r2, [r3, #8]


		flagNewImageFile = 0;
 8002fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8003164 <read_image_file_scaling+0x308>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002fac:	4b6f      	ldr	r3, [pc, #444]	@ (800316c <read_image_file_scaling+0x310>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	801a      	strh	r2, [r3, #0]
		flagOneFrame = 0;
 8002fb2:	4b6f      	ldr	r3, [pc, #444]	@ (8003170 <read_image_file_scaling+0x314>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]

		currentPosition = byteRead;
 8002fb8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002fbc:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a69      	ldr	r2, [pc, #420]	@ (8003168 <read_image_file_scaling+0x30c>)
 8002fc4:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8002fc6:	4b68      	ldr	r3, [pc, #416]	@ (8003168 <read_image_file_scaling+0x30c>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f009 fc7b 	bl	800c8cc <f_lseek>


		x = frame_number_x(entity, factor); /*numarul de linii cuprins in fiecare frame al matricei M1*/
 8002fd6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002fda:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 8002fde:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002fe2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002fe6:	ed92 0a00 	vldr	s0, [r2]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	f7ff feb2 	bl	8002d54 <frame_number_x>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b5f      	ldr	r3, [pc, #380]	@ (8003174 <read_image_file_scaling+0x318>)
 8002ff6:	801a      	strh	r2, [r3, #0]
		*px = x;
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8003174 <read_image_file_scaling+0x318>)
 8002ffa:	881a      	ldrh	r2, [r3, #0]
 8002ffc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003000:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	801a      	strh	r2, [r3, #0]

		if(x == entity->y1)
 8003008:	4b5a      	ldr	r3, [pc, #360]	@ (8003174 <read_image_file_scaling+0x318>)
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003012:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	d125      	bne.n	800306c <read_image_file_scaling+0x210>
		{
			flagOneFrame = 1;
 8003020:	4b53      	ldr	r3, [pc, #332]	@ (8003170 <read_image_file_scaling+0x314>)
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
			nrFrames = 1; /*Avem o imagine care scalata are mai putini de 32x32 pixeli*/
 8003026:	4b54      	ldr	r3, [pc, #336]	@ (8003178 <read_image_file_scaling+0x31c>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 800302c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003030:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800303a:	461a      	mov	r2, r3
 800303c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003040:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800304a:	fb03 f202 	mul.w	r2, r3, r2
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f00a f843 	bl	800d0e0 <malloc>
 800305a:	4603      	mov	r3, r0
 800305c:	461a      	mov	r2, r3
 800305e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003062:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	e046      	b.n	80030fa <read_image_file_scaling+0x29e>

		}

		else
		{
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*x);
 800306c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003070:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800307a:	461a      	mov	r2, r3
 800307c:	4b3d      	ldr	r3, [pc, #244]	@ (8003174 <read_image_file_scaling+0x318>)
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	fb03 f202 	mul.w	r2, r3, r2
 8003084:	4613      	mov	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f00a f828 	bl	800d0e0 <malloc>
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003098:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60da      	str	r2, [r3, #12]

			nrFrames = (entity->y1) / x;
 80030a0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80030a4:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b30      	ldr	r3, [pc, #192]	@ (8003174 <read_image_file_scaling+0x318>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003178 <read_image_file_scaling+0x31c>)
 80030bc:	601a      	str	r2, [r3, #0]

			if((entity->y1) % x != 0)
 80030be:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80030c2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030cc:	4a29      	ldr	r2, [pc, #164]	@ (8003174 <read_image_file_scaling+0x318>)
 80030ce:	8812      	ldrh	r2, [r2, #0]
 80030d0:	fb93 f1f2 	sdiv	r1, r3, r2
 80030d4:	fb01 f202 	mul.w	r2, r1, r2
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <read_image_file_scaling+0x29e>
			{
				nrFrames++;
 80030de:	4b26      	ldr	r3, [pc, #152]	@ (8003178 <read_image_file_scaling+0x31c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3301      	adds	r3, #1
 80030e4:	4a24      	ldr	r2, [pc, #144]	@ (8003178 <read_image_file_scaling+0x31c>)
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e007      	b.n	80030fa <read_image_file_scaling+0x29e>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 80030ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003168 <read_image_file_scaling+0x30c>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f009 fbe9 	bl	800c8cc <f_lseek>
	}


	/*Vom pune in entity->data primele valori*/

	if(flagOneFrame == 1)
 80030fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003170 <read_image_file_scaling+0x314>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d03c      	beq.n	800317c <read_image_file_scaling+0x320>
	{
		f_read(&file, entity->ST.SD.data, (3*sizeof(char)*(entity->x1)*(entity->y1)), &byteRead);
 8003102:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003106:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68d9      	ldr	r1, [r3, #12]
 800310e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003112:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800311c:	461a      	mov	r2, r3
 800311e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003122:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800312c:	fb03 f202 	mul.w	r2, r3, r2
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	441a      	add	r2, r3
 8003136:	f107 0320 	add.w	r3, r7, #32
 800313a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800313e:	f009 f869 	bl	800c214 <f_read>

		*flagTerm = 1;
 8003142:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003146:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
		flagNewImageFile = 1;
 8003150:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <read_image_file_scaling+0x308>)
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8003156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800315a:	4618      	mov	r0, r3
 800315c:	f009 fb8c 	bl	800c878 <f_close>
		return;
 8003160:	e06b      	b.n	800323a <read_image_file_scaling+0x3de>
 8003162:	bf00      	nop
 8003164:	2000000b 	.word	0x2000000b
 8003168:	20000618 	.word	0x20000618
 800316c:	2000061c 	.word	0x2000061c
 8003170:	2000061e 	.word	0x2000061e
 8003174:	20000620 	.word	0x20000620
 8003178:	20000624 	.word	0x20000624

	}

	else
	{
		f_read(&file, entity->ST.SD.data, (3*sizeof(char)*(entity->x1)*x), &byteRead);
 800317c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003180:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68d9      	ldr	r1, [r3, #12]
 8003188:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800318c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003196:	461a      	mov	r2, r3
 8003198:	4b2a      	ldr	r3, [pc, #168]	@ (8003244 <read_image_file_scaling+0x3e8>)
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	fb03 f202 	mul.w	r2, r3, r2
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	441a      	add	r2, r3
 80031a6:	f107 0320 	add.w	r3, r7, #32
 80031aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80031ae:	f009 f831 	bl	800c214 <f_read>

		currentFrame++;
 80031b2:	4b25      	ldr	r3, [pc, #148]	@ (8003248 <read_image_file_scaling+0x3ec>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	3301      	adds	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	4b23      	ldr	r3, [pc, #140]	@ (8003248 <read_image_file_scaling+0x3ec>)
 80031bc:	801a      	strh	r2, [r3, #0]

		if((currentFrame >= nrFrames))
 80031be:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <read_image_file_scaling+0x3ec>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b21      	ldr	r3, [pc, #132]	@ (800324c <read_image_file_scaling+0x3f0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d328      	bcc.n	800321e <read_image_file_scaling+0x3c2>
		{
			*px = (entity->y1) - x*(nrFrames-1); /*recalculam ultimul numar de linii de citit*/
 80031cc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80031d0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	4b1b      	ldr	r3, [pc, #108]	@ (800324c <read_image_file_scaling+0x3f0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b299      	uxth	r1, r3
 80031e4:	4b17      	ldr	r3, [pc, #92]	@ (8003244 <read_image_file_scaling+0x3e8>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	fb11 f303 	smulbb	r3, r1, r3
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80031f6:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	801a      	strh	r2, [r3, #0]
			*flagTerm = 1;
 80031fe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003202:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
			flagNewImageFile = 1;
 800320c:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <read_image_file_scaling+0x3f4>)
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
			f_close(&file);
 8003212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003216:	4618      	mov	r0, r3
 8003218:	f009 fb2e 	bl	800c878 <f_close>
			return;
 800321c:	e00d      	b.n	800323a <read_image_file_scaling+0x3de>
		}



		currentPosition = f_tell(&file);
 800321e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003222:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <read_image_file_scaling+0x3f8>)
 800322a:	6013      	str	r3, [r2, #0]
		f_close(&file);
 800322c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003230:	4618      	mov	r0, r3
 8003232:	f009 fb21 	bl	800c878 <f_close>
 8003236:	e000      	b.n	800323a <read_image_file_scaling+0x3de>
		return;
 8003238:	bf00      	nop

	}



}
 800323a:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 800323e:	46bd      	mov	sp, r7
 8003240:	bd90      	pop	{r4, r7, pc}
 8003242:	bf00      	nop
 8003244:	20000620 	.word	0x20000620
 8003248:	2000061c 	.word	0x2000061c
 800324c:	20000624 	.word	0x20000624
 8003250:	2000000b 	.word	0x2000000b
 8003254:	20000618 	.word	0x20000618

08003258 <write_image_file>:



void write_image_file(char *filePathName, uint8_t *data, size_t nrBytesData, int16_t x1, int16_t y1, bool flagTerm)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 800325e:	af00      	add	r7, sp, #0
 8003260:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8003264:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003268:	6020      	str	r0, [r4, #0]
 800326a:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800326e:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8003272:	6001      	str	r1, [r0, #0]
 8003274:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003278:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 800327c:	600a      	str	r2, [r1, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003284:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003288:	801a      	strh	r2, [r3, #0]


	static bool flagStart = 0;
	static FSIZE_t currentPosition = 0;

	if(flagStart == 0)
 800328a:	4b4b      	ldr	r3, [pc, #300]	@ (80033b8 <write_image_file+0x160>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	f083 0301 	eor.w	r3, r3, #1
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d04b      	beq.n	8003330 <write_image_file+0xd8>
	{

		res = f_open(&file, filePathName, FA_WRITE | FA_CREATE_ALWAYS);
 8003298:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800329c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80032a0:	f107 001c 	add.w	r0, r7, #28
 80032a4:	220a      	movs	r2, #10
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	f008 fdfa 	bl	800bea0 <f_open>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f


		if (res != FR_OK)
 80032b2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d177      	bne.n	80033aa <write_image_file+0x152>
		{
		    return;
		}


		currentPosition = 0;
 80032ba:	4b40      	ldr	r3, [pc, #256]	@ (80033bc <write_image_file+0x164>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
		/*
		 * Scriem mai intai headerul anume
		 * dimensiunea imaginii asociate
		 */

		header[0] = (int8_t)(x1);
 80032c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80032c4:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80032d0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80032d4:	701a      	strb	r2, [r3, #0]
		header[1] = (int8_t)(x1>>8);
 80032d6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80032da:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80032de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e2:	121b      	asrs	r3, r3, #8
 80032e4:	b21b      	sxth	r3, r3
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80032ec:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80032f0:	705a      	strb	r2, [r3, #1]
		header[2] = (int8_t)(y1);
 80032f2:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80032fc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003300:	709a      	strb	r2, [r3, #2]
		header[3] = (int8_t)(y1>>8);
 8003302:	f9b7 3260 	ldrsh.w	r3, [r7, #608]	@ 0x260
 8003306:	121b      	asrs	r3, r3, #8
 8003308:	b21b      	sxth	r3, r3
 800330a:	b2da      	uxtb	r2, r3
 800330c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003310:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003314:	70da      	strb	r2, [r3, #3]

		f_write(&file, header, 4, &byteWr);
 8003316:	f107 0318 	add.w	r3, r7, #24
 800331a:	f107 0114 	add.w	r1, r7, #20
 800331e:	f107 001c 	add.w	r0, r7, #28
 8003322:	2204      	movs	r2, #4
 8003324:	f009 f8b5 	bl	800c492 <f_write>

		flagStart = 1;
 8003328:	4b23      	ldr	r3, [pc, #140]	@ (80033b8 <write_image_file+0x160>)
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e018      	b.n	8003362 <write_image_file+0x10a>
	}


	else
	{
		res = f_open(&file, filePathName, FA_WRITE | FA_OPEN_ALWAYS);
 8003330:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003334:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003338:	f107 001c 	add.w	r0, r7, #28
 800333c:	2212      	movs	r2, #18
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	f008 fdae 	bl	800bea0 <f_open>
 8003344:	4603      	mov	r3, r0
 8003346:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

		if (res != FR_OK)
 800334a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800334e:	2b00      	cmp	r3, #0
 8003350:	d12d      	bne.n	80033ae <write_image_file+0x156>
		{
		    return;
		}

		f_lseek(&file, currentPosition);
 8003352:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <write_image_file+0x164>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	f107 031c 	add.w	r3, r7, #28
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f009 fab5 	bl	800c8cc <f_lseek>

	}


	if(flagTerm == 1)
 8003362:	f897 3264 	ldrb.w	r3, [r7, #612]	@ 0x264
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <write_image_file+0x118>
	{
		flagStart = 0;
 800336a:	4b13      	ldr	r3, [pc, #76]	@ (80033b8 <write_image_file+0x160>)
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]

	}


	f_write(&file, data, nrBytesData, &byteWr);
 8003370:	f107 0318 	add.w	r3, r7, #24
 8003374:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8003378:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800337c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003380:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 8003384:	f107 001c 	add.w	r0, r7, #28
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	6809      	ldr	r1, [r1, #0]
 800338c:	f009 f881 	bl	800c492 <f_write>
	currentPosition = f_tell(&file);
 8003390:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003394:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	4a08      	ldr	r2, [pc, #32]	@ (80033bc <write_image_file+0x164>)
 800339c:	6013      	str	r3, [r2, #0]

	f_close(&file);
 800339e:	f107 031c 	add.w	r3, r7, #28
 80033a2:	4618      	mov	r0, r3
 80033a4:	f009 fa68 	bl	800c878 <f_close>
 80033a8:	e002      	b.n	80033b0 <write_image_file+0x158>
		    return;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <write_image_file+0x158>
		    return;
 80033ae:	bf00      	nop

}
 80033b0:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd90      	pop	{r4, r7, pc}
 80033b8:	20000628 	.word	0x20000628
 80033bc:	2000062c 	.word	0x2000062c

080033c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	4b10      	ldr	r3, [pc, #64]	@ (800340c <HAL_MspInit+0x4c>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	4a0f      	ldr	r2, [pc, #60]	@ (800340c <HAL_MspInit+0x4c>)
 80033d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d6:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <HAL_MspInit+0x4c>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4b09      	ldr	r3, [pc, #36]	@ (800340c <HAL_MspInit+0x4c>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	4a08      	ldr	r2, [pc, #32]	@ (800340c <HAL_MspInit+0x4c>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f2:	4b06      	ldr	r3, [pc, #24]	@ (800340c <HAL_MspInit+0x4c>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800

08003410 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	@ 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a30      	ldr	r2, [pc, #192]	@ (80034f0 <HAL_DAC_MspInit+0xe0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d159      	bne.n	80034e6 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	4b2f      	ldr	r3, [pc, #188]	@ (80034f4 <HAL_DAC_MspInit+0xe4>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	4a2e      	ldr	r2, [pc, #184]	@ (80034f4 <HAL_DAC_MspInit+0xe4>)
 800343c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003440:	6413      	str	r3, [r2, #64]	@ 0x40
 8003442:	4b2c      	ldr	r3, [pc, #176]	@ (80034f4 <HAL_DAC_MspInit+0xe4>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b28      	ldr	r3, [pc, #160]	@ (80034f4 <HAL_DAC_MspInit+0xe4>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	4a27      	ldr	r2, [pc, #156]	@ (80034f4 <HAL_DAC_MspInit+0xe4>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6313      	str	r3, [r2, #48]	@ 0x30
 800345e:	4b25      	ldr	r3, [pc, #148]	@ (80034f4 <HAL_DAC_MspInit+0xe4>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800346a:	2310      	movs	r3, #16
 800346c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800346e:	2303      	movs	r3, #3
 8003470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003476:	f107 0314 	add.w	r3, r7, #20
 800347a:	4619      	mov	r1, r3
 800347c:	481e      	ldr	r0, [pc, #120]	@ (80034f8 <HAL_DAC_MspInit+0xe8>)
 800347e:	f001 f955 	bl	800472c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8003482:	4b1e      	ldr	r3, [pc, #120]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 8003484:	4a1e      	ldr	r2, [pc, #120]	@ (8003500 <HAL_DAC_MspInit+0xf0>)
 8003486:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003488:	4b1c      	ldr	r3, [pc, #112]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 800348a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800348e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003490:	4b1a      	ldr	r3, [pc, #104]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 8003492:	2240      	movs	r2, #64	@ 0x40
 8003494:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003496:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 8003498:	2200      	movs	r2, #0
 800349a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800349c:	4b17      	ldr	r3, [pc, #92]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 800349e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034a2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034a4:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 80034a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034aa:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034ac:	4b13      	ldr	r3, [pc, #76]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 80034ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034b2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80034b4:	4b11      	ldr	r3, [pc, #68]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 80034b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034ba:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80034bc:	4b0f      	ldr	r3, [pc, #60]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 80034be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80034c2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034c4:	4b0d      	ldr	r3, [pc, #52]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80034ca:	480c      	ldr	r0, [pc, #48]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 80034cc:	f000 fd2c 	bl	8003f28 <HAL_DMA_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80034d6:	f7ff f9e7 	bl	80028a8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a07      	ldr	r2, [pc, #28]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	4a06      	ldr	r2, [pc, #24]	@ (80034fc <HAL_DAC_MspInit+0xec>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80034e6:	bf00      	nop
 80034e8:	3728      	adds	r7, #40	@ 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40007400 	.word	0x40007400
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40020000 	.word	0x40020000
 80034fc:	200000a4 	.word	0x200000a4
 8003500:	40026088 	.word	0x40026088

08003504 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	@ 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a31      	ldr	r2, [pc, #196]	@ (80035e8 <HAL_SD_MspInit+0xe4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d15b      	bne.n	80035de <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	4b30      	ldr	r3, [pc, #192]	@ (80035ec <HAL_SD_MspInit+0xe8>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352e:	4a2f      	ldr	r2, [pc, #188]	@ (80035ec <HAL_SD_MspInit+0xe8>)
 8003530:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003534:	6453      	str	r3, [r2, #68]	@ 0x44
 8003536:	4b2d      	ldr	r3, [pc, #180]	@ (80035ec <HAL_SD_MspInit+0xe8>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	4b29      	ldr	r3, [pc, #164]	@ (80035ec <HAL_SD_MspInit+0xe8>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	4a28      	ldr	r2, [pc, #160]	@ (80035ec <HAL_SD_MspInit+0xe8>)
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	6313      	str	r3, [r2, #48]	@ 0x30
 8003552:	4b26      	ldr	r3, [pc, #152]	@ (80035ec <HAL_SD_MspInit+0xe8>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	4b22      	ldr	r3, [pc, #136]	@ (80035ec <HAL_SD_MspInit+0xe8>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	4a21      	ldr	r2, [pc, #132]	@ (80035ec <HAL_SD_MspInit+0xe8>)
 8003568:	f043 0308 	orr.w	r3, r3, #8
 800356c:	6313      	str	r3, [r2, #48]	@ 0x30
 800356e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <HAL_SD_MspInit+0xe8>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800357a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800357e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003580:	2302      	movs	r3, #2
 8003582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003584:	2301      	movs	r3, #1
 8003586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003588:	2303      	movs	r3, #3
 800358a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800358c:	230c      	movs	r3, #12
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4619      	mov	r1, r3
 8003596:	4816      	ldr	r0, [pc, #88]	@ (80035f0 <HAL_SD_MspInit+0xec>)
 8003598:	f001 f8c8 	bl	800472c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800359c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035aa:	2303      	movs	r3, #3
 80035ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80035ae:	230c      	movs	r3, #12
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	4619      	mov	r1, r3
 80035b8:	480d      	ldr	r0, [pc, #52]	@ (80035f0 <HAL_SD_MspInit+0xec>)
 80035ba:	f001 f8b7 	bl	800472c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035be:	2304      	movs	r3, #4
 80035c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035c6:	2301      	movs	r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80035ce:	230c      	movs	r3, #12
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	4806      	ldr	r0, [pc, #24]	@ (80035f4 <HAL_SD_MspInit+0xf0>)
 80035da:	f001 f8a7 	bl	800472c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80035de:	bf00      	nop
 80035e0:	3728      	adds	r7, #40	@ 0x28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40020800 	.word	0x40020800
 80035f4:	40020c00 	.word	0x40020c00

080035f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08c      	sub	sp, #48	@ 0x30
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 031c 	add.w	r3, r7, #28
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a74      	ldr	r2, [pc, #464]	@ (80037e8 <HAL_SPI_MspInit+0x1f0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	f040 8089 	bne.w	800372e <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800361c:	2300      	movs	r3, #0
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	4b72      	ldr	r3, [pc, #456]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 8003622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003624:	4a71      	ldr	r2, [pc, #452]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 8003626:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800362a:	6453      	str	r3, [r2, #68]	@ 0x44
 800362c:	4b6f      	ldr	r3, [pc, #444]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 800362e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003630:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	4b6b      	ldr	r3, [pc, #428]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	4a6a      	ldr	r2, [pc, #424]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6313      	str	r3, [r2, #48]	@ 0x30
 8003648:	4b68      	ldr	r3, [pc, #416]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003654:	23e0      	movs	r3, #224	@ 0xe0
 8003656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003658:	2302      	movs	r3, #2
 800365a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003660:	2303      	movs	r3, #3
 8003662:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003664:	2305      	movs	r3, #5
 8003666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003668:	f107 031c 	add.w	r3, r7, #28
 800366c:	4619      	mov	r1, r3
 800366e:	4860      	ldr	r0, [pc, #384]	@ (80037f0 <HAL_SPI_MspInit+0x1f8>)
 8003670:	f001 f85c 	bl	800472c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003674:	4b5f      	ldr	r3, [pc, #380]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 8003676:	4a60      	ldr	r2, [pc, #384]	@ (80037f8 <HAL_SPI_MspInit+0x200>)
 8003678:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800367a:	4b5e      	ldr	r3, [pc, #376]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 800367c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003680:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003682:	4b5c      	ldr	r3, [pc, #368]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 8003684:	2240      	movs	r2, #64	@ 0x40
 8003686:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003688:	4b5a      	ldr	r3, [pc, #360]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 800368a:	2200      	movs	r2, #0
 800368c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800368e:	4b59      	ldr	r3, [pc, #356]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 8003690:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003694:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003696:	4b57      	ldr	r3, [pc, #348]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 8003698:	2200      	movs	r2, #0
 800369a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800369c:	4b55      	ldr	r3, [pc, #340]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 800369e:	2200      	movs	r2, #0
 80036a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80036a2:	4b54      	ldr	r3, [pc, #336]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036a8:	4b52      	ldr	r3, [pc, #328]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ae:	4b51      	ldr	r3, [pc, #324]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80036b4:	484f      	ldr	r0, [pc, #316]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 80036b6:	f000 fc37 	bl	8003f28 <HAL_DMA_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80036c0:	f7ff f8f2 	bl	80028a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a4b      	ldr	r2, [pc, #300]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 80036c8:	649a      	str	r2, [r3, #72]	@ 0x48
 80036ca:	4a4a      	ldr	r2, [pc, #296]	@ (80037f4 <HAL_SPI_MspInit+0x1fc>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80036d0:	4b4a      	ldr	r3, [pc, #296]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 80036d2:	4a4b      	ldr	r2, [pc, #300]	@ (8003800 <HAL_SPI_MspInit+0x208>)
 80036d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80036d6:	4b49      	ldr	r3, [pc, #292]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 80036d8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80036dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036de:	4b47      	ldr	r3, [pc, #284]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036e4:	4b45      	ldr	r3, [pc, #276]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036ea:	4b44      	ldr	r3, [pc, #272]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 80036ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036f2:	4b42      	ldr	r3, [pc, #264]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036f8:	4b40      	ldr	r3, [pc, #256]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80036fe:	4b3f      	ldr	r3, [pc, #252]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 8003700:	2200      	movs	r2, #0
 8003702:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003704:	4b3d      	ldr	r3, [pc, #244]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 8003706:	2200      	movs	r2, #0
 8003708:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800370a:	4b3c      	ldr	r3, [pc, #240]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 800370c:	2200      	movs	r2, #0
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003710:	483a      	ldr	r0, [pc, #232]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 8003712:	f000 fc09 	bl	8003f28 <HAL_DMA_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800371c:	f7ff f8c4 	bl	80028a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a36      	ldr	r2, [pc, #216]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 8003724:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003726:	4a35      	ldr	r2, [pc, #212]	@ (80037fc <HAL_SPI_MspInit+0x204>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800372c:	e057      	b.n	80037de <HAL_SPI_MspInit+0x1e6>
  else if(hspi->Instance==SPI2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a34      	ldr	r2, [pc, #208]	@ (8003804 <HAL_SPI_MspInit+0x20c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d152      	bne.n	80037de <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003738:	2300      	movs	r3, #0
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	4b2b      	ldr	r3, [pc, #172]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	4a2a      	ldr	r2, [pc, #168]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 8003742:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003746:	6413      	str	r3, [r2, #64]	@ 0x40
 8003748:	4b28      	ldr	r3, [pc, #160]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	4b24      	ldr	r3, [pc, #144]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375c:	4a23      	ldr	r2, [pc, #140]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 800375e:	f043 0304 	orr.w	r3, r3, #4
 8003762:	6313      	str	r3, [r2, #48]	@ 0x30
 8003764:	4b21      	ldr	r3, [pc, #132]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003778:	4a1c      	ldr	r2, [pc, #112]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003780:	4b1a      	ldr	r3, [pc, #104]	@ (80037ec <HAL_SPI_MspInit+0x1f4>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800378c:	2308      	movs	r3, #8
 800378e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800379c:	2305      	movs	r3, #5
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a0:	f107 031c 	add.w	r3, r7, #28
 80037a4:	4619      	mov	r1, r3
 80037a6:	4818      	ldr	r0, [pc, #96]	@ (8003808 <HAL_SPI_MspInit+0x210>)
 80037a8:	f000 ffc0 	bl	800472c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037be:	2305      	movs	r3, #5
 80037c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c2:	f107 031c 	add.w	r3, r7, #28
 80037c6:	4619      	mov	r1, r3
 80037c8:	4810      	ldr	r0, [pc, #64]	@ (800380c <HAL_SPI_MspInit+0x214>)
 80037ca:	f000 ffaf 	bl	800472c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	2100      	movs	r1, #0
 80037d2:	2024      	movs	r0, #36	@ 0x24
 80037d4:	f000 faf7 	bl	8003dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80037d8:	2024      	movs	r0, #36	@ 0x24
 80037da:	f000 fb10 	bl	8003dfe <HAL_NVIC_EnableIRQ>
}
 80037de:	bf00      	nop
 80037e0:	3730      	adds	r7, #48	@ 0x30
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40013000 	.word	0x40013000
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40020000 	.word	0x40020000
 80037f4:	20000238 	.word	0x20000238
 80037f8:	40026458 	.word	0x40026458
 80037fc:	20000298 	.word	0x20000298
 8003800:	40026410 	.word	0x40026410
 8003804:	40003800 	.word	0x40003800
 8003808:	40020800 	.word	0x40020800
 800380c:	40020400 	.word	0x40020400

08003810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003820:	d10e      	bne.n	8003840 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	4b16      	ldr	r3, [pc, #88]	@ (8003880 <HAL_TIM_Base_MspInit+0x70>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	4a15      	ldr	r2, [pc, #84]	@ (8003880 <HAL_TIM_Base_MspInit+0x70>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6413      	str	r3, [r2, #64]	@ 0x40
 8003832:	4b13      	ldr	r3, [pc, #76]	@ (8003880 <HAL_TIM_Base_MspInit+0x70>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800383e:	e01a      	b.n	8003876 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0f      	ldr	r2, [pc, #60]	@ (8003884 <HAL_TIM_Base_MspInit+0x74>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d115      	bne.n	8003876 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	4b0c      	ldr	r3, [pc, #48]	@ (8003880 <HAL_TIM_Base_MspInit+0x70>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	4a0b      	ldr	r2, [pc, #44]	@ (8003880 <HAL_TIM_Base_MspInit+0x70>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	6413      	str	r3, [r2, #64]	@ 0x40
 800385a:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <HAL_TIM_Base_MspInit+0x70>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003866:	2200      	movs	r2, #0
 8003868:	2100      	movs	r1, #0
 800386a:	201e      	movs	r0, #30
 800386c:	f000 faab 	bl	8003dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003870:	201e      	movs	r0, #30
 8003872:	f000 fac4 	bl	8003dfe <HAL_NVIC_EnableIRQ>
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	40000800 	.word	0x40000800

08003888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	@ 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003890:	f107 0314 	add.w	r3, r7, #20
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	@ (800391c <HAL_UART_MspInit+0x94>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d134      	bne.n	8003914 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038b4:	f043 0310 	orr.w	r3, r3, #16
 80038b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ba:	4b19      	ldr	r3, [pc, #100]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4b15      	ldr	r3, [pc, #84]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d6:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80038e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f0:	2303      	movs	r3, #3
 80038f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038f4:	2307      	movs	r3, #7
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	4619      	mov	r1, r3
 80038fe:	4809      	ldr	r0, [pc, #36]	@ (8003924 <HAL_UART_MspInit+0x9c>)
 8003900:	f000 ff14 	bl	800472c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003904:	2200      	movs	r2, #0
 8003906:	2100      	movs	r1, #0
 8003908:	2025      	movs	r0, #37	@ 0x25
 800390a:	f000 fa5c 	bl	8003dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800390e:	2025      	movs	r0, #37	@ 0x25
 8003910:	f000 fa75 	bl	8003dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003914:	bf00      	nop
 8003916:	3728      	adds	r7, #40	@ 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40011000 	.word	0x40011000
 8003920:	40023800 	.word	0x40023800
 8003924:	40020000 	.word	0x40020000

08003928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <NMI_Handler+0x4>

08003930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <HardFault_Handler+0x4>

08003938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800393c:	bf00      	nop
 800393e:	e7fd      	b.n	800393c <MemManage_Handler+0x4>

08003940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <BusFault_Handler+0x4>

08003948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <UsageFault_Handler+0x4>

08003950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800397e:	f000 f903 	bl	8003b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800398c:	4802      	ldr	r0, [pc, #8]	@ (8003998 <DMA1_Stream5_IRQHandler+0x10>)
 800398e:	f000 fc63 	bl	8004258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200000a4 	.word	0x200000a4

0800399c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039a0:	4802      	ldr	r0, [pc, #8]	@ (80039ac <TIM4_IRQHandler+0x10>)
 80039a2:	f004 fafb 	bl	8007f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000340 	.word	0x20000340

080039b0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80039b4:	4802      	ldr	r0, [pc, #8]	@ (80039c0 <SPI2_IRQHandler+0x10>)
 80039b6:	f003 fcc7 	bl	8007348 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200001e0 	.word	0x200001e0

080039c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039c8:	4802      	ldr	r0, [pc, #8]	@ (80039d4 <USART1_IRQHandler+0x10>)
 80039ca:	f004 feed 	bl	80087a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000388 	.word	0x20000388

080039d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80039dc:	4802      	ldr	r0, [pc, #8]	@ (80039e8 <DMA2_Stream0_IRQHandler+0x10>)
 80039de:	f000 fc3b 	bl	8004258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000298 	.word	0x20000298

080039ec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80039f0:	4802      	ldr	r0, [pc, #8]	@ (80039fc <DMA2_Stream3_IRQHandler+0x10>)
 80039f2:	f000 fc31 	bl	8004258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000238 	.word	0x20000238

08003a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a08:	4a14      	ldr	r2, [pc, #80]	@ (8003a5c <_sbrk+0x5c>)
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <_sbrk+0x60>)
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a14:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <_sbrk+0x64>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <_sbrk+0x64>)
 8003a1e:	4a12      	ldr	r2, [pc, #72]	@ (8003a68 <_sbrk+0x68>)
 8003a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a22:	4b10      	ldr	r3, [pc, #64]	@ (8003a64 <_sbrk+0x64>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d207      	bcs.n	8003a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a30:	f009 fc88 	bl	800d344 <__errno>
 8003a34:	4603      	mov	r3, r0
 8003a36:	220c      	movs	r2, #12
 8003a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	e009      	b.n	8003a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a40:	4b08      	ldr	r3, [pc, #32]	@ (8003a64 <_sbrk+0x64>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a46:	4b07      	ldr	r3, [pc, #28]	@ (8003a64 <_sbrk+0x64>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	4a05      	ldr	r2, [pc, #20]	@ (8003a64 <_sbrk+0x64>)
 8003a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a52:	68fb      	ldr	r3, [r7, #12]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20020000 	.word	0x20020000
 8003a60:	00000400 	.word	0x00000400
 8003a64:	20000630 	.word	0x20000630
 8003a68:	200007c0 	.word	0x200007c0

08003a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a70:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <SystemInit+0x20>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a76:	4a05      	ldr	r2, [pc, #20]	@ (8003a8c <SystemInit+0x20>)
 8003a78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ac8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003a94:	f7ff ffea 	bl	8003a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a98:	480c      	ldr	r0, [pc, #48]	@ (8003acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a9a:	490d      	ldr	r1, [pc, #52]	@ (8003ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003aa0:	e002      	b.n	8003aa8 <LoopCopyDataInit>

08003aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aa6:	3304      	adds	r3, #4

08003aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aac:	d3f9      	bcc.n	8003aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aae:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8003adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ab4:	e001      	b.n	8003aba <LoopFillZerobss>

08003ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ab8:	3204      	adds	r2, #4

08003aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003abc:	d3fb      	bcc.n	8003ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003abe:	f009 fc47 	bl	800d350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ac2:	f7fe f99b 	bl	8001dfc <main>
  bx  lr    
 8003ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ad0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003ad4:	0800e3d8 	.word	0x0800e3d8
  ldr r2, =_sbss
 8003ad8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003adc:	200007bc 	.word	0x200007bc

08003ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ae0:	e7fe      	b.n	8003ae0 <ADC_IRQHandler>
	...

08003ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <HAL_Init+0x40>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0d      	ldr	r2, [pc, #52]	@ (8003b24 <HAL_Init+0x40>)
 8003aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <HAL_Init+0x40>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <HAL_Init+0x40>)
 8003afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b00:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <HAL_Init+0x40>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a07      	ldr	r2, [pc, #28]	@ (8003b24 <HAL_Init+0x40>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b0c:	2003      	movs	r0, #3
 8003b0e:	f000 f94f 	bl	8003db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b12:	200f      	movs	r0, #15
 8003b14:	f000 f808 	bl	8003b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b18:	f7ff fc52 	bl	80033c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023c00 	.word	0x40023c00

08003b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b30:	4b12      	ldr	r3, [pc, #72]	@ (8003b7c <HAL_InitTick+0x54>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b12      	ldr	r3, [pc, #72]	@ (8003b80 <HAL_InitTick+0x58>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f967 	bl	8003e1a <HAL_SYSTICK_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e00e      	b.n	8003b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b0f      	cmp	r3, #15
 8003b5a:	d80a      	bhi.n	8003b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	f000 f92f 	bl	8003dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b68:	4a06      	ldr	r2, [pc, #24]	@ (8003b84 <HAL_InitTick+0x5c>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	2000000c 	.word	0x2000000c
 8003b80:	20000014 	.word	0x20000014
 8003b84:	20000010 	.word	0x20000010

08003b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ba8 <HAL_IncTick+0x20>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <HAL_IncTick+0x24>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4413      	add	r3, r2
 8003b98:	4a04      	ldr	r2, [pc, #16]	@ (8003bac <HAL_IncTick+0x24>)
 8003b9a:	6013      	str	r3, [r2, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000014 	.word	0x20000014
 8003bac:	20000634 	.word	0x20000634

08003bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	@ (8003bc4 <HAL_GetTick+0x14>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000634 	.word	0x20000634

08003bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bd0:	f7ff ffee 	bl	8003bb0 <HAL_GetTick>
 8003bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d005      	beq.n	8003bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003be2:	4b0a      	ldr	r3, [pc, #40]	@ (8003c0c <HAL_Delay+0x44>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bee:	bf00      	nop
 8003bf0:	f7ff ffde 	bl	8003bb0 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d8f7      	bhi.n	8003bf0 <HAL_Delay+0x28>
  {
  }
}
 8003c00:	bf00      	nop
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000014 	.word	0x20000014

08003c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c20:	4b0c      	ldr	r3, [pc, #48]	@ (8003c54 <__NVIC_SetPriorityGrouping+0x44>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c42:	4a04      	ldr	r2, [pc, #16]	@ (8003c54 <__NVIC_SetPriorityGrouping+0x44>)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	60d3      	str	r3, [r2, #12]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c5c:	4b04      	ldr	r3, [pc, #16]	@ (8003c70 <__NVIC_GetPriorityGrouping+0x18>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	0a1b      	lsrs	r3, r3, #8
 8003c62:	f003 0307 	and.w	r3, r3, #7
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	db0b      	blt.n	8003c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	f003 021f 	and.w	r2, r3, #31
 8003c8c:	4907      	ldr	r1, [pc, #28]	@ (8003cac <__NVIC_EnableIRQ+0x38>)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2001      	movs	r0, #1
 8003c96:	fa00 f202 	lsl.w	r2, r0, r2
 8003c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	e000e100 	.word	0xe000e100

08003cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	6039      	str	r1, [r7, #0]
 8003cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	db0a      	blt.n	8003cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	490c      	ldr	r1, [pc, #48]	@ (8003cfc <__NVIC_SetPriority+0x4c>)
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	0112      	lsls	r2, r2, #4
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cd8:	e00a      	b.n	8003cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4908      	ldr	r1, [pc, #32]	@ (8003d00 <__NVIC_SetPriority+0x50>)
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	3b04      	subs	r3, #4
 8003ce8:	0112      	lsls	r2, r2, #4
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	440b      	add	r3, r1
 8003cee:	761a      	strb	r2, [r3, #24]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	e000e100 	.word	0xe000e100
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	@ 0x24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f1c3 0307 	rsb	r3, r3, #7
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	bf28      	it	cs
 8003d22:	2304      	movcs	r3, #4
 8003d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d902      	bls.n	8003d34 <NVIC_EncodePriority+0x30>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3b03      	subs	r3, #3
 8003d32:	e000      	b.n	8003d36 <NVIC_EncodePriority+0x32>
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d38:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43da      	mvns	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	401a      	ands	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	43d9      	mvns	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	4313      	orrs	r3, r2
         );
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3724      	adds	r7, #36	@ 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d7c:	d301      	bcc.n	8003d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e00f      	b.n	8003da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d82:	4a0a      	ldr	r2, [pc, #40]	@ (8003dac <SysTick_Config+0x40>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d8a:	210f      	movs	r1, #15
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d90:	f7ff ff8e 	bl	8003cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d94:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <SysTick_Config+0x40>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d9a:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <SysTick_Config+0x40>)
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	e000e010 	.word	0xe000e010

08003db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ff29 	bl	8003c10 <__NVIC_SetPriorityGrouping>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4603      	mov	r3, r0
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dd8:	f7ff ff3e 	bl	8003c58 <__NVIC_GetPriorityGrouping>
 8003ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	6978      	ldr	r0, [r7, #20]
 8003de4:	f7ff ff8e 	bl	8003d04 <NVIC_EncodePriority>
 8003de8:	4602      	mov	r2, r0
 8003dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff ff5d 	bl	8003cb0 <__NVIC_SetPriority>
}
 8003df6:	bf00      	nop
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	4603      	mov	r3, r0
 8003e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff31 	bl	8003c74 <__NVIC_EnableIRQ>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ffa2 	bl	8003d6c <SysTick_Config>
 8003e28:	4603      	mov	r3, r0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e014      	b.n	8003e6e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	791b      	ldrb	r3, [r3, #4]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d105      	bne.n	8003e5a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fadb 	bl	8003410 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b089      	sub	sp, #36	@ 0x24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_DAC_ConfigChannel+0x1c>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e042      	b.n	8003f1c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	795b      	ldrb	r3, [r3, #5]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_DAC_ConfigChannel+0x2c>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e03c      	b.n	8003f1c <HAL_DAC_ConfigChannel+0xa6>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6819      	ldr	r1, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	22c0      	movs	r2, #192	@ 0xc0
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43da      	mvns	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003f1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3724      	adds	r7, #36	@ 0x24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f34:	f7ff fe3c 	bl	8003bb0 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e099      	b.n	8004078 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f64:	e00f      	b.n	8003f86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f66:	f7ff fe23 	bl	8003bb0 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b05      	cmp	r3, #5
 8003f72:	d908      	bls.n	8003f86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e078      	b.n	8004078 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e8      	bne.n	8003f66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4b38      	ldr	r3, [pc, #224]	@ (8004080 <HAL_DMA_Init+0x158>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d107      	bne.n	8003ff0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0307 	bic.w	r3, r3, #7
 8004006:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	2b04      	cmp	r3, #4
 8004018:	d117      	bne.n	800404a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00e      	beq.n	800404a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fb01 	bl	8004634 <DMA_CheckFifoParam>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2240      	movs	r2, #64	@ 0x40
 800403c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004046:	2301      	movs	r3, #1
 8004048:	e016      	b.n	8004078 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fab8 	bl	80045c8 <DMA_CalcBaseAndBitshift>
 8004058:	4603      	mov	r3, r0
 800405a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004060:	223f      	movs	r2, #63	@ 0x3f
 8004062:	409a      	lsls	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	f010803f 	.word	0xf010803f

08004084 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_DMA_Start_IT+0x26>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e040      	b.n	800412c <HAL_DMA_Start_IT+0xa8>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d12f      	bne.n	800411e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fa4a 	bl	800456c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040dc:	223f      	movs	r2, #63	@ 0x3f
 80040de:	409a      	lsls	r2, r3
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0216 	orr.w	r2, r2, #22
 80040f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0208 	orr.w	r2, r2, #8
 800410a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e005      	b.n	800412a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004126:	2302      	movs	r3, #2
 8004128:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800412a:	7dfb      	ldrb	r3, [r7, #23]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004140:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004142:	f7ff fd35 	bl	8003bb0 <HAL_GetTick>
 8004146:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d008      	beq.n	8004166 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2280      	movs	r2, #128	@ 0x80
 8004158:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e052      	b.n	800420c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0216 	bic.w	r2, r2, #22
 8004174:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004184:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_DMA_Abort+0x62>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0208 	bic.w	r2, r2, #8
 80041a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0201 	bic.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041b6:	e013      	b.n	80041e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041b8:	f7ff fcfa 	bl	8003bb0 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d90c      	bls.n	80041e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2203      	movs	r2, #3
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e015      	b.n	800420c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e4      	bne.n	80041b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f2:	223f      	movs	r2, #63	@ 0x3f
 80041f4:	409a      	lsls	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d004      	beq.n	8004232 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2280      	movs	r2, #128	@ 0x80
 800422c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e00c      	b.n	800424c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2205      	movs	r2, #5
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004264:	4b8e      	ldr	r3, [pc, #568]	@ (80044a0 <HAL_DMA_IRQHandler+0x248>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a8e      	ldr	r2, [pc, #568]	@ (80044a4 <HAL_DMA_IRQHandler+0x24c>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	0a9b      	lsrs	r3, r3, #10
 8004270:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004276:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004282:	2208      	movs	r2, #8
 8004284:	409a      	lsls	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01a      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0204 	bic.w	r2, r2, #4
 80042aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	2208      	movs	r2, #8
 80042b2:	409a      	lsls	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c8:	2201      	movs	r2, #1
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e6:	2201      	movs	r2, #1
 80042e8:	409a      	lsls	r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f2:	f043 0202 	orr.w	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fe:	2204      	movs	r2, #4
 8004300:	409a      	lsls	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d012      	beq.n	8004330 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431c:	2204      	movs	r2, #4
 800431e:	409a      	lsls	r2, r3
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	f043 0204 	orr.w	r2, r3, #4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004334:	2210      	movs	r2, #16
 8004336:	409a      	lsls	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d043      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d03c      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004352:	2210      	movs	r2, #16
 8004354:	409a      	lsls	r2, r3
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d018      	beq.n	800439a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d108      	bne.n	8004388 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d024      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
 8004386:	e01f      	b.n	80043c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
 8004398:	e016      	b.n	80043c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0208 	bic.w	r2, r2, #8
 80043b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043cc:	2220      	movs	r2, #32
 80043ce:	409a      	lsls	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 808f 	beq.w	80044f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8087 	beq.w	80044f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ee:	2220      	movs	r2, #32
 80043f0:	409a      	lsls	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b05      	cmp	r3, #5
 8004400:	d136      	bne.n	8004470 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0216 	bic.w	r2, r2, #22
 8004410:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004420:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <HAL_DMA_IRQHandler+0x1da>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0208 	bic.w	r2, r2, #8
 8004440:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	223f      	movs	r2, #63	@ 0x3f
 8004448:	409a      	lsls	r2, r3
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004462:	2b00      	cmp	r3, #0
 8004464:	d07e      	beq.n	8004564 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
        }
        return;
 800446e:	e079      	b.n	8004564 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01d      	beq.n	80044ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10d      	bne.n	80044a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004490:	2b00      	cmp	r3, #0
 8004492:	d031      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
 800449c:	e02c      	b.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
 800449e:	bf00      	nop
 80044a0:	2000000c 	.word	0x2000000c
 80044a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d023      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
 80044b8:	e01e      	b.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0210 	bic.w	r2, r2, #16
 80044d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d032      	beq.n	8004566 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d022      	beq.n	8004552 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2205      	movs	r2, #5
 8004510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	3301      	adds	r3, #1
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	429a      	cmp	r2, r3
 800452e:	d307      	bcc.n	8004540 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f2      	bne.n	8004524 <HAL_DMA_IRQHandler+0x2cc>
 800453e:	e000      	b.n	8004542 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004540:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
 8004562:	e000      	b.n	8004566 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004564:	bf00      	nop
    }
  }
}
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004588:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b40      	cmp	r3, #64	@ 0x40
 8004598:	d108      	bne.n	80045ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045aa:	e007      	b.n	80045bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	3b10      	subs	r3, #16
 80045d8:	4a14      	ldr	r2, [pc, #80]	@ (800462c <DMA_CalcBaseAndBitshift+0x64>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045e2:	4a13      	ldr	r2, [pc, #76]	@ (8004630 <DMA_CalcBaseAndBitshift+0x68>)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d909      	bls.n	800460a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045fe:	f023 0303 	bic.w	r3, r3, #3
 8004602:	1d1a      	adds	r2, r3, #4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	659a      	str	r2, [r3, #88]	@ 0x58
 8004608:	e007      	b.n	800461a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	aaaaaaab 	.word	0xaaaaaaab
 8004630:	0800e32c 	.word	0x0800e32c

08004634 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004644:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11f      	bne.n	800468e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d856      	bhi.n	8004702 <DMA_CheckFifoParam+0xce>
 8004654:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <DMA_CheckFifoParam+0x28>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	0800466d 	.word	0x0800466d
 8004660:	0800467f 	.word	0x0800467f
 8004664:	0800466d 	.word	0x0800466d
 8004668:	08004703 	.word	0x08004703
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004670:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d046      	beq.n	8004706 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467c:	e043      	b.n	8004706 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004686:	d140      	bne.n	800470a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800468c:	e03d      	b.n	800470a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004696:	d121      	bne.n	80046dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b03      	cmp	r3, #3
 800469c:	d837      	bhi.n	800470e <DMA_CheckFifoParam+0xda>
 800469e:	a201      	add	r2, pc, #4	@ (adr r2, 80046a4 <DMA_CheckFifoParam+0x70>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046bb 	.word	0x080046bb
 80046ac:	080046b5 	.word	0x080046b5
 80046b0:	080046cd 	.word	0x080046cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      break;
 80046b8:	e030      	b.n	800471c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d025      	beq.n	8004712 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ca:	e022      	b.n	8004712 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046d4:	d11f      	bne.n	8004716 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046da:	e01c      	b.n	8004716 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d903      	bls.n	80046ea <DMA_CheckFifoParam+0xb6>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d003      	beq.n	80046f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046e8:	e018      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
      break;
 80046ee:	e015      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00e      	beq.n	800471a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004700:	e00b      	b.n	800471a <DMA_CheckFifoParam+0xe6>
      break;
 8004702:	bf00      	nop
 8004704:	e00a      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;
 8004706:	bf00      	nop
 8004708:	e008      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;
 800470a:	bf00      	nop
 800470c:	e006      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;
 800470e:	bf00      	nop
 8004710:	e004      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;
 8004712:	bf00      	nop
 8004714:	e002      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;   
 8004716:	bf00      	nop
 8004718:	e000      	b.n	800471c <DMA_CheckFifoParam+0xe8>
      break;
 800471a:	bf00      	nop
    }
  } 
  
  return status; 
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop

0800472c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	@ 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	e16b      	b.n	8004a20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004748:	2201      	movs	r2, #1
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	429a      	cmp	r2, r3
 8004762:	f040 815a 	bne.w	8004a1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d005      	beq.n	800477e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800477a:	2b02      	cmp	r3, #2
 800477c:	d130      	bne.n	80047e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	2203      	movs	r2, #3
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047b4:	2201      	movs	r2, #1
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 0201 	and.w	r2, r3, #1
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d017      	beq.n	800481c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	2203      	movs	r2, #3
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d123      	bne.n	8004870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	08da      	lsrs	r2, r3, #3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3208      	adds	r2, #8
 8004830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	220f      	movs	r2, #15
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4313      	orrs	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	08da      	lsrs	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3208      	adds	r2, #8
 800486a:	69b9      	ldr	r1, [r7, #24]
 800486c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	2203      	movs	r2, #3
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 0203 	and.w	r2, r3, #3
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80b4 	beq.w	8004a1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	4b60      	ldr	r3, [pc, #384]	@ (8004a38 <HAL_GPIO_Init+0x30c>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ba:	4a5f      	ldr	r2, [pc, #380]	@ (8004a38 <HAL_GPIO_Init+0x30c>)
 80048bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80048c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004a38 <HAL_GPIO_Init+0x30c>)
 80048c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ce:	4a5b      	ldr	r2, [pc, #364]	@ (8004a3c <HAL_GPIO_Init+0x310>)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	3302      	adds	r3, #2
 80048d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	220f      	movs	r2, #15
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a52      	ldr	r2, [pc, #328]	@ (8004a40 <HAL_GPIO_Init+0x314>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d02b      	beq.n	8004952 <HAL_GPIO_Init+0x226>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a51      	ldr	r2, [pc, #324]	@ (8004a44 <HAL_GPIO_Init+0x318>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d025      	beq.n	800494e <HAL_GPIO_Init+0x222>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a50      	ldr	r2, [pc, #320]	@ (8004a48 <HAL_GPIO_Init+0x31c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01f      	beq.n	800494a <HAL_GPIO_Init+0x21e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a4f      	ldr	r2, [pc, #316]	@ (8004a4c <HAL_GPIO_Init+0x320>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d019      	beq.n	8004946 <HAL_GPIO_Init+0x21a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a4e      	ldr	r2, [pc, #312]	@ (8004a50 <HAL_GPIO_Init+0x324>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <HAL_GPIO_Init+0x216>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a4d      	ldr	r2, [pc, #308]	@ (8004a54 <HAL_GPIO_Init+0x328>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00d      	beq.n	800493e <HAL_GPIO_Init+0x212>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a4c      	ldr	r2, [pc, #304]	@ (8004a58 <HAL_GPIO_Init+0x32c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <HAL_GPIO_Init+0x20e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a4b      	ldr	r2, [pc, #300]	@ (8004a5c <HAL_GPIO_Init+0x330>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d101      	bne.n	8004936 <HAL_GPIO_Init+0x20a>
 8004932:	2307      	movs	r3, #7
 8004934:	e00e      	b.n	8004954 <HAL_GPIO_Init+0x228>
 8004936:	2308      	movs	r3, #8
 8004938:	e00c      	b.n	8004954 <HAL_GPIO_Init+0x228>
 800493a:	2306      	movs	r3, #6
 800493c:	e00a      	b.n	8004954 <HAL_GPIO_Init+0x228>
 800493e:	2305      	movs	r3, #5
 8004940:	e008      	b.n	8004954 <HAL_GPIO_Init+0x228>
 8004942:	2304      	movs	r3, #4
 8004944:	e006      	b.n	8004954 <HAL_GPIO_Init+0x228>
 8004946:	2303      	movs	r3, #3
 8004948:	e004      	b.n	8004954 <HAL_GPIO_Init+0x228>
 800494a:	2302      	movs	r3, #2
 800494c:	e002      	b.n	8004954 <HAL_GPIO_Init+0x228>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_GPIO_Init+0x228>
 8004952:	2300      	movs	r3, #0
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	f002 0203 	and.w	r2, r2, #3
 800495a:	0092      	lsls	r2, r2, #2
 800495c:	4093      	lsls	r3, r2
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004964:	4935      	ldr	r1, [pc, #212]	@ (8004a3c <HAL_GPIO_Init+0x310>)
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	089b      	lsrs	r3, r3, #2
 800496a:	3302      	adds	r3, #2
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004972:	4b3b      	ldr	r3, [pc, #236]	@ (8004a60 <HAL_GPIO_Init+0x334>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004996:	4a32      	ldr	r2, [pc, #200]	@ (8004a60 <HAL_GPIO_Init+0x334>)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800499c:	4b30      	ldr	r3, [pc, #192]	@ (8004a60 <HAL_GPIO_Init+0x334>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	43db      	mvns	r3, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4013      	ands	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049c0:	4a27      	ldr	r2, [pc, #156]	@ (8004a60 <HAL_GPIO_Init+0x334>)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049c6:	4b26      	ldr	r3, [pc, #152]	@ (8004a60 <HAL_GPIO_Init+0x334>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004a60 <HAL_GPIO_Init+0x334>)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a60 <HAL_GPIO_Init+0x334>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a14:	4a12      	ldr	r2, [pc, #72]	@ (8004a60 <HAL_GPIO_Init+0x334>)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	2b0f      	cmp	r3, #15
 8004a24:	f67f ae90 	bls.w	8004748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	3724      	adds	r7, #36	@ 0x24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40013800 	.word	0x40013800
 8004a40:	40020000 	.word	0x40020000
 8004a44:	40020400 	.word	0x40020400
 8004a48:	40020800 	.word	0x40020800
 8004a4c:	40020c00 	.word	0x40020c00
 8004a50:	40021000 	.word	0x40021000
 8004a54:	40021400 	.word	0x40021400
 8004a58:	40021800 	.word	0x40021800
 8004a5c:	40021c00 	.word	0x40021c00
 8004a60:	40013c00 	.word	0x40013c00

08004a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	807b      	strh	r3, [r7, #2]
 8004a70:	4613      	mov	r3, r2
 8004a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a74:	787b      	ldrb	r3, [r7, #1]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a7a:	887a      	ldrh	r2, [r7, #2]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a80:	e003      	b.n	8004a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a82:	887b      	ldrh	r3, [r7, #2]
 8004a84:	041a      	lsls	r2, r3, #16
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	619a      	str	r2, [r3, #24]
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e267      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d075      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ab6:	4b88      	ldr	r3, [pc, #544]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d00c      	beq.n	8004adc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac2:	4b85      	ldr	r3, [pc, #532]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d112      	bne.n	8004af4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ace:	4b82      	ldr	r3, [pc, #520]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ad6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ada:	d10b      	bne.n	8004af4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	4b7e      	ldr	r3, [pc, #504]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d05b      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x108>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d157      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e242      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004afc:	d106      	bne.n	8004b0c <HAL_RCC_OscConfig+0x74>
 8004afe:	4b76      	ldr	r3, [pc, #472]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a75      	ldr	r2, [pc, #468]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e01d      	b.n	8004b48 <HAL_RCC_OscConfig+0xb0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x98>
 8004b16:	4b70      	ldr	r3, [pc, #448]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a6f      	ldr	r2, [pc, #444]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	4b6d      	ldr	r3, [pc, #436]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a6c      	ldr	r2, [pc, #432]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCC_OscConfig+0xb0>
 8004b30:	4b69      	ldr	r3, [pc, #420]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a68      	ldr	r2, [pc, #416]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	4b66      	ldr	r3, [pc, #408]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a65      	ldr	r2, [pc, #404]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d013      	beq.n	8004b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b50:	f7ff f82e 	bl	8003bb0 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b58:	f7ff f82a 	bl	8003bb0 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	@ 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e207      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0xc0>
 8004b76:	e014      	b.n	8004ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b78:	f7ff f81a 	bl	8003bb0 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b80:	f7ff f816 	bl	8003bb0 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	@ 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e1f3      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b92:	4b51      	ldr	r3, [pc, #324]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0xe8>
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d063      	beq.n	8004c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bae:	4b4a      	ldr	r3, [pc, #296]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bba:	4b47      	ldr	r3, [pc, #284]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d11c      	bne.n	8004c00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bc6:	4b44      	ldr	r3, [pc, #272]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d116      	bne.n	8004c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd2:	4b41      	ldr	r3, [pc, #260]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_RCC_OscConfig+0x152>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d001      	beq.n	8004bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e1c7      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bea:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4937      	ldr	r1, [pc, #220]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	e03a      	b.n	8004c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d020      	beq.n	8004c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c08:	4b34      	ldr	r3, [pc, #208]	@ (8004cdc <HAL_RCC_OscConfig+0x244>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0e:	f7fe ffcf 	bl	8003bb0 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c16:	f7fe ffcb 	bl	8003bb0 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e1a8      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c28:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c34:	4b28      	ldr	r3, [pc, #160]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4925      	ldr	r1, [pc, #148]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]
 8004c48:	e015      	b.n	8004c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c4a:	4b24      	ldr	r3, [pc, #144]	@ (8004cdc <HAL_RCC_OscConfig+0x244>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fe ffae 	bl	8003bb0 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c58:	f7fe ffaa 	bl	8003bb0 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e187      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d036      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d016      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8a:	4b15      	ldr	r3, [pc, #84]	@ (8004ce0 <HAL_RCC_OscConfig+0x248>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c90:	f7fe ff8e 	bl	8003bb0 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c98:	f7fe ff8a 	bl	8003bb0 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e167      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004caa:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <HAL_RCC_OscConfig+0x240>)
 8004cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x200>
 8004cb6:	e01b      	b.n	8004cf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ce0 <HAL_RCC_OscConfig+0x248>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cbe:	f7fe ff77 	bl	8003bb0 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc4:	e00e      	b.n	8004ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc6:	f7fe ff73 	bl	8003bb0 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d907      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e150      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	42470000 	.word	0x42470000
 8004ce0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce4:	4b88      	ldr	r3, [pc, #544]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ea      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8097 	beq.w	8004e2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d02:	4b81      	ldr	r3, [pc, #516]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	4b7d      	ldr	r3, [pc, #500]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	4a7c      	ldr	r2, [pc, #496]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d1e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2e:	4b77      	ldr	r3, [pc, #476]	@ (8004f0c <HAL_RCC_OscConfig+0x474>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d118      	bne.n	8004d6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3a:	4b74      	ldr	r3, [pc, #464]	@ (8004f0c <HAL_RCC_OscConfig+0x474>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a73      	ldr	r2, [pc, #460]	@ (8004f0c <HAL_RCC_OscConfig+0x474>)
 8004d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d46:	f7fe ff33 	bl	8003bb0 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4e:	f7fe ff2f 	bl	8003bb0 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e10c      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d60:	4b6a      	ldr	r3, [pc, #424]	@ (8004f0c <HAL_RCC_OscConfig+0x474>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d106      	bne.n	8004d82 <HAL_RCC_OscConfig+0x2ea>
 8004d74:	4b64      	ldr	r3, [pc, #400]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	4a63      	ldr	r2, [pc, #396]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d80:	e01c      	b.n	8004dbc <HAL_RCC_OscConfig+0x324>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b05      	cmp	r3, #5
 8004d88:	d10c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x30c>
 8004d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8e:	4a5e      	ldr	r2, [pc, #376]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004d90:	f043 0304 	orr.w	r3, r3, #4
 8004d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d96:	4b5c      	ldr	r3, [pc, #368]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9a:	4a5b      	ldr	r2, [pc, #364]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da2:	e00b      	b.n	8004dbc <HAL_RCC_OscConfig+0x324>
 8004da4:	4b58      	ldr	r3, [pc, #352]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da8:	4a57      	ldr	r2, [pc, #348]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db0:	4b55      	ldr	r3, [pc, #340]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db4:	4a54      	ldr	r2, [pc, #336]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004db6:	f023 0304 	bic.w	r3, r3, #4
 8004dba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d015      	beq.n	8004df0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc4:	f7fe fef4 	bl	8003bb0 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dca:	e00a      	b.n	8004de2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dcc:	f7fe fef0 	bl	8003bb0 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e0cb      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de2:	4b49      	ldr	r3, [pc, #292]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0ee      	beq.n	8004dcc <HAL_RCC_OscConfig+0x334>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df0:	f7fe fede 	bl	8003bb0 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df8:	f7fe feda 	bl	8003bb0 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e0b5      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1ee      	bne.n	8004df8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d105      	bne.n	8004e2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e20:	4b39      	ldr	r3, [pc, #228]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	4a38      	ldr	r2, [pc, #224]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 80a1 	beq.w	8004f78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e36:	4b34      	ldr	r3, [pc, #208]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d05c      	beq.n	8004efc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d141      	bne.n	8004ece <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4a:	4b31      	ldr	r3, [pc, #196]	@ (8004f10 <HAL_RCC_OscConfig+0x478>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fe feae 	bl	8003bb0 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e58:	f7fe feaa 	bl	8003bb0 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e087      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	4b27      	ldr	r3, [pc, #156]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69da      	ldr	r2, [r3, #28]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	019b      	lsls	r3, r3, #6
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	491b      	ldr	r1, [pc, #108]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <HAL_RCC_OscConfig+0x478>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea6:	f7fe fe83 	bl	8003bb0 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eae:	f7fe fe7f 	bl	8003bb0 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e05c      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec0:	4b11      	ldr	r3, [pc, #68]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x416>
 8004ecc:	e054      	b.n	8004f78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ece:	4b10      	ldr	r3, [pc, #64]	@ (8004f10 <HAL_RCC_OscConfig+0x478>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fe6c 	bl	8003bb0 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fe fe68 	bl	8003bb0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e045      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <HAL_RCC_OscConfig+0x470>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x444>
 8004efa:	e03d      	b.n	8004f78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d107      	bne.n	8004f14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e038      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	40007000 	.word	0x40007000
 8004f10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f14:	4b1b      	ldr	r3, [pc, #108]	@ (8004f84 <HAL_RCC_OscConfig+0x4ec>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d028      	beq.n	8004f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d121      	bne.n	8004f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d11a      	bne.n	8004f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f44:	4013      	ands	r3, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d111      	bne.n	8004f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d107      	bne.n	8004f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40023800 	.word	0x40023800

08004f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0cc      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f9c:	4b68      	ldr	r3, [pc, #416]	@ (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d90c      	bls.n	8004fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004faa:	4b65      	ldr	r3, [pc, #404]	@ (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb2:	4b63      	ldr	r3, [pc, #396]	@ (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0b8      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d020      	beq.n	8005012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fdc:	4b59      	ldr	r3, [pc, #356]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4a58      	ldr	r2, [pc, #352]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fe6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff4:	4b53      	ldr	r3, [pc, #332]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4a52      	ldr	r2, [pc, #328]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005000:	4b50      	ldr	r3, [pc, #320]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	494d      	ldr	r1, [pc, #308]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	4313      	orrs	r3, r2
 8005010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d044      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	4b47      	ldr	r3, [pc, #284]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d119      	bne.n	8005066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e07f      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d003      	beq.n	8005046 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005042:	2b03      	cmp	r3, #3
 8005044:	d107      	bne.n	8005056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005046:	4b3f      	ldr	r3, [pc, #252]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e06f      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005056:	4b3b      	ldr	r3, [pc, #236]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e067      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005066:	4b37      	ldr	r3, [pc, #220]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f023 0203 	bic.w	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	4934      	ldr	r1, [pc, #208]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	4313      	orrs	r3, r2
 8005076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005078:	f7fe fd9a 	bl	8003bb0 <HAL_GetTick>
 800507c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507e:	e00a      	b.n	8005096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005080:	f7fe fd96 	bl	8003bb0 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508e:	4293      	cmp	r3, r2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e04f      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005096:	4b2b      	ldr	r3, [pc, #172]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 020c 	and.w	r2, r3, #12
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d1eb      	bne.n	8005080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050a8:	4b25      	ldr	r3, [pc, #148]	@ (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d20c      	bcs.n	80050d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b6:	4b22      	ldr	r3, [pc, #136]	@ (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	4b20      	ldr	r3, [pc, #128]	@ (8005140 <HAL_RCC_ClockConfig+0x1b8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d001      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e032      	b.n	8005136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050dc:	4b19      	ldr	r3, [pc, #100]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4916      	ldr	r1, [pc, #88]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050fa:	4b12      	ldr	r3, [pc, #72]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	490e      	ldr	r1, [pc, #56]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800510e:	f000 f821 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 8005112:	4602      	mov	r2, r0
 8005114:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	490a      	ldr	r1, [pc, #40]	@ (8005148 <HAL_RCC_ClockConfig+0x1c0>)
 8005120:	5ccb      	ldrb	r3, [r1, r3]
 8005122:	fa22 f303 	lsr.w	r3, r2, r3
 8005126:	4a09      	ldr	r2, [pc, #36]	@ (800514c <HAL_RCC_ClockConfig+0x1c4>)
 8005128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800512a:	4b09      	ldr	r3, [pc, #36]	@ (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fcfa 	bl	8003b28 <HAL_InitTick>

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40023c00 	.word	0x40023c00
 8005144:	40023800 	.word	0x40023800
 8005148:	0800e314 	.word	0x0800e314
 800514c:	2000000c 	.word	0x2000000c
 8005150:	20000010 	.word	0x20000010

08005154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005158:	b094      	sub	sp, #80	@ 0x50
 800515a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800516c:	4b79      	ldr	r3, [pc, #484]	@ (8005354 <HAL_RCC_GetSysClockFreq+0x200>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 030c 	and.w	r3, r3, #12
 8005174:	2b08      	cmp	r3, #8
 8005176:	d00d      	beq.n	8005194 <HAL_RCC_GetSysClockFreq+0x40>
 8005178:	2b08      	cmp	r3, #8
 800517a:	f200 80e1 	bhi.w	8005340 <HAL_RCC_GetSysClockFreq+0x1ec>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0x34>
 8005182:	2b04      	cmp	r3, #4
 8005184:	d003      	beq.n	800518e <HAL_RCC_GetSysClockFreq+0x3a>
 8005186:	e0db      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005188:	4b73      	ldr	r3, [pc, #460]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x204>)
 800518a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800518c:	e0db      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800518e:	4b73      	ldr	r3, [pc, #460]	@ (800535c <HAL_RCC_GetSysClockFreq+0x208>)
 8005190:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005192:	e0d8      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005194:	4b6f      	ldr	r3, [pc, #444]	@ (8005354 <HAL_RCC_GetSysClockFreq+0x200>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800519c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800519e:	4b6d      	ldr	r3, [pc, #436]	@ (8005354 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d063      	beq.n	8005272 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005354 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	099b      	lsrs	r3, r3, #6
 80051b0:	2200      	movs	r2, #0
 80051b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80051be:	2300      	movs	r3, #0
 80051c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051c6:	4622      	mov	r2, r4
 80051c8:	462b      	mov	r3, r5
 80051ca:	f04f 0000 	mov.w	r0, #0
 80051ce:	f04f 0100 	mov.w	r1, #0
 80051d2:	0159      	lsls	r1, r3, #5
 80051d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051d8:	0150      	lsls	r0, r2, #5
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4621      	mov	r1, r4
 80051e0:	1a51      	subs	r1, r2, r1
 80051e2:	6139      	str	r1, [r7, #16]
 80051e4:	4629      	mov	r1, r5
 80051e6:	eb63 0301 	sbc.w	r3, r3, r1
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051f8:	4659      	mov	r1, fp
 80051fa:	018b      	lsls	r3, r1, #6
 80051fc:	4651      	mov	r1, sl
 80051fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005202:	4651      	mov	r1, sl
 8005204:	018a      	lsls	r2, r1, #6
 8005206:	4651      	mov	r1, sl
 8005208:	ebb2 0801 	subs.w	r8, r2, r1
 800520c:	4659      	mov	r1, fp
 800520e:	eb63 0901 	sbc.w	r9, r3, r1
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800521e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005226:	4690      	mov	r8, r2
 8005228:	4699      	mov	r9, r3
 800522a:	4623      	mov	r3, r4
 800522c:	eb18 0303 	adds.w	r3, r8, r3
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	462b      	mov	r3, r5
 8005234:	eb49 0303 	adc.w	r3, r9, r3
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005246:	4629      	mov	r1, r5
 8005248:	024b      	lsls	r3, r1, #9
 800524a:	4621      	mov	r1, r4
 800524c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005250:	4621      	mov	r1, r4
 8005252:	024a      	lsls	r2, r1, #9
 8005254:	4610      	mov	r0, r2
 8005256:	4619      	mov	r1, r3
 8005258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800525a:	2200      	movs	r2, #0
 800525c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800525e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005264:	f7fa ffb8 	bl	80001d8 <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4613      	mov	r3, r2
 800526e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005270:	e058      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005272:	4b38      	ldr	r3, [pc, #224]	@ (8005354 <HAL_RCC_GetSysClockFreq+0x200>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	2200      	movs	r2, #0
 800527a:	4618      	mov	r0, r3
 800527c:	4611      	mov	r1, r2
 800527e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005282:	623b      	str	r3, [r7, #32]
 8005284:	2300      	movs	r3, #0
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24
 8005288:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800528c:	4642      	mov	r2, r8
 800528e:	464b      	mov	r3, r9
 8005290:	f04f 0000 	mov.w	r0, #0
 8005294:	f04f 0100 	mov.w	r1, #0
 8005298:	0159      	lsls	r1, r3, #5
 800529a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800529e:	0150      	lsls	r0, r2, #5
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4641      	mov	r1, r8
 80052a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80052aa:	4649      	mov	r1, r9
 80052ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052c4:	ebb2 040a 	subs.w	r4, r2, sl
 80052c8:	eb63 050b 	sbc.w	r5, r3, fp
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	00eb      	lsls	r3, r5, #3
 80052d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052da:	00e2      	lsls	r2, r4, #3
 80052dc:	4614      	mov	r4, r2
 80052de:	461d      	mov	r5, r3
 80052e0:	4643      	mov	r3, r8
 80052e2:	18e3      	adds	r3, r4, r3
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	464b      	mov	r3, r9
 80052e8:	eb45 0303 	adc.w	r3, r5, r3
 80052ec:	607b      	str	r3, [r7, #4]
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052fa:	4629      	mov	r1, r5
 80052fc:	028b      	lsls	r3, r1, #10
 80052fe:	4621      	mov	r1, r4
 8005300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005304:	4621      	mov	r1, r4
 8005306:	028a      	lsls	r2, r1, #10
 8005308:	4610      	mov	r0, r2
 800530a:	4619      	mov	r1, r3
 800530c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800530e:	2200      	movs	r2, #0
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	61fa      	str	r2, [r7, #28]
 8005314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005318:	f7fa ff5e 	bl	80001d8 <__aeabi_uldivmod>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4613      	mov	r3, r2
 8005322:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <HAL_RCC_GetSysClockFreq+0x200>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	3301      	adds	r3, #1
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005334:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
 800533c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800533e:	e002      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005340:	4b05      	ldr	r3, [pc, #20]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x204>)
 8005342:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005348:	4618      	mov	r0, r3
 800534a:	3750      	adds	r7, #80	@ 0x50
 800534c:	46bd      	mov	sp, r7
 800534e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005352:	bf00      	nop
 8005354:	40023800 	.word	0x40023800
 8005358:	00f42400 	.word	0x00f42400
 800535c:	007a1200 	.word	0x007a1200

08005360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005364:	4b03      	ldr	r3, [pc, #12]	@ (8005374 <HAL_RCC_GetHCLKFreq+0x14>)
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	2000000c 	.word	0x2000000c

08005378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800537c:	f7ff fff0 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	4b05      	ldr	r3, [pc, #20]	@ (8005398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	0a9b      	lsrs	r3, r3, #10
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	4903      	ldr	r1, [pc, #12]	@ (800539c <HAL_RCC_GetPCLK1Freq+0x24>)
 800538e:	5ccb      	ldrb	r3, [r1, r3]
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40023800 	.word	0x40023800
 800539c:	0800e324 	.word	0x0800e324

080053a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053a4:	f7ff ffdc 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 80053a8:	4602      	mov	r2, r0
 80053aa:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	0b5b      	lsrs	r3, r3, #13
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4903      	ldr	r1, [pc, #12]	@ (80053c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40023800 	.word	0x40023800
 80053c4:	0800e324 	.word	0x0800e324

080053c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e022      	b.n	8005420 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d105      	bne.n	80053f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7fe f889 	bl	8003504 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2203      	movs	r2, #3
 80053f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f814 	bl	8005428 <HAL_SD_InitCard>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e00a      	b.n	8005420 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005428:	b5b0      	push	{r4, r5, r7, lr}
 800542a:	b08e      	sub	sp, #56	@ 0x38
 800542c:	af04      	add	r7, sp, #16
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005430:	2300      	movs	r3, #0
 8005432:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005438:	2300      	movs	r3, #0
 800543a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005444:	2376      	movs	r3, #118	@ 0x76
 8005446:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681d      	ldr	r5, [r3, #0]
 800544c:	466c      	mov	r4, sp
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005460:	4628      	mov	r0, r5
 8005462:	f004 f86f 	bl	8009544 <SDIO_Init>
 8005466:	4603      	mov	r3, r0
 8005468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800546c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e04f      	b.n	8005518 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005478:	4b29      	ldr	r3, [pc, #164]	@ (8005520 <HAL_SD_InitCard+0xf8>)
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f004 f8a7 	bl	80095d6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005488:	4b25      	ldr	r3, [pc, #148]	@ (8005520 <HAL_SD_InitCard+0xf8>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800548e:	2002      	movs	r0, #2
 8005490:	f7fe fb9a 	bl	8003bc8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fe79 	bl	800618c <SD_PowerON>
 800549a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00b      	beq.n	80054ba <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e02e      	b.n	8005518 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fd98 	bl	8005ff0 <SD_InitCard>
 80054c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00b      	beq.n	80054e0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e01b      	b.n	8005518 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80054e8:	4618      	mov	r0, r3
 80054ea:	f004 f906 	bl	80096fa <SDMMC_CmdBlockLength>
 80054ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00f      	beq.n	8005516 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005524 <HAL_SD_InitCard+0xfc>)
 80054fc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3728      	adds	r7, #40	@ 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bdb0      	pop	{r4, r5, r7, pc}
 8005520:	422580a0 	.word	0x422580a0
 8005524:	004005ff 	.word	0x004005ff

08005528 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b092      	sub	sp, #72	@ 0x48
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005536:	f7fe fb3b 	bl	8003bb0 <HAL_GetTick>
 800553a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d107      	bne.n	800555a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e1c5      	b.n	80058e6 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b01      	cmp	r3, #1
 8005564:	f040 81b8 	bne.w	80058d8 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800556e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	441a      	add	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005578:	429a      	cmp	r2, r3
 800557a:	d907      	bls.n	800558c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e1ac      	b.n	80058e6 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2203      	movs	r2, #3
 8005590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d002      	beq.n	80055aa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80055a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a6:	025b      	lsls	r3, r3, #9
 80055a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80055aa:	f04f 33ff 	mov.w	r3, #4294967295
 80055ae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	025b      	lsls	r3, r3, #9
 80055b4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80055b6:	2390      	movs	r3, #144	@ 0x90
 80055b8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80055ba:	2302      	movs	r3, #2
 80055bc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80055be:	2300      	movs	r3, #0
 80055c0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f107 0214 	add.w	r2, r7, #20
 80055ce:	4611      	mov	r1, r2
 80055d0:	4618      	mov	r0, r3
 80055d2:	f004 f866 	bl	80096a2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d90a      	bls.n	80055f2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2202      	movs	r2, #2
 80055e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80055e8:	4618      	mov	r0, r3
 80055ea:	f004 f8ca 	bl	8009782 <SDMMC_CmdReadMultiBlock>
 80055ee:	6478      	str	r0, [r7, #68]	@ 0x44
 80055f0:	e009      	b.n	8005606 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80055fe:	4618      	mov	r0, r3
 8005600:	f004 f89d 	bl	800973e <SDMMC_CmdReadSingleBlock>
 8005604:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005608:	2b00      	cmp	r3, #0
 800560a:	d012      	beq.n	8005632 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a7e      	ldr	r2, [pc, #504]	@ (800580c <HAL_SD_ReadBlocks+0x2e4>)
 8005612:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561a:	431a      	orrs	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e159      	b.n	80058e6 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005636:	e061      	b.n	80056fc <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d03c      	beq.n	80056c0 <HAL_SD_ReadBlocks+0x198>
 8005646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d039      	beq.n	80056c0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800564c:	2300      	movs	r3, #0
 800564e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005650:	e033      	b.n	80056ba <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f003 ff9f 	bl	800959a <SDIO_ReadFIFO>
 800565c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800565e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005660:	b2da      	uxtb	r2, r3
 8005662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005664:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005668:	3301      	adds	r3, #1
 800566a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800566c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800566e:	3b01      	subs	r3, #1
 8005670:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005674:	0a1b      	lsrs	r3, r3, #8
 8005676:	b2da      	uxtb	r2, r3
 8005678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800567c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567e:	3301      	adds	r3, #1
 8005680:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005684:	3b01      	subs	r3, #1
 8005686:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568a:	0c1b      	lsrs	r3, r3, #16
 800568c:	b2da      	uxtb	r2, r3
 800568e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005690:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005694:	3301      	adds	r3, #1
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569a:	3b01      	subs	r3, #1
 800569c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800569e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a0:	0e1b      	lsrs	r3, r3, #24
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80056a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056aa:	3301      	adds	r3, #1
 80056ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80056ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b0:	3b01      	subs	r3, #1
 80056b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80056b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b6:	3301      	adds	r3, #1
 80056b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056bc:	2b07      	cmp	r3, #7
 80056be:	d9c8      	bls.n	8005652 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80056c0:	f7fe fa76 	bl	8003bb0 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d902      	bls.n	80056d6 <HAL_SD_ReadBlocks+0x1ae>
 80056d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d112      	bne.n	80056fc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a4c      	ldr	r2, [pc, #304]	@ (800580c <HAL_SD_ReadBlocks+0x2e4>)
 80056dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e0f4      	b.n	80058e6 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005702:	f240 332a 	movw	r3, #810	@ 0x32a
 8005706:	4013      	ands	r3, r2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d095      	beq.n	8005638 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d022      	beq.n	8005760 <HAL_SD_ReadBlocks+0x238>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d91f      	bls.n	8005760 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005724:	2b03      	cmp	r3, #3
 8005726:	d01b      	beq.n	8005760 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f004 f88f 	bl	8009850 <SDMMC_CmdStopTransfer>
 8005732:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005736:	2b00      	cmp	r3, #0
 8005738:	d012      	beq.n	8005760 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a33      	ldr	r2, [pc, #204]	@ (800580c <HAL_SD_ReadBlocks+0x2e4>)
 8005740:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005748:	431a      	orrs	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0c2      	b.n	80058e6 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_SD_ReadBlocks+0x254>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005778:	2b00      	cmp	r3, #0
 800577a:	d012      	beq.n	80057a2 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a22      	ldr	r2, [pc, #136]	@ (800580c <HAL_SD_ReadBlocks+0x2e4>)
 8005782:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	f043 0208 	orr.w	r2, r3, #8
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e0a1      	b.n	80058e6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d012      	beq.n	80057d6 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a15      	ldr	r2, [pc, #84]	@ (800580c <HAL_SD_ReadBlocks+0x2e4>)
 80057b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057bc:	f043 0202 	orr.w	r2, r3, #2
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e087      	b.n	80058e6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d064      	beq.n	80058ae <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a08      	ldr	r2, [pc, #32]	@ (800580c <HAL_SD_ReadBlocks+0x2e4>)
 80057ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	f043 0220 	orr.w	r2, r3, #32
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e06d      	b.n	80058e6 <HAL_SD_ReadBlocks+0x3be>
 800580a:	bf00      	nop
 800580c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f003 fec0 	bl	800959a <SDIO_ReadFIFO>
 800581a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800581c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581e:	b2da      	uxtb	r2, r3
 8005820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005822:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005826:	3301      	adds	r3, #1
 8005828:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800582a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582c:	3b01      	subs	r3, #1
 800582e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005832:	0a1b      	lsrs	r3, r3, #8
 8005834:	b2da      	uxtb	r2, r3
 8005836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005838:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800583a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583c:	3301      	adds	r3, #1
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005842:	3b01      	subs	r3, #1
 8005844:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	b2da      	uxtb	r2, r3
 800584c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005852:	3301      	adds	r3, #1
 8005854:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005858:	3b01      	subs	r3, #1
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800585c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585e:	0e1b      	lsrs	r3, r3, #24
 8005860:	b2da      	uxtb	r2, r3
 8005862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005864:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005868:	3301      	adds	r3, #1
 800586a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800586c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800586e:	3b01      	subs	r3, #1
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005872:	f7fe f99d 	bl	8003bb0 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800587e:	429a      	cmp	r2, r3
 8005880:	d902      	bls.n	8005888 <HAL_SD_ReadBlocks+0x360>
 8005882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005884:	2b00      	cmp	r3, #0
 8005886:	d112      	bne.n	80058ae <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a18      	ldr	r2, [pc, #96]	@ (80058f0 <HAL_SD_ReadBlocks+0x3c8>)
 800588e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e01b      	b.n	80058e6 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_SD_ReadBlocks+0x39a>
 80058bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1a6      	bne.n	8005810 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80058ca:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e006      	b.n	80058e6 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3748      	adds	r7, #72	@ 0x48
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	004005ff 	.word	0x004005ff

080058f4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b092      	sub	sp, #72	@ 0x48
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005902:	f7fe f955 	bl	8003bb0 <HAL_GetTick>
 8005906:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d107      	bne.n	8005926 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e16d      	b.n	8005c02 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	f040 8160 	bne.w	8005bf4 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800593a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	441a      	add	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005944:	429a      	cmp	r2, r3
 8005946:	d907      	bls.n	8005958 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e154      	b.n	8005c02 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2203      	movs	r2, #3
 800595c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2200      	movs	r2, #0
 8005966:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596c:	2b01      	cmp	r3, #1
 800596e:	d002      	beq.n	8005976 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005972:	025b      	lsls	r3, r3, #9
 8005974:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005976:	f04f 33ff 	mov.w	r3, #4294967295
 800597a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	025b      	lsls	r3, r3, #9
 8005980:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005982:	2390      	movs	r3, #144	@ 0x90
 8005984:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005986:	2300      	movs	r3, #0
 8005988:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800598a:	2300      	movs	r3, #0
 800598c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800598e:	2301      	movs	r3, #1
 8005990:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f107 0218 	add.w	r2, r7, #24
 800599a:	4611      	mov	r1, r2
 800599c:	4618      	mov	r0, r3
 800599e:	f003 fe80 	bl	80096a2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d90a      	bls.n	80059be <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059b4:	4618      	mov	r0, r3
 80059b6:	f003 ff28 	bl	800980a <SDMMC_CmdWriteMultiBlock>
 80059ba:	6478      	str	r0, [r7, #68]	@ 0x44
 80059bc:	e009      	b.n	80059d2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2210      	movs	r2, #16
 80059c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059ca:	4618      	mov	r0, r3
 80059cc:	f003 fefb 	bl	80097c6 <SDMMC_CmdWriteSingleBlock>
 80059d0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80059d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d012      	beq.n	80059fe <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a8b      	ldr	r2, [pc, #556]	@ (8005c0c <HAL_SD_WriteBlocks+0x318>)
 80059de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059e6:	431a      	orrs	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e101      	b.n	8005c02 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005a02:	e065      	b.n	8005ad0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d040      	beq.n	8005a94 <HAL_SD_WriteBlocks+0x1a0>
 8005a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d03d      	beq.n	8005a94 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a1c:	e037      	b.n	8005a8e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	3301      	adds	r3, #1
 8005a28:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	021a      	lsls	r2, r3, #8
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3e:	3301      	adds	r3, #1
 8005a40:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a44:	3b01      	subs	r3, #1
 8005a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	041a      	lsls	r2, r3, #16
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a56:	3301      	adds	r3, #1
 8005a58:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	061a      	lsls	r2, r3, #24
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6e:	3301      	adds	r3, #1
 8005a70:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a74:	3b01      	subs	r3, #1
 8005a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f107 0214 	add.w	r2, r7, #20
 8005a80:	4611      	mov	r1, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f003 fd96 	bl	80095b4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a90:	2b07      	cmp	r3, #7
 8005a92:	d9c4      	bls.n	8005a1e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005a94:	f7fe f88c 	bl	8003bb0 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d902      	bls.n	8005aaa <HAL_SD_WriteBlocks+0x1b6>
 8005aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d112      	bne.n	8005ad0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a57      	ldr	r2, [pc, #348]	@ (8005c0c <HAL_SD_WriteBlocks+0x318>)
 8005ab0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e098      	b.n	8005c02 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ad6:	f240 331a 	movw	r3, #794	@ 0x31a
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d091      	beq.n	8005a04 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d022      	beq.n	8005b34 <HAL_SD_WriteBlocks+0x240>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d91f      	bls.n	8005b34 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d01b      	beq.n	8005b34 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f003 fea5 	bl	8009850 <SDMMC_CmdStopTransfer>
 8005b06:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d012      	beq.n	8005b34 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a3e      	ldr	r2, [pc, #248]	@ (8005c0c <HAL_SD_WriteBlocks+0x318>)
 8005b14:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e066      	b.n	8005c02 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_SD_WriteBlocks+0x25c>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d012      	beq.n	8005b76 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2d      	ldr	r2, [pc, #180]	@ (8005c0c <HAL_SD_WriteBlocks+0x318>)
 8005b56:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5c:	f043 0208 	orr.w	r2, r3, #8
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e045      	b.n	8005c02 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d012      	beq.n	8005baa <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a20      	ldr	r2, [pc, #128]	@ (8005c0c <HAL_SD_WriteBlocks+0x318>)
 8005b8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	f043 0202 	orr.w	r2, r3, #2
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e02b      	b.n	8005c02 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d012      	beq.n	8005bde <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a13      	ldr	r2, [pc, #76]	@ (8005c0c <HAL_SD_WriteBlocks+0x318>)
 8005bbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc4:	f043 0210 	orr.w	r2, r3, #16
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e011      	b.n	8005c02 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005be6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e006      	b.n	8005c02 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
  }
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3748      	adds	r7, #72	@ 0x48
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	004005ff 	.word	0x004005ff

08005c10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c1e:	0f9b      	lsrs	r3, r3, #30
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c2a:	0e9b      	lsrs	r3, r3, #26
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c3c:	0e1b      	lsrs	r3, r3, #24
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c70:	0d1b      	lsrs	r3, r3, #20
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c7c:	0c1b      	lsrs	r3, r3, #16
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c8e:	0bdb      	lsrs	r3, r3, #15
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ca0:	0b9b      	lsrs	r3, r3, #14
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cb2:	0b5b      	lsrs	r3, r3, #13
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cc4:	0b1b      	lsrs	r3, r3, #12
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d163      	bne.n	8005da8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ce4:	009a      	lsls	r2, r3, #2
 8005ce6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005cea:	4013      	ands	r3, r2
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005cf0:	0f92      	lsrs	r2, r2, #30
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cfc:	0edb      	lsrs	r3, r3, #27
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d0e:	0e1b      	lsrs	r3, r3, #24
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d20:	0d5b      	lsrs	r3, r3, #21
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d32:	0c9b      	lsrs	r3, r3, #18
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d44:	0bdb      	lsrs	r3, r3, #15
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	7e1b      	ldrb	r3, [r3, #24]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	3302      	adds	r3, #2
 8005d68:	2201      	movs	r2, #1
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005d72:	fb03 f202 	mul.w	r2, r3, r2
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	7a1b      	ldrb	r3, [r3, #8]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	2201      	movs	r2, #1
 8005d86:	409a      	lsls	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005d94:	0a52      	lsrs	r2, r2, #9
 8005d96:	fb03 f202 	mul.w	r2, r3, r2
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005da4:	661a      	str	r2, [r3, #96]	@ 0x60
 8005da6:	e031      	b.n	8005e0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d11d      	bne.n	8005dec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005db4:	041b      	lsls	r3, r3, #16
 8005db6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	029a      	lsls	r2, r3, #10
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005de0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	661a      	str	r2, [r3, #96]	@ 0x60
 8005dea:	e00f      	b.n	8005e0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a58      	ldr	r2, [pc, #352]	@ (8005f54 <HAL_SD_GetCardCSD+0x344>)
 8005df2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e09d      	b.n	8005f48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e10:	0b9b      	lsrs	r3, r3, #14
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e22:	09db      	lsrs	r3, r3, #7
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e44:	0fdb      	lsrs	r3, r3, #31
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e50:	0f5b      	lsrs	r3, r3, #29
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e62:	0e9b      	lsrs	r3, r3, #26
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e74:	0d9b      	lsrs	r3, r3, #22
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e86:	0d5b      	lsrs	r3, r3, #21
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea2:	0c1b      	lsrs	r3, r3, #16
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb6:	0bdb      	lsrs	r3, r3, #15
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eca:	0b9b      	lsrs	r3, r3, #14
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ede:	0b5b      	lsrs	r3, r3, #13
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef2:	0b1b      	lsrs	r3, r3, #12
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f06:	0a9b      	lsrs	r3, r3, #10
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	004005ff 	.word	0x004005ff

08005f58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005fbc:	f107 030c 	add.w	r3, r7, #12
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f970 	bl	80062a8 <SD_SendStatus>
 8005fc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	0a5b      	lsrs	r3, r3, #9
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005fe6:	693b      	ldr	r3, [r7, #16]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005ff0:	b5b0      	push	{r4, r5, r7, lr}
 8005ff2:	b094      	sub	sp, #80	@ 0x50
 8005ff4:	af04      	add	r7, sp, #16
 8005ff6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f003 faf6 	bl	80095f2 <SDIO_GetPowerState>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d102      	bne.n	8006012 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800600c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006010:	e0b8      	b.n	8006184 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006016:	2b03      	cmp	r3, #3
 8006018:	d02f      	beq.n	800607a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f003 fcdd 	bl	80099de <SDMMC_CmdSendCID>
 8006024:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <SD_InitCard+0x40>
    {
      return errorstate;
 800602c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800602e:	e0a9      	b.n	8006184 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f003 fb20 	bl	800967c <SDIO_GetResponse>
 800603c:	4602      	mov	r2, r0
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2104      	movs	r1, #4
 8006048:	4618      	mov	r0, r3
 800604a:	f003 fb17 	bl	800967c <SDIO_GetResponse>
 800604e:	4602      	mov	r2, r0
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2108      	movs	r1, #8
 800605a:	4618      	mov	r0, r3
 800605c:	f003 fb0e 	bl	800967c <SDIO_GetResponse>
 8006060:	4602      	mov	r2, r0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	210c      	movs	r1, #12
 800606c:	4618      	mov	r0, r3
 800606e:	f003 fb05 	bl	800967c <SDIO_GetResponse>
 8006072:	4602      	mov	r2, r0
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607e:	2b03      	cmp	r3, #3
 8006080:	d00d      	beq.n	800609e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f107 020e 	add.w	r2, r7, #14
 800608a:	4611      	mov	r1, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f003 fce3 	bl	8009a58 <SDMMC_CmdSetRelAdd>
 8006092:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <SD_InitCard+0xae>
    {
      return errorstate;
 800609a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800609c:	e072      	b.n	8006184 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d036      	beq.n	8006114 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80060a6:	89fb      	ldrh	r3, [r7, #14]
 80060a8:	461a      	mov	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b6:	041b      	lsls	r3, r3, #16
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f003 fcad 	bl	8009a1a <SDMMC_CmdSendCSD>
 80060c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <SD_InitCard+0xdc>
    {
      return errorstate;
 80060c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ca:	e05b      	b.n	8006184 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2100      	movs	r1, #0
 80060d2:	4618      	mov	r0, r3
 80060d4:	f003 fad2 	bl	800967c <SDIO_GetResponse>
 80060d8:	4602      	mov	r2, r0
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2104      	movs	r1, #4
 80060e4:	4618      	mov	r0, r3
 80060e6:	f003 fac9 	bl	800967c <SDIO_GetResponse>
 80060ea:	4602      	mov	r2, r0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2108      	movs	r1, #8
 80060f6:	4618      	mov	r0, r3
 80060f8:	f003 fac0 	bl	800967c <SDIO_GetResponse>
 80060fc:	4602      	mov	r2, r0
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	210c      	movs	r1, #12
 8006108:	4618      	mov	r0, r3
 800610a:	f003 fab7 	bl	800967c <SDIO_GetResponse>
 800610e:	4602      	mov	r2, r0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2104      	movs	r1, #4
 800611a:	4618      	mov	r0, r3
 800611c:	f003 faae 	bl	800967c <SDIO_GetResponse>
 8006120:	4603      	mov	r3, r0
 8006122:	0d1a      	lsrs	r2, r3, #20
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006128:	f107 0310 	add.w	r3, r7, #16
 800612c:	4619      	mov	r1, r3
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff fd6e 	bl	8005c10 <HAL_SD_GetCardCSD>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800613a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800613e:	e021      	b.n	8006184 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6819      	ldr	r1, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	2200      	movs	r2, #0
 800614c:	461c      	mov	r4, r3
 800614e:	4615      	mov	r5, r2
 8006150:	4622      	mov	r2, r4
 8006152:	462b      	mov	r3, r5
 8006154:	4608      	mov	r0, r1
 8006156:	f003 fb9d 	bl	8009894 <SDMMC_CmdSelDesel>
 800615a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800615c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <SD_InitCard+0x176>
  {
    return errorstate;
 8006162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006164:	e00e      	b.n	8006184 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681d      	ldr	r5, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	466c      	mov	r4, sp
 800616e:	f103 0210 	add.w	r2, r3, #16
 8006172:	ca07      	ldmia	r2, {r0, r1, r2}
 8006174:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006178:	3304      	adds	r3, #4
 800617a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800617c:	4628      	mov	r0, r5
 800617e:	f003 f9e1 	bl	8009544 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3740      	adds	r7, #64	@ 0x40
 8006188:	46bd      	mov	sp, r7
 800618a:	bdb0      	pop	{r4, r5, r7, pc}

0800618c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	2300      	movs	r3, #0
 800619e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f003 fb98 	bl	80098da <SDMMC_CmdGoIdleState>
 80061aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	e072      	b.n	800629c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f003 fbab 	bl	8009916 <SDMMC_CmdOperCond>
 80061c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f003 fb81 	bl	80098da <SDMMC_CmdGoIdleState>
 80061d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	e05b      	b.n	800629c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d137      	bne.n	8006262 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f003 fbab 	bl	8009954 <SDMMC_CmdAppCommand>
 80061fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d02d      	beq.n	8006262 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006206:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800620a:	e047      	b.n	800629c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2100      	movs	r1, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f003 fb9e 	bl	8009954 <SDMMC_CmdAppCommand>
 8006218:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <SD_PowerON+0x98>
    {
      return errorstate;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	e03b      	b.n	800629c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	491e      	ldr	r1, [pc, #120]	@ (80062a4 <SD_PowerON+0x118>)
 800622a:	4618      	mov	r0, r3
 800622c:	f003 fbb4 	bl	8009998 <SDMMC_CmdAppOperCommand>
 8006230:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006238:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800623c:	e02e      	b.n	800629c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f003 fa19 	bl	800967c <SDIO_GetResponse>
 800624a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	0fdb      	lsrs	r3, r3, #31
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <SD_PowerON+0xcc>
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <SD_PowerON+0xce>
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]

    count++;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	3301      	adds	r3, #1
 8006260:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006268:	4293      	cmp	r3, r2
 800626a:	d802      	bhi.n	8006272 <SD_PowerON+0xe6>
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0cc      	beq.n	800620c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006278:	4293      	cmp	r3, r2
 800627a:	d902      	bls.n	8006282 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800627c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006280:	e00c      	b.n	800629c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	645a      	str	r2, [r3, #68]	@ 0x44
 8006292:	e002      	b.n	800629a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	c1100000 	.word	0xc1100000

080062a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80062b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062bc:	e018      	b.n	80062f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062c6:	041b      	lsls	r3, r3, #16
 80062c8:	4619      	mov	r1, r3
 80062ca:	4610      	mov	r0, r2
 80062cc:	f003 fbe5 	bl	8009a9a <SDMMC_CmdSendStatus>
 80062d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	e009      	b.n	80062f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f003 f9ca 	bl	800967c <SDIO_GetResponse>
 80062e8:	4602      	mov	r2, r0
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e07b      	b.n	8006402 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630e:	2b00      	cmp	r3, #0
 8006310:	d108      	bne.n	8006324 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800631a:	d009      	beq.n	8006330 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	61da      	str	r2, [r3, #28]
 8006322:	e005      	b.n	8006330 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fd f954 	bl	80035f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006366:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b4:	ea42 0103 	orr.w	r1, r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	0c1b      	lsrs	r3, r3, #16
 80063ce:	f003 0104 	and.w	r1, r3, #4
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d6:	f003 0210 	and.w	r2, r3, #16
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b088      	sub	sp, #32
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800641a:	f7fd fbc9 	bl	8003bb0 <HAL_GetTick>
 800641e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b01      	cmp	r3, #1
 800642e:	d001      	beq.n	8006434 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006430:	2302      	movs	r3, #2
 8006432:	e12a      	b.n	800668a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <HAL_SPI_Transmit+0x36>
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e122      	b.n	800668a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_SPI_Transmit+0x48>
 800644e:	2302      	movs	r3, #2
 8006450:	e11b      	b.n	800668a <HAL_SPI_Transmit+0x280>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2203      	movs	r2, #3
 800645e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	88fa      	ldrh	r2, [r7, #6]
 8006472:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a0:	d10f      	bne.n	80064c2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064cc:	2b40      	cmp	r3, #64	@ 0x40
 80064ce:	d007      	beq.n	80064e0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064e8:	d152      	bne.n	8006590 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_SPI_Transmit+0xee>
 80064f2:	8b7b      	ldrh	r3, [r7, #26]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d145      	bne.n	8006584 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fc:	881a      	ldrh	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006508:	1c9a      	adds	r2, r3, #2
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800651c:	e032      	b.n	8006584 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b02      	cmp	r3, #2
 800652a:	d112      	bne.n	8006552 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006530:	881a      	ldrh	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653c:	1c9a      	adds	r2, r3, #2
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006546:	b29b      	uxth	r3, r3
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006550:	e018      	b.n	8006584 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006552:	f7fd fb2d 	bl	8003bb0 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d803      	bhi.n	800656a <HAL_SPI_Transmit+0x160>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006568:	d102      	bne.n	8006570 <HAL_SPI_Transmit+0x166>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e082      	b.n	800668a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1c7      	bne.n	800651e <HAL_SPI_Transmit+0x114>
 800658e:	e053      	b.n	8006638 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <HAL_SPI_Transmit+0x194>
 8006598:	8b7b      	ldrh	r3, [r7, #26]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d147      	bne.n	800662e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	330c      	adds	r3, #12
 80065a8:	7812      	ldrb	r2, [r2, #0]
 80065aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065c4:	e033      	b.n	800662e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d113      	bne.n	80065fc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	7812      	ldrb	r2, [r2, #0]
 80065e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80065fa:	e018      	b.n	800662e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065fc:	f7fd fad8 	bl	8003bb0 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d803      	bhi.n	8006614 <HAL_SPI_Transmit+0x20a>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d102      	bne.n	800661a <HAL_SPI_Transmit+0x210>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e02d      	b.n	800668a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1c6      	bne.n	80065c6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006638:	69fa      	ldr	r2, [r7, #28]
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f001 faef 	bl	8007c20 <SPI_EndRxTxTransaction>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006688:	2300      	movs	r3, #0
  }
}
 800668a:	4618      	mov	r0, r3
 800668c:	3720      	adds	r7, #32
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b088      	sub	sp, #32
 8006696:	af02      	add	r7, sp, #8
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	4613      	mov	r3, r2
 80066a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d001      	beq.n	80066b2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80066ae:	2302      	movs	r3, #2
 80066b0:	e104      	b.n	80068bc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066ba:	d112      	bne.n	80066e2 <HAL_SPI_Receive+0x50>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10e      	bne.n	80066e2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2204      	movs	r2, #4
 80066c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	4613      	mov	r3, r2
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f8f3 	bl	80068c4 <HAL_SPI_TransmitReceive>
 80066de:	4603      	mov	r3, r0
 80066e0:	e0ec      	b.n	80068bc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066e2:	f7fd fa65 	bl	8003bb0 <HAL_GetTick>
 80066e6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <HAL_SPI_Receive+0x62>
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0e1      	b.n	80068bc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <HAL_SPI_Receive+0x74>
 8006702:	2302      	movs	r3, #2
 8006704:	e0da      	b.n	80068bc <HAL_SPI_Receive+0x22a>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2204      	movs	r2, #4
 8006712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	88fa      	ldrh	r2, [r7, #6]
 8006726:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	88fa      	ldrh	r2, [r7, #6]
 800672c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006754:	d10f      	bne.n	8006776 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006764:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006774:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006780:	2b40      	cmp	r3, #64	@ 0x40
 8006782:	d007      	beq.n	8006794 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006792:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d170      	bne.n	800687e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800679c:	e035      	b.n	800680a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d115      	bne.n	80067d8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f103 020c 	add.w	r2, r3, #12
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	7812      	ldrb	r2, [r2, #0]
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80067d6:	e018      	b.n	800680a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d8:	f7fd f9ea 	bl	8003bb0 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d803      	bhi.n	80067f0 <HAL_SPI_Receive+0x15e>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ee:	d102      	bne.n	80067f6 <HAL_SPI_Receive+0x164>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d109      	bne.n	800680a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e058      	b.n	80068bc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1c4      	bne.n	800679e <HAL_SPI_Receive+0x10c>
 8006814:	e038      	b.n	8006888 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b01      	cmp	r3, #1
 8006822:	d113      	bne.n	800684c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682e:	b292      	uxth	r2, r2
 8006830:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006836:	1c9a      	adds	r2, r3, #2
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800684a:	e018      	b.n	800687e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800684c:	f7fd f9b0 	bl	8003bb0 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d803      	bhi.n	8006864 <HAL_SPI_Receive+0x1d2>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d102      	bne.n	800686a <HAL_SPI_Receive+0x1d8>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e01e      	b.n	80068bc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1c6      	bne.n	8006816 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f001 f961 	bl	8007b54 <SPI_EndRxTransaction>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80068ba:	2300      	movs	r3, #0
  }
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08a      	sub	sp, #40	@ 0x28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068d2:	2301      	movs	r3, #1
 80068d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068d6:	f7fd f96b 	bl	8003bb0 <HAL_GetTick>
 80068da:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068e2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80068ea:	887b      	ldrh	r3, [r7, #2]
 80068ec:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068ee:	7ffb      	ldrb	r3, [r7, #31]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d00c      	beq.n	800690e <HAL_SPI_TransmitReceive+0x4a>
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068fa:	d106      	bne.n	800690a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <HAL_SPI_TransmitReceive+0x46>
 8006904:	7ffb      	ldrb	r3, [r7, #31]
 8006906:	2b04      	cmp	r3, #4
 8006908:	d001      	beq.n	800690e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800690a:	2302      	movs	r3, #2
 800690c:	e17f      	b.n	8006c0e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x5c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x5c>
 800691a:	887b      	ldrh	r3, [r7, #2]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e174      	b.n	8006c0e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_SPI_TransmitReceive+0x6e>
 800692e:	2302      	movs	r3, #2
 8006930:	e16d      	b.n	8006c0e <HAL_SPI_TransmitReceive+0x34a>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b04      	cmp	r3, #4
 8006944:	d003      	beq.n	800694e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2205      	movs	r2, #5
 800694a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	887a      	ldrh	r2, [r7, #2]
 800695e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	887a      	ldrh	r2, [r7, #2]
 8006964:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	887a      	ldrh	r2, [r7, #2]
 8006970:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	887a      	ldrh	r2, [r7, #2]
 8006976:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698e:	2b40      	cmp	r3, #64	@ 0x40
 8006990:	d007      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069aa:	d17e      	bne.n	8006aaa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_SPI_TransmitReceive+0xf6>
 80069b4:	8afb      	ldrh	r3, [r7, #22]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d16c      	bne.n	8006a94 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069be:	881a      	ldrh	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ca:	1c9a      	adds	r2, r3, #2
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069de:	e059      	b.n	8006a94 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d11b      	bne.n	8006a26 <HAL_SPI_TransmitReceive+0x162>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d016      	beq.n	8006a26 <HAL_SPI_TransmitReceive+0x162>
 80069f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d113      	bne.n	8006a26 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a02:	881a      	ldrh	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0e:	1c9a      	adds	r2, r3, #2
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d119      	bne.n	8006a68 <HAL_SPI_TransmitReceive+0x1a4>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d014      	beq.n	8006a68 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a48:	b292      	uxth	r2, r2
 8006a4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a50:	1c9a      	adds	r2, r3, #2
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a64:	2301      	movs	r3, #1
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a68:	f7fd f8a2 	bl	8003bb0 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d80d      	bhi.n	8006a94 <HAL_SPI_TransmitReceive+0x1d0>
 8006a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7e:	d009      	beq.n	8006a94 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e0bc      	b.n	8006c0e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1a0      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x11c>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d19b      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x11c>
 8006aa8:	e082      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_SPI_TransmitReceive+0x1f4>
 8006ab2:	8afb      	ldrh	r3, [r7, #22]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d171      	bne.n	8006b9c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	7812      	ldrb	r2, [r2, #0]
 8006ac4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ade:	e05d      	b.n	8006b9c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d11c      	bne.n	8006b28 <HAL_SPI_TransmitReceive+0x264>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d017      	beq.n	8006b28 <HAL_SPI_TransmitReceive+0x264>
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d114      	bne.n	8006b28 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	7812      	ldrb	r2, [r2, #0]
 8006b0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d119      	bne.n	8006b6a <HAL_SPI_TransmitReceive+0x2a6>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d014      	beq.n	8006b6a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b66:	2301      	movs	r3, #1
 8006b68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b6a:	f7fd f821 	bl	8003bb0 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d803      	bhi.n	8006b82 <HAL_SPI_TransmitReceive+0x2be>
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b80:	d102      	bne.n	8006b88 <HAL_SPI_TransmitReceive+0x2c4>
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d109      	bne.n	8006b9c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e038      	b.n	8006c0e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d19c      	bne.n	8006ae0 <HAL_SPI_TransmitReceive+0x21c>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d197      	bne.n	8006ae0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bb0:	6a3a      	ldr	r2, [r7, #32]
 8006bb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f001 f833 	bl	8007c20 <SPI_EndRxTxTransaction>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e01d      	b.n	8006c0e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bda:	2300      	movs	r3, #0
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	613b      	str	r3, [r7, #16]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3728      	adds	r7, #40	@ 0x28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4613      	mov	r3, r2
 8006c24:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d001      	beq.n	8006c36 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8006c32:	2302      	movs	r3, #2
 8006c34:	e07f      	b.n	8006d36 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d110      	bne.n	8006c60 <HAL_SPI_Receive_IT+0x48>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c46:	d10b      	bne.n	8006c60 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006c50:	88fb      	ldrh	r3, [r7, #6]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f876 	bl	8006d48 <HAL_SPI_TransmitReceive_IT>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	e06a      	b.n	8006d36 <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <HAL_SPI_Receive_IT+0x54>
 8006c66:	88fb      	ldrh	r3, [r7, #6]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e062      	b.n	8006d36 <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_SPI_Receive_IT+0x66>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e05b      	b.n	8006d36 <HAL_SPI_Receive_IT+0x11e>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2204      	movs	r2, #4
 8006c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	88fa      	ldrh	r2, [r7, #6]
 8006c9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	88fa      	ldrh	r2, [r7, #6]
 8006ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d40 <HAL_SPI_Receive_IT+0x128>)
 8006cca:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ccc:	e002      	b.n	8006cd4 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d44 <HAL_SPI_Receive_IT+0x12c>)
 8006cd2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cdc:	d10f      	bne.n	8006cfe <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006cfc:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d08:	2b40      	cmp	r3, #64	@ 0x40
 8006d0a:	d007      	beq.n	8006d1c <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d1a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006d32:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	080079fd 	.word	0x080079fd
 8006d44:	080079b3 	.word	0x080079b3

08006d48 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d5c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d00c      	beq.n	8006d84 <HAL_SPI_TransmitReceive_IT+0x3c>
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d70:	d106      	bne.n	8006d80 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <HAL_SPI_TransmitReceive_IT+0x38>
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d001      	beq.n	8006d84 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 8006d80:	2302      	movs	r3, #2
 8006d82:	e061      	b.n	8006e48 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <HAL_SPI_TransmitReceive_IT+0x4e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <HAL_SPI_TransmitReceive_IT+0x4e>
 8006d90:	887b      	ldrh	r3, [r7, #2]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e056      	b.n	8006e48 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_SPI_TransmitReceive_IT+0x60>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e04f      	b.n	8006e48 <HAL_SPI_TransmitReceive_IT+0x100>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d003      	beq.n	8006dc4 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2205      	movs	r2, #5
 8006dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	887a      	ldrh	r2, [r7, #2]
 8006dd4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	887a      	ldrh	r2, [r7, #2]
 8006dda:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	887a      	ldrh	r2, [r7, #2]
 8006de6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	887a      	ldrh	r2, [r7, #2]
 8006dec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d006      	beq.n	8006e04 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4a16      	ldr	r2, [pc, #88]	@ (8006e54 <HAL_SPI_TransmitReceive_IT+0x10c>)
 8006dfa:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4a16      	ldr	r2, [pc, #88]	@ (8006e58 <HAL_SPI_TransmitReceive_IT+0x110>)
 8006e00:	645a      	str	r2, [r3, #68]	@ 0x44
 8006e02:	e005      	b.n	8006e10 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4a15      	ldr	r2, [pc, #84]	@ (8006e5c <HAL_SPI_TransmitReceive_IT+0x114>)
 8006e08:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4a14      	ldr	r2, [pc, #80]	@ (8006e60 <HAL_SPI_TransmitReceive_IT+0x118>)
 8006e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e1a:	2b40      	cmp	r3, #64	@ 0x40
 8006e1c:	d007      	beq.n	8006e2e <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e2c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8006e44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	371c      	adds	r7, #28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	080078f5 	.word	0x080078f5
 8006e58:	08007955 	.word	0x08007955
 8006e5c:	08007831 	.word	0x08007831
 8006e60:	08007895 	.word	0x08007895

08006e64 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d001      	beq.n	8006e82 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e097      	b.n	8006fb2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <HAL_SPI_Transmit_DMA+0x2a>
 8006e88:	88fb      	ldrh	r3, [r7, #6]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e08f      	b.n	8006fb2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_SPI_Transmit_DMA+0x3c>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e088      	b.n	8006fb2 <HAL_SPI_Transmit_DMA+0x14e>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2203      	movs	r2, #3
 8006eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	88fa      	ldrh	r2, [r7, #6]
 8006ec0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	88fa      	ldrh	r2, [r7, #6]
 8006ec6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eee:	d10f      	bne.n	8006f10 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006efe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f14:	4a29      	ldr	r2, [pc, #164]	@ (8006fbc <HAL_SPI_Transmit_DMA+0x158>)
 8006f16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f1c:	4a28      	ldr	r2, [pc, #160]	@ (8006fc0 <HAL_SPI_Transmit_DMA+0x15c>)
 8006f1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f24:	4a27      	ldr	r2, [pc, #156]	@ (8006fc4 <HAL_SPI_Transmit_DMA+0x160>)
 8006f26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f38:	4619      	mov	r1, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	330c      	adds	r3, #12
 8006f40:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f46:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006f48:	f7fd f89c 	bl	8004084 <HAL_DMA_Start_IT>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00b      	beq.n	8006f6a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f56:	f043 0210 	orr.w	r2, r3, #16
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e023      	b.n	8006fb2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f74:	2b40      	cmp	r3, #64	@ 0x40
 8006f76:	d007      	beq.n	8006f88 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f86:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0220 	orr.w	r2, r2, #32
 8006f9e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0202 	orr.w	r2, r2, #2
 8006fae:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	08007775 	.word	0x08007775
 8006fc0:	08007595 	.word	0x08007595
 8006fc4:	080077c9 	.word	0x080077c9

08006fc8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d001      	beq.n	8006fe6 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e0a9      	b.n	800713a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d110      	bne.n	8007010 <HAL_SPI_Receive_DMA+0x48>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ff6:	d10b      	bne.n	8007010 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2204      	movs	r2, #4
 8006ffc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 f8a2 	bl	8007150 <HAL_SPI_TransmitReceive_DMA>
 800700c:	4603      	mov	r3, r0
 800700e:	e094      	b.n	800713a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <HAL_SPI_Receive_DMA+0x54>
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e08c      	b.n	800713a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_SPI_Receive_DMA+0x66>
 800702a:	2302      	movs	r3, #2
 800702c:	e085      	b.n	800713a <HAL_SPI_Receive_DMA+0x172>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2204      	movs	r2, #4
 800703a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	88fa      	ldrh	r2, [r7, #6]
 800704e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007076:	d10f      	bne.n	8007098 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007086:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007096:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800709c:	4a29      	ldr	r2, [pc, #164]	@ (8007144 <HAL_SPI_Receive_DMA+0x17c>)
 800709e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070a4:	4a28      	ldr	r2, [pc, #160]	@ (8007148 <HAL_SPI_Receive_DMA+0x180>)
 80070a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ac:	4a27      	ldr	r2, [pc, #156]	@ (800714c <HAL_SPI_Receive_DMA+0x184>)
 80070ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b4:	2200      	movs	r2, #0
 80070b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	330c      	adds	r3, #12
 80070c2:	4619      	mov	r1, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80070d0:	f7fc ffd8 	bl	8004084 <HAL_DMA_Start_IT>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00b      	beq.n	80070f2 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070de:	f043 0210 	orr.w	r2, r3, #16
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e023      	b.n	800713a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070fc:	2b40      	cmp	r3, #64	@ 0x40
 80070fe:	d007      	beq.n	8007110 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800710e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0220 	orr.w	r2, r2, #32
 8007126:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0201 	orr.w	r2, r2, #1
 8007136:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	08007791 	.word	0x08007791
 8007148:	0800763d 	.word	0x0800763d
 800714c:	080077c9 	.word	0x080077c9

08007150 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007164:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d00c      	beq.n	800718c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007178:	d106      	bne.n	8007188 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d102      	bne.n	8007188 <HAL_SPI_TransmitReceive_DMA+0x38>
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	2b04      	cmp	r3, #4
 8007186:	d001      	beq.n	800718c <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8007188:	2302      	movs	r3, #2
 800718a:	e0cf      	b.n	800732c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d005      	beq.n	800719e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007198:	887b      	ldrh	r3, [r7, #2]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e0c4      	b.n	800732c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_SPI_TransmitReceive_DMA+0x60>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e0bd      	b.n	800732c <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d003      	beq.n	80071cc <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2205      	movs	r2, #5
 80071c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	887a      	ldrh	r2, [r7, #2]
 80071dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	887a      	ldrh	r2, [r7, #2]
 80071e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	887a      	ldrh	r2, [r7, #2]
 80071ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	887a      	ldrh	r2, [r7, #2]
 80071f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b04      	cmp	r3, #4
 800720c:	d108      	bne.n	8007220 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007212:	4a48      	ldr	r2, [pc, #288]	@ (8007334 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8007214:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800721a:	4a47      	ldr	r2, [pc, #284]	@ (8007338 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800721c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800721e:	e007      	b.n	8007230 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007224:	4a45      	ldr	r2, [pc, #276]	@ (800733c <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8007226:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722c:	4a44      	ldr	r2, [pc, #272]	@ (8007340 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800722e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007234:	4a43      	ldr	r2, [pc, #268]	@ (8007344 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007236:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800723c:	2200      	movs	r2, #0
 800723e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	330c      	adds	r3, #12
 800724a:	4619      	mov	r1, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007250:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007256:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007258:	f7fc ff14 	bl	8004084 <HAL_DMA_Start_IT>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00b      	beq.n	800727a <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007266:	f043 0210 	orr.w	r2, r3, #16
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e058      	b.n	800732c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800728e:	2200      	movs	r2, #0
 8007290:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007296:	2200      	movs	r2, #0
 8007298:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800729e:	2200      	movs	r2, #0
 80072a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072a6:	2200      	movs	r2, #0
 80072a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b2:	4619      	mov	r1, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072c0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80072c2:	f7fc fedf 	bl	8004084 <HAL_DMA_Start_IT>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d0:	f043 0210 	orr.w	r2, r3, #16
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e023      	b.n	800732c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ee:	2b40      	cmp	r3, #64	@ 0x40
 80072f0:	d007      	beq.n	8007302 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007300:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f042 0220 	orr.w	r2, r2, #32
 8007318:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f042 0202 	orr.w	r2, r2, #2
 8007328:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	08007791 	.word	0x08007791
 8007338:	0800763d 	.word	0x0800763d
 800733c:	080077ad 	.word	0x080077ad
 8007340:	080076e5 	.word	0x080076e5
 8007344:	080077c9 	.word	0x080077c9

08007348 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b088      	sub	sp, #32
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10e      	bne.n	8007388 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007370:	2b00      	cmp	r3, #0
 8007372:	d009      	beq.n	8007388 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737a:	2b00      	cmp	r3, #0
 800737c:	d004      	beq.n	8007388 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
    return;
 8007386:	e0ce      	b.n	8007526 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <HAL_SPI_IRQHandler+0x5e>
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007398:	2b00      	cmp	r3, #0
 800739a:	d004      	beq.n	80073a6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
    return;
 80073a4:	e0bf      	b.n	8007526 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10a      	bne.n	80073c6 <HAL_SPI_IRQHandler+0x7e>
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d105      	bne.n	80073c6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 80b0 	beq.w	8007526 <HAL_SPI_IRQHandler+0x1de>
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 80aa 	beq.w	8007526 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d023      	beq.n	8007424 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d011      	beq.n	800740c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ec:	f043 0204 	orr.w	r2, r3, #4
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	e00b      	b.n	8007424 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800740c:	2300      	movs	r3, #0
 800740e:	613b      	str	r3, [r7, #16]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	613b      	str	r3, [r7, #16]
 8007420:	693b      	ldr	r3, [r7, #16]
        return;
 8007422:	e080      	b.n	8007526 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d014      	beq.n	8007458 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007432:	f043 0201 	orr.w	r2, r3, #1
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00c      	beq.n	800747c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007466:	f043 0208 	orr.w	r2, r3, #8
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800746e:	2300      	movs	r3, #0
 8007470:	60bb      	str	r3, [r7, #8]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007480:	2b00      	cmp	r3, #0
 8007482:	d04f      	beq.n	8007524 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007492:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d104      	bne.n	80074b0 <HAL_SPI_IRQHandler+0x168>
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d034      	beq.n	800751a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0203 	bic.w	r2, r2, #3
 80074be:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d011      	beq.n	80074ec <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074cc:	4a17      	ldr	r2, [pc, #92]	@ (800752c <HAL_SPI_IRQHandler+0x1e4>)
 80074ce:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fc fe9d 	bl	8004214 <HAL_DMA_Abort_IT>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d016      	beq.n	8007522 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074f8:	4a0c      	ldr	r2, [pc, #48]	@ (800752c <HAL_SPI_IRQHandler+0x1e4>)
 80074fa:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007500:	4618      	mov	r0, r3
 8007502:	f7fc fe87 	bl	8004214 <HAL_DMA_Abort_IT>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00a      	beq.n	8007522 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007510:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007518:	e003      	b.n	8007522 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f830 	bl	8007580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007520:	e000      	b.n	8007524 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007522:	bf00      	nop
    return;
 8007524:	bf00      	nop
  }
}
 8007526:	3720      	adds	r7, #32
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	08007809 	.word	0x08007809

08007530 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075a2:	f7fc fb05 	bl	8003bb0 <HAL_GetTick>
 80075a6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075b6:	d03b      	beq.n	8007630 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0220 	bic.w	r2, r2, #32
 80075c6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0202 	bic.w	r2, r2, #2
 80075d6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	2164      	movs	r1, #100	@ 0x64
 80075dc:	6978      	ldr	r0, [r7, #20]
 80075de:	f000 fb1f 	bl	8007c20 <SPI_EndRxTxTransaction>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ec:	f043 0220 	orr.w	r2, r3, #32
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10a      	bne.n	8007612 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2200      	movs	r2, #0
 8007616:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007628:	6978      	ldr	r0, [r7, #20]
 800762a:	f7ff ffa9 	bl	8007580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800762e:	e002      	b.n	8007636 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007630:	6978      	ldr	r0, [r7, #20]
 8007632:	f7fa fb35 	bl	8001ca0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007648:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800764a:	f7fc fab1 	bl	8003bb0 <HAL_GetTick>
 800764e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800765e:	d03b      	beq.n	80076d8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0220 	bic.w	r2, r2, #32
 800766e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10d      	bne.n	8007694 <SPI_DMAReceiveCplt+0x58>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007680:	d108      	bne.n	8007694 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0203 	bic.w	r2, r2, #3
 8007690:	605a      	str	r2, [r3, #4]
 8007692:	e007      	b.n	80076a4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 0201 	bic.w	r2, r2, #1
 80076a2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	2164      	movs	r1, #100	@ 0x64
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fa53 	bl	8007b54 <SPI_EndRxTransaction>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f7ff ff55 	bl	8007580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80076d6:	e002      	b.n	80076de <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7fa faf7 	bl	8001ccc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076f2:	f7fc fa5d 	bl	8003bb0 <HAL_GetTick>
 80076f6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007706:	d02f      	beq.n	8007768 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0220 	bic.w	r2, r2, #32
 8007716:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	2164      	movs	r1, #100	@ 0x64
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fa7f 	bl	8007c20 <SPI_EndRxTxTransaction>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800772c:	f043 0220 	orr.w	r2, r3, #32
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0203 	bic.w	r2, r2, #3
 8007742:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7ff ff0d 	bl	8007580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007766:	e002      	b.n	800776e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fee1 	bl	8007530 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007780:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7ff fede 	bl	8007544 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007788:	bf00      	nop
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7ff feda 	bl	8007558 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff fed6 	bl	800756c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80077c0:	bf00      	nop
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0203 	bic.w	r2, r2, #3
 80077e4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ea:	f043 0210 	orr.w	r2, r3, #16
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f7ff fec0 	bl	8007580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007800:	bf00      	nop
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007814:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff feac 	bl	8007580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007828:	bf00      	nop
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f103 020c 	add.w	r2, r3, #12
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007844:	7812      	ldrb	r2, [r2, #0]
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10f      	bne.n	800788c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800787a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa1e 	bl	8007cc8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800788c:	bf00      	nop
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	7812      	ldrb	r2, [r2, #0]
 80078a8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b29a      	uxth	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10f      	bne.n	80078ec <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078da:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f9ee 	bl	8007cc8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007906:	b292      	uxth	r2, r2
 8007908:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790e:	1c9a      	adds	r2, r3, #2
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007926:	b29b      	uxth	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10f      	bne.n	800794c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800793a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d102      	bne.n	800794c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f9be 	bl	8007cc8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007960:	881a      	ldrh	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796c:	1c9a      	adds	r2, r3, #2
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007976:	b29b      	uxth	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10f      	bne.n	80079aa <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007998:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800799e:	b29b      	uxth	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f98f 	bl	8007cc8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f103 020c 	add.w	r2, r3, #12
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c6:	7812      	ldrb	r2, [r2, #0]
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d102      	bne.n	80079f4 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f9de 	bl	8007db0 <SPI_CloseRx_ISR>
  }
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a0e:	b292      	uxth	r2, r2
 8007a10:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a16:	1c9a      	adds	r2, r3, #2
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d102      	bne.n	8007a3a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f9bb 	bl	8007db0 <SPI_CloseRx_ISR>
  }
}
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	4613      	mov	r3, r2
 8007a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a54:	f7fc f8ac 	bl	8003bb0 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	1a9b      	subs	r3, r3, r2
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	4413      	add	r3, r2
 8007a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a64:	f7fc f8a4 	bl	8003bb0 <HAL_GetTick>
 8007a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a6a:	4b39      	ldr	r3, [pc, #228]	@ (8007b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	015b      	lsls	r3, r3, #5
 8007a70:	0d1b      	lsrs	r3, r3, #20
 8007a72:	69fa      	ldr	r2, [r7, #28]
 8007a74:	fb02 f303 	mul.w	r3, r2, r3
 8007a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a7a:	e054      	b.n	8007b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a82:	d050      	beq.n	8007b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a84:	f7fc f894 	bl	8003bb0 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d902      	bls.n	8007a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d13d      	bne.n	8007b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ab2:	d111      	bne.n	8007ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007abc:	d004      	beq.n	8007ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ac6:	d107      	bne.n	8007ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ae0:	d10f      	bne.n	8007b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e017      	b.n	8007b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	bf0c      	ite	eq
 8007b36:	2301      	moveq	r3, #1
 8007b38:	2300      	movne	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d19b      	bne.n	8007a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3720      	adds	r7, #32
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	2000000c 	.word	0x2000000c

08007b54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af02      	add	r7, sp, #8
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b68:	d111      	bne.n	8007b8e <SPI_EndRxTransaction+0x3a>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b72:	d004      	beq.n	8007b7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b7c:	d107      	bne.n	8007b8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b96:	d12a      	bne.n	8007bee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ba0:	d012      	beq.n	8007bc8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2180      	movs	r1, #128	@ 0x80
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7ff ff49 	bl	8007a44 <SPI_WaitFlagStateUntilTimeout>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d02d      	beq.n	8007c14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bbc:	f043 0220 	orr.w	r2, r3, #32
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e026      	b.n	8007c16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff ff36 	bl	8007a44 <SPI_WaitFlagStateUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d01a      	beq.n	8007c14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be2:	f043 0220 	orr.w	r2, r3, #32
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e013      	b.n	8007c16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f7ff ff23 	bl	8007a44 <SPI_WaitFlagStateUntilTimeout>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d007      	beq.n	8007c14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c08:	f043 0220 	orr.w	r2, r3, #32
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e000      	b.n	8007c16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2201      	movs	r2, #1
 8007c34:	2102      	movs	r1, #2
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f7ff ff04 	bl	8007a44 <SPI_WaitFlagStateUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c46:	f043 0220 	orr.w	r2, r3, #32
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e032      	b.n	8007cb8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c52:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc0 <SPI_EndRxTxTransaction+0xa0>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a1b      	ldr	r2, [pc, #108]	@ (8007cc4 <SPI_EndRxTxTransaction+0xa4>)
 8007c58:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5c:	0d5b      	lsrs	r3, r3, #21
 8007c5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007c62:	fb02 f303 	mul.w	r3, r2, r3
 8007c66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c70:	d112      	bne.n	8007c98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2180      	movs	r1, #128	@ 0x80
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f7ff fee1 	bl	8007a44 <SPI_WaitFlagStateUntilTimeout>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d016      	beq.n	8007cb6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c8c:	f043 0220 	orr.w	r2, r3, #32
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e00f      	b.n	8007cb8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cae:	2b80      	cmp	r3, #128	@ 0x80
 8007cb0:	d0f2      	beq.n	8007c98 <SPI_EndRxTxTransaction+0x78>
 8007cb2:	e000      	b.n	8007cb6 <SPI_EndRxTxTransaction+0x96>
        break;
 8007cb4:	bf00      	nop
  }

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	2000000c 	.word	0x2000000c
 8007cc4:	165e9f81 	.word	0x165e9f81

08007cc8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007cd0:	4b35      	ldr	r3, [pc, #212]	@ (8007da8 <SPI_CloseRxTx_ISR+0xe0>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a35      	ldr	r2, [pc, #212]	@ (8007dac <SPI_CloseRxTx_ISR+0xe4>)
 8007cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cda:	0a5b      	lsrs	r3, r3, #9
 8007cdc:	2264      	movs	r2, #100	@ 0x64
 8007cde:	fb02 f303 	mul.w	r3, r2, r3
 8007ce2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ce4:	f7fb ff64 	bl	8003bb0 <HAL_GetTick>
 8007ce8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 0220 	bic.w	r2, r2, #32
 8007cf8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d106      	bne.n	8007d0e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d04:	f043 0220 	orr.w	r2, r3, #32
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007d0c:	e009      	b.n	8007d22 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0eb      	beq.n	8007cfa <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	2164      	movs	r1, #100	@ 0x64
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff ff7a 	bl	8007c20 <SPI_EndRxTxTransaction>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d36:	f043 0220 	orr.w	r2, r3, #32
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10a      	bne.n	8007d5c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	60fb      	str	r3, [r7, #12]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d115      	bne.n	8007d90 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d107      	bne.n	8007d80 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7f9 ffa7 	bl	8001ccc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007d7e:	e00e      	b.n	8007d9e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff fbd1 	bl	8007530 <HAL_SPI_TxRxCpltCallback>
}
 8007d8e:	e006      	b.n	8007d9e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff fbf1 	bl	8007580 <HAL_SPI_ErrorCallback>
}
 8007d9e:	bf00      	nop
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	2000000c 	.word	0x2000000c
 8007dac:	057619f1 	.word	0x057619f1

08007db0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007dc6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007dc8:	f7fb fef2 	bl	8003bb0 <HAL_GetTick>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	461a      	mov	r2, r3
 8007dd0:	2164      	movs	r1, #100	@ 0x64
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff febe 	bl	8007b54 <SPI_EndRxTransaction>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de2:	f043 0220 	orr.w	r2, r3, #32
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007df2:	2300      	movs	r3, #0
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d103      	bne.n	8007e20 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7f9 ff57 	bl	8001ccc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007e1e:	e002      	b.n	8007e26 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff fbad 	bl	8007580 <HAL_SPI_ErrorCallback>
}
 8007e26:	bf00      	nop
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e041      	b.n	8007ec4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d106      	bne.n	8007e5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7fb fcdb 	bl	8003810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	f000 fa75 	bl	800835c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d001      	beq.n	8007ee4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e046      	b.n	8007f72 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a23      	ldr	r2, [pc, #140]	@ (8007f80 <HAL_TIM_Base_Start+0xb4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d022      	beq.n	8007f3c <HAL_TIM_Base_Start+0x70>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007efe:	d01d      	beq.n	8007f3c <HAL_TIM_Base_Start+0x70>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1f      	ldr	r2, [pc, #124]	@ (8007f84 <HAL_TIM_Base_Start+0xb8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d018      	beq.n	8007f3c <HAL_TIM_Base_Start+0x70>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007f88 <HAL_TIM_Base_Start+0xbc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d013      	beq.n	8007f3c <HAL_TIM_Base_Start+0x70>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1c      	ldr	r2, [pc, #112]	@ (8007f8c <HAL_TIM_Base_Start+0xc0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00e      	beq.n	8007f3c <HAL_TIM_Base_Start+0x70>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1b      	ldr	r2, [pc, #108]	@ (8007f90 <HAL_TIM_Base_Start+0xc4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d009      	beq.n	8007f3c <HAL_TIM_Base_Start+0x70>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a19      	ldr	r2, [pc, #100]	@ (8007f94 <HAL_TIM_Base_Start+0xc8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <HAL_TIM_Base_Start+0x70>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a18      	ldr	r2, [pc, #96]	@ (8007f98 <HAL_TIM_Base_Start+0xcc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d111      	bne.n	8007f60 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b06      	cmp	r3, #6
 8007f4c:	d010      	beq.n	8007f70 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f042 0201 	orr.w	r2, r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5e:	e007      	b.n	8007f70 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0201 	orr.w	r2, r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	40010000 	.word	0x40010000
 8007f84:	40000400 	.word	0x40000400
 8007f88:	40000800 	.word	0x40000800
 8007f8c:	40000c00 	.word	0x40000c00
 8007f90:	40010400 	.word	0x40010400
 8007f94:	40014000 	.word	0x40014000
 8007f98:	40001800 	.word	0x40001800

08007f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f003 0302 	and.w	r3, r3, #2
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d020      	beq.n	8008000 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01b      	beq.n	8008000 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f06f 0202 	mvn.w	r2, #2
 8007fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f999 	bl	800831e <HAL_TIM_IC_CaptureCallback>
 8007fec:	e005      	b.n	8007ffa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f98b 	bl	800830a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f99c 	bl	8008332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d020      	beq.n	800804c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01b      	beq.n	800804c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f06f 0204 	mvn.w	r2, #4
 800801c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f973 	bl	800831e <HAL_TIM_IC_CaptureCallback>
 8008038:	e005      	b.n	8008046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f965 	bl	800830a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f976 	bl	8008332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f003 0308 	and.w	r3, r3, #8
 8008052:	2b00      	cmp	r3, #0
 8008054:	d020      	beq.n	8008098 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f003 0308 	and.w	r3, r3, #8
 800805c:	2b00      	cmp	r3, #0
 800805e:	d01b      	beq.n	8008098 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f06f 0208 	mvn.w	r2, #8
 8008068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2204      	movs	r2, #4
 800806e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f94d 	bl	800831e <HAL_TIM_IC_CaptureCallback>
 8008084:	e005      	b.n	8008092 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f93f 	bl	800830a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f950 	bl	8008332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f003 0310 	and.w	r3, r3, #16
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d020      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f003 0310 	and.w	r3, r3, #16
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01b      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f06f 0210 	mvn.w	r2, #16
 80080b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2208      	movs	r2, #8
 80080ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f927 	bl	800831e <HAL_TIM_IC_CaptureCallback>
 80080d0:	e005      	b.n	80080de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f919 	bl	800830a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f92a 	bl	8008332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00c      	beq.n	8008108 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d007      	beq.n	8008108 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f06f 0201 	mvn.w	r2, #1
 8008100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7f9 fe4a 	bl	8001d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00c      	beq.n	800812c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fae4 	bl	80086f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00c      	beq.n	8008150 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800813c:	2b00      	cmp	r3, #0
 800813e:	d007      	beq.n	8008150 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f8fb 	bl	8008346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00c      	beq.n	8008174 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f003 0320 	and.w	r3, r3, #32
 8008160:	2b00      	cmp	r3, #0
 8008162:	d007      	beq.n	8008174 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f06f 0220 	mvn.w	r2, #32
 800816c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fab6 	bl	80086e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008174:	bf00      	nop
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008190:	2b01      	cmp	r3, #1
 8008192:	d101      	bne.n	8008198 <HAL_TIM_ConfigClockSource+0x1c>
 8008194:	2302      	movs	r3, #2
 8008196:	e0b4      	b.n	8008302 <HAL_TIM_ConfigClockSource+0x186>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80081b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081d0:	d03e      	beq.n	8008250 <HAL_TIM_ConfigClockSource+0xd4>
 80081d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081d6:	f200 8087 	bhi.w	80082e8 <HAL_TIM_ConfigClockSource+0x16c>
 80081da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081de:	f000 8086 	beq.w	80082ee <HAL_TIM_ConfigClockSource+0x172>
 80081e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e6:	d87f      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x16c>
 80081e8:	2b70      	cmp	r3, #112	@ 0x70
 80081ea:	d01a      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0xa6>
 80081ec:	2b70      	cmp	r3, #112	@ 0x70
 80081ee:	d87b      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x16c>
 80081f0:	2b60      	cmp	r3, #96	@ 0x60
 80081f2:	d050      	beq.n	8008296 <HAL_TIM_ConfigClockSource+0x11a>
 80081f4:	2b60      	cmp	r3, #96	@ 0x60
 80081f6:	d877      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x16c>
 80081f8:	2b50      	cmp	r3, #80	@ 0x50
 80081fa:	d03c      	beq.n	8008276 <HAL_TIM_ConfigClockSource+0xfa>
 80081fc:	2b50      	cmp	r3, #80	@ 0x50
 80081fe:	d873      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008200:	2b40      	cmp	r3, #64	@ 0x40
 8008202:	d058      	beq.n	80082b6 <HAL_TIM_ConfigClockSource+0x13a>
 8008204:	2b40      	cmp	r3, #64	@ 0x40
 8008206:	d86f      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008208:	2b30      	cmp	r3, #48	@ 0x30
 800820a:	d064      	beq.n	80082d6 <HAL_TIM_ConfigClockSource+0x15a>
 800820c:	2b30      	cmp	r3, #48	@ 0x30
 800820e:	d86b      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008210:	2b20      	cmp	r3, #32
 8008212:	d060      	beq.n	80082d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008214:	2b20      	cmp	r3, #32
 8008216:	d867      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d05c      	beq.n	80082d6 <HAL_TIM_ConfigClockSource+0x15a>
 800821c:	2b10      	cmp	r3, #16
 800821e:	d05a      	beq.n	80082d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008220:	e062      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008232:	f000 f9b9 	bl	80085a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008244:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	609a      	str	r2, [r3, #8]
      break;
 800824e:	e04f      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008260:	f000 f9a2 	bl	80085a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008272:	609a      	str	r2, [r3, #8]
      break;
 8008274:	e03c      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008282:	461a      	mov	r2, r3
 8008284:	f000 f916 	bl	80084b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2150      	movs	r1, #80	@ 0x50
 800828e:	4618      	mov	r0, r3
 8008290:	f000 f96f 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 8008294:	e02c      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082a2:	461a      	mov	r2, r3
 80082a4:	f000 f935 	bl	8008512 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2160      	movs	r1, #96	@ 0x60
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 f95f 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 80082b4:	e01c      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082c2:	461a      	mov	r2, r3
 80082c4:	f000 f8f6 	bl	80084b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2140      	movs	r1, #64	@ 0x40
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f94f 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 80082d4:	e00c      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4619      	mov	r1, r3
 80082e0:	4610      	mov	r0, r2
 80082e2:	f000 f946 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 80082e6:	e003      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	73fb      	strb	r3, [r7, #15]
      break;
 80082ec:	e000      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008300:	7bfb      	ldrb	r3, [r7, #15]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
	...

0800835c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a46      	ldr	r2, [pc, #280]	@ (8008488 <TIM_Base_SetConfig+0x12c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d013      	beq.n	800839c <TIM_Base_SetConfig+0x40>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800837a:	d00f      	beq.n	800839c <TIM_Base_SetConfig+0x40>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a43      	ldr	r2, [pc, #268]	@ (800848c <TIM_Base_SetConfig+0x130>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d00b      	beq.n	800839c <TIM_Base_SetConfig+0x40>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a42      	ldr	r2, [pc, #264]	@ (8008490 <TIM_Base_SetConfig+0x134>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d007      	beq.n	800839c <TIM_Base_SetConfig+0x40>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a41      	ldr	r2, [pc, #260]	@ (8008494 <TIM_Base_SetConfig+0x138>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d003      	beq.n	800839c <TIM_Base_SetConfig+0x40>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a40      	ldr	r2, [pc, #256]	@ (8008498 <TIM_Base_SetConfig+0x13c>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d108      	bne.n	80083ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a35      	ldr	r2, [pc, #212]	@ (8008488 <TIM_Base_SetConfig+0x12c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d02b      	beq.n	800840e <TIM_Base_SetConfig+0xb2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083bc:	d027      	beq.n	800840e <TIM_Base_SetConfig+0xb2>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a32      	ldr	r2, [pc, #200]	@ (800848c <TIM_Base_SetConfig+0x130>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d023      	beq.n	800840e <TIM_Base_SetConfig+0xb2>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a31      	ldr	r2, [pc, #196]	@ (8008490 <TIM_Base_SetConfig+0x134>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d01f      	beq.n	800840e <TIM_Base_SetConfig+0xb2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a30      	ldr	r2, [pc, #192]	@ (8008494 <TIM_Base_SetConfig+0x138>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d01b      	beq.n	800840e <TIM_Base_SetConfig+0xb2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a2f      	ldr	r2, [pc, #188]	@ (8008498 <TIM_Base_SetConfig+0x13c>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d017      	beq.n	800840e <TIM_Base_SetConfig+0xb2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a2e      	ldr	r2, [pc, #184]	@ (800849c <TIM_Base_SetConfig+0x140>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d013      	beq.n	800840e <TIM_Base_SetConfig+0xb2>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a2d      	ldr	r2, [pc, #180]	@ (80084a0 <TIM_Base_SetConfig+0x144>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d00f      	beq.n	800840e <TIM_Base_SetConfig+0xb2>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a2c      	ldr	r2, [pc, #176]	@ (80084a4 <TIM_Base_SetConfig+0x148>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d00b      	beq.n	800840e <TIM_Base_SetConfig+0xb2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a2b      	ldr	r2, [pc, #172]	@ (80084a8 <TIM_Base_SetConfig+0x14c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d007      	beq.n	800840e <TIM_Base_SetConfig+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a2a      	ldr	r2, [pc, #168]	@ (80084ac <TIM_Base_SetConfig+0x150>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d003      	beq.n	800840e <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a29      	ldr	r2, [pc, #164]	@ (80084b0 <TIM_Base_SetConfig+0x154>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d108      	bne.n	8008420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	4313      	orrs	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	4313      	orrs	r3, r2
 800842c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	689a      	ldr	r2, [r3, #8]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a10      	ldr	r2, [pc, #64]	@ (8008488 <TIM_Base_SetConfig+0x12c>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d003      	beq.n	8008454 <TIM_Base_SetConfig+0xf8>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a12      	ldr	r2, [pc, #72]	@ (8008498 <TIM_Base_SetConfig+0x13c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d103      	bne.n	800845c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	691a      	ldr	r2, [r3, #16]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b01      	cmp	r3, #1
 800846c:	d105      	bne.n	800847a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f023 0201 	bic.w	r2, r3, #1
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	611a      	str	r2, [r3, #16]
  }
}
 800847a:	bf00      	nop
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	40010000 	.word	0x40010000
 800848c:	40000400 	.word	0x40000400
 8008490:	40000800 	.word	0x40000800
 8008494:	40000c00 	.word	0x40000c00
 8008498:	40010400 	.word	0x40010400
 800849c:	40014000 	.word	0x40014000
 80084a0:	40014400 	.word	0x40014400
 80084a4:	40014800 	.word	0x40014800
 80084a8:	40001800 	.word	0x40001800
 80084ac:	40001c00 	.word	0x40001c00
 80084b0:	40002000 	.word	0x40002000

080084b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	f023 0201 	bic.w	r2, r3, #1
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f023 030a 	bic.w	r3, r3, #10
 80084f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	621a      	str	r2, [r3, #32]
}
 8008506:	bf00      	nop
 8008508:	371c      	adds	r7, #28
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008512:	b480      	push	{r7}
 8008514:	b087      	sub	sp, #28
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	f023 0210 	bic.w	r2, r3, #16
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800853c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	031b      	lsls	r3, r3, #12
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800854e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	011b      	lsls	r3, r3, #4
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	621a      	str	r2, [r3, #32]
}
 8008566:	bf00      	nop
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	f043 0307 	orr.w	r3, r3, #7
 8008594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	609a      	str	r2, [r3, #8]
}
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	021a      	lsls	r2, r3, #8
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	431a      	orrs	r2, r3
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	609a      	str	r2, [r3, #8]
}
 80085dc:	bf00      	nop
 80085de:	371c      	adds	r7, #28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085fc:	2302      	movs	r3, #2
 80085fe:	e05a      	b.n	80086b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	4313      	orrs	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a21      	ldr	r2, [pc, #132]	@ (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d022      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800864c:	d01d      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a1d      	ldr	r2, [pc, #116]	@ (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d018      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a1b      	ldr	r2, [pc, #108]	@ (80086cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d013      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a1a      	ldr	r2, [pc, #104]	@ (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00e      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a18      	ldr	r2, [pc, #96]	@ (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d009      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a17      	ldr	r2, [pc, #92]	@ (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d004      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a15      	ldr	r2, [pc, #84]	@ (80086dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d10c      	bne.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	4313      	orrs	r3, r2
 800869a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	40010000 	.word	0x40010000
 80086c8:	40000400 	.word	0x40000400
 80086cc:	40000800 	.word	0x40000800
 80086d0:	40000c00 	.word	0x40000c00
 80086d4:	40010400 	.word	0x40010400
 80086d8:	40014000 	.word	0x40014000
 80086dc:	40001800 	.word	0x40001800

080086e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e042      	b.n	80087a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d106      	bne.n	8008734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7fb f8aa 	bl	8003888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2224      	movs	r2, #36	@ 0x24
 8008738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800874a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fc85 	bl	800905c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	691a      	ldr	r2, [r3, #16]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	695a      	ldr	r2, [r3, #20]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b0ba      	sub	sp, #232	@ 0xe8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80087e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10f      	bne.n	800880e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087f2:	f003 0320 	and.w	r3, r3, #32
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <HAL_UART_IRQHandler+0x66>
 80087fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fb69 	bl	8008ede <UART_Receive_IT>
      return;
 800880c:	e25b      	b.n	8008cc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800880e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 80de 	beq.w	80089d4 <HAL_UART_IRQHandler+0x22c>
 8008818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d106      	bne.n	8008832 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008828:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 80d1 	beq.w	80089d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <HAL_UART_IRQHandler+0xae>
 800883e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008846:	2b00      	cmp	r3, #0
 8008848:	d005      	beq.n	8008856 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800884e:	f043 0201 	orr.w	r2, r3, #1
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <HAL_UART_IRQHandler+0xd2>
 8008862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008872:	f043 0202 	orr.w	r2, r3, #2
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800887a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <HAL_UART_IRQHandler+0xf6>
 8008886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008896:	f043 0204 	orr.w	r2, r3, #4
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800889e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088a2:	f003 0308 	and.w	r3, r3, #8
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d011      	beq.n	80088ce <HAL_UART_IRQHandler+0x126>
 80088aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d105      	bne.n	80088c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d005      	beq.n	80088ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c6:	f043 0208 	orr.w	r2, r3, #8
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 81f2 	beq.w	8008cbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088dc:	f003 0320 	and.w	r3, r3, #32
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d008      	beq.n	80088f6 <HAL_UART_IRQHandler+0x14e>
 80088e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e8:	f003 0320 	and.w	r3, r3, #32
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 faf4 	bl	8008ede <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008900:	2b40      	cmp	r3, #64	@ 0x40
 8008902:	bf0c      	ite	eq
 8008904:	2301      	moveq	r3, #1
 8008906:	2300      	movne	r3, #0
 8008908:	b2db      	uxtb	r3, r3
 800890a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d103      	bne.n	8008922 <HAL_UART_IRQHandler+0x17a>
 800891a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d04f      	beq.n	80089c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f9fc 	bl	8008d20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008932:	2b40      	cmp	r3, #64	@ 0x40
 8008934:	d141      	bne.n	80089ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3314      	adds	r3, #20
 800893c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800894c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3314      	adds	r3, #20
 800895e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008962:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800896e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800897a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1d9      	bne.n	8008936 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d013      	beq.n	80089b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800898e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b88 <HAL_UART_IRQHandler+0x3e0>)
 8008990:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008996:	4618      	mov	r0, r3
 8008998:	f7fb fc3c 	bl	8004214 <HAL_DMA_Abort_IT>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d016      	beq.n	80089d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b0:	e00e      	b.n	80089d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f99e 	bl	8008cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b8:	e00a      	b.n	80089d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f99a 	bl	8008cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c0:	e006      	b.n	80089d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f996 	bl	8008cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80089ce:	e175      	b.n	8008cbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d0:	bf00      	nop
    return;
 80089d2:	e173      	b.n	8008cbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d8:	2b01      	cmp	r3, #1
 80089da:	f040 814f 	bne.w	8008c7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089e2:	f003 0310 	and.w	r3, r3, #16
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 8148 	beq.w	8008c7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089f0:	f003 0310 	and.w	r3, r3, #16
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8141 	beq.w	8008c7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089fa:	2300      	movs	r3, #0
 80089fc:	60bb      	str	r3, [r7, #8]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60bb      	str	r3, [r7, #8]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	60bb      	str	r3, [r7, #8]
 8008a0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a1a:	2b40      	cmp	r3, #64	@ 0x40
 8008a1c:	f040 80b6 	bne.w	8008b8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 8145 	beq.w	8008cc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	f080 813e 	bcs.w	8008cc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a56:	f000 8088 	beq.w	8008b6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	330c      	adds	r3, #12
 8008a60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	330c      	adds	r3, #12
 8008a82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008a86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1d9      	bne.n	8008a5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3314      	adds	r3, #20
 8008aac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ab6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ab8:	f023 0301 	bic.w	r3, r3, #1
 8008abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3314      	adds	r3, #20
 8008ac6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008aca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ad2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e1      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3314      	adds	r3, #20
 8008ae8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008af2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008af8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3314      	adds	r3, #20
 8008b02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e3      	bne.n	8008ae2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	330c      	adds	r3, #12
 8008b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b3a:	f023 0310 	bic.w	r3, r3, #16
 8008b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	330c      	adds	r3, #12
 8008b48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008b4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008b4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e3      	bne.n	8008b28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fb fae5 	bl	8004134 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f8c1 	bl	8008d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b86:	e09b      	b.n	8008cc0 <HAL_UART_IRQHandler+0x518>
 8008b88:	08008de7 	.word	0x08008de7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 808e 	beq.w	8008cc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 8089 	beq.w	8008cc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	330c      	adds	r3, #12
 8008bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbc:	e853 3f00 	ldrex	r3, [r3]
 8008bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	330c      	adds	r3, #12
 8008bd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008bd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008bd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e3      	bne.n	8008bb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3314      	adds	r3, #20
 8008bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	f023 0301 	bic.w	r3, r3, #1
 8008c00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3314      	adds	r3, #20
 8008c0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c16:	e841 2300 	strex	r3, r2, [r1]
 8008c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e3      	bne.n	8008bea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	330c      	adds	r3, #12
 8008c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	e853 3f00 	ldrex	r3, [r3]
 8008c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 0310 	bic.w	r3, r3, #16
 8008c46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	330c      	adds	r3, #12
 8008c50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008c54:	61fa      	str	r2, [r7, #28]
 8008c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	69b9      	ldr	r1, [r7, #24]
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	617b      	str	r3, [r7, #20]
   return(result);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e3      	bne.n	8008c30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f847 	bl	8008d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c7a:	e023      	b.n	8008cc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d009      	beq.n	8008c9c <HAL_UART_IRQHandler+0x4f4>
 8008c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8ba 	bl	8008e0e <UART_Transmit_IT>
    return;
 8008c9a:	e014      	b.n	8008cc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00e      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x51e>
 8008ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d008      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f8fa 	bl	8008eae <UART_EndTransmit_IT>
    return;
 8008cba:	e004      	b.n	8008cc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8008cbc:	bf00      	nop
 8008cbe:	e002      	b.n	8008cc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008cc0:	bf00      	nop
 8008cc2:	e000      	b.n	8008cc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008cc4:	bf00      	nop
  }
}
 8008cc6:	37e8      	adds	r7, #232	@ 0xe8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b095      	sub	sp, #84	@ 0x54
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	330c      	adds	r3, #12
 8008d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	330c      	adds	r3, #12
 8008d46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d48:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e5      	bne.n	8008d28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3314      	adds	r3, #20
 8008d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f023 0301 	bic.w	r3, r3, #1
 8008d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3314      	adds	r3, #20
 8008d7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e5      	bne.n	8008d5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d119      	bne.n	8008dcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	330c      	adds	r3, #12
 8008d9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f023 0310 	bic.w	r3, r3, #16
 8008dae:	647b      	str	r3, [r7, #68]	@ 0x44
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	330c      	adds	r3, #12
 8008db6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008db8:	61ba      	str	r2, [r7, #24]
 8008dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	6979      	ldr	r1, [r7, #20]
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e5      	bne.n	8008d98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008dda:	bf00      	nop
 8008ddc:	3754      	adds	r7, #84	@ 0x54
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b084      	sub	sp, #16
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7ff ff77 	bl	8008cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e06:	bf00      	nop
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b085      	sub	sp, #20
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b21      	cmp	r3, #33	@ 0x21
 8008e20:	d13e      	bne.n	8008ea0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e2a:	d114      	bne.n	8008e56 <UART_Transmit_IT+0x48>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d110      	bne.n	8008e56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	1c9a      	adds	r2, r3, #2
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	621a      	str	r2, [r3, #32]
 8008e54:	e008      	b.n	8008e68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	1c59      	adds	r1, r3, #1
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	6211      	str	r1, [r2, #32]
 8008e60:	781a      	ldrb	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	4619      	mov	r1, r3
 8008e76:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10f      	bne.n	8008e9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	e000      	b.n	8008ea2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ea0:	2302      	movs	r3, #2
  }
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ec4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff fefc 	bl	8008ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b08c      	sub	sp, #48	@ 0x30
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b22      	cmp	r3, #34	@ 0x22
 8008ef0:	f040 80ae 	bne.w	8009050 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008efc:	d117      	bne.n	8008f2e <UART_Receive_IT+0x50>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d113      	bne.n	8008f2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f26:	1c9a      	adds	r2, r3, #2
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f2c:	e026      	b.n	8008f7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008f34:	2300      	movs	r3, #0
 8008f36:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f40:	d007      	beq.n	8008f52 <UART_Receive_IT+0x74>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <UART_Receive_IT+0x82>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d106      	bne.n	8008f60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5c:	701a      	strb	r2, [r3, #0]
 8008f5e:	e008      	b.n	8008f72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	3b01      	subs	r3, #1
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d15d      	bne.n	800904c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0220 	bic.w	r2, r2, #32
 8008f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68da      	ldr	r2, [r3, #12]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008fae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	695a      	ldr	r2, [r3, #20]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0201 	bic.w	r2, r2, #1
 8008fbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d135      	bne.n	8009042 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	330c      	adds	r3, #12
 8008fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	613b      	str	r3, [r7, #16]
   return(result);
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f023 0310 	bic.w	r3, r3, #16
 8008ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	330c      	adds	r3, #12
 8008ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ffc:	623a      	str	r2, [r7, #32]
 8008ffe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	69f9      	ldr	r1, [r7, #28]
 8009002:	6a3a      	ldr	r2, [r7, #32]
 8009004:	e841 2300 	strex	r3, r2, [r1]
 8009008:	61bb      	str	r3, [r7, #24]
   return(result);
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1e5      	bne.n	8008fdc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0310 	and.w	r3, r3, #16
 800901a:	2b10      	cmp	r3, #16
 800901c:	d10a      	bne.n	8009034 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff fe64 	bl	8008d08 <HAL_UARTEx_RxEventCallback>
 8009040:	e002      	b.n	8009048 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff fe4c 	bl	8008ce0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	e002      	b.n	8009052 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	e000      	b.n	8009052 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009050:	2302      	movs	r3, #2
  }
}
 8009052:	4618      	mov	r0, r3
 8009054:	3730      	adds	r7, #48	@ 0x30
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
	...

0800905c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800905c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009060:	b0c0      	sub	sp, #256	@ 0x100
 8009062:	af00      	add	r7, sp, #0
 8009064:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009078:	68d9      	ldr	r1, [r3, #12]
 800907a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	ea40 0301 	orr.w	r3, r0, r1
 8009084:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800908a:	689a      	ldr	r2, [r3, #8]
 800908c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	431a      	orrs	r2, r3
 8009094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	431a      	orrs	r2, r3
 800909c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80090b4:	f021 010c 	bic.w	r1, r1, #12
 80090b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090c2:	430b      	orrs	r3, r1
 80090c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80090d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d6:	6999      	ldr	r1, [r3, #24]
 80090d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	ea40 0301 	orr.w	r3, r0, r1
 80090e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	4b8f      	ldr	r3, [pc, #572]	@ (8009328 <UART_SetConfig+0x2cc>)
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d005      	beq.n	80090fc <UART_SetConfig+0xa0>
 80090f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	4b8d      	ldr	r3, [pc, #564]	@ (800932c <UART_SetConfig+0x2d0>)
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d104      	bne.n	8009106 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090fc:	f7fc f950 	bl	80053a0 <HAL_RCC_GetPCLK2Freq>
 8009100:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009104:	e003      	b.n	800910e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009106:	f7fc f937 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 800910a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800910e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009118:	f040 810c 	bne.w	8009334 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800911c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009120:	2200      	movs	r2, #0
 8009122:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009126:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800912a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800912e:	4622      	mov	r2, r4
 8009130:	462b      	mov	r3, r5
 8009132:	1891      	adds	r1, r2, r2
 8009134:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009136:	415b      	adcs	r3, r3
 8009138:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800913a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800913e:	4621      	mov	r1, r4
 8009140:	eb12 0801 	adds.w	r8, r2, r1
 8009144:	4629      	mov	r1, r5
 8009146:	eb43 0901 	adc.w	r9, r3, r1
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800915a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800915e:	4690      	mov	r8, r2
 8009160:	4699      	mov	r9, r3
 8009162:	4623      	mov	r3, r4
 8009164:	eb18 0303 	adds.w	r3, r8, r3
 8009168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800916c:	462b      	mov	r3, r5
 800916e:	eb49 0303 	adc.w	r3, r9, r3
 8009172:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009182:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009186:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800918a:	460b      	mov	r3, r1
 800918c:	18db      	adds	r3, r3, r3
 800918e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009190:	4613      	mov	r3, r2
 8009192:	eb42 0303 	adc.w	r3, r2, r3
 8009196:	657b      	str	r3, [r7, #84]	@ 0x54
 8009198:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800919c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80091a0:	f7f7 f81a 	bl	80001d8 <__aeabi_uldivmod>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4b61      	ldr	r3, [pc, #388]	@ (8009330 <UART_SetConfig+0x2d4>)
 80091aa:	fba3 2302 	umull	r2, r3, r3, r2
 80091ae:	095b      	lsrs	r3, r3, #5
 80091b0:	011c      	lsls	r4, r3, #4
 80091b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80091c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80091c4:	4642      	mov	r2, r8
 80091c6:	464b      	mov	r3, r9
 80091c8:	1891      	adds	r1, r2, r2
 80091ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80091cc:	415b      	adcs	r3, r3
 80091ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091d4:	4641      	mov	r1, r8
 80091d6:	eb12 0a01 	adds.w	sl, r2, r1
 80091da:	4649      	mov	r1, r9
 80091dc:	eb43 0b01 	adc.w	fp, r3, r1
 80091e0:	f04f 0200 	mov.w	r2, #0
 80091e4:	f04f 0300 	mov.w	r3, #0
 80091e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091f4:	4692      	mov	sl, r2
 80091f6:	469b      	mov	fp, r3
 80091f8:	4643      	mov	r3, r8
 80091fa:	eb1a 0303 	adds.w	r3, sl, r3
 80091fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009202:	464b      	mov	r3, r9
 8009204:	eb4b 0303 	adc.w	r3, fp, r3
 8009208:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800920c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009218:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800921c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009220:	460b      	mov	r3, r1
 8009222:	18db      	adds	r3, r3, r3
 8009224:	643b      	str	r3, [r7, #64]	@ 0x40
 8009226:	4613      	mov	r3, r2
 8009228:	eb42 0303 	adc.w	r3, r2, r3
 800922c:	647b      	str	r3, [r7, #68]	@ 0x44
 800922e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009232:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009236:	f7f6 ffcf 	bl	80001d8 <__aeabi_uldivmod>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4611      	mov	r1, r2
 8009240:	4b3b      	ldr	r3, [pc, #236]	@ (8009330 <UART_SetConfig+0x2d4>)
 8009242:	fba3 2301 	umull	r2, r3, r3, r1
 8009246:	095b      	lsrs	r3, r3, #5
 8009248:	2264      	movs	r2, #100	@ 0x64
 800924a:	fb02 f303 	mul.w	r3, r2, r3
 800924e:	1acb      	subs	r3, r1, r3
 8009250:	00db      	lsls	r3, r3, #3
 8009252:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009256:	4b36      	ldr	r3, [pc, #216]	@ (8009330 <UART_SetConfig+0x2d4>)
 8009258:	fba3 2302 	umull	r2, r3, r3, r2
 800925c:	095b      	lsrs	r3, r3, #5
 800925e:	005b      	lsls	r3, r3, #1
 8009260:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009264:	441c      	add	r4, r3
 8009266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800926a:	2200      	movs	r2, #0
 800926c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009270:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009274:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009278:	4642      	mov	r2, r8
 800927a:	464b      	mov	r3, r9
 800927c:	1891      	adds	r1, r2, r2
 800927e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009280:	415b      	adcs	r3, r3
 8009282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009288:	4641      	mov	r1, r8
 800928a:	1851      	adds	r1, r2, r1
 800928c:	6339      	str	r1, [r7, #48]	@ 0x30
 800928e:	4649      	mov	r1, r9
 8009290:	414b      	adcs	r3, r1
 8009292:	637b      	str	r3, [r7, #52]	@ 0x34
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	f04f 0300 	mov.w	r3, #0
 800929c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80092a0:	4659      	mov	r1, fp
 80092a2:	00cb      	lsls	r3, r1, #3
 80092a4:	4651      	mov	r1, sl
 80092a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092aa:	4651      	mov	r1, sl
 80092ac:	00ca      	lsls	r2, r1, #3
 80092ae:	4610      	mov	r0, r2
 80092b0:	4619      	mov	r1, r3
 80092b2:	4603      	mov	r3, r0
 80092b4:	4642      	mov	r2, r8
 80092b6:	189b      	adds	r3, r3, r2
 80092b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092bc:	464b      	mov	r3, r9
 80092be:	460a      	mov	r2, r1
 80092c0:	eb42 0303 	adc.w	r3, r2, r3
 80092c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092dc:	460b      	mov	r3, r1
 80092de:	18db      	adds	r3, r3, r3
 80092e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092e2:	4613      	mov	r3, r2
 80092e4:	eb42 0303 	adc.w	r3, r2, r3
 80092e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092f2:	f7f6 ff71 	bl	80001d8 <__aeabi_uldivmod>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009330 <UART_SetConfig+0x2d4>)
 80092fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009300:	095b      	lsrs	r3, r3, #5
 8009302:	2164      	movs	r1, #100	@ 0x64
 8009304:	fb01 f303 	mul.w	r3, r1, r3
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	3332      	adds	r3, #50	@ 0x32
 800930e:	4a08      	ldr	r2, [pc, #32]	@ (8009330 <UART_SetConfig+0x2d4>)
 8009310:	fba2 2303 	umull	r2, r3, r2, r3
 8009314:	095b      	lsrs	r3, r3, #5
 8009316:	f003 0207 	and.w	r2, r3, #7
 800931a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4422      	add	r2, r4
 8009322:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009324:	e106      	b.n	8009534 <UART_SetConfig+0x4d8>
 8009326:	bf00      	nop
 8009328:	40011000 	.word	0x40011000
 800932c:	40011400 	.word	0x40011400
 8009330:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009338:	2200      	movs	r2, #0
 800933a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800933e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009342:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009346:	4642      	mov	r2, r8
 8009348:	464b      	mov	r3, r9
 800934a:	1891      	adds	r1, r2, r2
 800934c:	6239      	str	r1, [r7, #32]
 800934e:	415b      	adcs	r3, r3
 8009350:	627b      	str	r3, [r7, #36]	@ 0x24
 8009352:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009356:	4641      	mov	r1, r8
 8009358:	1854      	adds	r4, r2, r1
 800935a:	4649      	mov	r1, r9
 800935c:	eb43 0501 	adc.w	r5, r3, r1
 8009360:	f04f 0200 	mov.w	r2, #0
 8009364:	f04f 0300 	mov.w	r3, #0
 8009368:	00eb      	lsls	r3, r5, #3
 800936a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800936e:	00e2      	lsls	r2, r4, #3
 8009370:	4614      	mov	r4, r2
 8009372:	461d      	mov	r5, r3
 8009374:	4643      	mov	r3, r8
 8009376:	18e3      	adds	r3, r4, r3
 8009378:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800937c:	464b      	mov	r3, r9
 800937e:	eb45 0303 	adc.w	r3, r5, r3
 8009382:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009392:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009396:	f04f 0200 	mov.w	r2, #0
 800939a:	f04f 0300 	mov.w	r3, #0
 800939e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80093a2:	4629      	mov	r1, r5
 80093a4:	008b      	lsls	r3, r1, #2
 80093a6:	4621      	mov	r1, r4
 80093a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093ac:	4621      	mov	r1, r4
 80093ae:	008a      	lsls	r2, r1, #2
 80093b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80093b4:	f7f6 ff10 	bl	80001d8 <__aeabi_uldivmod>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4b60      	ldr	r3, [pc, #384]	@ (8009540 <UART_SetConfig+0x4e4>)
 80093be:	fba3 2302 	umull	r2, r3, r3, r2
 80093c2:	095b      	lsrs	r3, r3, #5
 80093c4:	011c      	lsls	r4, r3, #4
 80093c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093d8:	4642      	mov	r2, r8
 80093da:	464b      	mov	r3, r9
 80093dc:	1891      	adds	r1, r2, r2
 80093de:	61b9      	str	r1, [r7, #24]
 80093e0:	415b      	adcs	r3, r3
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093e8:	4641      	mov	r1, r8
 80093ea:	1851      	adds	r1, r2, r1
 80093ec:	6139      	str	r1, [r7, #16]
 80093ee:	4649      	mov	r1, r9
 80093f0:	414b      	adcs	r3, r1
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	f04f 0300 	mov.w	r3, #0
 80093fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009400:	4659      	mov	r1, fp
 8009402:	00cb      	lsls	r3, r1, #3
 8009404:	4651      	mov	r1, sl
 8009406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800940a:	4651      	mov	r1, sl
 800940c:	00ca      	lsls	r2, r1, #3
 800940e:	4610      	mov	r0, r2
 8009410:	4619      	mov	r1, r3
 8009412:	4603      	mov	r3, r0
 8009414:	4642      	mov	r2, r8
 8009416:	189b      	adds	r3, r3, r2
 8009418:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800941c:	464b      	mov	r3, r9
 800941e:	460a      	mov	r2, r1
 8009420:	eb42 0303 	adc.w	r3, r2, r3
 8009424:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009432:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	f04f 0300 	mov.w	r3, #0
 800943c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009440:	4649      	mov	r1, r9
 8009442:	008b      	lsls	r3, r1, #2
 8009444:	4641      	mov	r1, r8
 8009446:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800944a:	4641      	mov	r1, r8
 800944c:	008a      	lsls	r2, r1, #2
 800944e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009452:	f7f6 fec1 	bl	80001d8 <__aeabi_uldivmod>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4611      	mov	r1, r2
 800945c:	4b38      	ldr	r3, [pc, #224]	@ (8009540 <UART_SetConfig+0x4e4>)
 800945e:	fba3 2301 	umull	r2, r3, r3, r1
 8009462:	095b      	lsrs	r3, r3, #5
 8009464:	2264      	movs	r2, #100	@ 0x64
 8009466:	fb02 f303 	mul.w	r3, r2, r3
 800946a:	1acb      	subs	r3, r1, r3
 800946c:	011b      	lsls	r3, r3, #4
 800946e:	3332      	adds	r3, #50	@ 0x32
 8009470:	4a33      	ldr	r2, [pc, #204]	@ (8009540 <UART_SetConfig+0x4e4>)
 8009472:	fba2 2303 	umull	r2, r3, r2, r3
 8009476:	095b      	lsrs	r3, r3, #5
 8009478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800947c:	441c      	add	r4, r3
 800947e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009482:	2200      	movs	r2, #0
 8009484:	673b      	str	r3, [r7, #112]	@ 0x70
 8009486:	677a      	str	r2, [r7, #116]	@ 0x74
 8009488:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800948c:	4642      	mov	r2, r8
 800948e:	464b      	mov	r3, r9
 8009490:	1891      	adds	r1, r2, r2
 8009492:	60b9      	str	r1, [r7, #8]
 8009494:	415b      	adcs	r3, r3
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800949c:	4641      	mov	r1, r8
 800949e:	1851      	adds	r1, r2, r1
 80094a0:	6039      	str	r1, [r7, #0]
 80094a2:	4649      	mov	r1, r9
 80094a4:	414b      	adcs	r3, r1
 80094a6:	607b      	str	r3, [r7, #4]
 80094a8:	f04f 0200 	mov.w	r2, #0
 80094ac:	f04f 0300 	mov.w	r3, #0
 80094b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094b4:	4659      	mov	r1, fp
 80094b6:	00cb      	lsls	r3, r1, #3
 80094b8:	4651      	mov	r1, sl
 80094ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094be:	4651      	mov	r1, sl
 80094c0:	00ca      	lsls	r2, r1, #3
 80094c2:	4610      	mov	r0, r2
 80094c4:	4619      	mov	r1, r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	4642      	mov	r2, r8
 80094ca:	189b      	adds	r3, r3, r2
 80094cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094ce:	464b      	mov	r3, r9
 80094d0:	460a      	mov	r2, r1
 80094d2:	eb42 0303 	adc.w	r3, r2, r3
 80094d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80094e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	f04f 0300 	mov.w	r3, #0
 80094ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094f0:	4649      	mov	r1, r9
 80094f2:	008b      	lsls	r3, r1, #2
 80094f4:	4641      	mov	r1, r8
 80094f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094fa:	4641      	mov	r1, r8
 80094fc:	008a      	lsls	r2, r1, #2
 80094fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009502:	f7f6 fe69 	bl	80001d8 <__aeabi_uldivmod>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4b0d      	ldr	r3, [pc, #52]	@ (8009540 <UART_SetConfig+0x4e4>)
 800950c:	fba3 1302 	umull	r1, r3, r3, r2
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	2164      	movs	r1, #100	@ 0x64
 8009514:	fb01 f303 	mul.w	r3, r1, r3
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	011b      	lsls	r3, r3, #4
 800951c:	3332      	adds	r3, #50	@ 0x32
 800951e:	4a08      	ldr	r2, [pc, #32]	@ (8009540 <UART_SetConfig+0x4e4>)
 8009520:	fba2 2303 	umull	r2, r3, r2, r3
 8009524:	095b      	lsrs	r3, r3, #5
 8009526:	f003 020f 	and.w	r2, r3, #15
 800952a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4422      	add	r2, r4
 8009532:	609a      	str	r2, [r3, #8]
}
 8009534:	bf00      	nop
 8009536:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800953a:	46bd      	mov	sp, r7
 800953c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009540:	51eb851f 	.word	0x51eb851f

08009544 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009544:	b084      	sub	sp, #16
 8009546:	b480      	push	{r7}
 8009548:	b085      	sub	sp, #20
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	f107 001c 	add.w	r0, r7, #28
 8009552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800955a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800955c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800955e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009562:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009566:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800956a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800956c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800956e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800957e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	431a      	orrs	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	b004      	add	sp, #16
 8009598:	4770      	bx	lr

0800959a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2203      	movs	r2, #3
 80095e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0303 	and.w	r3, r3, #3
}
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800960e:	b480      	push	{r7}
 8009610:	b085      	sub	sp, #20
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800962c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009632:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009638:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	4313      	orrs	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009648:	f023 030f 	bic.w	r3, r3, #15
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	431a      	orrs	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	b2db      	uxtb	r3, r3
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	3314      	adds	r3, #20
 800968a:	461a      	mov	r2, r3
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	4413      	add	r3, r2
 8009690:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
}  
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b085      	sub	sp, #20
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096c8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80096ce:	431a      	orrs	r2, r3
                       Data->DPSM);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80096d4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	4313      	orrs	r3, r2
 80096da:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	431a      	orrs	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0

}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b088      	sub	sp, #32
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009708:	2310      	movs	r3, #16
 800970a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800970c:	2340      	movs	r3, #64	@ 0x40
 800970e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009710:	2300      	movs	r3, #0
 8009712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009718:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800971a:	f107 0308 	add.w	r3, r7, #8
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff ff74 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800972a:	2110      	movs	r1, #16
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f9d7 	bl	8009ae0 <SDMMC_GetCmdResp1>
 8009732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009734:	69fb      	ldr	r3, [r7, #28]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b088      	sub	sp, #32
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800974c:	2311      	movs	r3, #17
 800974e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009750:	2340      	movs	r3, #64	@ 0x40
 8009752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009754:	2300      	movs	r3, #0
 8009756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800975c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800975e:	f107 0308 	add.w	r3, r7, #8
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff ff52 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800976a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800976e:	2111      	movs	r1, #17
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f9b5 	bl	8009ae0 <SDMMC_GetCmdResp1>
 8009776:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009778:	69fb      	ldr	r3, [r7, #28]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3720      	adds	r7, #32
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b088      	sub	sp, #32
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009790:	2312      	movs	r3, #18
 8009792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009794:	2340      	movs	r3, #64	@ 0x40
 8009796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800979c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097a2:	f107 0308 	add.w	r3, r7, #8
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff ff30 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80097ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097b2:	2112      	movs	r1, #18
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f993 	bl	8009ae0 <SDMMC_GetCmdResp1>
 80097ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097bc:	69fb      	ldr	r3, [r7, #28]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3720      	adds	r7, #32
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b088      	sub	sp, #32
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80097d4:	2318      	movs	r3, #24
 80097d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097d8:	2340      	movs	r3, #64	@ 0x40
 80097da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097dc:	2300      	movs	r3, #0
 80097de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097e6:	f107 0308 	add.w	r3, r7, #8
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff ff0e 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80097f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097f6:	2118      	movs	r1, #24
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f971 	bl	8009ae0 <SDMMC_GetCmdResp1>
 80097fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009800:	69fb      	ldr	r3, [r7, #28]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3720      	adds	r7, #32
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b088      	sub	sp, #32
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009818:	2319      	movs	r3, #25
 800981a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800981c:	2340      	movs	r3, #64	@ 0x40
 800981e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009820:	2300      	movs	r3, #0
 8009822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009828:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800982a:	f107 0308 	add.w	r3, r7, #8
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7ff feec 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800983a:	2119      	movs	r1, #25
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f94f 	bl	8009ae0 <SDMMC_GetCmdResp1>
 8009842:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009844:	69fb      	ldr	r3, [r7, #28]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3720      	adds	r7, #32
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800985c:	230c      	movs	r3, #12
 800985e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009860:	2340      	movs	r3, #64	@ 0x40
 8009862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009868:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800986c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800986e:	f107 0308 	add.w	r3, r7, #8
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff feca 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800987a:	4a05      	ldr	r2, [pc, #20]	@ (8009890 <SDMMC_CmdStopTransfer+0x40>)
 800987c:	210c      	movs	r1, #12
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f92e 	bl	8009ae0 <SDMMC_GetCmdResp1>
 8009884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009886:	69fb      	ldr	r3, [r7, #28]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	05f5e100 	.word	0x05f5e100

08009894 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08a      	sub	sp, #40	@ 0x28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80098a4:	2307      	movs	r3, #7
 80098a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098a8:	2340      	movs	r3, #64	@ 0x40
 80098aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098b4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098b6:	f107 0310 	add.w	r3, r7, #16
 80098ba:	4619      	mov	r1, r3
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff fea6 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80098c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098c6:	2107      	movs	r1, #7
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f000 f909 	bl	8009ae0 <SDMMC_GetCmdResp1>
 80098ce:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80098d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3728      	adds	r7, #40	@ 0x28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b088      	sub	sp, #32
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80098e6:	2300      	movs	r3, #0
 80098e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80098ea:	2300      	movs	r3, #0
 80098ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098ee:	2300      	movs	r3, #0
 80098f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098f8:	f107 0308 	add.w	r3, r7, #8
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff fe85 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fb23 	bl	8009f50 <SDMMC_GetCmdError>
 800990a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800990c:	69fb      	ldr	r3, [r7, #28]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3720      	adds	r7, #32
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b088      	sub	sp, #32
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800991e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009924:	2308      	movs	r3, #8
 8009926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009928:	2340      	movs	r3, #64	@ 0x40
 800992a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800992c:	2300      	movs	r3, #0
 800992e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009934:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009936:	f107 0308 	add.w	r3, r7, #8
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff fe66 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fab6 	bl	8009eb4 <SDMMC_GetCmdResp7>
 8009948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800994a:	69fb      	ldr	r3, [r7, #28]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3720      	adds	r7, #32
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009962:	2337      	movs	r3, #55	@ 0x37
 8009964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009966:	2340      	movs	r3, #64	@ 0x40
 8009968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800996a:	2300      	movs	r3, #0
 800996c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800996e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009972:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009974:	f107 0308 	add.w	r3, r7, #8
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff fe47 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009984:	2137      	movs	r1, #55	@ 0x37
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f8aa 	bl	8009ae0 <SDMMC_GetCmdResp1>
 800998c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800998e:	69fb      	ldr	r3, [r7, #28]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3720      	adds	r7, #32
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80099a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80099ae:	2329      	movs	r3, #41	@ 0x29
 80099b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099b2:	2340      	movs	r3, #64	@ 0x40
 80099b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099c0:	f107 0308 	add.w	r3, r7, #8
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7ff fe21 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f9bd 	bl	8009d4c <SDMMC_GetCmdResp3>
 80099d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099d4:	69fb      	ldr	r3, [r7, #28]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3720      	adds	r7, #32
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b088      	sub	sp, #32
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80099ea:	2302      	movs	r3, #2
 80099ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80099ee:	23c0      	movs	r3, #192	@ 0xc0
 80099f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099f2:	2300      	movs	r3, #0
 80099f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099fc:	f107 0308 	add.w	r3, r7, #8
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff fe03 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f957 	bl	8009cbc <SDMMC_GetCmdResp2>
 8009a0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a10:	69fb      	ldr	r3, [r7, #28]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3720      	adds	r7, #32
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b088      	sub	sp, #32
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009a28:	2309      	movs	r3, #9
 8009a2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a2c:	23c0      	movs	r3, #192	@ 0xc0
 8009a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a30:	2300      	movs	r3, #0
 8009a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a3a:	f107 0308 	add.w	r3, r7, #8
 8009a3e:	4619      	mov	r1, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7ff fde4 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f938 	bl	8009cbc <SDMMC_GetCmdResp2>
 8009a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a4e:	69fb      	ldr	r3, [r7, #28]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3720      	adds	r7, #32
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009a66:	2303      	movs	r3, #3
 8009a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a6a:	2340      	movs	r3, #64	@ 0x40
 8009a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a78:	f107 0308 	add.w	r3, r7, #8
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff fdc5 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009a84:	683a      	ldr	r2, [r7, #0]
 8009a86:	2103      	movs	r1, #3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f99d 	bl	8009dc8 <SDMMC_GetCmdResp6>
 8009a8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a90:	69fb      	ldr	r3, [r7, #28]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3720      	adds	r7, #32
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b088      	sub	sp, #32
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009aa8:	230d      	movs	r3, #13
 8009aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aac:	2340      	movs	r3, #64	@ 0x40
 8009aae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aba:	f107 0308 	add.w	r3, r7, #8
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff fda4 	bl	800960e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009aca:	210d      	movs	r1, #13
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f807 	bl	8009ae0 <SDMMC_GetCmdResp1>
 8009ad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad4:	69fb      	ldr	r3, [r7, #28]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3720      	adds	r7, #32
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	607a      	str	r2, [r7, #4]
 8009aec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009aee:	4b70      	ldr	r3, [pc, #448]	@ (8009cb0 <SDMMC_GetCmdResp1+0x1d0>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a70      	ldr	r2, [pc, #448]	@ (8009cb4 <SDMMC_GetCmdResp1+0x1d4>)
 8009af4:	fba2 2303 	umull	r2, r3, r2, r3
 8009af8:	0a5a      	lsrs	r2, r3, #9
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	fb02 f303 	mul.w	r3, r2, r3
 8009b00:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	1e5a      	subs	r2, r3, #1
 8009b06:	61fa      	str	r2, [r7, #28]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d102      	bne.n	8009b12 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b10:	e0c9      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b16:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0ef      	beq.n	8009b02 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1ea      	bne.n	8009b02 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b30:	f003 0304 	and.w	r3, r3, #4
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d004      	beq.n	8009b42 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2204      	movs	r2, #4
 8009b3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b3e:	2304      	movs	r3, #4
 8009b40:	e0b1      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d004      	beq.n	8009b58 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e0a6      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	22c5      	movs	r2, #197	@ 0xc5
 8009b5c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f7ff fd7f 	bl	8009662 <SDIO_GetCommandResponse>
 8009b64:	4603      	mov	r3, r0
 8009b66:	461a      	mov	r2, r3
 8009b68:	7afb      	ldrb	r3, [r7, #11]
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d001      	beq.n	8009b72 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e099      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009b72:	2100      	movs	r1, #0
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f7ff fd81 	bl	800967c <SDIO_GetResponse>
 8009b7a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8009cb8 <SDMMC_GetCmdResp1+0x1d8>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009b86:	2300      	movs	r3, #0
 8009b88:	e08d      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	da02      	bge.n	8009b96 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009b90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009b94:	e087      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ba0:	2340      	movs	r3, #64	@ 0x40
 8009ba2:	e080      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009bae:	2380      	movs	r3, #128	@ 0x80
 8009bb0:	e079      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009bbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bc0:	e071      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009bcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bd0:	e069      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009be0:	e061      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009bec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009bf0:	e059      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c00:	e051      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c10:	e049      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009c20:	e041      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009c2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c30:	e039      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009c40:	e031      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009c50:	e029      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009c5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009c60:	e021      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009c6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009c70:	e019      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009c7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009c80:	e011      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009c8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009c90:	e009      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f003 0308 	and.w	r3, r3, #8
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009c9c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009ca0:	e001      	b.n	8009ca6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ca2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	2000000c 	.word	0x2000000c
 8009cb4:	10624dd3 	.word	0x10624dd3
 8009cb8:	fdffe008 	.word	0xfdffe008

08009cbc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8009d44 <SDMMC_GetCmdResp2+0x88>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8009d48 <SDMMC_GetCmdResp2+0x8c>)
 8009cca:	fba2 2303 	umull	r2, r3, r2, r3
 8009cce:	0a5b      	lsrs	r3, r3, #9
 8009cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cd4:	fb02 f303 	mul.w	r3, r2, r3
 8009cd8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	1e5a      	subs	r2, r3, #1
 8009cde:	60fa      	str	r2, [r7, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d102      	bne.n	8009cea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ce4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ce8:	e026      	b.n	8009d38 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0ef      	beq.n	8009cda <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1ea      	bne.n	8009cda <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d004      	beq.n	8009d1a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2204      	movs	r2, #4
 8009d14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d16:	2304      	movs	r3, #4
 8009d18:	e00e      	b.n	8009d38 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d004      	beq.n	8009d30 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e003      	b.n	8009d38 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	22c5      	movs	r2, #197	@ 0xc5
 8009d34:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	2000000c 	.word	0x2000000c
 8009d48:	10624dd3 	.word	0x10624dd3

08009d4c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d54:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc0 <SDMMC_GetCmdResp3+0x74>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a1a      	ldr	r2, [pc, #104]	@ (8009dc4 <SDMMC_GetCmdResp3+0x78>)
 8009d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d5e:	0a5b      	lsrs	r3, r3, #9
 8009d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d64:	fb02 f303 	mul.w	r3, r2, r3
 8009d68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	1e5a      	subs	r2, r3, #1
 8009d6e:	60fa      	str	r2, [r7, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d78:	e01b      	b.n	8009db2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d0ef      	beq.n	8009d6a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1ea      	bne.n	8009d6a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d004      	beq.n	8009daa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2204      	movs	r2, #4
 8009da4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009da6:	2304      	movs	r3, #4
 8009da8:	e003      	b.n	8009db2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	22c5      	movs	r2, #197	@ 0xc5
 8009dae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	2000000c 	.word	0x2000000c
 8009dc4:	10624dd3 	.word	0x10624dd3

08009dc8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009dd6:	4b35      	ldr	r3, [pc, #212]	@ (8009eac <SDMMC_GetCmdResp6+0xe4>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a35      	ldr	r2, [pc, #212]	@ (8009eb0 <SDMMC_GetCmdResp6+0xe8>)
 8009ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8009de0:	0a5b      	lsrs	r3, r3, #9
 8009de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009de6:	fb02 f303 	mul.w	r3, r2, r3
 8009dea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	1e5a      	subs	r2, r3, #1
 8009df0:	61fa      	str	r2, [r7, #28]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d102      	bne.n	8009dfc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009df6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dfa:	e052      	b.n	8009ea2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e00:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0ef      	beq.n	8009dec <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1ea      	bne.n	8009dec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e1a:	f003 0304 	and.w	r3, r3, #4
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d004      	beq.n	8009e2c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2204      	movs	r2, #4
 8009e26:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e28:	2304      	movs	r3, #4
 8009e2a:	e03a      	b.n	8009ea2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d004      	beq.n	8009e42 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e02f      	b.n	8009ea2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f7ff fc0d 	bl	8009662 <SDIO_GetCommandResponse>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	7afb      	ldrb	r3, [r7, #11]
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d001      	beq.n	8009e56 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e025      	b.n	8009ea2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	22c5      	movs	r2, #197	@ 0xc5
 8009e5a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f7ff fc0c 	bl	800967c <SDIO_GetResponse>
 8009e64:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d106      	bne.n	8009e7e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	0c1b      	lsrs	r3, r3, #16
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e011      	b.n	8009ea2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009e88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009e8c:	e009      	b.n	8009ea2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d002      	beq.n	8009e9e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e9c:	e001      	b.n	8009ea2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3720      	adds	r7, #32
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	2000000c 	.word	0x2000000c
 8009eb0:	10624dd3 	.word	0x10624dd3

08009eb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ebc:	4b22      	ldr	r3, [pc, #136]	@ (8009f48 <SDMMC_GetCmdResp7+0x94>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a22      	ldr	r2, [pc, #136]	@ (8009f4c <SDMMC_GetCmdResp7+0x98>)
 8009ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ec6:	0a5b      	lsrs	r3, r3, #9
 8009ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ecc:	fb02 f303 	mul.w	r3, r2, r3
 8009ed0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1e5a      	subs	r2, r3, #1
 8009ed6:	60fa      	str	r2, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009edc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ee0:	e02c      	b.n	8009f3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ee6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0ef      	beq.n	8009ed2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1ea      	bne.n	8009ed2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d004      	beq.n	8009f12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2204      	movs	r2, #4
 8009f0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f0e:	2304      	movs	r3, #4
 8009f10:	e014      	b.n	8009f3c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e009      	b.n	8009f3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2240      	movs	r2, #64	@ 0x40
 8009f38:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f3a:	2300      	movs	r3, #0
  
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr
 8009f48:	2000000c 	.word	0x2000000c
 8009f4c:	10624dd3 	.word	0x10624dd3

08009f50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f58:	4b11      	ldr	r3, [pc, #68]	@ (8009fa0 <SDMMC_GetCmdError+0x50>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a11      	ldr	r2, [pc, #68]	@ (8009fa4 <SDMMC_GetCmdError+0x54>)
 8009f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f62:	0a5b      	lsrs	r3, r3, #9
 8009f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f68:	fb02 f303 	mul.w	r3, r2, r3
 8009f6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	1e5a      	subs	r2, r3, #1
 8009f72:	60fa      	str	r2, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d102      	bne.n	8009f7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f7c:	e009      	b.n	8009f92 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0f1      	beq.n	8009f6e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	22c5      	movs	r2, #197	@ 0xc5
 8009f8e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	2000000c 	.word	0x2000000c
 8009fa4:	10624dd3 	.word	0x10624dd3

08009fa8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009fac:	4904      	ldr	r1, [pc, #16]	@ (8009fc0 <MX_FATFS_Init+0x18>)
 8009fae:	4805      	ldr	r0, [pc, #20]	@ (8009fc4 <MX_FATFS_Init+0x1c>)
 8009fb0:	f003 f886 	bl	800d0c0 <FATFS_LinkDriver>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	4b03      	ldr	r3, [pc, #12]	@ (8009fc8 <MX_FATFS_Init+0x20>)
 8009fba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009fbc:	bf00      	nop
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	2000063c 	.word	0x2000063c
 8009fc4:	0800e334 	.word	0x0800e334
 8009fc8:	20000638 	.word	0x20000638

08009fcc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009fd0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009fe6:	f000 f86b 	bl	800a0c0 <BSP_SD_IsDetected>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d001      	beq.n	8009ff4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e005      	b.n	800a000 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009ff4:	4804      	ldr	r0, [pc, #16]	@ (800a008 <BSP_SD_Init+0x2c>)
 8009ff6:	f7fb f9e7 	bl	80053c8 <HAL_SD_Init>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	20000104 	.word	0x20000104

0800a00c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b088      	sub	sp, #32
 800a010:	af02      	add	r7, sp, #8
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	68f9      	ldr	r1, [r7, #12]
 800a028:	4806      	ldr	r0, [pc, #24]	@ (800a044 <BSP_SD_ReadBlocks+0x38>)
 800a02a:	f7fb fa7d 	bl	8005528 <HAL_SD_ReadBlocks>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a038:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	20000104 	.word	0x20000104

0800a048 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af02      	add	r7, sp, #8
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	4806      	ldr	r0, [pc, #24]	@ (800a080 <BSP_SD_WriteBlocks+0x38>)
 800a066:	f7fb fc45 	bl	80058f4 <HAL_SD_WriteBlocks>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a074:	7dfb      	ldrb	r3, [r7, #23]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20000104 	.word	0x20000104

0800a084 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a088:	4805      	ldr	r0, [pc, #20]	@ (800a0a0 <BSP_SD_GetCardState+0x1c>)
 800a08a:	f7fb ff91 	bl	8005fb0 <HAL_SD_GetCardState>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b04      	cmp	r3, #4
 800a092:	bf14      	ite	ne
 800a094:	2301      	movne	r3, #1
 800a096:	2300      	moveq	r3, #0
 800a098:	b2db      	uxtb	r3, r3
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000104 	.word	0x20000104

0800a0a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a0ac:	6879      	ldr	r1, [r7, #4]
 800a0ae:	4803      	ldr	r0, [pc, #12]	@ (800a0bc <BSP_SD_GetCardInfo+0x18>)
 800a0b0:	f7fb ff52 	bl	8005f58 <HAL_SD_GetCardInfo>
}
 800a0b4:	bf00      	nop
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	20000104 	.word	0x20000104

0800a0c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
 800a0cc:	b2db      	uxtb	r3, r3
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
	...

0800a0dc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a0e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a114 <SD_CheckStatus+0x38>)
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a0ec:	f7ff ffca 	bl	800a084 <BSP_SD_GetCardState>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d107      	bne.n	800a106 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a0f6:	4b07      	ldr	r3, [pc, #28]	@ (800a114 <SD_CheckStatus+0x38>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	f023 0301 	bic.w	r3, r3, #1
 800a100:	b2da      	uxtb	r2, r3
 800a102:	4b04      	ldr	r3, [pc, #16]	@ (800a114 <SD_CheckStatus+0x38>)
 800a104:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a106:	4b03      	ldr	r3, [pc, #12]	@ (800a114 <SD_CheckStatus+0x38>)
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	b2db      	uxtb	r3, r3
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	20000015 	.word	0x20000015

0800a118 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	4603      	mov	r3, r0
 800a120:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a122:	4b0b      	ldr	r3, [pc, #44]	@ (800a150 <SD_initialize+0x38>)
 800a124:	2201      	movs	r2, #1
 800a126:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a128:	f7ff ff58 	bl	8009fdc <BSP_SD_Init>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d107      	bne.n	800a142 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a132:	79fb      	ldrb	r3, [r7, #7]
 800a134:	4618      	mov	r0, r3
 800a136:	f7ff ffd1 	bl	800a0dc <SD_CheckStatus>
 800a13a:	4603      	mov	r3, r0
 800a13c:	461a      	mov	r2, r3
 800a13e:	4b04      	ldr	r3, [pc, #16]	@ (800a150 <SD_initialize+0x38>)
 800a140:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a142:	4b03      	ldr	r3, [pc, #12]	@ (800a150 <SD_initialize+0x38>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	b2db      	uxtb	r3, r3
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20000015 	.word	0x20000015

0800a154 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	4603      	mov	r3, r0
 800a15c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a15e:	79fb      	ldrb	r3, [r7, #7]
 800a160:	4618      	mov	r0, r3
 800a162:	f7ff ffbb 	bl	800a0dc <SD_CheckStatus>
 800a166:	4603      	mov	r3, r0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	4603      	mov	r3, r0
 800a17e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a184:	f04f 33ff 	mov.w	r3, #4294967295
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	68b8      	ldr	r0, [r7, #8]
 800a18e:	f7ff ff3d 	bl	800a00c <BSP_SD_ReadBlocks>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d107      	bne.n	800a1a8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a198:	bf00      	nop
 800a19a:	f7ff ff73 	bl	800a084 <BSP_SD_GetCardState>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1fa      	bne.n	800a19a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b086      	sub	sp, #24
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	603b      	str	r3, [r7, #0]
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	6879      	ldr	r1, [r7, #4]
 800a1ce:	68b8      	ldr	r0, [r7, #8]
 800a1d0:	f7ff ff3a 	bl	800a048 <BSP_SD_WriteBlocks>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d107      	bne.n	800a1ea <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a1da:	bf00      	nop
 800a1dc:	f7ff ff52 	bl	800a084 <BSP_SD_GetCardState>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1fa      	bne.n	800a1dc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08c      	sub	sp, #48	@ 0x30
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	603a      	str	r2, [r7, #0]
 800a1fe:	71fb      	strb	r3, [r7, #7]
 800a200:	460b      	mov	r3, r1
 800a202:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a20a:	4b25      	ldr	r3, [pc, #148]	@ (800a2a0 <SD_ioctl+0xac>)
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	f003 0301 	and.w	r3, r3, #1
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <SD_ioctl+0x28>
 800a218:	2303      	movs	r3, #3
 800a21a:	e03c      	b.n	800a296 <SD_ioctl+0xa2>

  switch (cmd)
 800a21c:	79bb      	ldrb	r3, [r7, #6]
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d834      	bhi.n	800a28c <SD_ioctl+0x98>
 800a222:	a201      	add	r2, pc, #4	@ (adr r2, 800a228 <SD_ioctl+0x34>)
 800a224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a228:	0800a239 	.word	0x0800a239
 800a22c:	0800a241 	.word	0x0800a241
 800a230:	0800a259 	.word	0x0800a259
 800a234:	0800a273 	.word	0x0800a273
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a23e:	e028      	b.n	800a292 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a240:	f107 030c 	add.w	r3, r7, #12
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff ff2d 	bl	800a0a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a24a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a256:	e01c      	b.n	800a292 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a258:	f107 030c 	add.w	r3, r7, #12
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7ff ff21 	bl	800a0a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a264:	b29a      	uxth	r2, r3
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a270:	e00f      	b.n	800a292 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a272:	f107 030c 	add.w	r3, r7, #12
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff ff14 	bl	800a0a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27e:	0a5a      	lsrs	r2, r3, #9
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a28a:	e002      	b.n	800a292 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a28c:	2304      	movs	r3, #4
 800a28e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a292:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a296:	4618      	mov	r0, r3
 800a298:	3730      	adds	r7, #48	@ 0x30
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000015 	.word	0x20000015

0800a2a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a2ae:	79fb      	ldrb	r3, [r7, #7]
 800a2b0:	4a08      	ldr	r2, [pc, #32]	@ (800a2d4 <disk_status+0x30>)
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	79fa      	ldrb	r2, [r7, #7]
 800a2bc:	4905      	ldr	r1, [pc, #20]	@ (800a2d4 <disk_status+0x30>)
 800a2be:	440a      	add	r2, r1
 800a2c0:	7a12      	ldrb	r2, [r2, #8]
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	4798      	blx	r3
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	20000668 	.word	0x20000668

0800a2d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a2e6:	79fb      	ldrb	r3, [r7, #7]
 800a2e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a324 <disk_initialize+0x4c>)
 800a2ea:	5cd3      	ldrb	r3, [r2, r3]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d114      	bne.n	800a31a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a2f0:	79fb      	ldrb	r3, [r7, #7]
 800a2f2:	4a0c      	ldr	r2, [pc, #48]	@ (800a324 <disk_initialize+0x4c>)
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4413      	add	r3, r2
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	79fa      	ldrb	r2, [r7, #7]
 800a2fe:	4909      	ldr	r1, [pc, #36]	@ (800a324 <disk_initialize+0x4c>)
 800a300:	440a      	add	r2, r1
 800a302:	7a12      	ldrb	r2, [r2, #8]
 800a304:	4610      	mov	r0, r2
 800a306:	4798      	blx	r3
 800a308:	4603      	mov	r3, r0
 800a30a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d103      	bne.n	800a31a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a312:	79fb      	ldrb	r3, [r7, #7]
 800a314:	4a03      	ldr	r2, [pc, #12]	@ (800a324 <disk_initialize+0x4c>)
 800a316:	2101      	movs	r1, #1
 800a318:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20000668 	.word	0x20000668

0800a328 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a328:	b590      	push	{r4, r7, lr}
 800a32a:	b087      	sub	sp, #28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	607a      	str	r2, [r7, #4]
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a338:	7bfb      	ldrb	r3, [r7, #15]
 800a33a:	4a0a      	ldr	r2, [pc, #40]	@ (800a364 <disk_read+0x3c>)
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	689c      	ldr	r4, [r3, #8]
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	4a07      	ldr	r2, [pc, #28]	@ (800a364 <disk_read+0x3c>)
 800a348:	4413      	add	r3, r2
 800a34a:	7a18      	ldrb	r0, [r3, #8]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	47a0      	blx	r4
 800a354:	4603      	mov	r3, r0
 800a356:	75fb      	strb	r3, [r7, #23]
  return res;
 800a358:	7dfb      	ldrb	r3, [r7, #23]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	371c      	adds	r7, #28
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd90      	pop	{r4, r7, pc}
 800a362:	bf00      	nop
 800a364:	20000668 	.word	0x20000668

0800a368 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a368:	b590      	push	{r4, r7, lr}
 800a36a:	b087      	sub	sp, #28
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	607a      	str	r2, [r7, #4]
 800a372:	603b      	str	r3, [r7, #0]
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a378:	7bfb      	ldrb	r3, [r7, #15]
 800a37a:	4a0a      	ldr	r2, [pc, #40]	@ (800a3a4 <disk_write+0x3c>)
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4413      	add	r3, r2
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	68dc      	ldr	r4, [r3, #12]
 800a384:	7bfb      	ldrb	r3, [r7, #15]
 800a386:	4a07      	ldr	r2, [pc, #28]	@ (800a3a4 <disk_write+0x3c>)
 800a388:	4413      	add	r3, r2
 800a38a:	7a18      	ldrb	r0, [r3, #8]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	68b9      	ldr	r1, [r7, #8]
 800a392:	47a0      	blx	r4
 800a394:	4603      	mov	r3, r0
 800a396:	75fb      	strb	r3, [r7, #23]
  return res;
 800a398:	7dfb      	ldrb	r3, [r7, #23]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd90      	pop	{r4, r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000668 	.word	0x20000668

0800a3a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	603a      	str	r2, [r7, #0]
 800a3b2:	71fb      	strb	r3, [r7, #7]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	4a09      	ldr	r2, [pc, #36]	@ (800a3e0 <disk_ioctl+0x38>)
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4413      	add	r3, r2
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	79fa      	ldrb	r2, [r7, #7]
 800a3c6:	4906      	ldr	r1, [pc, #24]	@ (800a3e0 <disk_ioctl+0x38>)
 800a3c8:	440a      	add	r2, r1
 800a3ca:	7a10      	ldrb	r0, [r2, #8]
 800a3cc:	79b9      	ldrb	r1, [r7, #6]
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	4798      	blx	r3
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	73fb      	strb	r3, [r7, #15]
  return res;
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	20000668 	.word	0x20000668

0800a3e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a3f4:	89fb      	ldrh	r3, [r7, #14]
 800a3f6:	021b      	lsls	r3, r3, #8
 800a3f8:	b21a      	sxth	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	b21b      	sxth	r3, r3
 800a400:	4313      	orrs	r3, r2
 800a402:	b21b      	sxth	r3, r3
 800a404:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a406:	89fb      	ldrh	r3, [r7, #14]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3303      	adds	r3, #3
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	021b      	lsls	r3, r3, #8
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	3202      	adds	r2, #2
 800a42c:	7812      	ldrb	r2, [r2, #0]
 800a42e:	4313      	orrs	r3, r2
 800a430:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	021b      	lsls	r3, r3, #8
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	3201      	adds	r2, #1
 800a43a:	7812      	ldrb	r2, [r2, #0]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	021b      	lsls	r3, r3, #8
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	7812      	ldrb	r2, [r2, #0]
 800a448:	4313      	orrs	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a44c:	68fb      	ldr	r3, [r7, #12]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	460b      	mov	r3, r1
 800a464:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	887a      	ldrh	r2, [r7, #2]
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	701a      	strb	r2, [r3, #0]
 800a472:	887b      	ldrh	r3, [r7, #2]
 800a474:	0a1b      	lsrs	r3, r3, #8
 800a476:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	607a      	str	r2, [r7, #4]
 800a47e:	887a      	ldrh	r2, [r7, #2]
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	701a      	strb	r2, [r3, #0]
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	b2d2      	uxtb	r2, r2
 800a4a4:	701a      	strb	r2, [r3, #0]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	0a1b      	lsrs	r3, r3, #8
 800a4aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	607a      	str	r2, [r7, #4]
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	b2d2      	uxtb	r2, r2
 800a4b6:	701a      	strb	r2, [r3, #0]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	0a1b      	lsrs	r3, r3, #8
 800a4bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	1c5a      	adds	r2, r3, #1
 800a4c2:	607a      	str	r2, [r7, #4]
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	b2d2      	uxtb	r2, r2
 800a4c8:	701a      	strb	r2, [r3, #0]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	0a1b      	lsrs	r3, r3, #8
 800a4ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	607a      	str	r2, [r7, #4]
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	b2d2      	uxtb	r2, r2
 800a4da:	701a      	strb	r2, [r3, #0]
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00d      	beq.n	800a51e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	1c53      	adds	r3, r2, #1
 800a506:	613b      	str	r3, [r7, #16]
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	1c59      	adds	r1, r3, #1
 800a50c:	6179      	str	r1, [r7, #20]
 800a50e:	7812      	ldrb	r2, [r2, #0]
 800a510:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	3b01      	subs	r3, #1
 800a516:	607b      	str	r3, [r7, #4]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1f1      	bne.n	800a502 <mem_cpy+0x1a>
	}
}
 800a51e:	bf00      	nop
 800a520:	371c      	adds	r7, #28
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a52a:	b480      	push	{r7}
 800a52c:	b087      	sub	sp, #28
 800a52e:	af00      	add	r7, sp, #0
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	1c5a      	adds	r2, r3, #1
 800a53e:	617a      	str	r2, [r7, #20]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	b2d2      	uxtb	r2, r2
 800a544:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	3b01      	subs	r3, #1
 800a54a:	607b      	str	r3, [r7, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1f3      	bne.n	800a53a <mem_set+0x10>
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	371c      	adds	r7, #28
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a560:	b480      	push	{r7}
 800a562:	b089      	sub	sp, #36	@ 0x24
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	61fb      	str	r3, [r7, #28]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	61fa      	str	r2, [r7, #28]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	4619      	mov	r1, r3
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	1c5a      	adds	r2, r3, #1
 800a586:	61ba      	str	r2, [r7, #24]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	1acb      	subs	r3, r1, r3
 800a58c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	3b01      	subs	r3, #1
 800a592:	607b      	str	r3, [r7, #4]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d002      	beq.n	800a5a0 <mem_cmp+0x40>
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0eb      	beq.n	800a578 <mem_cmp+0x18>

	return r;
 800a5a0:	697b      	ldr	r3, [r7, #20]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3724      	adds	r7, #36	@ 0x24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a5b8:	e002      	b.n	800a5c0 <chk_chr+0x12>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	607b      	str	r3, [r7, #4]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d005      	beq.n	800a5d4 <chk_chr+0x26>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d1f2      	bne.n	800a5ba <chk_chr+0xc>
	return *str;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	781b      	ldrb	r3, [r3, #0]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60bb      	str	r3, [r7, #8]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	e029      	b.n	800a64c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a5f8:	4a27      	ldr	r2, [pc, #156]	@ (800a698 <chk_lock+0xb4>)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	011b      	lsls	r3, r3, #4
 800a5fe:	4413      	add	r3, r2
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d01d      	beq.n	800a642 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a606:	4a24      	ldr	r2, [pc, #144]	@ (800a698 <chk_lock+0xb4>)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	011b      	lsls	r3, r3, #4
 800a60c:	4413      	add	r3, r2
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	d116      	bne.n	800a646 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a618:	4a1f      	ldr	r2, [pc, #124]	@ (800a698 <chk_lock+0xb4>)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	011b      	lsls	r3, r3, #4
 800a61e:	4413      	add	r3, r2
 800a620:	3304      	adds	r3, #4
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a628:	429a      	cmp	r2, r3
 800a62a:	d10c      	bne.n	800a646 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a62c:	4a1a      	ldr	r2, [pc, #104]	@ (800a698 <chk_lock+0xb4>)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	011b      	lsls	r3, r3, #4
 800a632:	4413      	add	r3, r2
 800a634:	3308      	adds	r3, #8
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d102      	bne.n	800a646 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a640:	e007      	b.n	800a652 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a642:	2301      	movs	r3, #1
 800a644:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3301      	adds	r3, #1
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d9d2      	bls.n	800a5f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b02      	cmp	r3, #2
 800a656:	d109      	bne.n	800a66c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d102      	bne.n	800a664 <chk_lock+0x80>
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2b02      	cmp	r3, #2
 800a662:	d101      	bne.n	800a668 <chk_lock+0x84>
 800a664:	2300      	movs	r3, #0
 800a666:	e010      	b.n	800a68a <chk_lock+0xa6>
 800a668:	2312      	movs	r3, #18
 800a66a:	e00e      	b.n	800a68a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d108      	bne.n	800a684 <chk_lock+0xa0>
 800a672:	4a09      	ldr	r2, [pc, #36]	@ (800a698 <chk_lock+0xb4>)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	011b      	lsls	r3, r3, #4
 800a678:	4413      	add	r3, r2
 800a67a:	330c      	adds	r3, #12
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a682:	d101      	bne.n	800a688 <chk_lock+0xa4>
 800a684:	2310      	movs	r3, #16
 800a686:	e000      	b.n	800a68a <chk_lock+0xa6>
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	20000648 	.word	0x20000648

0800a69c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	607b      	str	r3, [r7, #4]
 800a6a6:	e002      	b.n	800a6ae <enq_lock+0x12>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	607b      	str	r3, [r7, #4]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d806      	bhi.n	800a6c2 <enq_lock+0x26>
 800a6b4:	4a09      	ldr	r2, [pc, #36]	@ (800a6dc <enq_lock+0x40>)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	011b      	lsls	r3, r3, #4
 800a6ba:	4413      	add	r3, r2
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1f2      	bne.n	800a6a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	bf14      	ite	ne
 800a6c8:	2301      	movne	r3, #1
 800a6ca:	2300      	moveq	r3, #0
 800a6cc:	b2db      	uxtb	r3, r3
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	20000648 	.word	0x20000648

0800a6e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60fb      	str	r3, [r7, #12]
 800a6ee:	e01f      	b.n	800a730 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a6f0:	4a41      	ldr	r2, [pc, #260]	@ (800a7f8 <inc_lock+0x118>)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	011b      	lsls	r3, r3, #4
 800a6f6:	4413      	add	r3, r2
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d113      	bne.n	800a72a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a702:	4a3d      	ldr	r2, [pc, #244]	@ (800a7f8 <inc_lock+0x118>)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	011b      	lsls	r3, r3, #4
 800a708:	4413      	add	r3, r2
 800a70a:	3304      	adds	r3, #4
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a712:	429a      	cmp	r2, r3
 800a714:	d109      	bne.n	800a72a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a716:	4a38      	ldr	r2, [pc, #224]	@ (800a7f8 <inc_lock+0x118>)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	011b      	lsls	r3, r3, #4
 800a71c:	4413      	add	r3, r2
 800a71e:	3308      	adds	r3, #8
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a726:	429a      	cmp	r2, r3
 800a728:	d006      	beq.n	800a738 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3301      	adds	r3, #1
 800a72e:	60fb      	str	r3, [r7, #12]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d9dc      	bls.n	800a6f0 <inc_lock+0x10>
 800a736:	e000      	b.n	800a73a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a738:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d132      	bne.n	800a7a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a740:	2300      	movs	r3, #0
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	e002      	b.n	800a74c <inc_lock+0x6c>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3301      	adds	r3, #1
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d806      	bhi.n	800a760 <inc_lock+0x80>
 800a752:	4a29      	ldr	r2, [pc, #164]	@ (800a7f8 <inc_lock+0x118>)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	011b      	lsls	r3, r3, #4
 800a758:	4413      	add	r3, r2
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1f2      	bne.n	800a746 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2b02      	cmp	r3, #2
 800a764:	d101      	bne.n	800a76a <inc_lock+0x8a>
 800a766:	2300      	movs	r3, #0
 800a768:	e040      	b.n	800a7ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	4922      	ldr	r1, [pc, #136]	@ (800a7f8 <inc_lock+0x118>)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	011b      	lsls	r3, r3, #4
 800a774:	440b      	add	r3, r1
 800a776:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	689a      	ldr	r2, [r3, #8]
 800a77c:	491e      	ldr	r1, [pc, #120]	@ (800a7f8 <inc_lock+0x118>)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	440b      	add	r3, r1
 800a784:	3304      	adds	r3, #4
 800a786:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	695a      	ldr	r2, [r3, #20]
 800a78c:	491a      	ldr	r1, [pc, #104]	@ (800a7f8 <inc_lock+0x118>)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	011b      	lsls	r3, r3, #4
 800a792:	440b      	add	r3, r1
 800a794:	3308      	adds	r3, #8
 800a796:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a798:	4a17      	ldr	r2, [pc, #92]	@ (800a7f8 <inc_lock+0x118>)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	011b      	lsls	r3, r3, #4
 800a79e:	4413      	add	r3, r2
 800a7a0:	330c      	adds	r3, #12
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d009      	beq.n	800a7c0 <inc_lock+0xe0>
 800a7ac:	4a12      	ldr	r2, [pc, #72]	@ (800a7f8 <inc_lock+0x118>)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	011b      	lsls	r3, r3, #4
 800a7b2:	4413      	add	r3, r2
 800a7b4:	330c      	adds	r3, #12
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <inc_lock+0xe0>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	e015      	b.n	800a7ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d108      	bne.n	800a7d8 <inc_lock+0xf8>
 800a7c6:	4a0c      	ldr	r2, [pc, #48]	@ (800a7f8 <inc_lock+0x118>)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	011b      	lsls	r3, r3, #4
 800a7cc:	4413      	add	r3, r2
 800a7ce:	330c      	adds	r3, #12
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	e001      	b.n	800a7dc <inc_lock+0xfc>
 800a7d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a7dc:	4906      	ldr	r1, [pc, #24]	@ (800a7f8 <inc_lock+0x118>)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	011b      	lsls	r3, r3, #4
 800a7e2:	440b      	add	r3, r1
 800a7e4:	330c      	adds	r3, #12
 800a7e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	3301      	adds	r3, #1
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	20000648 	.word	0x20000648

0800a7fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	3b01      	subs	r3, #1
 800a808:	607b      	str	r3, [r7, #4]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d825      	bhi.n	800a85c <dec_lock+0x60>
		n = Files[i].ctr;
 800a810:	4a17      	ldr	r2, [pc, #92]	@ (800a870 <dec_lock+0x74>)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	011b      	lsls	r3, r3, #4
 800a816:	4413      	add	r3, r2
 800a818:	330c      	adds	r3, #12
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a81e:	89fb      	ldrh	r3, [r7, #14]
 800a820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a824:	d101      	bne.n	800a82a <dec_lock+0x2e>
 800a826:	2300      	movs	r3, #0
 800a828:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a82a:	89fb      	ldrh	r3, [r7, #14]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <dec_lock+0x3a>
 800a830:	89fb      	ldrh	r3, [r7, #14]
 800a832:	3b01      	subs	r3, #1
 800a834:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a836:	4a0e      	ldr	r2, [pc, #56]	@ (800a870 <dec_lock+0x74>)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	011b      	lsls	r3, r3, #4
 800a83c:	4413      	add	r3, r2
 800a83e:	330c      	adds	r3, #12
 800a840:	89fa      	ldrh	r2, [r7, #14]
 800a842:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a844:	89fb      	ldrh	r3, [r7, #14]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d105      	bne.n	800a856 <dec_lock+0x5a>
 800a84a:	4a09      	ldr	r2, [pc, #36]	@ (800a870 <dec_lock+0x74>)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	011b      	lsls	r3, r3, #4
 800a850:	4413      	add	r3, r2
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	737b      	strb	r3, [r7, #13]
 800a85a:	e001      	b.n	800a860 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a85c:	2302      	movs	r3, #2
 800a85e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a860:	7b7b      	ldrb	r3, [r7, #13]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	20000648 	.word	0x20000648

0800a874 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	e010      	b.n	800a8a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a882:	4a0d      	ldr	r2, [pc, #52]	@ (800a8b8 <clear_lock+0x44>)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	011b      	lsls	r3, r3, #4
 800a888:	4413      	add	r3, r2
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d105      	bne.n	800a89e <clear_lock+0x2a>
 800a892:	4a09      	ldr	r2, [pc, #36]	@ (800a8b8 <clear_lock+0x44>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	011b      	lsls	r3, r3, #4
 800a898:	4413      	add	r3, r2
 800a89a:	2200      	movs	r2, #0
 800a89c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d9eb      	bls.n	800a882 <clear_lock+0xe>
	}
}
 800a8aa:	bf00      	nop
 800a8ac:	bf00      	nop
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	20000648 	.word	0x20000648

0800a8bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	78db      	ldrb	r3, [r3, #3]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d034      	beq.n	800a93a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	7858      	ldrb	r0, [r3, #1]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	f7ff fd40 	bl	800a368 <disk_write>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d002      	beq.n	800a8f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	73fb      	strb	r3, [r7, #15]
 800a8f2:	e022      	b.n	800a93a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	1ad2      	subs	r2, r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	429a      	cmp	r2, r3
 800a908:	d217      	bcs.n	800a93a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	789b      	ldrb	r3, [r3, #2]
 800a90e:	613b      	str	r3, [r7, #16]
 800a910:	e010      	b.n	800a934 <sync_window+0x78>
					wsect += fs->fsize;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	4413      	add	r3, r2
 800a91a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	7858      	ldrb	r0, [r3, #1]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a926:	2301      	movs	r3, #1
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	f7ff fd1d 	bl	800a368 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	3b01      	subs	r3, #1
 800a932:	613b      	str	r3, [r7, #16]
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d8eb      	bhi.n	800a912 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3718      	adds	r7, #24
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d01b      	beq.n	800a994 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7ff ffad 	bl	800a8bc <sync_window>
 800a962:	4603      	mov	r3, r0
 800a964:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d113      	bne.n	800a994 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	7858      	ldrb	r0, [r3, #1]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a976:	2301      	movs	r3, #1
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	f7ff fcd5 	bl	800a328 <disk_read>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d004      	beq.n	800a98e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a984:	f04f 33ff 	mov.w	r3, #4294967295
 800a988:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a994:	7bfb      	ldrb	r3, [r7, #15]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
	...

0800a9a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f7ff ff87 	bl	800a8bc <sync_window>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d158      	bne.n	800aa6a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	2b03      	cmp	r3, #3
 800a9be:	d148      	bne.n	800aa52 <sync_fs+0xb2>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	791b      	ldrb	r3, [r3, #4]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d144      	bne.n	800aa52 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	3330      	adds	r3, #48	@ 0x30
 800a9cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff fda9 	bl	800a52a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3330      	adds	r3, #48	@ 0x30
 800a9dc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a9e0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7ff fd38 	bl	800a45a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	3330      	adds	r3, #48	@ 0x30
 800a9ee:	4921      	ldr	r1, [pc, #132]	@ (800aa74 <sync_fs+0xd4>)
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7ff fd4d 	bl	800a490 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	3330      	adds	r3, #48	@ 0x30
 800a9fa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a9fe:	491e      	ldr	r1, [pc, #120]	@ (800aa78 <sync_fs+0xd8>)
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7ff fd45 	bl	800a490 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	3330      	adds	r3, #48	@ 0x30
 800aa0a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	4619      	mov	r1, r3
 800aa14:	4610      	mov	r0, r2
 800aa16:	f7ff fd3b 	bl	800a490 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	3330      	adds	r3, #48	@ 0x30
 800aa1e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	4619      	mov	r1, r3
 800aa28:	4610      	mov	r0, r2
 800aa2a:	f7ff fd31 	bl	800a490 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	1c5a      	adds	r2, r3, #1
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	7858      	ldrb	r0, [r3, #1]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa46:	2301      	movs	r3, #1
 800aa48:	f7ff fc8e 	bl	800a368 <disk_write>
			fs->fsi_flag = 0;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	785b      	ldrb	r3, [r3, #1]
 800aa56:	2200      	movs	r2, #0
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff fca4 	bl	800a3a8 <disk_ioctl>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <sync_fs+0xca>
 800aa66:	2301      	movs	r3, #1
 800aa68:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	41615252 	.word	0x41615252
 800aa78:	61417272 	.word	0x61417272

0800aa7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	3b02      	subs	r3, #2
 800aa8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	3b02      	subs	r3, #2
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d301      	bcc.n	800aa9c <clust2sect+0x20>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	e008      	b.n	800aaae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	895b      	ldrh	r3, [r3, #10]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	fb03 f202 	mul.w	r2, r3, r2
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaac:	4413      	add	r3, r2
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b086      	sub	sp, #24
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d904      	bls.n	800aada <get_fat+0x20>
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d302      	bcc.n	800aae0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800aada:	2301      	movs	r3, #1
 800aadc:	617b      	str	r3, [r7, #20]
 800aade:	e08e      	b.n	800abfe <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aae0:	f04f 33ff 	mov.w	r3, #4294967295
 800aae4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	2b03      	cmp	r3, #3
 800aaec:	d061      	beq.n	800abb2 <get_fat+0xf8>
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	dc7b      	bgt.n	800abea <get_fat+0x130>
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d002      	beq.n	800aafc <get_fat+0x42>
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d041      	beq.n	800ab7e <get_fat+0xc4>
 800aafa:	e076      	b.n	800abea <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	085b      	lsrs	r3, r3, #1
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4413      	add	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	6a1a      	ldr	r2, [r3, #32]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	0a5b      	lsrs	r3, r3, #9
 800ab12:	4413      	add	r3, r2
 800ab14:	4619      	mov	r1, r3
 800ab16:	6938      	ldr	r0, [r7, #16]
 800ab18:	f7ff ff14 	bl	800a944 <move_window>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d166      	bne.n	800abf0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	60fa      	str	r2, [r7, #12]
 800ab28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	4413      	add	r3, r2
 800ab30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab34:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	6a1a      	ldr	r2, [r3, #32]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	0a5b      	lsrs	r3, r3, #9
 800ab3e:	4413      	add	r3, r2
 800ab40:	4619      	mov	r1, r3
 800ab42:	6938      	ldr	r0, [r7, #16]
 800ab44:	f7ff fefe 	bl	800a944 <move_window>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d152      	bne.n	800abf4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	4413      	add	r3, r2
 800ab58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab5c:	021b      	lsls	r3, r3, #8
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d002      	beq.n	800ab74 <get_fat+0xba>
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	091b      	lsrs	r3, r3, #4
 800ab72:	e002      	b.n	800ab7a <get_fat+0xc0>
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab7a:	617b      	str	r3, [r7, #20]
			break;
 800ab7c:	e03f      	b.n	800abfe <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	6a1a      	ldr	r2, [r3, #32]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	0a1b      	lsrs	r3, r3, #8
 800ab86:	4413      	add	r3, r2
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6938      	ldr	r0, [r7, #16]
 800ab8c:	f7ff feda 	bl	800a944 <move_window>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d130      	bne.n	800abf8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	005b      	lsls	r3, r3, #1
 800aba0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800aba4:	4413      	add	r3, r2
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff fc1c 	bl	800a3e4 <ld_word>
 800abac:	4603      	mov	r3, r0
 800abae:	617b      	str	r3, [r7, #20]
			break;
 800abb0:	e025      	b.n	800abfe <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	6a1a      	ldr	r2, [r3, #32]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	09db      	lsrs	r3, r3, #7
 800abba:	4413      	add	r3, r2
 800abbc:	4619      	mov	r1, r3
 800abbe:	6938      	ldr	r0, [r7, #16]
 800abc0:	f7ff fec0 	bl	800a944 <move_window>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d118      	bne.n	800abfc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800abd8:	4413      	add	r3, r2
 800abda:	4618      	mov	r0, r3
 800abdc:	f7ff fc1a 	bl	800a414 <ld_dword>
 800abe0:	4603      	mov	r3, r0
 800abe2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800abe6:	617b      	str	r3, [r7, #20]
			break;
 800abe8:	e009      	b.n	800abfe <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800abea:	2301      	movs	r3, #1
 800abec:	617b      	str	r3, [r7, #20]
 800abee:	e006      	b.n	800abfe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abf0:	bf00      	nop
 800abf2:	e004      	b.n	800abfe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abf4:	bf00      	nop
 800abf6:	e002      	b.n	800abfe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800abf8:	bf00      	nop
 800abfa:	e000      	b.n	800abfe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800abfc:	bf00      	nop
		}
	}

	return val;
 800abfe:	697b      	ldr	r3, [r7, #20]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ac08:	b590      	push	{r4, r7, lr}
 800ac0a:	b089      	sub	sp, #36	@ 0x24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ac14:	2302      	movs	r3, #2
 800ac16:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	f240 80d9 	bls.w	800add2 <put_fat+0x1ca>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	f080 80d3 	bcs.w	800add2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	2b03      	cmp	r3, #3
 800ac32:	f000 8096 	beq.w	800ad62 <put_fat+0x15a>
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	f300 80cb 	bgt.w	800add2 <put_fat+0x1ca>
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d002      	beq.n	800ac46 <put_fat+0x3e>
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d06e      	beq.n	800ad22 <put_fat+0x11a>
 800ac44:	e0c5      	b.n	800add2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	61bb      	str	r3, [r7, #24]
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	085b      	lsrs	r3, r3, #1
 800ac4e:	69ba      	ldr	r2, [r7, #24]
 800ac50:	4413      	add	r3, r2
 800ac52:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6a1a      	ldr	r2, [r3, #32]
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	0a5b      	lsrs	r3, r3, #9
 800ac5c:	4413      	add	r3, r2
 800ac5e:	4619      	mov	r1, r3
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f7ff fe6f 	bl	800a944 <move_window>
 800ac66:	4603      	mov	r3, r0
 800ac68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac6a:	7ffb      	ldrb	r3, [r7, #31]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f040 80a9 	bne.w	800adc4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	1c59      	adds	r1, r3, #1
 800ac7c:	61b9      	str	r1, [r7, #24]
 800ac7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac82:	4413      	add	r3, r2
 800ac84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f003 0301 	and.w	r3, r3, #1
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00d      	beq.n	800acac <put_fat+0xa4>
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	b25b      	sxtb	r3, r3
 800ac96:	f003 030f 	and.w	r3, r3, #15
 800ac9a:	b25a      	sxtb	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	011b      	lsls	r3, r3, #4
 800aca2:	b25b      	sxtb	r3, r3
 800aca4:	4313      	orrs	r3, r2
 800aca6:	b25b      	sxtb	r3, r3
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	e001      	b.n	800acb0 <put_fat+0xa8>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	697a      	ldr	r2, [r7, #20]
 800acb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2201      	movs	r2, #1
 800acb8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6a1a      	ldr	r2, [r3, #32]
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	0a5b      	lsrs	r3, r3, #9
 800acc2:	4413      	add	r3, r2
 800acc4:	4619      	mov	r1, r3
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f7ff fe3c 	bl	800a944 <move_window>
 800accc:	4603      	mov	r3, r0
 800acce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800acd0:	7ffb      	ldrb	r3, [r7, #31]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d178      	bne.n	800adc8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace2:	4413      	add	r3, r2
 800ace4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d003      	beq.n	800acf8 <put_fat+0xf0>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	091b      	lsrs	r3, r3, #4
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	e00e      	b.n	800ad16 <put_fat+0x10e>
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	b25b      	sxtb	r3, r3
 800acfe:	f023 030f 	bic.w	r3, r3, #15
 800ad02:	b25a      	sxtb	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	0a1b      	lsrs	r3, r3, #8
 800ad08:	b25b      	sxtb	r3, r3
 800ad0a:	f003 030f 	and.w	r3, r3, #15
 800ad0e:	b25b      	sxtb	r3, r3
 800ad10:	4313      	orrs	r3, r2
 800ad12:	b25b      	sxtb	r3, r3
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	70da      	strb	r2, [r3, #3]
			break;
 800ad20:	e057      	b.n	800add2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6a1a      	ldr	r2, [r3, #32]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	0a1b      	lsrs	r3, r3, #8
 800ad2a:	4413      	add	r3, r2
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f7ff fe08 	bl	800a944 <move_window>
 800ad34:	4603      	mov	r3, r0
 800ad36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad38:	7ffb      	ldrb	r3, [r7, #31]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d146      	bne.n	800adcc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	005b      	lsls	r3, r3, #1
 800ad48:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ad4c:	4413      	add	r3, r2
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	b292      	uxth	r2, r2
 800ad52:	4611      	mov	r1, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7ff fb80 	bl	800a45a <st_word>
			fs->wflag = 1;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	70da      	strb	r2, [r3, #3]
			break;
 800ad60:	e037      	b.n	800add2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6a1a      	ldr	r2, [r3, #32]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	09db      	lsrs	r3, r3, #7
 800ad6a:	4413      	add	r3, r2
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f7ff fde8 	bl	800a944 <move_window>
 800ad74:	4603      	mov	r3, r0
 800ad76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad78:	7ffb      	ldrb	r3, [r7, #31]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d128      	bne.n	800add0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ad92:	4413      	add	r3, r2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fb3d 	bl	800a414 <ld_dword>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ada0:	4323      	orrs	r3, r4
 800ada2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800adb2:	4413      	add	r3, r2
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7ff fb6a 	bl	800a490 <st_dword>
			fs->wflag = 1;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2201      	movs	r2, #1
 800adc0:	70da      	strb	r2, [r3, #3]
			break;
 800adc2:	e006      	b.n	800add2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800adc4:	bf00      	nop
 800adc6:	e004      	b.n	800add2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800adc8:	bf00      	nop
 800adca:	e002      	b.n	800add2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800adcc:	bf00      	nop
 800adce:	e000      	b.n	800add2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800add0:	bf00      	nop
		}
	}
	return res;
 800add2:	7ffb      	ldrb	r3, [r7, #31]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3724      	adds	r7, #36	@ 0x24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd90      	pop	{r4, r7, pc}

0800addc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b088      	sub	sp, #32
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d904      	bls.n	800ae02 <remove_chain+0x26>
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d301      	bcc.n	800ae06 <remove_chain+0x2a>
 800ae02:	2302      	movs	r3, #2
 800ae04:	e04b      	b.n	800ae9e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00c      	beq.n	800ae26 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ae0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae10:	6879      	ldr	r1, [r7, #4]
 800ae12:	69b8      	ldr	r0, [r7, #24]
 800ae14:	f7ff fef8 	bl	800ac08 <put_fat>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ae1c:	7ffb      	ldrb	r3, [r7, #31]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <remove_chain+0x4a>
 800ae22:	7ffb      	ldrb	r3, [r7, #31]
 800ae24:	e03b      	b.n	800ae9e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ae26:	68b9      	ldr	r1, [r7, #8]
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f7ff fe46 	bl	800aaba <get_fat>
 800ae2e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d031      	beq.n	800ae9a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d101      	bne.n	800ae40 <remove_chain+0x64>
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	e02e      	b.n	800ae9e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae46:	d101      	bne.n	800ae4c <remove_chain+0x70>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e028      	b.n	800ae9e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	68b9      	ldr	r1, [r7, #8]
 800ae50:	69b8      	ldr	r0, [r7, #24]
 800ae52:	f7ff fed9 	bl	800ac08 <put_fat>
 800ae56:	4603      	mov	r3, r0
 800ae58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ae5a:	7ffb      	ldrb	r3, [r7, #31]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d001      	beq.n	800ae64 <remove_chain+0x88>
 800ae60:	7ffb      	ldrb	r3, [r7, #31]
 800ae62:	e01c      	b.n	800ae9e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	691a      	ldr	r2, [r3, #16]
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	695b      	ldr	r3, [r3, #20]
 800ae6c:	3b02      	subs	r3, #2
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d20b      	bcs.n	800ae8a <remove_chain+0xae>
			fs->free_clst++;
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	1c5a      	adds	r2, r3, #1
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	791b      	ldrb	r3, [r3, #4]
 800ae80:	f043 0301 	orr.w	r3, r3, #1
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d3c6      	bcc.n	800ae26 <remove_chain+0x4a>
 800ae98:	e000      	b.n	800ae9c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ae9a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3720      	adds	r7, #32
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b088      	sub	sp, #32
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10d      	bne.n	800aed8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d004      	beq.n	800aed2 <create_chain+0x2c>
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	69ba      	ldr	r2, [r7, #24]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d31b      	bcc.n	800af0a <create_chain+0x64>
 800aed2:	2301      	movs	r3, #1
 800aed4:	61bb      	str	r3, [r7, #24]
 800aed6:	e018      	b.n	800af0a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f7ff fded 	bl	800aaba <get_fat>
 800aee0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d801      	bhi.n	800aeec <create_chain+0x46>
 800aee8:	2301      	movs	r3, #1
 800aeea:	e070      	b.n	800afce <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef2:	d101      	bne.n	800aef8 <create_chain+0x52>
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	e06a      	b.n	800afce <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d201      	bcs.n	800af06 <create_chain+0x60>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	e063      	b.n	800afce <create_chain+0x128>
		scl = clst;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	3301      	adds	r3, #1
 800af12:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	69fa      	ldr	r2, [r7, #28]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d307      	bcc.n	800af2e <create_chain+0x88>
				ncl = 2;
 800af1e:	2302      	movs	r3, #2
 800af20:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800af22:	69fa      	ldr	r2, [r7, #28]
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	429a      	cmp	r2, r3
 800af28:	d901      	bls.n	800af2e <create_chain+0x88>
 800af2a:	2300      	movs	r3, #0
 800af2c:	e04f      	b.n	800afce <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800af2e:	69f9      	ldr	r1, [r7, #28]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff fdc2 	bl	800aaba <get_fat>
 800af36:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00e      	beq.n	800af5c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d003      	beq.n	800af4c <create_chain+0xa6>
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4a:	d101      	bne.n	800af50 <create_chain+0xaa>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	e03e      	b.n	800afce <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800af50:	69fa      	ldr	r2, [r7, #28]
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	429a      	cmp	r2, r3
 800af56:	d1da      	bne.n	800af0e <create_chain+0x68>
 800af58:	2300      	movs	r3, #0
 800af5a:	e038      	b.n	800afce <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800af5c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800af5e:	f04f 32ff 	mov.w	r2, #4294967295
 800af62:	69f9      	ldr	r1, [r7, #28]
 800af64:	6938      	ldr	r0, [r7, #16]
 800af66:	f7ff fe4f 	bl	800ac08 <put_fat>
 800af6a:	4603      	mov	r3, r0
 800af6c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d109      	bne.n	800af88 <create_chain+0xe2>
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d006      	beq.n	800af88 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800af7a:	69fa      	ldr	r2, [r7, #28]
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6938      	ldr	r0, [r7, #16]
 800af80:	f7ff fe42 	bl	800ac08 <put_fat>
 800af84:	4603      	mov	r3, r0
 800af86:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800af88:	7dfb      	ldrb	r3, [r7, #23]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d116      	bne.n	800afbc <create_chain+0x116>
		fs->last_clst = ncl;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	69fa      	ldr	r2, [r7, #28]
 800af92:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	691a      	ldr	r2, [r3, #16]
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	3b02      	subs	r3, #2
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d804      	bhi.n	800afac <create_chain+0x106>
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	1e5a      	subs	r2, r3, #1
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	791b      	ldrb	r3, [r3, #4]
 800afb0:	f043 0301 	orr.w	r3, r3, #1
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	711a      	strb	r2, [r3, #4]
 800afba:	e007      	b.n	800afcc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d102      	bne.n	800afc8 <create_chain+0x122>
 800afc2:	f04f 33ff 	mov.w	r3, #4294967295
 800afc6:	e000      	b.n	800afca <create_chain+0x124>
 800afc8:	2301      	movs	r3, #1
 800afca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800afcc:	69fb      	ldr	r3, [r7, #28]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3720      	adds	r7, #32
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b087      	sub	sp, #28
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afea:	3304      	adds	r3, #4
 800afec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	0a5b      	lsrs	r3, r3, #9
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	8952      	ldrh	r2, [r2, #10]
 800aff6:	fbb3 f3f2 	udiv	r3, r3, r2
 800affa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	1d1a      	adds	r2, r3, #4
 800b000:	613a      	str	r2, [r7, #16]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <clmt_clust+0x3a>
 800b00c:	2300      	movs	r3, #0
 800b00e:	e010      	b.n	800b032 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	429a      	cmp	r2, r3
 800b016:	d307      	bcc.n	800b028 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b018:	697a      	ldr	r2, [r7, #20]
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	617b      	str	r3, [r7, #20]
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	3304      	adds	r3, #4
 800b024:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b026:	e7e9      	b.n	800affc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b028:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	4413      	add	r3, r2
}
 800b032:	4618      	mov	r0, r3
 800b034:	371c      	adds	r7, #28
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b086      	sub	sp, #24
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b054:	d204      	bcs.n	800b060 <dir_sdi+0x22>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	f003 031f 	and.w	r3, r3, #31
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b060:	2302      	movs	r3, #2
 800b062:	e063      	b.n	800b12c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d106      	bne.n	800b084 <dir_sdi+0x46>
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d902      	bls.n	800b084 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b082:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10c      	bne.n	800b0a4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	095b      	lsrs	r3, r3, #5
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	8912      	ldrh	r2, [r2, #8]
 800b092:	4293      	cmp	r3, r2
 800b094:	d301      	bcc.n	800b09a <dir_sdi+0x5c>
 800b096:	2302      	movs	r3, #2
 800b098:	e048      	b.n	800b12c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	61da      	str	r2, [r3, #28]
 800b0a2:	e029      	b.n	800b0f8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	895b      	ldrh	r3, [r3, #10]
 800b0a8:	025b      	lsls	r3, r3, #9
 800b0aa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b0ac:	e019      	b.n	800b0e2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6979      	ldr	r1, [r7, #20]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff fd01 	bl	800aaba <get_fat>
 800b0b8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c0:	d101      	bne.n	800b0c6 <dir_sdi+0x88>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e032      	b.n	800b12c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d904      	bls.n	800b0d6 <dir_sdi+0x98>
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	695b      	ldr	r3, [r3, #20]
 800b0d0:	697a      	ldr	r2, [r7, #20]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d301      	bcc.n	800b0da <dir_sdi+0x9c>
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	e028      	b.n	800b12c <dir_sdi+0xee>
			ofs -= csz;
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b0e2:	683a      	ldr	r2, [r7, #0]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d2e1      	bcs.n	800b0ae <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b0ea:	6979      	ldr	r1, [r7, #20]
 800b0ec:	6938      	ldr	r0, [r7, #16]
 800b0ee:	f7ff fcc5 	bl	800aa7c <clust2sect>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <dir_sdi+0xcc>
 800b106:	2302      	movs	r3, #2
 800b108:	e010      	b.n	800b12c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	69da      	ldr	r2, [r3, #28]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	0a5b      	lsrs	r3, r3, #9
 800b112:	441a      	add	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b124:	441a      	add	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	3320      	adds	r3, #32
 800b14a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	69db      	ldr	r3, [r3, #28]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d003      	beq.n	800b15c <dir_next+0x28>
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b15a:	d301      	bcc.n	800b160 <dir_next+0x2c>
 800b15c:	2304      	movs	r3, #4
 800b15e:	e0aa      	b.n	800b2b6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b166:	2b00      	cmp	r3, #0
 800b168:	f040 8098 	bne.w	800b29c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10b      	bne.n	800b196 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	095b      	lsrs	r3, r3, #5
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	8912      	ldrh	r2, [r2, #8]
 800b186:	4293      	cmp	r3, r2
 800b188:	f0c0 8088 	bcc.w	800b29c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	61da      	str	r2, [r3, #28]
 800b192:	2304      	movs	r3, #4
 800b194:	e08f      	b.n	800b2b6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	0a5b      	lsrs	r3, r3, #9
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	8952      	ldrh	r2, [r2, #10]
 800b19e:	3a01      	subs	r2, #1
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d17a      	bne.n	800b29c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	f7ff fc83 	bl	800aaba <get_fat>
 800b1b4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d801      	bhi.n	800b1c0 <dir_next+0x8c>
 800b1bc:	2302      	movs	r3, #2
 800b1be:	e07a      	b.n	800b2b6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c6:	d101      	bne.n	800b1cc <dir_next+0x98>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e074      	b.n	800b2b6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	697a      	ldr	r2, [r7, #20]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d358      	bcc.n	800b288 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d104      	bne.n	800b1e6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	61da      	str	r2, [r3, #28]
 800b1e2:	2304      	movs	r3, #4
 800b1e4:	e067      	b.n	800b2b6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	f7ff fe59 	bl	800aea6 <create_chain>
 800b1f4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <dir_next+0xcc>
 800b1fc:	2307      	movs	r3, #7
 800b1fe:	e05a      	b.n	800b2b6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d101      	bne.n	800b20a <dir_next+0xd6>
 800b206:	2302      	movs	r3, #2
 800b208:	e055      	b.n	800b2b6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b210:	d101      	bne.n	800b216 <dir_next+0xe2>
 800b212:	2301      	movs	r3, #1
 800b214:	e04f      	b.n	800b2b6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f7ff fb50 	bl	800a8bc <sync_window>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <dir_next+0xf2>
 800b222:	2301      	movs	r3, #1
 800b224:	e047      	b.n	800b2b6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3330      	adds	r3, #48	@ 0x30
 800b22a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b22e:	2100      	movs	r1, #0
 800b230:	4618      	mov	r0, r3
 800b232:	f7ff f97a 	bl	800a52a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b236:	2300      	movs	r3, #0
 800b238:	613b      	str	r3, [r7, #16]
 800b23a:	6979      	ldr	r1, [r7, #20]
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f7ff fc1d 	bl	800aa7c <clust2sect>
 800b242:	4602      	mov	r2, r0
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b248:	e012      	b.n	800b270 <dir_next+0x13c>
						fs->wflag = 1;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2201      	movs	r2, #1
 800b24e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7ff fb33 	bl	800a8bc <sync_window>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <dir_next+0x12c>
 800b25c:	2301      	movs	r3, #1
 800b25e:	e02a      	b.n	800b2b6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	3301      	adds	r3, #1
 800b264:	613b      	str	r3, [r7, #16]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	895b      	ldrh	r3, [r3, #10]
 800b274:	461a      	mov	r2, r3
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	4293      	cmp	r3, r2
 800b27a:	d3e6      	bcc.n	800b24a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	1ad2      	subs	r2, r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b28e:	6979      	ldr	r1, [r7, #20]
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7ff fbf3 	bl	800aa7c <clust2sect>
 800b296:	4602      	mov	r2, r0
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ae:	441a      	add	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b086      	sub	sp, #24
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff feb4 	bl	800b03e <dir_sdi>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b2da:	7dfb      	ldrb	r3, [r7, #23]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d12b      	bne.n	800b338 <dir_alloc+0x7a>
		n = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	69db      	ldr	r3, [r3, #28]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f7ff fb2a 	bl	800a944 <move_window>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d11d      	bne.n	800b336 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2be5      	cmp	r3, #229	@ 0xe5
 800b302:	d004      	beq.n	800b30e <dir_alloc+0x50>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6a1b      	ldr	r3, [r3, #32]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d107      	bne.n	800b31e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	3301      	adds	r3, #1
 800b312:	613b      	str	r3, [r7, #16]
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d102      	bne.n	800b322 <dir_alloc+0x64>
 800b31c:	e00c      	b.n	800b338 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b31e:	2300      	movs	r3, #0
 800b320:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b322:	2101      	movs	r1, #1
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7ff ff05 	bl	800b134 <dir_next>
 800b32a:	4603      	mov	r3, r0
 800b32c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b32e:	7dfb      	ldrb	r3, [r7, #23]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d0d7      	beq.n	800b2e4 <dir_alloc+0x26>
 800b334:	e000      	b.n	800b338 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b336:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	2b04      	cmp	r3, #4
 800b33c:	d101      	bne.n	800b342 <dir_alloc+0x84>
 800b33e:	2307      	movs	r3, #7
 800b340:	75fb      	strb	r3, [r7, #23]
	return res;
 800b342:	7dfb      	ldrb	r3, [r7, #23]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	331a      	adds	r3, #26
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7ff f842 	bl	800a3e4 <ld_word>
 800b360:	4603      	mov	r3, r0
 800b362:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d109      	bne.n	800b380 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	3314      	adds	r3, #20
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff f837 	bl	800a3e4 <ld_word>
 800b376:	4603      	mov	r3, r0
 800b378:	041b      	lsls	r3, r3, #16
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b380:	68fb      	ldr	r3, [r7, #12]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b084      	sub	sp, #16
 800b38e:	af00      	add	r7, sp, #0
 800b390:	60f8      	str	r0, [r7, #12]
 800b392:	60b9      	str	r1, [r7, #8]
 800b394:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	331a      	adds	r3, #26
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	b292      	uxth	r2, r2
 800b39e:	4611      	mov	r1, r2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7ff f85a 	bl	800a45a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	2b03      	cmp	r3, #3
 800b3ac:	d109      	bne.n	800b3c2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f103 0214 	add.w	r2, r3, #20
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	0c1b      	lsrs	r3, r3, #16
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	4610      	mov	r0, r2
 800b3be:	f7ff f84c 	bl	800a45a <st_word>
	}
}
 800b3c2:	bf00      	nop
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b086      	sub	sp, #24
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b3d4:	2304      	movs	r3, #4
 800b3d6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b3de:	e03c      	b.n	800b45a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	69db      	ldr	r3, [r3, #28]
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6938      	ldr	r0, [r7, #16]
 800b3e8:	f7ff faac 	bl	800a944 <move_window>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b3f0:	7dfb      	ldrb	r3, [r7, #23]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d136      	bne.n	800b464 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a1b      	ldr	r3, [r3, #32]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d102      	bne.n	800b40a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b404:	2304      	movs	r3, #4
 800b406:	75fb      	strb	r3, [r7, #23]
 800b408:	e031      	b.n	800b46e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	330b      	adds	r3, #11
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b416:	73bb      	strb	r3, [r7, #14]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	7bba      	ldrb	r2, [r7, #14]
 800b41c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	2be5      	cmp	r3, #229	@ 0xe5
 800b422:	d011      	beq.n	800b448 <dir_read+0x7e>
 800b424:	7bfb      	ldrb	r3, [r7, #15]
 800b426:	2b2e      	cmp	r3, #46	@ 0x2e
 800b428:	d00e      	beq.n	800b448 <dir_read+0x7e>
 800b42a:	7bbb      	ldrb	r3, [r7, #14]
 800b42c:	2b0f      	cmp	r3, #15
 800b42e:	d00b      	beq.n	800b448 <dir_read+0x7e>
 800b430:	7bbb      	ldrb	r3, [r7, #14]
 800b432:	f023 0320 	bic.w	r3, r3, #32
 800b436:	2b08      	cmp	r3, #8
 800b438:	bf0c      	ite	eq
 800b43a:	2301      	moveq	r3, #1
 800b43c:	2300      	movne	r3, #0
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	461a      	mov	r2, r3
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	4293      	cmp	r3, r2
 800b446:	d00f      	beq.n	800b468 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b448:	2100      	movs	r1, #0
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7ff fe72 	bl	800b134 <dir_next>
 800b450:	4603      	mov	r3, r0
 800b452:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d108      	bne.n	800b46c <dir_read+0xa2>
	while (dp->sect) {
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	69db      	ldr	r3, [r3, #28]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1be      	bne.n	800b3e0 <dir_read+0x16>
 800b462:	e004      	b.n	800b46e <dir_read+0xa4>
		if (res != FR_OK) break;
 800b464:	bf00      	nop
 800b466:	e002      	b.n	800b46e <dir_read+0xa4>
				break;
 800b468:	bf00      	nop
 800b46a:	e000      	b.n	800b46e <dir_read+0xa4>
		if (res != FR_OK) break;
 800b46c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b46e:	7dfb      	ldrb	r3, [r7, #23]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <dir_read+0xb0>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	61da      	str	r2, [r3, #28]
	return res;
 800b47a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3718      	adds	r7, #24
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b492:	2100      	movs	r1, #0
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7ff fdd2 	bl	800b03e <dir_sdi>
 800b49a:	4603      	mov	r3, r0
 800b49c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <dir_find+0x24>
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
 800b4a6:	e03e      	b.n	800b526 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6938      	ldr	r0, [r7, #16]
 800b4b0:	f7ff fa48 	bl	800a944 <move_window>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d12f      	bne.n	800b51e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a1b      	ldr	r3, [r3, #32]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d102      	bne.n	800b4d2 <dir_find+0x4e>
 800b4cc:	2304      	movs	r3, #4
 800b4ce:	75fb      	strb	r3, [r7, #23]
 800b4d0:	e028      	b.n	800b524 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a1b      	ldr	r3, [r3, #32]
 800b4d6:	330b      	adds	r3, #11
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	330b      	adds	r3, #11
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	f003 0308 	and.w	r3, r3, #8
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10a      	bne.n	800b50a <dir_find+0x86>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6a18      	ldr	r0, [r3, #32]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	3324      	adds	r3, #36	@ 0x24
 800b4fc:	220b      	movs	r2, #11
 800b4fe:	4619      	mov	r1, r3
 800b500:	f7ff f82e 	bl	800a560 <mem_cmp>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00b      	beq.n	800b522 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b50a:	2100      	movs	r1, #0
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff fe11 	bl	800b134 <dir_next>
 800b512:	4603      	mov	r3, r0
 800b514:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d0c5      	beq.n	800b4a8 <dir_find+0x24>
 800b51c:	e002      	b.n	800b524 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b51e:	bf00      	nop
 800b520:	e000      	b.n	800b524 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b522:	bf00      	nop

	return res;
 800b524:	7dfb      	ldrb	r3, [r7, #23]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b53c:	2101      	movs	r1, #1
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff febd 	bl	800b2be <dir_alloc>
 800b544:	4603      	mov	r3, r0
 800b546:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b548:	7bfb      	ldrb	r3, [r7, #15]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d11c      	bne.n	800b588 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	4619      	mov	r1, r3
 800b554:	68b8      	ldr	r0, [r7, #8]
 800b556:	f7ff f9f5 	bl	800a944 <move_window>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d111      	bne.n	800b588 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	2220      	movs	r2, #32
 800b56a:	2100      	movs	r1, #0
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fe ffdc 	bl	800a52a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a18      	ldr	r0, [r3, #32]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3324      	adds	r3, #36	@ 0x24
 800b57a:	220b      	movs	r2, #11
 800b57c:	4619      	mov	r1, r3
 800b57e:	f7fe ffb3 	bl	800a4e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2201      	movs	r2, #1
 800b586:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b588:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	69db      	ldr	r3, [r3, #28]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f7ff f9cc 	bl	800a944 <move_window>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800b5b0:	7afb      	ldrb	r3, [r7, #11]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d106      	bne.n	800b5c4 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	22e5      	movs	r2, #229	@ 0xe5
 800b5bc:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800b5c4:	7afb      	ldrb	r3, [r7, #11]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
	...

0800b5d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b088      	sub	sp, #32
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3324      	adds	r3, #36	@ 0x24
 800b5e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b5e6:	220b      	movs	r2, #11
 800b5e8:	2120      	movs	r1, #32
 800b5ea:	68b8      	ldr	r0, [r7, #8]
 800b5ec:	f7fe ff9d 	bl	800a52a <mem_set>
	si = i = 0; ni = 8;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	613b      	str	r3, [r7, #16]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	61fb      	str	r3, [r7, #28]
 800b5f8:	2308      	movs	r3, #8
 800b5fa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	61fa      	str	r2, [r7, #28]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	4413      	add	r3, r2
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b60a:	7efb      	ldrb	r3, [r7, #27]
 800b60c:	2b20      	cmp	r3, #32
 800b60e:	d94e      	bls.n	800b6ae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b610:	7efb      	ldrb	r3, [r7, #27]
 800b612:	2b2f      	cmp	r3, #47	@ 0x2f
 800b614:	d006      	beq.n	800b624 <create_name+0x54>
 800b616:	7efb      	ldrb	r3, [r7, #27]
 800b618:	2b5c      	cmp	r3, #92	@ 0x5c
 800b61a:	d110      	bne.n	800b63e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b61c:	e002      	b.n	800b624 <create_name+0x54>
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	3301      	adds	r3, #1
 800b622:	61fb      	str	r3, [r7, #28]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	4413      	add	r3, r2
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b62e:	d0f6      	beq.n	800b61e <create_name+0x4e>
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	4413      	add	r3, r2
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	2b5c      	cmp	r3, #92	@ 0x5c
 800b63a:	d0f0      	beq.n	800b61e <create_name+0x4e>
			break;
 800b63c:	e038      	b.n	800b6b0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b63e:	7efb      	ldrb	r3, [r7, #27]
 800b640:	2b2e      	cmp	r3, #46	@ 0x2e
 800b642:	d003      	beq.n	800b64c <create_name+0x7c>
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d30c      	bcc.n	800b666 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	2b0b      	cmp	r3, #11
 800b650:	d002      	beq.n	800b658 <create_name+0x88>
 800b652:	7efb      	ldrb	r3, [r7, #27]
 800b654:	2b2e      	cmp	r3, #46	@ 0x2e
 800b656:	d001      	beq.n	800b65c <create_name+0x8c>
 800b658:	2306      	movs	r3, #6
 800b65a:	e044      	b.n	800b6e6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b65c:	2308      	movs	r3, #8
 800b65e:	613b      	str	r3, [r7, #16]
 800b660:	230b      	movs	r3, #11
 800b662:	617b      	str	r3, [r7, #20]
			continue;
 800b664:	e022      	b.n	800b6ac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b666:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	da04      	bge.n	800b678 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b66e:	7efb      	ldrb	r3, [r7, #27]
 800b670:	3b80      	subs	r3, #128	@ 0x80
 800b672:	4a1f      	ldr	r2, [pc, #124]	@ (800b6f0 <create_name+0x120>)
 800b674:	5cd3      	ldrb	r3, [r2, r3]
 800b676:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b678:	7efb      	ldrb	r3, [r7, #27]
 800b67a:	4619      	mov	r1, r3
 800b67c:	481d      	ldr	r0, [pc, #116]	@ (800b6f4 <create_name+0x124>)
 800b67e:	f7fe ff96 	bl	800a5ae <chk_chr>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d001      	beq.n	800b68c <create_name+0xbc>
 800b688:	2306      	movs	r3, #6
 800b68a:	e02c      	b.n	800b6e6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b68c:	7efb      	ldrb	r3, [r7, #27]
 800b68e:	2b60      	cmp	r3, #96	@ 0x60
 800b690:	d905      	bls.n	800b69e <create_name+0xce>
 800b692:	7efb      	ldrb	r3, [r7, #27]
 800b694:	2b7a      	cmp	r3, #122	@ 0x7a
 800b696:	d802      	bhi.n	800b69e <create_name+0xce>
 800b698:	7efb      	ldrb	r3, [r7, #27]
 800b69a:	3b20      	subs	r3, #32
 800b69c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	613a      	str	r2, [r7, #16]
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	7efa      	ldrb	r2, [r7, #27]
 800b6aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b6ac:	e7a6      	b.n	800b5fc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b6ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	441a      	add	r2, r3
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d101      	bne.n	800b6c4 <create_name+0xf4>
 800b6c0:	2306      	movs	r3, #6
 800b6c2:	e010      	b.n	800b6e6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2be5      	cmp	r3, #229	@ 0xe5
 800b6ca:	d102      	bne.n	800b6d2 <create_name+0x102>
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	2205      	movs	r2, #5
 800b6d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b6d2:	7efb      	ldrb	r3, [r7, #27]
 800b6d4:	2b20      	cmp	r3, #32
 800b6d6:	d801      	bhi.n	800b6dc <create_name+0x10c>
 800b6d8:	2204      	movs	r2, #4
 800b6da:	e000      	b.n	800b6de <create_name+0x10e>
 800b6dc:	2200      	movs	r2, #0
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	330b      	adds	r3, #11
 800b6e2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b6e4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3720      	adds	r7, #32
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	0800e348 	.word	0x0800e348
 800b6f4:	0800d570 	.word	0x0800d570

0800b6f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b70c:	e002      	b.n	800b714 <follow_path+0x1c>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	3301      	adds	r3, #1
 800b712:	603b      	str	r3, [r7, #0]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	2b2f      	cmp	r3, #47	@ 0x2f
 800b71a:	d0f8      	beq.n	800b70e <follow_path+0x16>
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	2b5c      	cmp	r3, #92	@ 0x5c
 800b722:	d0f4      	beq.n	800b70e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	2200      	movs	r2, #0
 800b728:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	2b1f      	cmp	r3, #31
 800b730:	d80a      	bhi.n	800b748 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2280      	movs	r2, #128	@ 0x80
 800b736:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b73a:	2100      	movs	r1, #0
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7ff fc7e 	bl	800b03e <dir_sdi>
 800b742:	4603      	mov	r3, r0
 800b744:	75fb      	strb	r3, [r7, #23]
 800b746:	e043      	b.n	800b7d0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b748:	463b      	mov	r3, r7
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff ff3f 	bl	800b5d0 <create_name>
 800b752:	4603      	mov	r3, r0
 800b754:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b756:	7dfb      	ldrb	r3, [r7, #23]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d134      	bne.n	800b7c6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7ff fe91 	bl	800b484 <dir_find>
 800b762:	4603      	mov	r3, r0
 800b764:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b76c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b76e:	7dfb      	ldrb	r3, [r7, #23]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00a      	beq.n	800b78a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	2b04      	cmp	r3, #4
 800b778:	d127      	bne.n	800b7ca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b77a:	7afb      	ldrb	r3, [r7, #11]
 800b77c:	f003 0304 	and.w	r3, r3, #4
 800b780:	2b00      	cmp	r3, #0
 800b782:	d122      	bne.n	800b7ca <follow_path+0xd2>
 800b784:	2305      	movs	r3, #5
 800b786:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b788:	e01f      	b.n	800b7ca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b78a:	7afb      	ldrb	r3, [r7, #11]
 800b78c:	f003 0304 	and.w	r3, r3, #4
 800b790:	2b00      	cmp	r3, #0
 800b792:	d11c      	bne.n	800b7ce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	799b      	ldrb	r3, [r3, #6]
 800b798:	f003 0310 	and.w	r3, r3, #16
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d102      	bne.n	800b7a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b7a0:	2305      	movs	r3, #5
 800b7a2:	75fb      	strb	r3, [r7, #23]
 800b7a4:	e014      	b.n	800b7d0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b4:	4413      	add	r3, r2
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f7ff fdc7 	bl	800b34c <ld_clust>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b7c4:	e7c0      	b.n	800b748 <follow_path+0x50>
			if (res != FR_OK) break;
 800b7c6:	bf00      	nop
 800b7c8:	e002      	b.n	800b7d0 <follow_path+0xd8>
				break;
 800b7ca:	bf00      	nop
 800b7cc:	e000      	b.n	800b7d0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b7ce:	bf00      	nop
			}
		}
	}

	return res;
 800b7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3718      	adds	r7, #24
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b087      	sub	sp, #28
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d031      	beq.n	800b854 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	617b      	str	r3, [r7, #20]
 800b7f6:	e002      	b.n	800b7fe <get_ldnumber+0x24>
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	617b      	str	r3, [r7, #20]
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	2b20      	cmp	r3, #32
 800b804:	d903      	bls.n	800b80e <get_ldnumber+0x34>
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	2b3a      	cmp	r3, #58	@ 0x3a
 800b80c:	d1f4      	bne.n	800b7f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	2b3a      	cmp	r3, #58	@ 0x3a
 800b814:	d11c      	bne.n	800b850 <get_ldnumber+0x76>
			tp = *path;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	60fa      	str	r2, [r7, #12]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	3b30      	subs	r3, #48	@ 0x30
 800b826:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	2b09      	cmp	r3, #9
 800b82c:	d80e      	bhi.n	800b84c <get_ldnumber+0x72>
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	429a      	cmp	r2, r3
 800b834:	d10a      	bne.n	800b84c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d107      	bne.n	800b84c <get_ldnumber+0x72>
					vol = (int)i;
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	3301      	adds	r3, #1
 800b844:	617b      	str	r3, [r7, #20]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	697a      	ldr	r2, [r7, #20]
 800b84a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	e002      	b.n	800b856 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b850:	2300      	movs	r3, #0
 800b852:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b854:	693b      	ldr	r3, [r7, #16]
}
 800b856:	4618      	mov	r0, r3
 800b858:	371c      	adds	r7, #28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
	...

0800b864 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	70da      	strb	r2, [r3, #3]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f04f 32ff 	mov.w	r2, #4294967295
 800b87a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7ff f860 	bl	800a944 <move_window>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <check_fs+0x2a>
 800b88a:	2304      	movs	r3, #4
 800b88c:	e038      	b.n	800b900 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3330      	adds	r3, #48	@ 0x30
 800b892:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe fda4 	bl	800a3e4 <ld_word>
 800b89c:	4603      	mov	r3, r0
 800b89e:	461a      	mov	r2, r3
 800b8a0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d001      	beq.n	800b8ac <check_fs+0x48>
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	e029      	b.n	800b900 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8b2:	2be9      	cmp	r3, #233	@ 0xe9
 800b8b4:	d009      	beq.n	800b8ca <check_fs+0x66>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8bc:	2beb      	cmp	r3, #235	@ 0xeb
 800b8be:	d11e      	bne.n	800b8fe <check_fs+0x9a>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b8c6:	2b90      	cmp	r3, #144	@ 0x90
 800b8c8:	d119      	bne.n	800b8fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	3330      	adds	r3, #48	@ 0x30
 800b8ce:	3336      	adds	r3, #54	@ 0x36
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fe fd9f 	bl	800a414 <ld_dword>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b8dc:	4a0a      	ldr	r2, [pc, #40]	@ (800b908 <check_fs+0xa4>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d101      	bne.n	800b8e6 <check_fs+0x82>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	e00c      	b.n	800b900 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	3330      	adds	r3, #48	@ 0x30
 800b8ea:	3352      	adds	r3, #82	@ 0x52
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fe fd91 	bl	800a414 <ld_dword>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	4a05      	ldr	r2, [pc, #20]	@ (800b90c <check_fs+0xa8>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d101      	bne.n	800b8fe <check_fs+0x9a>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	e000      	b.n	800b900 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b8fe:	2302      	movs	r3, #2
}
 800b900:	4618      	mov	r0, r3
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	00544146 	.word	0x00544146
 800b90c:	33544146 	.word	0x33544146

0800b910 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b096      	sub	sp, #88	@ 0x58
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	4613      	mov	r3, r2
 800b91c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2200      	movs	r2, #0
 800b922:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f7ff ff58 	bl	800b7da <get_ldnumber>
 800b92a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b92e:	2b00      	cmp	r3, #0
 800b930:	da01      	bge.n	800b936 <find_volume+0x26>
 800b932:	230b      	movs	r3, #11
 800b934:	e22d      	b.n	800bd92 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b936:	4aa1      	ldr	r2, [pc, #644]	@ (800bbbc <find_volume+0x2ac>)
 800b938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b93a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b93e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <find_volume+0x3a>
 800b946:	230c      	movs	r3, #12
 800b948:	e223      	b.n	800bd92 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b94e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b950:	79fb      	ldrb	r3, [r7, #7]
 800b952:	f023 0301 	bic.w	r3, r3, #1
 800b956:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d01a      	beq.n	800b996 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b962:	785b      	ldrb	r3, [r3, #1]
 800b964:	4618      	mov	r0, r3
 800b966:	f7fe fc9d 	bl	800a2a4 <disk_status>
 800b96a:	4603      	mov	r3, r0
 800b96c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b970:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b974:	f003 0301 	and.w	r3, r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10c      	bne.n	800b996 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b97c:	79fb      	ldrb	r3, [r7, #7]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d007      	beq.n	800b992 <find_volume+0x82>
 800b982:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b986:	f003 0304 	and.w	r3, r3, #4
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b98e:	230a      	movs	r3, #10
 800b990:	e1ff      	b.n	800bd92 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b992:	2300      	movs	r3, #0
 800b994:	e1fd      	b.n	800bd92 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b998:	2200      	movs	r2, #0
 800b99a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b99e:	b2da      	uxtb	r2, r3
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a6:	785b      	ldrb	r3, [r3, #1]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fe fc95 	bl	800a2d8 <disk_initialize>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b9b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b9b8:	f003 0301 	and.w	r3, r3, #1
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	e1e6      	b.n	800bd92 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b9c4:	79fb      	ldrb	r3, [r7, #7]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d007      	beq.n	800b9da <find_volume+0xca>
 800b9ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b9ce:	f003 0304 	and.w	r3, r3, #4
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d001      	beq.n	800b9da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b9d6:	230a      	movs	r3, #10
 800b9d8:	e1db      	b.n	800bd92 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b9de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b9e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b9e2:	f7ff ff3f 	bl	800b864 <check_fs>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b9ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d149      	bne.n	800ba88 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9f8:	e01e      	b.n	800ba38 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba02:	011b      	lsls	r3, r3, #4
 800ba04:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ba08:	4413      	add	r3, r2
 800ba0a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0e:	3304      	adds	r3, #4
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d006      	beq.n	800ba24 <find_volume+0x114>
 800ba16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba18:	3308      	adds	r3, #8
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fe fcfa 	bl	800a414 <ld_dword>
 800ba20:	4602      	mov	r2, r0
 800ba22:	e000      	b.n	800ba26 <find_volume+0x116>
 800ba24:	2200      	movs	r2, #0
 800ba26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	3358      	adds	r3, #88	@ 0x58
 800ba2c:	443b      	add	r3, r7
 800ba2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba34:	3301      	adds	r3, #1
 800ba36:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	d9dd      	bls.n	800b9fa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ba3e:	2300      	movs	r3, #0
 800ba40:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ba42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <find_volume+0x13e>
 800ba48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ba4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	3358      	adds	r3, #88	@ 0x58
 800ba54:	443b      	add	r3, r7
 800ba56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ba5a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ba5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d005      	beq.n	800ba6e <find_volume+0x15e>
 800ba62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba66:	f7ff fefd 	bl	800b864 <check_fs>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	e000      	b.n	800ba70 <find_volume+0x160>
 800ba6e:	2303      	movs	r3, #3
 800ba70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ba74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d905      	bls.n	800ba88 <find_volume+0x178>
 800ba7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba7e:	3301      	adds	r3, #1
 800ba80:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	d9e2      	bls.n	800ba4e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ba88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba8c:	2b04      	cmp	r3, #4
 800ba8e:	d101      	bne.n	800ba94 <find_volume+0x184>
 800ba90:	2301      	movs	r3, #1
 800ba92:	e17e      	b.n	800bd92 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ba94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d901      	bls.n	800baa0 <find_volume+0x190>
 800ba9c:	230d      	movs	r3, #13
 800ba9e:	e178      	b.n	800bd92 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800baa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa2:	3330      	adds	r3, #48	@ 0x30
 800baa4:	330b      	adds	r3, #11
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fe fc9c 	bl	800a3e4 <ld_word>
 800baac:	4603      	mov	r3, r0
 800baae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bab2:	d001      	beq.n	800bab8 <find_volume+0x1a8>
 800bab4:	230d      	movs	r3, #13
 800bab6:	e16c      	b.n	800bd92 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baba:	3330      	adds	r3, #48	@ 0x30
 800babc:	3316      	adds	r3, #22
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fe fc90 	bl	800a3e4 <ld_word>
 800bac4:	4603      	mov	r3, r0
 800bac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d106      	bne.n	800badc <find_volume+0x1cc>
 800bace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad0:	3330      	adds	r3, #48	@ 0x30
 800bad2:	3324      	adds	r3, #36	@ 0x24
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fe fc9d 	bl	800a414 <ld_dword>
 800bada:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800badc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bade:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bae0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800bae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800baec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baee:	789b      	ldrb	r3, [r3, #2]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d005      	beq.n	800bb00 <find_volume+0x1f0>
 800baf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf6:	789b      	ldrb	r3, [r3, #2]
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d001      	beq.n	800bb00 <find_volume+0x1f0>
 800bafc:	230d      	movs	r3, #13
 800bafe:	e148      	b.n	800bd92 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb02:	789b      	ldrb	r3, [r3, #2]
 800bb04:	461a      	mov	r2, r3
 800bb06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb08:	fb02 f303 	mul.w	r3, r2, r3
 800bb0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb14:	461a      	mov	r2, r3
 800bb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bb1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1c:	895b      	ldrh	r3, [r3, #10]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d008      	beq.n	800bb34 <find_volume+0x224>
 800bb22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb24:	895b      	ldrh	r3, [r3, #10]
 800bb26:	461a      	mov	r2, r3
 800bb28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2a:	895b      	ldrh	r3, [r3, #10]
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	4013      	ands	r3, r2
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <find_volume+0x228>
 800bb34:	230d      	movs	r3, #13
 800bb36:	e12c      	b.n	800bd92 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3a:	3330      	adds	r3, #48	@ 0x30
 800bb3c:	3311      	adds	r3, #17
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fe fc50 	bl	800a3e4 <ld_word>
 800bb44:	4603      	mov	r3, r0
 800bb46:	461a      	mov	r2, r3
 800bb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4e:	891b      	ldrh	r3, [r3, #8]
 800bb50:	f003 030f 	and.w	r3, r3, #15
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <find_volume+0x24e>
 800bb5a:	230d      	movs	r3, #13
 800bb5c:	e119      	b.n	800bd92 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb60:	3330      	adds	r3, #48	@ 0x30
 800bb62:	3313      	adds	r3, #19
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fe fc3d 	bl	800a3e4 <ld_word>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bb6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d106      	bne.n	800bb82 <find_volume+0x272>
 800bb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb76:	3330      	adds	r3, #48	@ 0x30
 800bb78:	3320      	adds	r3, #32
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fe fc4a 	bl	800a414 <ld_dword>
 800bb80:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb84:	3330      	adds	r3, #48	@ 0x30
 800bb86:	330e      	adds	r3, #14
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fe fc2b 	bl	800a3e4 <ld_word>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bb92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <find_volume+0x28c>
 800bb98:	230d      	movs	r3, #13
 800bb9a:	e0fa      	b.n	800bd92 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bb9c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bb9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bba0:	4413      	add	r3, r2
 800bba2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bba4:	8912      	ldrh	r2, [r2, #8]
 800bba6:	0912      	lsrs	r2, r2, #4
 800bba8:	b292      	uxth	r2, r2
 800bbaa:	4413      	add	r3, r2
 800bbac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bbae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d204      	bcs.n	800bbc0 <find_volume+0x2b0>
 800bbb6:	230d      	movs	r3, #13
 800bbb8:	e0eb      	b.n	800bd92 <find_volume+0x482>
 800bbba:	bf00      	nop
 800bbbc:	20000640 	.word	0x20000640
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bbc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbc8:	8952      	ldrh	r2, [r2, #10]
 800bbca:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbce:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d101      	bne.n	800bbda <find_volume+0x2ca>
 800bbd6:	230d      	movs	r3, #13
 800bbd8:	e0db      	b.n	800bd92 <find_volume+0x482>
		fmt = FS_FAT32;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d802      	bhi.n	800bbf0 <find_volume+0x2e0>
 800bbea:	2302      	movs	r3, #2
 800bbec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d802      	bhi.n	800bc00 <find_volume+0x2f0>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc02:	1c9a      	adds	r2, r3, #2
 800bc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc06:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800bc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc0c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bc0e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bc10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc12:	441a      	add	r2, r3
 800bc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc16:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800bc18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1c:	441a      	add	r2, r3
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc20:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800bc22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc26:	2b03      	cmp	r3, #3
 800bc28:	d11e      	bne.n	800bc68 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc2c:	3330      	adds	r3, #48	@ 0x30
 800bc2e:	332a      	adds	r3, #42	@ 0x2a
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7fe fbd7 	bl	800a3e4 <ld_word>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d001      	beq.n	800bc40 <find_volume+0x330>
 800bc3c:	230d      	movs	r3, #13
 800bc3e:	e0a8      	b.n	800bd92 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc42:	891b      	ldrh	r3, [r3, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <find_volume+0x33c>
 800bc48:	230d      	movs	r3, #13
 800bc4a:	e0a2      	b.n	800bd92 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc4e:	3330      	adds	r3, #48	@ 0x30
 800bc50:	332c      	adds	r3, #44	@ 0x2c
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe fbde 	bl	800a414 <ld_dword>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc66:	e01f      	b.n	800bca8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc6a:	891b      	ldrh	r3, [r3, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <find_volume+0x364>
 800bc70:	230d      	movs	r3, #13
 800bc72:	e08e      	b.n	800bd92 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc76:	6a1a      	ldr	r2, [r3, #32]
 800bc78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc7a:	441a      	add	r2, r3
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bc80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d103      	bne.n	800bc90 <find_volume+0x380>
 800bc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8a:	695b      	ldr	r3, [r3, #20]
 800bc8c:	005b      	lsls	r3, r3, #1
 800bc8e:	e00a      	b.n	800bca6 <find_volume+0x396>
 800bc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc92:	695a      	ldr	r2, [r3, #20]
 800bc94:	4613      	mov	r3, r2
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	4413      	add	r3, r2
 800bc9a:	085a      	lsrs	r2, r3, #1
 800bc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9e:	695b      	ldr	r3, [r3, #20]
 800bca0:	f003 0301 	and.w	r3, r3, #1
 800bca4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bca6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcaa:	699a      	ldr	r2, [r3, #24]
 800bcac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcae:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800bcb2:	0a5b      	lsrs	r3, r3, #9
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d201      	bcs.n	800bcbc <find_volume+0x3ac>
 800bcb8:	230d      	movs	r3, #13
 800bcba:	e06a      	b.n	800bd92 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bcbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc2:	611a      	str	r2, [r3, #16]
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc6:	691a      	ldr	r2, [r3, #16]
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcca:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800bccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcce:	2280      	movs	r2, #128	@ 0x80
 800bcd0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bcd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d149      	bne.n	800bd6e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bcda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcdc:	3330      	adds	r3, #48	@ 0x30
 800bcde:	3330      	adds	r3, #48	@ 0x30
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7fe fb7f 	bl	800a3e4 <ld_word>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d140      	bne.n	800bd6e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bcec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcee:	3301      	adds	r3, #1
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bcf4:	f7fe fe26 	bl	800a944 <move_window>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d137      	bne.n	800bd6e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800bcfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd00:	2200      	movs	r2, #0
 800bd02:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd06:	3330      	adds	r3, #48	@ 0x30
 800bd08:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe fb69 	bl	800a3e4 <ld_word>
 800bd12:	4603      	mov	r3, r0
 800bd14:	461a      	mov	r2, r3
 800bd16:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d127      	bne.n	800bd6e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd20:	3330      	adds	r3, #48	@ 0x30
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fe fb76 	bl	800a414 <ld_dword>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	4a1c      	ldr	r2, [pc, #112]	@ (800bd9c <find_volume+0x48c>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d11e      	bne.n	800bd6e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd32:	3330      	adds	r3, #48	@ 0x30
 800bd34:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fe fb6b 	bl	800a414 <ld_dword>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	4a17      	ldr	r2, [pc, #92]	@ (800bda0 <find_volume+0x490>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d113      	bne.n	800bd6e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd48:	3330      	adds	r3, #48	@ 0x30
 800bd4a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fe fb60 	bl	800a414 <ld_dword>
 800bd54:	4602      	mov	r2, r0
 800bd56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd58:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5c:	3330      	adds	r3, #48	@ 0x30
 800bd5e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fe fb56 	bl	800a414 <ld_dword>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd70:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bd74:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bd76:	4b0b      	ldr	r3, [pc, #44]	@ (800bda4 <find_volume+0x494>)
 800bd78:	881b      	ldrh	r3, [r3, #0]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	4b09      	ldr	r3, [pc, #36]	@ (800bda4 <find_volume+0x494>)
 800bd80:	801a      	strh	r2, [r3, #0]
 800bd82:	4b08      	ldr	r3, [pc, #32]	@ (800bda4 <find_volume+0x494>)
 800bd84:	881a      	ldrh	r2, [r3, #0]
 800bd86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd88:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bd8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bd8c:	f7fe fd72 	bl	800a874 <clear_lock>
#endif
	return FR_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3758      	adds	r7, #88	@ 0x58
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	41615252 	.word	0x41615252
 800bda0:	61417272 	.word	0x61417272
 800bda4:	20000644 	.word	0x20000644

0800bda8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bdb2:	2309      	movs	r3, #9
 800bdb4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d01c      	beq.n	800bdf6 <validate+0x4e>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d018      	beq.n	800bdf6 <validate+0x4e>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d013      	beq.n	800bdf6 <validate+0x4e>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	889a      	ldrh	r2, [r3, #4]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	88db      	ldrh	r3, [r3, #6]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d10c      	bne.n	800bdf6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	785b      	ldrb	r3, [r3, #1]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fe fa5e 	bl	800a2a4 <disk_status>
 800bde8:	4603      	mov	r3, r0
 800bdea:	f003 0301 	and.w	r3, r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d101      	bne.n	800bdf6 <validate+0x4e>
			res = FR_OK;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bdf6:	7bfb      	ldrb	r3, [r7, #15]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d102      	bne.n	800be02 <validate+0x5a>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	e000      	b.n	800be04 <validate+0x5c>
 800be02:	2300      	movs	r3, #0
 800be04:	683a      	ldr	r2, [r7, #0]
 800be06:	6013      	str	r3, [r2, #0]
	return res;
 800be08:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
	...

0800be14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	4613      	mov	r3, r2
 800be20:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800be26:	f107 0310 	add.w	r3, r7, #16
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff fcd5 	bl	800b7da <get_ldnumber>
 800be30:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	2b00      	cmp	r3, #0
 800be36:	da01      	bge.n	800be3c <f_mount+0x28>
 800be38:	230b      	movs	r3, #11
 800be3a:	e02b      	b.n	800be94 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800be3c:	4a17      	ldr	r2, [pc, #92]	@ (800be9c <f_mount+0x88>)
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be44:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d005      	beq.n	800be58 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800be4c:	69b8      	ldr	r0, [r7, #24]
 800be4e:	f7fe fd11 	bl	800a874 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	2200      	movs	r2, #0
 800be56:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d002      	beq.n	800be64 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	490d      	ldr	r1, [pc, #52]	@ (800be9c <f_mount+0x88>)
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <f_mount+0x66>
 800be74:	79fb      	ldrb	r3, [r7, #7]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d001      	beq.n	800be7e <f_mount+0x6a>
 800be7a:	2300      	movs	r3, #0
 800be7c:	e00a      	b.n	800be94 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800be7e:	f107 010c 	add.w	r1, r7, #12
 800be82:	f107 0308 	add.w	r3, r7, #8
 800be86:	2200      	movs	r2, #0
 800be88:	4618      	mov	r0, r3
 800be8a:	f7ff fd41 	bl	800b910 <find_volume>
 800be8e:	4603      	mov	r3, r0
 800be90:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800be92:	7dfb      	ldrb	r3, [r7, #23]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3720      	adds	r7, #32
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	20000640 	.word	0x20000640

0800bea0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b098      	sub	sp, #96	@ 0x60
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	4613      	mov	r3, r2
 800beac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d101      	bne.n	800beb8 <f_open+0x18>
 800beb4:	2309      	movs	r3, #9
 800beb6:	e1a9      	b.n	800c20c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800beb8:	79fb      	ldrb	r3, [r7, #7]
 800beba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bebe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bec0:	79fa      	ldrb	r2, [r7, #7]
 800bec2:	f107 0110 	add.w	r1, r7, #16
 800bec6:	f107 0308 	add.w	r3, r7, #8
 800beca:	4618      	mov	r0, r3
 800becc:	f7ff fd20 	bl	800b910 <find_volume>
 800bed0:	4603      	mov	r3, r0
 800bed2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800bed6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f040 818d 	bne.w	800c1fa <f_open+0x35a>
		dj.obj.fs = fs;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	f107 0314 	add.w	r3, r7, #20
 800beea:	4611      	mov	r1, r2
 800beec:	4618      	mov	r0, r3
 800beee:	f7ff fc03 	bl	800b6f8 <follow_path>
 800bef2:	4603      	mov	r3, r0
 800bef4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bef8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800befc:	2b00      	cmp	r3, #0
 800befe:	d118      	bne.n	800bf32 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bf00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bf04:	b25b      	sxtb	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	da03      	bge.n	800bf12 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bf0a:	2306      	movs	r3, #6
 800bf0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bf10:	e00f      	b.n	800bf32 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf12:	79fb      	ldrb	r3, [r7, #7]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	bf8c      	ite	hi
 800bf18:	2301      	movhi	r3, #1
 800bf1a:	2300      	movls	r3, #0
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f107 0314 	add.w	r3, r7, #20
 800bf24:	4611      	mov	r1, r2
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fe fb5c 	bl	800a5e4 <chk_lock>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bf32:	79fb      	ldrb	r3, [r7, #7]
 800bf34:	f003 031c 	and.w	r3, r3, #28
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d07f      	beq.n	800c03c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bf3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d017      	beq.n	800bf74 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bf44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf48:	2b04      	cmp	r3, #4
 800bf4a:	d10e      	bne.n	800bf6a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bf4c:	f7fe fba6 	bl	800a69c <enq_lock>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d006      	beq.n	800bf64 <f_open+0xc4>
 800bf56:	f107 0314 	add.w	r3, r7, #20
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7ff fae7 	bl	800b52e <dir_register>
 800bf60:	4603      	mov	r3, r0
 800bf62:	e000      	b.n	800bf66 <f_open+0xc6>
 800bf64:	2312      	movs	r3, #18
 800bf66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	f043 0308 	orr.w	r3, r3, #8
 800bf70:	71fb      	strb	r3, [r7, #7]
 800bf72:	e010      	b.n	800bf96 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf74:	7ebb      	ldrb	r3, [r7, #26]
 800bf76:	f003 0311 	and.w	r3, r3, #17
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d003      	beq.n	800bf86 <f_open+0xe6>
					res = FR_DENIED;
 800bf7e:	2307      	movs	r3, #7
 800bf80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bf84:	e007      	b.n	800bf96 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bf86:	79fb      	ldrb	r3, [r7, #7]
 800bf88:	f003 0304 	and.w	r3, r3, #4
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <f_open+0xf6>
 800bf90:	2308      	movs	r3, #8
 800bf92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bf96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d168      	bne.n	800c070 <f_open+0x1d0>
 800bf9e:	79fb      	ldrb	r3, [r7, #7]
 800bfa0:	f003 0308 	and.w	r3, r3, #8
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d063      	beq.n	800c070 <f_open+0x1d0>
				dw = GET_FATTIME();
 800bfa8:	f7fe f810 	bl	8009fcc <get_fattime>
 800bfac:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bfae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfb0:	330e      	adds	r3, #14
 800bfb2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fe fa6b 	bl	800a490 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bfba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfbc:	3316      	adds	r3, #22
 800bfbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fe fa65 	bl	800a490 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bfc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfc8:	330b      	adds	r3, #11
 800bfca:	2220      	movs	r2, #32
 800bfcc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7ff f9b9 	bl	800b34c <ld_clust>
 800bfda:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7ff f9d1 	bl	800b38a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bfe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfea:	331c      	adds	r3, #28
 800bfec:	2100      	movs	r1, #0
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fe fa4e 	bl	800a490 <st_dword>
					fs->wflag = 1;
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	2201      	movs	r2, #1
 800bff8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d037      	beq.n	800c070 <f_open+0x1d0>
						dw = fs->winsect;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c004:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c006:	f107 0314 	add.w	r3, r7, #20
 800c00a:	2200      	movs	r2, #0
 800c00c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe fee4 	bl	800addc <remove_chain>
 800c014:	4603      	mov	r3, r0
 800c016:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c01a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d126      	bne.n	800c070 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c026:	4618      	mov	r0, r3
 800c028:	f7fe fc8c 	bl	800a944 <move_window>
 800c02c:	4603      	mov	r3, r0
 800c02e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c036:	3a01      	subs	r2, #1
 800c038:	60da      	str	r2, [r3, #12]
 800c03a:	e019      	b.n	800c070 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c03c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c040:	2b00      	cmp	r3, #0
 800c042:	d115      	bne.n	800c070 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c044:	7ebb      	ldrb	r3, [r7, #26]
 800c046:	f003 0310 	and.w	r3, r3, #16
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d003      	beq.n	800c056 <f_open+0x1b6>
					res = FR_NO_FILE;
 800c04e:	2304      	movs	r3, #4
 800c050:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c054:	e00c      	b.n	800c070 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c056:	79fb      	ldrb	r3, [r7, #7]
 800c058:	f003 0302 	and.w	r3, r3, #2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d007      	beq.n	800c070 <f_open+0x1d0>
 800c060:	7ebb      	ldrb	r3, [r7, #26]
 800c062:	f003 0301 	and.w	r3, r3, #1
 800c066:	2b00      	cmp	r3, #0
 800c068:	d002      	beq.n	800c070 <f_open+0x1d0>
						res = FR_DENIED;
 800c06a:	2307      	movs	r3, #7
 800c06c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c070:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c074:	2b00      	cmp	r3, #0
 800c076:	d126      	bne.n	800c0c6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c078:	79fb      	ldrb	r3, [r7, #7]
 800c07a:	f003 0308 	and.w	r3, r3, #8
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d003      	beq.n	800c08a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c082:	79fb      	ldrb	r3, [r7, #7]
 800c084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c088:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c092:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c098:	79fb      	ldrb	r3, [r7, #7]
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	bf8c      	ite	hi
 800c09e:	2301      	movhi	r3, #1
 800c0a0:	2300      	movls	r3, #0
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	f107 0314 	add.w	r3, r7, #20
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fe fb17 	bl	800a6e0 <inc_lock>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	691b      	ldr	r3, [r3, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d102      	bne.n	800c0c6 <f_open+0x226>
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c0c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f040 8095 	bne.w	800c1fa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff f938 	bl	800b34c <ld_clust>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0e4:	331c      	adds	r3, #28
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fe f994 	bl	800a414 <ld_dword>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	88da      	ldrh	r2, [r3, #6]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	79fa      	ldrb	r2, [r7, #7]
 800c10a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2200      	movs	r2, #0
 800c116:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2200      	movs	r2, #0
 800c11c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	3330      	adds	r3, #48	@ 0x30
 800c122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c126:	2100      	movs	r1, #0
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fe f9fe 	bl	800a52a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c12e:	79fb      	ldrb	r3, [r7, #7]
 800c130:	f003 0320 	and.w	r3, r3, #32
 800c134:	2b00      	cmp	r3, #0
 800c136:	d060      	beq.n	800c1fa <f_open+0x35a>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d05c      	beq.n	800c1fa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	68da      	ldr	r2, [r3, #12]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	895b      	ldrh	r3, [r3, #10]
 800c14c:	025b      	lsls	r3, r3, #9
 800c14e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c15c:	e016      	b.n	800c18c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe fca9 	bl	800aaba <get_fat>
 800c168:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c16a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d802      	bhi.n	800c176 <f_open+0x2d6>
 800c170:	2302      	movs	r3, #2
 800c172:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c176:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17c:	d102      	bne.n	800c184 <f_open+0x2e4>
 800c17e:	2301      	movs	r3, #1
 800c180:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c184:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c18c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c190:	2b00      	cmp	r3, #0
 800c192:	d103      	bne.n	800c19c <f_open+0x2fc>
 800c194:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c198:	429a      	cmp	r2, r3
 800c19a:	d8e0      	bhi.n	800c15e <f_open+0x2be>
				}
				fp->clust = clst;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c1a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c1a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d127      	bne.n	800c1fa <f_open+0x35a>
 800c1aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d022      	beq.n	800c1fa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fe fc5f 	bl	800aa7c <clust2sect>
 800c1be:	6478      	str	r0, [r7, #68]	@ 0x44
 800c1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d103      	bne.n	800c1ce <f_open+0x32e>
						res = FR_INT_ERR;
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c1cc:	e015      	b.n	800c1fa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c1ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1d0:	0a5a      	lsrs	r2, r3, #9
 800c1d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1d4:	441a      	add	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	7858      	ldrb	r0, [r3, #1]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6a1a      	ldr	r2, [r3, #32]
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	f7fe f89d 	bl	800a328 <disk_read>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <f_open+0x35a>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c1fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d002      	beq.n	800c208 <f_open+0x368>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c208:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3760      	adds	r7, #96	@ 0x60
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b08e      	sub	sp, #56	@ 0x38
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
 800c220:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	2200      	movs	r2, #0
 800c22a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f107 0214 	add.w	r2, r7, #20
 800c232:	4611      	mov	r1, r2
 800c234:	4618      	mov	r0, r3
 800c236:	f7ff fdb7 	bl	800bda8 <validate>
 800c23a:	4603      	mov	r3, r0
 800c23c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c240:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c244:	2b00      	cmp	r3, #0
 800c246:	d107      	bne.n	800c258 <f_read+0x44>
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	7d5b      	ldrb	r3, [r3, #21]
 800c24c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c250:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c254:	2b00      	cmp	r3, #0
 800c256:	d002      	beq.n	800c25e <f_read+0x4a>
 800c258:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c25c:	e115      	b.n	800c48a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	7d1b      	ldrb	r3, [r3, #20]
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <f_read+0x5a>
 800c26a:	2307      	movs	r3, #7
 800c26c:	e10d      	b.n	800c48a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	68da      	ldr	r2, [r3, #12]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	429a      	cmp	r2, r3
 800c280:	f240 80fe 	bls.w	800c480 <f_read+0x26c>
 800c284:	6a3b      	ldr	r3, [r7, #32]
 800c286:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c288:	e0fa      	b.n	800c480 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	699b      	ldr	r3, [r3, #24]
 800c28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c292:	2b00      	cmp	r3, #0
 800c294:	f040 80c6 	bne.w	800c424 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	0a5b      	lsrs	r3, r3, #9
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	8952      	ldrh	r2, [r2, #10]
 800c2a2:	3a01      	subs	r2, #1
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d12f      	bne.n	800c30e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d103      	bne.n	800c2be <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2bc:	e013      	b.n	800c2e6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d007      	beq.n	800c2d6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f7fe fe82 	bl	800afd6 <clmt_clust>
 800c2d2:	6338      	str	r0, [r7, #48]	@ 0x30
 800c2d4:	e007      	b.n	800c2e6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	69db      	ldr	r3, [r3, #28]
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4610      	mov	r0, r2
 800c2e0:	f7fe fbeb 	bl	800aaba <get_fat>
 800c2e4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d804      	bhi.n	800c2f6 <f_read+0xe2>
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2202      	movs	r2, #2
 800c2f0:	755a      	strb	r2, [r3, #21]
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	e0c9      	b.n	800c48a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2fc:	d104      	bne.n	800c308 <f_read+0xf4>
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2201      	movs	r2, #1
 800c302:	755a      	strb	r2, [r3, #21]
 800c304:	2301      	movs	r3, #1
 800c306:	e0c0      	b.n	800c48a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c30c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	69db      	ldr	r3, [r3, #28]
 800c314:	4619      	mov	r1, r3
 800c316:	4610      	mov	r0, r2
 800c318:	f7fe fbb0 	bl	800aa7c <clust2sect>
 800c31c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d104      	bne.n	800c32e <f_read+0x11a>
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2202      	movs	r2, #2
 800c328:	755a      	strb	r2, [r3, #21]
 800c32a:	2302      	movs	r3, #2
 800c32c:	e0ad      	b.n	800c48a <f_read+0x276>
			sect += csect;
 800c32e:	69ba      	ldr	r2, [r7, #24]
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	4413      	add	r3, r2
 800c334:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	0a5b      	lsrs	r3, r3, #9
 800c33a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d039      	beq.n	800c3b6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c342:	69fa      	ldr	r2, [r7, #28]
 800c344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c346:	4413      	add	r3, r2
 800c348:	697a      	ldr	r2, [r7, #20]
 800c34a:	8952      	ldrh	r2, [r2, #10]
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d905      	bls.n	800c35c <f_read+0x148>
					cc = fs->csize - csect;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	895b      	ldrh	r3, [r3, #10]
 800c354:	461a      	mov	r2, r3
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	7858      	ldrb	r0, [r3, #1]
 800c360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c362:	69ba      	ldr	r2, [r7, #24]
 800c364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c366:	f7fd ffdf 	bl	800a328 <disk_read>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d004      	beq.n	800c37a <f_read+0x166>
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2201      	movs	r2, #1
 800c374:	755a      	strb	r2, [r3, #21]
 800c376:	2301      	movs	r3, #1
 800c378:	e087      	b.n	800c48a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	7d1b      	ldrb	r3, [r3, #20]
 800c37e:	b25b      	sxtb	r3, r3
 800c380:	2b00      	cmp	r3, #0
 800c382:	da14      	bge.n	800c3ae <f_read+0x19a>
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6a1a      	ldr	r2, [r3, #32]
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c38e:	429a      	cmp	r2, r3
 800c390:	d90d      	bls.n	800c3ae <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6a1a      	ldr	r2, [r3, #32]
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	025b      	lsls	r3, r3, #9
 800c39c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c39e:	18d0      	adds	r0, r2, r3
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3330      	adds	r3, #48	@ 0x30
 800c3a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	f7fe f89d 	bl	800a4e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b0:	025b      	lsls	r3, r3, #9
 800c3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c3b4:	e050      	b.n	800c458 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	69ba      	ldr	r2, [r7, #24]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d02e      	beq.n	800c41e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	7d1b      	ldrb	r3, [r3, #20]
 800c3c4:	b25b      	sxtb	r3, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	da18      	bge.n	800c3fc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	7858      	ldrb	r0, [r3, #1]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6a1a      	ldr	r2, [r3, #32]
 800c3d8:	2301      	movs	r3, #1
 800c3da:	f7fd ffc5 	bl	800a368 <disk_write>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d004      	beq.n	800c3ee <f_read+0x1da>
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	755a      	strb	r2, [r3, #21]
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e04d      	b.n	800c48a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	7d1b      	ldrb	r3, [r3, #20]
 800c3f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3f6:	b2da      	uxtb	r2, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	7858      	ldrb	r0, [r3, #1]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c406:	2301      	movs	r3, #1
 800c408:	69ba      	ldr	r2, [r7, #24]
 800c40a:	f7fd ff8d 	bl	800a328 <disk_read>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <f_read+0x20a>
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2201      	movs	r2, #1
 800c418:	755a      	strb	r2, [r3, #21]
 800c41a:	2301      	movs	r3, #1
 800c41c:	e035      	b.n	800c48a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	69ba      	ldr	r2, [r7, #24]
 800c422:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c42c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c430:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	429a      	cmp	r2, r3
 800c438:	d901      	bls.n	800c43e <f_read+0x22a>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c44c:	4413      	add	r3, r2
 800c44e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c450:	4619      	mov	r1, r3
 800c452:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c454:	f7fe f848 	bl	800a4e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45c:	4413      	add	r3, r2
 800c45e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	699a      	ldr	r2, [r3, #24]
 800c464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c466:	441a      	add	r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	619a      	str	r2, [r3, #24]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c472:	441a      	add	r2, r3
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	601a      	str	r2, [r3, #0]
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	f47f af01 	bne.w	800c28a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3738      	adds	r7, #56	@ 0x38
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b08c      	sub	sp, #48	@ 0x30
 800c496:	af00      	add	r7, sp, #0
 800c498:	60f8      	str	r0, [r7, #12]
 800c49a:	60b9      	str	r1, [r7, #8]
 800c49c:	607a      	str	r2, [r7, #4]
 800c49e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f107 0210 	add.w	r2, r7, #16
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7ff fc78 	bl	800bda8 <validate>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c4be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d107      	bne.n	800c4d6 <f_write+0x44>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	7d5b      	ldrb	r3, [r3, #21]
 800c4ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c4ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d002      	beq.n	800c4dc <f_write+0x4a>
 800c4d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4da:	e14b      	b.n	800c774 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	7d1b      	ldrb	r3, [r3, #20]
 800c4e0:	f003 0302 	and.w	r3, r3, #2
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <f_write+0x5a>
 800c4e8:	2307      	movs	r3, #7
 800c4ea:	e143      	b.n	800c774 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	699a      	ldr	r2, [r3, #24]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	441a      	add	r2, r3
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	f080 812d 	bcs.w	800c758 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	699b      	ldr	r3, [r3, #24]
 800c502:	43db      	mvns	r3, r3
 800c504:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c506:	e127      	b.n	800c758 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c510:	2b00      	cmp	r3, #0
 800c512:	f040 80e3 	bne.w	800c6dc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	0a5b      	lsrs	r3, r3, #9
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	8952      	ldrh	r2, [r2, #10]
 800c520:	3a01      	subs	r2, #1
 800c522:	4013      	ands	r3, r2
 800c524:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d143      	bne.n	800c5b4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	699b      	ldr	r3, [r3, #24]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10c      	bne.n	800c54e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d11a      	bne.n	800c576 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2100      	movs	r1, #0
 800c544:	4618      	mov	r0, r3
 800c546:	f7fe fcae 	bl	800aea6 <create_chain>
 800c54a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c54c:	e013      	b.n	800c576 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c552:	2b00      	cmp	r3, #0
 800c554:	d007      	beq.n	800c566 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	699b      	ldr	r3, [r3, #24]
 800c55a:	4619      	mov	r1, r3
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f7fe fd3a 	bl	800afd6 <clmt_clust>
 800c562:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c564:	e007      	b.n	800c576 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	4619      	mov	r1, r3
 800c56e:	4610      	mov	r0, r2
 800c570:	f7fe fc99 	bl	800aea6 <create_chain>
 800c574:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 80f2 	beq.w	800c762 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c580:	2b01      	cmp	r3, #1
 800c582:	d104      	bne.n	800c58e <f_write+0xfc>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2202      	movs	r2, #2
 800c588:	755a      	strb	r2, [r3, #21]
 800c58a:	2302      	movs	r3, #2
 800c58c:	e0f2      	b.n	800c774 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c594:	d104      	bne.n	800c5a0 <f_write+0x10e>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2201      	movs	r2, #1
 800c59a:	755a      	strb	r2, [r3, #21]
 800c59c:	2301      	movs	r3, #1
 800c59e:	e0e9      	b.n	800c774 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5a4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d102      	bne.n	800c5b4 <f_write+0x122>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5b2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	7d1b      	ldrb	r3, [r3, #20]
 800c5b8:	b25b      	sxtb	r3, r3
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	da18      	bge.n	800c5f0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	7858      	ldrb	r0, [r3, #1]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6a1a      	ldr	r2, [r3, #32]
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	f7fd fecb 	bl	800a368 <disk_write>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d004      	beq.n	800c5e2 <f_write+0x150>
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	755a      	strb	r2, [r3, #21]
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e0c8      	b.n	800c774 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	7d1b      	ldrb	r3, [r3, #20]
 800c5e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	69db      	ldr	r3, [r3, #28]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	f7fe fa3f 	bl	800aa7c <clust2sect>
 800c5fe:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d104      	bne.n	800c610 <f_write+0x17e>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2202      	movs	r2, #2
 800c60a:	755a      	strb	r2, [r3, #21]
 800c60c:	2302      	movs	r3, #2
 800c60e:	e0b1      	b.n	800c774 <f_write+0x2e2>
			sect += csect;
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	4413      	add	r3, r2
 800c616:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	0a5b      	lsrs	r3, r3, #9
 800c61c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c61e:	6a3b      	ldr	r3, [r7, #32]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d03c      	beq.n	800c69e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c624:	69ba      	ldr	r2, [r7, #24]
 800c626:	6a3b      	ldr	r3, [r7, #32]
 800c628:	4413      	add	r3, r2
 800c62a:	693a      	ldr	r2, [r7, #16]
 800c62c:	8952      	ldrh	r2, [r2, #10]
 800c62e:	4293      	cmp	r3, r2
 800c630:	d905      	bls.n	800c63e <f_write+0x1ac>
					cc = fs->csize - csect;
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	895b      	ldrh	r3, [r3, #10]
 800c636:	461a      	mov	r2, r3
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	7858      	ldrb	r0, [r3, #1]
 800c642:	6a3b      	ldr	r3, [r7, #32]
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	69f9      	ldr	r1, [r7, #28]
 800c648:	f7fd fe8e 	bl	800a368 <disk_write>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d004      	beq.n	800c65c <f_write+0x1ca>
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2201      	movs	r2, #1
 800c656:	755a      	strb	r2, [r3, #21]
 800c658:	2301      	movs	r3, #1
 800c65a:	e08b      	b.n	800c774 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6a1a      	ldr	r2, [r3, #32]
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	6a3a      	ldr	r2, [r7, #32]
 800c666:	429a      	cmp	r2, r3
 800c668:	d915      	bls.n	800c696 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6a1a      	ldr	r2, [r3, #32]
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	025b      	lsls	r3, r3, #9
 800c67a:	69fa      	ldr	r2, [r7, #28]
 800c67c:	4413      	add	r3, r2
 800c67e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c682:	4619      	mov	r1, r3
 800c684:	f7fd ff30 	bl	800a4e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	7d1b      	ldrb	r3, [r3, #20]
 800c68c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c690:	b2da      	uxtb	r2, r3
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c696:	6a3b      	ldr	r3, [r7, #32]
 800c698:	025b      	lsls	r3, r3, #9
 800c69a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c69c:	e03f      	b.n	800c71e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6a1b      	ldr	r3, [r3, #32]
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d016      	beq.n	800c6d6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	699a      	ldr	r2, [r3, #24]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d210      	bcs.n	800c6d6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	7858      	ldrb	r0, [r3, #1]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c6be:	2301      	movs	r3, #1
 800c6c0:	697a      	ldr	r2, [r7, #20]
 800c6c2:	f7fd fe31 	bl	800a328 <disk_read>
 800c6c6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d004      	beq.n	800c6d6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	755a      	strb	r2, [r3, #21]
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e04e      	b.n	800c774 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	699b      	ldr	r3, [r3, #24]
 800c6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6e4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c6e8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c6ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d901      	bls.n	800c6f6 <f_write+0x264>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	699b      	ldr	r3, [r3, #24]
 800c700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c704:	4413      	add	r3, r2
 800c706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c708:	69f9      	ldr	r1, [r7, #28]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fd feec 	bl	800a4e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	7d1b      	ldrb	r3, [r3, #20]
 800c714:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c71e:	69fa      	ldr	r2, [r7, #28]
 800c720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c722:	4413      	add	r3, r2
 800c724:	61fb      	str	r3, [r7, #28]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	699a      	ldr	r2, [r3, #24]
 800c72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72c:	441a      	add	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	619a      	str	r2, [r3, #24]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	68da      	ldr	r2, [r3, #12]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	bf38      	it	cc
 800c73e:	461a      	movcc	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	60da      	str	r2, [r3, #12]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	441a      	add	r2, r3
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c754:	1ad3      	subs	r3, r2, r3
 800c756:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f47f aed4 	bne.w	800c508 <f_write+0x76>
 800c760:	e000      	b.n	800c764 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c762:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	7d1b      	ldrb	r3, [r3, #20]
 800c768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c76c:	b2da      	uxtb	r2, r3
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3730      	adds	r7, #48	@ 0x30
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b086      	sub	sp, #24
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f107 0208 	add.w	r2, r7, #8
 800c78a:	4611      	mov	r1, r2
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7ff fb0b 	bl	800bda8 <validate>
 800c792:	4603      	mov	r3, r0
 800c794:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c796:	7dfb      	ldrb	r3, [r7, #23]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d168      	bne.n	800c86e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	7d1b      	ldrb	r3, [r3, #20]
 800c7a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d062      	beq.n	800c86e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	7d1b      	ldrb	r3, [r3, #20]
 800c7ac:	b25b      	sxtb	r3, r3
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	da15      	bge.n	800c7de <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	7858      	ldrb	r0, [r3, #1]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a1a      	ldr	r2, [r3, #32]
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	f7fd fdd1 	bl	800a368 <disk_write>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <f_sync+0x54>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e04f      	b.n	800c870 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	7d1b      	ldrb	r3, [r3, #20]
 800c7d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c7de:	f7fd fbf5 	bl	8009fcc <get_fattime>
 800c7e2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c7e4:	68ba      	ldr	r2, [r7, #8]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	f7fe f8a9 	bl	800a944 <move_window>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d138      	bne.n	800c86e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c800:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	330b      	adds	r3, #11
 800c806:	781a      	ldrb	r2, [r3, #0]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	330b      	adds	r3, #11
 800c80c:	f042 0220 	orr.w	r2, r2, #32
 800c810:	b2d2      	uxtb	r2, r2
 800c812:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6818      	ldr	r0, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	461a      	mov	r2, r3
 800c81e:	68f9      	ldr	r1, [r7, #12]
 800c820:	f7fe fdb3 	bl	800b38a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f103 021c 	add.w	r2, r3, #28
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	4619      	mov	r1, r3
 800c830:	4610      	mov	r0, r2
 800c832:	f7fd fe2d 	bl	800a490 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3316      	adds	r3, #22
 800c83a:	6939      	ldr	r1, [r7, #16]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fd fe27 	bl	800a490 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	3312      	adds	r3, #18
 800c846:	2100      	movs	r1, #0
 800c848:	4618      	mov	r0, r3
 800c84a:	f7fd fe06 	bl	800a45a <st_word>
					fs->wflag = 1;
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2201      	movs	r2, #1
 800c852:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	4618      	mov	r0, r3
 800c858:	f7fe f8a2 	bl	800a9a0 <sync_fs>
 800c85c:	4603      	mov	r3, r0
 800c85e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	7d1b      	ldrb	r3, [r3, #20]
 800c864:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3718      	adds	r7, #24
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f7ff ff7b 	bl	800c77c <f_sync>
 800c886:	4603      	mov	r3, r0
 800c888:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d118      	bne.n	800c8c2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f107 0208 	add.w	r2, r7, #8
 800c896:	4611      	mov	r1, r2
 800c898:	4618      	mov	r0, r3
 800c89a:	f7ff fa85 	bl	800bda8 <validate>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10c      	bne.n	800c8c2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	691b      	ldr	r3, [r3, #16]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fd ffa5 	bl	800a7fc <dec_lock>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c8b6:	7bfb      	ldrb	r3, [r7, #15]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d102      	bne.n	800c8c2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b090      	sub	sp, #64	@ 0x40
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f107 0208 	add.w	r2, r7, #8
 800c8dc:	4611      	mov	r1, r2
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7ff fa62 	bl	800bda8 <validate>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c8ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d103      	bne.n	800c8fa <f_lseek+0x2e>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	7d5b      	ldrb	r3, [r3, #21]
 800c8f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c8fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d002      	beq.n	800c908 <f_lseek+0x3c>
 800c902:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c906:	e1e6      	b.n	800ccd6 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f000 80d1 	beq.w	800cab4 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c918:	d15a      	bne.n	800c9d0 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c91e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c922:	1d1a      	adds	r2, r3, #4
 800c924:	627a      	str	r2, [r7, #36]	@ 0x24
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	617b      	str	r3, [r7, #20]
 800c92a:	2302      	movs	r3, #2
 800c92c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800c934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c936:	2b00      	cmp	r3, #0
 800c938:	d03a      	beq.n	800c9b0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93c:	613b      	str	r3, [r7, #16]
 800c93e:	2300      	movs	r3, #0
 800c940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c944:	3302      	adds	r3, #2
 800c946:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800c948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94e:	3301      	adds	r3, #1
 800c950:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe f8af 	bl	800aaba <get_fat>
 800c95c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c960:	2b01      	cmp	r3, #1
 800c962:	d804      	bhi.n	800c96e <f_lseek+0xa2>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2202      	movs	r2, #2
 800c968:	755a      	strb	r2, [r3, #21]
 800c96a:	2302      	movs	r3, #2
 800c96c:	e1b3      	b.n	800ccd6 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c974:	d104      	bne.n	800c980 <f_lseek+0xb4>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2201      	movs	r2, #1
 800c97a:	755a      	strb	r2, [r3, #21]
 800c97c:	2301      	movs	r3, #1
 800c97e:	e1aa      	b.n	800ccd6 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	3301      	adds	r3, #1
 800c984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c986:	429a      	cmp	r2, r3
 800c988:	d0de      	beq.n	800c948 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c98a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d809      	bhi.n	800c9a6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c994:	1d1a      	adds	r2, r3, #4
 800c996:	627a      	str	r2, [r7, #36]	@ 0x24
 800c998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99e:	1d1a      	adds	r2, r3, #4
 800c9a0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	695b      	ldr	r3, [r3, #20]
 800c9aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d3c4      	bcc.n	800c93a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9b6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c9b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d803      	bhi.n	800c9c8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	601a      	str	r2, [r3, #0]
 800c9c6:	e184      	b.n	800ccd2 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c9c8:	2311      	movs	r3, #17
 800c9ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c9ce:	e180      	b.n	800ccd2 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	683a      	ldr	r2, [r7, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d902      	bls.n	800c9e0 <f_lseek+0x114>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 8172 	beq.w	800ccd2 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7fe faee 	bl	800afd6 <clmt_clust>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	69db      	ldr	r3, [r3, #28]
 800ca06:	4619      	mov	r1, r3
 800ca08:	4610      	mov	r0, r2
 800ca0a:	f7fe f837 	bl	800aa7c <clust2sect>
 800ca0e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d104      	bne.n	800ca20 <f_lseek+0x154>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2202      	movs	r2, #2
 800ca1a:	755a      	strb	r2, [r3, #21]
 800ca1c:	2302      	movs	r3, #2
 800ca1e:	e15a      	b.n	800ccd6 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	0a5b      	lsrs	r3, r3, #9
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	8952      	ldrh	r2, [r2, #10]
 800ca2a:	3a01      	subs	r2, #1
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	69ba      	ldr	r2, [r7, #24]
 800ca30:	4413      	add	r3, r2
 800ca32:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	699b      	ldr	r3, [r3, #24]
 800ca38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 8148 	beq.w	800ccd2 <f_lseek+0x406>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a1b      	ldr	r3, [r3, #32]
 800ca46:	69ba      	ldr	r2, [r7, #24]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	f000 8142 	beq.w	800ccd2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	7d1b      	ldrb	r3, [r3, #20]
 800ca52:	b25b      	sxtb	r3, r3
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	da18      	bge.n	800ca8a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	7858      	ldrb	r0, [r3, #1]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a1a      	ldr	r2, [r3, #32]
 800ca66:	2301      	movs	r3, #1
 800ca68:	f7fd fc7e 	bl	800a368 <disk_write>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d004      	beq.n	800ca7c <f_lseek+0x1b0>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2201      	movs	r2, #1
 800ca76:	755a      	strb	r2, [r3, #21]
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e12c      	b.n	800ccd6 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	7d1b      	ldrb	r3, [r3, #20]
 800ca80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	7858      	ldrb	r0, [r3, #1]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca94:	2301      	movs	r3, #1
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	f7fd fc46 	bl	800a328 <disk_read>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d004      	beq.n	800caac <f_lseek+0x1e0>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2201      	movs	r2, #1
 800caa6:	755a      	strb	r2, [r3, #21]
 800caa8:	2301      	movs	r3, #1
 800caaa:	e114      	b.n	800ccd6 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	69ba      	ldr	r2, [r7, #24]
 800cab0:	621a      	str	r2, [r3, #32]
 800cab2:	e10e      	b.n	800ccd2 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	683a      	ldr	r2, [r7, #0]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d908      	bls.n	800cad0 <f_lseek+0x204>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	7d1b      	ldrb	r3, [r3, #20]
 800cac2:	f003 0302 	and.w	r3, r3, #2
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d102      	bne.n	800cad0 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cade:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f000 80a7 	beq.w	800cc36 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	895b      	ldrh	r3, [r3, #10]
 800caec:	025b      	lsls	r3, r3, #9
 800caee:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800caf0:	6a3b      	ldr	r3, [r7, #32]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d01b      	beq.n	800cb2e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	1e5a      	subs	r2, r3, #1
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	fbb2 f2f3 	udiv	r2, r2, r3
 800cb00:	6a3b      	ldr	r3, [r7, #32]
 800cb02:	1e59      	subs	r1, r3, #1
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d30f      	bcc.n	800cb2e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	1e5a      	subs	r2, r3, #1
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	425b      	negs	r3, r3
 800cb16:	401a      	ands	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	699b      	ldr	r3, [r3, #24]
 800cb20:	683a      	ldr	r2, [r7, #0]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	69db      	ldr	r3, [r3, #28]
 800cb2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb2c:	e022      	b.n	800cb74 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d119      	bne.n	800cb6e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fe f9b1 	bl	800aea6 <create_chain>
 800cb44:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d104      	bne.n	800cb56 <f_lseek+0x28a>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2202      	movs	r2, #2
 800cb50:	755a      	strb	r2, [r3, #21]
 800cb52:	2302      	movs	r3, #2
 800cb54:	e0bf      	b.n	800ccd6 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb5c:	d104      	bne.n	800cb68 <f_lseek+0x29c>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2201      	movs	r2, #1
 800cb62:	755a      	strb	r2, [r3, #21]
 800cb64:	2301      	movs	r3, #1
 800cb66:	e0b6      	b.n	800ccd6 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb6c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb72:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d05d      	beq.n	800cc36 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800cb7a:	e03a      	b.n	800cbf2 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	603b      	str	r3, [r7, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	699a      	ldr	r2, [r3, #24]
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	441a      	add	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7d1b      	ldrb	r3, [r3, #20]
 800cb94:	f003 0302 	and.w	r3, r3, #2
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00b      	beq.n	800cbb4 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7fe f980 	bl	800aea6 <create_chain>
 800cba6:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d108      	bne.n	800cbc0 <f_lseek+0x2f4>
							ofs = 0; break;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	603b      	str	r3, [r7, #0]
 800cbb2:	e022      	b.n	800cbfa <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7fd ff7e 	bl	800aaba <get_fat>
 800cbbe:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc6:	d104      	bne.n	800cbd2 <f_lseek+0x306>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	755a      	strb	r2, [r3, #21]
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e081      	b.n	800ccd6 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d904      	bls.n	800cbe2 <f_lseek+0x316>
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d304      	bcc.n	800cbec <f_lseek+0x320>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	755a      	strb	r2, [r3, #21]
 800cbe8:	2302      	movs	r3, #2
 800cbea:	e074      	b.n	800ccd6 <f_lseek+0x40a>
					fp->clust = clst;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbf0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cbf2:	683a      	ldr	r2, [r7, #0]
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d8c0      	bhi.n	800cb7c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	699a      	ldr	r2, [r3, #24]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	441a      	add	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d012      	beq.n	800cc36 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fd ff31 	bl	800aa7c <clust2sect>
 800cc1a:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cc1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d104      	bne.n	800cc2c <f_lseek+0x360>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2202      	movs	r2, #2
 800cc26:	755a      	strb	r2, [r3, #21]
 800cc28:	2302      	movs	r3, #2
 800cc2a:	e054      	b.n	800ccd6 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	0a5b      	lsrs	r3, r3, #9
 800cc30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc32:	4413      	add	r3, r2
 800cc34:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	699a      	ldr	r2, [r3, #24]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	68db      	ldr	r3, [r3, #12]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d90a      	bls.n	800cc58 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	699a      	ldr	r2, [r3, #24]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	7d1b      	ldrb	r3, [r3, #20]
 800cc4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	699b      	ldr	r3, [r3, #24]
 800cc5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d036      	beq.n	800ccd2 <f_lseek+0x406>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6a1b      	ldr	r3, [r3, #32]
 800cc68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d031      	beq.n	800ccd2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	7d1b      	ldrb	r3, [r3, #20]
 800cc72:	b25b      	sxtb	r3, r3
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	da18      	bge.n	800ccaa <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	7858      	ldrb	r0, [r3, #1]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a1a      	ldr	r2, [r3, #32]
 800cc86:	2301      	movs	r3, #1
 800cc88:	f7fd fb6e 	bl	800a368 <disk_write>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d004      	beq.n	800cc9c <f_lseek+0x3d0>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	755a      	strb	r2, [r3, #21]
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e01c      	b.n	800ccd6 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	7d1b      	ldrb	r3, [r3, #20]
 800cca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	7858      	ldrb	r0, [r3, #1]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccb8:	f7fd fb36 	bl	800a328 <disk_read>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d004      	beq.n	800cccc <f_lseek+0x400>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	755a      	strb	r2, [r3, #21]
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e004      	b.n	800ccd6 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccd0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ccd2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3740      	adds	r7, #64	@ 0x40
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b09e      	sub	sp, #120	@ 0x78
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ccea:	f107 010c 	add.w	r1, r7, #12
 800ccee:	1d3b      	adds	r3, r7, #4
 800ccf0:	2202      	movs	r2, #2
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fe fe0c 	bl	800b910 <find_volume>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800cd02:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	f040 808e 	bne.w	800ce28 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cd12:	4611      	mov	r1, r2
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fe fcef 	bl	800b6f8 <follow_path>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800cd20:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d108      	bne.n	800cd3a <f_unlink+0x5c>
 800cd28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cd2c:	2102      	movs	r1, #2
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fd fc58 	bl	800a5e4 <chk_lock>
 800cd34:	4603      	mov	r3, r0
 800cd36:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800cd3a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d172      	bne.n	800ce28 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800cd42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cd46:	b25b      	sxtb	r3, r3
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	da03      	bge.n	800cd54 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800cd4c:	2306      	movs	r3, #6
 800cd4e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800cd52:	e008      	b.n	800cd66 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800cd54:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800cd58:	f003 0301 	and.w	r3, r3, #1
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800cd60:	2307      	movs	r3, #7
 800cd62:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800cd66:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d134      	bne.n	800cdd8 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cd72:	4611      	mov	r1, r2
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fe fae9 	bl	800b34c <ld_clust>
 800cd7a:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800cd7c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800cd80:	f003 0310 	and.w	r3, r3, #16
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d027      	beq.n	800cdd8 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800cd8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd8e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800cd90:	f107 0310 	add.w	r3, r7, #16
 800cd94:	2100      	movs	r1, #0
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe f951 	bl	800b03e <dir_sdi>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800cda2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d116      	bne.n	800cdd8 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800cdaa:	f107 0310 	add.w	r3, r7, #16
 800cdae:	2100      	movs	r1, #0
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7fe fb0a 	bl	800b3ca <dir_read>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800cdbc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d102      	bne.n	800cdca <f_unlink+0xec>
 800cdc4:	2307      	movs	r3, #7
 800cdc6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800cdca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cdce:	2b04      	cmp	r3, #4
 800cdd0:	d102      	bne.n	800cdd8 <f_unlink+0xfa>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800cdd8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d123      	bne.n	800ce28 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800cde0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fe fbd4 	bl	800b592 <dir_remove>
 800cdea:	4603      	mov	r3, r0
 800cdec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800cdf0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10c      	bne.n	800ce12 <f_unlink+0x134>
 800cdf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d009      	beq.n	800ce12 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800cdfe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ce02:	2200      	movs	r2, #0
 800ce04:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fd ffe8 	bl	800addc <remove_chain>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ce12:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d106      	bne.n	800ce28 <f_unlink+0x14a>
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fd fdbf 	bl	800a9a0 <sync_fs>
 800ce22:	4603      	mov	r3, r0
 800ce24:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ce28:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3778      	adds	r7, #120	@ 0x78
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800ce34:	b590      	push	{r4, r7, lr}
 800ce36:	b0a5      	sub	sp, #148	@ 0x94
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800ce3e:	463b      	mov	r3, r7
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fe fcca 	bl	800b7da <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800ce46:	f107 0120 	add.w	r1, r7, #32
 800ce4a:	1d3b      	adds	r3, r7, #4
 800ce4c:	2202      	movs	r2, #2
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fe fd5e 	bl	800b910 <find_volume>
 800ce54:	4603      	mov	r3, r0
 800ce56:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800ce5a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f040 80db 	bne.w	800d01a <f_rename+0x1e6>
		djo.obj.fs = fs;
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ce6e:	4611      	mov	r1, r2
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7fe fc41 	bl	800b6f8 <follow_path>
 800ce76:	4603      	mov	r3, r0
 800ce78:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800ce7c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d108      	bne.n	800ce96 <f_rename+0x62>
 800ce84:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ce88:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d002      	beq.n	800ce96 <f_rename+0x62>
 800ce90:	2306      	movs	r3, #6
 800ce92:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800ce96:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d108      	bne.n	800ceb0 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800ce9e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800cea2:	2102      	movs	r1, #2
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fd fb9d 	bl	800a5e4 <chk_lock>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800ceb0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f040 80b0 	bne.w	800d01a <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800ceba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cebc:	f103 010b 	add.w	r1, r3, #11
 800cec0:	f107 0308 	add.w	r3, r7, #8
 800cec4:	2215      	movs	r2, #21
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fd fb0e 	bl	800a4e8 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800cecc:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800ced0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ced4:	2230      	movs	r2, #48	@ 0x30
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fd fb06 	bl	800a4e8 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cee2:	4611      	mov	r1, r2
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fe fc07 	bl	800b6f8 <follow_path>
 800ceea:	4603      	mov	r3, r0
 800ceec:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800cef0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10c      	bne.n	800cf12 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800cef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cefa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d105      	bne.n	800cf0c <f_rename+0xd8>
 800cf00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d101      	bne.n	800cf0c <f_rename+0xd8>
 800cf08:	2304      	movs	r3, #4
 800cf0a:	e000      	b.n	800cf0e <f_rename+0xda>
 800cf0c:	2308      	movs	r3, #8
 800cf0e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800cf12:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800cf16:	2b04      	cmp	r3, #4
 800cf18:	d168      	bne.n	800cfec <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800cf1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe fb05 	bl	800b52e <dir_register>
 800cf24:	4603      	mov	r3, r0
 800cf26:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800cf2a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d15c      	bne.n	800cfec <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800cf32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800cf38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cf3c:	f103 000d 	add.w	r0, r3, #13
 800cf40:	f107 0308 	add.w	r3, r7, #8
 800cf44:	3302      	adds	r3, #2
 800cf46:	2213      	movs	r2, #19
 800cf48:	4619      	mov	r1, r3
 800cf4a:	f7fd facd 	bl	800a4e8 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800cf4e:	7a3a      	ldrb	r2, [r7, #8]
 800cf50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cf54:	330b      	adds	r3, #11
 800cf56:	f042 0220 	orr.w	r2, r2, #32
 800cf5a:	b2d2      	uxtb	r2, r2
 800cf5c:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800cf5e:	6a3b      	ldr	r3, [r7, #32]
 800cf60:	2201      	movs	r2, #1
 800cf62:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800cf64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cf68:	330b      	adds	r3, #11
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	f003 0310 	and.w	r3, r3, #16
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d03b      	beq.n	800cfec <f_rename+0x1b8>
 800cf74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cf76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d037      	beq.n	800cfec <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800cf7c:	6a3c      	ldr	r4, [r7, #32]
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7fe f9e1 	bl	800b34c <ld_clust>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f7fd fd74 	bl	800aa7c <clust2sect>
 800cf94:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800cf98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d103      	bne.n	800cfa8 <f_rename+0x174>
								res = FR_INT_ERR;
 800cfa0:	2302      	movs	r3, #2
 800cfa2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800cfa6:	e021      	b.n	800cfec <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800cfa8:	6a3b      	ldr	r3, [r7, #32]
 800cfaa:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fd fcc8 	bl	800a944 <move_window>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800cfba:	6a3b      	ldr	r3, [r7, #32]
 800cfbc:	3330      	adds	r3, #48	@ 0x30
 800cfbe:	3320      	adds	r3, #32
 800cfc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800cfc4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d10f      	bne.n	800cfec <f_rename+0x1b8>
 800cfcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfd6:	d109      	bne.n	800cfec <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800cfd8:	6a3b      	ldr	r3, [r7, #32]
 800cfda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfdc:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fe f9d2 	bl	800b38a <st_clust>
									fs->wflag = 1;
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800cfec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d112      	bne.n	800d01a <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800cff4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fe faca 	bl	800b592 <dir_remove>
 800cffe:	4603      	mov	r3, r0
 800d000:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800d004:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d106      	bne.n	800d01a <f_rename+0x1e6>
					res = sync_fs(fs);
 800d00c:	6a3b      	ldr	r3, [r7, #32]
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fd fcc6 	bl	800a9a0 <sync_fs>
 800d014:	4603      	mov	r3, r0
 800d016:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d01a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3794      	adds	r7, #148	@ 0x94
 800d022:	46bd      	mov	sp, r7
 800d024:	bd90      	pop	{r4, r7, pc}
	...

0800d028 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d028:	b480      	push	{r7}
 800d02a:	b087      	sub	sp, #28
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	4613      	mov	r3, r2
 800d034:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d036:	2301      	movs	r3, #1
 800d038:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d03e:	4b1f      	ldr	r3, [pc, #124]	@ (800d0bc <FATFS_LinkDriverEx+0x94>)
 800d040:	7a5b      	ldrb	r3, [r3, #9]
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d131      	bne.n	800d0ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d048:	4b1c      	ldr	r3, [pc, #112]	@ (800d0bc <FATFS_LinkDriverEx+0x94>)
 800d04a:	7a5b      	ldrb	r3, [r3, #9]
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	461a      	mov	r2, r3
 800d050:	4b1a      	ldr	r3, [pc, #104]	@ (800d0bc <FATFS_LinkDriverEx+0x94>)
 800d052:	2100      	movs	r1, #0
 800d054:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d056:	4b19      	ldr	r3, [pc, #100]	@ (800d0bc <FATFS_LinkDriverEx+0x94>)
 800d058:	7a5b      	ldrb	r3, [r3, #9]
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	4a17      	ldr	r2, [pc, #92]	@ (800d0bc <FATFS_LinkDriverEx+0x94>)
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	4413      	add	r3, r2
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d066:	4b15      	ldr	r3, [pc, #84]	@ (800d0bc <FATFS_LinkDriverEx+0x94>)
 800d068:	7a5b      	ldrb	r3, [r3, #9]
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	461a      	mov	r2, r3
 800d06e:	4b13      	ldr	r3, [pc, #76]	@ (800d0bc <FATFS_LinkDriverEx+0x94>)
 800d070:	4413      	add	r3, r2
 800d072:	79fa      	ldrb	r2, [r7, #7]
 800d074:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d076:	4b11      	ldr	r3, [pc, #68]	@ (800d0bc <FATFS_LinkDriverEx+0x94>)
 800d078:	7a5b      	ldrb	r3, [r3, #9]
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	1c5a      	adds	r2, r3, #1
 800d07e:	b2d1      	uxtb	r1, r2
 800d080:	4a0e      	ldr	r2, [pc, #56]	@ (800d0bc <FATFS_LinkDriverEx+0x94>)
 800d082:	7251      	strb	r1, [r2, #9]
 800d084:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d086:	7dbb      	ldrb	r3, [r7, #22]
 800d088:	3330      	adds	r3, #48	@ 0x30
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	3301      	adds	r3, #1
 800d094:	223a      	movs	r2, #58	@ 0x3a
 800d096:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	3302      	adds	r3, #2
 800d09c:	222f      	movs	r2, #47	@ 0x2f
 800d09e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	3303      	adds	r3, #3
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	371c      	adds	r7, #28
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	20000668 	.word	0x20000668

0800d0c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7ff ffaa 	bl	800d028 <FATFS_LinkDriverEx>
 800d0d4:	4603      	mov	r3, r0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3708      	adds	r7, #8
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
	...

0800d0e0 <malloc>:
 800d0e0:	4b02      	ldr	r3, [pc, #8]	@ (800d0ec <malloc+0xc>)
 800d0e2:	4601      	mov	r1, r0
 800d0e4:	6818      	ldr	r0, [r3, #0]
 800d0e6:	f000 b82d 	b.w	800d144 <_malloc_r>
 800d0ea:	bf00      	nop
 800d0ec:	20000018 	.word	0x20000018

0800d0f0 <free>:
 800d0f0:	4b02      	ldr	r3, [pc, #8]	@ (800d0fc <free+0xc>)
 800d0f2:	4601      	mov	r1, r0
 800d0f4:	6818      	ldr	r0, [r3, #0]
 800d0f6:	f000 b967 	b.w	800d3c8 <_free_r>
 800d0fa:	bf00      	nop
 800d0fc:	20000018 	.word	0x20000018

0800d100 <sbrk_aligned>:
 800d100:	b570      	push	{r4, r5, r6, lr}
 800d102:	4e0f      	ldr	r6, [pc, #60]	@ (800d140 <sbrk_aligned+0x40>)
 800d104:	460c      	mov	r4, r1
 800d106:	6831      	ldr	r1, [r6, #0]
 800d108:	4605      	mov	r5, r0
 800d10a:	b911      	cbnz	r1, 800d112 <sbrk_aligned+0x12>
 800d10c:	f000 f90a 	bl	800d324 <_sbrk_r>
 800d110:	6030      	str	r0, [r6, #0]
 800d112:	4621      	mov	r1, r4
 800d114:	4628      	mov	r0, r5
 800d116:	f000 f905 	bl	800d324 <_sbrk_r>
 800d11a:	1c43      	adds	r3, r0, #1
 800d11c:	d103      	bne.n	800d126 <sbrk_aligned+0x26>
 800d11e:	f04f 34ff 	mov.w	r4, #4294967295
 800d122:	4620      	mov	r0, r4
 800d124:	bd70      	pop	{r4, r5, r6, pc}
 800d126:	1cc4      	adds	r4, r0, #3
 800d128:	f024 0403 	bic.w	r4, r4, #3
 800d12c:	42a0      	cmp	r0, r4
 800d12e:	d0f8      	beq.n	800d122 <sbrk_aligned+0x22>
 800d130:	1a21      	subs	r1, r4, r0
 800d132:	4628      	mov	r0, r5
 800d134:	f000 f8f6 	bl	800d324 <_sbrk_r>
 800d138:	3001      	adds	r0, #1
 800d13a:	d1f2      	bne.n	800d122 <sbrk_aligned+0x22>
 800d13c:	e7ef      	b.n	800d11e <sbrk_aligned+0x1e>
 800d13e:	bf00      	nop
 800d140:	20000674 	.word	0x20000674

0800d144 <_malloc_r>:
 800d144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d148:	1ccd      	adds	r5, r1, #3
 800d14a:	f025 0503 	bic.w	r5, r5, #3
 800d14e:	3508      	adds	r5, #8
 800d150:	2d0c      	cmp	r5, #12
 800d152:	bf38      	it	cc
 800d154:	250c      	movcc	r5, #12
 800d156:	2d00      	cmp	r5, #0
 800d158:	4606      	mov	r6, r0
 800d15a:	db01      	blt.n	800d160 <_malloc_r+0x1c>
 800d15c:	42a9      	cmp	r1, r5
 800d15e:	d904      	bls.n	800d16a <_malloc_r+0x26>
 800d160:	230c      	movs	r3, #12
 800d162:	6033      	str	r3, [r6, #0]
 800d164:	2000      	movs	r0, #0
 800d166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d16a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d240 <_malloc_r+0xfc>
 800d16e:	f000 f869 	bl	800d244 <__malloc_lock>
 800d172:	f8d8 3000 	ldr.w	r3, [r8]
 800d176:	461c      	mov	r4, r3
 800d178:	bb44      	cbnz	r4, 800d1cc <_malloc_r+0x88>
 800d17a:	4629      	mov	r1, r5
 800d17c:	4630      	mov	r0, r6
 800d17e:	f7ff ffbf 	bl	800d100 <sbrk_aligned>
 800d182:	1c43      	adds	r3, r0, #1
 800d184:	4604      	mov	r4, r0
 800d186:	d158      	bne.n	800d23a <_malloc_r+0xf6>
 800d188:	f8d8 4000 	ldr.w	r4, [r8]
 800d18c:	4627      	mov	r7, r4
 800d18e:	2f00      	cmp	r7, #0
 800d190:	d143      	bne.n	800d21a <_malloc_r+0xd6>
 800d192:	2c00      	cmp	r4, #0
 800d194:	d04b      	beq.n	800d22e <_malloc_r+0xea>
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	4639      	mov	r1, r7
 800d19a:	4630      	mov	r0, r6
 800d19c:	eb04 0903 	add.w	r9, r4, r3
 800d1a0:	f000 f8c0 	bl	800d324 <_sbrk_r>
 800d1a4:	4581      	cmp	r9, r0
 800d1a6:	d142      	bne.n	800d22e <_malloc_r+0xea>
 800d1a8:	6821      	ldr	r1, [r4, #0]
 800d1aa:	1a6d      	subs	r5, r5, r1
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	f7ff ffa6 	bl	800d100 <sbrk_aligned>
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d03a      	beq.n	800d22e <_malloc_r+0xea>
 800d1b8:	6823      	ldr	r3, [r4, #0]
 800d1ba:	442b      	add	r3, r5
 800d1bc:	6023      	str	r3, [r4, #0]
 800d1be:	f8d8 3000 	ldr.w	r3, [r8]
 800d1c2:	685a      	ldr	r2, [r3, #4]
 800d1c4:	bb62      	cbnz	r2, 800d220 <_malloc_r+0xdc>
 800d1c6:	f8c8 7000 	str.w	r7, [r8]
 800d1ca:	e00f      	b.n	800d1ec <_malloc_r+0xa8>
 800d1cc:	6822      	ldr	r2, [r4, #0]
 800d1ce:	1b52      	subs	r2, r2, r5
 800d1d0:	d420      	bmi.n	800d214 <_malloc_r+0xd0>
 800d1d2:	2a0b      	cmp	r2, #11
 800d1d4:	d917      	bls.n	800d206 <_malloc_r+0xc2>
 800d1d6:	1961      	adds	r1, r4, r5
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	6025      	str	r5, [r4, #0]
 800d1dc:	bf18      	it	ne
 800d1de:	6059      	strne	r1, [r3, #4]
 800d1e0:	6863      	ldr	r3, [r4, #4]
 800d1e2:	bf08      	it	eq
 800d1e4:	f8c8 1000 	streq.w	r1, [r8]
 800d1e8:	5162      	str	r2, [r4, r5]
 800d1ea:	604b      	str	r3, [r1, #4]
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f000 f82f 	bl	800d250 <__malloc_unlock>
 800d1f2:	f104 000b 	add.w	r0, r4, #11
 800d1f6:	1d23      	adds	r3, r4, #4
 800d1f8:	f020 0007 	bic.w	r0, r0, #7
 800d1fc:	1ac2      	subs	r2, r0, r3
 800d1fe:	bf1c      	itt	ne
 800d200:	1a1b      	subne	r3, r3, r0
 800d202:	50a3      	strne	r3, [r4, r2]
 800d204:	e7af      	b.n	800d166 <_malloc_r+0x22>
 800d206:	6862      	ldr	r2, [r4, #4]
 800d208:	42a3      	cmp	r3, r4
 800d20a:	bf0c      	ite	eq
 800d20c:	f8c8 2000 	streq.w	r2, [r8]
 800d210:	605a      	strne	r2, [r3, #4]
 800d212:	e7eb      	b.n	800d1ec <_malloc_r+0xa8>
 800d214:	4623      	mov	r3, r4
 800d216:	6864      	ldr	r4, [r4, #4]
 800d218:	e7ae      	b.n	800d178 <_malloc_r+0x34>
 800d21a:	463c      	mov	r4, r7
 800d21c:	687f      	ldr	r7, [r7, #4]
 800d21e:	e7b6      	b.n	800d18e <_malloc_r+0x4a>
 800d220:	461a      	mov	r2, r3
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	42a3      	cmp	r3, r4
 800d226:	d1fb      	bne.n	800d220 <_malloc_r+0xdc>
 800d228:	2300      	movs	r3, #0
 800d22a:	6053      	str	r3, [r2, #4]
 800d22c:	e7de      	b.n	800d1ec <_malloc_r+0xa8>
 800d22e:	230c      	movs	r3, #12
 800d230:	6033      	str	r3, [r6, #0]
 800d232:	4630      	mov	r0, r6
 800d234:	f000 f80c 	bl	800d250 <__malloc_unlock>
 800d238:	e794      	b.n	800d164 <_malloc_r+0x20>
 800d23a:	6005      	str	r5, [r0, #0]
 800d23c:	e7d6      	b.n	800d1ec <_malloc_r+0xa8>
 800d23e:	bf00      	nop
 800d240:	20000678 	.word	0x20000678

0800d244 <__malloc_lock>:
 800d244:	4801      	ldr	r0, [pc, #4]	@ (800d24c <__malloc_lock+0x8>)
 800d246:	f000 b8a7 	b.w	800d398 <__retarget_lock_acquire_recursive>
 800d24a:	bf00      	nop
 800d24c:	200007b8 	.word	0x200007b8

0800d250 <__malloc_unlock>:
 800d250:	4801      	ldr	r0, [pc, #4]	@ (800d258 <__malloc_unlock+0x8>)
 800d252:	f000 b8a2 	b.w	800d39a <__retarget_lock_release_recursive>
 800d256:	bf00      	nop
 800d258:	200007b8 	.word	0x200007b8

0800d25c <realloc>:
 800d25c:	4b02      	ldr	r3, [pc, #8]	@ (800d268 <realloc+0xc>)
 800d25e:	460a      	mov	r2, r1
 800d260:	4601      	mov	r1, r0
 800d262:	6818      	ldr	r0, [r3, #0]
 800d264:	f000 b802 	b.w	800d26c <_realloc_r>
 800d268:	20000018 	.word	0x20000018

0800d26c <_realloc_r>:
 800d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d270:	4680      	mov	r8, r0
 800d272:	4615      	mov	r5, r2
 800d274:	460c      	mov	r4, r1
 800d276:	b921      	cbnz	r1, 800d282 <_realloc_r+0x16>
 800d278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d27c:	4611      	mov	r1, r2
 800d27e:	f7ff bf61 	b.w	800d144 <_malloc_r>
 800d282:	b92a      	cbnz	r2, 800d290 <_realloc_r+0x24>
 800d284:	f000 f8a0 	bl	800d3c8 <_free_r>
 800d288:	2400      	movs	r4, #0
 800d28a:	4620      	mov	r0, r4
 800d28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d290:	f000 f8e4 	bl	800d45c <_malloc_usable_size_r>
 800d294:	4285      	cmp	r5, r0
 800d296:	4606      	mov	r6, r0
 800d298:	d802      	bhi.n	800d2a0 <_realloc_r+0x34>
 800d29a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d29e:	d8f4      	bhi.n	800d28a <_realloc_r+0x1e>
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	f7ff ff4e 	bl	800d144 <_malloc_r>
 800d2a8:	4607      	mov	r7, r0
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d0ec      	beq.n	800d288 <_realloc_r+0x1c>
 800d2ae:	42b5      	cmp	r5, r6
 800d2b0:	462a      	mov	r2, r5
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	bf28      	it	cs
 800d2b6:	4632      	movcs	r2, r6
 800d2b8:	f000 f878 	bl	800d3ac <memcpy>
 800d2bc:	4621      	mov	r1, r4
 800d2be:	4640      	mov	r0, r8
 800d2c0:	f000 f882 	bl	800d3c8 <_free_r>
 800d2c4:	463c      	mov	r4, r7
 800d2c6:	e7e0      	b.n	800d28a <_realloc_r+0x1e>

0800d2c8 <memset>:
 800d2c8:	4402      	add	r2, r0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d100      	bne.n	800d2d2 <memset+0xa>
 800d2d0:	4770      	bx	lr
 800d2d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d2d6:	e7f9      	b.n	800d2cc <memset+0x4>

0800d2d8 <strcat>:
 800d2d8:	b510      	push	{r4, lr}
 800d2da:	4602      	mov	r2, r0
 800d2dc:	7814      	ldrb	r4, [r2, #0]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	3201      	adds	r2, #1
 800d2e2:	2c00      	cmp	r4, #0
 800d2e4:	d1fa      	bne.n	800d2dc <strcat+0x4>
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2f0:	2a00      	cmp	r2, #0
 800d2f2:	d1f9      	bne.n	800d2e8 <strcat+0x10>
 800d2f4:	bd10      	pop	{r4, pc}

0800d2f6 <strrchr>:
 800d2f6:	b538      	push	{r3, r4, r5, lr}
 800d2f8:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	d10e      	bne.n	800d31e <strrchr+0x28>
 800d300:	4621      	mov	r1, r4
 800d302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d306:	f000 b8b1 	b.w	800d46c <strchr>
 800d30a:	1c43      	adds	r3, r0, #1
 800d30c:	4605      	mov	r5, r0
 800d30e:	4621      	mov	r1, r4
 800d310:	4618      	mov	r0, r3
 800d312:	f000 f8ab 	bl	800d46c <strchr>
 800d316:	2800      	cmp	r0, #0
 800d318:	d1f7      	bne.n	800d30a <strrchr+0x14>
 800d31a:	4628      	mov	r0, r5
 800d31c:	bd38      	pop	{r3, r4, r5, pc}
 800d31e:	2500      	movs	r5, #0
 800d320:	e7f5      	b.n	800d30e <strrchr+0x18>
	...

0800d324 <_sbrk_r>:
 800d324:	b538      	push	{r3, r4, r5, lr}
 800d326:	4d06      	ldr	r5, [pc, #24]	@ (800d340 <_sbrk_r+0x1c>)
 800d328:	2300      	movs	r3, #0
 800d32a:	4604      	mov	r4, r0
 800d32c:	4608      	mov	r0, r1
 800d32e:	602b      	str	r3, [r5, #0]
 800d330:	f7f6 fb66 	bl	8003a00 <_sbrk>
 800d334:	1c43      	adds	r3, r0, #1
 800d336:	d102      	bne.n	800d33e <_sbrk_r+0x1a>
 800d338:	682b      	ldr	r3, [r5, #0]
 800d33a:	b103      	cbz	r3, 800d33e <_sbrk_r+0x1a>
 800d33c:	6023      	str	r3, [r4, #0]
 800d33e:	bd38      	pop	{r3, r4, r5, pc}
 800d340:	200007b4 	.word	0x200007b4

0800d344 <__errno>:
 800d344:	4b01      	ldr	r3, [pc, #4]	@ (800d34c <__errno+0x8>)
 800d346:	6818      	ldr	r0, [r3, #0]
 800d348:	4770      	bx	lr
 800d34a:	bf00      	nop
 800d34c:	20000018 	.word	0x20000018

0800d350 <__libc_init_array>:
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	4d0d      	ldr	r5, [pc, #52]	@ (800d388 <__libc_init_array+0x38>)
 800d354:	4c0d      	ldr	r4, [pc, #52]	@ (800d38c <__libc_init_array+0x3c>)
 800d356:	1b64      	subs	r4, r4, r5
 800d358:	10a4      	asrs	r4, r4, #2
 800d35a:	2600      	movs	r6, #0
 800d35c:	42a6      	cmp	r6, r4
 800d35e:	d109      	bne.n	800d374 <__libc_init_array+0x24>
 800d360:	4d0b      	ldr	r5, [pc, #44]	@ (800d390 <__libc_init_array+0x40>)
 800d362:	4c0c      	ldr	r4, [pc, #48]	@ (800d394 <__libc_init_array+0x44>)
 800d364:	f000 f890 	bl	800d488 <_init>
 800d368:	1b64      	subs	r4, r4, r5
 800d36a:	10a4      	asrs	r4, r4, #2
 800d36c:	2600      	movs	r6, #0
 800d36e:	42a6      	cmp	r6, r4
 800d370:	d105      	bne.n	800d37e <__libc_init_array+0x2e>
 800d372:	bd70      	pop	{r4, r5, r6, pc}
 800d374:	f855 3b04 	ldr.w	r3, [r5], #4
 800d378:	4798      	blx	r3
 800d37a:	3601      	adds	r6, #1
 800d37c:	e7ee      	b.n	800d35c <__libc_init_array+0xc>
 800d37e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d382:	4798      	blx	r3
 800d384:	3601      	adds	r6, #1
 800d386:	e7f2      	b.n	800d36e <__libc_init_array+0x1e>
 800d388:	0800e3d0 	.word	0x0800e3d0
 800d38c:	0800e3d0 	.word	0x0800e3d0
 800d390:	0800e3d0 	.word	0x0800e3d0
 800d394:	0800e3d4 	.word	0x0800e3d4

0800d398 <__retarget_lock_acquire_recursive>:
 800d398:	4770      	bx	lr

0800d39a <__retarget_lock_release_recursive>:
 800d39a:	4770      	bx	lr

0800d39c <strcpy>:
 800d39c:	4603      	mov	r3, r0
 800d39e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3a2:	f803 2b01 	strb.w	r2, [r3], #1
 800d3a6:	2a00      	cmp	r2, #0
 800d3a8:	d1f9      	bne.n	800d39e <strcpy+0x2>
 800d3aa:	4770      	bx	lr

0800d3ac <memcpy>:
 800d3ac:	440a      	add	r2, r1
 800d3ae:	4291      	cmp	r1, r2
 800d3b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3b4:	d100      	bne.n	800d3b8 <memcpy+0xc>
 800d3b6:	4770      	bx	lr
 800d3b8:	b510      	push	{r4, lr}
 800d3ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3c2:	4291      	cmp	r1, r2
 800d3c4:	d1f9      	bne.n	800d3ba <memcpy+0xe>
 800d3c6:	bd10      	pop	{r4, pc}

0800d3c8 <_free_r>:
 800d3c8:	b538      	push	{r3, r4, r5, lr}
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	2900      	cmp	r1, #0
 800d3ce:	d041      	beq.n	800d454 <_free_r+0x8c>
 800d3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3d4:	1f0c      	subs	r4, r1, #4
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	bfb8      	it	lt
 800d3da:	18e4      	addlt	r4, r4, r3
 800d3dc:	f7ff ff32 	bl	800d244 <__malloc_lock>
 800d3e0:	4a1d      	ldr	r2, [pc, #116]	@ (800d458 <_free_r+0x90>)
 800d3e2:	6813      	ldr	r3, [r2, #0]
 800d3e4:	b933      	cbnz	r3, 800d3f4 <_free_r+0x2c>
 800d3e6:	6063      	str	r3, [r4, #4]
 800d3e8:	6014      	str	r4, [r2, #0]
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3f0:	f7ff bf2e 	b.w	800d250 <__malloc_unlock>
 800d3f4:	42a3      	cmp	r3, r4
 800d3f6:	d908      	bls.n	800d40a <_free_r+0x42>
 800d3f8:	6820      	ldr	r0, [r4, #0]
 800d3fa:	1821      	adds	r1, r4, r0
 800d3fc:	428b      	cmp	r3, r1
 800d3fe:	bf01      	itttt	eq
 800d400:	6819      	ldreq	r1, [r3, #0]
 800d402:	685b      	ldreq	r3, [r3, #4]
 800d404:	1809      	addeq	r1, r1, r0
 800d406:	6021      	streq	r1, [r4, #0]
 800d408:	e7ed      	b.n	800d3e6 <_free_r+0x1e>
 800d40a:	461a      	mov	r2, r3
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	b10b      	cbz	r3, 800d414 <_free_r+0x4c>
 800d410:	42a3      	cmp	r3, r4
 800d412:	d9fa      	bls.n	800d40a <_free_r+0x42>
 800d414:	6811      	ldr	r1, [r2, #0]
 800d416:	1850      	adds	r0, r2, r1
 800d418:	42a0      	cmp	r0, r4
 800d41a:	d10b      	bne.n	800d434 <_free_r+0x6c>
 800d41c:	6820      	ldr	r0, [r4, #0]
 800d41e:	4401      	add	r1, r0
 800d420:	1850      	adds	r0, r2, r1
 800d422:	4283      	cmp	r3, r0
 800d424:	6011      	str	r1, [r2, #0]
 800d426:	d1e0      	bne.n	800d3ea <_free_r+0x22>
 800d428:	6818      	ldr	r0, [r3, #0]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	6053      	str	r3, [r2, #4]
 800d42e:	4408      	add	r0, r1
 800d430:	6010      	str	r0, [r2, #0]
 800d432:	e7da      	b.n	800d3ea <_free_r+0x22>
 800d434:	d902      	bls.n	800d43c <_free_r+0x74>
 800d436:	230c      	movs	r3, #12
 800d438:	602b      	str	r3, [r5, #0]
 800d43a:	e7d6      	b.n	800d3ea <_free_r+0x22>
 800d43c:	6820      	ldr	r0, [r4, #0]
 800d43e:	1821      	adds	r1, r4, r0
 800d440:	428b      	cmp	r3, r1
 800d442:	bf04      	itt	eq
 800d444:	6819      	ldreq	r1, [r3, #0]
 800d446:	685b      	ldreq	r3, [r3, #4]
 800d448:	6063      	str	r3, [r4, #4]
 800d44a:	bf04      	itt	eq
 800d44c:	1809      	addeq	r1, r1, r0
 800d44e:	6021      	streq	r1, [r4, #0]
 800d450:	6054      	str	r4, [r2, #4]
 800d452:	e7ca      	b.n	800d3ea <_free_r+0x22>
 800d454:	bd38      	pop	{r3, r4, r5, pc}
 800d456:	bf00      	nop
 800d458:	20000678 	.word	0x20000678

0800d45c <_malloc_usable_size_r>:
 800d45c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d460:	1f18      	subs	r0, r3, #4
 800d462:	2b00      	cmp	r3, #0
 800d464:	bfbc      	itt	lt
 800d466:	580b      	ldrlt	r3, [r1, r0]
 800d468:	18c0      	addlt	r0, r0, r3
 800d46a:	4770      	bx	lr

0800d46c <strchr>:
 800d46c:	b2c9      	uxtb	r1, r1
 800d46e:	4603      	mov	r3, r0
 800d470:	4618      	mov	r0, r3
 800d472:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d476:	b112      	cbz	r2, 800d47e <strchr+0x12>
 800d478:	428a      	cmp	r2, r1
 800d47a:	d1f9      	bne.n	800d470 <strchr+0x4>
 800d47c:	4770      	bx	lr
 800d47e:	2900      	cmp	r1, #0
 800d480:	bf18      	it	ne
 800d482:	2000      	movne	r0, #0
 800d484:	4770      	bx	lr
	...

0800d488 <_init>:
 800d488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48a:	bf00      	nop
 800d48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d48e:	bc08      	pop	{r3}
 800d490:	469e      	mov	lr, r3
 800d492:	4770      	bx	lr

0800d494 <_fini>:
 800d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d496:	bf00      	nop
 800d498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d49a:	bc08      	pop	{r3}
 800d49c:	469e      	mov	lr, r3
 800d49e:	4770      	bx	lr
