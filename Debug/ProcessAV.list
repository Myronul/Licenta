
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab54  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800acdc  0800acdc  0000bcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800addc  0800addc  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800addc  0800addc  0000bddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ade4  0800ade4  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ade4  0800ade4  0000bde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ade8  0800ade8  0000bde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800adec  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c060  2**0
                  CONTENTS
 10 .bss          00004760  20000060  20000060  0000c060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200047c0  200047c0  0000c060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a439  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b36  00000000  00000000  000264c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  0002a000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000126c  00000000  00000000  0002b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005009  00000000  00000000  0002ca14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eb8f  00000000  00000000  00031a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6b82  00000000  00000000  000505ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012712e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066e4  00000000  00000000  00127174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0012d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800acc4 	.word	0x0800acc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	0800acc4 	.word	0x0800acc4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <convert_color_16_to_18>:

uint16_t BackGroundColor = 0xFFFF; /*Variabila globala pentru culoarea de fundal curenta*/


void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	0adb      	lsrs	r3, r3, #11
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	115b      	asrs	r3, r3, #5
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80004d6:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	f003 031f 	and.w	r3, r3, #31
 80004e0:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 80004e2:	7bfa      	ldrb	r2, [r7, #15]
 80004e4:	4613      	mov	r3, r2
 80004e6:	019b      	lsls	r3, r3, #6
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4a16      	ldr	r2, [pc, #88]	@ (8000544 <convert_color_16_to_18+0x8c>)
 80004ec:	fb82 1203 	smull	r1, r2, r2, r3
 80004f0:	441a      	add	r2, r3
 80004f2:	1112      	asrs	r2, r2, #4
 80004f4:	17db      	asrs	r3, r3, #31
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8000504:	7b7a      	ldrb	r2, [r7, #13]
 8000506:	4613      	mov	r3, r2
 8000508:	019b      	lsls	r3, r3, #6
 800050a:	1a9b      	subs	r3, r3, r2
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <convert_color_16_to_18+0x8c>)
 800050e:	fb82 1203 	smull	r1, r2, r2, r3
 8000512:	441a      	add	r2, r3
 8000514:	1112      	asrs	r2, r2, #4
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	7bfa      	ldrb	r2, [r7, #15]
 8000524:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	7bba      	ldrb	r2, [r7, #14]
 800052c:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	3302      	adds	r3, #2
 8000532:	7b7a      	ldrb	r2, [r7, #13]
 8000534:	701a      	strb	r2, [r3, #0]

}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	84210843 	.word	0x84210843

08000548 <fill_screen2>:

}


void fill_screen2(uint16_t color)
{
 8000548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800054c:	b08f      	sub	sp, #60	@ 0x3c
 800054e:	af02      	add	r7, sp, #8
 8000550:	4603      	mov	r3, r0
 8000552:	80fb      	strh	r3, [r7, #6]
 8000554:	466b      	mov	r3, sp
 8000556:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000558:	2377      	movs	r3, #119	@ 0x77
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	f240 13df 	movw	r3, #479	@ 0x1df
 8000560:	f240 123f 	movw	r2, #319	@ 0x13f
 8000564:	2100      	movs	r1, #0
 8000566:	2000      	movs	r0, #0
 8000568:	f000 fdf4 	bl	8001154 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 800056c:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8000572:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8000576:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	0adb      	lsrs	r3, r3, #11
 800057c:	b29b      	uxth	r3, r3
 800057e:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	115b      	asrs	r3, r3, #5
 8000584:	b2db      	uxtb	r3, r3
 8000586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800058a:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 031f 	and.w	r3, r3, #31
 8000594:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8000596:	7ffa      	ldrb	r2, [r7, #31]
 8000598:	4613      	mov	r3, r2
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	4a4f      	ldr	r2, [pc, #316]	@ (80006dc <fill_screen2+0x194>)
 80005a0:	fb82 1203 	smull	r1, r2, r2, r3
 80005a4:	441a      	add	r2, r3
 80005a6:	1112      	asrs	r2, r2, #4
 80005a8:	17db      	asrs	r3, r3, #31
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 80005ae:	7fba      	ldrb	r2, [r7, #30]
 80005b0:	4613      	mov	r3, r2
 80005b2:	021b      	lsls	r3, r3, #8
 80005b4:	1a9b      	subs	r3, r3, r2
 80005b6:	4a4a      	ldr	r2, [pc, #296]	@ (80006e0 <fill_screen2+0x198>)
 80005b8:	fb82 1203 	smull	r1, r2, r2, r3
 80005bc:	441a      	add	r2, r3
 80005be:	1152      	asrs	r2, r2, #5
 80005c0:	17db      	asrs	r3, r3, #31
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 80005c6:	7f7a      	ldrb	r2, [r7, #29]
 80005c8:	4613      	mov	r3, r2
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	4a43      	ldr	r2, [pc, #268]	@ (80006dc <fill_screen2+0x194>)
 80005d0:	fb82 1203 	smull	r1, r2, r2, r3
 80005d4:	441a      	add	r2, r3
 80005d6:	1112      	asrs	r2, r2, #4
 80005d8:	17db      	asrs	r3, r3, #31
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 80005de:	2201      	movs	r2, #1
 80005e0:	2108      	movs	r1, #8
 80005e2:	4840      	ldr	r0, [pc, #256]	@ (80006e4 <fill_screen2+0x19c>)
 80005e4:	f002 ff58 	bl	8003498 <HAL_GPIO_WritePin>
	CS_A();
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	483d      	ldr	r0, [pc, #244]	@ (80006e4 <fill_screen2+0x19c>)
 80005ee:	f002 ff53 	bl	8003498 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80005f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80005f4:	460b      	mov	r3, r1
 80005f6:	3b01      	subs	r3, #1
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	2300      	movs	r3, #0
 80005fc:	4688      	mov	r8, r1
 80005fe:	4699      	mov	r9, r3
 8000600:	f04f 0200 	mov.w	r2, #0
 8000604:	f04f 0300 	mov.w	r3, #0
 8000608:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800060c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000610:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000614:	2300      	movs	r3, #0
 8000616:	460c      	mov	r4, r1
 8000618:	461d      	mov	r5, r3
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	f04f 0300 	mov.w	r3, #0
 8000622:	00eb      	lsls	r3, r5, #3
 8000624:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000628:	00e2      	lsls	r2, r4, #3
 800062a:	1dcb      	adds	r3, r1, #7
 800062c:	08db      	lsrs	r3, r3, #3
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	ebad 0d03 	sub.w	sp, sp, r3
 8000634:	ab02      	add	r3, sp, #8
 8000636:	3300      	adds	r3, #0
 8000638:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 800063a:	2300      	movs	r3, #0
 800063c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800063e:	e011      	b.n	8000664 <fill_screen2+0x11c>
	{
		frame[j] = r;
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000644:	4413      	add	r3, r2
 8000646:	7ffa      	ldrb	r2, [r7, #31]
 8000648:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 800064a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800064c:	3301      	adds	r3, #1
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	7fb9      	ldrb	r1, [r7, #30]
 8000652:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8000654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000656:	3302      	adds	r3, #2
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	7f79      	ldrb	r1, [r7, #29]
 800065c:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 800065e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000660:	3303      	adds	r3, #3
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000668:	429a      	cmp	r2, r3
 800066a:	d3e9      	bcc.n	8000640 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 800066c:	6a3a      	ldr	r2, [r7, #32]
 800066e:	4613      	mov	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4413      	add	r3, r2
 8000674:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <fill_screen2+0x1a0>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800068a:	e012      	b.n	80006b2 <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 800068c:	bf00      	nop
 800068e:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <fill_screen2+0x1a0>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0fa      	beq.n	800068e <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <fill_screen2+0x1a0>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 800069e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	6979      	ldr	r1, [r7, #20]
 80006a6:	4811      	ldr	r0, [pc, #68]	@ (80006ec <fill_screen2+0x1a4>)
 80006a8:	f004 fe34 	bl	8005314 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 80006ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ae:	3301      	adds	r3, #1
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d3e8      	bcc.n	800068c <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 80006ba:	bf00      	nop
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <fill_screen2+0x1a0>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0fa      	beq.n	80006bc <fill_screen2+0x174>
	CS_D();
 80006c6:	2201      	movs	r2, #1
 80006c8:	2110      	movs	r1, #16
 80006ca:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <fill_screen2+0x19c>)
 80006cc:	f002 fee4 	bl	8003498 <HAL_GPIO_WritePin>
 80006d0:	46b5      	mov	sp, r6
}
 80006d2:	bf00      	nop
 80006d4:	3734      	adds	r7, #52	@ 0x34
 80006d6:	46bd      	mov	sp, r7
 80006d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006dc:	84210843 	.word	0x84210843
 80006e0:	82082083 	.word	0x82082083
 80006e4:	40020c00 	.word	0x40020c00
 80006e8:	200043e8 	.word	0x200043e8
 80006ec:	200041a0 	.word	0x200041a0

080006f0 <draw_rectangle>:

}


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b089      	sub	sp, #36	@ 0x24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	4604      	mov	r4, r0
 80006f8:	4608      	mov	r0, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	4623      	mov	r3, r4
 8000700:	80fb      	strh	r3, [r7, #6]
 8000702:	4603      	mov	r3, r0
 8000704:	80bb      	strh	r3, [r7, #4]
 8000706:	460b      	mov	r3, r1
 8000708:	807b      	strh	r3, [r7, #2]
 800070a:	4613      	mov	r3, r2
 800070c:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 800070e:	887a      	ldrh	r2, [r7, #2]
 8000710:	883b      	ldrh	r3, [r7, #0]
 8000712:	fb12 f303 	smulbb	r3, r2, r3
 8000716:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8000718:	f107 020c 	add.w	r2, r7, #12
 800071c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800071e:	4611      	mov	r1, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fec9 	bl	80004b8 <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8000726:	8aba      	ldrh	r2, [r7, #20]
 8000728:	4613      	mov	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4413      	add	r3, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f00a f97c 	bl	800aa2c <malloc>
 8000734:	4603      	mov	r3, r0
 8000736:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8000738:	2300      	movs	r3, #0
 800073a:	82fb      	strh	r3, [r7, #22]
 800073c:	e00f      	b.n	800075e <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 800073e:	8afa      	ldrh	r2, [r7, #22]
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	4413      	add	r3, r2
 800074a:	461a      	mov	r2, r3
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	8819      	ldrh	r1, [r3, #0]
 8000752:	789b      	ldrb	r3, [r3, #2]
 8000754:	8011      	strh	r1, [r2, #0]
 8000756:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8000758:	8afb      	ldrh	r3, [r7, #22]
 800075a:	3301      	adds	r3, #1
 800075c:	82fb      	strh	r3, [r7, #22]
 800075e:	8afa      	ldrh	r2, [r7, #22]
 8000760:	8abb      	ldrh	r3, [r7, #20]
 8000762:	429a      	cmp	r2, r3
 8000764:	d3eb      	bcc.n	800073e <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8000766:	88fa      	ldrh	r2, [r7, #6]
 8000768:	887b      	ldrh	r3, [r7, #2]
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	3b01      	subs	r3, #1
 8000770:	b29c      	uxth	r4, r3
 8000772:	88ba      	ldrh	r2, [r7, #4]
 8000774:	883b      	ldrh	r3, [r7, #0]
 8000776:	4413      	add	r3, r2
 8000778:	b29b      	uxth	r3, r3
 800077a:	3b01      	subs	r3, #1
 800077c:	b29b      	uxth	r3, r3
 800077e:	88b9      	ldrh	r1, [r7, #4]
 8000780:	88f8      	ldrh	r0, [r7, #6]
 8000782:	2277      	movs	r2, #119	@ 0x77
 8000784:	9200      	str	r2, [sp, #0]
 8000786:	4622      	mov	r2, r4
 8000788:	f000 fce4 	bl	8001154 <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 800078c:	8aba      	ldrh	r2, [r7, #20]
 800078e:	4613      	mov	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	4619      	mov	r1, r3
 8000796:	6938      	ldr	r0, [r7, #16]
 8000798:	f000 fb44 	bl	8000e24 <LCD_send_data_multi>

	free(data);
 800079c:	6938      	ldr	r0, [r7, #16]
 800079e:	f00a f94d 	bl	800aa3c <free>

}
 80007a2:	bf00      	nop
 80007a4:	371c      	adds	r7, #28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd90      	pop	{r4, r7, pc}
	...

080007ac <draw_entity>:
	free(entity->ST.SD.data);
}


void draw_entity(ENTITY *entity)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b089      	sub	sp, #36	@ 0x24
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	6078      	str	r0, [r7, #4]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]

	if(((entity->id & 1<<7) != 0))
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	da72      	bge.n	80008a8 <draw_entity+0xfc>
	{
		/*Avem imagine monocolor <= 32x32 -> imagine nu se afla pe cardul SD!*/

		if((entity->id & (0xC0)) == 0xC0)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80007ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80007cc:	d108      	bne.n	80007e0 <draw_entity+0x34>
		{
			/*
			 * Imagine stocata local in bufferul *data din afara structurii
			 */

			LCD_send_data_multi(entity->ST.LC.data, entity->ST.LC.size);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f000 fb23 	bl	8000e24 <LCD_send_data_multi>
 80007de:	e0e8      	b.n	80009b2 <draw_entity+0x206>
			return;

		}

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	fb12 f303 	smulbb	r3, r2, r3
 80007f4:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->ST.color, pixel);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	899b      	ldrh	r3, [r3, #12]
 80007fa:	f107 020c 	add.w	r2, r7, #12
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe59 	bl	80004b8 <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8000806:	8aba      	ldrh	r2, [r7, #20]
 8000808:	4613      	mov	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f00a f90c 	bl	800aa2c <malloc>
 8000814:	4603      	mov	r3, r0
 8000816:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8000818:	2300      	movs	r3, #0
 800081a:	82fb      	strh	r3, [r7, #22]
 800081c:	e00f      	b.n	800083e <draw_entity+0x92>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 800081e:	8afa      	ldrh	r2, [r7, #22]
 8000820:	4613      	mov	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4413      	add	r3, r2
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	4413      	add	r3, r2
 800082a:	461a      	mov	r2, r3
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	8819      	ldrh	r1, [r3, #0]
 8000832:	789b      	ldrb	r3, [r3, #2]
 8000834:	8011      	strh	r1, [r2, #0]
 8000836:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8000838:	8afb      	ldrh	r3, [r7, #22]
 800083a:	3301      	adds	r3, #1
 800083c:	82fb      	strh	r3, [r7, #22]
 800083e:	8afa      	ldrh	r2, [r7, #22]
 8000840:	8abb      	ldrh	r3, [r7, #20]
 8000842:	429a      	cmp	r2, r3
 8000844:	d3eb      	bcc.n	800081e <draw_entity+0x72>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800084c:	b298      	uxth	r0, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000854:	b299      	uxth	r1, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800085c:	b29a      	uxth	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000864:	b29b      	uxth	r3, r3
 8000866:	4413      	add	r3, r2
 8000868:	b29b      	uxth	r3, r3
 800086a:	3b01      	subs	r3, #1
 800086c:	b29c      	uxth	r4, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000874:	b29a      	uxth	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800087c:	b29b      	uxth	r3, r3
 800087e:	4413      	add	r3, r2
 8000880:	b29b      	uxth	r3, r3
 8000882:	3b01      	subs	r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	2277      	movs	r2, #119	@ 0x77
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	4622      	mov	r2, r4
 800088c:	f000 fc62 	bl	8001154 <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000890:	8aba      	ldrh	r2, [r7, #20]
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	4619      	mov	r1, r3
 800089a:	6938      	ldr	r0, [r7, #16]
 800089c:	f000 fac2 	bl	8000e24 <LCD_send_data_multi>

		free(data);
 80008a0:	6938      	ldr	r0, [r7, #16]
 80008a2:	f00a f8cb 	bl	800aa3c <free>
 80008a6:	e084      	b.n	80009b2 <draw_entity+0x206>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 80008a8:	2300      	movs	r3, #0
 80008aa:	817b      	strh	r3, [r7, #10]

		read_image_file(entity, &byteNr, &flagImgDone);
 80008ac:	f107 020f 	add.w	r2, r7, #15
 80008b0:	f107 030a 	add.w	r3, r7, #10
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f001 f8bc 	bl	8001a34 <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008c2:	b298      	uxth	r0, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008ca:	b299      	uxth	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	4413      	add	r3, r2
 80008de:	b29b      	uxth	r3, r3
 80008e0:	3b01      	subs	r3, #1
 80008e2:	b29c      	uxth	r4, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4413      	add	r3, r2
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	3b01      	subs	r3, #1
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	2277      	movs	r2, #119	@ 0x77
 80008fe:	9200      	str	r2, [sp, #0]
 8000900:	4622      	mov	r2, r4
 8000902:	f000 fc27 	bl	8001154 <set_adress_window>

		DC_DATA();
 8000906:	2201      	movs	r2, #1
 8000908:	2108      	movs	r1, #8
 800090a:	482b      	ldr	r0, [pc, #172]	@ (80009b8 <draw_entity+0x20c>)
 800090c:	f002 fdc4 	bl	8003498 <HAL_GPIO_WritePin>
		CS_A();
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	4828      	ldr	r0, [pc, #160]	@ (80009b8 <draw_entity+0x20c>)
 8000916:	f002 fdbf 	bl	8003498 <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 800091a:	897b      	ldrh	r3, [r7, #10]
 800091c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000920:	d20c      	bcs.n	800093c <draw_entity+0x190>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->ST.SD.data, byteNr);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	897a      	ldrh	r2, [r7, #10]
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fa7a 	bl	8000e24 <LCD_send_data_multi>
			free(entity->ST.SD.data);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4618      	mov	r0, r3
 8000936:	f00a f881 	bl	800aa3c <free>
 800093a:	e03a      	b.n	80009b2 <draw_entity+0x206>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 800093c:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <draw_entity+0x210>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	897a      	ldrh	r2, [r7, #10]
 8000948:	4619      	mov	r1, r3
 800094a:	481d      	ldr	r0, [pc, #116]	@ (80009c0 <draw_entity+0x214>)
 800094c:	f004 fce2 	bl	8005314 <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d11c      	bne.n	8000990 <draw_entity+0x1e4>
				{
					break;
				}

				read_image_file(entity, &byteNr, &flagImgDone);
 8000956:	f107 020f 	add.w	r2, r7, #15
 800095a:	f107 030a 	add.w	r3, r7, #10
 800095e:	4619      	mov	r1, r3
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f001 f867 	bl	8001a34 <read_image_file>

				while(flagDmaSpiTx == 0);
 8000966:	bf00      	nop
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <draw_entity+0x210>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0fa      	beq.n	8000968 <draw_entity+0x1bc>
				flagDmaSpiTx = 0;
 8000972:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <draw_entity+0x210>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	897a      	ldrh	r2, [r7, #10]
 800097e:	4619      	mov	r1, r3
 8000980:	480f      	ldr	r0, [pc, #60]	@ (80009c0 <draw_entity+0x214>)
 8000982:	f004 fcc7 	bl	8005314 <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8000986:	897b      	ldrh	r3, [r7, #10]
 8000988:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800098c:	d2e0      	bcs.n	8000950 <draw_entity+0x1a4>
 800098e:	e000      	b.n	8000992 <draw_entity+0x1e6>
					break;
 8000990:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8000992:	bf00      	nop
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <draw_entity+0x210>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0fa      	beq.n	8000994 <draw_entity+0x1e8>
		free(entity->ST.SD.data);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f00a f84a 	bl	800aa3c <free>
		CS_D();
 80009a8:	2201      	movs	r2, #1
 80009aa:	2110      	movs	r1, #16
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <draw_entity+0x20c>)
 80009ae:	f002 fd73 	bl	8003498 <HAL_GPIO_WritePin>

	}


}
 80009b2:	371c      	adds	r7, #28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	200043e8 	.word	0x200043e8
 80009c0:	200041a0 	.word	0x200041a0

080009c4 <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b08c      	sub	sp, #48	@ 0x30
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	4608      	mov	r0, r1
 80009ce:	4611      	mov	r1, r2
 80009d0:	461a      	mov	r2, r3
 80009d2:	4603      	mov	r3, r0
 80009d4:	817b      	strh	r3, [r7, #10]
 80009d6:	460b      	mov	r3, r1
 80009d8:	813b      	strh	r3, [r7, #8]
 80009da:	4613      	mov	r3, r2
 80009dc:	71fb      	strb	r3, [r7, #7]
	 * 		  Modul de Step activ 1, neactiv 0 (deplasare in interiorul ferestrei initiale)
	 * Output: Void
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 80009de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f2c0 80f1 	blt.w	8000bca <translation_entity+0x206>
 80009e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009ec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009f0:	f300 80eb 	bgt.w	8000bca <translation_entity+0x206>
 80009f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f2c0 80e6 	blt.w	8000bca <translation_entity+0x206>
 80009fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a02:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a06:	f300 80e0 	bgt.w	8000bca <translation_entity+0x206>

		return;
	}


	ENTITY temp = *entity;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f107 0414 	add.w	r4, r7, #20
 8000a10:	461d      	mov	r5, r3
 8000a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	6023      	str	r3, [r4, #0]

	entity->x0 = x;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	897a      	ldrh	r2, [r7, #10]
 8000a1e:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	893a      	ldrh	r2, [r7, #8]
 8000a24:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8000a26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a2a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d157      	bne.n	8000ae2 <translation_entity+0x11e>
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d054      	beq.n	8000ae2 <translation_entity+0x11e>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8000a38:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a46:	440b      	add	r3, r1
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	da1d      	bge.n	8000a88 <translation_entity+0xc4>
 8000a4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dd17      	ble.n	8000a88 <translation_entity+0xc4>
		{
			/*Pentru cazul deplasarii pe +x*/
			draw_entity(entity);
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff fea7 	bl	80007ac <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, BackGroundColor); /*Culoare background*/
 8000a5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a62:	b298      	uxth	r0, r3
 8000a64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a68:	b299      	uxth	r1, r3
 8000a6a:	897a      	ldrh	r2, [r7, #10]
 8000a6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a7a:	b29c      	uxth	r4, r3
 8000a7c:	4b57      	ldr	r3, [pc, #348]	@ (8000bdc <translation_entity+0x218>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	4623      	mov	r3, r4
 8000a84:	f7ff fe34 	bl	80006f0 <draw_rectangle>
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000a88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a8c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	f280 809c 	bge.w	8000bce <translation_entity+0x20a>
 8000a96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a9a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	f340 8092 	ble.w	8000bce <translation_entity+0x20a>
		{
			/*Pentru cazul deplasarii pe -x*/
			draw_entity(entity);
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f7ff fe7e 	bl	80007ac <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, BackGroundColor); /*Culoare background*/
 8000ab0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	897b      	ldrh	r3, [r7, #10]
 8000ab8:	4413      	add	r3, r2
 8000aba:	b298      	uxth	r0, r3
 8000abc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ac0:	b299      	uxth	r1, r3
 8000ac2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	897b      	ldrh	r3, [r7, #10]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ad2:	b29c      	uxth	r4, r3
 8000ad4:	4b41      	ldr	r3, [pc, #260]	@ (8000bdc <translation_entity+0x218>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	4623      	mov	r3, r4
 8000adc:	f7ff fe08 	bl	80006f0 <draw_rectangle>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000ae0:	e075      	b.n	8000bce <translation_entity+0x20a>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8000ae2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ae6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d157      	bne.n	8000b9e <translation_entity+0x1da>
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d054      	beq.n	8000b9e <translation_entity+0x1da>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8000af4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000af8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000b02:	440b      	add	r3, r1
 8000b04:	429a      	cmp	r2, r3
 8000b06:	da1e      	bge.n	8000b46 <translation_entity+0x182>
 8000b08:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000b0c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dd18      	ble.n	8000b46 <translation_entity+0x182>
			{
				/*Pentru cazul deplasarii pe +y*/
				draw_entity(entity);
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fe49 	bl	80007ac <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, BackGroundColor);
 8000b1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b1e:	b298      	uxth	r0, r3
 8000b20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000b24:	b299      	uxth	r1, r3
 8000b26:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b2a:	b29c      	uxth	r4, r3
 8000b2c:	893a      	ldrh	r2, [r7, #8]
 8000b2e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <translation_entity+0x218>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	4622      	mov	r2, r4
 8000b42:	f7ff fdd5 	bl	80006f0 <draw_rectangle>
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8000b46:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000b4a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	da3f      	bge.n	8000bd2 <translation_entity+0x20e>
 8000b52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b56:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000b60:	4293      	cmp	r3, r2
 8000b62:	dd36      	ble.n	8000bd2 <translation_entity+0x20e>
			{
				/*Pentru cazul deplasarii pe -y*/
				draw_entity(entity);
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f7ff fe21 	bl	80007ac <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, BackGroundColor);
 8000b6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b6e:	b298      	uxth	r0, r3
 8000b70:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	893b      	ldrh	r3, [r7, #8]
 8000b78:	4413      	add	r3, r2
 8000b7a:	b299      	uxth	r1, r3
 8000b7c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b80:	b29c      	uxth	r4, r3
 8000b82:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	893b      	ldrh	r3, [r7, #8]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <translation_entity+0x218>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	4613      	mov	r3, r2
 8000b96:	4622      	mov	r2, r4
 8000b98:	f7ff fdaa 	bl	80006f0 <draw_rectangle>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8000b9c:	e019      	b.n	8000bd2 <translation_entity+0x20e>

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/

			draw_entity(entity);
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff fe04 	bl	80007ac <draw_entity>
			draw_rectangle(temp.x0, temp.y0, temp.x1, temp.y1, BackGroundColor);
 8000ba4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ba8:	b298      	uxth	r0, r3
 8000baa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000bae:	b299      	uxth	r1, r3
 8000bb0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000bba:	b29c      	uxth	r4, r3
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <translation_entity+0x218>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	4623      	mov	r3, r4
 8000bc4:	f7ff fd94 	bl	80006f0 <draw_rectangle>
 8000bc8:	e004      	b.n	8000bd4 <translation_entity+0x210>
		return;
 8000bca:	bf00      	nop
 8000bcc:	e002      	b.n	8000bd4 <translation_entity+0x210>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000bce:	bf00      	nop
 8000bd0:	e000      	b.n	8000bd4 <translation_entity+0x210>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8000bd2:	bf00      	nop
		}


}
 8000bd4:	3728      	adds	r7, #40	@ 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000000 	.word	0x20000000

08000be0 <PendSV_Handler>:
	 * citirea datelor de pe cardul SD prin SDIO)
	 * Feature: De comutat in functie de o politica de planificare,
	 * momentan se comuta circular intre 2 procese de test!
	 */

    __asm("CPSID   I");
 8000be0:	b672      	cpsid	i

    __asm("PUSH    {R4-R7}");
 8000be2:	b4f0      	push	{r4, r5, r6, r7}
    __asm("MOV     R4, R8");
 8000be4:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 8000be6:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 8000be8:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 8000bea:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 8000bec:	b4f0      	push	{r4, r5, r6, r7}

    __asm("LDR     R0, =currentProcess");
 8000bee:	4808      	ldr	r0, [pc, #32]	@ (8000c10 <PendSV_Handler+0x30>)
    __asm("LDR     R1, [R0]");
 8000bf0:	6801      	ldr	r1, [r0, #0]
    __asm("MOV     R4, SP");
 8000bf2:	466c      	mov	r4, sp
    __asm("STR     R4, [R1]");
 8000bf4:	600c      	str	r4, [r1, #0]
    __asm("LDR     R1, [R1,#4]"); /*diferentiere pentru pnext*/
 8000bf6:	6849      	ldr	r1, [r1, #4]
    __asm("STR     R1, [R0]");
 8000bf8:	6001      	str	r1, [r0, #0]
    __asm("LDR     R4, [R1]");
 8000bfa:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");      /*In R4 avem adresa stivei pnext proces OBS: De realizat un scheduler care */
 8000bfc:	46a5      	mov	sp, r4
    __asm("POP     {R4-R7}");		/*returneaza adresa tcb[i] a urmatorului proces de pus in executie*/
 8000bfe:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8000c00:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8000c02:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8000c04:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8000c06:	46bb      	mov	fp, r7
    __asm("POP     {R4-R7}");
 8000c08:	bcf0      	pop	{r4, r5, r6, r7}

    __asm("CPSIE   I ");
 8000c0a:	b662      	cpsie	i
    __asm("BX      LR");
 8000c0c:	4770      	bx	lr
}
 8000c0e:	bf00      	nop
 8000c10:	200040a0 	.word	0x200040a0

08000c14 <kernel_add_process>:


void kernel_add_process(void (*adrFunction)(void))
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	__asm("CPSID   I");
 8000c1c:	b672      	cpsid	i

	static uint8_t nrProc = 0;

	if(nrProc == 0)
 8000c1e:	4b5c      	ldr	r3, [pc, #368]	@ (8000d90 <kernel_add_process+0x17c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d121      	bne.n	8000c6a <kernel_add_process+0x56>
	{
		tcb[0].pnext = &tcb[0];
 8000c26:	4b5b      	ldr	r3, [pc, #364]	@ (8000d94 <kernel_add_process+0x180>)
 8000c28:	4a5a      	ldr	r2, [pc, #360]	@ (8000d94 <kernel_add_process+0x180>)
 8000c2a:	605a      	str	r2, [r3, #4]

		tcb[0].pstack = &tcb[0].stack[STACKSIZE-16];            /*Atribuire SP*/
 8000c2c:	4b59      	ldr	r3, [pc, #356]	@ (8000d94 <kernel_add_process+0x180>)
 8000c2e:	4a5a      	ldr	r2, [pc, #360]	@ (8000d98 <kernel_add_process+0x184>)
 8000c30:	601a      	str	r2, [r3, #0]
		tcb[0].pfunction = adrFunction;                         /*Atribuire adr task in TCB*/
 8000c32:	4a58      	ldr	r2, [pc, #352]	@ (8000d94 <kernel_add_process+0x180>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6093      	str	r3, [r2, #8]
		tcb[0].stack[STACKSIZE-1] = 0x01000000;                 /*Atribuire thumb mod operare reg*/
 8000c38:	4b56      	ldr	r3, [pc, #344]	@ (8000d94 <kernel_add_process+0x180>)
 8000c3a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c44:	6093      	str	r3, [r2, #8]
		tcb[0].stack[STACKSIZE-2] = (int32_t)tcb[0].pfunction;  /*Atribuire reg PC catre adr incep Task/functie*/
 8000c46:	4b53      	ldr	r3, [pc, #332]	@ (8000d94 <kernel_add_process+0x180>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <kernel_add_process+0x180>)
 8000c4e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c52:	605a      	str	r2, [r3, #4]
		tcb[0].pID = nrProc++;
 8000c54:	4b4e      	ldr	r3, [pc, #312]	@ (8000d90 <kernel_add_process+0x17c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	b2d1      	uxtb	r1, r2
 8000c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d90 <kernel_add_process+0x17c>)
 8000c5e:	7011      	strb	r1, [r2, #0]
 8000c60:	4a4c      	ldr	r2, [pc, #304]	@ (8000d94 <kernel_add_process+0x180>)
 8000c62:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8000c66:	7313      	strb	r3, [r2, #12]
 8000c68:	e08a      	b.n	8000d80 <kernel_add_process+0x16c>

	}

	else
	{
		tcb[nrProc].pnext = &tcb[nrProc-1];
 8000c6a:	4b49      	ldr	r3, [pc, #292]	@ (8000d90 <kernel_add_process+0x17c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	1e5a      	subs	r2, r3, #1
 8000c70:	4b47      	ldr	r3, [pc, #284]	@ (8000d90 <kernel_add_process+0x17c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	4613      	mov	r3, r2
 8000c78:	025b      	lsls	r3, r3, #9
 8000c7a:	4413      	add	r3, r2
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	4a45      	ldr	r2, [pc, #276]	@ (8000d94 <kernel_add_process+0x180>)
 8000c80:	441a      	add	r2, r3
 8000c82:	4944      	ldr	r1, [pc, #272]	@ (8000d94 <kernel_add_process+0x180>)
 8000c84:	4603      	mov	r3, r0
 8000c86:	025b      	lsls	r3, r3, #9
 8000c88:	4403      	add	r3, r0
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	440b      	add	r3, r1
 8000c8e:	3304      	adds	r3, #4
 8000c90:	601a      	str	r2, [r3, #0]
		tcb[0].pnext = &tcb[nrProc];
 8000c92:	4b3f      	ldr	r3, [pc, #252]	@ (8000d90 <kernel_add_process+0x17c>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	4613      	mov	r3, r2
 8000c9a:	025b      	lsls	r3, r3, #9
 8000c9c:	4413      	add	r3, r2
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	4a3c      	ldr	r2, [pc, #240]	@ (8000d94 <kernel_add_process+0x180>)
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a3b      	ldr	r2, [pc, #236]	@ (8000d94 <kernel_add_process+0x180>)
 8000ca6:	6053      	str	r3, [r2, #4]

		tcb[nrProc].pstack = &tcb[nrProc].stack[STACKSIZE-16];           /*Atribuire SP*/
 8000ca8:	4b39      	ldr	r3, [pc, #228]	@ (8000d90 <kernel_add_process+0x17c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b38      	ldr	r3, [pc, #224]	@ (8000d90 <kernel_add_process+0x17c>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	025b      	lsls	r3, r3, #9
 8000cb8:	4413      	add	r3, r2
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	f503 53fe 	add.w	r3, r3, #8128	@ 0x1fc0
 8000cc0:	3308      	adds	r3, #8
 8000cc2:	4a34      	ldr	r2, [pc, #208]	@ (8000d94 <kernel_add_process+0x180>)
 8000cc4:	4413      	add	r3, r2
 8000cc6:	1d1a      	adds	r2, r3, #4
 8000cc8:	4932      	ldr	r1, [pc, #200]	@ (8000d94 <kernel_add_process+0x180>)
 8000cca:	4603      	mov	r3, r0
 8000ccc:	025b      	lsls	r3, r3, #9
 8000cce:	4403      	add	r3, r0
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	440b      	add	r3, r1
 8000cd4:	601a      	str	r2, [r3, #0]
		tcb[nrProc].pfunction = adrFunction;                             /*Atribuire adr task in TCB*/
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8000d90 <kernel_add_process+0x17c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8000d94 <kernel_add_process+0x180>)
 8000cde:	460b      	mov	r3, r1
 8000ce0:	025b      	lsls	r3, r3, #9
 8000ce2:	440b      	add	r3, r1
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	4413      	add	r3, r2
 8000ce8:	3308      	adds	r3, #8
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	601a      	str	r2, [r3, #0]
		tcb[nrProc].stack[STACKSIZE-1] = 0x01000000;                     /*Atribuire thumb mod operare reg*/
 8000cee:	4b28      	ldr	r3, [pc, #160]	@ (8000d90 <kernel_add_process+0x17c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4a27      	ldr	r2, [pc, #156]	@ (8000d94 <kernel_add_process+0x180>)
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	025b      	lsls	r3, r3, #9
 8000cfa:	440b      	add	r3, r1
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	4413      	add	r3, r2
 8000d00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d04:	3308      	adds	r3, #8
 8000d06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d0a:	601a      	str	r2, [r3, #0]
		tcb[nrProc].stack[STACKSIZE-2] = (int32_t)tcb[nrProc].pfunction; /*Atribuire reg PC catre adr incep Task/functie*/
 8000d0c:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <kernel_add_process+0x17c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	4a20      	ldr	r2, [pc, #128]	@ (8000d94 <kernel_add_process+0x180>)
 8000d14:	460b      	mov	r3, r1
 8000d16:	025b      	lsls	r3, r3, #9
 8000d18:	440b      	add	r3, r1
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	4413      	add	r3, r2
 8000d1e:	3308      	adds	r3, #8
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <kernel_add_process+0x17c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	4619      	mov	r1, r3
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d94 <kernel_add_process+0x180>)
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	025b      	lsls	r3, r3, #9
 8000d30:	440b      	add	r3, r1
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	4413      	add	r3, r2
 8000d36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	6018      	str	r0, [r3, #0]
		tcb[nrProc].pID = nrProc;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <kernel_add_process+0x17c>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <kernel_add_process+0x17c>)
 8000d46:	7818      	ldrb	r0, [r3, #0]
 8000d48:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <kernel_add_process+0x180>)
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	440b      	add	r3, r1
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	4413      	add	r3, r2
 8000d54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d58:	330c      	adds	r3, #12
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	701a      	strb	r2, [r3, #0]

	    currentProcess = &tcb[nrProc];
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <kernel_add_process+0x17c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4613      	mov	r3, r2
 8000d66:	025b      	lsls	r3, r3, #9
 8000d68:	4413      	add	r3, r2
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	4a09      	ldr	r2, [pc, #36]	@ (8000d94 <kernel_add_process+0x180>)
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <kernel_add_process+0x188>)
 8000d72:	6013      	str	r3, [r2, #0]
	    nrProc++;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <kernel_add_process+0x17c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <kernel_add_process+0x17c>)
 8000d7e:	701a      	strb	r2, [r3, #0]
	}

    __asm("CPSIE   I ");
 8000d80:	b662      	cpsie	i

}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200040a4 	.word	0x200040a4
 8000d94:	20000080 	.word	0x20000080
 8000d98:	2000204c 	.word	0x2000204c
 8000d9c:	200040a0 	.word	0x200040a0

08000da0 <kernel_start>:
{
	/*
	 * Functie de start a kernelului.
	 */

	__asm("CPSID   I");
 8000da0:	b672      	cpsid	i

	__asm("LDR     R0, =startOS");
 8000da2:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <kernel_start+0x34>)
	__asm("MOV     R1, 1");
 8000da4:	f04f 0101 	mov.w	r1, #1
	__asm("STR     R1, [R0]");
 8000da8:	6001      	str	r1, [r0, #0]
    __asm("LDR     R0, =currentProcess");
 8000daa:	480b      	ldr	r0, [pc, #44]	@ (8000dd8 <kernel_start+0x38>)
    __asm("LDR     R2, [R0]");
 8000dac:	6802      	ldr	r2, [r0, #0]
    __asm("LDR     R4, [R2]");
 8000dae:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4"); /*punem in SP procesorului pstack al &curentProc*/
 8000db0:	46a5      	mov	sp, r4
    /*restauram contextul initial, emuland o intr*/
    __asm("POP     {R4-R7}");
 8000db2:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8000db4:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8000db6:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8000db8:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8000dba:	46bb      	mov	fp, r7
    __asm("POP     {R4-R7}");
 8000dbc:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("POP     {R0-R3}");
 8000dbe:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 8000dc0:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 8000dc2:	46a4      	mov	ip, r4
    __asm("ADD     SP,SP,#4"); /*restauram registrul LR sarind peste R12*/
 8000dc4:	b001      	add	sp, #4
    __asm("POP     {R4}");		/*deaorece nu se poate face pop pentru R12*/
 8000dc6:	bc10      	pop	{r4}

    __asm("MOV     LR, R4");
 8000dc8:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4"); /*simulam comportamentul stivei sarind la PC*/
 8000dca:	b001      	add	sp, #4

    __asm("CPSIE   I ");
 8000dcc:	b662      	cpsie	i
    __asm("BX      LR");
 8000dce:	4770      	bx	lr

}
 8000dd0:	bf00      	nop
 8000dd2:	0000      	.short	0x0000
 8000dd4:	200043ec 	.word	0x200043ec
 8000dd8:	200040a0 	.word	0x200040a0

08000ddc <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 8000de6:	2200      	movs	r2, #0
 8000de8:	2108      	movs	r1, #8
 8000dea:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <LCD_send_command+0x40>)
 8000dec:	f002 fb54 	bl	8003498 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8000df0:	2200      	movs	r2, #0
 8000df2:	2110      	movs	r1, #16
 8000df4:	4809      	ldr	r0, [pc, #36]	@ (8000e1c <LCD_send_command+0x40>)
 8000df6:	f002 fb4f 	bl	8003498 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 8000dfa:	1df9      	adds	r1, r7, #7
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	2201      	movs	r2, #1
 8000e02:	4807      	ldr	r0, [pc, #28]	@ (8000e20 <LCD_send_command+0x44>)
 8000e04:	f004 f81b 	bl	8004e3e <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <LCD_send_command+0x40>)
 8000e0e:	f002 fb43 	bl	8003498 <HAL_GPIO_WritePin>


}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40020c00 	.word	0x40020c00
 8000e20:	200041a0 	.word	0x200041a0

08000e24 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 8000e2e:	4b34      	ldr	r3, [pc, #208]	@ (8000f00 <LCD_send_data_multi+0xdc>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 8000e34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e38:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e4c:	6939      	ldr	r1, [r7, #16]
 8000e4e:	fb01 f202 	mul.w	r2, r1, r2
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 8000e56:	2201      	movs	r2, #1
 8000e58:	2108      	movs	r1, #8
 8000e5a:	482a      	ldr	r0, [pc, #168]	@ (8000f04 <LCD_send_data_multi+0xe0>)
 8000e5c:	f002 fb1c 	bl	8003498 <HAL_GPIO_WritePin>
	CS_A();
 8000e60:	2200      	movs	r2, #0
 8000e62:	2110      	movs	r1, #16
 8000e64:	4827      	ldr	r0, [pc, #156]	@ (8000f04 <LCD_send_data_multi+0xe0>)
 8000e66:	f002 fb17 	bl	8003498 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d821      	bhi.n	8000eb6 <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 8000e72:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <LCD_send_data_multi+0xdc>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	4821      	ldr	r0, [pc, #132]	@ (8000f08 <LCD_send_data_multi+0xe4>)
 8000e82:	f004 fa47 	bl	8005314 <HAL_SPI_Transmit_DMA>
 8000e86:	e02c      	b.n	8000ee2 <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 8000e88:	bf00      	nop
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <LCD_send_data_multi+0xdc>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0fa      	beq.n	8000e8a <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <LCD_send_data_multi+0xdc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4819      	ldr	r0, [pc, #100]	@ (8000f08 <LCD_send_data_multi+0xe4>)
 8000ea4:	f004 fa36 	bl	8005314 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4413      	add	r3, r2
 8000eae:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e5      	bne.n	8000e88 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00f      	beq.n	8000ee2 <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 8000ec2:	bf00      	nop
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <LCD_send_data_multi+0xdc>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0fa      	beq.n	8000ec4 <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <LCD_send_data_multi+0xdc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	480a      	ldr	r0, [pc, #40]	@ (8000f08 <LCD_send_data_multi+0xe4>)
 8000ede:	f004 fa19 	bl	8005314 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 8000ee2:	bf00      	nop
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <LCD_send_data_multi+0xdc>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0fa      	beq.n	8000ee4 <LCD_send_data_multi+0xc0>
	CS_D();
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <LCD_send_data_multi+0xe0>)
 8000ef4:	f002 fad0 	bl	8003498 <HAL_GPIO_WritePin>

}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200043e8 	.word	0x200043e8
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	200041a0 	.word	0x200041a0

08000f0c <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 8000f16:	2201      	movs	r2, #1
 8000f18:	2108      	movs	r1, #8
 8000f1a:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <LCD_send_data+0x40>)
 8000f1c:	f002 fabc 	bl	8003498 <HAL_GPIO_WritePin>
	CS_A();
 8000f20:	2200      	movs	r2, #0
 8000f22:	2110      	movs	r1, #16
 8000f24:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <LCD_send_data+0x40>)
 8000f26:	f002 fab7 	bl	8003498 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8000f2a:	1df9      	adds	r1, r7, #7
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	2201      	movs	r2, #1
 8000f32:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <LCD_send_data+0x44>)
 8000f34:	f003 ff83 	bl	8004e3e <HAL_SPI_Transmit>

	CS_D();
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <LCD_send_data+0x40>)
 8000f3e:	f002 faab 	bl	8003498 <HAL_GPIO_WritePin>

}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020c00 	.word	0x40020c00
 8000f50:	200041a0 	.word	0x200041a0

08000f54 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2140      	movs	r1, #64	@ 0x40
 8000f5c:	487c      	ldr	r0, [pc, #496]	@ (8001150 <ILI9488_driver_init+0x1fc>)
 8000f5e:	f002 fa9b 	bl	8003498 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f62:	200a      	movs	r0, #10
 8000f64:	f001 fb4a 	bl	80025fc <HAL_Delay>
	RST_D();
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2140      	movs	r1, #64	@ 0x40
 8000f6c:	4878      	ldr	r0, [pc, #480]	@ (8001150 <ILI9488_driver_init+0x1fc>)
 8000f6e:	f002 fa93 	bl	8003498 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 8000f72:	2001      	movs	r0, #1
 8000f74:	f7ff ff32 	bl	8000ddc <LCD_send_command>
	HAL_Delay(150);
 8000f78:	2096      	movs	r0, #150	@ 0x96
 8000f7a:	f001 fb3f 	bl	80025fc <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 8000f7e:	2011      	movs	r0, #17
 8000f80:	f7ff ff2c 	bl	8000ddc <LCD_send_command>
	HAL_Delay(255);
 8000f84:	20ff      	movs	r0, #255	@ 0xff
 8000f86:	f001 fb39 	bl	80025fc <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8000f8a:	20e0      	movs	r0, #224	@ 0xe0
 8000f8c:	f7ff ff26 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffbb 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x0C);
 8000f96:	200c      	movs	r0, #12
 8000f98:	f7ff ffb8 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x05);
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f7ff ffb5 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x04);
 8000fa2:	2004      	movs	r0, #4
 8000fa4:	f7ff ffb2 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x0F);
 8000fa8:	200f      	movs	r0, #15
 8000faa:	f7ff ffaf 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x06);
 8000fae:	2006      	movs	r0, #6
 8000fb0:	f7ff ffac 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x3A);
 8000fb4:	203a      	movs	r0, #58	@ 0x3a
 8000fb6:	f7ff ffa9 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x56);
 8000fba:	2056      	movs	r0, #86	@ 0x56
 8000fbc:	f7ff ffa6 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x4D);
 8000fc0:	204d      	movs	r0, #77	@ 0x4d
 8000fc2:	f7ff ffa3 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x03);
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	f7ff ffa0 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x0A);
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f7ff ff9d 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x06);
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f7ff ff9a 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x30);
 8000fd8:	2030      	movs	r0, #48	@ 0x30
 8000fda:	f7ff ff97 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x3E);
 8000fde:	203e      	movs	r0, #62	@ 0x3e
 8000fe0:	f7ff ff94 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x0F);
 8000fe4:	200f      	movs	r0, #15
 8000fe6:	f7ff ff91 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 8000fea:	20e1      	movs	r0, #225	@ 0xe1
 8000fec:	f7ff fef6 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x00);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff ff8b 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x13);
 8000ff6:	2013      	movs	r0, #19
 8000ff8:	f7ff ff88 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x18);
 8000ffc:	2018      	movs	r0, #24
 8000ffe:	f7ff ff85 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x01);
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff ff82 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x11);
 8001008:	2011      	movs	r0, #17
 800100a:	f7ff ff7f 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x06);
 800100e:	2006      	movs	r0, #6
 8001010:	f7ff ff7c 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x38);
 8001014:	2038      	movs	r0, #56	@ 0x38
 8001016:	f7ff ff79 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x34);
 800101a:	2034      	movs	r0, #52	@ 0x34
 800101c:	f7ff ff76 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x4D);
 8001020:	204d      	movs	r0, #77	@ 0x4d
 8001022:	f7ff ff73 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x06);
 8001026:	2006      	movs	r0, #6
 8001028:	f7ff ff70 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x0D);
 800102c:	200d      	movs	r0, #13
 800102e:	f7ff ff6d 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x0B);
 8001032:	200b      	movs	r0, #11
 8001034:	f7ff ff6a 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x31);
 8001038:	2031      	movs	r0, #49	@ 0x31
 800103a:	f7ff ff67 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x37);
 800103e:	2037      	movs	r0, #55	@ 0x37
 8001040:	f7ff ff64 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x0F);
 8001044:	200f      	movs	r0, #15
 8001046:	f7ff ff61 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 800104a:	20c0      	movs	r0, #192	@ 0xc0
 800104c:	f7ff fec6 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x18);
 8001050:	2018      	movs	r0, #24
 8001052:	f7ff ff5b 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x16);
 8001056:	2016      	movs	r0, #22
 8001058:	f7ff ff58 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 800105c:	20c1      	movs	r0, #193	@ 0xc1
 800105e:	f7ff febd 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x45);
 8001062:	2045      	movs	r0, #69	@ 0x45
 8001064:	f7ff ff52 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8001068:	20c2      	movs	r0, #194	@ 0xc2
 800106a:	f7ff feb7 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x33);
 800106e:	2033      	movs	r0, #51	@ 0x33
 8001070:	f7ff ff4c 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 8001074:	20c3      	movs	r0, #195	@ 0xc3
 8001076:	f7ff feb1 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x33);
 800107a:	2033      	movs	r0, #51	@ 0x33
 800107c:	f7ff ff46 	bl	8000f0c <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8001080:	2036      	movs	r0, #54	@ 0x36
 8001082:	f7ff feab 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 8001086:	205c      	movs	r0, #92	@ 0x5c
 8001088:	f7ff ff40 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 800108c:	203a      	movs	r0, #58	@ 0x3a
 800108e:	f7ff fea5 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 8001092:	2006      	movs	r0, #6
 8001094:	f7ff ff3a 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fe9f 	bl	8000ddc <LCD_send_command>
	LCD_send_command(0x00);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fe9c 	bl	8000ddc <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 80010a4:	20b0      	movs	r0, #176	@ 0xb0
 80010a6:	f7ff fe99 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff ff2e 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 80010b0:	20b1      	movs	r0, #177	@ 0xb1
 80010b2:	f7ff fe93 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 80010b6:	20a0      	movs	r0, #160	@ 0xa0
 80010b8:	f7ff ff28 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 80010bc:	2011      	movs	r0, #17
 80010be:	f7ff ff25 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 80010c2:	20b4      	movs	r0, #180	@ 0xb4
 80010c4:	f7ff fe8a 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 80010c8:	2002      	movs	r0, #2
 80010ca:	f7ff ff1f 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 80010ce:	20b5      	movs	r0, #181	@ 0xb5
 80010d0:	f7ff fe84 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x02);
 80010d4:	2002      	movs	r0, #2
 80010d6:	f7ff ff19 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x02);
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff ff16 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x0A);
 80010e0:	200a      	movs	r0, #10
 80010e2:	f7ff ff13 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x04);
 80010e6:	2004      	movs	r0, #4
 80010e8:	f7ff ff10 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 80010ec:	20b6      	movs	r0, #182	@ 0xb6
 80010ee:	f7ff fe75 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x02);
 80010f2:	2002      	movs	r0, #2
 80010f4:	f7ff ff0a 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x02);
 80010f8:	2002      	movs	r0, #2
 80010fa:	f7ff ff07 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x3B);
 80010fe:	203b      	movs	r0, #59	@ 0x3b
 8001100:	f7ff ff04 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8001104:	20e9      	movs	r0, #233	@ 0xe9
 8001106:	f7ff fe69 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fefe 	bl	8000f0c <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8001110:	20f7      	movs	r0, #247	@ 0xf7
 8001112:	f7ff fe63 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0xA9);
 8001116:	20a9      	movs	r0, #169	@ 0xa9
 8001118:	f7ff fef8 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x51);
 800111c:	2051      	movs	r0, #81	@ 0x51
 800111e:	f7ff fef5 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x2C);
 8001122:	202c      	movs	r0, #44	@ 0x2c
 8001124:	f7ff fef2 	bl	8000f0c <LCD_send_data>
	LCD_send_data(0x82);
 8001128:	2082      	movs	r0, #130	@ 0x82
 800112a:	f7ff feef 	bl	8000f0c <LCD_send_data>


	LCD_send_command(0x11);
 800112e:	2011      	movs	r0, #17
 8001130:	f7ff fe54 	bl	8000ddc <LCD_send_command>
	HAL_Delay(255);
 8001134:	20ff      	movs	r0, #255	@ 0xff
 8001136:	f001 fa61 	bl	80025fc <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 800113a:	2051      	movs	r0, #81	@ 0x51
 800113c:	f7ff fe4e 	bl	8000ddc <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8001140:	20ff      	movs	r0, #255	@ 0xff
 8001142:	f7ff fee3 	bl	8000f0c <LCD_send_data>
	LCD_send_command(0x29); //Display on
 8001146:	2029      	movs	r0, #41	@ 0x29
 8001148:	f7ff fe48 	bl	8000ddc <LCD_send_command>


}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020c00 	.word	0x40020c00

08001154 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
 800116e:	4613      	mov	r3, r2
 8001170:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 8001172:	202a      	movs	r0, #42	@ 0x2a
 8001174:	f7ff fe32 	bl	8000ddc <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	b29b      	uxth	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	733b      	strb	r3, [r7, #12]
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	b29b      	uxth	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	73bb      	strb	r3, [r7, #14]
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2104      	movs	r1, #4
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fe40 	bl	8000e24 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 80011a4:	202b      	movs	r0, #43	@ 0x2b
 80011a6:	f7ff fe19 	bl	8000ddc <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	733b      	strb	r3, [r7, #12]
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 80011ba:	883b      	ldrh	r3, [r7, #0]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	b29b      	uxth	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73bb      	strb	r3, [r7, #14]
 80011c4:	883b      	ldrh	r3, [r7, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2104      	movs	r1, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe27 	bl	8000e24 <LCD_send_data_multi>

	if(x == 'w')
 80011d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011da:	2b77      	cmp	r3, #119	@ 0x77
 80011dc:	d102      	bne.n	80011e4 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 80011de:	202c      	movs	r0, #44	@ 0x2c
 80011e0:	f7ff fdfc 	bl	8000ddc <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 80011e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011e8:	2b72      	cmp	r3, #114	@ 0x72
 80011ea:	d102      	bne.n	80011f2 <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 80011ec:	202e      	movs	r0, #46	@ 0x2e
 80011ee:	f7ff fdf5 	bl	8000ddc <LCD_send_command>
	}


}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
	...

080011fc <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	if(hspi->Instance == SPI1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <HAL_SPI_TxCpltCallback+0x24>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d102      	bne.n	8001214 <HAL_SPI_TxCpltCallback+0x18>
	{
		flagDmaSpiTx = 1;
 800120e:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <HAL_SPI_TxCpltCallback+0x28>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
	}



}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40013000 	.word	0x40013000
 8001224:	200043e8 	.word	0x200043e8

08001228 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	if(hspi->Instance == SPI1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a2a      	ldr	r2, [pc, #168]	@ (80012e0 <HAL_SPI_RxCpltCallback+0xb8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d102      	bne.n	8001240 <HAL_SPI_RxCpltCallback+0x18>
	{
		/*
		 * SPI1 folosit pentru LCD
		 */

		flagDmaSpiRx = 1;
 800123a:	4b2a      	ldr	r3, [pc, #168]	@ (80012e4 <HAL_SPI_RxCpltCallback+0xbc>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]

	}


	if(hspi->Instance == SPI2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a28      	ldr	r2, [pc, #160]	@ (80012e8 <HAL_SPI_RxCpltCallback+0xc0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d145      	bne.n	80012d6 <HAL_SPI_RxCpltCallback+0xae>
	{
		/*
		 * Receptionare comenzi controller
		 */

		switch(dataController)
 800124a:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HAL_SPI_RxCpltCallback+0xc4>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	3b01      	subs	r3, #1
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d837      	bhi.n	80012c4 <HAL_SPI_RxCpltCallback+0x9c>
 8001254:	a201      	add	r2, pc, #4	@ (adr r2, 800125c <HAL_SPI_RxCpltCallback+0x34>)
 8001256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125a:	bf00      	nop
 800125c:	0800129d 	.word	0x0800129d
 8001260:	080012a5 	.word	0x080012a5
 8001264:	080012c5 	.word	0x080012c5
 8001268:	080012ad 	.word	0x080012ad
 800126c:	080012c5 	.word	0x080012c5
 8001270:	080012c5 	.word	0x080012c5
 8001274:	080012c5 	.word	0x080012c5
 8001278:	080012b5 	.word	0x080012b5
 800127c:	080012c5 	.word	0x080012c5
 8001280:	080012c5 	.word	0x080012c5
 8001284:	080012c5 	.word	0x080012c5
 8001288:	080012c5 	.word	0x080012c5
 800128c:	080012c5 	.word	0x080012c5
 8001290:	080012c5 	.word	0x080012c5
 8001294:	080012c5 	.word	0x080012c5
 8001298:	080012bd 	.word	0x080012bd
		{
		  	case DxRight:
		  	  currentDx = DxRight;
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <HAL_SPI_RxCpltCallback+0xc8>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
		  	  break;
 80012a2:	e013      	b.n	80012cc <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxLeft:
		  	  currentDx = DxLeft;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_SPI_RxCpltCallback+0xc8>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	701a      	strb	r2, [r3, #0]
		  	  break;
 80012aa:	e00f      	b.n	80012cc <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxUp:
		  	  currentDx = DxUp;
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <HAL_SPI_RxCpltCallback+0xc8>)
 80012ae:	2204      	movs	r2, #4
 80012b0:	701a      	strb	r2, [r3, #0]
		  	  break;
 80012b2:	e00b      	b.n	80012cc <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxDown:
		  	  currentDx = DxDown;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_SPI_RxCpltCallback+0xc8>)
 80012b6:	2208      	movs	r2, #8
 80012b8:	701a      	strb	r2, [r3, #0]
		  	  break;
 80012ba:	e007      	b.n	80012cc <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxStart:
		  	  currentDx = DxStart;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_SPI_RxCpltCallback+0xc8>)
 80012be:	2210      	movs	r2, #16
 80012c0:	701a      	strb	r2, [r3, #0]
		  	  break;
 80012c2:	e003      	b.n	80012cc <HAL_SPI_RxCpltCallback+0xa4>
		  	default:
		  	  currentDx = 0x00;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_SPI_RxCpltCallback+0xc8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		  	  break;
 80012ca:	bf00      	nop
		}

		/*Reinitializare intrerupere rcpt SPI2 intr Controller*/

		HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController));
 80012cc:	2201      	movs	r2, #1
 80012ce:	4907      	ldr	r1, [pc, #28]	@ (80012ec <HAL_SPI_RxCpltCallback+0xc4>)
 80012d0:	4808      	ldr	r0, [pc, #32]	@ (80012f4 <HAL_SPI_RxCpltCallback+0xcc>)
 80012d2:	f003 fef9 	bl	80050c8 <HAL_SPI_Receive_IT>

	}

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40013000 	.word	0x40013000
 80012e4:	200043e9 	.word	0x200043e9
 80012e8:	40003800 	.word	0x40003800
 80012ec:	200043ea 	.word	0x200043ea
 80012f0:	200043eb 	.word	0x200043eb
 80012f4:	200041f8 	.word	0x200041f8

080012f8 <HAL_TIM_PeriodElapsedCallback>:

unsigned int k = 0;
extern int mutex;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a11      	ldr	r2, [pc, #68]	@ (800134c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d11a      	bne.n	8001340 <HAL_TIM_PeriodElapsedCallback+0x48>
    {

    	k = (k+1)%50;
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001312:	fba3 1302 	umull	r1, r3, r3, r2
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	2132      	movs	r1, #50	@ 0x32
 800131a:	fb01 f303 	mul.w	r3, r1, r3
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001322:	6013      	str	r3, [r2, #0]

    	if(startOS == 1 && mutex==0)
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d109      	bne.n	8001340 <HAL_TIM_PeriodElapsedCallback+0x48>
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <HAL_TIM_PeriodElapsedCallback+0x48>
    	{
    		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; /*comutare de context cu ISR PendSV*/
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800133a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133e:	6053      	str	r3, [r2, #4]
    	}
    }
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40000800 	.word	0x40000800
 8001350:	200043f0 	.word	0x200043f0
 8001354:	51eb851f 	.word	0x51eb851f
 8001358:	200043ec 	.word	0x200043ec
 800135c:	2000007c 	.word	0x2000007c
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Task0>:


volatile void Task0()
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0

	ENTITY entity;
	entity.x0 = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 200;
 800136e:	23c8      	movs	r3, #200	@ 0xc8
 8001370:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 8001372:	2340      	movs	r3, #64	@ 0x40
 8001374:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 8001376:	2340      	movs	r3, #64	@ 0x40
 8001378:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 800137e:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001382:	823b      	strh	r3, [r7, #16]

    while(1)
    {
        //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
        //mutex = 1;
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2110      	movs	r1, #16
 8001388:	4809      	ldr	r0, [pc, #36]	@ (80013b0 <Task0+0x4c>)
 800138a:	f002 f885 	bl	8003498 <HAL_GPIO_WritePin>
        translation_entity(&entity, entity.x0+1, entity.y0, 1);
 800138e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001392:	b29b      	uxth	r3, r3
 8001394:	3301      	adds	r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	b219      	sxth	r1, r3
 800139a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800139e:	1d38      	adds	r0, r7, #4
 80013a0:	2301      	movs	r3, #1
 80013a2:	f7ff fb0f 	bl	80009c4 <translation_entity>
    	//mutex = 0;
        HAL_Delay(40);
 80013a6:	2028      	movs	r0, #40	@ 0x28
 80013a8:	f001 f928 	bl	80025fc <HAL_Delay>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80013ac:	bf00      	nop
 80013ae:	e7e9      	b.n	8001384 <Task0+0x20>
 80013b0:	40021000 	.word	0x40021000

080013b4 <Task1>:

    }
}

volatile void Task1()
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
	ENTITY entity;
	entity.x0 = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 80013c2:	2340      	movs	r3, #64	@ 0x40
 80013c4:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 80013c6:	2340      	movs	r3, #64	@ 0x40
 80013c8:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 80013ca:	2380      	movs	r3, #128	@ 0x80
 80013cc:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 80013ce:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80013d2:	823b      	strh	r3, [r7, #16]
    {

    	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
    	//flagg = 1;
    	//mutex = 1;
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2110      	movs	r1, #16
 80013d8:	4809      	ldr	r0, [pc, #36]	@ (8001400 <Task1+0x4c>)
 80013da:	f002 f85d 	bl	8003498 <HAL_GPIO_WritePin>
        translation_entity(&entity, entity.x0+1, entity.y0, 1);
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3301      	adds	r3, #1
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b219      	sxth	r1, r3
 80013ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013ee:	1d38      	adds	r0, r7, #4
 80013f0:	2301      	movs	r3, #1
 80013f2:	f7ff fae7 	bl	80009c4 <translation_entity>
    	//mutex = 0;
    	HAL_Delay(40);
 80013f6:	2028      	movs	r0, #40	@ 0x28
 80013f8:	f001 f900 	bl	80025fc <HAL_Delay>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80013fc:	bf00      	nop
 80013fe:	e7e9      	b.n	80013d4 <Task1+0x20>
 8001400:	40021000 	.word	0x40021000

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140a:	f001 f885 	bl	8002518 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	210f      	movs	r1, #15
 8001412:	f06f 0001 	mvn.w	r0, #1
 8001416:	f001 f9f0 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM4_IRQn, 14, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	210e      	movs	r1, #14
 800141e:	201e      	movs	r0, #30
 8001420:	f001 f9eb 	bl	80027fa <HAL_NVIC_SetPriority>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f83e 	bl	80014a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f000 fa60 	bl	80018ec <MX_GPIO_Init>
  MX_DMA_Init();
 800142c:	f000 fa20 	bl	8001870 <MX_DMA_Init>
  MX_SPI1_Init();
 8001430:	f000 f8ec 	bl	800160c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001434:	f000 f9f2 	bl	800181c <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001438:	f000 f89e 	bl	8001578 <MX_DAC_Init>
  MX_TIM2_Init();
 800143c:	f000 f954 	bl	80016e8 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8001440:	f000 f8c4 	bl	80015cc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001444:	f006 fdec 	bl	8008020 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001448:	f000 f916 	bl	8001678 <MX_SPI2_Init>
  MX_TIM4_Init();
 800144c:	f000 f998 	bl	8001780 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 8001450:	f000 fae2 	bl	8001a18 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 8001454:	f7ff fd7e 	bl	8000f54 <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <main+0x88>)
 800145a:	f004 fd03 	bl	8005e64 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800145e:	480c      	ldr	r0, [pc, #48]	@ (8001490 <main+0x8c>)
 8001460:	f004 fd68 	bl	8005f34 <HAL_TIM_Base_Start_IT>
  HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController)); /*Initializare SPI2 intr Controller*/
 8001464:	2201      	movs	r2, #1
 8001466:	490b      	ldr	r1, [pc, #44]	@ (8001494 <main+0x90>)
 8001468:	480b      	ldr	r0, [pc, #44]	@ (8001498 <main+0x94>)
 800146a:	f003 fe2d 	bl	80050c8 <HAL_SPI_Receive_IT>

  fill_screen2(0xFFFF);
 800146e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001472:	f7ff f869 	bl	8000548 <fill_screen2>

  kernel_add_process(Task0);
 8001476:	4809      	ldr	r0, [pc, #36]	@ (800149c <main+0x98>)
 8001478:	f7ff fbcc 	bl	8000c14 <kernel_add_process>
  kernel_add_process(Task1);
 800147c:	4808      	ldr	r0, [pc, #32]	@ (80014a0 <main+0x9c>)
 800147e:	f7ff fbc9 	bl	8000c14 <kernel_add_process>
  kernel_start();
 8001482:	f7ff fc8d 	bl	8000da0 <kernel_start>

  while(1)
 8001486:	bf00      	nop
 8001488:	e7fd      	b.n	8001486 <main+0x82>
 800148a:	bf00      	nop
 800148c:	20004310 	.word	0x20004310
 8001490:	20004358 	.word	0x20004358
 8001494:	200043ea 	.word	0x200043ea
 8001498:	200041f8 	.word	0x200041f8
 800149c:	08001365 	.word	0x08001365
 80014a0:	080013b5 	.word	0x080013b5

080014a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b094      	sub	sp, #80	@ 0x50
 80014a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	2230      	movs	r2, #48	@ 0x30
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f009 fb78 	bl	800aba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	4b28      	ldr	r3, [pc, #160]	@ (8001570 <SystemClock_Config+0xcc>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	4a27      	ldr	r2, [pc, #156]	@ (8001570 <SystemClock_Config+0xcc>)
 80014d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d8:	4b25      	ldr	r3, [pc, #148]	@ (8001570 <SystemClock_Config+0xcc>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <SystemClock_Config+0xd0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a21      	ldr	r2, [pc, #132]	@ (8001574 <SystemClock_Config+0xd0>)
 80014ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <SystemClock_Config+0xd0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001500:	2301      	movs	r3, #1
 8001502:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001504:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150a:	2302      	movs	r3, #2
 800150c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001514:	2304      	movs	r3, #4
 8001516:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001518:	23a8      	movs	r3, #168	@ 0xa8
 800151a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800151c:	2302      	movs	r3, #2
 800151e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001520:	2307      	movs	r3, #7
 8001522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001524:	f107 0320 	add.w	r3, r7, #32
 8001528:	4618      	mov	r0, r3
 800152a:	f001 ffcf 	bl	80034cc <HAL_RCC_OscConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001534:	f000 fa6a 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001538:	230f      	movs	r3, #15
 800153a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153c:	2302      	movs	r3, #2
 800153e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001544:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800154a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2105      	movs	r1, #5
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fa30 	bl	80039bc <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001562:	f000 fa53 	bl	8001a0c <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3750      	adds	r7, #80	@ 0x50
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800157e:	463b      	mov	r3, r7
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001586:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <MX_DAC_Init+0x4c>)
 8001588:	4a0f      	ldr	r2, [pc, #60]	@ (80015c8 <MX_DAC_Init+0x50>)
 800158a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800158c:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <MX_DAC_Init+0x4c>)
 800158e:	f001 f96a 	bl	8002866 <HAL_DAC_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001598:	f000 fa38 	bl	8001a0c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800159c:	2324      	movs	r3, #36	@ 0x24
 800159e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <MX_DAC_Init+0x4c>)
 80015ac:	f001 f97d 	bl	80028aa <HAL_DAC_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015b6:	f000 fa29 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200040a8 	.word	0x200040a8
 80015c8:	40007400 	.word	0x40007400

080015cc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <MX_SDIO_SD_Init+0x38>)
 80015d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001608 <MX_SDIO_SD_Init+0x3c>)
 80015d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <MX_SDIO_SD_Init+0x38>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <MX_SDIO_SD_Init+0x38>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <MX_SDIO_SD_Init+0x38>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <MX_SDIO_SD_Init+0x38>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <MX_SDIO_SD_Init+0x38>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <MX_SDIO_SD_Init+0x38>)
 80015f6:	2208      	movs	r2, #8
 80015f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	2000411c 	.word	0x2000411c
 8001608:	40012c00 	.word	0x40012c00

0800160c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001610:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <MX_SPI1_Init+0x64>)
 8001612:	4a18      	ldr	r2, [pc, #96]	@ (8001674 <MX_SPI1_Init+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001616:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_SPI1_Init+0x64>)
 8001618:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800161c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800161e:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_SPI1_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <MX_SPI1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_SPI1_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_SPI1_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_SPI1_Init+0x64>)
 8001638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800163c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_SPI1_Init+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <MX_SPI1_Init+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_SPI1_Init+0x64>)
 800164c:	2200      	movs	r2, #0
 800164e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <MX_SPI1_Init+0x64>)
 8001652:	2200      	movs	r2, #0
 8001654:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_SPI1_Init+0x64>)
 8001658:	220a      	movs	r2, #10
 800165a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_SPI1_Init+0x64>)
 800165e:	f003 fb65 	bl	8004d2c <HAL_SPI_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001668:	f000 f9d0 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200041a0 	.word	0x200041a0
 8001674:	40013000 	.word	0x40013000

08001678 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800167c:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <MX_SPI2_Init+0x68>)
 800167e:	4a19      	ldr	r2, [pc, #100]	@ (80016e4 <MX_SPI2_Init+0x6c>)
 8001680:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001682:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <MX_SPI2_Init+0x68>)
 8001684:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001688:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <MX_SPI2_Init+0x68>)
 800168c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001690:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001692:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <MX_SPI2_Init+0x68>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_SPI2_Init+0x68>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <MX_SPI2_Init+0x68>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <MX_SPI2_Init+0x68>)
 80016a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_SPI2_Init+0x68>)
 80016ae:	2208      	movs	r2, #8
 80016b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <MX_SPI2_Init+0x68>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b8:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_SPI2_Init+0x68>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016be:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <MX_SPI2_Init+0x68>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_SPI2_Init+0x68>)
 80016c6:	220a      	movs	r2, #10
 80016c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <MX_SPI2_Init+0x68>)
 80016cc:	f003 fb2e 	bl	8004d2c <HAL_SPI_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80016d6:	f000 f999 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200041f8 	.word	0x200041f8
 80016e4:	40003800 	.word	0x40003800

080016e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001704:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <MX_TIM2_Init+0x94>)
 8001706:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800170a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <MX_TIM2_Init+0x94>)
 800170e:	2229      	movs	r2, #41	@ 0x29
 8001710:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <MX_TIM2_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 27;
 8001718:	4b18      	ldr	r3, [pc, #96]	@ (800177c <MX_TIM2_Init+0x94>)
 800171a:	221b      	movs	r2, #27
 800171c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <MX_TIM2_Init+0x94>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	4b15      	ldr	r3, [pc, #84]	@ (800177c <MX_TIM2_Init+0x94>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800172a:	4814      	ldr	r0, [pc, #80]	@ (800177c <MX_TIM2_Init+0x94>)
 800172c:	f004 fb4b 	bl	8005dc6 <HAL_TIM_Base_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001736:	f000 f969 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800173e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	4619      	mov	r1, r3
 8001746:	480d      	ldr	r0, [pc, #52]	@ (800177c <MX_TIM2_Init+0x94>)
 8001748:	f004 fd54 	bl	80061f4 <HAL_TIM_ConfigClockSource>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001752:	f000 f95b 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001756:	2320      	movs	r3, #32
 8001758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <MX_TIM2_Init+0x94>)
 8001764:	f004 ff7c 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800176e:	f000 f94d 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20004310 	.word	0x20004310

08001780 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800179c:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <MX_TIM4_Init+0x94>)
 800179e:	4a1e      	ldr	r2, [pc, #120]	@ (8001818 <MX_TIM4_Init+0x98>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <MX_TIM4_Init+0x94>)
 80017a4:	2254      	movs	r2, #84	@ 0x54
 80017a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <MX_TIM4_Init+0x94>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80017ae:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <MX_TIM4_Init+0x94>)
 80017b0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80017b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <MX_TIM4_Init+0x94>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <MX_TIM4_Init+0x94>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017c2:	4814      	ldr	r0, [pc, #80]	@ (8001814 <MX_TIM4_Init+0x94>)
 80017c4:	f004 faff 	bl	8005dc6 <HAL_TIM_Base_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80017ce:	f000 f91d 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	4619      	mov	r1, r3
 80017de:	480d      	ldr	r0, [pc, #52]	@ (8001814 <MX_TIM4_Init+0x94>)
 80017e0:	f004 fd08 	bl	80061f4 <HAL_TIM_ConfigClockSource>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80017ea:	f000 f90f 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017f6:	463b      	mov	r3, r7
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	@ (8001814 <MX_TIM4_Init+0x94>)
 80017fc:	f004 ff30 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001806:	f000 f901 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20004358 	.word	0x20004358
 8001818:	40000800 	.word	0x40000800

0800181c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <MX_USART1_UART_Init+0x50>)
 8001824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001828:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800182c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001854:	f004 ff94 	bl	8006780 <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800185e:	f000 f8d5 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200043a0 	.word	0x200043a0
 800186c:	40011000 	.word	0x40011000

08001870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <MX_DMA_Init+0x78>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a1a      	ldr	r2, [pc, #104]	@ (80018e8 <MX_DMA_Init+0x78>)
 8001880:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <MX_DMA_Init+0x78>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <MX_DMA_Init+0x78>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a13      	ldr	r2, [pc, #76]	@ (80018e8 <MX_DMA_Init+0x78>)
 800189c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <MX_DMA_Init+0x78>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2010      	movs	r0, #16
 80018b4:	f000 ffa1 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018b8:	2010      	movs	r0, #16
 80018ba:	f000 ffba 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2038      	movs	r0, #56	@ 0x38
 80018c4:	f000 ff99 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018c8:	2038      	movs	r0, #56	@ 0x38
 80018ca:	f000 ffb2 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	203b      	movs	r0, #59	@ 0x3b
 80018d4:	f000 ff91 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80018d8:	203b      	movs	r0, #59	@ 0x3b
 80018da:	f000 ffaa 	bl	8002832 <HAL_NVIC_EnableIRQ>

}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	@ 0x30
 80018f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	4b3e      	ldr	r3, [pc, #248]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a00 <MX_GPIO_Init+0x114>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b3b      	ldr	r3, [pc, #236]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a36      	ldr	r2, [pc, #216]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b34      	ldr	r3, [pc, #208]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b30      	ldr	r3, [pc, #192]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a2f      	ldr	r2, [pc, #188]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <MX_GPIO_Init+0x114>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b29      	ldr	r3, [pc, #164]	@ (8001a00 <MX_GPIO_Init+0x114>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a28      	ldr	r2, [pc, #160]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	4b22      	ldr	r3, [pc, #136]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a21      	ldr	r2, [pc, #132]	@ (8001a00 <MX_GPIO_Init+0x114>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a1a      	ldr	r2, [pc, #104]	@ (8001a00 <MX_GPIO_Init+0x114>)
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <MX_GPIO_Init+0x114>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2110      	movs	r1, #16
 80019ae:	4815      	ldr	r0, [pc, #84]	@ (8001a04 <MX_GPIO_Init+0x118>)
 80019b0:	f001 fd72 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2158      	movs	r1, #88	@ 0x58
 80019b8:	4813      	ldr	r0, [pc, #76]	@ (8001a08 <MX_GPIO_Init+0x11c>)
 80019ba:	f001 fd6d 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019be:	2310      	movs	r3, #16
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	480b      	ldr	r0, [pc, #44]	@ (8001a04 <MX_GPIO_Init+0x118>)
 80019d6:	f001 fbc3 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 80019da:	2358      	movs	r3, #88	@ 0x58
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <MX_GPIO_Init+0x11c>)
 80019f2:	f001 fbb5 	bl	8003160 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	@ 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40020c00 	.word	0x40020c00

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <Error_Handler+0x8>

08001a18 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4903      	ldr	r1, [pc, #12]	@ (8001a2c <init_cardSD+0x14>)
 8001a20:	4803      	ldr	r0, [pc, #12]	@ (8001a30 <init_cardSD+0x18>)
 8001a22:	f008 f9b7 	bl	8009d94 <f_mount>

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	0800acdc 	.word	0x0800acdc
 8001a30:	200043f4 	.word	0x200043f4

08001a34 <read_image_file>:

}


void read_image_file(ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 8001a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a38:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001a42:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001a46:	6018      	str	r0, [r3, #0]
 8001a48:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001a4c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8001a50:	6019      	str	r1, [r3, #0]
 8001a52:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001a56:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	466b      	mov	r3, sp
 8001a5e:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, entity->ST.SD.filePathName, FA_READ);
 8001a60:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001a64:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6919      	ldr	r1, [r3, #16]
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	2201      	movs	r2, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	f008 f9d4 	bl	8009e20 <f_open>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 8001a7e:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 81af 	bne.w	8001de6 <read_image_file+0x3b2>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 8001a88:	4ba8      	ldr	r3, [pc, #672]	@ (8001d2c <read_image_file+0x2f8>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80d6 	beq.w	8001c3e <read_image_file+0x20a>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8001a92:	4ba7      	ldr	r3, [pc, #668]	@ (8001d30 <read_image_file+0x2fc>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8001a98:	4ba5      	ldr	r3, [pc, #660]	@ (8001d30 <read_image_file+0x2fc>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f008 fd5d 	bl	800a562 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	f107 0114 	add.w	r1, r7, #20
 8001ab0:	f107 001c 	add.w	r0, r7, #28
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	f008 fb6d 	bl	800a194 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8001aba:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001abe:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8001ac8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001acc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8001ad6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001ada:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001aea:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001aee:	785b      	ldrb	r3, [r3, #1]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	b21a      	sxth	r2, r3
 8001af6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001afa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8001b04:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001b08:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	430b      	orrs	r3, r1
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001b1c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8001b24:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001b28:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001b38:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001b3c:	78db      	ldrb	r3, [r3, #3]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001b48:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8001b52:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001b56:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001b5a:	789b      	ldrb	r3, [r3, #2]
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001b6a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 8001b72:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001b76:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001b86:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
 8001b94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b98:	da1f      	bge.n	8001bda <read_image_file+0x1a6>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8001b9a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001b9e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001bae:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bb8:	fb03 f202 	mul.w	r2, r3, r2
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f008 ff32 	bl	800aa2c <malloc>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001bd0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	e00b      	b.n	8001bf2 <read_image_file+0x1be>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->ST.SD.data = malloc(sizeof(char)*3072);
 8001bda:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001bde:	f008 ff25 	bl	800aa2c <malloc>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001bea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 8001bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d2c <read_image_file+0x2f8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8001d34 <read_image_file+0x300>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8001bfe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001c02:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a49      	ldr	r2, [pc, #292]	@ (8001d30 <read_image_file+0x2fc>)
 8001c0a:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8001c0c:	4b48      	ldr	r3, [pc, #288]	@ (8001d30 <read_image_file+0x2fc>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f008 fca3 	bl	800a562 <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8001c1c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001c20:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	3b04      	subs	r3, #4
 8001c28:	4a43      	ldr	r2, [pc, #268]	@ (8001d38 <read_image_file+0x304>)
 8001c2a:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 8001c2c:	4b42      	ldr	r3, [pc, #264]	@ (8001d38 <read_image_file+0x304>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a42      	ldr	r2, [pc, #264]	@ (8001d3c <read_image_file+0x308>)
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c38:	4a41      	ldr	r2, [pc, #260]	@ (8001d40 <read_image_file+0x30c>)
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e007      	b.n	8001c4e <read_image_file+0x21a>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8001c3e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d30 <read_image_file+0x2fc>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f008 fc8a 	bl	800a562 <f_lseek>
	}



	if(fileSize == n)
 8001c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d38 <read_image_file+0x304>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a3a      	ldr	r2, [pc, #232]	@ (8001d3c <read_image_file+0x308>)
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d104      	bne.n	8001c64 <read_image_file+0x230>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 8001c5a:	4b39      	ldr	r3, [pc, #228]	@ (8001d40 <read_image_file+0x30c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	4a37      	ldr	r2, [pc, #220]	@ (8001d40 <read_image_file+0x30c>)
 8001c62:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 8001c64:	4b34      	ldr	r3, [pc, #208]	@ (8001d38 <read_image_file+0x304>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a34      	ldr	r2, [pc, #208]	@ (8001d3c <read_image_file+0x308>)
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c70:	fb01 f202 	mul.w	r2, r1, r2
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d008      	beq.n	8001c8c <read_image_file+0x258>
 8001c7a:	4b31      	ldr	r3, [pc, #196]	@ (8001d40 <read_image_file+0x30c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d004      	beq.n	8001c8c <read_image_file+0x258>
	{
		nrFrames++;
 8001c82:	4b2f      	ldr	r3, [pc, #188]	@ (8001d40 <read_image_file+0x30c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	4a2d      	ldr	r2, [pc, #180]	@ (8001d40 <read_image_file+0x30c>)
 8001c8a:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 8001c8c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001c90:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2200      	movs	r2, #0
 8001c98:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 8001c9a:	4b28      	ldr	r3, [pc, #160]	@ (8001d3c <read_image_file+0x308>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001ca4:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <read_image_file+0x308>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2300      	movs	r3, #0
 8001cac:	4690      	mov	r8, r2
 8001cae:	4699      	mov	r9, r3
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <read_image_file+0x308>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2300      	movs	r3, #0
 8001ccc:	4614      	mov	r4, r2
 8001cce:	461d      	mov	r5, r3
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	00eb      	lsls	r3, r5, #3
 8001cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cde:	00e2      	lsls	r2, r4, #3
 8001ce0:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <read_image_file+0x308>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3307      	adds	r3, #7
 8001ce6:	08db      	lsrs	r3, r3, #3
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	ebad 0d03 	sub.w	sp, sp, r3
 8001cee:	466b      	mov	r3, sp
 8001cf0:	3300      	adds	r3, #0
 8001cf2:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <read_image_file+0x308>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f107 0318 	add.w	r3, r7, #24
 8001d00:	f107 001c 	add.w	r0, r7, #28
 8001d04:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8001d08:	f008 fa44 	bl	800a194 <f_read>
	(*indexFlag) = byteRead;
 8001d0c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001d10:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001d1c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8001d2a:	e01f      	b.n	8001d6c <read_image_file+0x338>
 8001d2c:	20000002 	.word	0x20000002
 8001d30:	20004624 	.word	0x20004624
 8001d34:	20004628 	.word	0x20004628
 8001d38:	2000462c 	.word	0x2000462c
 8001d3c:	0800ad24 	.word	0x0800ad24
 8001d40:	20004630 	.word	0x20004630
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->ST.SD.data[i] = tempBuffer[i];
 8001d44:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8001d48:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001d4c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68d9      	ldr	r1, [r3, #12]
 8001d54:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8001d58:	440b      	add	r3, r1
 8001d5a:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8001d5e:	5c8a      	ldrb	r2, [r1, r2]
 8001d60:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 8001d62:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8001d66:	3301      	adds	r3, #1
 8001d68:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8001d6c:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8001d70:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001d74:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d3e2      	bcc.n	8001d44 <read_image_file+0x310>

	}


	currentFrame++;
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <read_image_file+0x3c0>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <read_image_file+0x3c0>)
 8001d88:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <read_image_file+0x3c0>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <read_image_file+0x3c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d208      	bcs.n	8001daa <read_image_file+0x376>
 8001d98:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001d9c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001da8:	d20f      	bcs.n	8001dca <read_image_file+0x396>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 8001daa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001dae:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 8001db8:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <read_image_file+0x3c8>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f008 fba3 	bl	800a50e <f_close>
		return;
 8001dc8:	e00d      	b.n	8001de6 <read_image_file+0x3b2>
	}


	currentPosition = f_tell(&file);
 8001dca:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8001dce:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <read_image_file+0x3cc>)
 8001dd6:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f008 fb96 	bl	800a50e <f_close>
 8001de2:	46b5      	mov	sp, r6
 8001de4:	e000      	b.n	8001de8 <read_image_file+0x3b4>
		return;
 8001de6:	46b5      	mov	sp, r6


}
 8001de8:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8001dec:	46bd      	mov	sp, r7
 8001dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001df2:	bf00      	nop
 8001df4:	20004628 	.word	0x20004628
 8001df8:	20004630 	.word	0x20004630
 8001dfc:	20000002 	.word	0x20000002
 8001e00:	20004624 	.word	0x20004624

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	4a0f      	ldr	r2, [pc, #60]	@ (8001e50 <HAL_MspInit+0x4c>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <HAL_MspInit+0x4c>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	4a08      	ldr	r2, [pc, #32]	@ (8001e50 <HAL_MspInit+0x4c>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_MspInit+0x4c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a30      	ldr	r2, [pc, #192]	@ (8001f34 <HAL_DAC_MspInit+0xe0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d159      	bne.n	8001f2a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001e80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	4b2c      	ldr	r3, [pc, #176]	@ (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a27      	ldr	r2, [pc, #156]	@ (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b25      	ldr	r3, [pc, #148]	@ (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eae:	2310      	movs	r3, #16
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	481e      	ldr	r0, [pc, #120]	@ (8001f3c <HAL_DAC_MspInit+0xe8>)
 8001ec2:	f001 f94d 	bl	8003160 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f44 <HAL_DAC_MspInit+0xf0>)
 8001eca:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001ece:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001ed2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001ed6:	2240      	movs	r2, #64	@ 0x40
 8001ed8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001ee2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ee6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001eea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001eee:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001ef2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ef6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001efa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001efe:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001f02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f06:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f08:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001f0e:	480c      	ldr	r0, [pc, #48]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001f10:	f000 fd24 	bl	800295c <HAL_DMA_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001f1a:	f7ff fd77 	bl	8001a0c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <HAL_DAC_MspInit+0xec>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	@ 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40007400 	.word	0x40007400
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	200040bc 	.word	0x200040bc
 8001f44:	40026088 	.word	0x40026088

08001f48 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a31      	ldr	r2, [pc, #196]	@ (800202c <HAL_SD_MspInit+0xe4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d15b      	bne.n	8002022 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <HAL_SD_MspInit+0xe8>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	4a2f      	ldr	r2, [pc, #188]	@ (8002030 <HAL_SD_MspInit+0xe8>)
 8001f74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <HAL_SD_MspInit+0xe8>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b29      	ldr	r3, [pc, #164]	@ (8002030 <HAL_SD_MspInit+0xe8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a28      	ldr	r2, [pc, #160]	@ (8002030 <HAL_SD_MspInit+0xe8>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <HAL_SD_MspInit+0xe8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <HAL_SD_MspInit+0xe8>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	4a21      	ldr	r2, [pc, #132]	@ (8002030 <HAL_SD_MspInit+0xe8>)
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <HAL_SD_MspInit+0xe8>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4816      	ldr	r0, [pc, #88]	@ (8002034 <HAL_SD_MspInit+0xec>)
 8001fdc:	f001 f8c0 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	480d      	ldr	r0, [pc, #52]	@ (8002034 <HAL_SD_MspInit+0xec>)
 8001ffe:	f001 f8af 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002002:	2304      	movs	r3, #4
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800200a:	2301      	movs	r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002012:	230c      	movs	r3, #12
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	4806      	ldr	r0, [pc, #24]	@ (8002038 <HAL_SD_MspInit+0xf0>)
 800201e:	f001 f89f 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	3728      	adds	r7, #40	@ 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40023800 	.word	0x40023800
 8002034:	40020800 	.word	0x40020800
 8002038:	40020c00 	.word	0x40020c00

0800203c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	@ 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a74      	ldr	r2, [pc, #464]	@ (800222c <HAL_SPI_MspInit+0x1f0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	f040 8089 	bne.w	8002172 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	4b72      	ldr	r3, [pc, #456]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 8002066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002068:	4a71      	ldr	r2, [pc, #452]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 800206a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800206e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002070:	4b6f      	ldr	r3, [pc, #444]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 8002072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002074:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	4b6b      	ldr	r3, [pc, #428]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	4a6a      	ldr	r2, [pc, #424]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6313      	str	r3, [r2, #48]	@ 0x30
 800208c:	4b68      	ldr	r3, [pc, #416]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002098:	23e0      	movs	r3, #224	@ 0xe0
 800209a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020a8:	2305      	movs	r3, #5
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4619      	mov	r1, r3
 80020b2:	4860      	ldr	r0, [pc, #384]	@ (8002234 <HAL_SPI_MspInit+0x1f8>)
 80020b4:	f001 f854 	bl	8003160 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80020b8:	4b5f      	ldr	r3, [pc, #380]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 80020ba:	4a60      	ldr	r2, [pc, #384]	@ (800223c <HAL_SPI_MspInit+0x200>)
 80020bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80020be:	4b5e      	ldr	r3, [pc, #376]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 80020c0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80020c4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 80020c8:	2240      	movs	r2, #64	@ 0x40
 80020ca:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020d2:	4b59      	ldr	r3, [pc, #356]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 80020d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020d8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020da:	4b57      	ldr	r3, [pc, #348]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020e0:	4b55      	ldr	r3, [pc, #340]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80020e6:	4b54      	ldr	r3, [pc, #336]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020ec:	4b52      	ldr	r3, [pc, #328]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f2:	4b51      	ldr	r3, [pc, #324]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80020f8:	484f      	ldr	r0, [pc, #316]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 80020fa:	f000 fc2f 	bl	800295c <HAL_DMA_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002104:	f7ff fc82 	bl	8001a0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a4b      	ldr	r2, [pc, #300]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 800210c:	649a      	str	r2, [r3, #72]	@ 0x48
 800210e:	4a4a      	ldr	r2, [pc, #296]	@ (8002238 <HAL_SPI_MspInit+0x1fc>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002114:	4b4a      	ldr	r3, [pc, #296]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 8002116:	4a4b      	ldr	r2, [pc, #300]	@ (8002244 <HAL_SPI_MspInit+0x208>)
 8002118:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800211a:	4b49      	ldr	r3, [pc, #292]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 800211c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002120:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002122:	4b47      	ldr	r3, [pc, #284]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002128:	4b45      	ldr	r3, [pc, #276]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800212e:	4b44      	ldr	r3, [pc, #272]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 8002130:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002134:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002136:	4b42      	ldr	r3, [pc, #264]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 8002138:	2200      	movs	r2, #0
 800213a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800213c:	4b40      	ldr	r3, [pc, #256]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 800213e:	2200      	movs	r2, #0
 8002140:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002142:	4b3f      	ldr	r3, [pc, #252]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 8002144:	2200      	movs	r2, #0
 8002146:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002148:	4b3d      	ldr	r3, [pc, #244]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 800214a:	2200      	movs	r2, #0
 800214c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800214e:	4b3c      	ldr	r3, [pc, #240]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 8002150:	2200      	movs	r2, #0
 8002152:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002154:	483a      	ldr	r0, [pc, #232]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 8002156:	f000 fc01 	bl	800295c <HAL_DMA_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002160:	f7ff fc54 	bl	8001a0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a36      	ldr	r2, [pc, #216]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 8002168:	64da      	str	r2, [r3, #76]	@ 0x4c
 800216a:	4a35      	ldr	r2, [pc, #212]	@ (8002240 <HAL_SPI_MspInit+0x204>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002170:	e057      	b.n	8002222 <HAL_SPI_MspInit+0x1e6>
  else if(hspi->Instance==SPI2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a34      	ldr	r2, [pc, #208]	@ (8002248 <HAL_SPI_MspInit+0x20c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d152      	bne.n	8002222 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	4a2a      	ldr	r2, [pc, #168]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 8002186:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800218a:	6413      	str	r3, [r2, #64]	@ 0x40
 800218c:	4b28      	ldr	r3, [pc, #160]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	4a23      	ldr	r2, [pc, #140]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a8:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <HAL_SPI_MspInit+0x1f4>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021d0:	2308      	movs	r3, #8
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021e0:	2305      	movs	r3, #5
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	4818      	ldr	r0, [pc, #96]	@ (800224c <HAL_SPI_MspInit+0x210>)
 80021ec:	f000 ffb8 	bl	8003160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002202:	2305      	movs	r3, #5
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	4810      	ldr	r0, [pc, #64]	@ (8002250 <HAL_SPI_MspInit+0x214>)
 800220e:	f000 ffa7 	bl	8003160 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	2024      	movs	r0, #36	@ 0x24
 8002218:	f000 faef 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800221c:	2024      	movs	r0, #36	@ 0x24
 800221e:	f000 fb08 	bl	8002832 <HAL_NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3730      	adds	r7, #48	@ 0x30
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40013000 	.word	0x40013000
 8002230:	40023800 	.word	0x40023800
 8002234:	40020000 	.word	0x40020000
 8002238:	20004250 	.word	0x20004250
 800223c:	40026458 	.word	0x40026458
 8002240:	200042b0 	.word	0x200042b0
 8002244:	40026410 	.word	0x40026410
 8002248:	40003800 	.word	0x40003800
 800224c:	40020800 	.word	0x40020800
 8002250:	40020400 	.word	0x40020400

08002254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002264:	d10e      	bne.n	8002284 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b16      	ldr	r3, [pc, #88]	@ (80022c4 <HAL_TIM_Base_MspInit+0x70>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	4a15      	ldr	r2, [pc, #84]	@ (80022c4 <HAL_TIM_Base_MspInit+0x70>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6413      	str	r3, [r2, #64]	@ 0x40
 8002276:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <HAL_TIM_Base_MspInit+0x70>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002282:	e01a      	b.n	80022ba <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <HAL_TIM_Base_MspInit+0x74>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d115      	bne.n	80022ba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <HAL_TIM_Base_MspInit+0x70>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	4a0b      	ldr	r2, [pc, #44]	@ (80022c4 <HAL_TIM_Base_MspInit+0x70>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	6413      	str	r3, [r2, #64]	@ 0x40
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <HAL_TIM_Base_MspInit+0x70>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	201e      	movs	r0, #30
 80022b0:	f000 faa3 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022b4:	201e      	movs	r0, #30
 80022b6:	f000 fabc 	bl	8002832 <HAL_NVIC_EnableIRQ>
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40000800 	.word	0x40000800

080022cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	@ 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <HAL_UART_MspInit+0x94>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d134      	bne.n	8002358 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002364 <HAL_UART_MspInit+0x98>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002364 <HAL_UART_MspInit+0x98>)
 80022f8:	f043 0310 	orr.w	r3, r3, #16
 80022fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fe:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <HAL_UART_MspInit+0x98>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <HAL_UART_MspInit+0x98>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	4a14      	ldr	r2, [pc, #80]	@ (8002364 <HAL_UART_MspInit+0x98>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6313      	str	r3, [r2, #48]	@ 0x30
 800231a:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <HAL_UART_MspInit+0x98>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002326:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800232a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002334:	2303      	movs	r3, #3
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002338:	2307      	movs	r3, #7
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	4809      	ldr	r0, [pc, #36]	@ (8002368 <HAL_UART_MspInit+0x9c>)
 8002344:	f000 ff0c 	bl	8003160 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	2025      	movs	r0, #37	@ 0x25
 800234e:	f000 fa54 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002352:	2025      	movs	r0, #37	@ 0x25
 8002354:	f000 fa6d 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	@ 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40011000 	.word	0x40011000
 8002364:	40023800 	.word	0x40023800
 8002368:	40020000 	.word	0x40020000

0800236c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <NMI_Handler+0x4>

08002374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <HardFault_Handler+0x4>

0800237c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <MemManage_Handler+0x4>

08002384 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002388:	bf00      	nop
 800238a:	e7fd      	b.n	8002388 <BusFault_Handler+0x4>

0800238c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <UsageFault_Handler+0x4>

08002394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b4:	f000 f902 	bl	80025bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}

080023bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80023c0:	4802      	ldr	r0, [pc, #8]	@ (80023cc <DMA1_Stream5_IRQHandler+0x10>)
 80023c2:	f000 fc63 	bl	8002c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200040bc 	.word	0x200040bc

080023d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023d4:	4802      	ldr	r0, [pc, #8]	@ (80023e0 <TIM4_IRQHandler+0x10>)
 80023d6:	f003 fe1d 	bl	8006014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20004358 	.word	0x20004358

080023e4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80023e8:	4802      	ldr	r0, [pc, #8]	@ (80023f4 <SPI2_IRQHandler+0x10>)
 80023ea:	f003 f845 	bl	8005478 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200041f8 	.word	0x200041f8

080023f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023fc:	4802      	ldr	r0, [pc, #8]	@ (8002408 <USART1_IRQHandler+0x10>)
 80023fe:	f004 fa0f 	bl	8006820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200043a0 	.word	0x200043a0

0800240c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002410:	4802      	ldr	r0, [pc, #8]	@ (800241c <DMA2_Stream0_IRQHandler+0x10>)
 8002412:	f000 fc3b 	bl	8002c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200042b0 	.word	0x200042b0

08002420 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002424:	4802      	ldr	r0, [pc, #8]	@ (8002430 <DMA2_Stream3_IRQHandler+0x10>)
 8002426:	f000 fc31 	bl	8002c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20004250 	.word	0x20004250

08002434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800243c:	4a14      	ldr	r2, [pc, #80]	@ (8002490 <_sbrk+0x5c>)
 800243e:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <_sbrk+0x60>)
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002448:	4b13      	ldr	r3, [pc, #76]	@ (8002498 <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <_sbrk+0x64>)
 8002452:	4a12      	ldr	r2, [pc, #72]	@ (800249c <_sbrk+0x68>)
 8002454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <_sbrk+0x64>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	429a      	cmp	r2, r3
 8002462:	d207      	bcs.n	8002474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002464:	f008 fbb8 	bl	800abd8 <__errno>
 8002468:	4603      	mov	r3, r0
 800246a:	220c      	movs	r2, #12
 800246c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
 8002472:	e009      	b.n	8002488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002474:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800247a:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	4a05      	ldr	r2, [pc, #20]	@ (8002498 <_sbrk+0x64>)
 8002484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20020000 	.word	0x20020000
 8002494:	00000400 	.word	0x00000400
 8002498:	20004634 	.word	0x20004634
 800249c:	200047c0 	.word	0x200047c0

080024a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a4:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <SystemInit+0x20>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024aa:	4a05      	ldr	r2, [pc, #20]	@ (80024c0 <SystemInit+0x20>)
 80024ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024c8:	f7ff ffea 	bl	80024a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024cc:	480c      	ldr	r0, [pc, #48]	@ (8002500 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ce:	490d      	ldr	r1, [pc, #52]	@ (8002504 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d4:	e002      	b.n	80024dc <LoopCopyDataInit>

080024d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024da:	3304      	adds	r3, #4

080024dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e0:	d3f9      	bcc.n	80024d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e2:	4a0a      	ldr	r2, [pc, #40]	@ (800250c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002510 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e8:	e001      	b.n	80024ee <LoopFillZerobss>

080024ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ec:	3204      	adds	r2, #4

080024ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f0:	d3fb      	bcc.n	80024ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024f2:	f008 fb77 	bl	800abe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f6:	f7fe ff85 	bl	8001404 <main>
  bx  lr    
 80024fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002504:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002508:	0800adec 	.word	0x0800adec
  ldr r2, =_sbss
 800250c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002510:	200047c0 	.word	0x200047c0

08002514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002514:	e7fe      	b.n	8002514 <ADC_IRQHandler>
	...

08002518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800251c:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0d      	ldr	r2, [pc, #52]	@ (8002558 <HAL_Init+0x40>)
 8002522:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <HAL_Init+0x40>)
 800252e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_Init+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a07      	ldr	r2, [pc, #28]	@ (8002558 <HAL_Init+0x40>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	2003      	movs	r0, #3
 8002542:	f000 f94f 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002546:	200f      	movs	r0, #15
 8002548:	f000 f808 	bl	800255c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800254c:	f7ff fc5a 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00

0800255c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002564:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <HAL_InitTick+0x54>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <HAL_InitTick+0x58>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002572:	fbb3 f3f1 	udiv	r3, r3, r1
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f967 	bl	800284e <HAL_SYSTICK_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e00e      	b.n	80025a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b0f      	cmp	r3, #15
 800258e:	d80a      	bhi.n	80025a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002590:	2200      	movs	r2, #0
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f000 f92f 	bl	80027fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800259c:	4a06      	ldr	r2, [pc, #24]	@ (80025b8 <HAL_InitTick+0x5c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000004 	.word	0x20000004
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	20000008 	.word	0x20000008

080025bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_IncTick+0x20>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <HAL_IncTick+0x24>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	4a04      	ldr	r2, [pc, #16]	@ (80025e0 <HAL_IncTick+0x24>)
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	20004638 	.word	0x20004638

080025e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return uwTick;
 80025e8:	4b03      	ldr	r3, [pc, #12]	@ (80025f8 <HAL_GetTick+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20004638 	.word	0x20004638

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff ffee 	bl	80025e4 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_Delay+0x44>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002622:	bf00      	nop
 8002624:	f7ff ffde 	bl	80025e4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000000c 	.word	0x2000000c

08002644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800266c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002690:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db0b      	blt.n	80026d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4907      	ldr	r1, [pc, #28]	@ (80026e0 <__NVIC_EnableIRQ+0x38>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2001      	movs	r0, #1
 80026ca:	fa00 f202 	lsl.w	r2, r0, r2
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	@ (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	@ (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	@ 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	@ 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b0:	d301      	bcc.n	80027b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00f      	b.n	80027d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b6:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <SysTick_Config+0x40>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027be:	210f      	movs	r1, #15
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f7ff ff8e 	bl	80026e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c8:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <SysTick_Config+0x40>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ce:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <SysTick_Config+0x40>)
 80027d0:	2207      	movs	r2, #7
 80027d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000e010 	.word	0xe000e010

080027e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff29 	bl	8002644 <__NVIC_SetPriorityGrouping>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800280c:	f7ff ff3e 	bl	800268c <__NVIC_GetPriorityGrouping>
 8002810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ff8e 	bl	8002738 <NVIC_EncodePriority>
 800281c:	4602      	mov	r2, r0
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff5d 	bl	80026e4 <__NVIC_SetPriority>
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff31 	bl	80026a8 <__NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffa2 	bl	80027a0 <SysTick_Config>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e014      	b.n	80028a2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	791b      	ldrb	r3, [r3, #4]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff fae3 	bl	8001e54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2202      	movs	r2, #2
 8002892:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b089      	sub	sp, #36	@ 0x24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_DAC_ConfigChannel+0x1c>
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e042      	b.n	8002950 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	795b      	ldrb	r3, [r3, #5]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_DAC_ConfigChannel+0x2c>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e03c      	b.n	8002950 <HAL_DAC_ConfigChannel+0xa6>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2202      	movs	r2, #2
 80028e0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6819      	ldr	r1, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	22c0      	movs	r2, #192	@ 0xc0
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43da      	mvns	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	400a      	ands	r2, r1
 8002940:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800294e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3724      	adds	r7, #36	@ 0x24
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff fe3c 	bl	80025e4 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e099      	b.n	8002aac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002998:	e00f      	b.n	80029ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800299a:	f7ff fe23 	bl	80025e4 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d908      	bls.n	80029ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2203      	movs	r2, #3
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e078      	b.n	8002aac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e8      	bne.n	800299a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4b38      	ldr	r3, [pc, #224]	@ (8002ab4 <HAL_DMA_Init+0x158>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0307 	bic.w	r3, r3, #7
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d117      	bne.n	8002a7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fb01 	bl	8003068 <DMA_CheckFifoParam>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2240      	movs	r2, #64	@ 0x40
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e016      	b.n	8002aac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fab8 	bl	8002ffc <DMA_CalcBaseAndBitshift>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a94:	223f      	movs	r2, #63	@ 0x3f
 8002a96:	409a      	lsls	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	f010803f 	.word	0xf010803f

08002ab8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ace:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_DMA_Start_IT+0x26>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e040      	b.n	8002b60 <HAL_DMA_Start_IT+0xa8>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d12f      	bne.n	8002b52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fa4a 	bl	8002fa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	223f      	movs	r2, #63	@ 0x3f
 8002b12:	409a      	lsls	r2, r3
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0216 	orr.w	r2, r2, #22
 8002b26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0208 	orr.w	r2, r2, #8
 8002b3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e005      	b.n	8002b5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b76:	f7ff fd35 	bl	80025e4 <HAL_GetTick>
 8002b7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d008      	beq.n	8002b9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	@ 0x80
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e052      	b.n	8002c40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0216 	bic.w	r2, r2, #22
 8002ba8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <HAL_DMA_Abort+0x62>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0208 	bic.w	r2, r2, #8
 8002bd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bea:	e013      	b.n	8002c14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bec:	f7ff fcfa 	bl	80025e4 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d90c      	bls.n	8002c14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2203      	movs	r2, #3
 8002c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e015      	b.n	8002c40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e4      	bne.n	8002bec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c26:	223f      	movs	r2, #63	@ 0x3f
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d004      	beq.n	8002c66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2280      	movs	r2, #128	@ 0x80
 8002c60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00c      	b.n	8002c80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2205      	movs	r2, #5
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c98:	4b8e      	ldr	r3, [pc, #568]	@ (8002ed4 <HAL_DMA_IRQHandler+0x248>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a8e      	ldr	r2, [pc, #568]	@ (8002ed8 <HAL_DMA_IRQHandler+0x24c>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	0a9b      	lsrs	r3, r3, #10
 8002ca4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002caa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0204 	bic.w	r2, r2, #4
 8002cde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d012      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d26:	f043 0202 	orr.w	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	2204      	movs	r2, #4
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d012      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	2204      	movs	r2, #4
 8002d52:	409a      	lsls	r2, r3
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d68:	2210      	movs	r2, #16
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d043      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d03c      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	2210      	movs	r2, #16
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d018      	beq.n	8002dce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d108      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d024      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
 8002dba:	e01f      	b.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
 8002dcc:	e016      	b.n	8002dfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0208 	bic.w	r2, r2, #8
 8002dea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e00:	2220      	movs	r2, #32
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 808f 	beq.w	8002f2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8087 	beq.w	8002f2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	2220      	movs	r2, #32
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d136      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0216 	bic.w	r2, r2, #22
 8002e44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <HAL_DMA_IRQHandler+0x1da>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0208 	bic.w	r2, r2, #8
 8002e74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	223f      	movs	r2, #63	@ 0x3f
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d07e      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
        }
        return;
 8002ea2:	e079      	b.n	8002f98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d031      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
 8002ed0:	e02c      	b.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
 8002ed2:	bf00      	nop
 8002ed4:	20000004 	.word	0x20000004
 8002ed8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d023      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
 8002eec:	e01e      	b.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10f      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0210 	bic.w	r2, r2, #16
 8002f0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d032      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d022      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2205      	movs	r2, #5
 8002f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d307      	bcc.n	8002f74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f2      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x2cc>
 8002f72:	e000      	b.n	8002f76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
 8002f96:	e000      	b.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f98:	bf00      	nop
    }
  }
}
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b40      	cmp	r3, #64	@ 0x40
 8002fcc:	d108      	bne.n	8002fe0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fde:	e007      	b.n	8002ff0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	60da      	str	r2, [r3, #12]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3b10      	subs	r3, #16
 800300c:	4a14      	ldr	r2, [pc, #80]	@ (8003060 <DMA_CalcBaseAndBitshift+0x64>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003016:	4a13      	ldr	r2, [pc, #76]	@ (8003064 <DMA_CalcBaseAndBitshift+0x68>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d909      	bls.n	800303e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	1d1a      	adds	r2, r3, #4
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	659a      	str	r2, [r3, #88]	@ 0x58
 800303c:	e007      	b.n	800304e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	aaaaaaab 	.word	0xaaaaaaab
 8003064:	0800ad40 	.word	0x0800ad40

08003068 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11f      	bne.n	80030c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d856      	bhi.n	8003136 <DMA_CheckFifoParam+0xce>
 8003088:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <DMA_CheckFifoParam+0x28>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030b3 	.word	0x080030b3
 8003098:	080030a1 	.word	0x080030a1
 800309c:	08003137 	.word	0x08003137
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d046      	beq.n	800313a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e043      	b.n	800313a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030ba:	d140      	bne.n	800313e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c0:	e03d      	b.n	800313e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ca:	d121      	bne.n	8003110 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d837      	bhi.n	8003142 <DMA_CheckFifoParam+0xda>
 80030d2:	a201      	add	r2, pc, #4	@ (adr r2, 80030d8 <DMA_CheckFifoParam+0x70>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030ef 	.word	0x080030ef
 80030e0:	080030e9 	.word	0x080030e9
 80030e4:	08003101 	.word	0x08003101
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e030      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d025      	beq.n	8003146 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fe:	e022      	b.n	8003146 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003108:	d11f      	bne.n	800314a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800310e:	e01c      	b.n	800314a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d903      	bls.n	800311e <DMA_CheckFifoParam+0xb6>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d003      	beq.n	8003124 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800311c:	e018      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
      break;
 8003122:	e015      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00e      	beq.n	800314e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e00b      	b.n	800314e <DMA_CheckFifoParam+0xe6>
      break;
 8003136:	bf00      	nop
 8003138:	e00a      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800313a:	bf00      	nop
 800313c:	e008      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
 8003140:	e006      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 8003142:	bf00      	nop
 8003144:	e004      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;   
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800314e:	bf00      	nop
    }
  } 
  
  return status; 
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	@ 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e16b      	b.n	8003454 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800317c:	2201      	movs	r2, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	429a      	cmp	r2, r3
 8003196:	f040 815a 	bne.w	800344e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d005      	beq.n	80031b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d130      	bne.n	8003214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b03      	cmp	r3, #3
 800321e:	d017      	beq.n	8003250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d123      	bne.n	80032a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0203 	and.w	r2, r3, #3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80b4 	beq.w	800344e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b60      	ldr	r3, [pc, #384]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	4a5f      	ldr	r2, [pc, #380]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032f6:	4b5d      	ldr	r3, [pc, #372]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003302:	4a5b      	ldr	r2, [pc, #364]	@ (8003470 <HAL_GPIO_Init+0x310>)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a52      	ldr	r2, [pc, #328]	@ (8003474 <HAL_GPIO_Init+0x314>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02b      	beq.n	8003386 <HAL_GPIO_Init+0x226>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a51      	ldr	r2, [pc, #324]	@ (8003478 <HAL_GPIO_Init+0x318>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d025      	beq.n	8003382 <HAL_GPIO_Init+0x222>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a50      	ldr	r2, [pc, #320]	@ (800347c <HAL_GPIO_Init+0x31c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <HAL_GPIO_Init+0x21e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4f      	ldr	r2, [pc, #316]	@ (8003480 <HAL_GPIO_Init+0x320>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d019      	beq.n	800337a <HAL_GPIO_Init+0x21a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4e      	ldr	r2, [pc, #312]	@ (8003484 <HAL_GPIO_Init+0x324>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_GPIO_Init+0x216>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4d      	ldr	r2, [pc, #308]	@ (8003488 <HAL_GPIO_Init+0x328>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00d      	beq.n	8003372 <HAL_GPIO_Init+0x212>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4c      	ldr	r2, [pc, #304]	@ (800348c <HAL_GPIO_Init+0x32c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <HAL_GPIO_Init+0x20e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4b      	ldr	r2, [pc, #300]	@ (8003490 <HAL_GPIO_Init+0x330>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_GPIO_Init+0x20a>
 8003366:	2307      	movs	r3, #7
 8003368:	e00e      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800336a:	2308      	movs	r3, #8
 800336c:	e00c      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800336e:	2306      	movs	r3, #6
 8003370:	e00a      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003372:	2305      	movs	r3, #5
 8003374:	e008      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003376:	2304      	movs	r3, #4
 8003378:	e006      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800337a:	2303      	movs	r3, #3
 800337c:	e004      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800337e:	2302      	movs	r3, #2
 8003380:	e002      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003386:	2300      	movs	r3, #0
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f002 0203 	and.w	r2, r2, #3
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	4093      	lsls	r3, r2
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003398:	4935      	ldr	r1, [pc, #212]	@ (8003470 <HAL_GPIO_Init+0x310>)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ca:	4a32      	ldr	r2, [pc, #200]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d0:	4b30      	ldr	r3, [pc, #192]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f4:	4a27      	ldr	r2, [pc, #156]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033fa:	4b26      	ldr	r3, [pc, #152]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800341e:	4a1d      	ldr	r2, [pc, #116]	@ (8003494 <HAL_GPIO_Init+0x334>)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003424:	4b1b      	ldr	r3, [pc, #108]	@ (8003494 <HAL_GPIO_Init+0x334>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003448:	4a12      	ldr	r2, [pc, #72]	@ (8003494 <HAL_GPIO_Init+0x334>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	f67f ae90 	bls.w	800317c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3724      	adds	r7, #36	@ 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40013800 	.word	0x40013800
 8003474:	40020000 	.word	0x40020000
 8003478:	40020400 	.word	0x40020400
 800347c:	40020800 	.word	0x40020800
 8003480:	40020c00 	.word	0x40020c00
 8003484:	40021000 	.word	0x40021000
 8003488:	40021400 	.word	0x40021400
 800348c:	40021800 	.word	0x40021800
 8003490:	40021c00 	.word	0x40021c00
 8003494:	40013c00 	.word	0x40013c00

08003498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a8:	787b      	ldrb	r3, [r7, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034b4:	e003      	b.n	80034be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	041a      	lsls	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	619a      	str	r2, [r3, #24]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e267      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d075      	beq.n	80035d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034ea:	4b88      	ldr	r3, [pc, #544]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d00c      	beq.n	8003510 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f6:	4b85      	ldr	r3, [pc, #532]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d112      	bne.n	8003528 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003502:	4b82      	ldr	r3, [pc, #520]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800350a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800350e:	d10b      	bne.n	8003528 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	4b7e      	ldr	r3, [pc, #504]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d05b      	beq.n	80035d4 <HAL_RCC_OscConfig+0x108>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d157      	bne.n	80035d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e242      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003530:	d106      	bne.n	8003540 <HAL_RCC_OscConfig+0x74>
 8003532:	4b76      	ldr	r3, [pc, #472]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a75      	ldr	r2, [pc, #468]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e01d      	b.n	800357c <HAL_RCC_OscConfig+0xb0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x98>
 800354a:	4b70      	ldr	r3, [pc, #448]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a6f      	ldr	r2, [pc, #444]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4b6d      	ldr	r3, [pc, #436]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6c      	ldr	r2, [pc, #432]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0xb0>
 8003564:	4b69      	ldr	r3, [pc, #420]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a68      	ldr	r2, [pc, #416]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800356a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b66      	ldr	r3, [pc, #408]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a65      	ldr	r2, [pc, #404]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800357a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d013      	beq.n	80035ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7ff f82e 	bl	80025e4 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800358c:	f7ff f82a 	bl	80025e4 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	@ 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e207      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	4b5b      	ldr	r3, [pc, #364]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0xc0>
 80035aa:	e014      	b.n	80035d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7ff f81a 	bl	80025e4 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b4:	f7ff f816 	bl	80025e4 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	@ 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e1f3      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c6:	4b51      	ldr	r3, [pc, #324]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0xe8>
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d063      	beq.n	80036aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035e2:	4b4a      	ldr	r3, [pc, #296]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b47      	ldr	r3, [pc, #284]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d11c      	bne.n	8003634 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fa:	4b44      	ldr	r3, [pc, #272]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d116      	bne.n	8003634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	4b41      	ldr	r3, [pc, #260]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_RCC_OscConfig+0x152>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e1c7      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b3b      	ldr	r3, [pc, #236]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4937      	ldr	r1, [pc, #220]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	e03a      	b.n	80036aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800363c:	4b34      	ldr	r3, [pc, #208]	@ (8003710 <HAL_RCC_OscConfig+0x244>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003642:	f7fe ffcf 	bl	80025e4 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364a:	f7fe ffcb 	bl	80025e4 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e1a8      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365c:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	4b28      	ldr	r3, [pc, #160]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4925      	ldr	r1, [pc, #148]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
 800367c:	e015      	b.n	80036aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367e:	4b24      	ldr	r3, [pc, #144]	@ (8003710 <HAL_RCC_OscConfig+0x244>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe ffae 	bl	80025e4 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368c:	f7fe ffaa 	bl	80025e4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e187      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	4b1b      	ldr	r3, [pc, #108]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d036      	beq.n	8003724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <HAL_RCC_OscConfig+0x248>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe ff8e 	bl	80025e4 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7fe ff8a 	bl	80025e4 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e167      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80036e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x200>
 80036ea:	e01b      	b.n	8003724 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCC_OscConfig+0x248>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7fe ff77 	bl	80025e4 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f8:	e00e      	b.n	8003718 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fa:	f7fe ff73 	bl	80025e4 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d907      	bls.n	8003718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e150      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
 800370c:	40023800 	.word	0x40023800
 8003710:	42470000 	.word	0x42470000
 8003714:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	4b88      	ldr	r3, [pc, #544]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800371a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ea      	bne.n	80036fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8097 	beq.w	8003860 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003736:	4b81      	ldr	r3, [pc, #516]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10f      	bne.n	8003762 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b7d      	ldr	r3, [pc, #500]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	4a7c      	ldr	r2, [pc, #496]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	@ 0x40
 8003752:	4b7a      	ldr	r3, [pc, #488]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003762:	4b77      	ldr	r3, [pc, #476]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d118      	bne.n	80037a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376e:	4b74      	ldr	r3, [pc, #464]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a73      	ldr	r2, [pc, #460]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377a:	f7fe ff33 	bl	80025e4 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003782:	f7fe ff2f 	bl	80025e4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e10c      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	4b6a      	ldr	r3, [pc, #424]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_OscConfig+0x2ea>
 80037a8:	4b64      	ldr	r3, [pc, #400]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ac:	4a63      	ldr	r2, [pc, #396]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b4:	e01c      	b.n	80037f0 <HAL_RCC_OscConfig+0x324>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x30c>
 80037be:	4b5f      	ldr	r3, [pc, #380]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	4a5e      	ldr	r2, [pc, #376]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 0304 	orr.w	r3, r3, #4
 80037c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ca:	4b5c      	ldr	r3, [pc, #368]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ce:	4a5b      	ldr	r2, [pc, #364]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d6:	e00b      	b.n	80037f0 <HAL_RCC_OscConfig+0x324>
 80037d8:	4b58      	ldr	r3, [pc, #352]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a57      	ldr	r2, [pc, #348]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e4:	4b55      	ldr	r3, [pc, #340]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e8:	4a54      	ldr	r2, [pc, #336]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037ea:	f023 0304 	bic.w	r3, r3, #4
 80037ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d015      	beq.n	8003824 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fe fef4 	bl	80025e4 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fe fef0 	bl	80025e4 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0cb      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	4b49      	ldr	r3, [pc, #292]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ee      	beq.n	8003800 <HAL_RCC_OscConfig+0x334>
 8003822:	e014      	b.n	800384e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003824:	f7fe fede 	bl	80025e4 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fe feda 	bl	80025e4 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0b5      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003842:	4b3e      	ldr	r3, [pc, #248]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1ee      	bne.n	800382c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d105      	bne.n	8003860 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003854:	4b39      	ldr	r3, [pc, #228]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	4a38      	ldr	r2, [pc, #224]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800385a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800385e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a1 	beq.w	80039ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800386a:	4b34      	ldr	r3, [pc, #208]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b08      	cmp	r3, #8
 8003874:	d05c      	beq.n	8003930 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d141      	bne.n	8003902 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387e:	4b31      	ldr	r3, [pc, #196]	@ (8003944 <HAL_RCC_OscConfig+0x478>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fe feae 	bl	80025e4 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388c:	f7fe feaa 	bl	80025e4 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e087      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	4b27      	ldr	r3, [pc, #156]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	019b      	lsls	r3, r3, #6
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	3b01      	subs	r3, #1
 80038c4:	041b      	lsls	r3, r3, #16
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	491b      	ldr	r1, [pc, #108]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_RCC_OscConfig+0x478>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fe fe83 	bl	80025e4 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e2:	f7fe fe7f 	bl	80025e4 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e05c      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x416>
 8003900:	e054      	b.n	80039ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003902:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <HAL_RCC_OscConfig+0x478>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fe fe6c 	bl	80025e4 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fe fe68 	bl	80025e4 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e045      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x444>
 800392e:	e03d      	b.n	80039ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d107      	bne.n	8003948 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e038      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
 800393c:	40023800 	.word	0x40023800
 8003940:	40007000 	.word	0x40007000
 8003944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003948:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x4ec>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d028      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d121      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d11a      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003978:	4013      	ands	r3, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800397e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003980:	4293      	cmp	r3, r2
 8003982:	d111      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	3b01      	subs	r3, #1
 8003992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800

080039bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0cc      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d0:	4b68      	ldr	r3, [pc, #416]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d90c      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039de:	4b65      	ldr	r3, [pc, #404]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b63      	ldr	r3, [pc, #396]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0b8      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a10:	4b59      	ldr	r3, [pc, #356]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4a58      	ldr	r2, [pc, #352]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a28:	4b53      	ldr	r3, [pc, #332]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a52      	ldr	r2, [pc, #328]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b50      	ldr	r3, [pc, #320]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	494d      	ldr	r1, [pc, #308]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d044      	beq.n	8003adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b47      	ldr	r3, [pc, #284]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d119      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e07f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e06f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e067      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a9a:	4b37      	ldr	r3, [pc, #220]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f023 0203 	bic.w	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4934      	ldr	r1, [pc, #208]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aac:	f7fe fd9a 	bl	80025e4 <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab4:	f7fe fd96 	bl	80025e4 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e04f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	4b2b      	ldr	r3, [pc, #172]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 020c 	and.w	r2, r3, #12
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1eb      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003adc:	4b25      	ldr	r3, [pc, #148]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d20c      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b22      	ldr	r3, [pc, #136]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b20      	ldr	r3, [pc, #128]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e032      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b10:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4916      	ldr	r1, [pc, #88]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	490e      	ldr	r1, [pc, #56]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b42:	f000 f821 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b46:	4602      	mov	r2, r0
 8003b48:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	490a      	ldr	r1, [pc, #40]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	5ccb      	ldrb	r3, [r1, r3]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	4a09      	ldr	r2, [pc, #36]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b5e:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fcfa 	bl	800255c <HAL_InitTick>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023c00 	.word	0x40023c00
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	0800ad28 	.word	0x0800ad28
 8003b80:	20000004 	.word	0x20000004
 8003b84:	20000008 	.word	0x20000008

08003b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b8c:	b094      	sub	sp, #80	@ 0x50
 8003b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba0:	4b79      	ldr	r3, [pc, #484]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d00d      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	f200 80e1 	bhi.w	8003d74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x34>
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bba:	e0db      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bbc:	4b73      	ldr	r3, [pc, #460]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bc0:	e0db      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bc2:	4b73      	ldr	r3, [pc, #460]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bc6:	e0d8      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d063      	beq.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bde:	4b6a      	ldr	r3, [pc, #424]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	099b      	lsrs	r3, r3, #6
 8003be4:	2200      	movs	r2, #0
 8003be6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003be8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	f04f 0000 	mov.w	r0, #0
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	0159      	lsls	r1, r3, #5
 8003c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c0c:	0150      	lsls	r0, r2, #5
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4621      	mov	r1, r4
 8003c14:	1a51      	subs	r1, r2, r1
 8003c16:	6139      	str	r1, [r7, #16]
 8003c18:	4629      	mov	r1, r5
 8003c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	018b      	lsls	r3, r1, #6
 8003c30:	4651      	mov	r1, sl
 8003c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c36:	4651      	mov	r1, sl
 8003c38:	018a      	lsls	r2, r1, #6
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c40:	4659      	mov	r1, fp
 8003c42:	eb63 0901 	sbc.w	r9, r3, r1
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c5a:	4690      	mov	r8, r2
 8003c5c:	4699      	mov	r9, r3
 8003c5e:	4623      	mov	r3, r4
 8003c60:	eb18 0303 	adds.w	r3, r8, r3
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	462b      	mov	r3, r5
 8003c68:	eb49 0303 	adc.w	r3, r9, r3
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	024b      	lsls	r3, r1, #9
 8003c7e:	4621      	mov	r1, r4
 8003c80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c84:	4621      	mov	r1, r4
 8003c86:	024a      	lsls	r2, r1, #9
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c8e:	2200      	movs	r2, #0
 8003c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c98:	f7fc fa96 	bl	80001c8 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ca4:	e058      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca6:	4b38      	ldr	r3, [pc, #224]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	099b      	lsrs	r3, r3, #6
 8003cac:	2200      	movs	r2, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cb6:	623b      	str	r3, [r7, #32]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	f04f 0000 	mov.w	r0, #0
 8003cc8:	f04f 0100 	mov.w	r1, #0
 8003ccc:	0159      	lsls	r1, r3, #5
 8003cce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd2:	0150      	lsls	r0, r2, #5
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4641      	mov	r1, r8
 8003cda:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cde:	4649      	mov	r1, r9
 8003ce0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cf8:	ebb2 040a 	subs.w	r4, r2, sl
 8003cfc:	eb63 050b 	sbc.w	r5, r3, fp
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	00eb      	lsls	r3, r5, #3
 8003d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0e:	00e2      	lsls	r2, r4, #3
 8003d10:	4614      	mov	r4, r2
 8003d12:	461d      	mov	r5, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	18e3      	adds	r3, r4, r3
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	eb45 0303 	adc.w	r3, r5, r3
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	028b      	lsls	r3, r1, #10
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d38:	4621      	mov	r1, r4
 8003d3a:	028a      	lsls	r2, r1, #10
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d42:	2200      	movs	r2, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	61fa      	str	r2, [r7, #28]
 8003d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d4c:	f7fc fa3c 	bl	80001c8 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d58:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	3301      	adds	r3, #1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d72:	e002      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d74:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3750      	adds	r7, #80	@ 0x50
 8003d80:	46bd      	mov	sp, r7
 8003d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	007a1200 	.word	0x007a1200

08003d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d98:	4b03      	ldr	r3, [pc, #12]	@ (8003da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000004 	.word	0x20000004

08003dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003db0:	f7ff fff0 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	0a9b      	lsrs	r3, r3, #10
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4903      	ldr	r1, [pc, #12]	@ (8003dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	0800ad38 	.word	0x0800ad38

08003dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dd8:	f7ff ffdc 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0b5b      	lsrs	r3, r3, #13
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4903      	ldr	r1, [pc, #12]	@ (8003df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40023800 	.word	0x40023800
 8003df8:	0800ad38 	.word	0x0800ad38

08003dfc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e022      	b.n	8003e54 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d105      	bne.n	8003e26 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7fe f891 	bl	8001f48 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f814 	bl	8003e5c <HAL_SD_InitCard>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e00a      	b.n	8003e54 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e5c:	b5b0      	push	{r4, r5, r7, lr}
 8003e5e:	b08e      	sub	sp, #56	@ 0x38
 8003e60:	af04      	add	r7, sp, #16
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003e78:	2376      	movs	r3, #118	@ 0x76
 8003e7a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681d      	ldr	r5, [r3, #0]
 8003e80:	466c      	mov	r4, sp
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e8e:	f107 0308 	add.w	r3, r7, #8
 8003e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e94:	4628      	mov	r0, r5
 8003e96:	f003 fb91 	bl	80075bc <SDIO_Init>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e04f      	b.n	8003f4c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003eac:	4b29      	ldr	r3, [pc, #164]	@ (8003f54 <HAL_SD_InitCard+0xf8>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f003 fbc9 	bl	800764e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003ebc:	4b25      	ldr	r3, [pc, #148]	@ (8003f54 <HAL_SD_InitCard+0xf8>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f7fe fb9a 	bl	80025fc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fe79 	bl	8004bc0 <SD_PowerON>
 8003ece:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e02e      	b.n	8003f4c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fd98 	bl	8004a24 <SD_InitCard>
 8003ef4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e01b      	b.n	8003f4c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f003 fc28 	bl	8007772 <SDMMC_CmdBlockLength>
 8003f22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00f      	beq.n	8003f4a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f58 <HAL_SD_InitCard+0xfc>)
 8003f30:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3728      	adds	r7, #40	@ 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bdb0      	pop	{r4, r5, r7, pc}
 8003f54:	422580a0 	.word	0x422580a0
 8003f58:	004005ff 	.word	0x004005ff

08003f5c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b092      	sub	sp, #72	@ 0x48
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003f6a:	f7fe fb3b 	bl	80025e4 <HAL_GetTick>
 8003f6e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e1c5      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	f040 81b8 	bne.w	800430c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003fa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	441a      	add	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d907      	bls.n	8003fc0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e1ac      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d002      	beq.n	8003fde <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fda:	025b      	lsls	r3, r3, #9
 8003fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	025b      	lsls	r3, r3, #9
 8003fe8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003fea:	2390      	movs	r3, #144	@ 0x90
 8003fec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f107 0214 	add.w	r2, r7, #20
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f003 fb88 	bl	800771a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d90a      	bls.n	8004026 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2202      	movs	r2, #2
 8004014:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800401c:	4618      	mov	r0, r3
 800401e:	f003 fbec 	bl	80077fa <SDMMC_CmdReadMultiBlock>
 8004022:	6478      	str	r0, [r7, #68]	@ 0x44
 8004024:	e009      	b.n	800403a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004032:	4618      	mov	r0, r3
 8004034:	f003 fbbf 	bl	80077b6 <SDMMC_CmdReadSingleBlock>
 8004038:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800403a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800403c:	2b00      	cmp	r3, #0
 800403e:	d012      	beq.n	8004066 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a7e      	ldr	r2, [pc, #504]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 8004046:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800404c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800404e:	431a      	orrs	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e159      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800406a:	e061      	b.n	8004130 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004072:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d03c      	beq.n	80040f4 <HAL_SD_ReadBlocks+0x198>
 800407a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d039      	beq.n	80040f4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004080:	2300      	movs	r3, #0
 8004082:	643b      	str	r3, [r7, #64]	@ 0x40
 8004084:	e033      	b.n	80040ee <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f003 fac1 	bl	8007612 <SDIO_ReadFIFO>
 8004090:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004094:	b2da      	uxtb	r2, r3
 8004096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004098:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800409a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409c:	3301      	adds	r3, #1
 800409e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a2:	3b01      	subs	r3, #1
 80040a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80040a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a8:	0a1b      	lsrs	r3, r3, #8
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80040b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b2:	3301      	adds	r3, #1
 80040b4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b8:	3b01      	subs	r3, #1
 80040ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80040bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040be:	0c1b      	lsrs	r3, r3, #16
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	3301      	adds	r3, #1
 80040ca:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ce:	3b01      	subs	r3, #1
 80040d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80040d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d4:	0e1b      	lsrs	r3, r3, #24
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80040dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040de:	3301      	adds	r3, #1
 80040e0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80040e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e4:	3b01      	subs	r3, #1
 80040e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80040e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ea:	3301      	adds	r3, #1
 80040ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80040ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040f0:	2b07      	cmp	r3, #7
 80040f2:	d9c8      	bls.n	8004086 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80040f4:	f7fe fa76 	bl	80025e4 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004100:	429a      	cmp	r2, r3
 8004102:	d902      	bls.n	800410a <HAL_SD_ReadBlocks+0x1ae>
 8004104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004106:	2b00      	cmp	r3, #0
 8004108:	d112      	bne.n	8004130 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a4c      	ldr	r2, [pc, #304]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 8004110:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004116:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e0f4      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004136:	f240 332a 	movw	r3, #810	@ 0x32a
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d095      	beq.n	800406c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d022      	beq.n	8004194 <HAL_SD_ReadBlocks+0x238>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d91f      	bls.n	8004194 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004158:	2b03      	cmp	r3, #3
 800415a:	d01b      	beq.n	8004194 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f003 fbb1 	bl	80078c8 <SDMMC_CmdStopTransfer>
 8004166:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800416a:	2b00      	cmp	r3, #0
 800416c:	d012      	beq.n	8004194 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a33      	ldr	r2, [pc, #204]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 8004174:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800417a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800417c:	431a      	orrs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0c2      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_SD_ReadBlocks+0x254>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a22      	ldr	r2, [pc, #136]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 80041b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041bc:	f043 0208 	orr.w	r2, r3, #8
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0a1      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d012      	beq.n	800420a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a15      	ldr	r2, [pc, #84]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 80041ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	f043 0202 	orr.w	r2, r3, #2
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e087      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d064      	beq.n	80042e2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a08      	ldr	r2, [pc, #32]	@ (8004240 <HAL_SD_ReadBlocks+0x2e4>)
 800421e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e06d      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
 800423e:	bf00      	nop
 8004240:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f003 f9e2 	bl	8007612 <SDIO_ReadFIFO>
 800424e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004252:	b2da      	uxtb	r2, r3
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425a:	3301      	adds	r3, #1
 800425c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800425e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004260:	3b01      	subs	r3, #1
 8004262:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	b2da      	uxtb	r2, r3
 800426a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800426e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004270:	3301      	adds	r3, #1
 8004272:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004276:	3b01      	subs	r3, #1
 8004278:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800427a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	b2da      	uxtb	r2, r3
 8004280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004282:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004286:	3301      	adds	r3, #1
 8004288:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800428a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428c:	3b01      	subs	r3, #1
 800428e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004292:	0e1b      	lsrs	r3, r3, #24
 8004294:	b2da      	uxtb	r2, r3
 8004296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004298:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429c:	3301      	adds	r3, #1
 800429e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80042a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a2:	3b01      	subs	r3, #1
 80042a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80042a6:	f7fe f99d 	bl	80025e4 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d902      	bls.n	80042bc <HAL_SD_ReadBlocks+0x360>
 80042b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d112      	bne.n	80042e2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <HAL_SD_ReadBlocks+0x3c8>)
 80042c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e01b      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_SD_ReadBlocks+0x39a>
 80042f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1a6      	bne.n	8004244 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 80042fe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e006      	b.n	800431a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004310:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
  }
}
 800431a:	4618      	mov	r0, r3
 800431c:	3748      	adds	r7, #72	@ 0x48
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	004005ff 	.word	0x004005ff

08004328 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b092      	sub	sp, #72	@ 0x48
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004336:	f7fe f955 	bl	80025e4 <HAL_GetTick>
 800433a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d107      	bne.n	800435a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e16d      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	f040 8160 	bne.w	8004628 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800436e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	441a      	add	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004378:	429a      	cmp	r2, r3
 800437a:	d907      	bls.n	800438c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e154      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2203      	movs	r2, #3
 8004390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2200      	movs	r2, #0
 800439a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d002      	beq.n	80043aa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80043a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a6:	025b      	lsls	r3, r3, #9
 80043a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295
 80043ae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	025b      	lsls	r3, r3, #9
 80043b4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80043b6:	2390      	movs	r3, #144	@ 0x90
 80043b8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80043ba:	2300      	movs	r3, #0
 80043bc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80043be:	2300      	movs	r3, #0
 80043c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80043c2:	2301      	movs	r3, #1
 80043c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f107 0218 	add.w	r2, r7, #24
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f003 f9a2 	bl	800771a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d90a      	bls.n	80043f2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043e8:	4618      	mov	r0, r3
 80043ea:	f003 fa4a 	bl	8007882 <SDMMC_CmdWriteMultiBlock>
 80043ee:	6478      	str	r0, [r7, #68]	@ 0x44
 80043f0:	e009      	b.n	8004406 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2210      	movs	r2, #16
 80043f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043fe:	4618      	mov	r0, r3
 8004400:	f003 fa1d 	bl	800783e <SDMMC_CmdWriteSingleBlock>
 8004404:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004408:	2b00      	cmp	r3, #0
 800440a:	d012      	beq.n	8004432 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a8b      	ldr	r2, [pc, #556]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 8004412:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800441a:	431a      	orrs	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e101      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004436:	e065      	b.n	8004504 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d040      	beq.n	80044c8 <HAL_SD_WriteBlocks+0x1a0>
 8004446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d03d      	beq.n	80044c8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800444c:	2300      	movs	r3, #0
 800444e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004450:	e037      	b.n	80044c2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8004452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445a:	3301      	adds	r3, #1
 800445c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800445e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004460:	3b01      	subs	r3, #1
 8004462:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	021a      	lsls	r2, r3, #8
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	3301      	adds	r3, #1
 8004474:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004478:	3b01      	subs	r3, #1
 800447a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800447c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	041a      	lsls	r2, r3, #16
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448a:	3301      	adds	r3, #1
 800448c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800448e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004490:	3b01      	subs	r3, #1
 8004492:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	061a      	lsls	r2, r3, #24
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80044a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a2:	3301      	adds	r3, #1
 80044a4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80044a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a8:	3b01      	subs	r3, #1
 80044aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f107 0214 	add.w	r2, r7, #20
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f003 f8b8 	bl	800762c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80044bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044be:	3301      	adds	r3, #1
 80044c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80044c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	d9c4      	bls.n	8004452 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80044c8:	f7fe f88c 	bl	80025e4 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d902      	bls.n	80044de <HAL_SD_WriteBlocks+0x1b6>
 80044d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d112      	bne.n	8004504 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a57      	ldr	r2, [pc, #348]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 80044e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ec:	431a      	orrs	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e098      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800450a:	f240 331a 	movw	r3, #794	@ 0x31a
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d091      	beq.n	8004438 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d022      	beq.n	8004568 <HAL_SD_WriteBlocks+0x240>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d91f      	bls.n	8004568 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452c:	2b03      	cmp	r3, #3
 800452e:	d01b      	beq.n	8004568 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f003 f9c7 	bl	80078c8 <SDMMC_CmdStopTransfer>
 800453a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800453c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800453e:	2b00      	cmp	r3, #0
 8004540:	d012      	beq.n	8004568 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a3e      	ldr	r2, [pc, #248]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 8004548:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800454e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e066      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_SD_WriteBlocks+0x25c>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004580:	2b00      	cmp	r3, #0
 8004582:	d012      	beq.n	80045aa <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2d      	ldr	r2, [pc, #180]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 800458a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004590:	f043 0208 	orr.w	r2, r3, #8
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e045      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d012      	beq.n	80045de <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a20      	ldr	r2, [pc, #128]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 80045be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c4:	f043 0202 	orr.w	r2, r3, #2
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e02b      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d012      	beq.n	8004612 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a13      	ldr	r2, [pc, #76]	@ (8004640 <HAL_SD_WriteBlocks+0x318>)
 80045f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	f043 0210 	orr.w	r2, r3, #16
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e011      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f240 523a 	movw	r2, #1338	@ 0x53a
 800461a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	e006      	b.n	8004636 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3748      	adds	r7, #72	@ 0x48
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	004005ff 	.word	0x004005ff

08004644 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004652:	0f9b      	lsrs	r3, r3, #30
 8004654:	b2da      	uxtb	r2, r3
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800465e:	0e9b      	lsrs	r3, r3, #26
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	b2da      	uxtb	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	b2da      	uxtb	r2, r3
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004682:	0c1b      	lsrs	r3, r3, #16
 8004684:	b2da      	uxtb	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	b2da      	uxtb	r2, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800469a:	b2da      	uxtb	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046a4:	0d1b      	lsrs	r3, r3, #20
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c2:	0bdb      	lsrs	r3, r3, #15
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046d4:	0b9b      	lsrs	r3, r3, #14
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046e6:	0b5b      	lsrs	r3, r3, #13
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046f8:	0b1b      	lsrs	r3, r3, #12
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	b2da      	uxtb	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004710:	2b00      	cmp	r3, #0
 8004712:	d163      	bne.n	80047dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004718:	009a      	lsls	r2, r3, #2
 800471a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800471e:	4013      	ands	r3, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004724:	0f92      	lsrs	r2, r2, #30
 8004726:	431a      	orrs	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004730:	0edb      	lsrs	r3, r3, #27
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	b2da      	uxtb	r2, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004742:	0e1b      	lsrs	r3, r3, #24
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	b2da      	uxtb	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004754:	0d5b      	lsrs	r3, r3, #21
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	b2da      	uxtb	r2, r3
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004766:	0c9b      	lsrs	r3, r3, #18
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	b2da      	uxtb	r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004778:	0bdb      	lsrs	r3, r3, #15
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	b2da      	uxtb	r2, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	7e1b      	ldrb	r3, [r3, #24]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	3302      	adds	r3, #2
 800479c:	2201      	movs	r2, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80047a6:	fb03 f202 	mul.w	r2, r3, r2
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	7a1b      	ldrb	r3, [r3, #8]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	2201      	movs	r2, #1
 80047ba:	409a      	lsls	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80047c8:	0a52      	lsrs	r2, r2, #9
 80047ca:	fb03 f202 	mul.w	r2, r3, r2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80047da:	e031      	b.n	8004840 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d11d      	bne.n	8004820 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047f2:	0c1b      	lsrs	r3, r3, #16
 80047f4:	431a      	orrs	r2, r3
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	3301      	adds	r3, #1
 8004800:	029a      	lsls	r2, r3, #10
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004814:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	661a      	str	r2, [r3, #96]	@ 0x60
 800481e:	e00f      	b.n	8004840 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a58      	ldr	r2, [pc, #352]	@ (8004988 <HAL_SD_GetCardCSD+0x344>)
 8004826:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e09d      	b.n	800497c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004844:	0b9b      	lsrs	r3, r3, #14
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	b2da      	uxtb	r2, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004856:	09db      	lsrs	r3, r3, #7
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800485e:	b2da      	uxtb	r2, r3
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800486e:	b2da      	uxtb	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004878:	0fdb      	lsrs	r3, r3, #31
 800487a:	b2da      	uxtb	r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004884:	0f5b      	lsrs	r3, r3, #29
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	b2da      	uxtb	r2, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004896:	0e9b      	lsrs	r3, r3, #26
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a8:	0d9b      	lsrs	r3, r3, #22
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	0d5b      	lsrs	r3, r3, #21
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ea:	0bdb      	lsrs	r3, r3, #15
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	0b9b      	lsrs	r3, r3, #14
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	b2da      	uxtb	r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	0b5b      	lsrs	r3, r3, #13
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	b2da      	uxtb	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004926:	0b1b      	lsrs	r3, r3, #12
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493a:	0a9b      	lsrs	r3, r3, #10
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	b2da      	uxtb	r2, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494e:	0a1b      	lsrs	r3, r3, #8
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	b2da      	uxtb	r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800496a:	b2da      	uxtb	r2, r3
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	004005ff 	.word	0x004005ff

0800498c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80049f0:	f107 030c 	add.w	r3, r7, #12
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f970 	bl	8004cdc <SD_SendStatus>
 80049fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	0a5b      	lsrs	r3, r3, #9
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004a1a:	693b      	ldr	r3, [r7, #16]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004a24:	b5b0      	push	{r4, r5, r7, lr}
 8004a26:	b094      	sub	sp, #80	@ 0x50
 8004a28:	af04      	add	r7, sp, #16
 8004a2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f002 fe18 	bl	800766a <SDIO_GetPowerState>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a40:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004a44:	e0b8      	b.n	8004bb8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d02f      	beq.n	8004aae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f002 ffff 	bl	8007a56 <SDMMC_CmdSendCID>
 8004a58:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <SD_InitCard+0x40>
    {
      return errorstate;
 8004a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a62:	e0a9      	b.n	8004bb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f002 fe42 	bl	80076f4 <SDIO_GetResponse>
 8004a70:	4602      	mov	r2, r0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f002 fe39 	bl	80076f4 <SDIO_GetResponse>
 8004a82:	4602      	mov	r2, r0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2108      	movs	r1, #8
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f002 fe30 	bl	80076f4 <SDIO_GetResponse>
 8004a94:	4602      	mov	r2, r0
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	210c      	movs	r1, #12
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f002 fe27 	bl	80076f4 <SDIO_GetResponse>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d00d      	beq.n	8004ad2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f107 020e 	add.w	r2, r7, #14
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f003 f805 	bl	8007ad0 <SDMMC_CmdSetRelAdd>
 8004ac6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <SD_InitCard+0xae>
    {
      return errorstate;
 8004ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad0:	e072      	b.n	8004bb8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d036      	beq.n	8004b48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004ada:	89fb      	ldrh	r3, [r7, #14]
 8004adc:	461a      	mov	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f002 ffcf 	bl	8007a92 <SDMMC_CmdSendCSD>
 8004af4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afe:	e05b      	b.n	8004bb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f002 fdf4 	bl	80076f4 <SDIO_GetResponse>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2104      	movs	r1, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f002 fdeb 	bl	80076f4 <SDIO_GetResponse>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2108      	movs	r1, #8
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f002 fde2 	bl	80076f4 <SDIO_GetResponse>
 8004b30:	4602      	mov	r2, r0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	210c      	movs	r1, #12
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f002 fdd9 	bl	80076f4 <SDIO_GetResponse>
 8004b42:	4602      	mov	r2, r0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f002 fdd0 	bl	80076f4 <SDIO_GetResponse>
 8004b54:	4603      	mov	r3, r0
 8004b56:	0d1a      	lsrs	r2, r3, #20
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004b5c:	f107 0310 	add.w	r3, r7, #16
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff fd6e 	bl	8004644 <HAL_SD_GetCardCSD>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b6e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004b72:	e021      	b.n	8004bb8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6819      	ldr	r1, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	2200      	movs	r2, #0
 8004b80:	461c      	mov	r4, r3
 8004b82:	4615      	mov	r5, r2
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	4608      	mov	r0, r1
 8004b8a:	f002 febf 	bl	800790c <SDMMC_CmdSelDesel>
 8004b8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <SD_InitCard+0x176>
  {
    return errorstate;
 8004b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b98:	e00e      	b.n	8004bb8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	466c      	mov	r4, sp
 8004ba2:	f103 0210 	add.w	r2, r3, #16
 8004ba6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ba8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004bac:	3304      	adds	r3, #4
 8004bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f002 fd03 	bl	80075bc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3740      	adds	r7, #64	@ 0x40
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bdb0      	pop	{r4, r5, r7, pc}

08004bc0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f002 feba 	bl	8007952 <SDMMC_CmdGoIdleState>
 8004bde:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <SD_PowerON+0x2a>
  {
    return errorstate;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	e072      	b.n	8004cd0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f002 fecd 	bl	800798e <SDMMC_CmdOperCond>
 8004bf4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00d      	beq.n	8004c18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f002 fea3 	bl	8007952 <SDMMC_CmdGoIdleState>
 8004c0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	e05b      	b.n	8004cd0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d137      	bne.n	8004c96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f002 fecd 	bl	80079cc <SDMMC_CmdAppCommand>
 8004c32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d02d      	beq.n	8004c96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004c3e:	e047      	b.n	8004cd0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2100      	movs	r1, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f002 fec0 	bl	80079cc <SDMMC_CmdAppCommand>
 8004c4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <SD_PowerON+0x98>
    {
      return errorstate;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	e03b      	b.n	8004cd0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	491e      	ldr	r1, [pc, #120]	@ (8004cd8 <SD_PowerON+0x118>)
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f002 fed6 	bl	8007a10 <SDMMC_CmdAppOperCommand>
 8004c64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c6c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004c70:	e02e      	b.n	8004cd0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f002 fd3b 	bl	80076f4 <SDIO_GetResponse>
 8004c7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	0fdb      	lsrs	r3, r3, #31
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <SD_PowerON+0xcc>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <SD_PowerON+0xce>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]

    count++;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	3301      	adds	r3, #1
 8004c94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d802      	bhi.n	8004ca6 <SD_PowerON+0xe6>
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0cc      	beq.n	8004c40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d902      	bls.n	8004cb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cb4:	e00c      	b.n	8004cd0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004cc6:	e002      	b.n	8004cce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	c1100000 	.word	0xc1100000

08004cdc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004cec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cf0:	e018      	b.n	8004d24 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f002 ff07 	bl	8007b12 <SDMMC_CmdSendStatus>
 8004d04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	e009      	b.n	8004d24 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f002 fcec 	bl	80076f4 <SDIO_GetResponse>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07b      	b.n	8004e36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d108      	bne.n	8004d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d4e:	d009      	beq.n	8004d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	61da      	str	r2, [r3, #28]
 8004d56:	e005      	b.n	8004d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fd f95c 	bl	800203c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de8:	ea42 0103 	orr.w	r1, r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	f003 0104 	and.w	r1, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	f003 0210 	and.w	r2, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b088      	sub	sp, #32
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e4e:	f7fd fbc9 	bl	80025e4 <HAL_GetTick>
 8004e52:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d001      	beq.n	8004e68 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
 8004e66:	e12a      	b.n	80050be <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_SPI_Transmit+0x36>
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e122      	b.n	80050be <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_SPI_Transmit+0x48>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e11b      	b.n	80050be <HAL_SPI_Transmit+0x280>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2203      	movs	r2, #3
 8004e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	88fa      	ldrh	r2, [r7, #6]
 8004ea6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ed4:	d10f      	bne.n	8004ef6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ee4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ef4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	d007      	beq.n	8004f14 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f1c:	d152      	bne.n	8004fc4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_SPI_Transmit+0xee>
 8004f26:	8b7b      	ldrh	r3, [r7, #26]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d145      	bne.n	8004fb8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	881a      	ldrh	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	1c9a      	adds	r2, r3, #2
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f50:	e032      	b.n	8004fb8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d112      	bne.n	8004f86 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f64:	881a      	ldrh	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	1c9a      	adds	r2, r3, #2
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f84:	e018      	b.n	8004fb8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f86:	f7fd fb2d 	bl	80025e4 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d803      	bhi.n	8004f9e <HAL_SPI_Transmit+0x160>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d102      	bne.n	8004fa4 <HAL_SPI_Transmit+0x166>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d109      	bne.n	8004fb8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e082      	b.n	80050be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1c7      	bne.n	8004f52 <HAL_SPI_Transmit+0x114>
 8004fc2:	e053      	b.n	800506c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <HAL_SPI_Transmit+0x194>
 8004fcc:	8b7b      	ldrh	r3, [r7, #26]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d147      	bne.n	8005062 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	330c      	adds	r3, #12
 8004fdc:	7812      	ldrb	r2, [r2, #0]
 8004fde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ff8:	e033      	b.n	8005062 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b02      	cmp	r3, #2
 8005006:	d113      	bne.n	8005030 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	7812      	ldrb	r2, [r2, #0]
 8005014:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800502e:	e018      	b.n	8005062 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005030:	f7fd fad8 	bl	80025e4 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d803      	bhi.n	8005048 <HAL_SPI_Transmit+0x20a>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d102      	bne.n	800504e <HAL_SPI_Transmit+0x210>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e02d      	b.n	80050be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1c6      	bne.n	8004ffa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 fda1 	bl	8005bb8 <SPI_EndRxTxTransaction>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
  }
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d001      	beq.n	80050e6 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
 80050e4:	e07f      	b.n	80051e6 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d110      	bne.n	8005110 <HAL_SPI_Receive_IT+0x48>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050f6:	d10b      	bne.n	8005110 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2204      	movs	r2, #4
 80050fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f876 	bl	80051f8 <HAL_SPI_TransmitReceive_IT>
 800510c:	4603      	mov	r3, r0
 800510e:	e06a      	b.n	80051e6 <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_SPI_Receive_IT+0x54>
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e062      	b.n	80051e6 <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_SPI_Receive_IT+0x66>
 800512a:	2302      	movs	r3, #2
 800512c:	e05b      	b.n	80051e6 <HAL_SPI_Receive_IT+0x11e>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2204      	movs	r2, #4
 800513a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a1d      	ldr	r2, [pc, #116]	@ (80051f0 <HAL_SPI_Receive_IT+0x128>)
 800517a:	641a      	str	r2, [r3, #64]	@ 0x40
 800517c:	e002      	b.n	8005184 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4a1c      	ldr	r2, [pc, #112]	@ (80051f4 <HAL_SPI_Receive_IT+0x12c>)
 8005182:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800518c:	d10f      	bne.n	80051ae <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800519c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051ac:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d007      	beq.n	80051cc <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ca:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80051e2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	08005995 	.word	0x08005995
 80051f4:	0800594b 	.word	0x0800594b

080051f8 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800520c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d00c      	beq.n	8005234 <HAL_SPI_TransmitReceive_IT+0x3c>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005220:	d106      	bne.n	8005230 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <HAL_SPI_TransmitReceive_IT+0x38>
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b04      	cmp	r3, #4
 800522e:	d001      	beq.n	8005234 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
 8005232:	e061      	b.n	80052f8 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_SPI_TransmitReceive_IT+0x4e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_SPI_TransmitReceive_IT+0x4e>
 8005240:	887b      	ldrh	r3, [r7, #2]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e056      	b.n	80052f8 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_SPI_TransmitReceive_IT+0x60>
 8005254:	2302      	movs	r3, #2
 8005256:	e04f      	b.n	80052f8 <HAL_SPI_TransmitReceive_IT+0x100>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b04      	cmp	r3, #4
 800526a:	d003      	beq.n	8005274 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2205      	movs	r2, #5
 8005270:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	887a      	ldrh	r2, [r7, #2]
 8005284:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	887a      	ldrh	r2, [r7, #2]
 800528a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	887a      	ldrh	r2, [r7, #2]
 8005296:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	887a      	ldrh	r2, [r7, #2]
 800529c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d006      	beq.n	80052b4 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a16      	ldr	r2, [pc, #88]	@ (8005304 <HAL_SPI_TransmitReceive_IT+0x10c>)
 80052aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4a16      	ldr	r2, [pc, #88]	@ (8005308 <HAL_SPI_TransmitReceive_IT+0x110>)
 80052b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80052b2:	e005      	b.n	80052c0 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a15      	ldr	r2, [pc, #84]	@ (800530c <HAL_SPI_TransmitReceive_IT+0x114>)
 80052b8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4a14      	ldr	r2, [pc, #80]	@ (8005310 <HAL_SPI_TransmitReceive_IT+0x118>)
 80052be:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ca:	2b40      	cmp	r3, #64	@ 0x40
 80052cc:	d007      	beq.n	80052de <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052dc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80052f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	0800588d 	.word	0x0800588d
 8005308:	080058ed 	.word	0x080058ed
 800530c:	080057c9 	.word	0x080057c9
 8005310:	0800582d 	.word	0x0800582d

08005314 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d001      	beq.n	8005332 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800532e:	2302      	movs	r3, #2
 8005330:	e097      	b.n	8005462 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_SPI_Transmit_DMA+0x2a>
 8005338:	88fb      	ldrh	r3, [r7, #6]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e08f      	b.n	8005462 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_SPI_Transmit_DMA+0x3c>
 800534c:	2302      	movs	r3, #2
 800534e:	e088      	b.n	8005462 <HAL_SPI_Transmit_DMA+0x14e>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2203      	movs	r2, #3
 800535c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	88fa      	ldrh	r2, [r7, #6]
 8005376:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800539e:	d10f      	bne.n	80053c0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c4:	4a29      	ldr	r2, [pc, #164]	@ (800546c <HAL_SPI_Transmit_DMA+0x158>)
 80053c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053cc:	4a28      	ldr	r2, [pc, #160]	@ (8005470 <HAL_SPI_Transmit_DMA+0x15c>)
 80053ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d4:	4a27      	ldr	r2, [pc, #156]	@ (8005474 <HAL_SPI_Transmit_DMA+0x160>)
 80053d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053dc:	2200      	movs	r2, #0
 80053de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	4619      	mov	r1, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80053f8:	f7fd fb5e 	bl	8002ab8 <HAL_DMA_Start_IT>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005406:	f043 0210 	orr.w	r2, r3, #16
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e023      	b.n	8005462 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005424:	2b40      	cmp	r3, #64	@ 0x40
 8005426:	d007      	beq.n	8005438 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005436:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0220 	orr.w	r2, r2, #32
 800544e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0202 	orr.w	r2, r2, #2
 800545e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	08005745 	.word	0x08005745
 8005470:	0800569d 	.word	0x0800569d
 8005474:	08005761 	.word	0x08005761

08005478 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10e      	bne.n	80054b8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d009      	beq.n	80054b8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	4798      	blx	r3
    return;
 80054b6:	e0ce      	b.n	8005656 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <HAL_SPI_IRQHandler+0x5e>
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	4798      	blx	r3
    return;
 80054d4:	e0bf      	b.n	8005656 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <HAL_SPI_IRQHandler+0x7e>
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d105      	bne.n	80054f6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 80b0 	beq.w	8005656 <HAL_SPI_IRQHandler+0x1de>
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80aa 	beq.w	8005656 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d023      	beq.n	8005554 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b03      	cmp	r3, #3
 8005516:	d011      	beq.n	800553c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551c:	f043 0204 	orr.w	r2, r3, #4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	e00b      	b.n	8005554 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800553c:	2300      	movs	r3, #0
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
        return;
 8005552:	e080      	b.n	8005656 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d014      	beq.n	8005588 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005562:	f043 0201 	orr.w	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00c      	beq.n	80055ac <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005596:	f043 0208 	orr.w	r2, r3, #8
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800559e:	2300      	movs	r3, #0
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d04f      	beq.n	8005654 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055c2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d104      	bne.n	80055e0 <HAL_SPI_IRQHandler+0x168>
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d034      	beq.n	800564a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0203 	bic.w	r2, r2, #3
 80055ee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d011      	beq.n	800561c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055fc:	4a17      	ldr	r2, [pc, #92]	@ (800565c <HAL_SPI_IRQHandler+0x1e4>)
 80055fe:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005604:	4618      	mov	r0, r3
 8005606:	f7fd fb1f 	bl	8002c48 <HAL_DMA_Abort_IT>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005614:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005620:	2b00      	cmp	r3, #0
 8005622:	d016      	beq.n	8005652 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005628:	4a0c      	ldr	r2, [pc, #48]	@ (800565c <HAL_SPI_IRQHandler+0x1e4>)
 800562a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005630:	4618      	mov	r0, r3
 8005632:	f7fd fb09 	bl	8002c48 <HAL_DMA_Abort_IT>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005640:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005648:	e003      	b.n	8005652 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f81c 	bl	8005688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005650:	e000      	b.n	8005654 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005652:	bf00      	nop
    return;
 8005654:	bf00      	nop
  }
}
 8005656:	3720      	adds	r7, #32
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	080057a1 	.word	0x080057a1

08005660 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056aa:	f7fc ff9b 	bl	80025e4 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056be:	d03b      	beq.n	8005738 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0220 	bic.w	r2, r2, #32
 80056ce:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0202 	bic.w	r2, r2, #2
 80056de:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	2164      	movs	r1, #100	@ 0x64
 80056e4:	6978      	ldr	r0, [r7, #20]
 80056e6:	f000 fa67 	bl	8005bb8 <SPI_EndRxTxTransaction>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f4:	f043 0220 	orr.w	r2, r3, #32
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2200      	movs	r2, #0
 800571e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005730:	6978      	ldr	r0, [r7, #20]
 8005732:	f7ff ffa9 	bl	8005688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005736:	e002      	b.n	800573e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005738:	6978      	ldr	r0, [r7, #20]
 800573a:	f7fb fd5f 	bl	80011fc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005750:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff ff8e 	bl	8005674 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0203 	bic.w	r2, r2, #3
 800577c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005782:	f043 0210 	orr.w	r2, r3, #16
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7ff ff78 	bl	8005688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005798:	bf00      	nop
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff ff64 	bl	8005688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f103 020c 	add.w	r2, r3, #12
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10f      	bne.n	8005824 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005812:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fa1e 	bl	8005c60 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	7812      	ldrb	r2, [r2, #0]
 8005840:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10f      	bne.n	8005884 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005872:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d102      	bne.n	8005884 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9ee 	bl	8005c60 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589e:	b292      	uxth	r2, r2
 80058a0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10f      	bne.n	80058e4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058d2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9be 	bl	8005c60 <SPI_CloseRxTx_ISR>
    }
  }
}
 80058e4:	bf00      	nop
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f8:	881a      	ldrh	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	1c9a      	adds	r2, r3, #2
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10f      	bne.n	8005942 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005930:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f98f 	bl	8005c60 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005942:	bf00      	nop
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f103 020c 	add.w	r2, r3, #12
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f9de 	bl	8005d48 <SPI_CloseRx_ISR>
  }
}
 800598c:	bf00      	nop
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	b292      	uxth	r2, r2
 80059a8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ae:	1c9a      	adds	r2, r3, #2
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f9bb 	bl	8005d48 <SPI_CloseRx_ISR>
  }
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059ec:	f7fc fdfa 	bl	80025e4 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	4413      	add	r3, r2
 80059fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059fc:	f7fc fdf2 	bl	80025e4 <HAL_GetTick>
 8005a00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a02:	4b39      	ldr	r3, [pc, #228]	@ (8005ae8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	015b      	lsls	r3, r3, #5
 8005a08:	0d1b      	lsrs	r3, r3, #20
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
 8005a10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a12:	e054      	b.n	8005abe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1a:	d050      	beq.n	8005abe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a1c:	f7fc fde2 	bl	80025e4 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d902      	bls.n	8005a32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d13d      	bne.n	8005aae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a4a:	d111      	bne.n	8005a70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a54:	d004      	beq.n	8005a60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5e:	d107      	bne.n	8005a70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a78:	d10f      	bne.n	8005a9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e017      	b.n	8005ade <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	bf0c      	ite	eq
 8005ace:	2301      	moveq	r3, #1
 8005ad0:	2300      	movne	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d19b      	bne.n	8005a14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000004 	.word	0x20000004

08005aec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b00:	d111      	bne.n	8005b26 <SPI_EndRxTransaction+0x3a>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b0a:	d004      	beq.n	8005b16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b14:	d107      	bne.n	8005b26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b2e:	d12a      	bne.n	8005b86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b38:	d012      	beq.n	8005b60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2200      	movs	r2, #0
 8005b42:	2180      	movs	r1, #128	@ 0x80
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff ff49 	bl	80059dc <SPI_WaitFlagStateUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d02d      	beq.n	8005bac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b54:	f043 0220 	orr.w	r2, r3, #32
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e026      	b.n	8005bae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2200      	movs	r2, #0
 8005b68:	2101      	movs	r1, #1
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff ff36 	bl	80059dc <SPI_WaitFlagStateUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01a      	beq.n	8005bac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e013      	b.n	8005bae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2101      	movs	r1, #1
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7ff ff23 	bl	80059dc <SPI_WaitFlagStateUntilTimeout>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d007      	beq.n	8005bac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e000      	b.n	8005bae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	2102      	movs	r1, #2
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff ff04 	bl	80059dc <SPI_WaitFlagStateUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d007      	beq.n	8005bea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e032      	b.n	8005c50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005bea:	4b1b      	ldr	r3, [pc, #108]	@ (8005c58 <SPI_EndRxTxTransaction+0xa0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1b      	ldr	r2, [pc, #108]	@ (8005c5c <SPI_EndRxTxTransaction+0xa4>)
 8005bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf4:	0d5b      	lsrs	r3, r3, #21
 8005bf6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005bfa:	fb02 f303 	mul.w	r3, r2, r3
 8005bfe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c08:	d112      	bne.n	8005c30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2180      	movs	r1, #128	@ 0x80
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff fee1 	bl	80059dc <SPI_WaitFlagStateUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d016      	beq.n	8005c4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c24:	f043 0220 	orr.w	r2, r3, #32
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e00f      	b.n	8005c50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c46:	2b80      	cmp	r3, #128	@ 0x80
 8005c48:	d0f2      	beq.n	8005c30 <SPI_EndRxTxTransaction+0x78>
 8005c4a:	e000      	b.n	8005c4e <SPI_EndRxTxTransaction+0x96>
        break;
 8005c4c:	bf00      	nop
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000004 	.word	0x20000004
 8005c5c:	165e9f81 	.word	0x165e9f81

08005c60 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005c68:	4b35      	ldr	r3, [pc, #212]	@ (8005d40 <SPI_CloseRxTx_ISR+0xe0>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a35      	ldr	r2, [pc, #212]	@ (8005d44 <SPI_CloseRxTx_ISR+0xe4>)
 8005c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c72:	0a5b      	lsrs	r3, r3, #9
 8005c74:	2264      	movs	r2, #100	@ 0x64
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c7c:	f7fc fcb2 	bl	80025e4 <HAL_GetTick>
 8005c80:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0220 	bic.w	r2, r2, #32
 8005c90:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9c:	f043 0220 	orr.w	r2, r3, #32
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ca4:	e009      	b.n	8005cba <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0eb      	beq.n	8005c92 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	2164      	movs	r1, #100	@ 0x64
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff ff7a 	bl	8005bb8 <SPI_EndRxTxTransaction>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d115      	bne.n	8005d28 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d107      	bne.n	8005d18 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fb fa89 	bl	8001228 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005d16:	e00e      	b.n	8005d36 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff fc9d 	bl	8005660 <HAL_SPI_TxRxCpltCallback>
}
 8005d26:	e006      	b.n	8005d36 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff fca9 	bl	8005688 <HAL_SPI_ErrorCallback>
}
 8005d36:	bf00      	nop
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000004 	.word	0x20000004
 8005d44:	057619f1 	.word	0x057619f1

08005d48 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d5e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005d60:	f7fc fc40 	bl	80025e4 <HAL_GetTick>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461a      	mov	r2, r3
 8005d68:	2164      	movs	r1, #100	@ 0x64
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff febe 	bl	8005aec <SPI_EndRxTransaction>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7a:	f043 0220 	orr.w	r2, r3, #32
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10a      	bne.n	8005da0 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d103      	bne.n	8005db8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7fb fa39 	bl	8001228 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005db6:	e002      	b.n	8005dbe <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff fc65 	bl	8005688 <HAL_SPI_ErrorCallback>
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e041      	b.n	8005e5c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d106      	bne.n	8005df2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7fc fa31 	bl	8002254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f000 fae5 	bl	80063d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d001      	beq.n	8005e7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e046      	b.n	8005f0a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a23      	ldr	r2, [pc, #140]	@ (8005f18 <HAL_TIM_Base_Start+0xb4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d022      	beq.n	8005ed4 <HAL_TIM_Base_Start+0x70>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e96:	d01d      	beq.n	8005ed4 <HAL_TIM_Base_Start+0x70>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8005f1c <HAL_TIM_Base_Start+0xb8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d018      	beq.n	8005ed4 <HAL_TIM_Base_Start+0x70>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8005f20 <HAL_TIM_Base_Start+0xbc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d013      	beq.n	8005ed4 <HAL_TIM_Base_Start+0x70>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f24 <HAL_TIM_Base_Start+0xc0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00e      	beq.n	8005ed4 <HAL_TIM_Base_Start+0x70>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1b      	ldr	r2, [pc, #108]	@ (8005f28 <HAL_TIM_Base_Start+0xc4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d009      	beq.n	8005ed4 <HAL_TIM_Base_Start+0x70>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a19      	ldr	r2, [pc, #100]	@ (8005f2c <HAL_TIM_Base_Start+0xc8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d004      	beq.n	8005ed4 <HAL_TIM_Base_Start+0x70>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a18      	ldr	r2, [pc, #96]	@ (8005f30 <HAL_TIM_Base_Start+0xcc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d111      	bne.n	8005ef8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b06      	cmp	r3, #6
 8005ee4:	d010      	beq.n	8005f08 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0201 	orr.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef6:	e007      	b.n	8005f08 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40010400 	.word	0x40010400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40001800 	.word	0x40001800

08005f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d001      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e04e      	b.n	8005fea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a23      	ldr	r2, [pc, #140]	@ (8005ff8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d022      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f76:	d01d      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ffc <HAL_TIM_Base_Start_IT+0xc8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d018      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1e      	ldr	r2, [pc, #120]	@ (8006000 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d013      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1c      	ldr	r2, [pc, #112]	@ (8006004 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00e      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006008 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d009      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a19      	ldr	r2, [pc, #100]	@ (800600c <HAL_TIM_Base_Start_IT+0xd8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d004      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a18      	ldr	r2, [pc, #96]	@ (8006010 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d111      	bne.n	8005fd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b06      	cmp	r3, #6
 8005fc4:	d010      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f042 0201 	orr.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd6:	e007      	b.n	8005fe8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40010000 	.word	0x40010000
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00
 8006008:	40010400 	.word	0x40010400
 800600c:	40014000 	.word	0x40014000
 8006010:	40001800 	.word	0x40001800

08006014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d020      	beq.n	8006078 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d01b      	beq.n	8006078 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f06f 0202 	mvn.w	r2, #2
 8006048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f999 	bl	8006396 <HAL_TIM_IC_CaptureCallback>
 8006064:	e005      	b.n	8006072 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f98b 	bl	8006382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f99c 	bl	80063aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d020      	beq.n	80060c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01b      	beq.n	80060c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0204 	mvn.w	r2, #4
 8006094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2202      	movs	r2, #2
 800609a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f973 	bl	8006396 <HAL_TIM_IC_CaptureCallback>
 80060b0:	e005      	b.n	80060be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f965 	bl	8006382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f976 	bl	80063aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d020      	beq.n	8006110 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01b      	beq.n	8006110 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0208 	mvn.w	r2, #8
 80060e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2204      	movs	r2, #4
 80060e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f94d 	bl	8006396 <HAL_TIM_IC_CaptureCallback>
 80060fc:	e005      	b.n	800610a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f93f 	bl	8006382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f950 	bl	80063aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b00      	cmp	r3, #0
 8006118:	d020      	beq.n	800615c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01b      	beq.n	800615c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0210 	mvn.w	r2, #16
 800612c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2208      	movs	r2, #8
 8006132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f927 	bl	8006396 <HAL_TIM_IC_CaptureCallback>
 8006148:	e005      	b.n	8006156 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f919 	bl	8006382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f92a 	bl	80063aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00c      	beq.n	8006180 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d007      	beq.n	8006180 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0201 	mvn.w	r2, #1
 8006178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fb f8bc 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00c      	beq.n	80061a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006190:	2b00      	cmp	r3, #0
 8006192:	d007      	beq.n	80061a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800619c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fae4 	bl	800676c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f8fb 	bl	80063be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00c      	beq.n	80061ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f003 0320 	and.w	r3, r3, #32
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0220 	mvn.w	r2, #32
 80061e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fab6 	bl	8006758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_TIM_ConfigClockSource+0x1c>
 800620c:	2302      	movs	r3, #2
 800620e:	e0b4      	b.n	800637a <HAL_TIM_ConfigClockSource+0x186>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800622e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006248:	d03e      	beq.n	80062c8 <HAL_TIM_ConfigClockSource+0xd4>
 800624a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800624e:	f200 8087 	bhi.w	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006256:	f000 8086 	beq.w	8006366 <HAL_TIM_ConfigClockSource+0x172>
 800625a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625e:	d87f      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006260:	2b70      	cmp	r3, #112	@ 0x70
 8006262:	d01a      	beq.n	800629a <HAL_TIM_ConfigClockSource+0xa6>
 8006264:	2b70      	cmp	r3, #112	@ 0x70
 8006266:	d87b      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006268:	2b60      	cmp	r3, #96	@ 0x60
 800626a:	d050      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x11a>
 800626c:	2b60      	cmp	r3, #96	@ 0x60
 800626e:	d877      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006270:	2b50      	cmp	r3, #80	@ 0x50
 8006272:	d03c      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0xfa>
 8006274:	2b50      	cmp	r3, #80	@ 0x50
 8006276:	d873      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006278:	2b40      	cmp	r3, #64	@ 0x40
 800627a:	d058      	beq.n	800632e <HAL_TIM_ConfigClockSource+0x13a>
 800627c:	2b40      	cmp	r3, #64	@ 0x40
 800627e:	d86f      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006280:	2b30      	cmp	r3, #48	@ 0x30
 8006282:	d064      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006284:	2b30      	cmp	r3, #48	@ 0x30
 8006286:	d86b      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006288:	2b20      	cmp	r3, #32
 800628a:	d060      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 800628c:	2b20      	cmp	r3, #32
 800628e:	d867      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d05c      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006294:	2b10      	cmp	r3, #16
 8006296:	d05a      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006298:	e062      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062aa:	f000 f9b9 	bl	8006620 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	609a      	str	r2, [r3, #8]
      break;
 80062c6:	e04f      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062d8:	f000 f9a2 	bl	8006620 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062ea:	609a      	str	r2, [r3, #8]
      break;
 80062ec:	e03c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	461a      	mov	r2, r3
 80062fc:	f000 f916 	bl	800652c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2150      	movs	r1, #80	@ 0x50
 8006306:	4618      	mov	r0, r3
 8006308:	f000 f96f 	bl	80065ea <TIM_ITRx_SetConfig>
      break;
 800630c:	e02c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800631a:	461a      	mov	r2, r3
 800631c:	f000 f935 	bl	800658a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2160      	movs	r1, #96	@ 0x60
 8006326:	4618      	mov	r0, r3
 8006328:	f000 f95f 	bl	80065ea <TIM_ITRx_SetConfig>
      break;
 800632c:	e01c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800633a:	461a      	mov	r2, r3
 800633c:	f000 f8f6 	bl	800652c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2140      	movs	r1, #64	@ 0x40
 8006346:	4618      	mov	r0, r3
 8006348:	f000 f94f 	bl	80065ea <TIM_ITRx_SetConfig>
      break;
 800634c:	e00c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f000 f946 	bl	80065ea <TIM_ITRx_SetConfig>
      break;
 800635e:	e003      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
      break;
 8006364:	e000      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a46      	ldr	r2, [pc, #280]	@ (8006500 <TIM_Base_SetConfig+0x12c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d013      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f2:	d00f      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a43      	ldr	r2, [pc, #268]	@ (8006504 <TIM_Base_SetConfig+0x130>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00b      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a42      	ldr	r2, [pc, #264]	@ (8006508 <TIM_Base_SetConfig+0x134>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d007      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a41      	ldr	r2, [pc, #260]	@ (800650c <TIM_Base_SetConfig+0x138>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a40      	ldr	r2, [pc, #256]	@ (8006510 <TIM_Base_SetConfig+0x13c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800641a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a35      	ldr	r2, [pc, #212]	@ (8006500 <TIM_Base_SetConfig+0x12c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d02b      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006434:	d027      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a32      	ldr	r2, [pc, #200]	@ (8006504 <TIM_Base_SetConfig+0x130>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d023      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a31      	ldr	r2, [pc, #196]	@ (8006508 <TIM_Base_SetConfig+0x134>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01f      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a30      	ldr	r2, [pc, #192]	@ (800650c <TIM_Base_SetConfig+0x138>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01b      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a2f      	ldr	r2, [pc, #188]	@ (8006510 <TIM_Base_SetConfig+0x13c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d017      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a2e      	ldr	r2, [pc, #184]	@ (8006514 <TIM_Base_SetConfig+0x140>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a2d      	ldr	r2, [pc, #180]	@ (8006518 <TIM_Base_SetConfig+0x144>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00f      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a2c      	ldr	r2, [pc, #176]	@ (800651c <TIM_Base_SetConfig+0x148>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00b      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a2b      	ldr	r2, [pc, #172]	@ (8006520 <TIM_Base_SetConfig+0x14c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d007      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a2a      	ldr	r2, [pc, #168]	@ (8006524 <TIM_Base_SetConfig+0x150>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a29      	ldr	r2, [pc, #164]	@ (8006528 <TIM_Base_SetConfig+0x154>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d108      	bne.n	8006498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800648c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a10      	ldr	r2, [pc, #64]	@ (8006500 <TIM_Base_SetConfig+0x12c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_Base_SetConfig+0xf8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a12      	ldr	r2, [pc, #72]	@ (8006510 <TIM_Base_SetConfig+0x13c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d103      	bne.n	80064d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691a      	ldr	r2, [r3, #16]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d105      	bne.n	80064f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f023 0201 	bic.w	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	611a      	str	r2, [r3, #16]
  }
}
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40010000 	.word	0x40010000
 8006504:	40000400 	.word	0x40000400
 8006508:	40000800 	.word	0x40000800
 800650c:	40000c00 	.word	0x40000c00
 8006510:	40010400 	.word	0x40010400
 8006514:	40014000 	.word	0x40014000
 8006518:	40014400 	.word	0x40014400
 800651c:	40014800 	.word	0x40014800
 8006520:	40001800 	.word	0x40001800
 8006524:	40001c00 	.word	0x40001c00
 8006528:	40002000 	.word	0x40002000

0800652c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f023 0201 	bic.w	r2, r3, #1
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f023 030a 	bic.w	r3, r3, #10
 8006568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	621a      	str	r2, [r3, #32]
}
 800657e:	bf00      	nop
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800658a:	b480      	push	{r7}
 800658c:	b087      	sub	sp, #28
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	f023 0210 	bic.w	r2, r3, #16
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	031b      	lsls	r3, r3, #12
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	bf00      	nop
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	f043 0307 	orr.w	r3, r3, #7
 800660c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	609a      	str	r2, [r3, #8]
}
 8006614:	bf00      	nop
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800663a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	021a      	lsls	r2, r3, #8
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	431a      	orrs	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4313      	orrs	r3, r2
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	609a      	str	r2, [r3, #8]
}
 8006654:	bf00      	nop
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006674:	2302      	movs	r3, #2
 8006676:	e05a      	b.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a21      	ldr	r2, [pc, #132]	@ (800673c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d022      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c4:	d01d      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d018      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1a      	ldr	r2, [pc, #104]	@ (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00e      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a18      	ldr	r2, [pc, #96]	@ (800674c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d009      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a17      	ldr	r2, [pc, #92]	@ (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d004      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a15      	ldr	r2, [pc, #84]	@ (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d10c      	bne.n	800671c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	4313      	orrs	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40010000 	.word	0x40010000
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800
 8006748:	40000c00 	.word	0x40000c00
 800674c:	40010400 	.word	0x40010400
 8006750:	40014000 	.word	0x40014000
 8006754:	40001800 	.word	0x40001800

08006758 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e042      	b.n	8006818 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fb fd90 	bl	80022cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2224      	movs	r2, #36	@ 0x24
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fc85 	bl	80070d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	695a      	ldr	r2, [r3, #20]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b0ba      	sub	sp, #232	@ 0xe8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006846:	2300      	movs	r3, #0
 8006848:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800684c:	2300      	movs	r3, #0
 800684e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800685e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10f      	bne.n	8006886 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <HAL_UART_IRQHandler+0x66>
 8006872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fb69 	bl	8006f56 <UART_Receive_IT>
      return;
 8006884:	e25b      	b.n	8006d3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 80de 	beq.w	8006a4c <HAL_UART_IRQHandler+0x22c>
 8006890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800689c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80d1 	beq.w	8006a4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <HAL_UART_IRQHandler+0xae>
 80068b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c6:	f043 0201 	orr.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00b      	beq.n	80068f2 <HAL_UART_IRQHandler+0xd2>
 80068da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ea:	f043 0202 	orr.w	r2, r3, #2
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <HAL_UART_IRQHandler+0xf6>
 80068fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d005      	beq.n	8006916 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690e:	f043 0204 	orr.w	r2, r3, #4
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d011      	beq.n	8006946 <HAL_UART_IRQHandler+0x126>
 8006922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800692e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d005      	beq.n	8006946 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693e:	f043 0208 	orr.w	r2, r3, #8
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 81f2 	beq.w	8006d34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d008      	beq.n	800696e <HAL_UART_IRQHandler+0x14e>
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 faf4 	bl	8006f56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006978:	2b40      	cmp	r3, #64	@ 0x40
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <HAL_UART_IRQHandler+0x17a>
 8006992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d04f      	beq.n	8006a3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f9fc 	bl	8006d98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069aa:	2b40      	cmp	r3, #64	@ 0x40
 80069ac:	d141      	bne.n	8006a32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3314      	adds	r3, #20
 80069b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3314      	adds	r3, #20
 80069d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1d9      	bne.n	80069ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d013      	beq.n	8006a2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a06:	4a7e      	ldr	r2, [pc, #504]	@ (8006c00 <HAL_UART_IRQHandler+0x3e0>)
 8006a08:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fc f91a 	bl	8002c48 <HAL_DMA_Abort_IT>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d016      	beq.n	8006a48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a28:	e00e      	b.n	8006a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f99e 	bl	8006d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a30:	e00a      	b.n	8006a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f99a 	bl	8006d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a38:	e006      	b.n	8006a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f996 	bl	8006d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a46:	e175      	b.n	8006d34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	bf00      	nop
    return;
 8006a4a:	e173      	b.n	8006d34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	f040 814f 	bne.w	8006cf4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a5a:	f003 0310 	and.w	r3, r3, #16
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8148 	beq.w	8006cf4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 8141 	beq.w	8006cf4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	60bb      	str	r3, [r7, #8]
 8006a86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a92:	2b40      	cmp	r3, #64	@ 0x40
 8006a94:	f040 80b6 	bne.w	8006c04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006aa4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8145 	beq.w	8006d38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	f080 813e 	bcs.w	8006d38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ac2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ace:	f000 8088 	beq.w	8006be2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006afe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1d9      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3314      	adds	r3, #20
 8006b24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b30:	f023 0301 	bic.w	r3, r3, #1
 8006b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3314      	adds	r3, #20
 8006b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e1      	bne.n	8006b1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3314      	adds	r3, #20
 8006b60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3314      	adds	r3, #20
 8006b7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e3      	bne.n	8006b5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	330c      	adds	r3, #12
 8006ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bb2:	f023 0310 	bic.w	r3, r3, #16
 8006bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006bc4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006bc6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e3      	bne.n	8006ba0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fb ffc3 	bl	8002b68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f8c1 	bl	8006d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bfe:	e09b      	b.n	8006d38 <HAL_UART_IRQHandler+0x518>
 8006c00:	08006e5f 	.word	0x08006e5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 808e 	beq.w	8006d3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 8089 	beq.w	8006d3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	330c      	adds	r3, #12
 8006c30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e3      	bne.n	8006c2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3314      	adds	r3, #20
 8006c68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	623b      	str	r3, [r7, #32]
   return(result);
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	f023 0301 	bic.w	r3, r3, #1
 8006c78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3314      	adds	r3, #20
 8006c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c86:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e3      	bne.n	8006c62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0310 	bic.w	r3, r3, #16
 8006cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	330c      	adds	r3, #12
 8006cc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ccc:	61fa      	str	r2, [r7, #28]
 8006cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	69b9      	ldr	r1, [r7, #24]
 8006cd2:	69fa      	ldr	r2, [r7, #28]
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e3      	bne.n	8006ca8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ce6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f847 	bl	8006d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cf2:	e023      	b.n	8006d3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d009      	beq.n	8006d14 <HAL_UART_IRQHandler+0x4f4>
 8006d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f8ba 	bl	8006e86 <UART_Transmit_IT>
    return;
 8006d12:	e014      	b.n	8006d3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00e      	beq.n	8006d3e <HAL_UART_IRQHandler+0x51e>
 8006d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d008      	beq.n	8006d3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f8fa 	bl	8006f26 <UART_EndTransmit_IT>
    return;
 8006d32:	e004      	b.n	8006d3e <HAL_UART_IRQHandler+0x51e>
    return;
 8006d34:	bf00      	nop
 8006d36:	e002      	b.n	8006d3e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d3c:	bf00      	nop
  }
}
 8006d3e:	37e8      	adds	r7, #232	@ 0xe8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b095      	sub	sp, #84	@ 0x54
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	330c      	adds	r3, #12
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8006dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e5      	bne.n	8006da0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3314      	adds	r3, #20
 8006dda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f023 0301 	bic.w	r3, r3, #1
 8006dea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3314      	adds	r3, #20
 8006df2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006df4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006df6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e5      	bne.n	8006dd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d119      	bne.n	8006e44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f023 0310 	bic.w	r3, r3, #16
 8006e26:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e30:	61ba      	str	r2, [r7, #24]
 8006e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6979      	ldr	r1, [r7, #20]
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e5      	bne.n	8006e10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e52:	bf00      	nop
 8006e54:	3754      	adds	r7, #84	@ 0x54
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7ff ff77 	bl	8006d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b21      	cmp	r3, #33	@ 0x21
 8006e98:	d13e      	bne.n	8006f18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea2:	d114      	bne.n	8006ece <UART_Transmit_IT+0x48>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d110      	bne.n	8006ece <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ec0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	1c9a      	adds	r2, r3, #2
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	621a      	str	r2, [r3, #32]
 8006ecc:	e008      	b.n	8006ee0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	1c59      	adds	r1, r3, #1
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6211      	str	r1, [r2, #32]
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	4619      	mov	r1, r3
 8006eee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10f      	bne.n	8006f14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	e000      	b.n	8006f1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f18:	2302      	movs	r3, #2
  }
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff fefc 	bl	8006d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b08c      	sub	sp, #48	@ 0x30
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b22      	cmp	r3, #34	@ 0x22
 8006f68:	f040 80ae 	bne.w	80070c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f74:	d117      	bne.n	8006fa6 <UART_Receive_IT+0x50>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d113      	bne.n	8006fa6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f86:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9e:	1c9a      	adds	r2, r3, #2
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006fa4:	e026      	b.n	8006ff4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb8:	d007      	beq.n	8006fca <UART_Receive_IT+0x74>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <UART_Receive_IT+0x82>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d106      	bne.n	8006fd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e008      	b.n	8006fea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	4619      	mov	r1, r3
 8007002:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007004:	2b00      	cmp	r3, #0
 8007006:	d15d      	bne.n	80070c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0220 	bic.w	r2, r2, #32
 8007016:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007026:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695a      	ldr	r2, [r3, #20]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0201 	bic.w	r2, r2, #1
 8007036:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704a:	2b01      	cmp	r3, #1
 800704c:	d135      	bne.n	80070ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	613b      	str	r3, [r7, #16]
   return(result);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f023 0310 	bic.w	r3, r3, #16
 800706a:	627b      	str	r3, [r7, #36]	@ 0x24
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007074:	623a      	str	r2, [r7, #32]
 8007076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	69f9      	ldr	r1, [r7, #28]
 800707a:	6a3a      	ldr	r2, [r7, #32]
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	61bb      	str	r3, [r7, #24]
   return(result);
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0310 	and.w	r3, r3, #16
 8007092:	2b10      	cmp	r3, #16
 8007094:	d10a      	bne.n	80070ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fe64 	bl	8006d80 <HAL_UARTEx_RxEventCallback>
 80070b8:	e002      	b.n	80070c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff fe4c 	bl	8006d58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	e002      	b.n	80070ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	e000      	b.n	80070ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80070c8:	2302      	movs	r3, #2
  }
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3730      	adds	r7, #48	@ 0x30
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070d8:	b0c0      	sub	sp, #256	@ 0x100
 80070da:	af00      	add	r7, sp, #0
 80070dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f0:	68d9      	ldr	r1, [r3, #12]
 80070f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	ea40 0301 	orr.w	r3, r0, r1
 80070fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	431a      	orrs	r2, r3
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	431a      	orrs	r2, r3
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800712c:	f021 010c 	bic.w	r1, r1, #12
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800713a:	430b      	orrs	r3, r1
 800713c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800713e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714e:	6999      	ldr	r1, [r3, #24]
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	ea40 0301 	orr.w	r3, r0, r1
 800715a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	4b8f      	ldr	r3, [pc, #572]	@ (80073a0 <UART_SetConfig+0x2cc>)
 8007164:	429a      	cmp	r2, r3
 8007166:	d005      	beq.n	8007174 <UART_SetConfig+0xa0>
 8007168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b8d      	ldr	r3, [pc, #564]	@ (80073a4 <UART_SetConfig+0x2d0>)
 8007170:	429a      	cmp	r2, r3
 8007172:	d104      	bne.n	800717e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007174:	f7fc fe2e 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 8007178:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800717c:	e003      	b.n	8007186 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800717e:	f7fc fe15 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8007182:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007190:	f040 810c 	bne.w	80073ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007198:	2200      	movs	r2, #0
 800719a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800719e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80071a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80071a6:	4622      	mov	r2, r4
 80071a8:	462b      	mov	r3, r5
 80071aa:	1891      	adds	r1, r2, r2
 80071ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80071ae:	415b      	adcs	r3, r3
 80071b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80071b6:	4621      	mov	r1, r4
 80071b8:	eb12 0801 	adds.w	r8, r2, r1
 80071bc:	4629      	mov	r1, r5
 80071be:	eb43 0901 	adc.w	r9, r3, r1
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071d6:	4690      	mov	r8, r2
 80071d8:	4699      	mov	r9, r3
 80071da:	4623      	mov	r3, r4
 80071dc:	eb18 0303 	adds.w	r3, r8, r3
 80071e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071e4:	462b      	mov	r3, r5
 80071e6:	eb49 0303 	adc.w	r3, r9, r3
 80071ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007202:	460b      	mov	r3, r1
 8007204:	18db      	adds	r3, r3, r3
 8007206:	653b      	str	r3, [r7, #80]	@ 0x50
 8007208:	4613      	mov	r3, r2
 800720a:	eb42 0303 	adc.w	r3, r2, r3
 800720e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007210:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007214:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007218:	f7f8 ffd6 	bl	80001c8 <__aeabi_uldivmod>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4b61      	ldr	r3, [pc, #388]	@ (80073a8 <UART_SetConfig+0x2d4>)
 8007222:	fba3 2302 	umull	r2, r3, r3, r2
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	011c      	lsls	r4, r3, #4
 800722a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800722e:	2200      	movs	r2, #0
 8007230:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007234:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007238:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800723c:	4642      	mov	r2, r8
 800723e:	464b      	mov	r3, r9
 8007240:	1891      	adds	r1, r2, r2
 8007242:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007244:	415b      	adcs	r3, r3
 8007246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007248:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800724c:	4641      	mov	r1, r8
 800724e:	eb12 0a01 	adds.w	sl, r2, r1
 8007252:	4649      	mov	r1, r9
 8007254:	eb43 0b01 	adc.w	fp, r3, r1
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	f04f 0300 	mov.w	r3, #0
 8007260:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007264:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800726c:	4692      	mov	sl, r2
 800726e:	469b      	mov	fp, r3
 8007270:	4643      	mov	r3, r8
 8007272:	eb1a 0303 	adds.w	r3, sl, r3
 8007276:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800727a:	464b      	mov	r3, r9
 800727c:	eb4b 0303 	adc.w	r3, fp, r3
 8007280:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007290:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007294:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007298:	460b      	mov	r3, r1
 800729a:	18db      	adds	r3, r3, r3
 800729c:	643b      	str	r3, [r7, #64]	@ 0x40
 800729e:	4613      	mov	r3, r2
 80072a0:	eb42 0303 	adc.w	r3, r2, r3
 80072a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80072aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80072ae:	f7f8 ff8b 	bl	80001c8 <__aeabi_uldivmod>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	4b3b      	ldr	r3, [pc, #236]	@ (80073a8 <UART_SetConfig+0x2d4>)
 80072ba:	fba3 2301 	umull	r2, r3, r3, r1
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	2264      	movs	r2, #100	@ 0x64
 80072c2:	fb02 f303 	mul.w	r3, r2, r3
 80072c6:	1acb      	subs	r3, r1, r3
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80072ce:	4b36      	ldr	r3, [pc, #216]	@ (80073a8 <UART_SetConfig+0x2d4>)
 80072d0:	fba3 2302 	umull	r2, r3, r3, r2
 80072d4:	095b      	lsrs	r3, r3, #5
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80072dc:	441c      	add	r4, r3
 80072de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072f0:	4642      	mov	r2, r8
 80072f2:	464b      	mov	r3, r9
 80072f4:	1891      	adds	r1, r2, r2
 80072f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072f8:	415b      	adcs	r3, r3
 80072fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007300:	4641      	mov	r1, r8
 8007302:	1851      	adds	r1, r2, r1
 8007304:	6339      	str	r1, [r7, #48]	@ 0x30
 8007306:	4649      	mov	r1, r9
 8007308:	414b      	adcs	r3, r1
 800730a:	637b      	str	r3, [r7, #52]	@ 0x34
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007318:	4659      	mov	r1, fp
 800731a:	00cb      	lsls	r3, r1, #3
 800731c:	4651      	mov	r1, sl
 800731e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007322:	4651      	mov	r1, sl
 8007324:	00ca      	lsls	r2, r1, #3
 8007326:	4610      	mov	r0, r2
 8007328:	4619      	mov	r1, r3
 800732a:	4603      	mov	r3, r0
 800732c:	4642      	mov	r2, r8
 800732e:	189b      	adds	r3, r3, r2
 8007330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007334:	464b      	mov	r3, r9
 8007336:	460a      	mov	r2, r1
 8007338:	eb42 0303 	adc.w	r3, r2, r3
 800733c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800734c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007354:	460b      	mov	r3, r1
 8007356:	18db      	adds	r3, r3, r3
 8007358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800735a:	4613      	mov	r3, r2
 800735c:	eb42 0303 	adc.w	r3, r2, r3
 8007360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007366:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800736a:	f7f8 ff2d 	bl	80001c8 <__aeabi_uldivmod>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4b0d      	ldr	r3, [pc, #52]	@ (80073a8 <UART_SetConfig+0x2d4>)
 8007374:	fba3 1302 	umull	r1, r3, r3, r2
 8007378:	095b      	lsrs	r3, r3, #5
 800737a:	2164      	movs	r1, #100	@ 0x64
 800737c:	fb01 f303 	mul.w	r3, r1, r3
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	3332      	adds	r3, #50	@ 0x32
 8007386:	4a08      	ldr	r2, [pc, #32]	@ (80073a8 <UART_SetConfig+0x2d4>)
 8007388:	fba2 2303 	umull	r2, r3, r2, r3
 800738c:	095b      	lsrs	r3, r3, #5
 800738e:	f003 0207 	and.w	r2, r3, #7
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4422      	add	r2, r4
 800739a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800739c:	e106      	b.n	80075ac <UART_SetConfig+0x4d8>
 800739e:	bf00      	nop
 80073a0:	40011000 	.word	0x40011000
 80073a4:	40011400 	.word	0x40011400
 80073a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073b0:	2200      	movs	r2, #0
 80073b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80073ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80073be:	4642      	mov	r2, r8
 80073c0:	464b      	mov	r3, r9
 80073c2:	1891      	adds	r1, r2, r2
 80073c4:	6239      	str	r1, [r7, #32]
 80073c6:	415b      	adcs	r3, r3
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073ce:	4641      	mov	r1, r8
 80073d0:	1854      	adds	r4, r2, r1
 80073d2:	4649      	mov	r1, r9
 80073d4:	eb43 0501 	adc.w	r5, r3, r1
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	00eb      	lsls	r3, r5, #3
 80073e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073e6:	00e2      	lsls	r2, r4, #3
 80073e8:	4614      	mov	r4, r2
 80073ea:	461d      	mov	r5, r3
 80073ec:	4643      	mov	r3, r8
 80073ee:	18e3      	adds	r3, r4, r3
 80073f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073f4:	464b      	mov	r3, r9
 80073f6:	eb45 0303 	adc.w	r3, r5, r3
 80073fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800740a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800741a:	4629      	mov	r1, r5
 800741c:	008b      	lsls	r3, r1, #2
 800741e:	4621      	mov	r1, r4
 8007420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007424:	4621      	mov	r1, r4
 8007426:	008a      	lsls	r2, r1, #2
 8007428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800742c:	f7f8 fecc 	bl	80001c8 <__aeabi_uldivmod>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4b60      	ldr	r3, [pc, #384]	@ (80075b8 <UART_SetConfig+0x4e4>)
 8007436:	fba3 2302 	umull	r2, r3, r3, r2
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	011c      	lsls	r4, r3, #4
 800743e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007442:	2200      	movs	r2, #0
 8007444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007448:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800744c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007450:	4642      	mov	r2, r8
 8007452:	464b      	mov	r3, r9
 8007454:	1891      	adds	r1, r2, r2
 8007456:	61b9      	str	r1, [r7, #24]
 8007458:	415b      	adcs	r3, r3
 800745a:	61fb      	str	r3, [r7, #28]
 800745c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007460:	4641      	mov	r1, r8
 8007462:	1851      	adds	r1, r2, r1
 8007464:	6139      	str	r1, [r7, #16]
 8007466:	4649      	mov	r1, r9
 8007468:	414b      	adcs	r3, r1
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007478:	4659      	mov	r1, fp
 800747a:	00cb      	lsls	r3, r1, #3
 800747c:	4651      	mov	r1, sl
 800747e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007482:	4651      	mov	r1, sl
 8007484:	00ca      	lsls	r2, r1, #3
 8007486:	4610      	mov	r0, r2
 8007488:	4619      	mov	r1, r3
 800748a:	4603      	mov	r3, r0
 800748c:	4642      	mov	r2, r8
 800748e:	189b      	adds	r3, r3, r2
 8007490:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007494:	464b      	mov	r3, r9
 8007496:	460a      	mov	r2, r1
 8007498:	eb42 0303 	adc.w	r3, r2, r3
 800749c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80074ac:	f04f 0200 	mov.w	r2, #0
 80074b0:	f04f 0300 	mov.w	r3, #0
 80074b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80074b8:	4649      	mov	r1, r9
 80074ba:	008b      	lsls	r3, r1, #2
 80074bc:	4641      	mov	r1, r8
 80074be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074c2:	4641      	mov	r1, r8
 80074c4:	008a      	lsls	r2, r1, #2
 80074c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80074ca:	f7f8 fe7d 	bl	80001c8 <__aeabi_uldivmod>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	4b38      	ldr	r3, [pc, #224]	@ (80075b8 <UART_SetConfig+0x4e4>)
 80074d6:	fba3 2301 	umull	r2, r3, r3, r1
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	2264      	movs	r2, #100	@ 0x64
 80074de:	fb02 f303 	mul.w	r3, r2, r3
 80074e2:	1acb      	subs	r3, r1, r3
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	3332      	adds	r3, #50	@ 0x32
 80074e8:	4a33      	ldr	r2, [pc, #204]	@ (80075b8 <UART_SetConfig+0x4e4>)
 80074ea:	fba2 2303 	umull	r2, r3, r2, r3
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074f4:	441c      	add	r4, r3
 80074f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074fa:	2200      	movs	r2, #0
 80074fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80074fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8007500:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007504:	4642      	mov	r2, r8
 8007506:	464b      	mov	r3, r9
 8007508:	1891      	adds	r1, r2, r2
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	415b      	adcs	r3, r3
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007514:	4641      	mov	r1, r8
 8007516:	1851      	adds	r1, r2, r1
 8007518:	6039      	str	r1, [r7, #0]
 800751a:	4649      	mov	r1, r9
 800751c:	414b      	adcs	r3, r1
 800751e:	607b      	str	r3, [r7, #4]
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800752c:	4659      	mov	r1, fp
 800752e:	00cb      	lsls	r3, r1, #3
 8007530:	4651      	mov	r1, sl
 8007532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007536:	4651      	mov	r1, sl
 8007538:	00ca      	lsls	r2, r1, #3
 800753a:	4610      	mov	r0, r2
 800753c:	4619      	mov	r1, r3
 800753e:	4603      	mov	r3, r0
 8007540:	4642      	mov	r2, r8
 8007542:	189b      	adds	r3, r3, r2
 8007544:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007546:	464b      	mov	r3, r9
 8007548:	460a      	mov	r2, r1
 800754a:	eb42 0303 	adc.w	r3, r2, r3
 800754e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	663b      	str	r3, [r7, #96]	@ 0x60
 800755a:	667a      	str	r2, [r7, #100]	@ 0x64
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007568:	4649      	mov	r1, r9
 800756a:	008b      	lsls	r3, r1, #2
 800756c:	4641      	mov	r1, r8
 800756e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007572:	4641      	mov	r1, r8
 8007574:	008a      	lsls	r2, r1, #2
 8007576:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800757a:	f7f8 fe25 	bl	80001c8 <__aeabi_uldivmod>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4b0d      	ldr	r3, [pc, #52]	@ (80075b8 <UART_SetConfig+0x4e4>)
 8007584:	fba3 1302 	umull	r1, r3, r3, r2
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	2164      	movs	r1, #100	@ 0x64
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	3332      	adds	r3, #50	@ 0x32
 8007596:	4a08      	ldr	r2, [pc, #32]	@ (80075b8 <UART_SetConfig+0x4e4>)
 8007598:	fba2 2303 	umull	r2, r3, r2, r3
 800759c:	095b      	lsrs	r3, r3, #5
 800759e:	f003 020f 	and.w	r2, r3, #15
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4422      	add	r2, r4
 80075aa:	609a      	str	r2, [r3, #8]
}
 80075ac:	bf00      	nop
 80075ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80075b2:	46bd      	mov	sp, r7
 80075b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075b8:	51eb851f 	.word	0x51eb851f

080075bc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80075bc:	b084      	sub	sp, #16
 80075be:	b480      	push	{r7}
 80075c0:	b085      	sub	sp, #20
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	f107 001c 	add.w	r0, r7, #28
 80075ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80075d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80075d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80075d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80075da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80075dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80075de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80075e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80075e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80075e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80075e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80075f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	b004      	add	sp, #16
 8007610:	4770      	bx	lr

08007612 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2203      	movs	r2, #3
 800765a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0303 	and.w	r3, r3, #3
}
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007686:	b480      	push	{r7}
 8007688:	b085      	sub	sp, #20
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80076a4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80076aa:	431a      	orrs	r2, r3
                       Command->CPSM);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80076b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80076c0:	f023 030f 	bic.w	r3, r3, #15
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	b2db      	uxtb	r3, r3
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3314      	adds	r3, #20
 8007702:	461a      	mov	r2, r3
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	4413      	add	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
}  
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800771a:	b480      	push	{r7}
 800771c:	b085      	sub	sp, #20
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007740:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007746:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800774c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007758:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007764:	2300      	movs	r3, #0

}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b088      	sub	sp, #32
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007780:	2310      	movs	r3, #16
 8007782:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007784:	2340      	movs	r3, #64	@ 0x40
 8007786:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800778c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007790:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007792:	f107 0308 	add.w	r3, r7, #8
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff ff74 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800779e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077a2:	2110      	movs	r1, #16
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f9d7 	bl	8007b58 <SDMMC_GetCmdResp1>
 80077aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077ac:	69fb      	ldr	r3, [r7, #28]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3720      	adds	r7, #32
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b088      	sub	sp, #32
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80077c4:	2311      	movs	r3, #17
 80077c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077c8:	2340      	movs	r3, #64	@ 0x40
 80077ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077d6:	f107 0308 	add.w	r3, r7, #8
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff ff52 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80077e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077e6:	2111      	movs	r1, #17
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f9b5 	bl	8007b58 <SDMMC_GetCmdResp1>
 80077ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077f0:	69fb      	ldr	r3, [r7, #28]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b088      	sub	sp, #32
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007808:	2312      	movs	r3, #18
 800780a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800780c:	2340      	movs	r3, #64	@ 0x40
 800780e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007810:	2300      	movs	r3, #0
 8007812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007818:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800781a:	f107 0308 	add.w	r3, r7, #8
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff ff30 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800782a:	2112      	movs	r1, #18
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f993 	bl	8007b58 <SDMMC_GetCmdResp1>
 8007832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007834:	69fb      	ldr	r3, [r7, #28]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3720      	adds	r7, #32
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b088      	sub	sp, #32
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800784c:	2318      	movs	r3, #24
 800784e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007850:	2340      	movs	r3, #64	@ 0x40
 8007852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800785c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800785e:	f107 0308 	add.w	r3, r7, #8
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7ff ff0e 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800786a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800786e:	2118      	movs	r1, #24
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f971 	bl	8007b58 <SDMMC_GetCmdResp1>
 8007876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007878:	69fb      	ldr	r3, [r7, #28]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3720      	adds	r7, #32
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b088      	sub	sp, #32
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007890:	2319      	movs	r3, #25
 8007892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007894:	2340      	movs	r3, #64	@ 0x40
 8007896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007898:	2300      	movs	r3, #0
 800789a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800789c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078a2:	f107 0308 	add.w	r3, r7, #8
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff feec 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80078ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078b2:	2119      	movs	r1, #25
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f94f 	bl	8007b58 <SDMMC_GetCmdResp1>
 80078ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078bc:	69fb      	ldr	r3, [r7, #28]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3720      	adds	r7, #32
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80078d4:	230c      	movs	r3, #12
 80078d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078d8:	2340      	movs	r3, #64	@ 0x40
 80078da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078dc:	2300      	movs	r3, #0
 80078de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078e6:	f107 0308 	add.w	r3, r7, #8
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff feca 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80078f2:	4a05      	ldr	r2, [pc, #20]	@ (8007908 <SDMMC_CmdStopTransfer+0x40>)
 80078f4:	210c      	movs	r1, #12
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f92e 	bl	8007b58 <SDMMC_GetCmdResp1>
 80078fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078fe:	69fb      	ldr	r3, [r7, #28]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3720      	adds	r7, #32
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	05f5e100 	.word	0x05f5e100

0800790c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08a      	sub	sp, #40	@ 0x28
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800791c:	2307      	movs	r3, #7
 800791e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007920:	2340      	movs	r3, #64	@ 0x40
 8007922:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007924:	2300      	movs	r3, #0
 8007926:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800792c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800792e:	f107 0310 	add.w	r3, r7, #16
 8007932:	4619      	mov	r1, r3
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff fea6 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800793a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800793e:	2107      	movs	r1, #7
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 f909 	bl	8007b58 <SDMMC_GetCmdResp1>
 8007946:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800794a:	4618      	mov	r0, r3
 800794c:	3728      	adds	r7, #40	@ 0x28
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b088      	sub	sp, #32
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800795e:	2300      	movs	r3, #0
 8007960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007962:	2300      	movs	r3, #0
 8007964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007966:	2300      	movs	r3, #0
 8007968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800796a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800796e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007970:	f107 0308 	add.w	r3, r7, #8
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff fe85 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fb23 	bl	8007fc8 <SDMMC_GetCmdError>
 8007982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007984:	69fb      	ldr	r3, [r7, #28]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b088      	sub	sp, #32
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007996:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800799a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800799c:	2308      	movs	r3, #8
 800799e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079a0:	2340      	movs	r3, #64	@ 0x40
 80079a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ae:	f107 0308 	add.w	r3, r7, #8
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fe66 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fab6 	bl	8007f2c <SDMMC_GetCmdResp7>
 80079c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079c2:	69fb      	ldr	r3, [r7, #28]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3720      	adds	r7, #32
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80079da:	2337      	movs	r3, #55	@ 0x37
 80079dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079de:	2340      	movs	r3, #64	@ 0x40
 80079e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ec:	f107 0308 	add.w	r3, r7, #8
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff fe47 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80079f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079fc:	2137      	movs	r1, #55	@ 0x37
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f8aa 	bl	8007b58 <SDMMC_GetCmdResp1>
 8007a04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a06:	69fb      	ldr	r3, [r7, #28]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3720      	adds	r7, #32
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007a26:	2329      	movs	r3, #41	@ 0x29
 8007a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a2a:	2340      	movs	r3, #64	@ 0x40
 8007a2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a38:	f107 0308 	add.w	r3, r7, #8
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff fe21 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f9bd 	bl	8007dc4 <SDMMC_GetCmdResp3>
 8007a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a4c:	69fb      	ldr	r3, [r7, #28]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b088      	sub	sp, #32
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a62:	2302      	movs	r3, #2
 8007a64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a66:	23c0      	movs	r3, #192	@ 0xc0
 8007a68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a74:	f107 0308 	add.w	r3, r7, #8
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff fe03 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f957 	bl	8007d34 <SDMMC_GetCmdResp2>
 8007a86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a88:	69fb      	ldr	r3, [r7, #28]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b088      	sub	sp, #32
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007aa0:	2309      	movs	r3, #9
 8007aa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007aa4:	23c0      	movs	r3, #192	@ 0xc0
 8007aa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ab0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ab2:	f107 0308 	add.w	r3, r7, #8
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff fde4 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f938 	bl	8007d34 <SDMMC_GetCmdResp2>
 8007ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ae2:	2340      	movs	r3, #64	@ 0x40
 8007ae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007aee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007af0:	f107 0308 	add.w	r3, r7, #8
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fdc5 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	2103      	movs	r1, #3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f99d 	bl	8007e40 <SDMMC_GetCmdResp6>
 8007b06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b08:	69fb      	ldr	r3, [r7, #28]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3720      	adds	r7, #32
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b088      	sub	sp, #32
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007b20:	230d      	movs	r3, #13
 8007b22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b24:	2340      	movs	r3, #64	@ 0x40
 8007b26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b32:	f107 0308 	add.w	r3, r7, #8
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff fda4 	bl	8007686 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b42:	210d      	movs	r1, #13
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f807 	bl	8007b58 <SDMMC_GetCmdResp1>
 8007b4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3720      	adds	r7, #32
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	460b      	mov	r3, r1
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b66:	4b70      	ldr	r3, [pc, #448]	@ (8007d28 <SDMMC_GetCmdResp1+0x1d0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a70      	ldr	r2, [pc, #448]	@ (8007d2c <SDMMC_GetCmdResp1+0x1d4>)
 8007b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b70:	0a5a      	lsrs	r2, r3, #9
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	fb02 f303 	mul.w	r3, r2, r3
 8007b78:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	1e5a      	subs	r2, r3, #1
 8007b7e:	61fa      	str	r2, [r7, #28]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d102      	bne.n	8007b8a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007b88:	e0c9      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b8e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0ef      	beq.n	8007b7a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1ea      	bne.n	8007b7a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d004      	beq.n	8007bba <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2204      	movs	r2, #4
 8007bb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bb6:	2304      	movs	r3, #4
 8007bb8:	e0b1      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d004      	beq.n	8007bd0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e0a6      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	22c5      	movs	r2, #197	@ 0xc5
 8007bd4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f7ff fd7f 	bl	80076da <SDIO_GetCommandResponse>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	461a      	mov	r2, r3
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d001      	beq.n	8007bea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e099      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007bea:	2100      	movs	r1, #0
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f7ff fd81 	bl	80076f4 <SDIO_GetResponse>
 8007bf2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8007d30 <SDMMC_GetCmdResp1+0x1d8>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e08d      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da02      	bge.n	8007c0e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007c08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c0c:	e087      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007c18:	2340      	movs	r3, #64	@ 0x40
 8007c1a:	e080      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007c26:	2380      	movs	r3, #128	@ 0x80
 8007c28:	e079      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007c34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c38:	e071      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007c44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c48:	e069      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007c54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c58:	e061      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007c64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007c68:	e059      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c78:	e051      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c88:	e049      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007c94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007c98:	e041      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007ca4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ca8:	e039      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007cb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007cb8:	e031      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007cc4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007cc8:	e029      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007cd4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007cd8:	e021      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007ce4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007ce8:	e019      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007cf4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007cf8:	e011      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007d04:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007d08:	e009      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f003 0308 	and.w	r3, r3, #8
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007d14:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007d18:	e001      	b.n	8007d1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3720      	adds	r7, #32
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000004 	.word	0x20000004
 8007d2c:	10624dd3 	.word	0x10624dd3
 8007d30:	fdffe008 	.word	0xfdffe008

08007d34 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8007dbc <SDMMC_GetCmdResp2+0x88>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a1f      	ldr	r2, [pc, #124]	@ (8007dc0 <SDMMC_GetCmdResp2+0x8c>)
 8007d42:	fba2 2303 	umull	r2, r3, r2, r3
 8007d46:	0a5b      	lsrs	r3, r3, #9
 8007d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
 8007d50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	1e5a      	subs	r2, r3, #1
 8007d56:	60fa      	str	r2, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d102      	bne.n	8007d62 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007d60:	e026      	b.n	8007db0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0ef      	beq.n	8007d52 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1ea      	bne.n	8007d52 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d80:	f003 0304 	and.w	r3, r3, #4
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d004      	beq.n	8007d92 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2204      	movs	r2, #4
 8007d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d8e:	2304      	movs	r3, #4
 8007d90:	e00e      	b.n	8007db0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d004      	beq.n	8007da8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e003      	b.n	8007db0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	22c5      	movs	r2, #197	@ 0xc5
 8007dac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	20000004 	.word	0x20000004
 8007dc0:	10624dd3 	.word	0x10624dd3

08007dc4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8007e38 <SDMMC_GetCmdResp3+0x74>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8007e3c <SDMMC_GetCmdResp3+0x78>)
 8007dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd6:	0a5b      	lsrs	r3, r3, #9
 8007dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ddc:	fb02 f303 	mul.w	r3, r2, r3
 8007de0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	1e5a      	subs	r2, r3, #1
 8007de6:	60fa      	str	r2, [r7, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007dec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007df0:	e01b      	b.n	8007e2a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0ef      	beq.n	8007de2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1ea      	bne.n	8007de2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d004      	beq.n	8007e22 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2204      	movs	r2, #4
 8007e1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e1e:	2304      	movs	r3, #4
 8007e20:	e003      	b.n	8007e2a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	22c5      	movs	r2, #197	@ 0xc5
 8007e26:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	20000004 	.word	0x20000004
 8007e3c:	10624dd3 	.word	0x10624dd3

08007e40 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e4e:	4b35      	ldr	r3, [pc, #212]	@ (8007f24 <SDMMC_GetCmdResp6+0xe4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a35      	ldr	r2, [pc, #212]	@ (8007f28 <SDMMC_GetCmdResp6+0xe8>)
 8007e54:	fba2 2303 	umull	r2, r3, r2, r3
 8007e58:	0a5b      	lsrs	r3, r3, #9
 8007e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e5e:	fb02 f303 	mul.w	r3, r2, r3
 8007e62:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	1e5a      	subs	r2, r3, #1
 8007e68:	61fa      	str	r2, [r7, #28]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e6e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007e72:	e052      	b.n	8007f1a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e78:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0ef      	beq.n	8007e64 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1ea      	bne.n	8007e64 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e92:	f003 0304 	and.w	r3, r3, #4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	e03a      	b.n	8007f1a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e02f      	b.n	8007f1a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fc0d 	bl	80076da <SDIO_GetCommandResponse>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	7afb      	ldrb	r3, [r7, #11]
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d001      	beq.n	8007ece <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e025      	b.n	8007f1a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	22c5      	movs	r2, #197	@ 0xc5
 8007ed2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f7ff fc0c 	bl	80076f4 <SDIO_GetResponse>
 8007edc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d106      	bne.n	8007ef6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	0c1b      	lsrs	r3, r3, #16
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e011      	b.n	8007f1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007f04:	e009      	b.n	8007f1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007f14:	e001      	b.n	8007f1a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3720      	adds	r7, #32
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000004 	.word	0x20000004
 8007f28:	10624dd3 	.word	0x10624dd3

08007f2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f34:	4b22      	ldr	r3, [pc, #136]	@ (8007fc0 <SDMMC_GetCmdResp7+0x94>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a22      	ldr	r2, [pc, #136]	@ (8007fc4 <SDMMC_GetCmdResp7+0x98>)
 8007f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3e:	0a5b      	lsrs	r3, r3, #9
 8007f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f44:	fb02 f303 	mul.w	r3, r2, r3
 8007f48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	1e5a      	subs	r2, r3, #1
 8007f4e:	60fa      	str	r2, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d102      	bne.n	8007f5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f58:	e02c      	b.n	8007fb4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f5e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0ef      	beq.n	8007f4a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1ea      	bne.n	8007f4a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2204      	movs	r2, #4
 8007f84:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f86:	2304      	movs	r3, #4
 8007f88:	e014      	b.n	8007fb4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e009      	b.n	8007fb4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2240      	movs	r2, #64	@ 0x40
 8007fb0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007fb2:	2300      	movs	r3, #0
  
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	20000004 	.word	0x20000004
 8007fc4:	10624dd3 	.word	0x10624dd3

08007fc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fd0:	4b11      	ldr	r3, [pc, #68]	@ (8008018 <SDMMC_GetCmdError+0x50>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a11      	ldr	r2, [pc, #68]	@ (800801c <SDMMC_GetCmdError+0x54>)
 8007fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fda:	0a5b      	lsrs	r3, r3, #9
 8007fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fe0:	fb02 f303 	mul.w	r3, r2, r3
 8007fe4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	1e5a      	subs	r2, r3, #1
 8007fea:	60fa      	str	r2, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ff0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007ff4:	e009      	b.n	800800a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0f1      	beq.n	8007fe6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	22c5      	movs	r2, #197	@ 0xc5
 8008006:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	20000004 	.word	0x20000004
 800801c:	10624dd3 	.word	0x10624dd3

08008020 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008024:	4904      	ldr	r1, [pc, #16]	@ (8008038 <MX_FATFS_Init+0x18>)
 8008026:	4805      	ldr	r0, [pc, #20]	@ (800803c <MX_FATFS_Init+0x1c>)
 8008028:	f002 fcf0 	bl	800aa0c <FATFS_LinkDriver>
 800802c:	4603      	mov	r3, r0
 800802e:	461a      	mov	r2, r3
 8008030:	4b03      	ldr	r3, [pc, #12]	@ (8008040 <MX_FATFS_Init+0x20>)
 8008032:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008034:	bf00      	nop
 8008036:	bd80      	pop	{r7, pc}
 8008038:	20004640 	.word	0x20004640
 800803c:	0800ad48 	.word	0x0800ad48
 8008040:	2000463c 	.word	0x2000463c

08008044 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008044:	b480      	push	{r7}
 8008046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008048:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800804a:	4618      	mov	r0, r3
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800805e:	f000 f86b 	bl	8008138 <BSP_SD_IsDetected>
 8008062:	4603      	mov	r3, r0
 8008064:	2b01      	cmp	r3, #1
 8008066:	d001      	beq.n	800806c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e005      	b.n	8008078 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800806c:	4804      	ldr	r0, [pc, #16]	@ (8008080 <BSP_SD_Init+0x2c>)
 800806e:	f7fb fec5 	bl	8003dfc <HAL_SD_Init>
 8008072:	4603      	mov	r3, r0
 8008074:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008076:	79fb      	ldrb	r3, [r7, #7]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	2000411c 	.word	0x2000411c

08008084 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af02      	add	r7, sp, #8
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	4806      	ldr	r0, [pc, #24]	@ (80080bc <BSP_SD_ReadBlocks+0x38>)
 80080a2:	f7fb ff5b 	bl	8003f5c <HAL_SD_ReadBlocks>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	2000411c 	.word	0x2000411c

080080c0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af02      	add	r7, sp, #8
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	4806      	ldr	r0, [pc, #24]	@ (80080f8 <BSP_SD_WriteBlocks+0x38>)
 80080de:	f7fc f923 	bl	8004328 <HAL_SD_WriteBlocks>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	2000411c 	.word	0x2000411c

080080fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008100:	4805      	ldr	r0, [pc, #20]	@ (8008118 <BSP_SD_GetCardState+0x1c>)
 8008102:	f7fc fc6f 	bl	80049e4 <HAL_SD_GetCardState>
 8008106:	4603      	mov	r3, r0
 8008108:	2b04      	cmp	r3, #4
 800810a:	bf14      	ite	ne
 800810c:	2301      	movne	r3, #1
 800810e:	2300      	moveq	r3, #0
 8008110:	b2db      	uxtb	r3, r3
}
 8008112:	4618      	mov	r0, r3
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	2000411c 	.word	0x2000411c

0800811c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	4803      	ldr	r0, [pc, #12]	@ (8008134 <BSP_SD_GetCardInfo+0x18>)
 8008128:	f7fc fc30 	bl	800498c <HAL_SD_GetCardInfo>
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	2000411c 	.word	0x2000411c

08008138 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800813e:	2301      	movs	r3, #1
 8008140:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	b2db      	uxtb	r3, r3
}
 8008146:	4618      	mov	r0, r3
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
	...

08008154 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800815e:	4b0b      	ldr	r3, [pc, #44]	@ (800818c <SD_CheckStatus+0x38>)
 8008160:	2201      	movs	r2, #1
 8008162:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008164:	f7ff ffca 	bl	80080fc <BSP_SD_GetCardState>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d107      	bne.n	800817e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800816e:	4b07      	ldr	r3, [pc, #28]	@ (800818c <SD_CheckStatus+0x38>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f023 0301 	bic.w	r3, r3, #1
 8008178:	b2da      	uxtb	r2, r3
 800817a:	4b04      	ldr	r3, [pc, #16]	@ (800818c <SD_CheckStatus+0x38>)
 800817c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800817e:	4b03      	ldr	r3, [pc, #12]	@ (800818c <SD_CheckStatus+0x38>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	b2db      	uxtb	r3, r3
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	2000000d 	.word	0x2000000d

08008190 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800819a:	4b0b      	ldr	r3, [pc, #44]	@ (80081c8 <SD_initialize+0x38>)
 800819c:	2201      	movs	r2, #1
 800819e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80081a0:	f7ff ff58 	bl	8008054 <BSP_SD_Init>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d107      	bne.n	80081ba <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff ffd1 	bl	8008154 <SD_CheckStatus>
 80081b2:	4603      	mov	r3, r0
 80081b4:	461a      	mov	r2, r3
 80081b6:	4b04      	ldr	r3, [pc, #16]	@ (80081c8 <SD_initialize+0x38>)
 80081b8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80081ba:	4b03      	ldr	r3, [pc, #12]	@ (80081c8 <SD_initialize+0x38>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	b2db      	uxtb	r3, r3
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	2000000d 	.word	0x2000000d

080081cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80081d6:	79fb      	ldrb	r3, [r7, #7]
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff ffbb 	bl	8008154 <SD_CheckStatus>
 80081de:	4603      	mov	r3, r0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	607a      	str	r2, [r7, #4]
 80081f2:	603b      	str	r3, [r7, #0]
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80081fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	68b8      	ldr	r0, [r7, #8]
 8008206:	f7ff ff3d 	bl	8008084 <BSP_SD_ReadBlocks>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d107      	bne.n	8008220 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008210:	bf00      	nop
 8008212:	f7ff ff73 	bl	80080fc <BSP_SD_GetCardState>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1fa      	bne.n	8008212 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b086      	sub	sp, #24
 800822e:	af00      	add	r7, sp, #0
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
 8008236:	4603      	mov	r3, r0
 8008238:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800823e:	f04f 33ff 	mov.w	r3, #4294967295
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	68b8      	ldr	r0, [r7, #8]
 8008248:	f7ff ff3a 	bl	80080c0 <BSP_SD_WriteBlocks>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d107      	bne.n	8008262 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008252:	bf00      	nop
 8008254:	f7ff ff52 	bl	80080fc <BSP_SD_GetCardState>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1fa      	bne.n	8008254 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008262:	7dfb      	ldrb	r3, [r7, #23]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08c      	sub	sp, #48	@ 0x30
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	603a      	str	r2, [r7, #0]
 8008276:	71fb      	strb	r3, [r7, #7]
 8008278:	460b      	mov	r3, r1
 800827a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008282:	4b25      	ldr	r3, [pc, #148]	@ (8008318 <SD_ioctl+0xac>)
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <SD_ioctl+0x28>
 8008290:	2303      	movs	r3, #3
 8008292:	e03c      	b.n	800830e <SD_ioctl+0xa2>

  switch (cmd)
 8008294:	79bb      	ldrb	r3, [r7, #6]
 8008296:	2b03      	cmp	r3, #3
 8008298:	d834      	bhi.n	8008304 <SD_ioctl+0x98>
 800829a:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <SD_ioctl+0x34>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082b1 	.word	0x080082b1
 80082a4:	080082b9 	.word	0x080082b9
 80082a8:	080082d1 	.word	0x080082d1
 80082ac:	080082eb 	.word	0x080082eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80082b6:	e028      	b.n	800830a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80082b8:	f107 030c 	add.w	r3, r7, #12
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff ff2d 	bl	800811c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80082c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80082ce:	e01c      	b.n	800830a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80082d0:	f107 030c 	add.w	r3, r7, #12
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff ff21 	bl	800811c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	b29a      	uxth	r2, r3
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80082e8:	e00f      	b.n	800830a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80082ea:	f107 030c 	add.w	r3, r7, #12
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff ff14 	bl	800811c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80082f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f6:	0a5a      	lsrs	r2, r3, #9
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008302:	e002      	b.n	800830a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008304:	2304      	movs	r3, #4
 8008306:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800830a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800830e:	4618      	mov	r0, r3
 8008310:	3730      	adds	r7, #48	@ 0x30
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	2000000d 	.word	0x2000000d

0800831c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	4603      	mov	r3, r0
 8008324:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	4a08      	ldr	r2, [pc, #32]	@ (800834c <disk_status+0x30>)
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	79fa      	ldrb	r2, [r7, #7]
 8008334:	4905      	ldr	r1, [pc, #20]	@ (800834c <disk_status+0x30>)
 8008336:	440a      	add	r2, r1
 8008338:	7a12      	ldrb	r2, [r2, #8]
 800833a:	4610      	mov	r0, r2
 800833c:	4798      	blx	r3
 800833e:	4603      	mov	r3, r0
 8008340:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	2000466c 	.word	0x2000466c

08008350 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800835e:	79fb      	ldrb	r3, [r7, #7]
 8008360:	4a0e      	ldr	r2, [pc, #56]	@ (800839c <disk_initialize+0x4c>)
 8008362:	5cd3      	ldrb	r3, [r2, r3]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d114      	bne.n	8008392 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	4a0c      	ldr	r2, [pc, #48]	@ (800839c <disk_initialize+0x4c>)
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	79fa      	ldrb	r2, [r7, #7]
 8008376:	4909      	ldr	r1, [pc, #36]	@ (800839c <disk_initialize+0x4c>)
 8008378:	440a      	add	r2, r1
 800837a:	7a12      	ldrb	r2, [r2, #8]
 800837c:	4610      	mov	r0, r2
 800837e:	4798      	blx	r3
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d103      	bne.n	8008392 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	4a03      	ldr	r2, [pc, #12]	@ (800839c <disk_initialize+0x4c>)
 800838e:	2101      	movs	r1, #1
 8008390:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008392:	7bfb      	ldrb	r3, [r7, #15]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	2000466c 	.word	0x2000466c

080083a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80083a0:	b590      	push	{r4, r7, lr}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	607a      	str	r2, [r7, #4]
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	4a0a      	ldr	r2, [pc, #40]	@ (80083dc <disk_read+0x3c>)
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	689c      	ldr	r4, [r3, #8]
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	4a07      	ldr	r2, [pc, #28]	@ (80083dc <disk_read+0x3c>)
 80083c0:	4413      	add	r3, r2
 80083c2:	7a18      	ldrb	r0, [r3, #8]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	68b9      	ldr	r1, [r7, #8]
 80083ca:	47a0      	blx	r4
 80083cc:	4603      	mov	r3, r0
 80083ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd90      	pop	{r4, r7, pc}
 80083da:	bf00      	nop
 80083dc:	2000466c 	.word	0x2000466c

080083e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80083e0:	b590      	push	{r4, r7, lr}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	607a      	str	r2, [r7, #4]
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	4603      	mov	r3, r0
 80083ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	4a0a      	ldr	r2, [pc, #40]	@ (800841c <disk_write+0x3c>)
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	68dc      	ldr	r4, [r3, #12]
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	4a07      	ldr	r2, [pc, #28]	@ (800841c <disk_write+0x3c>)
 8008400:	4413      	add	r3, r2
 8008402:	7a18      	ldrb	r0, [r3, #8]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	68b9      	ldr	r1, [r7, #8]
 800840a:	47a0      	blx	r4
 800840c:	4603      	mov	r3, r0
 800840e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008410:	7dfb      	ldrb	r3, [r7, #23]
}
 8008412:	4618      	mov	r0, r3
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	bd90      	pop	{r4, r7, pc}
 800841a:	bf00      	nop
 800841c:	2000466c 	.word	0x2000466c

08008420 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	603a      	str	r2, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
 800842c:	460b      	mov	r3, r1
 800842e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	4a09      	ldr	r2, [pc, #36]	@ (8008458 <disk_ioctl+0x38>)
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	79fa      	ldrb	r2, [r7, #7]
 800843e:	4906      	ldr	r1, [pc, #24]	@ (8008458 <disk_ioctl+0x38>)
 8008440:	440a      	add	r2, r1
 8008442:	7a10      	ldrb	r0, [r2, #8]
 8008444:	79b9      	ldrb	r1, [r7, #6]
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	4798      	blx	r3
 800844a:	4603      	mov	r3, r0
 800844c:	73fb      	strb	r3, [r7, #15]
  return res;
 800844e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	2000466c 	.word	0x2000466c

0800845c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3301      	adds	r3, #1
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800846c:	89fb      	ldrh	r3, [r7, #14]
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	b21a      	sxth	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b21b      	sxth	r3, r3
 8008478:	4313      	orrs	r3, r2
 800847a:	b21b      	sxth	r3, r3
 800847c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800847e:	89fb      	ldrh	r3, [r7, #14]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3303      	adds	r3, #3
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	3202      	adds	r2, #2
 80084a4:	7812      	ldrb	r2, [r2, #0]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	021b      	lsls	r3, r3, #8
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	3201      	adds	r2, #1
 80084b2:	7812      	ldrb	r2, [r2, #0]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	021b      	lsls	r3, r3, #8
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	7812      	ldrb	r2, [r2, #0]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]
	return rv;
 80084c4:	68fb      	ldr	r3, [r7, #12]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	460b      	mov	r3, r1
 80084dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	887a      	ldrh	r2, [r7, #2]
 80084e6:	b2d2      	uxtb	r2, r2
 80084e8:	701a      	strb	r2, [r3, #0]
 80084ea:	887b      	ldrh	r3, [r7, #2]
 80084ec:	0a1b      	lsrs	r3, r3, #8
 80084ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	607a      	str	r2, [r7, #4]
 80084f6:	887a      	ldrh	r2, [r7, #2]
 80084f8:	b2d2      	uxtb	r2, r2
 80084fa:	701a      	strb	r2, [r3, #0]
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	0a1b      	lsrs	r3, r3, #8
 8008522:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	607a      	str	r2, [r7, #4]
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	b2d2      	uxtb	r2, r2
 800852e:	701a      	strb	r2, [r3, #0]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	0a1b      	lsrs	r3, r3, #8
 8008534:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	1c5a      	adds	r2, r3, #1
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	701a      	strb	r2, [r3, #0]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	0a1b      	lsrs	r3, r3, #8
 8008546:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	b2d2      	uxtb	r2, r2
 8008552:	701a      	strb	r2, [r3, #0]
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00d      	beq.n	8008596 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	1c53      	adds	r3, r2, #1
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	1c59      	adds	r1, r3, #1
 8008584:	6179      	str	r1, [r7, #20]
 8008586:	7812      	ldrb	r2, [r2, #0]
 8008588:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3b01      	subs	r3, #1
 800858e:	607b      	str	r3, [r7, #4]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1f1      	bne.n	800857a <mem_cpy+0x1a>
	}
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80085a2:	b480      	push	{r7}
 80085a4:	b087      	sub	sp, #28
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	617a      	str	r2, [r7, #20]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	607b      	str	r3, [r7, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1f3      	bne.n	80085b2 <mem_set+0x10>
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	371c      	adds	r7, #28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80085d8:	b480      	push	{r7}
 80085da:	b089      	sub	sp, #36	@ 0x24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80085ec:	2300      	movs	r3, #0
 80085ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	61fa      	str	r2, [r7, #28]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	4619      	mov	r1, r3
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	61ba      	str	r2, [r7, #24]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	1acb      	subs	r3, r1, r3
 8008604:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3b01      	subs	r3, #1
 800860a:	607b      	str	r3, [r7, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <mem_cmp+0x40>
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0eb      	beq.n	80085f0 <mem_cmp+0x18>

	return r;
 8008618:	697b      	ldr	r3, [r7, #20]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3724      	adds	r7, #36	@ 0x24
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008630:	e002      	b.n	8008638 <chk_chr+0x12>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3301      	adds	r3, #1
 8008636:	607b      	str	r3, [r7, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <chk_chr+0x26>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	461a      	mov	r2, r3
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	4293      	cmp	r3, r2
 800864a:	d1f2      	bne.n	8008632 <chk_chr+0xc>
	return *str;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	781b      	ldrb	r3, [r3, #0]
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008666:	2300      	movs	r3, #0
 8008668:	60bb      	str	r3, [r7, #8]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	60fb      	str	r3, [r7, #12]
 800866e:	e029      	b.n	80086c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008670:	4a27      	ldr	r2, [pc, #156]	@ (8008710 <chk_lock+0xb4>)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	4413      	add	r3, r2
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d01d      	beq.n	80086ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800867e:	4a24      	ldr	r2, [pc, #144]	@ (8008710 <chk_lock+0xb4>)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	011b      	lsls	r3, r3, #4
 8008684:	4413      	add	r3, r2
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	429a      	cmp	r2, r3
 800868e:	d116      	bne.n	80086be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008690:	4a1f      	ldr	r2, [pc, #124]	@ (8008710 <chk_lock+0xb4>)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	4413      	add	r3, r2
 8008698:	3304      	adds	r3, #4
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d10c      	bne.n	80086be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80086a4:	4a1a      	ldr	r2, [pc, #104]	@ (8008710 <chk_lock+0xb4>)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	4413      	add	r3, r2
 80086ac:	3308      	adds	r3, #8
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d102      	bne.n	80086be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80086b8:	e007      	b.n	80086ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80086ba:	2301      	movs	r3, #1
 80086bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3301      	adds	r3, #1
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d9d2      	bls.n	8008670 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d109      	bne.n	80086e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d102      	bne.n	80086dc <chk_lock+0x80>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d101      	bne.n	80086e0 <chk_lock+0x84>
 80086dc:	2300      	movs	r3, #0
 80086de:	e010      	b.n	8008702 <chk_lock+0xa6>
 80086e0:	2312      	movs	r3, #18
 80086e2:	e00e      	b.n	8008702 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d108      	bne.n	80086fc <chk_lock+0xa0>
 80086ea:	4a09      	ldr	r2, [pc, #36]	@ (8008710 <chk_lock+0xb4>)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	011b      	lsls	r3, r3, #4
 80086f0:	4413      	add	r3, r2
 80086f2:	330c      	adds	r3, #12
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086fa:	d101      	bne.n	8008700 <chk_lock+0xa4>
 80086fc:	2310      	movs	r3, #16
 80086fe:	e000      	b.n	8008702 <chk_lock+0xa6>
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	2000464c 	.word	0x2000464c

08008714 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800871a:	2300      	movs	r3, #0
 800871c:	607b      	str	r3, [r7, #4]
 800871e:	e002      	b.n	8008726 <enq_lock+0x12>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3301      	adds	r3, #1
 8008724:	607b      	str	r3, [r7, #4]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d806      	bhi.n	800873a <enq_lock+0x26>
 800872c:	4a09      	ldr	r2, [pc, #36]	@ (8008754 <enq_lock+0x40>)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	4413      	add	r3, r2
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1f2      	bne.n	8008720 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b02      	cmp	r3, #2
 800873e:	bf14      	ite	ne
 8008740:	2301      	movne	r3, #1
 8008742:	2300      	moveq	r3, #0
 8008744:	b2db      	uxtb	r3, r3
}
 8008746:	4618      	mov	r0, r3
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	2000464c 	.word	0x2000464c

08008758 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	e01f      	b.n	80087a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008768:	4a41      	ldr	r2, [pc, #260]	@ (8008870 <inc_lock+0x118>)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	011b      	lsls	r3, r3, #4
 800876e:	4413      	add	r3, r2
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d113      	bne.n	80087a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800877a:	4a3d      	ldr	r2, [pc, #244]	@ (8008870 <inc_lock+0x118>)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	4413      	add	r3, r2
 8008782:	3304      	adds	r3, #4
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800878a:	429a      	cmp	r2, r3
 800878c:	d109      	bne.n	80087a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800878e:	4a38      	ldr	r2, [pc, #224]	@ (8008870 <inc_lock+0x118>)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	011b      	lsls	r3, r3, #4
 8008794:	4413      	add	r3, r2
 8008796:	3308      	adds	r3, #8
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800879e:	429a      	cmp	r2, r3
 80087a0:	d006      	beq.n	80087b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d9dc      	bls.n	8008768 <inc_lock+0x10>
 80087ae:	e000      	b.n	80087b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80087b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d132      	bne.n	800881e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80087b8:	2300      	movs	r3, #0
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	e002      	b.n	80087c4 <inc_lock+0x6c>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3301      	adds	r3, #1
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d806      	bhi.n	80087d8 <inc_lock+0x80>
 80087ca:	4a29      	ldr	r2, [pc, #164]	@ (8008870 <inc_lock+0x118>)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	011b      	lsls	r3, r3, #4
 80087d0:	4413      	add	r3, r2
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1f2      	bne.n	80087be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d101      	bne.n	80087e2 <inc_lock+0x8a>
 80087de:	2300      	movs	r3, #0
 80087e0:	e040      	b.n	8008864 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	4922      	ldr	r1, [pc, #136]	@ (8008870 <inc_lock+0x118>)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	011b      	lsls	r3, r3, #4
 80087ec:	440b      	add	r3, r1
 80087ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	491e      	ldr	r1, [pc, #120]	@ (8008870 <inc_lock+0x118>)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	011b      	lsls	r3, r3, #4
 80087fa:	440b      	add	r3, r1
 80087fc:	3304      	adds	r3, #4
 80087fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	491a      	ldr	r1, [pc, #104]	@ (8008870 <inc_lock+0x118>)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	440b      	add	r3, r1
 800880c:	3308      	adds	r3, #8
 800880e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008810:	4a17      	ldr	r2, [pc, #92]	@ (8008870 <inc_lock+0x118>)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	011b      	lsls	r3, r3, #4
 8008816:	4413      	add	r3, r2
 8008818:	330c      	adds	r3, #12
 800881a:	2200      	movs	r2, #0
 800881c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d009      	beq.n	8008838 <inc_lock+0xe0>
 8008824:	4a12      	ldr	r2, [pc, #72]	@ (8008870 <inc_lock+0x118>)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	011b      	lsls	r3, r3, #4
 800882a:	4413      	add	r3, r2
 800882c:	330c      	adds	r3, #12
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <inc_lock+0xe0>
 8008834:	2300      	movs	r3, #0
 8008836:	e015      	b.n	8008864 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d108      	bne.n	8008850 <inc_lock+0xf8>
 800883e:	4a0c      	ldr	r2, [pc, #48]	@ (8008870 <inc_lock+0x118>)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	4413      	add	r3, r2
 8008846:	330c      	adds	r3, #12
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	3301      	adds	r3, #1
 800884c:	b29a      	uxth	r2, r3
 800884e:	e001      	b.n	8008854 <inc_lock+0xfc>
 8008850:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008854:	4906      	ldr	r1, [pc, #24]	@ (8008870 <inc_lock+0x118>)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	440b      	add	r3, r1
 800885c:	330c      	adds	r3, #12
 800885e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3301      	adds	r3, #1
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	2000464c 	.word	0x2000464c

08008874 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3b01      	subs	r3, #1
 8008880:	607b      	str	r3, [r7, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d825      	bhi.n	80088d4 <dec_lock+0x60>
		n = Files[i].ctr;
 8008888:	4a17      	ldr	r2, [pc, #92]	@ (80088e8 <dec_lock+0x74>)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	4413      	add	r3, r2
 8008890:	330c      	adds	r3, #12
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008896:	89fb      	ldrh	r3, [r7, #14]
 8008898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800889c:	d101      	bne.n	80088a2 <dec_lock+0x2e>
 800889e:	2300      	movs	r3, #0
 80088a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80088a2:	89fb      	ldrh	r3, [r7, #14]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <dec_lock+0x3a>
 80088a8:	89fb      	ldrh	r3, [r7, #14]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80088ae:	4a0e      	ldr	r2, [pc, #56]	@ (80088e8 <dec_lock+0x74>)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	4413      	add	r3, r2
 80088b6:	330c      	adds	r3, #12
 80088b8:	89fa      	ldrh	r2, [r7, #14]
 80088ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80088bc:	89fb      	ldrh	r3, [r7, #14]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d105      	bne.n	80088ce <dec_lock+0x5a>
 80088c2:	4a09      	ldr	r2, [pc, #36]	@ (80088e8 <dec_lock+0x74>)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	4413      	add	r3, r2
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	737b      	strb	r3, [r7, #13]
 80088d2:	e001      	b.n	80088d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80088d4:	2302      	movs	r3, #2
 80088d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80088d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	2000464c 	.word	0x2000464c

080088ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	e010      	b.n	800891c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80088fa:	4a0d      	ldr	r2, [pc, #52]	@ (8008930 <clear_lock+0x44>)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	4413      	add	r3, r2
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d105      	bne.n	8008916 <clear_lock+0x2a>
 800890a:	4a09      	ldr	r2, [pc, #36]	@ (8008930 <clear_lock+0x44>)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	011b      	lsls	r3, r3, #4
 8008910:	4413      	add	r3, r2
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d9eb      	bls.n	80088fa <clear_lock+0xe>
	}
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	2000464c 	.word	0x2000464c

08008934 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	78db      	ldrb	r3, [r3, #3]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d034      	beq.n	80089b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7858      	ldrb	r0, [r3, #1]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008958:	2301      	movs	r3, #1
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	f7ff fd40 	bl	80083e0 <disk_write>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008966:	2301      	movs	r3, #1
 8008968:	73fb      	strb	r3, [r7, #15]
 800896a:	e022      	b.n	80089b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	1ad2      	subs	r2, r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	429a      	cmp	r2, r3
 8008980:	d217      	bcs.n	80089b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	789b      	ldrb	r3, [r3, #2]
 8008986:	613b      	str	r3, [r7, #16]
 8008988:	e010      	b.n	80089ac <sync_window+0x78>
					wsect += fs->fsize;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4413      	add	r3, r2
 8008992:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	7858      	ldrb	r0, [r3, #1]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800899e:	2301      	movs	r3, #1
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	f7ff fd1d 	bl	80083e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	613b      	str	r3, [r7, #16]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d8eb      	bhi.n	800898a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d01b      	beq.n	8008a0c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f7ff ffad 	bl	8008934 <sync_window>
 80089da:	4603      	mov	r3, r0
 80089dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d113      	bne.n	8008a0c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	7858      	ldrb	r0, [r3, #1]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80089ee:	2301      	movs	r3, #1
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	f7ff fcd5 	bl	80083a0 <disk_read>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80089fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008a00:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff ff87 	bl	8008934 <sync_window>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d158      	bne.n	8008ae2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d148      	bne.n	8008aca <sync_fs+0xb2>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	791b      	ldrb	r3, [r3, #4]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d144      	bne.n	8008aca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3330      	adds	r3, #48	@ 0x30
 8008a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a48:	2100      	movs	r1, #0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff fda9 	bl	80085a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3330      	adds	r3, #48	@ 0x30
 8008a54:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008a58:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff fd38 	bl	80084d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	3330      	adds	r3, #48	@ 0x30
 8008a66:	4921      	ldr	r1, [pc, #132]	@ (8008aec <sync_fs+0xd4>)
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7ff fd4d 	bl	8008508 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	3330      	adds	r3, #48	@ 0x30
 8008a72:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008a76:	491e      	ldr	r1, [pc, #120]	@ (8008af0 <sync_fs+0xd8>)
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7ff fd45 	bl	8008508 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	3330      	adds	r3, #48	@ 0x30
 8008a82:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	f7ff fd3b 	bl	8008508 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3330      	adds	r3, #48	@ 0x30
 8008a96:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7ff fd31 	bl	8008508 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	7858      	ldrb	r0, [r3, #1]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008abe:	2301      	movs	r3, #1
 8008ac0:	f7ff fc8e 	bl	80083e0 <disk_write>
			fs->fsi_flag = 0;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	785b      	ldrb	r3, [r3, #1]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff fca4 	bl	8008420 <disk_ioctl>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <sync_fs+0xca>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	41615252 	.word	0x41615252
 8008af0:	61417272 	.word	0x61417272

08008af4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	3b02      	subs	r3, #2
 8008b02:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	3b02      	subs	r3, #2
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d301      	bcc.n	8008b14 <clust2sect+0x20>
 8008b10:	2300      	movs	r3, #0
 8008b12:	e008      	b.n	8008b26 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	895b      	ldrh	r3, [r3, #10]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	fb03 f202 	mul.w	r2, r3, r2
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b24:	4413      	add	r3, r2
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b086      	sub	sp, #24
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d904      	bls.n	8008b52 <get_fat+0x20>
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d302      	bcc.n	8008b58 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008b52:	2301      	movs	r3, #1
 8008b54:	617b      	str	r3, [r7, #20]
 8008b56:	e08e      	b.n	8008c76 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008b58:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d061      	beq.n	8008c2a <get_fat+0xf8>
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	dc7b      	bgt.n	8008c62 <get_fat+0x130>
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d002      	beq.n	8008b74 <get_fat+0x42>
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d041      	beq.n	8008bf6 <get_fat+0xc4>
 8008b72:	e076      	b.n	8008c62 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	085b      	lsrs	r3, r3, #1
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	6a1a      	ldr	r2, [r3, #32]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	0a5b      	lsrs	r3, r3, #9
 8008b8a:	4413      	add	r3, r2
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6938      	ldr	r0, [r7, #16]
 8008b90:	f7ff ff14 	bl	80089bc <move_window>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d166      	bne.n	8008c68 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	60fa      	str	r2, [r7, #12]
 8008ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008bac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	6a1a      	ldr	r2, [r3, #32]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	0a5b      	lsrs	r3, r3, #9
 8008bb6:	4413      	add	r3, r2
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6938      	ldr	r0, [r7, #16]
 8008bbc:	f7ff fefe 	bl	80089bc <move_window>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d152      	bne.n	8008c6c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008bd4:	021b      	lsls	r3, r3, #8
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <get_fat+0xba>
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	091b      	lsrs	r3, r3, #4
 8008bea:	e002      	b.n	8008bf2 <get_fat+0xc0>
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bf2:	617b      	str	r3, [r7, #20]
			break;
 8008bf4:	e03f      	b.n	8008c76 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	6a1a      	ldr	r2, [r3, #32]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	0a1b      	lsrs	r3, r3, #8
 8008bfe:	4413      	add	r3, r2
 8008c00:	4619      	mov	r1, r3
 8008c02:	6938      	ldr	r0, [r7, #16]
 8008c04:	f7ff feda 	bl	80089bc <move_window>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d130      	bne.n	8008c70 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008c1c:	4413      	add	r3, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff fc1c 	bl	800845c <ld_word>
 8008c24:	4603      	mov	r3, r0
 8008c26:	617b      	str	r3, [r7, #20]
			break;
 8008c28:	e025      	b.n	8008c76 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	6a1a      	ldr	r2, [r3, #32]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	09db      	lsrs	r3, r3, #7
 8008c32:	4413      	add	r3, r2
 8008c34:	4619      	mov	r1, r3
 8008c36:	6938      	ldr	r0, [r7, #16]
 8008c38:	f7ff fec0 	bl	80089bc <move_window>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d118      	bne.n	8008c74 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008c50:	4413      	add	r3, r2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff fc1a 	bl	800848c <ld_dword>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008c5e:	617b      	str	r3, [r7, #20]
			break;
 8008c60:	e009      	b.n	8008c76 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008c62:	2301      	movs	r3, #1
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	e006      	b.n	8008c76 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c68:	bf00      	nop
 8008c6a:	e004      	b.n	8008c76 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c6c:	bf00      	nop
 8008c6e:	e002      	b.n	8008c76 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c70:	bf00      	nop
 8008c72:	e000      	b.n	8008c76 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c74:	bf00      	nop
		}
	}

	return val;
 8008c76:	697b      	ldr	r3, [r7, #20]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008c80:	b590      	push	{r4, r7, lr}
 8008c82:	b089      	sub	sp, #36	@ 0x24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	f240 80d9 	bls.w	8008e4a <put_fat+0x1ca>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	f080 80d3 	bcs.w	8008e4a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	f000 8096 	beq.w	8008dda <put_fat+0x15a>
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	f300 80cb 	bgt.w	8008e4a <put_fat+0x1ca>
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d002      	beq.n	8008cbe <put_fat+0x3e>
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d06e      	beq.n	8008d9a <put_fat+0x11a>
 8008cbc:	e0c5      	b.n	8008e4a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	61bb      	str	r3, [r7, #24]
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	085b      	lsrs	r3, r3, #1
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	4413      	add	r3, r2
 8008cca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6a1a      	ldr	r2, [r3, #32]
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	0a5b      	lsrs	r3, r3, #9
 8008cd4:	4413      	add	r3, r2
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f7ff fe6f 	bl	80089bc <move_window>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ce2:	7ffb      	ldrb	r3, [r7, #31]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f040 80a9 	bne.w	8008e3c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	1c59      	adds	r1, r3, #1
 8008cf4:	61b9      	str	r1, [r7, #24]
 8008cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfa:	4413      	add	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00d      	beq.n	8008d24 <put_fat+0xa4>
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	b25b      	sxtb	r3, r3
 8008d0e:	f003 030f 	and.w	r3, r3, #15
 8008d12:	b25a      	sxtb	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	011b      	lsls	r3, r3, #4
 8008d1a:	b25b      	sxtb	r3, r3
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	b25b      	sxtb	r3, r3
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	e001      	b.n	8008d28 <put_fat+0xa8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6a1a      	ldr	r2, [r3, #32]
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	0a5b      	lsrs	r3, r3, #9
 8008d3a:	4413      	add	r3, r2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f7ff fe3c 	bl	80089bc <move_window>
 8008d44:	4603      	mov	r3, r0
 8008d46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d48:	7ffb      	ldrb	r3, [r7, #31]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d178      	bne.n	8008e40 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5a:	4413      	add	r3, r2
 8008d5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d003      	beq.n	8008d70 <put_fat+0xf0>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	091b      	lsrs	r3, r3, #4
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	e00e      	b.n	8008d8e <put_fat+0x10e>
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	b25b      	sxtb	r3, r3
 8008d76:	f023 030f 	bic.w	r3, r3, #15
 8008d7a:	b25a      	sxtb	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	b25b      	sxtb	r3, r3
 8008d82:	f003 030f 	and.w	r3, r3, #15
 8008d86:	b25b      	sxtb	r3, r3
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	b25b      	sxtb	r3, r3
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	70da      	strb	r2, [r3, #3]
			break;
 8008d98:	e057      	b.n	8008e4a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a1a      	ldr	r2, [r3, #32]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	0a1b      	lsrs	r3, r3, #8
 8008da2:	4413      	add	r3, r2
 8008da4:	4619      	mov	r1, r3
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f7ff fe08 	bl	80089bc <move_window>
 8008dac:	4603      	mov	r3, r0
 8008dae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008db0:	7ffb      	ldrb	r3, [r7, #31]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d146      	bne.n	8008e44 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008dc4:	4413      	add	r3, r2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	b292      	uxth	r2, r2
 8008dca:	4611      	mov	r1, r2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7ff fb80 	bl	80084d2 <st_word>
			fs->wflag = 1;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	70da      	strb	r2, [r3, #3]
			break;
 8008dd8:	e037      	b.n	8008e4a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a1a      	ldr	r2, [r3, #32]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	09db      	lsrs	r3, r3, #7
 8008de2:	4413      	add	r3, r2
 8008de4:	4619      	mov	r1, r3
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f7ff fde8 	bl	80089bc <move_window>
 8008dec:	4603      	mov	r3, r0
 8008dee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008df0:	7ffb      	ldrb	r3, [r7, #31]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d128      	bne.n	8008e48 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008e0a:	4413      	add	r3, r2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff fb3d 	bl	800848c <ld_dword>
 8008e12:	4603      	mov	r3, r0
 8008e14:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008e18:	4323      	orrs	r3, r4
 8008e1a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008e2a:	4413      	add	r3, r2
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff fb6a 	bl	8008508 <st_dword>
			fs->wflag = 1;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2201      	movs	r2, #1
 8008e38:	70da      	strb	r2, [r3, #3]
			break;
 8008e3a:	e006      	b.n	8008e4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008e3c:	bf00      	nop
 8008e3e:	e004      	b.n	8008e4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008e40:	bf00      	nop
 8008e42:	e002      	b.n	8008e4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008e44:	bf00      	nop
 8008e46:	e000      	b.n	8008e4a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008e48:	bf00      	nop
		}
	}
	return res;
 8008e4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3724      	adds	r7, #36	@ 0x24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd90      	pop	{r4, r7, pc}

08008e54 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d904      	bls.n	8008e7a <remove_chain+0x26>
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d301      	bcc.n	8008e7e <remove_chain+0x2a>
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	e04b      	b.n	8008f16 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00c      	beq.n	8008e9e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008e84:	f04f 32ff 	mov.w	r2, #4294967295
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	69b8      	ldr	r0, [r7, #24]
 8008e8c:	f7ff fef8 	bl	8008c80 <put_fat>
 8008e90:	4603      	mov	r3, r0
 8008e92:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008e94:	7ffb      	ldrb	r3, [r7, #31]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <remove_chain+0x4a>
 8008e9a:	7ffb      	ldrb	r3, [r7, #31]
 8008e9c:	e03b      	b.n	8008f16 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7ff fe46 	bl	8008b32 <get_fat>
 8008ea6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d031      	beq.n	8008f12 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <remove_chain+0x64>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	e02e      	b.n	8008f16 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebe:	d101      	bne.n	8008ec4 <remove_chain+0x70>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e028      	b.n	8008f16 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	69b8      	ldr	r0, [r7, #24]
 8008eca:	f7ff fed9 	bl	8008c80 <put_fat>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008ed2:	7ffb      	ldrb	r3, [r7, #31]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <remove_chain+0x88>
 8008ed8:	7ffb      	ldrb	r3, [r7, #31]
 8008eda:	e01c      	b.n	8008f16 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	691a      	ldr	r2, [r3, #16]
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	3b02      	subs	r3, #2
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d20b      	bcs.n	8008f02 <remove_chain+0xae>
			fs->free_clst++;
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	791b      	ldrb	r3, [r3, #4]
 8008ef8:	f043 0301 	orr.w	r3, r3, #1
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d3c6      	bcc.n	8008e9e <remove_chain+0x4a>
 8008f10:	e000      	b.n	8008f14 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008f12:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3720      	adds	r7, #32
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b088      	sub	sp, #32
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10d      	bne.n	8008f50 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d004      	beq.n	8008f4a <create_chain+0x2c>
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d31b      	bcc.n	8008f82 <create_chain+0x64>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	61bb      	str	r3, [r7, #24]
 8008f4e:	e018      	b.n	8008f82 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff fded 	bl	8008b32 <get_fat>
 8008f58:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d801      	bhi.n	8008f64 <create_chain+0x46>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e070      	b.n	8009046 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6a:	d101      	bne.n	8008f70 <create_chain+0x52>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	e06a      	b.n	8009046 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d201      	bcs.n	8008f7e <create_chain+0x60>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	e063      	b.n	8009046 <create_chain+0x128>
		scl = clst;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	69fa      	ldr	r2, [r7, #28]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d307      	bcc.n	8008fa6 <create_chain+0x88>
				ncl = 2;
 8008f96:	2302      	movs	r3, #2
 8008f98:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d901      	bls.n	8008fa6 <create_chain+0x88>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e04f      	b.n	8009046 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008fa6:	69f9      	ldr	r1, [r7, #28]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff fdc2 	bl	8008b32 <get_fat>
 8008fae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00e      	beq.n	8008fd4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d003      	beq.n	8008fc4 <create_chain+0xa6>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc2:	d101      	bne.n	8008fc8 <create_chain+0xaa>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	e03e      	b.n	8009046 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008fc8:	69fa      	ldr	r2, [r7, #28]
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d1da      	bne.n	8008f86 <create_chain+0x68>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e038      	b.n	8009046 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008fd4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fda:	69f9      	ldr	r1, [r7, #28]
 8008fdc:	6938      	ldr	r0, [r7, #16]
 8008fde:	f7ff fe4f 	bl	8008c80 <put_fat>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008fe6:	7dfb      	ldrb	r3, [r7, #23]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d109      	bne.n	8009000 <create_chain+0xe2>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d006      	beq.n	8009000 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008ff2:	69fa      	ldr	r2, [r7, #28]
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6938      	ldr	r0, [r7, #16]
 8008ff8:	f7ff fe42 	bl	8008c80 <put_fat>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d116      	bne.n	8009034 <create_chain+0x116>
		fs->last_clst = ncl;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	691a      	ldr	r2, [r3, #16]
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	3b02      	subs	r3, #2
 8009016:	429a      	cmp	r2, r3
 8009018:	d804      	bhi.n	8009024 <create_chain+0x106>
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	1e5a      	subs	r2, r3, #1
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	791b      	ldrb	r3, [r3, #4]
 8009028:	f043 0301 	orr.w	r3, r3, #1
 800902c:	b2da      	uxtb	r2, r3
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	711a      	strb	r2, [r3, #4]
 8009032:	e007      	b.n	8009044 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009034:	7dfb      	ldrb	r3, [r7, #23]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d102      	bne.n	8009040 <create_chain+0x122>
 800903a:	f04f 33ff 	mov.w	r3, #4294967295
 800903e:	e000      	b.n	8009042 <create_chain+0x124>
 8009040:	2301      	movs	r3, #1
 8009042:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009044:	69fb      	ldr	r3, [r7, #28]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3720      	adds	r7, #32
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800904e:	b480      	push	{r7}
 8009050:	b087      	sub	sp, #28
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009062:	3304      	adds	r3, #4
 8009064:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	0a5b      	lsrs	r3, r3, #9
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	8952      	ldrh	r2, [r2, #10]
 800906e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009072:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	1d1a      	adds	r2, r3, #4
 8009078:	613a      	str	r2, [r7, #16]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d101      	bne.n	8009088 <clmt_clust+0x3a>
 8009084:	2300      	movs	r3, #0
 8009086:	e010      	b.n	80090aa <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	429a      	cmp	r2, r3
 800908e:	d307      	bcc.n	80090a0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	3304      	adds	r3, #4
 800909c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800909e:	e7e9      	b.n	8009074 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80090a0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	4413      	add	r3, r2
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b086      	sub	sp, #24
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090cc:	d204      	bcs.n	80090d8 <dir_sdi+0x22>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	f003 031f 	and.w	r3, r3, #31
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <dir_sdi+0x26>
		return FR_INT_ERR;
 80090d8:	2302      	movs	r3, #2
 80090da:	e063      	b.n	80091a4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <dir_sdi+0x46>
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d902      	bls.n	80090fc <dir_sdi+0x46>
		clst = fs->dirbase;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10c      	bne.n	800911c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	095b      	lsrs	r3, r3, #5
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	8912      	ldrh	r2, [r2, #8]
 800910a:	4293      	cmp	r3, r2
 800910c:	d301      	bcc.n	8009112 <dir_sdi+0x5c>
 800910e:	2302      	movs	r3, #2
 8009110:	e048      	b.n	80091a4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	61da      	str	r2, [r3, #28]
 800911a:	e029      	b.n	8009170 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	895b      	ldrh	r3, [r3, #10]
 8009120:	025b      	lsls	r3, r3, #9
 8009122:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009124:	e019      	b.n	800915a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6979      	ldr	r1, [r7, #20]
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff fd01 	bl	8008b32 <get_fat>
 8009130:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009138:	d101      	bne.n	800913e <dir_sdi+0x88>
 800913a:	2301      	movs	r3, #1
 800913c:	e032      	b.n	80091a4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d904      	bls.n	800914e <dir_sdi+0x98>
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	429a      	cmp	r2, r3
 800914c:	d301      	bcc.n	8009152 <dir_sdi+0x9c>
 800914e:	2302      	movs	r3, #2
 8009150:	e028      	b.n	80091a4 <dir_sdi+0xee>
			ofs -= csz;
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	429a      	cmp	r2, r3
 8009160:	d2e1      	bcs.n	8009126 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009162:	6979      	ldr	r1, [r7, #20]
 8009164:	6938      	ldr	r0, [r7, #16]
 8009166:	f7ff fcc5 	bl	8008af4 <clust2sect>
 800916a:	4602      	mov	r2, r0
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <dir_sdi+0xcc>
 800917e:	2302      	movs	r3, #2
 8009180:	e010      	b.n	80091a4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69da      	ldr	r2, [r3, #28]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	0a5b      	lsrs	r3, r3, #9
 800918a:	441a      	add	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919c:	441a      	add	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	695b      	ldr	r3, [r3, #20]
 80091c0:	3320      	adds	r3, #32
 80091c2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <dir_next+0x28>
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091d2:	d301      	bcc.n	80091d8 <dir_next+0x2c>
 80091d4:	2304      	movs	r3, #4
 80091d6:	e0aa      	b.n	800932e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f040 8098 	bne.w	8009314 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10b      	bne.n	800920e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	095b      	lsrs	r3, r3, #5
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	8912      	ldrh	r2, [r2, #8]
 80091fe:	4293      	cmp	r3, r2
 8009200:	f0c0 8088 	bcc.w	8009314 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	61da      	str	r2, [r3, #28]
 800920a:	2304      	movs	r3, #4
 800920c:	e08f      	b.n	800932e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	0a5b      	lsrs	r3, r3, #9
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	8952      	ldrh	r2, [r2, #10]
 8009216:	3a01      	subs	r2, #1
 8009218:	4013      	ands	r3, r2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d17a      	bne.n	8009314 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	4619      	mov	r1, r3
 8009226:	4610      	mov	r0, r2
 8009228:	f7ff fc83 	bl	8008b32 <get_fat>
 800922c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d801      	bhi.n	8009238 <dir_next+0x8c>
 8009234:	2302      	movs	r3, #2
 8009236:	e07a      	b.n	800932e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923e:	d101      	bne.n	8009244 <dir_next+0x98>
 8009240:	2301      	movs	r3, #1
 8009242:	e074      	b.n	800932e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	429a      	cmp	r2, r3
 800924c:	d358      	bcc.n	8009300 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d104      	bne.n	800925e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	61da      	str	r2, [r3, #28]
 800925a:	2304      	movs	r3, #4
 800925c:	e067      	b.n	800932e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7ff fe59 	bl	8008f1e <create_chain>
 800926c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d101      	bne.n	8009278 <dir_next+0xcc>
 8009274:	2307      	movs	r3, #7
 8009276:	e05a      	b.n	800932e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d101      	bne.n	8009282 <dir_next+0xd6>
 800927e:	2302      	movs	r3, #2
 8009280:	e055      	b.n	800932e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009288:	d101      	bne.n	800928e <dir_next+0xe2>
 800928a:	2301      	movs	r3, #1
 800928c:	e04f      	b.n	800932e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff fb50 	bl	8008934 <sync_window>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <dir_next+0xf2>
 800929a:	2301      	movs	r3, #1
 800929c:	e047      	b.n	800932e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3330      	adds	r3, #48	@ 0x30
 80092a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092a6:	2100      	movs	r1, #0
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff f97a 	bl	80085a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80092ae:	2300      	movs	r3, #0
 80092b0:	613b      	str	r3, [r7, #16]
 80092b2:	6979      	ldr	r1, [r7, #20]
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff fc1d 	bl	8008af4 <clust2sect>
 80092ba:	4602      	mov	r2, r0
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80092c0:	e012      	b.n	80092e8 <dir_next+0x13c>
						fs->wflag = 1;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f7ff fb33 	bl	8008934 <sync_window>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <dir_next+0x12c>
 80092d4:	2301      	movs	r3, #1
 80092d6:	e02a      	b.n	800932e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	3301      	adds	r3, #1
 80092dc:	613b      	str	r3, [r7, #16]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	895b      	ldrh	r3, [r3, #10]
 80092ec:	461a      	mov	r2, r3
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d3e6      	bcc.n	80092c2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	1ad2      	subs	r2, r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009306:	6979      	ldr	r1, [r7, #20]
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff fbf3 	bl	8008af4 <clust2sect>
 800930e:	4602      	mov	r2, r0
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009326:	441a      	add	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b086      	sub	sp, #24
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009346:	2100      	movs	r1, #0
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff feb4 	bl	80090b6 <dir_sdi>
 800934e:	4603      	mov	r3, r0
 8009350:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d12b      	bne.n	80093b0 <dir_alloc+0x7a>
		n = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	4619      	mov	r1, r3
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f7ff fb2a 	bl	80089bc <move_window>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d11d      	bne.n	80093ae <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	2be5      	cmp	r3, #229	@ 0xe5
 800937a:	d004      	beq.n	8009386 <dir_alloc+0x50>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d107      	bne.n	8009396 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	3301      	adds	r3, #1
 800938a:	613b      	str	r3, [r7, #16]
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	429a      	cmp	r2, r3
 8009392:	d102      	bne.n	800939a <dir_alloc+0x64>
 8009394:	e00c      	b.n	80093b0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009396:	2300      	movs	r3, #0
 8009398:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800939a:	2101      	movs	r1, #1
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff ff05 	bl	80091ac <dir_next>
 80093a2:	4603      	mov	r3, r0
 80093a4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0d7      	beq.n	800935c <dir_alloc+0x26>
 80093ac:	e000      	b.n	80093b0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80093ae:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d101      	bne.n	80093ba <dir_alloc+0x84>
 80093b6:	2307      	movs	r3, #7
 80093b8:	75fb      	strb	r3, [r7, #23]
	return res;
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	331a      	adds	r3, #26
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7ff f842 	bl	800845c <ld_word>
 80093d8:	4603      	mov	r3, r0
 80093da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d109      	bne.n	80093f8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	3314      	adds	r3, #20
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7ff f837 	bl	800845c <ld_word>
 80093ee:	4603      	mov	r3, r0
 80093f0:	041b      	lsls	r3, r3, #16
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80093f8:	68fb      	ldr	r3, [r7, #12]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	331a      	adds	r3, #26
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	b292      	uxth	r2, r2
 8009416:	4611      	mov	r1, r2
 8009418:	4618      	mov	r0, r3
 800941a:	f7ff f85a 	bl	80084d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b03      	cmp	r3, #3
 8009424:	d109      	bne.n	800943a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f103 0214 	add.w	r2, r3, #20
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	0c1b      	lsrs	r3, r3, #16
 8009430:	b29b      	uxth	r3, r3
 8009432:	4619      	mov	r1, r3
 8009434:	4610      	mov	r0, r2
 8009436:	f7ff f84c 	bl	80084d2 <st_word>
	}
}
 800943a:	bf00      	nop
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b086      	sub	sp, #24
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009450:	2100      	movs	r1, #0
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff fe2f 	bl	80090b6 <dir_sdi>
 8009458:	4603      	mov	r3, r0
 800945a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <dir_find+0x24>
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	e03e      	b.n	80094e4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	4619      	mov	r1, r3
 800946c:	6938      	ldr	r0, [r7, #16]
 800946e:	f7ff faa5 	bl	80089bc <move_window>
 8009472:	4603      	mov	r3, r0
 8009474:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d12f      	bne.n	80094dc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d102      	bne.n	8009490 <dir_find+0x4e>
 800948a:	2304      	movs	r3, #4
 800948c:	75fb      	strb	r3, [r7, #23]
 800948e:	e028      	b.n	80094e2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	330b      	adds	r3, #11
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800949c:	b2da      	uxtb	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	330b      	adds	r3, #11
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	f003 0308 	and.w	r3, r3, #8
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10a      	bne.n	80094c8 <dir_find+0x86>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a18      	ldr	r0, [r3, #32]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	3324      	adds	r3, #36	@ 0x24
 80094ba:	220b      	movs	r2, #11
 80094bc:	4619      	mov	r1, r3
 80094be:	f7ff f88b 	bl	80085d8 <mem_cmp>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00b      	beq.n	80094e0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80094c8:	2100      	movs	r1, #0
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff fe6e 	bl	80091ac <dir_next>
 80094d0:	4603      	mov	r3, r0
 80094d2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0c5      	beq.n	8009466 <dir_find+0x24>
 80094da:	e002      	b.n	80094e2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80094dc:	bf00      	nop
 80094de:	e000      	b.n	80094e2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80094e0:	bf00      	nop

	return res;
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80094fa:	2101      	movs	r1, #1
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7ff ff1a 	bl	8009336 <dir_alloc>
 8009502:	4603      	mov	r3, r0
 8009504:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009506:	7bfb      	ldrb	r3, [r7, #15]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d11c      	bne.n	8009546 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	4619      	mov	r1, r3
 8009512:	68b8      	ldr	r0, [r7, #8]
 8009514:	f7ff fa52 	bl	80089bc <move_window>
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d111      	bne.n	8009546 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	2220      	movs	r2, #32
 8009528:	2100      	movs	r1, #0
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff f839 	bl	80085a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a18      	ldr	r0, [r3, #32]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3324      	adds	r3, #36	@ 0x24
 8009538:	220b      	movs	r2, #11
 800953a:	4619      	mov	r1, r3
 800953c:	f7ff f810 	bl	8008560 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	2201      	movs	r2, #1
 8009544:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009546:	7bfb      	ldrb	r3, [r7, #15]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3324      	adds	r3, #36	@ 0x24
 8009564:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009566:	220b      	movs	r2, #11
 8009568:	2120      	movs	r1, #32
 800956a:	68b8      	ldr	r0, [r7, #8]
 800956c:	f7ff f819 	bl	80085a2 <mem_set>
	si = i = 0; ni = 8;
 8009570:	2300      	movs	r3, #0
 8009572:	613b      	str	r3, [r7, #16]
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	61fb      	str	r3, [r7, #28]
 8009578:	2308      	movs	r3, #8
 800957a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	61fa      	str	r2, [r7, #28]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800958a:	7efb      	ldrb	r3, [r7, #27]
 800958c:	2b20      	cmp	r3, #32
 800958e:	d94e      	bls.n	800962e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009590:	7efb      	ldrb	r3, [r7, #27]
 8009592:	2b2f      	cmp	r3, #47	@ 0x2f
 8009594:	d006      	beq.n	80095a4 <create_name+0x54>
 8009596:	7efb      	ldrb	r3, [r7, #27]
 8009598:	2b5c      	cmp	r3, #92	@ 0x5c
 800959a:	d110      	bne.n	80095be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800959c:	e002      	b.n	80095a4 <create_name+0x54>
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	3301      	adds	r3, #1
 80095a2:	61fb      	str	r3, [r7, #28]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	4413      	add	r3, r2
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80095ae:	d0f6      	beq.n	800959e <create_name+0x4e>
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	4413      	add	r3, r2
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80095ba:	d0f0      	beq.n	800959e <create_name+0x4e>
			break;
 80095bc:	e038      	b.n	8009630 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80095be:	7efb      	ldrb	r3, [r7, #27]
 80095c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80095c2:	d003      	beq.n	80095cc <create_name+0x7c>
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d30c      	bcc.n	80095e6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	2b0b      	cmp	r3, #11
 80095d0:	d002      	beq.n	80095d8 <create_name+0x88>
 80095d2:	7efb      	ldrb	r3, [r7, #27]
 80095d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80095d6:	d001      	beq.n	80095dc <create_name+0x8c>
 80095d8:	2306      	movs	r3, #6
 80095da:	e044      	b.n	8009666 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80095dc:	2308      	movs	r3, #8
 80095de:	613b      	str	r3, [r7, #16]
 80095e0:	230b      	movs	r3, #11
 80095e2:	617b      	str	r3, [r7, #20]
			continue;
 80095e4:	e022      	b.n	800962c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80095e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	da04      	bge.n	80095f8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80095ee:	7efb      	ldrb	r3, [r7, #27]
 80095f0:	3b80      	subs	r3, #128	@ 0x80
 80095f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009670 <create_name+0x120>)
 80095f4:	5cd3      	ldrb	r3, [r2, r3]
 80095f6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80095f8:	7efb      	ldrb	r3, [r7, #27]
 80095fa:	4619      	mov	r1, r3
 80095fc:	481d      	ldr	r0, [pc, #116]	@ (8009674 <create_name+0x124>)
 80095fe:	f7ff f812 	bl	8008626 <chk_chr>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <create_name+0xbc>
 8009608:	2306      	movs	r3, #6
 800960a:	e02c      	b.n	8009666 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800960c:	7efb      	ldrb	r3, [r7, #27]
 800960e:	2b60      	cmp	r3, #96	@ 0x60
 8009610:	d905      	bls.n	800961e <create_name+0xce>
 8009612:	7efb      	ldrb	r3, [r7, #27]
 8009614:	2b7a      	cmp	r3, #122	@ 0x7a
 8009616:	d802      	bhi.n	800961e <create_name+0xce>
 8009618:	7efb      	ldrb	r3, [r7, #27]
 800961a:	3b20      	subs	r3, #32
 800961c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	613a      	str	r2, [r7, #16]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	4413      	add	r3, r2
 8009628:	7efa      	ldrb	r2, [r7, #27]
 800962a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800962c:	e7a6      	b.n	800957c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800962e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	441a      	add	r2, r3
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <create_name+0xf4>
 8009640:	2306      	movs	r3, #6
 8009642:	e010      	b.n	8009666 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	2be5      	cmp	r3, #229	@ 0xe5
 800964a:	d102      	bne.n	8009652 <create_name+0x102>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2205      	movs	r2, #5
 8009650:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009652:	7efb      	ldrb	r3, [r7, #27]
 8009654:	2b20      	cmp	r3, #32
 8009656:	d801      	bhi.n	800965c <create_name+0x10c>
 8009658:	2204      	movs	r2, #4
 800965a:	e000      	b.n	800965e <create_name+0x10e>
 800965c:	2200      	movs	r2, #0
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	330b      	adds	r3, #11
 8009662:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009664:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009666:	4618      	mov	r0, r3
 8009668:	3720      	adds	r7, #32
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	0800ad5c 	.word	0x0800ad5c
 8009674:	0800ace0 	.word	0x0800ace0

08009678 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800968c:	e002      	b.n	8009694 <follow_path+0x1c>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b2f      	cmp	r3, #47	@ 0x2f
 800969a:	d0f8      	beq.n	800968e <follow_path+0x16>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80096a2:	d0f4      	beq.n	800968e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2200      	movs	r2, #0
 80096a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	2b1f      	cmp	r3, #31
 80096b0:	d80a      	bhi.n	80096c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2280      	movs	r2, #128	@ 0x80
 80096b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80096ba:	2100      	movs	r1, #0
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7ff fcfa 	bl	80090b6 <dir_sdi>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]
 80096c6:	e043      	b.n	8009750 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80096c8:	463b      	mov	r3, r7
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff ff3f 	bl	8009550 <create_name>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d134      	bne.n	8009746 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7ff feb0 	bl	8009442 <dir_find>
 80096e2:	4603      	mov	r3, r0
 80096e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80096ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	2b04      	cmp	r3, #4
 80096f8:	d127      	bne.n	800974a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80096fa:	7afb      	ldrb	r3, [r7, #11]
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d122      	bne.n	800974a <follow_path+0xd2>
 8009704:	2305      	movs	r3, #5
 8009706:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009708:	e01f      	b.n	800974a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800970a:	7afb      	ldrb	r3, [r7, #11]
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d11c      	bne.n	800974e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	799b      	ldrb	r3, [r3, #6]
 8009718:	f003 0310 	and.w	r3, r3, #16
 800971c:	2b00      	cmp	r3, #0
 800971e:	d102      	bne.n	8009726 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009720:	2305      	movs	r3, #5
 8009722:	75fb      	strb	r3, [r7, #23]
 8009724:	e014      	b.n	8009750 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009734:	4413      	add	r3, r2
 8009736:	4619      	mov	r1, r3
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7ff fe43 	bl	80093c4 <ld_clust>
 800973e:	4602      	mov	r2, r0
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009744:	e7c0      	b.n	80096c8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009746:	bf00      	nop
 8009748:	e002      	b.n	8009750 <follow_path+0xd8>
				break;
 800974a:	bf00      	nop
 800974c:	e000      	b.n	8009750 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800974e:	bf00      	nop
			}
		}
	}

	return res;
 8009750:	7dfb      	ldrb	r3, [r7, #23]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800975a:	b480      	push	{r7}
 800975c:	b087      	sub	sp, #28
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009762:	f04f 33ff 	mov.w	r3, #4294967295
 8009766:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d031      	beq.n	80097d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	617b      	str	r3, [r7, #20]
 8009776:	e002      	b.n	800977e <get_ldnumber+0x24>
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	3301      	adds	r3, #1
 800977c:	617b      	str	r3, [r7, #20]
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	2b20      	cmp	r3, #32
 8009784:	d903      	bls.n	800978e <get_ldnumber+0x34>
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	2b3a      	cmp	r3, #58	@ 0x3a
 800978c:	d1f4      	bne.n	8009778 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	2b3a      	cmp	r3, #58	@ 0x3a
 8009794:	d11c      	bne.n	80097d0 <get_ldnumber+0x76>
			tp = *path;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	60fa      	str	r2, [r7, #12]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	3b30      	subs	r3, #48	@ 0x30
 80097a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2b09      	cmp	r3, #9
 80097ac:	d80e      	bhi.n	80097cc <get_ldnumber+0x72>
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d10a      	bne.n	80097cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d107      	bne.n	80097cc <get_ldnumber+0x72>
					vol = (int)i;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	3301      	adds	r3, #1
 80097c4:	617b      	str	r3, [r7, #20]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	e002      	b.n	80097d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80097d0:	2300      	movs	r3, #0
 80097d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80097d4:	693b      	ldr	r3, [r7, #16]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
	...

080097e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	70da      	strb	r2, [r3, #3]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f04f 32ff 	mov.w	r2, #4294967295
 80097fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff f8dc 	bl	80089bc <move_window>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <check_fs+0x2a>
 800980a:	2304      	movs	r3, #4
 800980c:	e038      	b.n	8009880 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3330      	adds	r3, #48	@ 0x30
 8009812:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009816:	4618      	mov	r0, r3
 8009818:	f7fe fe20 	bl	800845c <ld_word>
 800981c:	4603      	mov	r3, r0
 800981e:	461a      	mov	r2, r3
 8009820:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009824:	429a      	cmp	r2, r3
 8009826:	d001      	beq.n	800982c <check_fs+0x48>
 8009828:	2303      	movs	r3, #3
 800982a:	e029      	b.n	8009880 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009832:	2be9      	cmp	r3, #233	@ 0xe9
 8009834:	d009      	beq.n	800984a <check_fs+0x66>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800983c:	2beb      	cmp	r3, #235	@ 0xeb
 800983e:	d11e      	bne.n	800987e <check_fs+0x9a>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009846:	2b90      	cmp	r3, #144	@ 0x90
 8009848:	d119      	bne.n	800987e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	3330      	adds	r3, #48	@ 0x30
 800984e:	3336      	adds	r3, #54	@ 0x36
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe fe1b 	bl	800848c <ld_dword>
 8009856:	4603      	mov	r3, r0
 8009858:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800985c:	4a0a      	ldr	r2, [pc, #40]	@ (8009888 <check_fs+0xa4>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d101      	bne.n	8009866 <check_fs+0x82>
 8009862:	2300      	movs	r3, #0
 8009864:	e00c      	b.n	8009880 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3330      	adds	r3, #48	@ 0x30
 800986a:	3352      	adds	r3, #82	@ 0x52
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe fe0d 	bl	800848c <ld_dword>
 8009872:	4603      	mov	r3, r0
 8009874:	4a05      	ldr	r2, [pc, #20]	@ (800988c <check_fs+0xa8>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d101      	bne.n	800987e <check_fs+0x9a>
 800987a:	2300      	movs	r3, #0
 800987c:	e000      	b.n	8009880 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800987e:	2302      	movs	r3, #2
}
 8009880:	4618      	mov	r0, r3
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	00544146 	.word	0x00544146
 800988c:	33544146 	.word	0x33544146

08009890 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b096      	sub	sp, #88	@ 0x58
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	4613      	mov	r3, r2
 800989c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2200      	movs	r2, #0
 80098a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f7ff ff58 	bl	800975a <get_ldnumber>
 80098aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80098ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	da01      	bge.n	80098b6 <find_volume+0x26>
 80098b2:	230b      	movs	r3, #11
 80098b4:	e22d      	b.n	8009d12 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80098b6:	4aa1      	ldr	r2, [pc, #644]	@ (8009b3c <find_volume+0x2ac>)
 80098b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098be:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80098c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <find_volume+0x3a>
 80098c6:	230c      	movs	r3, #12
 80098c8:	e223      	b.n	8009d12 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	f023 0301 	bic.w	r3, r3, #1
 80098d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80098d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d01a      	beq.n	8009916 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80098e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e2:	785b      	ldrb	r3, [r3, #1]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7fe fd19 	bl	800831c <disk_status>
 80098ea:	4603      	mov	r3, r0
 80098ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80098f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10c      	bne.n	8009916 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d007      	beq.n	8009912 <find_volume+0x82>
 8009902:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009906:	f003 0304 	and.w	r3, r3, #4
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800990e:	230a      	movs	r3, #10
 8009910:	e1ff      	b.n	8009d12 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009912:	2300      	movs	r3, #0
 8009914:	e1fd      	b.n	8009d12 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009918:	2200      	movs	r2, #0
 800991a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800991c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800991e:	b2da      	uxtb	r2, r3
 8009920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009922:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009926:	785b      	ldrb	r3, [r3, #1]
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe fd11 	bl	8008350 <disk_initialize>
 800992e:	4603      	mov	r3, r0
 8009930:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009934:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009940:	2303      	movs	r3, #3
 8009942:	e1e6      	b.n	8009d12 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009944:	79fb      	ldrb	r3, [r7, #7]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d007      	beq.n	800995a <find_volume+0xca>
 800994a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800994e:	f003 0304 	and.w	r3, r3, #4
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009956:	230a      	movs	r3, #10
 8009958:	e1db      	b.n	8009d12 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800995e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009960:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009962:	f7ff ff3f 	bl	80097e4 <check_fs>
 8009966:	4603      	mov	r3, r0
 8009968:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800996c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009970:	2b02      	cmp	r3, #2
 8009972:	d149      	bne.n	8009a08 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009974:	2300      	movs	r3, #0
 8009976:	643b      	str	r3, [r7, #64]	@ 0x40
 8009978:	e01e      	b.n	80099b8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800997a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009982:	011b      	lsls	r3, r3, #4
 8009984:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009988:	4413      	add	r3, r2
 800998a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	3304      	adds	r3, #4
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d006      	beq.n	80099a4 <find_volume+0x114>
 8009996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009998:	3308      	adds	r3, #8
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fd76 	bl	800848c <ld_dword>
 80099a0:	4602      	mov	r2, r0
 80099a2:	e000      	b.n	80099a6 <find_volume+0x116>
 80099a4:	2200      	movs	r2, #0
 80099a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	3358      	adds	r3, #88	@ 0x58
 80099ac:	443b      	add	r3, r7
 80099ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80099b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b4:	3301      	adds	r3, #1
 80099b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80099b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d9dd      	bls.n	800997a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80099be:	2300      	movs	r3, #0
 80099c0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80099c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <find_volume+0x13e>
 80099c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099ca:	3b01      	subs	r3, #1
 80099cc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80099ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	3358      	adds	r3, #88	@ 0x58
 80099d4:	443b      	add	r3, r7
 80099d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80099da:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80099dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d005      	beq.n	80099ee <find_volume+0x15e>
 80099e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80099e6:	f7ff fefd 	bl	80097e4 <check_fs>
 80099ea:	4603      	mov	r3, r0
 80099ec:	e000      	b.n	80099f0 <find_volume+0x160>
 80099ee:	2303      	movs	r3, #3
 80099f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80099f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d905      	bls.n	8009a08 <find_volume+0x178>
 80099fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099fe:	3301      	adds	r3, #1
 8009a00:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d9e2      	bls.n	80099ce <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009a08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d101      	bne.n	8009a14 <find_volume+0x184>
 8009a10:	2301      	movs	r3, #1
 8009a12:	e17e      	b.n	8009d12 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009a14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d901      	bls.n	8009a20 <find_volume+0x190>
 8009a1c:	230d      	movs	r3, #13
 8009a1e:	e178      	b.n	8009d12 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a22:	3330      	adds	r3, #48	@ 0x30
 8009a24:	330b      	adds	r3, #11
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7fe fd18 	bl	800845c <ld_word>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a32:	d001      	beq.n	8009a38 <find_volume+0x1a8>
 8009a34:	230d      	movs	r3, #13
 8009a36:	e16c      	b.n	8009d12 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3a:	3330      	adds	r3, #48	@ 0x30
 8009a3c:	3316      	adds	r3, #22
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fd0c 	bl	800845c <ld_word>
 8009a44:	4603      	mov	r3, r0
 8009a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d106      	bne.n	8009a5c <find_volume+0x1cc>
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a50:	3330      	adds	r3, #48	@ 0x30
 8009a52:	3324      	adds	r3, #36	@ 0x24
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fe fd19 	bl	800848c <ld_dword>
 8009a5a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a60:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a64:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6e:	789b      	ldrb	r3, [r3, #2]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d005      	beq.n	8009a80 <find_volume+0x1f0>
 8009a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a76:	789b      	ldrb	r3, [r3, #2]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d001      	beq.n	8009a80 <find_volume+0x1f0>
 8009a7c:	230d      	movs	r3, #13
 8009a7e:	e148      	b.n	8009d12 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a82:	789b      	ldrb	r3, [r3, #2]
 8009a84:	461a      	mov	r2, r3
 8009a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a88:	fb02 f303 	mul.w	r3, r2, r3
 8009a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a94:	461a      	mov	r2, r3
 8009a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a98:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9c:	895b      	ldrh	r3, [r3, #10]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d008      	beq.n	8009ab4 <find_volume+0x224>
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa4:	895b      	ldrh	r3, [r3, #10]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aaa:	895b      	ldrh	r3, [r3, #10]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	4013      	ands	r3, r2
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <find_volume+0x228>
 8009ab4:	230d      	movs	r3, #13
 8009ab6:	e12c      	b.n	8009d12 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aba:	3330      	adds	r3, #48	@ 0x30
 8009abc:	3311      	adds	r3, #17
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fe fccc 	bl	800845c <ld_word>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ace:	891b      	ldrh	r3, [r3, #8]
 8009ad0:	f003 030f 	and.w	r3, r3, #15
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <find_volume+0x24e>
 8009ada:	230d      	movs	r3, #13
 8009adc:	e119      	b.n	8009d12 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	3330      	adds	r3, #48	@ 0x30
 8009ae2:	3313      	adds	r3, #19
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fe fcb9 	bl	800845c <ld_word>
 8009aea:	4603      	mov	r3, r0
 8009aec:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d106      	bne.n	8009b02 <find_volume+0x272>
 8009af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af6:	3330      	adds	r3, #48	@ 0x30
 8009af8:	3320      	adds	r3, #32
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe fcc6 	bl	800848c <ld_dword>
 8009b00:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b04:	3330      	adds	r3, #48	@ 0x30
 8009b06:	330e      	adds	r3, #14
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fca7 	bl	800845c <ld_word>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009b12:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <find_volume+0x28c>
 8009b18:	230d      	movs	r3, #13
 8009b1a:	e0fa      	b.n	8009d12 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009b1c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b20:	4413      	add	r3, r2
 8009b22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b24:	8912      	ldrh	r2, [r2, #8]
 8009b26:	0912      	lsrs	r2, r2, #4
 8009b28:	b292      	uxth	r2, r2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009b2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d204      	bcs.n	8009b40 <find_volume+0x2b0>
 8009b36:	230d      	movs	r3, #13
 8009b38:	e0eb      	b.n	8009d12 <find_volume+0x482>
 8009b3a:	bf00      	nop
 8009b3c:	20004644 	.word	0x20004644
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009b40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b48:	8952      	ldrh	r2, [r2, #10]
 8009b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b4e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <find_volume+0x2ca>
 8009b56:	230d      	movs	r3, #13
 8009b58:	e0db      	b.n	8009d12 <find_volume+0x482>
		fmt = FS_FAT32;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b62:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d802      	bhi.n	8009b70 <find_volume+0x2e0>
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d802      	bhi.n	8009b80 <find_volume+0x2f0>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b82:	1c9a      	adds	r2, r3, #2
 8009b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b86:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b8c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009b8e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b92:	441a      	add	r2, r3
 8009b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b96:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009b98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9c:	441a      	add	r2, r3
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8009ba2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d11e      	bne.n	8009be8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bac:	3330      	adds	r3, #48	@ 0x30
 8009bae:	332a      	adds	r3, #42	@ 0x2a
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe fc53 	bl	800845c <ld_word>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <find_volume+0x330>
 8009bbc:	230d      	movs	r3, #13
 8009bbe:	e0a8      	b.n	8009d12 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc2:	891b      	ldrh	r3, [r3, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <find_volume+0x33c>
 8009bc8:	230d      	movs	r3, #13
 8009bca:	e0a2      	b.n	8009d12 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bce:	3330      	adds	r3, #48	@ 0x30
 8009bd0:	332c      	adds	r3, #44	@ 0x2c
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fc5a 	bl	800848c <ld_dword>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bdc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009be6:	e01f      	b.n	8009c28 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bea:	891b      	ldrh	r3, [r3, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <find_volume+0x364>
 8009bf0:	230d      	movs	r3, #13
 8009bf2:	e08e      	b.n	8009d12 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf6:	6a1a      	ldr	r2, [r3, #32]
 8009bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bfa:	441a      	add	r2, r3
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfe:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009c00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d103      	bne.n	8009c10 <find_volume+0x380>
 8009c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	e00a      	b.n	8009c26 <find_volume+0x396>
 8009c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c12:	695a      	ldr	r2, [r3, #20]
 8009c14:	4613      	mov	r3, r2
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	4413      	add	r3, r2
 8009c1a:	085a      	lsrs	r2, r3, #1
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009c26:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2a:	699a      	ldr	r2, [r3, #24]
 8009c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c2e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009c32:	0a5b      	lsrs	r3, r3, #9
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d201      	bcs.n	8009c3c <find_volume+0x3ac>
 8009c38:	230d      	movs	r3, #13
 8009c3a:	e06a      	b.n	8009d12 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c42:	611a      	str	r2, [r3, #16]
 8009c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c46:	691a      	ldr	r2, [r3, #16]
 8009c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4e:	2280      	movs	r2, #128	@ 0x80
 8009c50:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009c52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d149      	bne.n	8009cee <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5c:	3330      	adds	r3, #48	@ 0x30
 8009c5e:	3330      	adds	r3, #48	@ 0x30
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fe fbfb 	bl	800845c <ld_word>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d140      	bne.n	8009cee <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c6e:	3301      	adds	r3, #1
 8009c70:	4619      	mov	r1, r3
 8009c72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c74:	f7fe fea2 	bl	80089bc <move_window>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d137      	bne.n	8009cee <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c80:	2200      	movs	r2, #0
 8009c82:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c86:	3330      	adds	r3, #48	@ 0x30
 8009c88:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe fbe5 	bl	800845c <ld_word>
 8009c92:	4603      	mov	r3, r0
 8009c94:	461a      	mov	r2, r3
 8009c96:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d127      	bne.n	8009cee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca0:	3330      	adds	r3, #48	@ 0x30
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe fbf2 	bl	800848c <ld_dword>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	4a1c      	ldr	r2, [pc, #112]	@ (8009d1c <find_volume+0x48c>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d11e      	bne.n	8009cee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb2:	3330      	adds	r3, #48	@ 0x30
 8009cb4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe fbe7 	bl	800848c <ld_dword>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	4a17      	ldr	r2, [pc, #92]	@ (8009d20 <find_volume+0x490>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d113      	bne.n	8009cee <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc8:	3330      	adds	r3, #48	@ 0x30
 8009cca:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fbdc 	bl	800848c <ld_dword>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cdc:	3330      	adds	r3, #48	@ 0x30
 8009cde:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe fbd2 	bl	800848c <ld_dword>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cec:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009cf4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d24 <find_volume+0x494>)
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	4b09      	ldr	r3, [pc, #36]	@ (8009d24 <find_volume+0x494>)
 8009d00:	801a      	strh	r2, [r3, #0]
 8009d02:	4b08      	ldr	r3, [pc, #32]	@ (8009d24 <find_volume+0x494>)
 8009d04:	881a      	ldrh	r2, [r3, #0]
 8009d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d08:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009d0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009d0c:	f7fe fdee 	bl	80088ec <clear_lock>
#endif
	return FR_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3758      	adds	r7, #88	@ 0x58
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	41615252 	.word	0x41615252
 8009d20:	61417272 	.word	0x61417272
 8009d24:	20004648 	.word	0x20004648

08009d28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009d32:	2309      	movs	r3, #9
 8009d34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d01c      	beq.n	8009d76 <validate+0x4e>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d018      	beq.n	8009d76 <validate+0x4e>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d013      	beq.n	8009d76 <validate+0x4e>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	889a      	ldrh	r2, [r3, #4]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	88db      	ldrh	r3, [r3, #6]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d10c      	bne.n	8009d76 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	785b      	ldrb	r3, [r3, #1]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fada 	bl	800831c <disk_status>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <validate+0x4e>
			res = FR_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d102      	bne.n	8009d82 <validate+0x5a>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	e000      	b.n	8009d84 <validate+0x5c>
 8009d82:	2300      	movs	r3, #0
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	6013      	str	r3, [r2, #0]
	return res;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
	...

08009d94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b088      	sub	sp, #32
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009da6:	f107 0310 	add.w	r3, r7, #16
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7ff fcd5 	bl	800975a <get_ldnumber>
 8009db0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	da01      	bge.n	8009dbc <f_mount+0x28>
 8009db8:	230b      	movs	r3, #11
 8009dba:	e02b      	b.n	8009e14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009dbc:	4a17      	ldr	r2, [pc, #92]	@ (8009e1c <f_mount+0x88>)
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dc4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d005      	beq.n	8009dd8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009dcc:	69b8      	ldr	r0, [r7, #24]
 8009dce:	f7fe fd8d 	bl	80088ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	490d      	ldr	r1, [pc, #52]	@ (8009e1c <f_mount+0x88>)
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d002      	beq.n	8009dfa <f_mount+0x66>
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d001      	beq.n	8009dfe <f_mount+0x6a>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e00a      	b.n	8009e14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009dfe:	f107 010c 	add.w	r1, r7, #12
 8009e02:	f107 0308 	add.w	r3, r7, #8
 8009e06:	2200      	movs	r2, #0
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7ff fd41 	bl	8009890 <find_volume>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3720      	adds	r7, #32
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	20004644 	.word	0x20004644

08009e20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b098      	sub	sp, #96	@ 0x60
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <f_open+0x18>
 8009e34:	2309      	movs	r3, #9
 8009e36:	e1a9      	b.n	800a18c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009e38:	79fb      	ldrb	r3, [r7, #7]
 8009e3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e3e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009e40:	79fa      	ldrb	r2, [r7, #7]
 8009e42:	f107 0110 	add.w	r1, r7, #16
 8009e46:	f107 0308 	add.w	r3, r7, #8
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7ff fd20 	bl	8009890 <find_volume>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009e56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f040 818d 	bne.w	800a17a <f_open+0x35a>
		dj.obj.fs = fs;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	f107 0314 	add.w	r3, r7, #20
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff fc03 	bl	8009678 <follow_path>
 8009e72:	4603      	mov	r3, r0
 8009e74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009e78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d118      	bne.n	8009eb2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009e80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e84:	b25b      	sxtb	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	da03      	bge.n	8009e92 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009e8a:	2306      	movs	r3, #6
 8009e8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009e90:	e00f      	b.n	8009eb2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009e92:	79fb      	ldrb	r3, [r7, #7]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	bf8c      	ite	hi
 8009e98:	2301      	movhi	r3, #1
 8009e9a:	2300      	movls	r3, #0
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	f107 0314 	add.w	r3, r7, #20
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe fbd8 	bl	800865c <chk_lock>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
 8009eb4:	f003 031c 	and.w	r3, r3, #28
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d07f      	beq.n	8009fbc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009ebc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d017      	beq.n	8009ef4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ec8:	2b04      	cmp	r3, #4
 8009eca:	d10e      	bne.n	8009eea <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009ecc:	f7fe fc22 	bl	8008714 <enq_lock>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d006      	beq.n	8009ee4 <f_open+0xc4>
 8009ed6:	f107 0314 	add.w	r3, r7, #20
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7ff fb06 	bl	80094ec <dir_register>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	e000      	b.n	8009ee6 <f_open+0xc6>
 8009ee4:	2312      	movs	r3, #18
 8009ee6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	f043 0308 	orr.w	r3, r3, #8
 8009ef0:	71fb      	strb	r3, [r7, #7]
 8009ef2:	e010      	b.n	8009f16 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009ef4:	7ebb      	ldrb	r3, [r7, #26]
 8009ef6:	f003 0311 	and.w	r3, r3, #17
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <f_open+0xe6>
					res = FR_DENIED;
 8009efe:	2307      	movs	r3, #7
 8009f00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009f04:	e007      	b.n	8009f16 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	f003 0304 	and.w	r3, r3, #4
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <f_open+0xf6>
 8009f10:	2308      	movs	r3, #8
 8009f12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009f16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d168      	bne.n	8009ff0 <f_open+0x1d0>
 8009f1e:	79fb      	ldrb	r3, [r7, #7]
 8009f20:	f003 0308 	and.w	r3, r3, #8
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d063      	beq.n	8009ff0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009f28:	f7fe f88c 	bl	8008044 <get_fattime>
 8009f2c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f30:	330e      	adds	r3, #14
 8009f32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe fae7 	bl	8008508 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3c:	3316      	adds	r3, #22
 8009f3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fe fae1 	bl	8008508 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f48:	330b      	adds	r3, #11
 8009f4a:	2220      	movs	r2, #32
 8009f4c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f52:	4611      	mov	r1, r2
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff fa35 	bl	80093c4 <ld_clust>
 8009f5a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009f60:	2200      	movs	r2, #0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff fa4d 	bl	8009402 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f6a:	331c      	adds	r3, #28
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe faca 	bl	8008508 <st_dword>
					fs->wflag = 1;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	2201      	movs	r2, #1
 8009f78:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d037      	beq.n	8009ff0 <f_open+0x1d0>
						dw = fs->winsect;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f84:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009f86:	f107 0314 	add.w	r3, r7, #20
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe ff60 	bl	8008e54 <remove_chain>
 8009f94:	4603      	mov	r3, r0
 8009f96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d126      	bne.n	8009ff0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe fd08 	bl	80089bc <move_window>
 8009fac:	4603      	mov	r3, r0
 8009fae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009fb6:	3a01      	subs	r2, #1
 8009fb8:	60da      	str	r2, [r3, #12]
 8009fba:	e019      	b.n	8009ff0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d115      	bne.n	8009ff0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009fc4:	7ebb      	ldrb	r3, [r7, #26]
 8009fc6:	f003 0310 	and.w	r3, r3, #16
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <f_open+0x1b6>
					res = FR_NO_FILE;
 8009fce:	2304      	movs	r3, #4
 8009fd0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009fd4:	e00c      	b.n	8009ff0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009fd6:	79fb      	ldrb	r3, [r7, #7]
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d007      	beq.n	8009ff0 <f_open+0x1d0>
 8009fe0:	7ebb      	ldrb	r3, [r7, #26]
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <f_open+0x1d0>
						res = FR_DENIED;
 8009fea:	2307      	movs	r3, #7
 8009fec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d126      	bne.n	800a046 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009ff8:	79fb      	ldrb	r3, [r7, #7]
 8009ffa:	f003 0308 	and.w	r3, r3, #8
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a002:	79fb      	ldrb	r3, [r7, #7]
 800a004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a008:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a012:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a018:	79fb      	ldrb	r3, [r7, #7]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	bf8c      	ite	hi
 800a01e:	2301      	movhi	r3, #1
 800a020:	2300      	movls	r3, #0
 800a022:	b2db      	uxtb	r3, r3
 800a024:	461a      	mov	r2, r3
 800a026:	f107 0314 	add.w	r3, r7, #20
 800a02a:	4611      	mov	r1, r2
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fe fb93 	bl	8008758 <inc_lock>
 800a032:	4602      	mov	r2, r0
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d102      	bne.n	800a046 <f_open+0x226>
 800a040:	2302      	movs	r3, #2
 800a042:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a046:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f040 8095 	bne.w	800a17a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a054:	4611      	mov	r1, r2
 800a056:	4618      	mov	r0, r3
 800a058:	f7ff f9b4 	bl	80093c4 <ld_clust>
 800a05c:	4602      	mov	r2, r0
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a064:	331c      	adds	r3, #28
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe fa10 	bl	800848c <ld_dword>
 800a06c:	4602      	mov	r2, r0
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	88da      	ldrh	r2, [r3, #6]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	79fa      	ldrb	r2, [r7, #7]
 800a08a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3330      	adds	r3, #48	@ 0x30
 800a0a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe fa7a 	bl	80085a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	f003 0320 	and.w	r3, r3, #32
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d060      	beq.n	800a17a <f_open+0x35a>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d05c      	beq.n	800a17a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	68da      	ldr	r2, [r3, #12]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	895b      	ldrh	r3, [r3, #10]
 800a0cc:	025b      	lsls	r3, r3, #9
 800a0ce:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	657b      	str	r3, [r7, #84]	@ 0x54
 800a0dc:	e016      	b.n	800a10c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fe fd25 	bl	8008b32 <get_fat>
 800a0e8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a0ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d802      	bhi.n	800a0f6 <f_open+0x2d6>
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a0f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fc:	d102      	bne.n	800a104 <f_open+0x2e4>
 800a0fe:	2301      	movs	r3, #1
 800a100:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a104:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a10c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a110:	2b00      	cmp	r3, #0
 800a112:	d103      	bne.n	800a11c <f_open+0x2fc>
 800a114:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a118:	429a      	cmp	r2, r3
 800a11a:	d8e0      	bhi.n	800a0de <f_open+0x2be>
				}
				fp->clust = clst;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a120:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a122:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a126:	2b00      	cmp	r3, #0
 800a128:	d127      	bne.n	800a17a <f_open+0x35a>
 800a12a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a12c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a130:	2b00      	cmp	r3, #0
 800a132:	d022      	beq.n	800a17a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a138:	4618      	mov	r0, r3
 800a13a:	f7fe fcdb 	bl	8008af4 <clust2sect>
 800a13e:	6478      	str	r0, [r7, #68]	@ 0x44
 800a140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a142:	2b00      	cmp	r3, #0
 800a144:	d103      	bne.n	800a14e <f_open+0x32e>
						res = FR_INT_ERR;
 800a146:	2302      	movs	r3, #2
 800a148:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a14c:	e015      	b.n	800a17a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a14e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a150:	0a5a      	lsrs	r2, r3, #9
 800a152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a154:	441a      	add	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	7858      	ldrb	r0, [r3, #1]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6a1a      	ldr	r2, [r3, #32]
 800a168:	2301      	movs	r3, #1
 800a16a:	f7fe f919 	bl	80083a0 <disk_read>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <f_open+0x35a>
 800a174:	2301      	movs	r3, #1
 800a176:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a17a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d002      	beq.n	800a188 <f_open+0x368>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a188:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3760      	adds	r7, #96	@ 0x60
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08e      	sub	sp, #56	@ 0x38
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f107 0214 	add.w	r2, r7, #20
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fdb7 	bl	8009d28 <validate>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a1c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d107      	bne.n	800a1d8 <f_read+0x44>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	7d5b      	ldrb	r3, [r3, #21]
 800a1cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a1d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <f_read+0x4a>
 800a1d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a1dc:	e115      	b.n	800a40a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	7d1b      	ldrb	r3, [r3, #20]
 800a1e2:	f003 0301 	and.w	r3, r3, #1
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <f_read+0x5a>
 800a1ea:	2307      	movs	r3, #7
 800a1ec:	e10d      	b.n	800a40a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	68da      	ldr	r2, [r3, #12]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	f240 80fe 	bls.w	800a400 <f_read+0x26c>
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a208:	e0fa      	b.n	800a400 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a212:	2b00      	cmp	r3, #0
 800a214:	f040 80c6 	bne.w	800a3a4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	0a5b      	lsrs	r3, r3, #9
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	8952      	ldrh	r2, [r2, #10]
 800a222:	3a01      	subs	r2, #1
 800a224:	4013      	ands	r3, r2
 800a226:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d12f      	bne.n	800a28e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d103      	bne.n	800a23e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a23c:	e013      	b.n	800a266 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d007      	beq.n	800a256 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	4619      	mov	r1, r3
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f7fe fefe 	bl	800904e <clmt_clust>
 800a252:	6338      	str	r0, [r7, #48]	@ 0x30
 800a254:	e007      	b.n	800a266 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	69db      	ldr	r3, [r3, #28]
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7fe fc67 	bl	8008b32 <get_fat>
 800a264:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d804      	bhi.n	800a276 <f_read+0xe2>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2202      	movs	r2, #2
 800a270:	755a      	strb	r2, [r3, #21]
 800a272:	2302      	movs	r3, #2
 800a274:	e0c9      	b.n	800a40a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27c:	d104      	bne.n	800a288 <f_read+0xf4>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2201      	movs	r2, #1
 800a282:	755a      	strb	r2, [r3, #21]
 800a284:	2301      	movs	r3, #1
 800a286:	e0c0      	b.n	800a40a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a28c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	4619      	mov	r1, r3
 800a296:	4610      	mov	r0, r2
 800a298:	f7fe fc2c 	bl	8008af4 <clust2sect>
 800a29c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d104      	bne.n	800a2ae <f_read+0x11a>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	755a      	strb	r2, [r3, #21]
 800a2aa:	2302      	movs	r3, #2
 800a2ac:	e0ad      	b.n	800a40a <f_read+0x276>
			sect += csect;
 800a2ae:	69ba      	ldr	r2, [r7, #24]
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	0a5b      	lsrs	r3, r3, #9
 800a2ba:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d039      	beq.n	800a336 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a2c2:	69fa      	ldr	r2, [r7, #28]
 800a2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c6:	4413      	add	r3, r2
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	8952      	ldrh	r2, [r2, #10]
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d905      	bls.n	800a2dc <f_read+0x148>
					cc = fs->csize - csect;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	895b      	ldrh	r3, [r3, #10]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	7858      	ldrb	r0, [r3, #1]
 800a2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e2:	69ba      	ldr	r2, [r7, #24]
 800a2e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2e6:	f7fe f85b 	bl	80083a0 <disk_read>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d004      	beq.n	800a2fa <f_read+0x166>
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	755a      	strb	r2, [r3, #21]
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e087      	b.n	800a40a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	7d1b      	ldrb	r3, [r3, #20]
 800a2fe:	b25b      	sxtb	r3, r3
 800a300:	2b00      	cmp	r3, #0
 800a302:	da14      	bge.n	800a32e <f_read+0x19a>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6a1a      	ldr	r2, [r3, #32]
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a30e:	429a      	cmp	r2, r3
 800a310:	d90d      	bls.n	800a32e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6a1a      	ldr	r2, [r3, #32]
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	025b      	lsls	r3, r3, #9
 800a31c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a31e:	18d0      	adds	r0, r2, r3
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3330      	adds	r3, #48	@ 0x30
 800a324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a328:	4619      	mov	r1, r3
 800a32a:	f7fe f919 	bl	8008560 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	025b      	lsls	r3, r3, #9
 800a332:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a334:	e050      	b.n	800a3d8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	69ba      	ldr	r2, [r7, #24]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d02e      	beq.n	800a39e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	7d1b      	ldrb	r3, [r3, #20]
 800a344:	b25b      	sxtb	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	da18      	bge.n	800a37c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	7858      	ldrb	r0, [r3, #1]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a1a      	ldr	r2, [r3, #32]
 800a358:	2301      	movs	r3, #1
 800a35a:	f7fe f841 	bl	80083e0 <disk_write>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <f_read+0x1da>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	755a      	strb	r2, [r3, #21]
 800a36a:	2301      	movs	r3, #1
 800a36c:	e04d      	b.n	800a40a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	7d1b      	ldrb	r3, [r3, #20]
 800a372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a376:	b2da      	uxtb	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	7858      	ldrb	r0, [r3, #1]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a386:	2301      	movs	r3, #1
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	f7fe f809 	bl	80083a0 <disk_read>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d004      	beq.n	800a39e <f_read+0x20a>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2201      	movs	r2, #1
 800a398:	755a      	strb	r2, [r3, #21]
 800a39a:	2301      	movs	r3, #1
 800a39c:	e035      	b.n	800a40a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	69ba      	ldr	r2, [r7, #24]
 800a3a2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ac:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a3b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d901      	bls.n	800a3be <f_read+0x22a>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3cc:	4413      	add	r3, r2
 800a3ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a3d4:	f7fe f8c4 	bl	8008560 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a3d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3dc:	4413      	add	r3, r2
 800a3de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	699a      	ldr	r2, [r3, #24]
 800a3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e6:	441a      	add	r2, r3
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	619a      	str	r2, [r3, #24]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f2:	441a      	add	r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	601a      	str	r2, [r3, #0]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	f47f af01 	bne.w	800a20a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3738      	adds	r7, #56	@ 0x38
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b086      	sub	sp, #24
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f107 0208 	add.w	r2, r7, #8
 800a420:	4611      	mov	r1, r2
 800a422:	4618      	mov	r0, r3
 800a424:	f7ff fc80 	bl	8009d28 <validate>
 800a428:	4603      	mov	r3, r0
 800a42a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d168      	bne.n	800a504 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	7d1b      	ldrb	r3, [r3, #20]
 800a436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d062      	beq.n	800a504 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	7d1b      	ldrb	r3, [r3, #20]
 800a442:	b25b      	sxtb	r3, r3
 800a444:	2b00      	cmp	r3, #0
 800a446:	da15      	bge.n	800a474 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	7858      	ldrb	r0, [r3, #1]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a1a      	ldr	r2, [r3, #32]
 800a456:	2301      	movs	r3, #1
 800a458:	f7fd ffc2 	bl	80083e0 <disk_write>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <f_sync+0x54>
 800a462:	2301      	movs	r3, #1
 800a464:	e04f      	b.n	800a506 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	7d1b      	ldrb	r3, [r3, #20]
 800a46a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a474:	f7fd fde6 	bl	8008044 <get_fattime>
 800a478:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a480:	4619      	mov	r1, r3
 800a482:	4610      	mov	r0, r2
 800a484:	f7fe fa9a 	bl	80089bc <move_window>
 800a488:	4603      	mov	r3, r0
 800a48a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a48c:	7dfb      	ldrb	r3, [r7, #23]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d138      	bne.n	800a504 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a496:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	330b      	adds	r3, #11
 800a49c:	781a      	ldrb	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	330b      	adds	r3, #11
 800a4a2:	f042 0220 	orr.w	r2, r2, #32
 800a4a6:	b2d2      	uxtb	r2, r2
 800a4a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6818      	ldr	r0, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	68f9      	ldr	r1, [r7, #12]
 800a4b6:	f7fe ffa4 	bl	8009402 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f103 021c 	add.w	r2, r3, #28
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	f7fe f81e 	bl	8008508 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	3316      	adds	r3, #22
 800a4d0:	6939      	ldr	r1, [r7, #16]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fe f818 	bl	8008508 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	3312      	adds	r3, #18
 800a4dc:	2100      	movs	r1, #0
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fd fff7 	bl	80084d2 <st_word>
					fs->wflag = 1;
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fe fa93 	bl	8008a18 <sync_fs>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	7d1b      	ldrb	r3, [r3, #20]
 800a4fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a504:	7dfb      	ldrb	r3, [r7, #23]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff ff7b 	bl	800a412 <f_sync>
 800a51c:	4603      	mov	r3, r0
 800a51e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d118      	bne.n	800a558 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f107 0208 	add.w	r2, r7, #8
 800a52c:	4611      	mov	r1, r2
 800a52e:	4618      	mov	r0, r3
 800a530:	f7ff fbfa 	bl	8009d28 <validate>
 800a534:	4603      	mov	r3, r0
 800a536:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a538:	7bfb      	ldrb	r3, [r7, #15]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10c      	bne.n	800a558 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe f996 	bl	8008874 <dec_lock>
 800a548:	4603      	mov	r3, r0
 800a54a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d102      	bne.n	800a558 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a558:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b090      	sub	sp, #64	@ 0x40
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f107 0208 	add.w	r2, r7, #8
 800a572:	4611      	mov	r1, r2
 800a574:	4618      	mov	r0, r3
 800a576:	f7ff fbd7 	bl	8009d28 <validate>
 800a57a:	4603      	mov	r3, r0
 800a57c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a580:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a584:	2b00      	cmp	r3, #0
 800a586:	d103      	bne.n	800a590 <f_lseek+0x2e>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	7d5b      	ldrb	r3, [r3, #21]
 800a58c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a590:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <f_lseek+0x3c>
 800a598:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a59c:	e1e6      	b.n	800a96c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f000 80d1 	beq.w	800a74a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ae:	d15a      	bne.n	800a666 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b8:	1d1a      	adds	r2, r3, #4
 800a5ba:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	617b      	str	r3, [r7, #20]
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d03a      	beq.n	800a646 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d2:	613b      	str	r3, [r7, #16]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5da:	3302      	adds	r3, #2
 800a5dc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe faa0 	bl	8008b32 <get_fat>
 800a5f2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d804      	bhi.n	800a604 <f_lseek+0xa2>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	755a      	strb	r2, [r3, #21]
 800a600:	2302      	movs	r3, #2
 800a602:	e1b3      	b.n	800a96c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60a:	d104      	bne.n	800a616 <f_lseek+0xb4>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	755a      	strb	r2, [r3, #21]
 800a612:	2301      	movs	r3, #1
 800a614:	e1aa      	b.n	800a96c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3301      	adds	r3, #1
 800a61a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d0de      	beq.n	800a5de <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	429a      	cmp	r2, r3
 800a626:	d809      	bhi.n	800a63c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62a:	1d1a      	adds	r2, r3, #4
 800a62c:	627a      	str	r2, [r7, #36]	@ 0x24
 800a62e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a634:	1d1a      	adds	r2, r3, #4
 800a636:	627a      	str	r2, [r7, #36]	@ 0x24
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a642:	429a      	cmp	r2, r3
 800a644:	d3c4      	bcc.n	800a5d0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a64a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a64c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a64e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	429a      	cmp	r2, r3
 800a654:	d803      	bhi.n	800a65e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	e184      	b.n	800a968 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a65e:	2311      	movs	r3, #17
 800a660:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a664:	e180      	b.n	800a968 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d902      	bls.n	800a676 <f_lseek+0x114>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f000 8172 	beq.w	800a968 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	3b01      	subs	r3, #1
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7fe fcdf 	bl	800904e <clmt_clust>
 800a690:	4602      	mov	r2, r0
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	69db      	ldr	r3, [r3, #28]
 800a69c:	4619      	mov	r1, r3
 800a69e:	4610      	mov	r0, r2
 800a6a0:	f7fe fa28 	bl	8008af4 <clust2sect>
 800a6a4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d104      	bne.n	800a6b6 <f_lseek+0x154>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	755a      	strb	r2, [r3, #21]
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	e15a      	b.n	800a96c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	0a5b      	lsrs	r3, r3, #9
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	8952      	ldrh	r2, [r2, #10]
 800a6c0:	3a01      	subs	r2, #1
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 8148 	beq.w	800a968 <f_lseek+0x406>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a1b      	ldr	r3, [r3, #32]
 800a6dc:	69ba      	ldr	r2, [r7, #24]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	f000 8142 	beq.w	800a968 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	7d1b      	ldrb	r3, [r3, #20]
 800a6e8:	b25b      	sxtb	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	da18      	bge.n	800a720 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	7858      	ldrb	r0, [r3, #1]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a1a      	ldr	r2, [r3, #32]
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	f7fd fe6f 	bl	80083e0 <disk_write>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d004      	beq.n	800a712 <f_lseek+0x1b0>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	755a      	strb	r2, [r3, #21]
 800a70e:	2301      	movs	r3, #1
 800a710:	e12c      	b.n	800a96c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	7d1b      	ldrb	r3, [r3, #20]
 800a716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	7858      	ldrb	r0, [r3, #1]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a72a:	2301      	movs	r3, #1
 800a72c:	69ba      	ldr	r2, [r7, #24]
 800a72e:	f7fd fe37 	bl	80083a0 <disk_read>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d004      	beq.n	800a742 <f_lseek+0x1e0>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	755a      	strb	r2, [r3, #21]
 800a73e:	2301      	movs	r3, #1
 800a740:	e114      	b.n	800a96c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	621a      	str	r2, [r3, #32]
 800a748:	e10e      	b.n	800a968 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	683a      	ldr	r2, [r7, #0]
 800a750:	429a      	cmp	r2, r3
 800a752:	d908      	bls.n	800a766 <f_lseek+0x204>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7d1b      	ldrb	r3, [r3, #20]
 800a758:	f003 0302 	and.w	r3, r3, #2
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d102      	bne.n	800a766 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a774:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 80a7 	beq.w	800a8cc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	895b      	ldrh	r3, [r3, #10]
 800a782:	025b      	lsls	r3, r3, #9
 800a784:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a786:	6a3b      	ldr	r3, [r7, #32]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d01b      	beq.n	800a7c4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	1e5a      	subs	r2, r3, #1
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	fbb2 f2f3 	udiv	r2, r2, r3
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	1e59      	subs	r1, r3, #1
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d30f      	bcc.n	800a7c4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	1e5a      	subs	r2, r3, #1
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	425b      	negs	r3, r3
 800a7ac:	401a      	ands	r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a7c2:	e022      	b.n	800a80a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d119      	bne.n	800a804 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fe fba2 	bl	8008f1e <create_chain>
 800a7da:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d104      	bne.n	800a7ec <f_lseek+0x28a>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2202      	movs	r2, #2
 800a7e6:	755a      	strb	r2, [r3, #21]
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	e0bf      	b.n	800a96c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f2:	d104      	bne.n	800a7fe <f_lseek+0x29c>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	755a      	strb	r2, [r3, #21]
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e0b6      	b.n	800a96c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a802:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a808:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d05d      	beq.n	800a8cc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a810:	e03a      	b.n	800a888 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	603b      	str	r3, [r7, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	699a      	ldr	r2, [r3, #24]
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	441a      	add	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	7d1b      	ldrb	r3, [r3, #20]
 800a82a:	f003 0302 	and.w	r3, r3, #2
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00b      	beq.n	800a84a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a836:	4618      	mov	r0, r3
 800a838:	f7fe fb71 	bl	8008f1e <create_chain>
 800a83c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a840:	2b00      	cmp	r3, #0
 800a842:	d108      	bne.n	800a856 <f_lseek+0x2f4>
							ofs = 0; break;
 800a844:	2300      	movs	r3, #0
 800a846:	603b      	str	r3, [r7, #0]
 800a848:	e022      	b.n	800a890 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe f96f 	bl	8008b32 <get_fat>
 800a854:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85c:	d104      	bne.n	800a868 <f_lseek+0x306>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	755a      	strb	r2, [r3, #21]
 800a864:	2301      	movs	r3, #1
 800a866:	e081      	b.n	800a96c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d904      	bls.n	800a878 <f_lseek+0x316>
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a874:	429a      	cmp	r2, r3
 800a876:	d304      	bcc.n	800a882 <f_lseek+0x320>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2202      	movs	r2, #2
 800a87c:	755a      	strb	r2, [r3, #21]
 800a87e:	2302      	movs	r3, #2
 800a880:	e074      	b.n	800a96c <f_lseek+0x40a>
					fp->clust = clst;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a886:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d8c0      	bhi.n	800a812 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	699a      	ldr	r2, [r3, #24]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	441a      	add	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d012      	beq.n	800a8cc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe f922 	bl	8008af4 <clust2sect>
 800a8b0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d104      	bne.n	800a8c2 <f_lseek+0x360>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	755a      	strb	r2, [r3, #21]
 800a8be:	2302      	movs	r3, #2
 800a8c0:	e054      	b.n	800a96c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	0a5b      	lsrs	r3, r3, #9
 800a8c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8c8:	4413      	add	r3, r2
 800a8ca:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	699a      	ldr	r2, [r3, #24]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d90a      	bls.n	800a8ee <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	699a      	ldr	r2, [r3, #24]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	7d1b      	ldrb	r3, [r3, #20]
 800a8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d036      	beq.n	800a968 <f_lseek+0x406>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a900:	429a      	cmp	r2, r3
 800a902:	d031      	beq.n	800a968 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	7d1b      	ldrb	r3, [r3, #20]
 800a908:	b25b      	sxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	da18      	bge.n	800a940 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	7858      	ldrb	r0, [r3, #1]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a1a      	ldr	r2, [r3, #32]
 800a91c:	2301      	movs	r3, #1
 800a91e:	f7fd fd5f 	bl	80083e0 <disk_write>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d004      	beq.n	800a932 <f_lseek+0x3d0>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	755a      	strb	r2, [r3, #21]
 800a92e:	2301      	movs	r3, #1
 800a930:	e01c      	b.n	800a96c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	7d1b      	ldrb	r3, [r3, #20]
 800a936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	7858      	ldrb	r0, [r3, #1]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a94a:	2301      	movs	r3, #1
 800a94c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a94e:	f7fd fd27 	bl	80083a0 <disk_read>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <f_lseek+0x400>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	755a      	strb	r2, [r3, #21]
 800a95e:	2301      	movs	r3, #1
 800a960:	e004      	b.n	800a96c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a966:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a968:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3740      	adds	r7, #64	@ 0x40
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a974:	b480      	push	{r7}
 800a976:	b087      	sub	sp, #28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	4613      	mov	r3, r2
 800a980:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a982:	2301      	movs	r3, #1
 800a984:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a986:	2300      	movs	r3, #0
 800a988:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a98a:	4b1f      	ldr	r3, [pc, #124]	@ (800aa08 <FATFS_LinkDriverEx+0x94>)
 800a98c:	7a5b      	ldrb	r3, [r3, #9]
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b00      	cmp	r3, #0
 800a992:	d131      	bne.n	800a9f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a994:	4b1c      	ldr	r3, [pc, #112]	@ (800aa08 <FATFS_LinkDriverEx+0x94>)
 800a996:	7a5b      	ldrb	r3, [r3, #9]
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	461a      	mov	r2, r3
 800a99c:	4b1a      	ldr	r3, [pc, #104]	@ (800aa08 <FATFS_LinkDriverEx+0x94>)
 800a99e:	2100      	movs	r1, #0
 800a9a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a9a2:	4b19      	ldr	r3, [pc, #100]	@ (800aa08 <FATFS_LinkDriverEx+0x94>)
 800a9a4:	7a5b      	ldrb	r3, [r3, #9]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	4a17      	ldr	r2, [pc, #92]	@ (800aa08 <FATFS_LinkDriverEx+0x94>)
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a9b2:	4b15      	ldr	r3, [pc, #84]	@ (800aa08 <FATFS_LinkDriverEx+0x94>)
 800a9b4:	7a5b      	ldrb	r3, [r3, #9]
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	4b13      	ldr	r3, [pc, #76]	@ (800aa08 <FATFS_LinkDriverEx+0x94>)
 800a9bc:	4413      	add	r3, r2
 800a9be:	79fa      	ldrb	r2, [r7, #7]
 800a9c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a9c2:	4b11      	ldr	r3, [pc, #68]	@ (800aa08 <FATFS_LinkDriverEx+0x94>)
 800a9c4:	7a5b      	ldrb	r3, [r3, #9]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	b2d1      	uxtb	r1, r2
 800a9cc:	4a0e      	ldr	r2, [pc, #56]	@ (800aa08 <FATFS_LinkDriverEx+0x94>)
 800a9ce:	7251      	strb	r1, [r2, #9]
 800a9d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a9d2:	7dbb      	ldrb	r3, [r7, #22]
 800a9d4:	3330      	adds	r3, #48	@ 0x30
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	223a      	movs	r2, #58	@ 0x3a
 800a9e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	3302      	adds	r3, #2
 800a9e8:	222f      	movs	r2, #47	@ 0x2f
 800a9ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	3303      	adds	r3, #3
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	371c      	adds	r7, #28
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	2000466c 	.word	0x2000466c

0800aa0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aa16:	2200      	movs	r2, #0
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff ffaa 	bl	800a974 <FATFS_LinkDriverEx>
 800aa20:	4603      	mov	r3, r0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <malloc>:
 800aa2c:	4b02      	ldr	r3, [pc, #8]	@ (800aa38 <malloc+0xc>)
 800aa2e:	4601      	mov	r1, r0
 800aa30:	6818      	ldr	r0, [r3, #0]
 800aa32:	f000 b82d 	b.w	800aa90 <_malloc_r>
 800aa36:	bf00      	nop
 800aa38:	20000010 	.word	0x20000010

0800aa3c <free>:
 800aa3c:	4b02      	ldr	r3, [pc, #8]	@ (800aa48 <free+0xc>)
 800aa3e:	4601      	mov	r1, r0
 800aa40:	6818      	ldr	r0, [r3, #0]
 800aa42:	f000 b8f5 	b.w	800ac30 <_free_r>
 800aa46:	bf00      	nop
 800aa48:	20000010 	.word	0x20000010

0800aa4c <sbrk_aligned>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	4e0f      	ldr	r6, [pc, #60]	@ (800aa8c <sbrk_aligned+0x40>)
 800aa50:	460c      	mov	r4, r1
 800aa52:	6831      	ldr	r1, [r6, #0]
 800aa54:	4605      	mov	r5, r0
 800aa56:	b911      	cbnz	r1, 800aa5e <sbrk_aligned+0x12>
 800aa58:	f000 f8ae 	bl	800abb8 <_sbrk_r>
 800aa5c:	6030      	str	r0, [r6, #0]
 800aa5e:	4621      	mov	r1, r4
 800aa60:	4628      	mov	r0, r5
 800aa62:	f000 f8a9 	bl	800abb8 <_sbrk_r>
 800aa66:	1c43      	adds	r3, r0, #1
 800aa68:	d103      	bne.n	800aa72 <sbrk_aligned+0x26>
 800aa6a:	f04f 34ff 	mov.w	r4, #4294967295
 800aa6e:	4620      	mov	r0, r4
 800aa70:	bd70      	pop	{r4, r5, r6, pc}
 800aa72:	1cc4      	adds	r4, r0, #3
 800aa74:	f024 0403 	bic.w	r4, r4, #3
 800aa78:	42a0      	cmp	r0, r4
 800aa7a:	d0f8      	beq.n	800aa6e <sbrk_aligned+0x22>
 800aa7c:	1a21      	subs	r1, r4, r0
 800aa7e:	4628      	mov	r0, r5
 800aa80:	f000 f89a 	bl	800abb8 <_sbrk_r>
 800aa84:	3001      	adds	r0, #1
 800aa86:	d1f2      	bne.n	800aa6e <sbrk_aligned+0x22>
 800aa88:	e7ef      	b.n	800aa6a <sbrk_aligned+0x1e>
 800aa8a:	bf00      	nop
 800aa8c:	20004678 	.word	0x20004678

0800aa90 <_malloc_r>:
 800aa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa94:	1ccd      	adds	r5, r1, #3
 800aa96:	f025 0503 	bic.w	r5, r5, #3
 800aa9a:	3508      	adds	r5, #8
 800aa9c:	2d0c      	cmp	r5, #12
 800aa9e:	bf38      	it	cc
 800aaa0:	250c      	movcc	r5, #12
 800aaa2:	2d00      	cmp	r5, #0
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	db01      	blt.n	800aaac <_malloc_r+0x1c>
 800aaa8:	42a9      	cmp	r1, r5
 800aaaa:	d904      	bls.n	800aab6 <_malloc_r+0x26>
 800aaac:	230c      	movs	r3, #12
 800aaae:	6033      	str	r3, [r6, #0]
 800aab0:	2000      	movs	r0, #0
 800aab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab8c <_malloc_r+0xfc>
 800aaba:	f000 f869 	bl	800ab90 <__malloc_lock>
 800aabe:	f8d8 3000 	ldr.w	r3, [r8]
 800aac2:	461c      	mov	r4, r3
 800aac4:	bb44      	cbnz	r4, 800ab18 <_malloc_r+0x88>
 800aac6:	4629      	mov	r1, r5
 800aac8:	4630      	mov	r0, r6
 800aaca:	f7ff ffbf 	bl	800aa4c <sbrk_aligned>
 800aace:	1c43      	adds	r3, r0, #1
 800aad0:	4604      	mov	r4, r0
 800aad2:	d158      	bne.n	800ab86 <_malloc_r+0xf6>
 800aad4:	f8d8 4000 	ldr.w	r4, [r8]
 800aad8:	4627      	mov	r7, r4
 800aada:	2f00      	cmp	r7, #0
 800aadc:	d143      	bne.n	800ab66 <_malloc_r+0xd6>
 800aade:	2c00      	cmp	r4, #0
 800aae0:	d04b      	beq.n	800ab7a <_malloc_r+0xea>
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	4639      	mov	r1, r7
 800aae6:	4630      	mov	r0, r6
 800aae8:	eb04 0903 	add.w	r9, r4, r3
 800aaec:	f000 f864 	bl	800abb8 <_sbrk_r>
 800aaf0:	4581      	cmp	r9, r0
 800aaf2:	d142      	bne.n	800ab7a <_malloc_r+0xea>
 800aaf4:	6821      	ldr	r1, [r4, #0]
 800aaf6:	1a6d      	subs	r5, r5, r1
 800aaf8:	4629      	mov	r1, r5
 800aafa:	4630      	mov	r0, r6
 800aafc:	f7ff ffa6 	bl	800aa4c <sbrk_aligned>
 800ab00:	3001      	adds	r0, #1
 800ab02:	d03a      	beq.n	800ab7a <_malloc_r+0xea>
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	442b      	add	r3, r5
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab0e:	685a      	ldr	r2, [r3, #4]
 800ab10:	bb62      	cbnz	r2, 800ab6c <_malloc_r+0xdc>
 800ab12:	f8c8 7000 	str.w	r7, [r8]
 800ab16:	e00f      	b.n	800ab38 <_malloc_r+0xa8>
 800ab18:	6822      	ldr	r2, [r4, #0]
 800ab1a:	1b52      	subs	r2, r2, r5
 800ab1c:	d420      	bmi.n	800ab60 <_malloc_r+0xd0>
 800ab1e:	2a0b      	cmp	r2, #11
 800ab20:	d917      	bls.n	800ab52 <_malloc_r+0xc2>
 800ab22:	1961      	adds	r1, r4, r5
 800ab24:	42a3      	cmp	r3, r4
 800ab26:	6025      	str	r5, [r4, #0]
 800ab28:	bf18      	it	ne
 800ab2a:	6059      	strne	r1, [r3, #4]
 800ab2c:	6863      	ldr	r3, [r4, #4]
 800ab2e:	bf08      	it	eq
 800ab30:	f8c8 1000 	streq.w	r1, [r8]
 800ab34:	5162      	str	r2, [r4, r5]
 800ab36:	604b      	str	r3, [r1, #4]
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f000 f82f 	bl	800ab9c <__malloc_unlock>
 800ab3e:	f104 000b 	add.w	r0, r4, #11
 800ab42:	1d23      	adds	r3, r4, #4
 800ab44:	f020 0007 	bic.w	r0, r0, #7
 800ab48:	1ac2      	subs	r2, r0, r3
 800ab4a:	bf1c      	itt	ne
 800ab4c:	1a1b      	subne	r3, r3, r0
 800ab4e:	50a3      	strne	r3, [r4, r2]
 800ab50:	e7af      	b.n	800aab2 <_malloc_r+0x22>
 800ab52:	6862      	ldr	r2, [r4, #4]
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	bf0c      	ite	eq
 800ab58:	f8c8 2000 	streq.w	r2, [r8]
 800ab5c:	605a      	strne	r2, [r3, #4]
 800ab5e:	e7eb      	b.n	800ab38 <_malloc_r+0xa8>
 800ab60:	4623      	mov	r3, r4
 800ab62:	6864      	ldr	r4, [r4, #4]
 800ab64:	e7ae      	b.n	800aac4 <_malloc_r+0x34>
 800ab66:	463c      	mov	r4, r7
 800ab68:	687f      	ldr	r7, [r7, #4]
 800ab6a:	e7b6      	b.n	800aada <_malloc_r+0x4a>
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	d1fb      	bne.n	800ab6c <_malloc_r+0xdc>
 800ab74:	2300      	movs	r3, #0
 800ab76:	6053      	str	r3, [r2, #4]
 800ab78:	e7de      	b.n	800ab38 <_malloc_r+0xa8>
 800ab7a:	230c      	movs	r3, #12
 800ab7c:	6033      	str	r3, [r6, #0]
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f000 f80c 	bl	800ab9c <__malloc_unlock>
 800ab84:	e794      	b.n	800aab0 <_malloc_r+0x20>
 800ab86:	6005      	str	r5, [r0, #0]
 800ab88:	e7d6      	b.n	800ab38 <_malloc_r+0xa8>
 800ab8a:	bf00      	nop
 800ab8c:	2000467c 	.word	0x2000467c

0800ab90 <__malloc_lock>:
 800ab90:	4801      	ldr	r0, [pc, #4]	@ (800ab98 <__malloc_lock+0x8>)
 800ab92:	f000 b84b 	b.w	800ac2c <__retarget_lock_acquire_recursive>
 800ab96:	bf00      	nop
 800ab98:	200047bc 	.word	0x200047bc

0800ab9c <__malloc_unlock>:
 800ab9c:	4801      	ldr	r0, [pc, #4]	@ (800aba4 <__malloc_unlock+0x8>)
 800ab9e:	f000 b846 	b.w	800ac2e <__retarget_lock_release_recursive>
 800aba2:	bf00      	nop
 800aba4:	200047bc 	.word	0x200047bc

0800aba8 <memset>:
 800aba8:	4402      	add	r2, r0
 800abaa:	4603      	mov	r3, r0
 800abac:	4293      	cmp	r3, r2
 800abae:	d100      	bne.n	800abb2 <memset+0xa>
 800abb0:	4770      	bx	lr
 800abb2:	f803 1b01 	strb.w	r1, [r3], #1
 800abb6:	e7f9      	b.n	800abac <memset+0x4>

0800abb8 <_sbrk_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	4d06      	ldr	r5, [pc, #24]	@ (800abd4 <_sbrk_r+0x1c>)
 800abbc:	2300      	movs	r3, #0
 800abbe:	4604      	mov	r4, r0
 800abc0:	4608      	mov	r0, r1
 800abc2:	602b      	str	r3, [r5, #0]
 800abc4:	f7f7 fc36 	bl	8002434 <_sbrk>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_sbrk_r+0x1a>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_sbrk_r+0x1a>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	200047b8 	.word	0x200047b8

0800abd8 <__errno>:
 800abd8:	4b01      	ldr	r3, [pc, #4]	@ (800abe0 <__errno+0x8>)
 800abda:	6818      	ldr	r0, [r3, #0]
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	20000010 	.word	0x20000010

0800abe4 <__libc_init_array>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	4d0d      	ldr	r5, [pc, #52]	@ (800ac1c <__libc_init_array+0x38>)
 800abe8:	4c0d      	ldr	r4, [pc, #52]	@ (800ac20 <__libc_init_array+0x3c>)
 800abea:	1b64      	subs	r4, r4, r5
 800abec:	10a4      	asrs	r4, r4, #2
 800abee:	2600      	movs	r6, #0
 800abf0:	42a6      	cmp	r6, r4
 800abf2:	d109      	bne.n	800ac08 <__libc_init_array+0x24>
 800abf4:	4d0b      	ldr	r5, [pc, #44]	@ (800ac24 <__libc_init_array+0x40>)
 800abf6:	4c0c      	ldr	r4, [pc, #48]	@ (800ac28 <__libc_init_array+0x44>)
 800abf8:	f000 f864 	bl	800acc4 <_init>
 800abfc:	1b64      	subs	r4, r4, r5
 800abfe:	10a4      	asrs	r4, r4, #2
 800ac00:	2600      	movs	r6, #0
 800ac02:	42a6      	cmp	r6, r4
 800ac04:	d105      	bne.n	800ac12 <__libc_init_array+0x2e>
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac0c:	4798      	blx	r3
 800ac0e:	3601      	adds	r6, #1
 800ac10:	e7ee      	b.n	800abf0 <__libc_init_array+0xc>
 800ac12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac16:	4798      	blx	r3
 800ac18:	3601      	adds	r6, #1
 800ac1a:	e7f2      	b.n	800ac02 <__libc_init_array+0x1e>
 800ac1c:	0800ade4 	.word	0x0800ade4
 800ac20:	0800ade4 	.word	0x0800ade4
 800ac24:	0800ade4 	.word	0x0800ade4
 800ac28:	0800ade8 	.word	0x0800ade8

0800ac2c <__retarget_lock_acquire_recursive>:
 800ac2c:	4770      	bx	lr

0800ac2e <__retarget_lock_release_recursive>:
 800ac2e:	4770      	bx	lr

0800ac30 <_free_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4605      	mov	r5, r0
 800ac34:	2900      	cmp	r1, #0
 800ac36:	d041      	beq.n	800acbc <_free_r+0x8c>
 800ac38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac3c:	1f0c      	subs	r4, r1, #4
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	bfb8      	it	lt
 800ac42:	18e4      	addlt	r4, r4, r3
 800ac44:	f7ff ffa4 	bl	800ab90 <__malloc_lock>
 800ac48:	4a1d      	ldr	r2, [pc, #116]	@ (800acc0 <_free_r+0x90>)
 800ac4a:	6813      	ldr	r3, [r2, #0]
 800ac4c:	b933      	cbnz	r3, 800ac5c <_free_r+0x2c>
 800ac4e:	6063      	str	r3, [r4, #4]
 800ac50:	6014      	str	r4, [r2, #0]
 800ac52:	4628      	mov	r0, r5
 800ac54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac58:	f7ff bfa0 	b.w	800ab9c <__malloc_unlock>
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	d908      	bls.n	800ac72 <_free_r+0x42>
 800ac60:	6820      	ldr	r0, [r4, #0]
 800ac62:	1821      	adds	r1, r4, r0
 800ac64:	428b      	cmp	r3, r1
 800ac66:	bf01      	itttt	eq
 800ac68:	6819      	ldreq	r1, [r3, #0]
 800ac6a:	685b      	ldreq	r3, [r3, #4]
 800ac6c:	1809      	addeq	r1, r1, r0
 800ac6e:	6021      	streq	r1, [r4, #0]
 800ac70:	e7ed      	b.n	800ac4e <_free_r+0x1e>
 800ac72:	461a      	mov	r2, r3
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	b10b      	cbz	r3, 800ac7c <_free_r+0x4c>
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d9fa      	bls.n	800ac72 <_free_r+0x42>
 800ac7c:	6811      	ldr	r1, [r2, #0]
 800ac7e:	1850      	adds	r0, r2, r1
 800ac80:	42a0      	cmp	r0, r4
 800ac82:	d10b      	bne.n	800ac9c <_free_r+0x6c>
 800ac84:	6820      	ldr	r0, [r4, #0]
 800ac86:	4401      	add	r1, r0
 800ac88:	1850      	adds	r0, r2, r1
 800ac8a:	4283      	cmp	r3, r0
 800ac8c:	6011      	str	r1, [r2, #0]
 800ac8e:	d1e0      	bne.n	800ac52 <_free_r+0x22>
 800ac90:	6818      	ldr	r0, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	6053      	str	r3, [r2, #4]
 800ac96:	4408      	add	r0, r1
 800ac98:	6010      	str	r0, [r2, #0]
 800ac9a:	e7da      	b.n	800ac52 <_free_r+0x22>
 800ac9c:	d902      	bls.n	800aca4 <_free_r+0x74>
 800ac9e:	230c      	movs	r3, #12
 800aca0:	602b      	str	r3, [r5, #0]
 800aca2:	e7d6      	b.n	800ac52 <_free_r+0x22>
 800aca4:	6820      	ldr	r0, [r4, #0]
 800aca6:	1821      	adds	r1, r4, r0
 800aca8:	428b      	cmp	r3, r1
 800acaa:	bf04      	itt	eq
 800acac:	6819      	ldreq	r1, [r3, #0]
 800acae:	685b      	ldreq	r3, [r3, #4]
 800acb0:	6063      	str	r3, [r4, #4]
 800acb2:	bf04      	itt	eq
 800acb4:	1809      	addeq	r1, r1, r0
 800acb6:	6021      	streq	r1, [r4, #0]
 800acb8:	6054      	str	r4, [r2, #4]
 800acba:	e7ca      	b.n	800ac52 <_free_r+0x22>
 800acbc:	bd38      	pop	{r3, r4, r5, pc}
 800acbe:	bf00      	nop
 800acc0:	2000467c 	.word	0x2000467c

0800acc4 <_init>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	bf00      	nop
 800acc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acca:	bc08      	pop	{r3}
 800accc:	469e      	mov	lr, r3
 800acce:	4770      	bx	lr

0800acd0 <_fini>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	bf00      	nop
 800acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd6:	bc08      	pop	{r3}
 800acd8:	469e      	mov	lr, r3
 800acda:	4770      	bx	lr
