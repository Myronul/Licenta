
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  0800ca84  0800ca84  0000da84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9dc  0800d9dc  0000f068  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9dc  0800d9dc  0000e9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9e4  0800d9e4  0000f068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9e4  0800d9e4  0000e9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9e8  0800d9e8  0000e9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800d9ec  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f068  2**0
                  CONTENTS
 10 .bss          000006b4  20000068  20000068  0000f068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000071c  2000071c  0000f068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a5e1  00000000  00000000  0000f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d2a  00000000  00000000  00029679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e0  00000000  00000000  0002d3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000127d  00000000  00000000  0002eb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b3b  00000000  00000000  0002fe05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f824  00000000  00000000  00055940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6b2a  00000000  00000000  00075164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014bc8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006854  00000000  00000000  0014bcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00152528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ca6c 	.word	0x0800ca6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800ca6c 	.word	0x0800ca6c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <play_audio_file>:

static uint32_t *buffer; /*Buffer pentru redare audio folosit static in fisier*/


void play_audio_file(char *path)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 80004d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004d4:	f00c f922 	bl	800c71c <malloc>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4b32      	ldr	r3, [pc, #200]	@ (80005a8 <play_audio_file+0xe0>)
 80004de:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	73fb      	strb	r3, [r7, #15]

	if(buffer == NULL)
 80004e4:	4b30      	ldr	r3, [pc, #192]	@ (80005a8 <play_audio_file+0xe0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d058      	beq.n	800059e <play_audio_file+0xd6>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 80004ec:	4b2e      	ldr	r3, [pc, #184]	@ (80005a8 <play_audio_file+0xe0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f107 020f 	add.w	r2, r7, #15
 80004f4:	4619      	mov	r1, r3
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f002 f81e 	bl	8002538 <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 80004fc:	4b2a      	ldr	r3, [pc, #168]	@ (80005a8 <play_audio_file+0xe0>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	2300      	movs	r3, #0
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000508:	2100      	movs	r1, #0
 800050a:	4828      	ldr	r0, [pc, #160]	@ (80005ac <play_audio_file+0xe4>)
 800050c:	f003 fb3a 	bl	8003b84 <HAL_DAC_Start_DMA>

	while(!flagAudioDone)
 8000510:	e029      	b.n	8000566 <play_audio_file+0x9e>
	{
		read_audio_file(path, buffer+1024, &flagAudioDone);
 8000512:	4b25      	ldr	r3, [pc, #148]	@ (80005a8 <play_audio_file+0xe0>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800051a:	f107 020f 	add.w	r2, r7, #15
 800051e:	4619      	mov	r1, r3
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f002 f809 	bl	8002538 <read_audio_file>
		while(flagDmaDAC == 0);
 8000526:	bf00      	nop
 8000528:	4b21      	ldr	r3, [pc, #132]	@ (80005b0 <play_audio_file+0xe8>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f083 0301 	eor.w	r3, r3, #1
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b00      	cmp	r3, #0
 8000536:	d1f7      	bne.n	8000528 <play_audio_file+0x60>
		flagDmaDAC = 0;
 8000538:	4b1d      	ldr	r3, [pc, #116]	@ (80005b0 <play_audio_file+0xe8>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer, &flagAudioDone);
 800053e:	4b1a      	ldr	r3, [pc, #104]	@ (80005a8 <play_audio_file+0xe0>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f107 020f 	add.w	r2, r7, #15
 8000546:	4619      	mov	r1, r3
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f001 fff5 	bl	8002538 <read_audio_file>
		while(flagDmaDAC == 0);
 800054e:	bf00      	nop
 8000550:	4b17      	ldr	r3, [pc, #92]	@ (80005b0 <play_audio_file+0xe8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	f083 0301 	eor.w	r3, r3, #1
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f7      	bne.n	8000550 <play_audio_file+0x88>
		flagDmaDAC = 0;
 8000560:	4b13      	ldr	r3, [pc, #76]	@ (80005b0 <play_audio_file+0xe8>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone)
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	f083 0301 	eor.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1cf      	bne.n	8000512 <play_audio_file+0x4a>

	}

	while(flagDmaDAC == 0);
 8000572:	bf00      	nop
 8000574:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <play_audio_file+0xe8>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f083 0301 	eor.w	r3, r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f7      	bne.n	8000574 <play_audio_file+0xac>
	flagDmaDAC = 0;
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <play_audio_file+0xe8>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800058a:	2100      	movs	r1, #0
 800058c:	4807      	ldr	r0, [pc, #28]	@ (80005ac <play_audio_file+0xe4>)
 800058e:	f003 fbbb 	bl	8003d08 <HAL_DAC_Stop_DMA>

	free(buffer);
 8000592:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <play_audio_file+0xe0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f00c f8c8 	bl	800c72c <free>
 800059c:	e000      	b.n	80005a0 <play_audio_file+0xd8>
		return;
 800059e:	bf00      	nop

}
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000084 	.word	0x20000084
 80005ac:	20000088 	.word	0x20000088
 80005b0:	2000032a 	.word	0x2000032a

080005b4 <convert_color_16_to_18>:

extern SPI_HandleTypeDef hspi1;
volatile extern uint8_t flagDmaSpiTx;

void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	0adb      	lsrs	r3, r3, #11
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	115b      	asrs	r3, r3, #5
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005d2:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 031f 	and.w	r3, r3, #31
 80005dc:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 80005de:	7bfa      	ldrb	r2, [r7, #15]
 80005e0:	4613      	mov	r3, r2
 80005e2:	019b      	lsls	r3, r3, #6
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	4a16      	ldr	r2, [pc, #88]	@ (8000640 <convert_color_16_to_18+0x8c>)
 80005e8:	fb82 1203 	smull	r1, r2, r2, r3
 80005ec:	441a      	add	r2, r3
 80005ee:	1112      	asrs	r2, r2, #4
 80005f0:	17db      	asrs	r3, r3, #31
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8000600:	7b7a      	ldrb	r2, [r7, #13]
 8000602:	4613      	mov	r3, r2
 8000604:	019b      	lsls	r3, r3, #6
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	4a0d      	ldr	r2, [pc, #52]	@ (8000640 <convert_color_16_to_18+0x8c>)
 800060a:	fb82 1203 	smull	r1, r2, r2, r3
 800060e:	441a      	add	r2, r3
 8000610:	1112      	asrs	r2, r2, #4
 8000612:	17db      	asrs	r3, r3, #31
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	7bfa      	ldrb	r2, [r7, #15]
 8000620:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	7bba      	ldrb	r2, [r7, #14]
 8000628:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	3302      	adds	r3, #2
 800062e:	7b7a      	ldrb	r2, [r7, #13]
 8000630:	701a      	strb	r2, [r3, #0]

}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	84210843 	.word	0x84210843

08000644 <write_color>:


void write_color(uint16_t color)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 800064e:	f107 020c 	add.w	r2, r7, #12
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffac 	bl	80005b4 <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 800065c:	f107 010c 	add.w	r1, r7, #12
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	2203      	movs	r2, #3
 8000666:	4803      	ldr	r0, [pc, #12]	@ (8000674 <write_color+0x30>)
 8000668:	f005 ff03 	bl	8006472 <HAL_SPI_Transmit>


}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000180 	.word	0x20000180

08000678 <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b085      	sub	sp, #20
 800067c:	af02      	add	r7, sp, #8
 800067e:	4603      	mov	r3, r0
 8000680:	80fb      	strh	r3, [r7, #6]
 8000682:	460b      	mov	r3, r1
 8000684:	80bb      	strh	r3, [r7, #4]
 8000686:	4613      	mov	r3, r2
 8000688:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 800068a:	88bb      	ldrh	r3, [r7, #4]
 800068c:	88fa      	ldrh	r2, [r7, #6]
 800068e:	88b9      	ldrh	r1, [r7, #4]
 8000690:	88f8      	ldrh	r0, [r7, #6]
 8000692:	2477      	movs	r4, #119	@ 0x77
 8000694:	9400      	str	r4, [sp, #0]
 8000696:	f001 f907 	bl	80018a8 <set_adress_window>

	DC_DATA();
 800069a:	2201      	movs	r2, #1
 800069c:	2108      	movs	r1, #8
 800069e:	480a      	ldr	r0, [pc, #40]	@ (80006c8 <draw_pixel+0x50>)
 80006a0:	f004 fa14 	bl	8004acc <HAL_GPIO_WritePin>
	CS_A();
 80006a4:	2200      	movs	r2, #0
 80006a6:	2110      	movs	r1, #16
 80006a8:	4807      	ldr	r0, [pc, #28]	@ (80006c8 <draw_pixel+0x50>)
 80006aa:	f004 fa0f 	bl	8004acc <HAL_GPIO_WritePin>

	write_color(color);
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffc7 	bl	8000644 <write_color>

	CS_D();
 80006b6:	2201      	movs	r2, #1
 80006b8:	2110      	movs	r1, #16
 80006ba:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <draw_pixel+0x50>)
 80006bc:	f004 fa06 	bl	8004acc <HAL_GPIO_WritePin>

}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd90      	pop	{r4, r7, pc}
 80006c8:	40020c00 	.word	0x40020c00

080006cc <draw_pixel_data>:


static inline void draw_pixel_data(uint16_t x, uint16_t y, uint8_t *data)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	4603      	mov	r3, r0
 80006d4:	603a      	str	r2, [r7, #0]
 80006d6:	80fb      	strh	r3, [r7, #6]
 80006d8:	460b      	mov	r3, r1
 80006da:	80bb      	strh	r3, [r7, #4]
	set_adress_window(x,y,x,y, 'w');
 80006dc:	88bb      	ldrh	r3, [r7, #4]
 80006de:	88fa      	ldrh	r2, [r7, #6]
 80006e0:	88b9      	ldrh	r1, [r7, #4]
 80006e2:	88f8      	ldrh	r0, [r7, #6]
 80006e4:	2477      	movs	r4, #119	@ 0x77
 80006e6:	9400      	str	r4, [sp, #0]
 80006e8:	f001 f8de 	bl	80018a8 <set_adress_window>

	DC_DATA();
 80006ec:	2201      	movs	r2, #1
 80006ee:	2108      	movs	r1, #8
 80006f0:	480b      	ldr	r0, [pc, #44]	@ (8000720 <draw_pixel_data+0x54>)
 80006f2:	f004 f9eb 	bl	8004acc <HAL_GPIO_WritePin>
	CS_A();
 80006f6:	2200      	movs	r2, #0
 80006f8:	2110      	movs	r1, #16
 80006fa:	4809      	ldr	r0, [pc, #36]	@ (8000720 <draw_pixel_data+0x54>)
 80006fc:	f004 f9e6 	bl	8004acc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	2203      	movs	r2, #3
 8000706:	6839      	ldr	r1, [r7, #0]
 8000708:	4806      	ldr	r0, [pc, #24]	@ (8000724 <draw_pixel_data+0x58>)
 800070a:	f005 feb2 	bl	8006472 <HAL_SPI_Transmit>

	CS_D();
 800070e:	2201      	movs	r2, #1
 8000710:	2110      	movs	r1, #16
 8000712:	4803      	ldr	r0, [pc, #12]	@ (8000720 <draw_pixel_data+0x54>)
 8000714:	f004 f9da 	bl	8004acc <HAL_GPIO_WritePin>

}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	40020c00 	.word	0x40020c00
 8000724:	20000180 	.word	0x20000180

08000728 <fill_screen1>:



void fill_screen1(uint16_t color)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af02      	add	r7, sp, #8
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000732:	f107 020c 	add.w	r2, r7, #12
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff3a 	bl	80005b4 <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 8000740:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8000744:	f00b ffea 	bl	800c71c <malloc>
 8000748:	4603      	mov	r3, r0
 800074a:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 800074c:	2377      	movs	r3, #119	@ 0x77
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	f240 13df 	movw	r3, #479	@ 0x1df
 8000754:	f240 123f 	movw	r2, #319	@ 0x13f
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f001 f8a4 	bl	80018a8 <set_adress_window>

	DC_DATA();
 8000760:	2201      	movs	r2, #1
 8000762:	2108      	movs	r1, #8
 8000764:	481e      	ldr	r0, [pc, #120]	@ (80007e0 <fill_screen1+0xb8>)
 8000766:	f004 f9b1 	bl	8004acc <HAL_GPIO_WritePin>
	CS_A();
 800076a:	2200      	movs	r2, #0
 800076c:	2110      	movs	r1, #16
 800076e:	481c      	ldr	r0, [pc, #112]	@ (80007e0 <fill_screen1+0xb8>)
 8000770:	f004 f9ac 	bl	8004acc <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8000774:	2300      	movs	r3, #0
 8000776:	82fb      	strh	r3, [r7, #22]
 8000778:	e00f      	b.n	800079a <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 800077a:	8afa      	ldrh	r2, [r7, #22]
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	4413      	add	r3, r2
 8000786:	461a      	mov	r2, r3
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	8819      	ldrh	r1, [r3, #0]
 800078e:	789b      	ldrb	r3, [r3, #2]
 8000790:	8011      	strh	r1, [r2, #0]
 8000792:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 8000794:	8afb      	ldrh	r3, [r7, #22]
 8000796:	3301      	adds	r3, #1
 8000798:	82fb      	strh	r3, [r7, #22]
 800079a:	8afb      	ldrh	r3, [r7, #22]
 800079c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80007a0:	d3eb      	bcc.n	800077a <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	82bb      	strh	r3, [r7, #20]
 80007a6:	e00a      	b.n	80007be <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80007b0:	6939      	ldr	r1, [r7, #16]
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <fill_screen1+0xbc>)
 80007b4:	f005 fe5d 	bl	8006472 <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 80007b8:	8abb      	ldrh	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	82bb      	strh	r3, [r7, #20]
 80007be:	8abb      	ldrh	r3, [r7, #20]
 80007c0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80007c4:	d3f0      	bcc.n	80007a8 <fill_screen1+0x80>

	}

	free(line);
 80007c6:	6938      	ldr	r0, [r7, #16]
 80007c8:	f00b ffb0 	bl	800c72c <free>

	CS_D();
 80007cc:	2201      	movs	r2, #1
 80007ce:	2110      	movs	r1, #16
 80007d0:	4803      	ldr	r0, [pc, #12]	@ (80007e0 <fill_screen1+0xb8>)
 80007d2:	f004 f97b 	bl	8004acc <HAL_GPIO_WritePin>

}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40020c00 	.word	0x40020c00
 80007e4:	20000180 	.word	0x20000180

080007e8 <fill_screen2>:


void fill_screen2(uint16_t color)
{
 80007e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007ec:	b08f      	sub	sp, #60	@ 0x3c
 80007ee:	af02      	add	r7, sp, #8
 80007f0:	4603      	mov	r3, r0
 80007f2:	80fb      	strh	r3, [r7, #6]
 80007f4:	466b      	mov	r3, sp
 80007f6:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 80007f8:	2377      	movs	r3, #119	@ 0x77
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	f240 13df 	movw	r3, #479	@ 0x1df
 8000800:	f240 123f 	movw	r2, #319	@ 0x13f
 8000804:	2100      	movs	r1, #0
 8000806:	2000      	movs	r0, #0
 8000808:	f001 f84e 	bl	80018a8 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 800080c:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8000812:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8000816:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	0adb      	lsrs	r3, r3, #11
 800081c:	b29b      	uxth	r3, r3
 800081e:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	115b      	asrs	r3, r3, #5
 8000824:	b2db      	uxtb	r3, r3
 8000826:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800082a:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8000836:	7ffa      	ldrb	r2, [r7, #31]
 8000838:	4613      	mov	r3, r2
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	4a4f      	ldr	r2, [pc, #316]	@ (800097c <fill_screen2+0x194>)
 8000840:	fb82 1203 	smull	r1, r2, r2, r3
 8000844:	441a      	add	r2, r3
 8000846:	1112      	asrs	r2, r2, #4
 8000848:	17db      	asrs	r3, r3, #31
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 800084e:	7fba      	ldrb	r2, [r7, #30]
 8000850:	4613      	mov	r3, r2
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	1a9b      	subs	r3, r3, r2
 8000856:	4a4a      	ldr	r2, [pc, #296]	@ (8000980 <fill_screen2+0x198>)
 8000858:	fb82 1203 	smull	r1, r2, r2, r3
 800085c:	441a      	add	r2, r3
 800085e:	1152      	asrs	r2, r2, #5
 8000860:	17db      	asrs	r3, r3, #31
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 8000866:	7f7a      	ldrb	r2, [r7, #29]
 8000868:	4613      	mov	r3, r2
 800086a:	021b      	lsls	r3, r3, #8
 800086c:	1a9b      	subs	r3, r3, r2
 800086e:	4a43      	ldr	r2, [pc, #268]	@ (800097c <fill_screen2+0x194>)
 8000870:	fb82 1203 	smull	r1, r2, r2, r3
 8000874:	441a      	add	r2, r3
 8000876:	1112      	asrs	r2, r2, #4
 8000878:	17db      	asrs	r3, r3, #31
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 800087e:	2201      	movs	r2, #1
 8000880:	2108      	movs	r1, #8
 8000882:	4840      	ldr	r0, [pc, #256]	@ (8000984 <fill_screen2+0x19c>)
 8000884:	f004 f922 	bl	8004acc <HAL_GPIO_WritePin>
	CS_A();
 8000888:	2200      	movs	r2, #0
 800088a:	2110      	movs	r1, #16
 800088c:	483d      	ldr	r0, [pc, #244]	@ (8000984 <fill_screen2+0x19c>)
 800088e:	f004 f91d 	bl	8004acc <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 8000892:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000894:	460b      	mov	r3, r1
 8000896:	3b01      	subs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	2300      	movs	r3, #0
 800089c:	4688      	mov	r8, r1
 800089e:	4699      	mov	r9, r3
 80008a0:	f04f 0200 	mov.w	r2, #0
 80008a4:	f04f 0300 	mov.w	r3, #0
 80008a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008b4:	2300      	movs	r3, #0
 80008b6:	460c      	mov	r4, r1
 80008b8:	461d      	mov	r5, r3
 80008ba:	f04f 0200 	mov.w	r2, #0
 80008be:	f04f 0300 	mov.w	r3, #0
 80008c2:	00eb      	lsls	r3, r5, #3
 80008c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008c8:	00e2      	lsls	r2, r4, #3
 80008ca:	1dcb      	adds	r3, r1, #7
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	ebad 0d03 	sub.w	sp, sp, r3
 80008d4:	ab02      	add	r3, sp, #8
 80008d6:	3300      	adds	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008de:	e011      	b.n	8000904 <fill_screen2+0x11c>
	{
		frame[j] = r;
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008e4:	4413      	add	r3, r2
 80008e6:	7ffa      	ldrb	r2, [r7, #31]
 80008e8:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 80008ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ec:	3301      	adds	r3, #1
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	7fb9      	ldrb	r1, [r7, #30]
 80008f2:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 80008f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008f6:	3302      	adds	r3, #2
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	7f79      	ldrb	r1, [r7, #29]
 80008fc:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 80008fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000900:	3303      	adds	r3, #3
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000908:	429a      	cmp	r2, r3
 800090a:	d3e9      	bcc.n	80008e0 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 800090c:	6a3a      	ldr	r2, [r7, #32]
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <fill_screen2+0x1a0>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800092a:	e012      	b.n	8000952 <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 800092c:	bf00      	nop
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <fill_screen2+0x1a0>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d0fa      	beq.n	800092e <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <fill_screen2+0x1a0>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 800093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000940:	b29b      	uxth	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	6979      	ldr	r1, [r7, #20]
 8000946:	4811      	ldr	r0, [pc, #68]	@ (800098c <fill_screen2+0x1a4>)
 8000948:	f006 f99a 	bl	8006c80 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 800094c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094e:	3301      	adds	r3, #1
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	429a      	cmp	r2, r3
 8000958:	d3e8      	bcc.n	800092c <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 800095a:	bf00      	nop
 800095c:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <fill_screen2+0x1a0>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0fa      	beq.n	800095c <fill_screen2+0x174>
	CS_D();
 8000966:	2201      	movs	r2, #1
 8000968:	2110      	movs	r1, #16
 800096a:	4806      	ldr	r0, [pc, #24]	@ (8000984 <fill_screen2+0x19c>)
 800096c:	f004 f8ae 	bl	8004acc <HAL_GPIO_WritePin>
 8000970:	46b5      	mov	sp, r6
}
 8000972:	bf00      	nop
 8000974:	3734      	adds	r7, #52	@ 0x34
 8000976:	46bd      	mov	sp, r7
 8000978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800097c:	84210843 	.word	0x84210843
 8000980:	82082083 	.word	0x82082083
 8000984:	40020c00 	.word	0x40020c00
 8000988:	20000328 	.word	0x20000328
 800098c:	20000180 	.word	0x20000180

08000990 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b089      	sub	sp, #36	@ 0x24
 8000994:	af02      	add	r7, sp, #8
 8000996:	4604      	mov	r4, r0
 8000998:	4608      	mov	r0, r1
 800099a:	4611      	mov	r1, r2
 800099c:	461a      	mov	r2, r3
 800099e:	4623      	mov	r3, r4
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4603      	mov	r3, r0
 80009a4:	80bb      	strh	r3, [r7, #4]
 80009a6:	460b      	mov	r3, r1
 80009a8:	70fb      	strb	r3, [r7, #3]
 80009aa:	4613      	mov	r3, r2
 80009ac:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 80009ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000a98 <print_character+0x108>)
 80009b0:	889a      	ldrh	r2, [r3, #4]
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	4413      	add	r3, r2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b29c      	uxth	r4, r3
 80009bc:	4b36      	ldr	r3, [pc, #216]	@ (8000a98 <print_character+0x108>)
 80009be:	88da      	ldrh	r2, [r3, #6]
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	3b01      	subs	r3, #1
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	88b9      	ldrh	r1, [r7, #4]
 80009cc:	88f8      	ldrh	r0, [r7, #6]
 80009ce:	2277      	movs	r2, #119	@ 0x77
 80009d0:	9200      	str	r2, [sp, #0]
 80009d2:	4622      	mov	r2, r4
 80009d4:	f000 ff68 	bl	80018a8 <set_adress_window>

	uint16_t mask = 0x8000;
 80009d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009dc:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 80009e2:	f107 020c 	add.w	r2, r7, #12
 80009e6:	883b      	ldrh	r3, [r7, #0]
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fde2 	bl	80005b4 <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 80009f0:	f107 0208 	add.w	r2, r7, #8
 80009f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fddb 	bl	80005b4 <convert_color_16_to_18>


	DC_DATA();
 80009fe:	2201      	movs	r2, #1
 8000a00:	2108      	movs	r1, #8
 8000a02:	4826      	ldr	r0, [pc, #152]	@ (8000a9c <print_character+0x10c>)
 8000a04:	f004 f862 	bl	8004acc <HAL_GPIO_WritePin>
	CS_A();
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4823      	ldr	r0, [pc, #140]	@ (8000a9c <print_character+0x10c>)
 8000a0e:	f004 f85d 	bl	8004acc <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	75fb      	strb	r3, [r7, #23]
 8000a16:	e030      	b.n	8000a7a <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <print_character+0x108>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	3b20      	subs	r3, #32
 8000a20:	491d      	ldr	r1, [pc, #116]	@ (8000a98 <print_character+0x108>)
 8000a22:	88c9      	ldrh	r1, [r1, #6]
 8000a24:	fb03 f101 	mul.w	r1, r3, r1
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	440b      	add	r3, r1
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	75bb      	strb	r3, [r7, #22]
 8000a38:	e016      	b.n	8000a68 <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 8000a3a:	8a7a      	ldrh	r2, [r7, #18]
 8000a3c:	7dbb      	ldrb	r3, [r7, #22]
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	8abb      	ldrh	r3, [r7, #20]
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d006      	beq.n	8000a56 <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fd92 	bl	8001578 <LCD_send_data_multi>
 8000a54:	e005      	b.n	8000a62 <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	2103      	movs	r1, #3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fd8b 	bl	8001578 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 8000a62:	7dbb      	ldrb	r3, [r7, #22]
 8000a64:	3301      	adds	r3, #1
 8000a66:	75bb      	strb	r3, [r7, #22]
 8000a68:	7dbb      	ldrb	r3, [r7, #22]
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <print_character+0x108>)
 8000a6e:	889b      	ldrh	r3, [r3, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3e2      	bcc.n	8000a3a <print_character+0xaa>
	for(i=0; i<font.height; i++)
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	3301      	adds	r3, #1
 8000a78:	75fb      	strb	r3, [r7, #23]
 8000a7a:	7dfb      	ldrb	r3, [r7, #23]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <print_character+0x108>)
 8000a80:	88db      	ldrh	r3, [r3, #6]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d3c8      	bcc.n	8000a18 <print_character+0x88>
			}
		}
	}

	CS_D();
 8000a86:	2201      	movs	r2, #1
 8000a88:	2110      	movs	r1, #16
 8000a8a:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <print_character+0x10c>)
 8000a8c:	f004 f81e 	bl	8004acc <HAL_GPIO_WritePin>

}
 8000a90:	bf00      	nop
 8000a92:	371c      	adds	r7, #28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af02      	add	r7, sp, #8
 8000aa6:	60ba      	str	r2, [r7, #8]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4603      	mov	r3, r0
 8000aac:	81fb      	strh	r3, [r7, #14]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	81bb      	strh	r3, [r7, #12]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 8000aba:	e027      	b.n	8000b0c <print_string+0x6c>
	{
		if(x + font.width > 320)
 8000abc:	89fb      	ldrh	r3, [r7, #14]
 8000abe:	4a19      	ldr	r2, [pc, #100]	@ (8000b24 <print_string+0x84>)
 8000ac0:	8892      	ldrh	r2, [r2, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ac8:	dd07      	ble.n	8000ada <print_string+0x3a>
		{
			x = font.width;
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <print_string+0x84>)
 8000acc:	889b      	ldrh	r3, [r3, #4]
 8000ace:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <print_string+0x84>)
 8000ad2:	88da      	ldrh	r2, [r3, #6]
 8000ad4:	89bb      	ldrh	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 8000ada:	89bb      	ldrh	r3, [r7, #12]
 8000adc:	4a11      	ldr	r2, [pc, #68]	@ (8000b24 <print_string+0x84>)
 8000ade:	88d2      	ldrh	r2, [r2, #6]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000ae6:	dc18      	bgt.n	8000b1a <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000aee:	89b9      	ldrh	r1, [r7, #12]
 8000af0:	89f8      	ldrh	r0, [r7, #14]
 8000af2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	4623      	mov	r3, r4
 8000af8:	f7ff ff4a 	bl	8000990 <print_character>
		string++;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	3301      	adds	r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <print_string+0x84>)
 8000b04:	889a      	ldrh	r2, [r3, #4]
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	4413      	add	r3, r2
 8000b0a:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	4413      	add	r3, r2
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d3d1      	bcc.n	8000abc <print_string+0x1c>
 8000b18:	e000      	b.n	8000b1c <print_string+0x7c>
			return;
 8000b1a:	bf00      	nop
	}

}
 8000b1c:	371c      	adds	r7, #28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000000 	.word	0x20000000

08000b28 <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4608      	mov	r0, r1
 8000b32:	4611      	mov	r1, r2
 8000b34:	461a      	mov	r2, r3
 8000b36:	4623      	mov	r3, r4
 8000b38:	80fb      	strh	r3, [r7, #6]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80bb      	strh	r3, [r7, #4]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	807b      	strh	r3, [r7, #2]
 8000b42:	4613      	mov	r3, r2
 8000b44:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000b46:	88fa      	ldrh	r2, [r7, #6]
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	88bb      	ldrh	r3, [r7, #4]
 8000b56:	88b9      	ldrh	r1, [r7, #4]
 8000b58:	88f8      	ldrh	r0, [r7, #6]
 8000b5a:	2477      	movs	r4, #119	@ 0x77
 8000b5c:	9400      	str	r4, [sp, #0]
 8000b5e:	f000 fea3 	bl	80018a8 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000b62:	f107 0208 	add.w	r2, r7, #8
 8000b66:	883b      	ldrh	r3, [r7, #0]
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fd22 	bl	80005b4 <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	81fb      	strh	r3, [r7, #14]
 8000b74:	e008      	b.n	8000b88 <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fcfb 	bl	8001578 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	3301      	adds	r3, #1
 8000b86:	81fb      	strh	r3, [r7, #14]
 8000b88:	89fa      	ldrh	r2, [r7, #14]
 8000b8a:	8879      	ldrh	r1, [r7, #2]
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	1acb      	subs	r3, r1, r3
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf0      	blt.n	8000b76 <draw_horizontal_line+0x4e>
	}


}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd90      	pop	{r4, r7, pc}

08000b9e <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000b9e:	b590      	push	{r4, r7, lr}
 8000ba0:	b087      	sub	sp, #28
 8000ba2:	af02      	add	r7, sp, #8
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4611      	mov	r1, r2
 8000baa:	461a      	mov	r2, r3
 8000bac:	4623      	mov	r3, r4
 8000bae:	80fb      	strh	r3, [r7, #6]
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	80bb      	strh	r3, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000bbc:	88ba      	ldrh	r2, [r7, #4]
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	88fa      	ldrh	r2, [r7, #6]
 8000bcc:	88b9      	ldrh	r1, [r7, #4]
 8000bce:	88f8      	ldrh	r0, [r7, #6]
 8000bd0:	2477      	movs	r4, #119	@ 0x77
 8000bd2:	9400      	str	r4, [sp, #0]
 8000bd4:	f000 fe68 	bl	80018a8 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000bd8:	f107 0208 	add.w	r2, r7, #8
 8000bdc:	883b      	ldrh	r3, [r7, #0]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fce7 	bl	80005b4 <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	81fb      	strh	r3, [r7, #14]
 8000bea:	e008      	b.n	8000bfe <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fcc0 	bl	8001578 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	81fb      	strh	r3, [r7, #14]
 8000bfe:	89fa      	ldrh	r2, [r7, #14]
 8000c00:	8879      	ldrh	r1, [r7, #2]
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	1acb      	subs	r3, r1, r3
 8000c06:	429a      	cmp	r2, r3
 8000c08:	dbf0      	blt.n	8000bec <draw_vertical_line+0x4e>
	}


}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}

08000c14 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b089      	sub	sp, #36	@ 0x24
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4623      	mov	r3, r4
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	4603      	mov	r3, r0
 8000c28:	80bb      	strh	r3, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	807b      	strh	r3, [r7, #2]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	883b      	ldrh	r3, [r7, #0]
 8000c36:	fb12 f303 	smulbb	r3, r2, r3
 8000c3a:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8000c3c:	f107 020c 	add.w	r2, r7, #12
 8000c40:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fcb5 	bl	80005b4 <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8000c4a:	8aba      	ldrh	r2, [r7, #20]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00b fd62 	bl	800c71c <malloc>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	82fb      	strh	r3, [r7, #22]
 8000c60:	e00f      	b.n	8000c82 <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000c62:	8afa      	ldrh	r2, [r7, #22]
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	8819      	ldrh	r1, [r3, #0]
 8000c76:	789b      	ldrb	r3, [r3, #2]
 8000c78:	8011      	strh	r1, [r2, #0]
 8000c7a:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8000c7c:	8afb      	ldrh	r3, [r7, #22]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	82fb      	strh	r3, [r7, #22]
 8000c82:	8afa      	ldrh	r2, [r7, #22]
 8000c84:	8abb      	ldrh	r3, [r7, #20]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3eb      	bcc.n	8000c62 <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8000c8a:	88fa      	ldrh	r2, [r7, #6]
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	4413      	add	r3, r2
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	3b01      	subs	r3, #1
 8000c94:	b29c      	uxth	r4, r3
 8000c96:	88ba      	ldrh	r2, [r7, #4]
 8000c98:	883b      	ldrh	r3, [r7, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	88b9      	ldrh	r1, [r7, #4]
 8000ca4:	88f8      	ldrh	r0, [r7, #6]
 8000ca6:	2277      	movs	r2, #119	@ 0x77
 8000ca8:	9200      	str	r2, [sp, #0]
 8000caa:	4622      	mov	r2, r4
 8000cac:	f000 fdfc 	bl	80018a8 <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000cb0:	8aba      	ldrh	r2, [r7, #20]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4619      	mov	r1, r3
 8000cba:	6938      	ldr	r0, [r7, #16]
 8000cbc:	f000 fc5c 	bl	8001578 <LCD_send_data_multi>

	free(data);
 8000cc0:	6938      	ldr	r0, [r7, #16]
 8000cc2:	f00b fd33 	bl	800c72c <free>

}
 8000cc6:	bf00      	nop
 8000cc8:	371c      	adds	r7, #28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd90      	pop	{r4, r7, pc}
	...

08000cd0 <draw_entity>:


void draw_entity(ENTITY *entity, char *filePathName)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]

	if((entity->id != 0) || (filePathName==NULL))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <draw_entity+0x1c>
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d163      	bne.n	8000db4 <draw_entity+0xe4>
	{
		/*Avem imagine monocolor sub 32x32 -> imagine nu se afla pe cardul SD!*/

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	fb12 f303 	smulbb	r3, r2, r3
 8000d00:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->color, pixel);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	895b      	ldrh	r3, [r3, #10]
 8000d06:	f107 020c 	add.w	r2, r7, #12
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fc51 	bl	80005b4 <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8000d12:	8aba      	ldrh	r2, [r7, #20]
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00b fcfe 	bl	800c71c <malloc>
 8000d20:	4603      	mov	r3, r0
 8000d22:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8000d24:	2300      	movs	r3, #0
 8000d26:	82fb      	strh	r3, [r7, #22]
 8000d28:	e00f      	b.n	8000d4a <draw_entity+0x7a>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000d2a:	8afa      	ldrh	r2, [r7, #22]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4413      	add	r3, r2
 8000d36:	461a      	mov	r2, r3
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	789b      	ldrb	r3, [r3, #2]
 8000d40:	8011      	strh	r1, [r2, #0]
 8000d42:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8000d44:	8afb      	ldrh	r3, [r7, #22]
 8000d46:	3301      	adds	r3, #1
 8000d48:	82fb      	strh	r3, [r7, #22]
 8000d4a:	8afa      	ldrh	r2, [r7, #22]
 8000d4c:	8abb      	ldrh	r3, [r7, #20]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d3eb      	bcc.n	8000d2a <draw_entity+0x5a>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d58:	b298      	uxth	r0, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d60:	b299      	uxth	r1, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	4413      	add	r3, r2
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3b01      	subs	r3, #1
 8000d78:	b29c      	uxth	r4, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	2277      	movs	r2, #119	@ 0x77
 8000d94:	9200      	str	r2, [sp, #0]
 8000d96:	4622      	mov	r2, r4
 8000d98:	f000 fd86 	bl	80018a8 <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000d9c:	8aba      	ldrh	r2, [r7, #20]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	6938      	ldr	r0, [r7, #16]
 8000da8:	f000 fbe6 	bl	8001578 <LCD_send_data_multi>

		free(data);
 8000dac:	6938      	ldr	r0, [r7, #16]
 8000dae:	f00b fcbd 	bl	800c72c <free>
	{
 8000db2:	e084      	b.n	8000ebe <draw_entity+0x1ee>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 8000db4:	2300      	movs	r3, #0
 8000db6:	817b      	strh	r3, [r7, #10]

		read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000db8:	f107 030f 	add.w	r3, r7, #15
 8000dbc:	f107 020a 	add.w	r2, r7, #10
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	6838      	ldr	r0, [r7, #0]
 8000dc4:	f001 fcf0 	bl	80027a8 <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dce:	b298      	uxth	r0, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dd6:	b299      	uxth	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	3b01      	subs	r3, #1
 8000dee:	b29c      	uxth	r4, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4413      	add	r3, r2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	3b01      	subs	r3, #1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	2277      	movs	r2, #119	@ 0x77
 8000e0a:	9200      	str	r2, [sp, #0]
 8000e0c:	4622      	mov	r2, r4
 8000e0e:	f000 fd4b 	bl	80018a8 <set_adress_window>

		DC_DATA();
 8000e12:	2201      	movs	r2, #1
 8000e14:	2108      	movs	r1, #8
 8000e16:	482b      	ldr	r0, [pc, #172]	@ (8000ec4 <draw_entity+0x1f4>)
 8000e18:	f003 fe58 	bl	8004acc <HAL_GPIO_WritePin>
		CS_A();
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2110      	movs	r1, #16
 8000e20:	4828      	ldr	r0, [pc, #160]	@ (8000ec4 <draw_entity+0x1f4>)
 8000e22:	f003 fe53 	bl	8004acc <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 8000e26:	897b      	ldrh	r3, [r7, #10]
 8000e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000e2c:	d20c      	bcs.n	8000e48 <draw_entity+0x178>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->data, byteNr);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	897a      	ldrh	r2, [r7, #10]
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fb9e 	bl	8001578 <LCD_send_data_multi>
			free(entity->data);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f00b fc73 	bl	800c72c <free>
 8000e46:	e03a      	b.n	8000ebe <draw_entity+0x1ee>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <draw_entity+0x1f8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	897a      	ldrh	r2, [r7, #10]
 8000e54:	4619      	mov	r1, r3
 8000e56:	481d      	ldr	r0, [pc, #116]	@ (8000ecc <draw_entity+0x1fc>)
 8000e58:	f005 ff12 	bl	8006c80 <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d11c      	bne.n	8000e9c <draw_entity+0x1cc>
				{
					break;
				}

				read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000e62:	f107 030f 	add.w	r3, r7, #15
 8000e66:	f107 020a 	add.w	r2, r7, #10
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f001 fc9b 	bl	80027a8 <read_image_file>

				while(flagDmaSpiTx == 0);
 8000e72:	bf00      	nop
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <draw_entity+0x1f8>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0fa      	beq.n	8000e74 <draw_entity+0x1a4>
				flagDmaSpiTx = 0;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <draw_entity+0x1f8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	897a      	ldrh	r2, [r7, #10]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480f      	ldr	r0, [pc, #60]	@ (8000ecc <draw_entity+0x1fc>)
 8000e8e:	f005 fef7 	bl	8006c80 <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8000e92:	897b      	ldrh	r3, [r7, #10]
 8000e94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000e98:	d2e0      	bcs.n	8000e5c <draw_entity+0x18c>
 8000e9a:	e000      	b.n	8000e9e <draw_entity+0x1ce>
					break;
 8000e9c:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8000e9e:	bf00      	nop
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <draw_entity+0x1f8>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0fa      	beq.n	8000ea0 <draw_entity+0x1d0>
		free(entity->data);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f00b fc3c 	bl	800c72c <free>
		CS_D();
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <draw_entity+0x1f4>)
 8000eba:	f003 fe07 	bl	8004acc <HAL_GPIO_WritePin>

	}


}
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd90      	pop	{r4, r7, pc}
 8000ec4:	40020c00 	.word	0x40020c00
 8000ec8:	20000328 	.word	0x20000328
 8000ecc:	20000180 	.word	0x20000180

08000ed0 <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b08c      	sub	sp, #48	@ 0x30
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	4603      	mov	r3, r0
 8000ee0:	817b      	strh	r3, [r7, #10]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	813b      	strh	r3, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	 * de afisat
	 * Momentan de rezumam la un exemplu simplu pentru a demonstra functionalitatea
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 8000eea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f2c0 80e6 	blt.w	80010c0 <translation_entity+0x1f0>
 8000ef4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ef8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000efc:	f300 80e0 	bgt.w	80010c0 <translation_entity+0x1f0>
 8000f00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f2c0 80db 	blt.w	80010c0 <translation_entity+0x1f0>
 8000f0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f0e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000f12:	f300 80d5 	bgt.w	80010c0 <translation_entity+0x1f0>

		return;
	}


	ENTITY temp = *entity;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f107 0414 	add.w	r4, r7, #20
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f22:	682b      	ldr	r3, [r5, #0]
 8000f24:	6023      	str	r3, [r4, #0]

	entity->x0 = x;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	897a      	ldrh	r2, [r7, #10]
 8000f2a:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	893a      	ldrh	r2, [r7, #8]
 8000f30:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8000f32:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f36:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d157      	bne.n	8000fee <translation_entity+0x11e>
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d054      	beq.n	8000fee <translation_entity+0x11e>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8000f44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f52:	440b      	add	r3, r1
 8000f54:	429a      	cmp	r2, r3
 8000f56:	da1d      	bge.n	8000f94 <translation_entity+0xc4>
 8000f58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f5c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dd17      	ble.n	8000f94 <translation_entity+0xc4>
		{
			/*Pentru cazul deplasarii pe +x*/
			draw_entity(entity, NULL);
 8000f64:	2100      	movs	r1, #0
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff feb2 	bl	8000cd0 <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, 0xFFFF); /*Culoare background*/
 8000f6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f70:	b298      	uxth	r0, r3
 8000f72:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f76:	b299      	uxth	r1, r3
 8000f78:	897a      	ldrh	r2, [r7, #10]
 8000f7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000f8e:	9400      	str	r4, [sp, #0]
 8000f90:	f7ff fe40 	bl	8000c14 <draw_rectangle>
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000f94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f98:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f280 8091 	bge.w	80010c4 <translation_entity+0x1f4>
 8000fa2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fa6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000faa:	4413      	add	r3, r2
 8000fac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	f340 8087 	ble.w	80010c4 <translation_entity+0x1f4>
		{
			/*Pentru cazul deplasarii pe -x*/
			draw_entity(entity, NULL);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f7ff fe89 	bl	8000cd0 <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, 0xFFFF); /*Culoare background*/
 8000fbe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	897b      	ldrh	r3, [r7, #10]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b298      	uxth	r0, r3
 8000fca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fce:	b299      	uxth	r1, r3
 8000fd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	897b      	ldrh	r3, [r7, #10]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000fe6:	9400      	str	r4, [sp, #0]
 8000fe8:	f7ff fe14 	bl	8000c14 <draw_rectangle>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000fec:	e06a      	b.n	80010c4 <translation_entity+0x1f4>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8000fee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ff2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d157      	bne.n	80010aa <translation_entity+0x1da>
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d054      	beq.n	80010aa <translation_entity+0x1da>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8001000:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001004:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001008:	4619      	mov	r1, r3
 800100a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800100e:	440b      	add	r3, r1
 8001010:	429a      	cmp	r2, r3
 8001012:	da1e      	bge.n	8001052 <translation_entity+0x182>
 8001014:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001018:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800101c:	429a      	cmp	r2, r3
 800101e:	dd18      	ble.n	8001052 <translation_entity+0x182>
			{
				/*Pentru cazul deplasarii pe +y*/
				draw_entity(entity, NULL);
 8001020:	2100      	movs	r1, #0
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff fe54 	bl	8000cd0 <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, 0xFFFF);
 8001028:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800102c:	b298      	uxth	r0, r3
 800102e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001032:	b299      	uxth	r1, r3
 8001034:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001038:	b29c      	uxth	r4, r3
 800103a:	893a      	ldrh	r2, [r7, #8]
 800103c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001040:	b29b      	uxth	r3, r3
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	b29b      	uxth	r3, r3
 8001046:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800104a:	9200      	str	r2, [sp, #0]
 800104c:	4622      	mov	r2, r4
 800104e:	f7ff fde1 	bl	8000c14 <draw_rectangle>
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001052:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001056:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800105a:	429a      	cmp	r2, r3
 800105c:	da34      	bge.n	80010c8 <translation_entity+0x1f8>
 800105e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001062:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001066:	4413      	add	r3, r2
 8001068:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800106c:	4293      	cmp	r3, r2
 800106e:	dd2b      	ble.n	80010c8 <translation_entity+0x1f8>
			{
				/*Pentru cazul deplasarii pe -y*/
				draw_entity(entity, NULL);
 8001070:	2100      	movs	r1, #0
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f7ff fe2c 	bl	8000cd0 <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, 0xFFFF);
 8001078:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800107c:	b298      	uxth	r0, r3
 800107e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001082:	b29a      	uxth	r2, r3
 8001084:	893b      	ldrh	r3, [r7, #8]
 8001086:	4413      	add	r3, r2
 8001088:	b299      	uxth	r1, r3
 800108a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800108e:	b29c      	uxth	r4, r3
 8001090:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001094:	b29a      	uxth	r2, r3
 8001096:	893b      	ldrh	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010a0:	9200      	str	r2, [sp, #0]
 80010a2:	4622      	mov	r2, r4
 80010a4:	f7ff fdb6 	bl	8000c14 <draw_rectangle>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 80010a8:	e00e      	b.n	80010c8 <translation_entity+0x1f8>

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/

			draw_entity(entity, NULL);
 80010aa:	2100      	movs	r1, #0
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff fe0f 	bl	8000cd0 <draw_entity>
			draw_entity(&temp, NULL);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fe09 	bl	8000cd0 <draw_entity>
 80010be:	e004      	b.n	80010ca <translation_entity+0x1fa>
		return;
 80010c0:	bf00      	nop
 80010c2:	e002      	b.n	80010ca <translation_entity+0x1fa>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 80010c4:	bf00      	nop
 80010c6:	e000      	b.n	80010ca <translation_entity+0x1fa>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 80010c8:	bf00      	nop
		}


}
 80010ca:	3728      	adds	r7, #40	@ 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bdb0      	pop	{r4, r5, r7, pc}

080010d0 <scaling_entity>:
	}
}


void scaling_entity(ENTITY *entity, const float factor, char *filePathName, char *fileName)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b093      	sub	sp, #76	@ 0x4c
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80010dc:	6079      	str	r1, [r7, #4]
 80010de:	603a      	str	r2, [r7, #0]
	 * de scalat
	 */

	FRESULT res;
	char *scalFilePath;
	char *tempFile = "graphic/scalare/temp.bin";
 80010e0:	4baa      	ldr	r3, [pc, #680]	@ (800138c <scaling_entity+0x2bc>)
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	scalFilePath = assign_filePath("graphic/scalare/");
 80010e4:	48aa      	ldr	r0, [pc, #680]	@ (8001390 <scaling_entity+0x2c0>)
 80010e6:	f001 fa02 	bl	80024ee <assign_filePath>
 80010ea:	62b8      	str	r0, [r7, #40]	@ 0x28
	scalFilePath = realloc(scalFilePath, strlen(scalFilePath)+ strlen(fileName) +1 );
 80010ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80010ee:	f7ff f86b 	bl	80001c8 <strlen>
 80010f2:	4604      	mov	r4, r0
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f7ff f867 	bl	80001c8 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4423      	add	r3, r4
 80010fe:	3301      	adds	r3, #1
 8001100:	4619      	mov	r1, r3
 8001102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001104:	f00b fbc8 	bl	800c898 <realloc>
 8001108:	62b8      	str	r0, [r7, #40]	@ 0x28
	strcat(scalFilePath, fileName);
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800110e:	f00b fc01 	bl	800c914 <strcat>

	uint16_t x = 0; /*nr d elinii de prelucrat din M1 ai sa avem 32x32 pixeli de prelucrat in M2*/
 8001112:	2300      	movs	r3, #0
 8001114:	827b      	strh	r3, [r7, #18]
	bool flagTerm = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	747b      	strb	r3, [r7, #17]

	int i = 0; /*indexi de referinta in M2*/
 800111a:	2300      	movs	r3, #0
 800111c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int j = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	@ 0x38
	int ik = 0; /*indexi de referinta in M1*/
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
	int jk = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]

	bool flagPixel = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	uint8_t *data = malloc(sizeof(uint8_t)*3072);
 8001130:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001134:	f00b faf2 	bl	800c71c <malloc>
 8001138:	4603      	mov	r3, r0
 800113a:	61fb      	str	r3, [r7, #28]
	int16_t x1 = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	837b      	strh	r3, [r7, #26]
	int16_t y1 = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	833b      	strh	r3, [r7, #24]
	int16_t index = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	82fb      	strh	r3, [r7, #22]

	x1 = (int16_t)((entity->x1)*factor);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001156:	edd7 7a02 	vldr	s15, [r7, #8]
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001162:	ee17 3a90 	vmov	r3, s15
 8001166:	837b      	strh	r3, [r7, #26]
	y1 = (int16_t)((entity->y1)*factor);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001176:	edd7 7a02 	vldr	s15, [r7, #8]
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001182:	ee17 3a90 	vmov	r3, s15
 8001186:	833b      	strh	r3, [r7, #24]



	while(!flagTerm)
 8001188:	e0d1      	b.n	800132e <scaling_entity+0x25e>
	{
		read_image_file_scaling(filePathName, entity, factor, &x, &flagTerm);
 800118a:	f107 0311 	add.w	r3, r7, #17
 800118e:	f107 0212 	add.w	r2, r7, #18
 8001192:	ed97 0a02 	vldr	s0, [r7, #8]
 8001196:	68f9      	ldr	r1, [r7, #12]
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f001 fd75 	bl	8002c88 <read_image_file_scaling>

		i = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		j = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	63bb      	str	r3, [r7, #56]	@ 0x38

		ik = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
		jk = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]

		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80011b2:	e07d      	b.n	80012b0 <scaling_entity+0x1e0>
		{
			/*
			 * Parcurgem frameul asociat matricei scalate M2
			 */

			if((k%(x1*3)==0) && (k!=0))
 80011b4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	441a      	add	r2, r3
 80011be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80011c4:	fb01 f202 	mul.w	r2, r1, r2
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d107      	bne.n	80011de <scaling_entity+0x10e>
 80011ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <scaling_entity+0x10e>
			{
				/*
				 * new line
				 */

				i++;
 80011d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011d6:	3301      	adds	r3, #1
 80011d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
				j = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			if(k%3 == 0)
 80011de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80011e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001394 <scaling_entity+0x2c4>)
 80011e2:	fb83 3201 	smull	r3, r2, r3, r1
 80011e6:	17cb      	asrs	r3, r1, #31
 80011e8:	1ad2      	subs	r2, r2, r3
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	1aca      	subs	r2, r1, r3
 80011f2:	2a00      	cmp	r2, #0
 80011f4:	d102      	bne.n	80011fc <scaling_entity+0x12c>
			{
				flagPixel = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}

			if(flagPixel == 1)
 80011fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001200:	2b00      	cmp	r3, #0
 8001202:	d052      	beq.n	80012aa <scaling_entity+0x1da>
			{
				ik = (int)i/factor;
 8001204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800120e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121a:	ee17 3a90 	vmov	r3, s15
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
				jk = (int)j/factor;
 8001220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800122a:	ed97 7a02 	vldr	s14, [r7, #8]
 800122e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001236:	ee17 3a90 	vmov	r3, s15
 800123a:	623b      	str	r3, [r7, #32]

				index = ik*(entity->x1)*3 + jk*3; /*index normat la M1*/
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001242:	461a      	mov	r2, r3
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	fb03 f202 	mul.w	r2, r3, r2
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	4413      	add	r3, r2
 800124e:	b29b      	uxth	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	0052      	lsls	r2, r2, #1
 8001254:	4413      	add	r3, r2
 8001256:	b29b      	uxth	r3, r3
 8001258:	82fb      	strh	r3, [r7, #22]

				data[k] = entity->data[index];
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001262:	441a      	add	r2, r3
 8001264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001266:	69f9      	ldr	r1, [r7, #28]
 8001268:	440b      	add	r3, r1
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	701a      	strb	r2, [r3, #0]
				data[k+1] = entity->data[index + 1];
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001276:	3301      	adds	r3, #1
 8001278:	441a      	add	r2, r3
 800127a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800127c:	3301      	adds	r3, #1
 800127e:	69f9      	ldr	r1, [r7, #28]
 8001280:	440b      	add	r3, r1
 8001282:	7812      	ldrb	r2, [r2, #0]
 8001284:	701a      	strb	r2, [r3, #0]
				data[k+2] = entity->data[index + 2];
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800128e:	3302      	adds	r3, #2
 8001290:	441a      	add	r2, r3
 8001292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001294:	3302      	adds	r3, #2
 8001296:	69f9      	ldr	r1, [r7, #28]
 8001298:	440b      	add	r3, r1
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	701a      	strb	r2, [r3, #0]

				j++;
 800129e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012a0:	3301      	adds	r3, #1
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
				flagPixel = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 80012aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ac:	3301      	adds	r3, #1
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80012b0:	8a7b      	ldrh	r3, [r7, #18]
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80012be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80012d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012de:	ee17 2a90 	vmov	r2, s15
 80012e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012e4:	4293      	cmp	r3, r2
 80012e6:	f6ff af65 	blt.w	80011b4 <scaling_entity+0xe4>
		/*
		 * Scriem in fisier datele obitnute din frame-ul curent in fisiserul aferent.
		 * Fisiserul va fi salvat in folderul de scalare
		 */

		write_image_file(tempFile, data, (int)(x1*factor)*x*3, x1, y1, flagTerm);
 80012ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 2a90 	vmov	r2, s15
 8001306:	8a7b      	ldrh	r3, [r7, #18]
 8001308:	fb03 f202 	mul.w	r2, r3, r2
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	4619      	mov	r1, r3
 8001314:	7c7b      	ldrb	r3, [r7, #17]
 8001316:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4613      	mov	r3, r2
 8001324:	460a      	mov	r2, r1
 8001326:	69f9      	ldr	r1, [r7, #28]
 8001328:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800132a:	f001 feab 	bl	8003084 <write_image_file>
	while(!flagTerm)
 800132e:	7c7b      	ldrb	r3, [r7, #17]
 8001330:	f083 0301 	eor.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f af27 	bne.w	800118a <scaling_entity+0xba>
	 * renumind fisiserul tempFile in care ne-am scris datele din temp.bin in
	 * numele aferent acestuia stocat in scalFilePath
	 */


	res = f_unlink(scalFilePath);
 800133c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800133e:	f00a ffec 	bl	800c31a <f_unlink>
 8001342:	4603      	mov	r3, r0
 8001344:	757b      	strb	r3, [r7, #21]

	if((res != FR_OK) && (res != FR_NO_FILE))
 8001346:	7d7b      	ldrb	r3, [r7, #21]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <scaling_entity+0x282>
 800134c:	7d7b      	ldrb	r3, [r7, #21]
 800134e:	2b04      	cmp	r3, #4
 8001350:	d115      	bne.n	800137e <scaling_entity+0x2ae>
	{
		return;
	}

	res = f_rename(tempFile, scalFilePath);
 8001352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001354:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001356:	f00b f88b 	bl	800c470 <f_rename>
 800135a:	4603      	mov	r3, r0
 800135c:	757b      	strb	r3, [r7, #21]

	if(res != FR_OK)
 800135e:	7d7b      	ldrb	r3, [r7, #21]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10e      	bne.n	8001382 <scaling_entity+0x2b2>
	 * Atribuim noile valori entitatii prelucrate
	 */

	//free(entity->filePathName);

	entity->x1=x1;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8b7a      	ldrh	r2, [r7, #26]
 8001368:	80da      	strh	r2, [r3, #6]
	entity->y1=y1;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8b3a      	ldrh	r2, [r7, #24]
 800136e:	811a      	strh	r2, [r3, #8]
	entity->filePathName = scalFilePath;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001374:	611a      	str	r2, [r3, #16]

	free(data);
 8001376:	69f8      	ldr	r0, [r7, #28]
 8001378:	f00b f9d8 	bl	800c72c <free>
 800137c:	e002      	b.n	8001384 <scaling_entity+0x2b4>
		return;
 800137e:	bf00      	nop
 8001380:	e000      	b.n	8001384 <scaling_entity+0x2b4>
		return;
 8001382:	bf00      	nop
	//free(entity->data);

}
 8001384:	3744      	adds	r7, #68	@ 0x44
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}
 800138a:	bf00      	nop
 800138c:	0800ca84 	.word	0x0800ca84
 8001390:	0800caa0 	.word	0x0800caa0
 8001394:	55555556 	.word	0x55555556

08001398 <rotate_entity>:


void rotate_entity(ENTITY *entity, int theta)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	 * Output: Void
	 */

	/*Aflam initial coordonatele pivotului de referinta*/

	const int16_t pivotX = entity->x0 + (int16_t)(entity->x1/2);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013b0:	0fd9      	lsrs	r1, r3, #31
 80013b2:	440b      	add	r3, r1
 80013b4:	105b      	asrs	r3, r3, #1
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	b29b      	uxth	r3, r3
 80013be:	82fb      	strh	r3, [r7, #22]
	const int16_t pivotY = entity->y0 + (int16_t)(entity->y1/2);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013ce:	0fd9      	lsrs	r1, r3, #31
 80013d0:	440b      	add	r3, r1
 80013d2:	105b      	asrs	r3, r3, #1
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4413      	add	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	82bb      	strh	r3, [r7, #20]

	int16_t i = (int16_t)(-(entity->y1/2));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013e4:	0fda      	lsrs	r2, r3, #31
 80013e6:	4413      	add	r3, r2
 80013e8:	105b      	asrs	r3, r3, #1
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	425b      	negs	r3, r3
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	83fb      	strh	r3, [r7, #30]
	int16_t j = (int16_t)(-(entity->x1/2));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013fa:	0fda      	lsrs	r2, r3, #31
 80013fc:	4413      	add	r3, r2
 80013fe:	105b      	asrs	r3, r3, #1
 8001400:	b21b      	sxth	r3, r3
 8001402:	b29b      	uxth	r3, r3
 8001404:	425b      	negs	r3, r3
 8001406:	b29b      	uxth	r3, r3
 8001408:	83bb      	strh	r3, [r7, #28]

	int16_t rotPosX = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	827b      	strh	r3, [r7, #18]
	int16_t rotPosY = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	823b      	strh	r3, [r7, #16]

	bool flagImgDone = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
	bool flagPixel = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	76fb      	strb	r3, [r7, #27]
	uint16_t byteNr = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	81bb      	strh	r3, [r7, #12]

	uint8_t pixel[3];


	while(!flagImgDone)
 800141e:	e075      	b.n	800150c <rotate_entity+0x174>
	{
		read_image_file(entity->filePathName, entity, &byteNr, &flagImgDone);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6918      	ldr	r0, [r3, #16]
 8001424:	f107 030f 	add.w	r3, r7, #15
 8001428:	f107 020c 	add.w	r2, r7, #12
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	f001 f9bb 	bl	80027a8 <read_image_file>


		for(int16_t k = 0; k<byteNr; k++)
 8001432:	2300      	movs	r3, #0
 8001434:	833b      	strh	r3, [r7, #24]
 8001436:	e064      	b.n	8001502 <rotate_entity+0x16a>
		{
			if(j == (entity->x1/2))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800143e:	0fda      	lsrs	r2, r3, #31
 8001440:	4413      	add	r3, r2
 8001442:	105b      	asrs	r3, r3, #1
 8001444:	b21b      	sxth	r3, r3
 8001446:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800144a:	429a      	cmp	r2, r3
 800144c:	d110      	bne.n	8001470 <rotate_entity+0xd8>
			{
				i++;
 800144e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001452:	b29b      	uxth	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	b29b      	uxth	r3, r3
 8001458:	83fb      	strh	r3, [r7, #30]
				j = (int16_t)(-(entity->x1/2));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001460:	0fda      	lsrs	r2, r3, #31
 8001462:	4413      	add	r3, r2
 8001464:	105b      	asrs	r3, r3, #1
 8001466:	b21b      	sxth	r3, r3
 8001468:	b29b      	uxth	r3, r3
 800146a:	425b      	negs	r3, r3
 800146c:	b29b      	uxth	r3, r3
 800146e:	83bb      	strh	r3, [r7, #28]

			}

			if(k%3 == 0)
 8001470:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <rotate_entity+0x194>)
 8001476:	fb83 3102 	smull	r3, r1, r3, r2
 800147a:	17d3      	asrs	r3, r2, #31
 800147c:	1ac9      	subs	r1, r1, r3
 800147e:	460b      	mov	r3, r1
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	440b      	add	r3, r1
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	b21b      	sxth	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <rotate_entity+0xf8>
			{
				flagPixel = 1;
 800148c:	2301      	movs	r3, #1
 800148e:	76fb      	strb	r3, [r7, #27]
			}

			if(flagPixel == 1)
 8001490:	7efb      	ldrb	r3, [r7, #27]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d02f      	beq.n	80014f6 <rotate_entity+0x15e>
			{
				pixel[0] = entity->data[k];
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	723b      	strb	r3, [r7, #8]
				pixel[1] = entity->data[k+1];
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	727b      	strb	r3, [r7, #9]
				pixel[2] = entity->data[k+2];
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014bc:	3302      	adds	r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	72bb      	strb	r3, [r7, #10]

				/*Test pentru 90 de grade*/

				rotPosX = -i + pivotX;
 80014c4:	8afa      	ldrh	r2, [r7, #22]
 80014c6:	8bfb      	ldrh	r3, [r7, #30]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	827b      	strh	r3, [r7, #18]
				rotPosY =  j + pivotY;
 80014ce:	8bba      	ldrh	r2, [r7, #28]
 80014d0:	8abb      	ldrh	r3, [r7, #20]
 80014d2:	4413      	add	r3, r2
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	823b      	strh	r3, [r7, #16]

				draw_pixel_data(rotPosX, rotPosY, pixel);
 80014d8:	8a7b      	ldrh	r3, [r7, #18]
 80014da:	8a39      	ldrh	r1, [r7, #16]
 80014dc:	f107 0208 	add.w	r2, r7, #8
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f8f3 	bl	80006cc <draw_pixel_data>

				j++;
 80014e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3301      	adds	r3, #1
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	83bb      	strh	r3, [r7, #28]
				flagPixel = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	76fb      	strb	r3, [r7, #27]
		for(int16_t k = 0; k<byteNr; k++)
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	b29b      	uxth	r3, r3
 8001500:	833b      	strh	r3, [r7, #24]
 8001502:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001506:	89ba      	ldrh	r2, [r7, #12]
 8001508:	4293      	cmp	r3, r2
 800150a:	db95      	blt.n	8001438 <rotate_entity+0xa0>
	while(!flagImgDone)
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f083 0301 	eor.w	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d183      	bne.n	8001420 <rotate_entity+0x88>

		}
	}


	free(entity->data);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4618      	mov	r0, r3
 800151e:	f00b f905 	bl	800c72c <free>

}
 8001522:	bf00      	nop
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	55555556 	.word	0x55555556

08001530 <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 800153a:	2200      	movs	r2, #0
 800153c:	2108      	movs	r1, #8
 800153e:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LCD_send_command+0x40>)
 8001540:	f003 fac4 	bl	8004acc <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8001544:	2200      	movs	r2, #0
 8001546:	2110      	movs	r1, #16
 8001548:	4809      	ldr	r0, [pc, #36]	@ (8001570 <LCD_send_command+0x40>)
 800154a:	f003 fabf 	bl	8004acc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 800154e:	1df9      	adds	r1, r7, #7
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	2201      	movs	r2, #1
 8001556:	4807      	ldr	r0, [pc, #28]	@ (8001574 <LCD_send_command+0x44>)
 8001558:	f004 ff8b 	bl	8006472 <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 800155c:	2201      	movs	r2, #1
 800155e:	2110      	movs	r1, #16
 8001560:	4803      	ldr	r0, [pc, #12]	@ (8001570 <LCD_send_command+0x40>)
 8001562:	f003 fab3 	bl	8004acc <HAL_GPIO_WritePin>


}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40020c00 	.word	0x40020c00
 8001574:	20000180 	.word	0x20000180

08001578 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 8001582:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <LCD_send_data_multi+0xdc>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 8001588:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800158c:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	fbb3 f2f2 	udiv	r2, r3, r2
 80015a0:	6939      	ldr	r1, [r7, #16]
 80015a2:	fb01 f202 	mul.w	r2, r1, r2
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 80015aa:	2201      	movs	r2, #1
 80015ac:	2108      	movs	r1, #8
 80015ae:	482a      	ldr	r0, [pc, #168]	@ (8001658 <LCD_send_data_multi+0xe0>)
 80015b0:	f003 fa8c 	bl	8004acc <HAL_GPIO_WritePin>
	CS_A();
 80015b4:	2200      	movs	r2, #0
 80015b6:	2110      	movs	r1, #16
 80015b8:	4827      	ldr	r0, [pc, #156]	@ (8001658 <LCD_send_data_multi+0xe0>)
 80015ba:	f003 fa87 	bl	8004acc <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d821      	bhi.n	800160a <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 80015c6:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <LCD_send_data_multi+0xdc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4821      	ldr	r0, [pc, #132]	@ (800165c <LCD_send_data_multi+0xe4>)
 80015d6:	f005 fb53 	bl	8006c80 <HAL_SPI_Transmit_DMA>
 80015da:	e02c      	b.n	8001636 <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 80015dc:	bf00      	nop
 80015de:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <LCD_send_data_multi+0xdc>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0fa      	beq.n	80015de <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <LCD_send_data_multi+0xdc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4819      	ldr	r0, [pc, #100]	@ (800165c <LCD_send_data_multi+0xe4>)
 80015f8:	f005 fb42 	bl	8006c80 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4413      	add	r3, r2
 8001602:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3b01      	subs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e5      	bne.n	80015dc <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00f      	beq.n	8001636 <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 8001616:	bf00      	nop
 8001618:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <LCD_send_data_multi+0xdc>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0fa      	beq.n	8001618 <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <LCD_send_data_multi+0xdc>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	b29b      	uxth	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	480a      	ldr	r0, [pc, #40]	@ (800165c <LCD_send_data_multi+0xe4>)
 8001632:	f005 fb25 	bl	8006c80 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 8001636:	bf00      	nop
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <LCD_send_data_multi+0xdc>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0fa      	beq.n	8001638 <LCD_send_data_multi+0xc0>
	CS_D();
 8001642:	2201      	movs	r2, #1
 8001644:	2110      	movs	r1, #16
 8001646:	4804      	ldr	r0, [pc, #16]	@ (8001658 <LCD_send_data_multi+0xe0>)
 8001648:	f003 fa40 	bl	8004acc <HAL_GPIO_WritePin>

}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000328 	.word	0x20000328
 8001658:	40020c00 	.word	0x40020c00
 800165c:	20000180 	.word	0x20000180

08001660 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 800166a:	2201      	movs	r2, #1
 800166c:	2108      	movs	r1, #8
 800166e:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <LCD_send_data+0x40>)
 8001670:	f003 fa2c 	bl	8004acc <HAL_GPIO_WritePin>
	CS_A();
 8001674:	2200      	movs	r2, #0
 8001676:	2110      	movs	r1, #16
 8001678:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <LCD_send_data+0x40>)
 800167a:	f003 fa27 	bl	8004acc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 800167e:	1df9      	adds	r1, r7, #7
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	2201      	movs	r2, #1
 8001686:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <LCD_send_data+0x44>)
 8001688:	f004 fef3 	bl	8006472 <HAL_SPI_Transmit>

	CS_D();
 800168c:	2201      	movs	r2, #1
 800168e:	2110      	movs	r1, #16
 8001690:	4803      	ldr	r0, [pc, #12]	@ (80016a0 <LCD_send_data+0x40>)
 8001692:	f003 fa1b 	bl	8004acc <HAL_GPIO_WritePin>

}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	20000180 	.word	0x20000180

080016a8 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 80016ac:	2200      	movs	r2, #0
 80016ae:	2140      	movs	r1, #64	@ 0x40
 80016b0:	487c      	ldr	r0, [pc, #496]	@ (80018a4 <ILI9488_driver_init+0x1fc>)
 80016b2:	f003 fa0b 	bl	8004acc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016b6:	200a      	movs	r0, #10
 80016b8:	f002 f90c 	bl	80038d4 <HAL_Delay>
	RST_D();
 80016bc:	2201      	movs	r2, #1
 80016be:	2140      	movs	r1, #64	@ 0x40
 80016c0:	4878      	ldr	r0, [pc, #480]	@ (80018a4 <ILI9488_driver_init+0x1fc>)
 80016c2:	f003 fa03 	bl	8004acc <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff ff32 	bl	8001530 <LCD_send_command>
	HAL_Delay(150);
 80016cc:	2096      	movs	r0, #150	@ 0x96
 80016ce:	f002 f901 	bl	80038d4 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 80016d2:	2011      	movs	r0, #17
 80016d4:	f7ff ff2c 	bl	8001530 <LCD_send_command>
	HAL_Delay(255);
 80016d8:	20ff      	movs	r0, #255	@ 0xff
 80016da:	f002 f8fb 	bl	80038d4 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 80016de:	20e0      	movs	r0, #224	@ 0xe0
 80016e0:	f7ff ff26 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff ffbb 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0C);
 80016ea:	200c      	movs	r0, #12
 80016ec:	f7ff ffb8 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x05);
 80016f0:	2005      	movs	r0, #5
 80016f2:	f7ff ffb5 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x04);
 80016f6:	2004      	movs	r0, #4
 80016f8:	f7ff ffb2 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0F);
 80016fc:	200f      	movs	r0, #15
 80016fe:	f7ff ffaf 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x06);
 8001702:	2006      	movs	r0, #6
 8001704:	f7ff ffac 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x3A);
 8001708:	203a      	movs	r0, #58	@ 0x3a
 800170a:	f7ff ffa9 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x56);
 800170e:	2056      	movs	r0, #86	@ 0x56
 8001710:	f7ff ffa6 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x4D);
 8001714:	204d      	movs	r0, #77	@ 0x4d
 8001716:	f7ff ffa3 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x03);
 800171a:	2003      	movs	r0, #3
 800171c:	f7ff ffa0 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0A);
 8001720:	200a      	movs	r0, #10
 8001722:	f7ff ff9d 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x06);
 8001726:	2006      	movs	r0, #6
 8001728:	f7ff ff9a 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x30);
 800172c:	2030      	movs	r0, #48	@ 0x30
 800172e:	f7ff ff97 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x3E);
 8001732:	203e      	movs	r0, #62	@ 0x3e
 8001734:	f7ff ff94 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0F);
 8001738:	200f      	movs	r0, #15
 800173a:	f7ff ff91 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 800173e:	20e1      	movs	r0, #225	@ 0xe1
 8001740:	f7ff fef6 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x00);
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff ff8b 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x13);
 800174a:	2013      	movs	r0, #19
 800174c:	f7ff ff88 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x18);
 8001750:	2018      	movs	r0, #24
 8001752:	f7ff ff85 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x01);
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff ff82 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x11);
 800175c:	2011      	movs	r0, #17
 800175e:	f7ff ff7f 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x06);
 8001762:	2006      	movs	r0, #6
 8001764:	f7ff ff7c 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x38);
 8001768:	2038      	movs	r0, #56	@ 0x38
 800176a:	f7ff ff79 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x34);
 800176e:	2034      	movs	r0, #52	@ 0x34
 8001770:	f7ff ff76 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x4D);
 8001774:	204d      	movs	r0, #77	@ 0x4d
 8001776:	f7ff ff73 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x06);
 800177a:	2006      	movs	r0, #6
 800177c:	f7ff ff70 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0D);
 8001780:	200d      	movs	r0, #13
 8001782:	f7ff ff6d 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0B);
 8001786:	200b      	movs	r0, #11
 8001788:	f7ff ff6a 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x31);
 800178c:	2031      	movs	r0, #49	@ 0x31
 800178e:	f7ff ff67 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x37);
 8001792:	2037      	movs	r0, #55	@ 0x37
 8001794:	f7ff ff64 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0F);
 8001798:	200f      	movs	r0, #15
 800179a:	f7ff ff61 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 800179e:	20c0      	movs	r0, #192	@ 0xc0
 80017a0:	f7ff fec6 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x18);
 80017a4:	2018      	movs	r0, #24
 80017a6:	f7ff ff5b 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x16);
 80017aa:	2016      	movs	r0, #22
 80017ac:	f7ff ff58 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 80017b0:	20c1      	movs	r0, #193	@ 0xc1
 80017b2:	f7ff febd 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x45);
 80017b6:	2045      	movs	r0, #69	@ 0x45
 80017b8:	f7ff ff52 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 80017bc:	20c2      	movs	r0, #194	@ 0xc2
 80017be:	f7ff feb7 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x33);
 80017c2:	2033      	movs	r0, #51	@ 0x33
 80017c4:	f7ff ff4c 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 80017c8:	20c3      	movs	r0, #195	@ 0xc3
 80017ca:	f7ff feb1 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x33);
 80017ce:	2033      	movs	r0, #51	@ 0x33
 80017d0:	f7ff ff46 	bl	8001660 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 80017d4:	2036      	movs	r0, #54	@ 0x36
 80017d6:	f7ff feab 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 80017da:	205c      	movs	r0, #92	@ 0x5c
 80017dc:	f7ff ff40 	bl	8001660 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 80017e0:	203a      	movs	r0, #58	@ 0x3a
 80017e2:	f7ff fea5 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 80017e6:	2006      	movs	r0, #6
 80017e8:	f7ff ff3a 	bl	8001660 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff fe9f 	bl	8001530 <LCD_send_command>
	LCD_send_command(0x00);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fe9c 	bl	8001530 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 80017f8:	20b0      	movs	r0, #176	@ 0xb0
 80017fa:	f7ff fe99 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff ff2e 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8001804:	20b1      	movs	r0, #177	@ 0xb1
 8001806:	f7ff fe93 	bl	8001530 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 800180a:	20a0      	movs	r0, #160	@ 0xa0
 800180c:	f7ff ff28 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8001810:	2011      	movs	r0, #17
 8001812:	f7ff ff25 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8001816:	20b4      	movs	r0, #180	@ 0xb4
 8001818:	f7ff fe8a 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 800181c:	2002      	movs	r0, #2
 800181e:	f7ff ff1f 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8001822:	20b5      	movs	r0, #181	@ 0xb5
 8001824:	f7ff fe84 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x02);
 8001828:	2002      	movs	r0, #2
 800182a:	f7ff ff19 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x02);
 800182e:	2002      	movs	r0, #2
 8001830:	f7ff ff16 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0A);
 8001834:	200a      	movs	r0, #10
 8001836:	f7ff ff13 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x04);
 800183a:	2004      	movs	r0, #4
 800183c:	f7ff ff10 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8001840:	20b6      	movs	r0, #182	@ 0xb6
 8001842:	f7ff fe75 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x02);
 8001846:	2002      	movs	r0, #2
 8001848:	f7ff ff0a 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x02);
 800184c:	2002      	movs	r0, #2
 800184e:	f7ff ff07 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x3B);
 8001852:	203b      	movs	r0, #59	@ 0x3b
 8001854:	f7ff ff04 	bl	8001660 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8001858:	20e9      	movs	r0, #233	@ 0xe9
 800185a:	f7ff fe69 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff fefe 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8001864:	20f7      	movs	r0, #247	@ 0xf7
 8001866:	f7ff fe63 	bl	8001530 <LCD_send_command>
	LCD_send_data(0xA9);
 800186a:	20a9      	movs	r0, #169	@ 0xa9
 800186c:	f7ff fef8 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x51);
 8001870:	2051      	movs	r0, #81	@ 0x51
 8001872:	f7ff fef5 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x2C);
 8001876:	202c      	movs	r0, #44	@ 0x2c
 8001878:	f7ff fef2 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x82);
 800187c:	2082      	movs	r0, #130	@ 0x82
 800187e:	f7ff feef 	bl	8001660 <LCD_send_data>


	LCD_send_command(0x11);
 8001882:	2011      	movs	r0, #17
 8001884:	f7ff fe54 	bl	8001530 <LCD_send_command>
	HAL_Delay(255);
 8001888:	20ff      	movs	r0, #255	@ 0xff
 800188a:	f002 f823 	bl	80038d4 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 800188e:	2051      	movs	r0, #81	@ 0x51
 8001890:	f7ff fe4e 	bl	8001530 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8001894:	20ff      	movs	r0, #255	@ 0xff
 8001896:	f7ff fee3 	bl	8001660 <LCD_send_data>
	LCD_send_command(0x29); //Display on
 800189a:	2029      	movs	r0, #41	@ 0x29
 800189c:	f7ff fe48 	bl	8001530 <LCD_send_command>


}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40020c00 	.word	0x40020c00

080018a8 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4604      	mov	r4, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	80fb      	strh	r3, [r7, #6]
 80018ba:	4603      	mov	r3, r0
 80018bc:	80bb      	strh	r3, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	807b      	strh	r3, [r7, #2]
 80018c2:	4613      	mov	r3, r2
 80018c4:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 80018c6:	202a      	movs	r0, #42	@ 0x2a
 80018c8:	f7ff fe32 	bl	8001530 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	733b      	strb	r3, [r7, #12]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 80018dc:	887b      	ldrh	r3, [r7, #2]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	73bb      	strb	r3, [r7, #14]
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2104      	movs	r1, #4
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fe40 	bl	8001578 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 80018f8:	202b      	movs	r0, #43	@ 0x2b
 80018fa:	f7ff fe19 	bl	8001530 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b29b      	uxth	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	733b      	strb	r3, [r7, #12]
 8001908:	88bb      	ldrh	r3, [r7, #4]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 800190e:	883b      	ldrh	r3, [r7, #0]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b29b      	uxth	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	73bb      	strb	r3, [r7, #14]
 8001918:	883b      	ldrh	r3, [r7, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2104      	movs	r1, #4
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe27 	bl	8001578 <LCD_send_data_multi>

	if(x == 'w')
 800192a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800192e:	2b77      	cmp	r3, #119	@ 0x77
 8001930:	d102      	bne.n	8001938 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8001932:	202c      	movs	r0, #44	@ 0x2c
 8001934:	f7ff fdfc 	bl	8001530 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8001938:	f897 3020 	ldrb.w	r3, [r7, #32]
 800193c:	2b72      	cmp	r3, #114	@ 0x72
 800193e:	d102      	bne.n	8001946 <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8001940:	202e      	movs	r0, #46	@ 0x2e
 8001942:	f7ff fdf5 	bl	8001530 <LCD_send_command>
	}


}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bd90      	pop	{r4, r7, pc}
	...

08001950 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	4604      	mov	r4, r0
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4623      	mov	r3, r4
 8001960:	80fb      	strh	r3, [r7, #6]
 8001962:	4603      	mov	r3, r0
 8001964:	80bb      	strh	r3, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	807b      	strh	r3, [r7, #2]
 800196a:	4613      	mov	r3, r2
 800196c:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 800196e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b64 <read_pixel_frame+0x214>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b7b      	ldr	r3, [pc, #492]	@ (8001b64 <read_pixel_frame+0x214>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800197c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 800197e:	4b79      	ldr	r3, [pc, #484]	@ (8001b64 <read_pixel_frame+0x214>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b77      	ldr	r3, [pc, #476]	@ (8001b64 <read_pixel_frame+0x214>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 800198c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 800198e:	4b75      	ldr	r3, [pc, #468]	@ (8001b64 <read_pixel_frame+0x214>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b73      	ldr	r3, [pc, #460]	@ (8001b64 <read_pixel_frame+0x214>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0210 	orr.w	r2, r2, #16
 800199c:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 800199e:	4b71      	ldr	r3, [pc, #452]	@ (8001b64 <read_pixel_frame+0x214>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b64 <read_pixel_frame+0x214>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019ac:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 80019ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001b68 <read_pixel_frame+0x218>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 80019b8:	887a      	ldrh	r2, [r7, #2]
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bfb8      	it	lt
 80019c2:	425b      	neglt	r3, r3
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	8839      	ldrh	r1, [r7, #0]
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	1acb      	subs	r3, r1, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bfb8      	it	lt
 80019d0:	425b      	neglt	r3, r3
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	fb12 f303 	smulbb	r3, r2, r3
 80019d8:	b29b      	uxth	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	0052      	lsls	r2, r2, #1
 80019de:	4413      	add	r3, r2
 80019e0:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 80019e2:	2300      	movs	r3, #0
 80019e4:	753b      	strb	r3, [r7, #20]

    free(data);
 80019e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019e8:	f00a fea0 	bl	800c72c <free>
    data = malloc(byteNr);
 80019ec:	8afb      	ldrh	r3, [r7, #22]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00a fe94 	bl	800c71c <malloc>
 80019f4:	4603      	mov	r3, r0
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	807b      	strh	r3, [r7, #2]
    y--;
 80019fe:	883b      	ldrh	r3, [r7, #0]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	743b      	strb	r3, [r7, #16]
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	747b      	strb	r3, [r7, #17]
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	74bb      	strb	r3, [r7, #18]
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8001a24:	88bb      	ldrh	r3, [r7, #4]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	733b      	strb	r3, [r7, #12]
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	737b      	strb	r3, [r7, #13]
 8001a34:	883b      	ldrh	r3, [r7, #0]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	73bb      	strb	r3, [r7, #14]
 8001a3e:	883b      	ldrh	r3, [r7, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8001a44:	2200      	movs	r2, #0
 8001a46:	2110      	movs	r1, #16
 8001a48:	4848      	ldr	r0, [pc, #288]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001a4a:	f003 f83f 	bl	8004acc <HAL_GPIO_WritePin>

    DC_COMMAND();
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2108      	movs	r1, #8
 8001a52:	4846      	ldr	r0, [pc, #280]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001a54:	f003 f83a 	bl	8004acc <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 8001a58:	232a      	movs	r3, #42	@ 0x2a
 8001a5a:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 8001a5c:	f107 010b 	add.w	r1, r7, #11
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	2201      	movs	r2, #1
 8001a66:	483f      	ldr	r0, [pc, #252]	@ (8001b64 <read_pixel_frame+0x214>)
 8001a68:	f004 fd03 	bl	8006472 <HAL_SPI_Transmit>
    DC_DATA();
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2108      	movs	r1, #8
 8001a70:	483e      	ldr	r0, [pc, #248]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001a72:	f003 f82b 	bl	8004acc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 8001a76:	f107 0110 	add.w	r1, r7, #16
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	2204      	movs	r2, #4
 8001a80:	4838      	ldr	r0, [pc, #224]	@ (8001b64 <read_pixel_frame+0x214>)
 8001a82:	f004 fcf6 	bl	8006472 <HAL_SPI_Transmit>

    DC_COMMAND();
 8001a86:	2200      	movs	r2, #0
 8001a88:	2108      	movs	r1, #8
 8001a8a:	4838      	ldr	r0, [pc, #224]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001a8c:	f003 f81e 	bl	8004acc <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 8001a90:	232b      	movs	r3, #43	@ 0x2b
 8001a92:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 8001a94:	f107 010a 	add.w	r1, r7, #10
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4831      	ldr	r0, [pc, #196]	@ (8001b64 <read_pixel_frame+0x214>)
 8001aa0:	f004 fce7 	bl	8006472 <HAL_SPI_Transmit>
    DC_DATA();
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	4830      	ldr	r0, [pc, #192]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001aaa:	f003 f80f 	bl	8004acc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 8001aae:	f107 010c 	add.w	r1, r7, #12
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	482a      	ldr	r0, [pc, #168]	@ (8001b64 <read_pixel_frame+0x214>)
 8001aba:	f004 fcda 	bl	8006472 <HAL_SPI_Transmit>

    DC_COMMAND();
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2108      	movs	r1, #8
 8001ac2:	482a      	ldr	r0, [pc, #168]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001ac4:	f003 f802 	bl	8004acc <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 8001ac8:	232e      	movs	r3, #46	@ 0x2e
 8001aca:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 8001acc:	f107 0109 	add.w	r1, r7, #9
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4823      	ldr	r0, [pc, #140]	@ (8001b64 <read_pixel_frame+0x214>)
 8001ad8:	f004 fccb 	bl	8006472 <HAL_SPI_Transmit>
    DC_DATA();
 8001adc:	2201      	movs	r2, #1
 8001ade:	2108      	movs	r1, #8
 8001ae0:	4822      	ldr	r0, [pc, #136]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001ae2:	f002 fff3 	bl	8004acc <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 8001ae6:	f107 0114 	add.w	r1, r7, #20
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	2201      	movs	r2, #1
 8001af0:	481c      	ldr	r0, [pc, #112]	@ (8001b64 <read_pixel_frame+0x214>)
 8001af2:	f004 fe02 	bl	80066fa <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 8001af6:	8afb      	ldrh	r3, [r7, #22]
 8001af8:	461a      	mov	r2, r3
 8001afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001afc:	4819      	ldr	r0, [pc, #100]	@ (8001b64 <read_pixel_frame+0x214>)
 8001afe:	f005 f971 	bl	8006de4 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 8001b02:	bf00      	nop
 8001b04:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <read_pixel_frame+0x218>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0fa      	beq.n	8001b04 <read_pixel_frame+0x1b4>
    CS_D();
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2110      	movs	r1, #16
 8001b12:	4816      	ldr	r0, [pc, #88]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001b14:	f002 ffda 	bl	8004acc <HAL_GPIO_WritePin>

    free(data);
 8001b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b1a:	f00a fe07 	bl	800c72c <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b2c:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8001b3c:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b58:	601a      	str	r2, [r3, #0]

}
 8001b5a:	bf00      	nop
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000180 	.word	0x20000180
 8001b68:	20000329 	.word	0x20000329
 8001b6c:	40020c00 	.word	0x40020c00

08001b70 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


  void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	   * folosind DMA. Odata terminat transferul SPI prin DMA,
	   * aceasta functia de CallBack se va apela, setandu-ne un flag
	   * pentru a indica starea acestui transfer de date.
	   */

	  flagDmaSpiTx = 1;
 8001b78:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <HAL_SPI_TxCpltCallback+0x1c>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]

  }
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000328 	.word	0x20000328

08001b90 <HAL_SPI_RxCpltCallback>:


  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	  /*
	   * Functie de CallBack pentru terminarea receptiei datelor
	   * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	   */

	  flagDmaSpiRx = 1;
 8001b98:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <HAL_SPI_RxCpltCallback+0x1c>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]

  }
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000329 	.word	0x20000329

08001bb0 <HAL_DAC_ConvHalfCpltCallbackCh1>:


  void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
  {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
      /*
       * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
       */

	  flagDmaDAC = 1;
 8001bb8:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]

  }
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	2000032a 	.word	0x2000032a

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b092      	sub	sp, #72	@ 0x48
 8001bd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd6:	f001 fe0b 	bl	80037f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bda:	f000 fa4f 	bl	800207c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bde:	f000 fbeb 	bl	80023b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001be2:	f000 fbab 	bl	800233c <MX_DMA_Init>
  MX_SPI1_Init();
 8001be6:	f000 fafd 	bl	80021e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001bea:	f000 fb7d 	bl	80022e8 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001bee:	f000 faaf 	bl	8002150 <MX_DAC_Init>
  MX_TIM2_Init();
 8001bf2:	f000 fb2d 	bl	8002250 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8001bf6:	f000 fad5 	bl	80021a4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001bfa:	f007 fcf3 	bl	80095e4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 8001bfe:	f000 fc3f 	bl	8002480 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 8001c02:	f7ff fd51 	bl	80016a8 <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 8001c06:	48bf      	ldr	r0, [pc, #764]	@ (8001f04 <main+0x334>)
 8001c08:	f005 fdaa 	bl	8007760 <HAL_TIM_Base_Start>


  /*Test pentru tastatura*/

  fill_screen1(0x0000);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7fe fd8b 	bl	8000728 <fill_screen1>

  //play_audio_file("audio/classic.txt");
  //HAL_Delay(1000);
  play_audio_file("audio/Bambina.txt"); //doremi mine songita song22
 8001c12:	48bd      	ldr	r0, [pc, #756]	@ (8001f08 <main+0x338>)
 8001c14:	f7fe fc58 	bl	80004c8 <play_audio_file>


  fill_screen1(0xF100);
 8001c18:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001c1c:	f7fe fd84 	bl	8000728 <fill_screen1>
  HAL_Delay(1000);
 8001c20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c24:	f001 fe56 	bl	80038d4 <HAL_Delay>
  fill_screen2(0xF00F);
 8001c28:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8001c2c:	f7fe fddc 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 8001c30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c34:	f001 fe4e 	bl	80038d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001c38:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c3c:	f7fe fdd4 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 8001c40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c44:	f001 fe46 	bl	80038d4 <HAL_Delay>

  unsigned int startTick = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int endTick = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int getTime = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	633b      	str	r3, [r7, #48]	@ 0x30
  ENTITY entity;


  /*Test SCALARE*/

  fill_screen2(0xFFFF);
 8001c54:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c58:	f7fe fdc6 	bl	80007e8 <fill_screen2>

  entity.x0 = 100;
 8001c5c:	2364      	movs	r3, #100	@ 0x64
 8001c5e:	837b      	strh	r3, [r7, #26]
  entity.y0 = 100;
 8001c60:	2364      	movs	r3, #100	@ 0x64
 8001c62:	83bb      	strh	r3, [r7, #28]
  entity.id = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	763b      	strb	r3, [r7, #24]
  draw_entity(&entity, "graphic/multi2.bin");
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	49a7      	ldr	r1, [pc, #668]	@ (8001f0c <main+0x33c>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f82e 	bl	8000cd0 <draw_entity>
  HAL_Delay(1000);
 8001c74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c78:	f001 fe2c 	bl	80038d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001c7c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c80:	f7fe fdb2 	bl	80007e8 <fill_screen2>
  scaling_entity(&entity, 38, "graphic/multi2.bin", "multi2.bin");
 8001c84:	f107 0318 	add.w	r3, r7, #24
 8001c88:	4aa1      	ldr	r2, [pc, #644]	@ (8001f10 <main+0x340>)
 8001c8a:	49a0      	ldr	r1, [pc, #640]	@ (8001f0c <main+0x33c>)
 8001c8c:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8001f14 <main+0x344>
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fa1d 	bl	80010d0 <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8001c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f816 	bl	8000cd0 <draw_entity>

  //--------------------------------------------

  HAL_Delay(1000);
 8001ca4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ca8:	f001 fe14 	bl	80038d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001cac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001cb0:	f7fe fd9a 	bl	80007e8 <fill_screen2>

  rotate_entity(&entity, 90);
 8001cb4:	f107 0318 	add.w	r3, r7, #24
 8001cb8:	215a      	movs	r1, #90	@ 0x5a
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fb6c 	bl	8001398 <rotate_entity>

  HAL_Delay(1000);
 8001cc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cc4:	f001 fe06 	bl	80038d4 <HAL_Delay>

  //---------------------------------------------

  HAL_Delay(1000);
 8001cc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ccc:	f001 fe02 	bl	80038d4 <HAL_Delay>

  fill_screen2(0xFFFF);
 8001cd0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001cd4:	f7fe fd88 	bl	80007e8 <fill_screen2>
  draw_entity(&entity, entity.filePathName);
 8001cd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cda:	f107 0318 	add.w	r3, r7, #24
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fff5 	bl	8000cd0 <draw_entity>
  HAL_Delay(1000);
 8001ce6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cea:	f001 fdf3 	bl	80038d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001cee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001cf2:	f7fe fd79 	bl	80007e8 <fill_screen2>
  scaling_entity(&entity, 0.5, entity.filePathName, "multi2.bin");
 8001cf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	4a84      	ldr	r2, [pc, #528]	@ (8001f10 <main+0x340>)
 8001cfe:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f9e4 	bl	80010d0 <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8001d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d0a:	f107 0318 	add.w	r3, r7, #24
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe ffdd 	bl	8000cd0 <draw_entity>
  HAL_Delay(1000);
 8001d16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d1a:	f001 fddb 	bl	80038d4 <HAL_Delay>

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	80fb      	strh	r3, [r7, #6]
  ent.y0 = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	813b      	strh	r3, [r7, #8]
  ent.id = 0x00;
 8001d26:	2300      	movs	r3, #0
 8001d28:	713b      	strb	r3, [r7, #4]
  draw_entity(&ent, "graphic/img5.bin");
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	497a      	ldr	r1, [pc, #488]	@ (8001f18 <main+0x348>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe ffce 	bl	8000cd0 <draw_entity>
  HAL_Delay(2000);
 8001d34:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d38:	f001 fdcc 	bl	80038d4 <HAL_Delay>
  draw_entity(&ent, "graphic/img6.bin");
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	4977      	ldr	r1, [pc, #476]	@ (8001f1c <main+0x34c>)
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe ffc5 	bl	8000cd0 <draw_entity>
  HAL_Delay(2000);
 8001d46:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d4a:	f001 fdc3 	bl	80038d4 <HAL_Delay>
  draw_entity(&ent, "graphic/img8.bin");
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	4973      	ldr	r1, [pc, #460]	@ (8001f20 <main+0x350>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe ffbc 	bl	8000cd0 <draw_entity>
  HAL_Delay(2000);
 8001d58:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d5c:	f001 fdba 	bl	80038d4 <HAL_Delay>
  draw_entity(&ent, "graphic/img9.bin");
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	4970      	ldr	r1, [pc, #448]	@ (8001f24 <main+0x354>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe ffb3 	bl	8000cd0 <draw_entity>
  HAL_Delay(2000);
 8001d6a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d6e:	f001 fdb1 	bl	80038d4 <HAL_Delay>
  startTick = HAL_GetTick();
 8001d72:	f001 fda3 	bl	80038bc <HAL_GetTick>
 8001d76:	63b8      	str	r0, [r7, #56]	@ 0x38
  draw_entity(&ent, "graphic/img92.bin");
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	496b      	ldr	r1, [pc, #428]	@ (8001f28 <main+0x358>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe ffa7 	bl	8000cd0 <draw_entity>
  endTick = HAL_GetTick();
 8001d82:	f001 fd9b 	bl	80038bc <HAL_GetTick>
 8001d86:	6378      	str	r0, [r7, #52]	@ 0x34
  getTime = endTick - startTick;
 8001d88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	633b      	str	r3, [r7, #48]	@ 0x30

  fill_screen2(0x0000);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7fe fd29 	bl	80007e8 <fill_screen2>
  draw_entity(&ent, "graphic/pixel1.bin");
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	4964      	ldr	r1, [pc, #400]	@ (8001f2c <main+0x35c>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ff98 	bl	8000cd0 <draw_entity>
  HAL_Delay(3000);
 8001da0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001da4:	f001 fd96 	bl	80038d4 <HAL_Delay>

  //Test translation

  //ENTITY entity;

  entity.x0 = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	83bb      	strh	r3, [r7, #28]
  entity.x1 = 64;
 8001db0:	2340      	movs	r3, #64	@ 0x40
 8001db2:	83fb      	strh	r3, [r7, #30]
  entity.y1 = 64;
 8001db4:	2340      	movs	r3, #64	@ 0x40
 8001db6:	843b      	strh	r3, [r7, #32]
  entity.color = 0xF100;
 8001db8:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001dbc:	847b      	strh	r3, [r7, #34]	@ 0x22

  //draw_entity(&entity,NULL);

  //translation_test(&entity, 1, 0);

  HAL_Delay(500);
 8001dbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dc2:	f001 fd87 	bl	80038d4 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 1);//, 0xF100);
 8001dc6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3364      	adds	r3, #100	@ 0x64
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	b219      	sxth	r1, r3
 8001dd2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3364      	adds	r3, #100	@ 0x64
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	f107 0018 	add.w	r0, r7, #24
 8001de2:	2301      	movs	r3, #1
 8001de4:	f7ff f874 	bl	8000ed0 <translation_entity>
  HAL_Delay(2000);
 8001de8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001dec:	f001 fd72 	bl	80038d4 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 1);//, 0xF100);
 8001df0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3320      	adds	r3, #32
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b219      	sxth	r1, r3
 8001dfc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3320      	adds	r3, #32
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	f107 0018 	add.w	r0, r7, #24
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f7ff f85f 	bl	8000ed0 <translation_entity>
  HAL_Delay(500);
 8001e12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e16:	f001 fd5d 	bl	80038d4 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 1);//, 0xF100);
 8001e1a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	330c      	adds	r3, #12
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b219      	sxth	r1, r3
 8001e26:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3320      	adds	r3, #32
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	b21a      	sxth	r2, r3
 8001e32:	f107 0018 	add.w	r0, r7, #24
 8001e36:	2301      	movs	r3, #1
 8001e38:	f7ff f84a 	bl	8000ed0 <translation_entity>
  HAL_Delay(500);
 8001e3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e40:	f001 fd48 	bl	80038d4 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0, 1);//, 0xF100);
 8001e44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	330c      	adds	r3, #12
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	b219      	sxth	r1, r3
 8001e50:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e54:	f107 0018 	add.w	r0, r7, #24
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f7ff f839 	bl	8000ed0 <translation_entity>
  HAL_Delay(500);
 8001e5e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e62:	f001 fd37 	bl	80038d4 <HAL_Delay>


  //Test_SD_Card();

  play_audio_file("audio/mine.txt"); //doremi mine songita song22
 8001e66:	4832      	ldr	r0, [pc, #200]	@ (8001f30 <main+0x360>)
 8001e68:	f7fe fb2e 	bl	80004c8 <play_audio_file>

  fill_screen2(0xF100);
 8001e6c:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001e70:	f7fe fcba 	bl	80007e8 <fill_screen2>
  //startTick = HAL_GetTick();
  //read_audio_file("audio/random.txt", sampleData);
  //endTick = HAL_GetTick();
  //getTime = endTick - startTick;

  HAL_Delay(100);
 8001e74:	2064      	movs	r0, #100	@ 0x64
 8001e76:	f001 fd2d 	bl	80038d4 <HAL_Delay>


  for(uint8_t i=0;i<100;i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001e80:	e071      	b.n	8001f66 <main+0x396>
  {
	  for(uint8_t j=0; j<100;j++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001e88:	e064      	b.n	8001f54 <main+0x384>
	  {

		  if(i==j)
 8001e8a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001e8e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d10b      	bne.n	8001eae <main+0x2de>
		  {
			  draw_pixel(i,j,0xF100);
 8001e96:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8001ea0:	b291      	uxth	r1, r2
 8001ea2:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fbe6 	bl	8000678 <draw_pixel>
			  continue;
 8001eac:	e04d      	b.n	8001f4a <main+0x37a>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8001eae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001eb2:	2b50      	cmp	r3, #80	@ 0x50
 8001eb4:	d103      	bne.n	8001ebe <main+0x2ee>
 8001eb6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001eba:	2b14      	cmp	r3, #20
 8001ebc:	d017      	beq.n	8001eee <main+0x31e>
 8001ebe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ec2:	2b50      	cmp	r3, #80	@ 0x50
 8001ec4:	d103      	bne.n	8001ece <main+0x2fe>
 8001ec6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001eca:	2b13      	cmp	r3, #19
 8001ecc:	d00f      	beq.n	8001eee <main+0x31e>
 8001ece:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ed2:	2b51      	cmp	r3, #81	@ 0x51
 8001ed4:	d103      	bne.n	8001ede <main+0x30e>
 8001ed6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001eda:	2b14      	cmp	r3, #20
 8001edc:	d007      	beq.n	8001eee <main+0x31e>
 8001ede:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ee2:	2b51      	cmp	r3, #81	@ 0x51
 8001ee4:	d126      	bne.n	8001f34 <main+0x364>
 8001ee6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001eea:	2b13      	cmp	r3, #19
 8001eec:	d122      	bne.n	8001f34 <main+0x364>
		  {
			  draw_pixel(i,j,0x001F);
 8001eee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8001ef8:	b291      	uxth	r1, r2
 8001efa:	221f      	movs	r2, #31
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fbbb 	bl	8000678 <draw_pixel>
			  continue;
 8001f02:	e022      	b.n	8001f4a <main+0x37a>
 8001f04:	20000298 	.word	0x20000298
 8001f08:	0800cab4 	.word	0x0800cab4
 8001f0c:	0800cac8 	.word	0x0800cac8
 8001f10:	0800cadc 	.word	0x0800cadc
 8001f14:	42180000 	.word	0x42180000
 8001f18:	0800cae8 	.word	0x0800cae8
 8001f1c:	0800cafc 	.word	0x0800cafc
 8001f20:	0800cb10 	.word	0x0800cb10
 8001f24:	0800cb24 	.word	0x0800cb24
 8001f28:	0800cb38 	.word	0x0800cb38
 8001f2c:	0800cb4c 	.word	0x0800cb4c
 8001f30:	0800cb60 	.word	0x0800cb60
		  }


		  draw_pixel(i,j,0xFFFF);
 8001f34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8001f3e:	b291      	uxth	r1, r2
 8001f40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fb97 	bl	8000678 <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8001f4a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001f54:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001f58:	2b63      	cmp	r3, #99	@ 0x63
 8001f5a:	d996      	bls.n	8001e8a <main+0x2ba>
  for(uint8_t i=0;i<100;i++)
 8001f5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001f60:	3301      	adds	r3, #1
 8001f62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001f66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001f6a:	2b63      	cmp	r3, #99	@ 0x63
 8001f6c:	d989      	bls.n	8001e82 <main+0x2b2>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8001f6e:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001f72:	f7fe fc39 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 8001f76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f7a:	f001 fcab 	bl	80038d4 <HAL_Delay>
  fill_screen2(0xF150);
 8001f7e:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8001f82:	f7fe fc31 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 8001f86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f8a:	f001 fca3 	bl	80038d4 <HAL_Delay>
  fill_screen2(0xF111);
 8001f8e:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8001f92:	f7fe fc29 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 8001f96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f9a:	f001 fc9b 	bl	80038d4 <HAL_Delay>
  fill_screen2(0xF10F);
 8001f9e:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8001fa2:	f7fe fc21 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 8001fa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001faa:	f001 fc93 	bl	80038d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001fae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fb2:	f7fe fc19 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 8001fb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fba:	f001 fc8b 	bl	80038d4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001fbe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fc2:	f7fe fc11 	bl	80007e8 <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 8001fc6:	231f      	movs	r3, #31
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	4a26      	ldr	r2, [pc, #152]	@ (800206c <main+0x49c>)
 8001fd4:	21c8      	movs	r1, #200	@ 0xc8
 8001fd6:	2024      	movs	r0, #36	@ 0x24
 8001fd8:	f7fe fd62 	bl	8000aa0 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8001fdc:	4b24      	ldr	r3, [pc, #144]	@ (8002070 <main+0x4a0>)
 8001fde:	603b      	str	r3, [r7, #0]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4823      	ldr	r0, [pc, #140]	@ (8002074 <main+0x4a4>)
 8001fe8:	f004 fe4a 	bl	8006c80 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 8001fec:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001ff0:	2250      	movs	r2, #80	@ 0x50
 8001ff2:	2114      	movs	r1, #20
 8001ff4:	2014      	movs	r0, #20
 8001ff6:	f7fe fd97 	bl	8000b28 <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 8001ffa:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001ffe:	2250      	movs	r2, #80	@ 0x50
 8002000:	2114      	movs	r1, #20
 8002002:	2014      	movs	r0, #20
 8002004:	f7fe fdcb 	bl	8000b9e <draw_vertical_line>

  flagDmaSpiTx = 0;
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <main+0x4a8>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 800200e:	221f      	movs	r2, #31
 8002010:	2100      	movs	r1, #0
 8002012:	2000      	movs	r0, #0
 8002014:	f7fe fb30 	bl	8000678 <draw_pixel>
  draw_pixel(1,0,0xF800);
 8002018:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800201c:	2100      	movs	r1, #0
 800201e:	2001      	movs	r0, #1
 8002020:	f7fe fb2a 	bl	8000678 <draw_pixel>
  draw_pixel(0,1,0x001F);
 8002024:	221f      	movs	r2, #31
 8002026:	2101      	movs	r1, #1
 8002028:	2000      	movs	r0, #0
 800202a:	f7fe fb25 	bl	8000678 <draw_pixel>
  draw_pixel(1,1,0xF800);
 800202e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002032:	2101      	movs	r1, #1
 8002034:	2001      	movs	r0, #1
 8002036:	f7fe fb1f 	bl	8000678 <draw_pixel>

  HAL_Delay(50);
 800203a:	2032      	movs	r0, #50	@ 0x32
 800203c:	f001 fc4a 	bl	80038d4 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 8002040:	2001      	movs	r0, #1
 8002042:	f00a fb6b 	bl	800c71c <malloc>
 8002046:	4603      	mov	r3, r0
 8002048:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 800204a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2302      	movs	r3, #2
 8002050:	2202      	movs	r2, #2
 8002052:	2100      	movs	r1, #0
 8002054:	2000      	movs	r0, #0
 8002056:	f7ff fc7b 	bl	8001950 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 800205a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800205c:	f00a fb66 	bl	800c72c <free>

  HAL_Delay(3000);
 8002060:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002064:	f001 fc36 	bl	80038d4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <main+0x498>
 800206c:	0800cb70 	.word	0x0800cb70
 8002070:	04030201 	.word	0x04030201
 8002074:	20000180 	.word	0x20000180
 8002078:	20000328 	.word	0x20000328

0800207c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b094      	sub	sp, #80	@ 0x50
 8002080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	2230      	movs	r2, #48	@ 0x30
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f00a fc3a 	bl	800c904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	4b28      	ldr	r3, [pc, #160]	@ (8002148 <SystemClock_Config+0xcc>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4a27      	ldr	r2, [pc, #156]	@ (8002148 <SystemClock_Config+0xcc>)
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b0:	4b25      	ldr	r3, [pc, #148]	@ (8002148 <SystemClock_Config+0xcc>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020bc:	2300      	movs	r3, #0
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	4b22      	ldr	r3, [pc, #136]	@ (800214c <SystemClock_Config+0xd0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a21      	ldr	r2, [pc, #132]	@ (800214c <SystemClock_Config+0xd0>)
 80020c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b1f      	ldr	r3, [pc, #124]	@ (800214c <SystemClock_Config+0xd0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020d8:	2301      	movs	r3, #1
 80020da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e2:	2302      	movs	r3, #2
 80020e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020ec:	2304      	movs	r3, #4
 80020ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80020f0:	23a8      	movs	r3, #168	@ 0xa8
 80020f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f4:	2302      	movs	r3, #2
 80020f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020f8:	2307      	movs	r3, #7
 80020fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020fc:	f107 0320 	add.w	r3, r7, #32
 8002100:	4618      	mov	r0, r3
 8002102:	f002 fcfd 	bl	8004b00 <HAL_RCC_OscConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800210c:	f000 f9b2 	bl	8002474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002110:	230f      	movs	r3, #15
 8002112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002114:	2302      	movs	r3, #2
 8002116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800211c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002126:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	2105      	movs	r1, #5
 800212e:	4618      	mov	r0, r3
 8002130:	f002 ff5e 	bl	8004ff0 <HAL_RCC_ClockConfig>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800213a:	f000 f99b 	bl	8002474 <Error_Handler>
  }
}
 800213e:	bf00      	nop
 8002140:	3750      	adds	r7, #80	@ 0x50
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000

08002150 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002156:	463b      	mov	r3, r7
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800215e:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <MX_DAC_Init+0x4c>)
 8002160:	4a0f      	ldr	r2, [pc, #60]	@ (80021a0 <MX_DAC_Init+0x50>)
 8002162:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002164:	480d      	ldr	r0, [pc, #52]	@ (800219c <MX_DAC_Init+0x4c>)
 8002166:	f001 fcea 	bl	8003b3e <HAL_DAC_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002170:	f000 f980 	bl	8002474 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002174:	2324      	movs	r3, #36	@ 0x24
 8002176:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800217c:	463b      	mov	r3, r7
 800217e:	2200      	movs	r2, #0
 8002180:	4619      	mov	r1, r3
 8002182:	4806      	ldr	r0, [pc, #24]	@ (800219c <MX_DAC_Init+0x4c>)
 8002184:	f001 fe21 	bl	8003dca <HAL_DAC_ConfigChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800218e:	f000 f971 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000088 	.word	0x20000088
 80021a0:	40007400 	.word	0x40007400

080021a4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <MX_SDIO_SD_Init+0x38>)
 80021aa:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <MX_SDIO_SD_Init+0x3c>)
 80021ac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80021ae:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <MX_SDIO_SD_Init+0x38>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80021b4:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <MX_SDIO_SD_Init+0x38>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80021ba:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <MX_SDIO_SD_Init+0x38>)
 80021bc:	2200      	movs	r2, #0
 80021be:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <MX_SDIO_SD_Init+0x38>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80021c6:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <MX_SDIO_SD_Init+0x38>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <MX_SDIO_SD_Init+0x38>)
 80021ce:	2208      	movs	r2, #8
 80021d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	200000fc 	.word	0x200000fc
 80021e0:	40012c00 	.word	0x40012c00

080021e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021e8:	4b17      	ldr	r3, [pc, #92]	@ (8002248 <MX_SPI1_Init+0x64>)
 80021ea:	4a18      	ldr	r2, [pc, #96]	@ (800224c <MX_SPI1_Init+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021ee:	4b16      	ldr	r3, [pc, #88]	@ (8002248 <MX_SPI1_Init+0x64>)
 80021f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021f6:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <MX_SPI1_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021fc:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <MX_SPI1_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002202:	4b11      	ldr	r3, [pc, #68]	@ (8002248 <MX_SPI1_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002208:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <MX_SPI1_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800220e:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <MX_SPI1_Init+0x64>)
 8002210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002214:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002216:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <MX_SPI1_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800221c:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <MX_SPI1_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002222:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <MX_SPI1_Init+0x64>)
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002228:	4b07      	ldr	r3, [pc, #28]	@ (8002248 <MX_SPI1_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <MX_SPI1_Init+0x64>)
 8002230:	220a      	movs	r2, #10
 8002232:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002234:	4804      	ldr	r0, [pc, #16]	@ (8002248 <MX_SPI1_Init+0x64>)
 8002236:	f004 f893 	bl	8006360 <HAL_SPI_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002240:	f000 f918 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000180 	.word	0x20000180
 800224c:	40013000 	.word	0x40013000

08002250 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002264:	463b      	mov	r3, r7
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800226c:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <MX_TIM2_Init+0x94>)
 800226e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002272:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002274:	4b1b      	ldr	r3, [pc, #108]	@ (80022e4 <MX_TIM2_Init+0x94>)
 8002276:	2253      	movs	r2, #83	@ 0x53
 8002278:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <MX_TIM2_Init+0x94>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11;
 8002280:	4b18      	ldr	r3, [pc, #96]	@ (80022e4 <MX_TIM2_Init+0x94>)
 8002282:	220b      	movs	r2, #11
 8002284:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002286:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <MX_TIM2_Init+0x94>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228c:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <MX_TIM2_Init+0x94>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002292:	4814      	ldr	r0, [pc, #80]	@ (80022e4 <MX_TIM2_Init+0x94>)
 8002294:	f005 fa14 	bl	80076c0 <HAL_TIM_Base_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800229e:	f000 f8e9 	bl	8002474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	4619      	mov	r1, r3
 80022ae:	480d      	ldr	r0, [pc, #52]	@ (80022e4 <MX_TIM2_Init+0x94>)
 80022b0:	f005 fabe 	bl	8007830 <HAL_TIM_ConfigClockSource>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80022ba:	f000 f8db 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022be:	2320      	movs	r3, #32
 80022c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	4619      	mov	r1, r3
 80022ca:	4806      	ldr	r0, [pc, #24]	@ (80022e4 <MX_TIM2_Init+0x94>)
 80022cc:	f005 fcbe 	bl	8007c4c <HAL_TIMEx_MasterConfigSynchronization>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80022d6:	f000 f8cd 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000298 	.word	0x20000298

080022e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <MX_USART1_UART_Init+0x50>)
 80022f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 80022f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80022f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	@ (8002334 <MX_USART1_UART_Init+0x4c>)
 8002320:	f005 fd10 	bl	8007d44 <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800232a:	f000 f8a3 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200002e0 	.word	0x200002e0
 8002338:	40011000 	.word	0x40011000

0800233c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <MX_DMA_Init+0x78>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a1a      	ldr	r2, [pc, #104]	@ (80023b4 <MX_DMA_Init+0x78>)
 800234c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <MX_DMA_Init+0x78>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <MX_DMA_Init+0x78>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a13      	ldr	r2, [pc, #76]	@ (80023b4 <MX_DMA_Init+0x78>)
 8002368:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <MX_DMA_Init+0x78>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	2010      	movs	r0, #16
 8002380:	f001 fba7 	bl	8003ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002384:	2010      	movs	r0, #16
 8002386:	f001 fbc0 	bl	8003b0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	2038      	movs	r0, #56	@ 0x38
 8002390:	f001 fb9f 	bl	8003ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002394:	2038      	movs	r0, #56	@ 0x38
 8002396:	f001 fbb8 	bl	8003b0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	203b      	movs	r0, #59	@ 0x3b
 80023a0:	f001 fb97 	bl	8003ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80023a4:	203b      	movs	r0, #59	@ 0x3b
 80023a6:	f001 fbb0 	bl	8003b0a <HAL_NVIC_EnableIRQ>

}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800

080023b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b26      	ldr	r3, [pc, #152]	@ (800246c <MX_GPIO_Init+0xb4>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4a25      	ldr	r2, [pc, #148]	@ (800246c <MX_GPIO_Init+0xb4>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023de:	4b23      	ldr	r3, [pc, #140]	@ (800246c <MX_GPIO_Init+0xb4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <MX_GPIO_Init+0xb4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a1e      	ldr	r2, [pc, #120]	@ (800246c <MX_GPIO_Init+0xb4>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b1c      	ldr	r3, [pc, #112]	@ (800246c <MX_GPIO_Init+0xb4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	4b18      	ldr	r3, [pc, #96]	@ (800246c <MX_GPIO_Init+0xb4>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	4a17      	ldr	r2, [pc, #92]	@ (800246c <MX_GPIO_Init+0xb4>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6313      	str	r3, [r2, #48]	@ 0x30
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <MX_GPIO_Init+0xb4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	4b11      	ldr	r3, [pc, #68]	@ (800246c <MX_GPIO_Init+0xb4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a10      	ldr	r2, [pc, #64]	@ (800246c <MX_GPIO_Init+0xb4>)
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <MX_GPIO_Init+0xb4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	2158      	movs	r1, #88	@ 0x58
 8002442:	480b      	ldr	r0, [pc, #44]	@ (8002470 <MX_GPIO_Init+0xb8>)
 8002444:	f002 fb42 	bl	8004acc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8002448:	2358      	movs	r3, #88	@ 0x58
 800244a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244c:	2301      	movs	r3, #1
 800244e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4619      	mov	r1, r3
 800245e:	4804      	ldr	r0, [pc, #16]	@ (8002470 <MX_GPIO_Init+0xb8>)
 8002460:	f002 f998 	bl	8004794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002464:	bf00      	nop
 8002466:	3728      	adds	r7, #40	@ 0x28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	40020c00 	.word	0x40020c00

08002474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002478:	b672      	cpsid	i
}
 800247a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <Error_Handler+0x8>

08002480 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 8002484:	2201      	movs	r2, #1
 8002486:	4903      	ldr	r1, [pc, #12]	@ (8002494 <init_cardSD+0x14>)
 8002488:	4803      	ldr	r0, [pc, #12]	@ (8002498 <init_cardSD+0x18>)
 800248a:	f008 ffe1 	bl	800b450 <f_mount>

}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	0800cb80 	.word	0x0800cb80
 8002498:	2000032c 	.word	0x2000032c

0800249c <string_to_int>:
}



inline static uint16_t string_to_int(char *string)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 80024a8:	e015      	b.n	80024d6 <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80024b0:	d90e      	bls.n	80024d0 <string_to_int+0x34>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b39      	cmp	r3, #57	@ 0x39
 80024b8:	d80a      	bhi.n	80024d0 <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	461a      	mov	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	3b30      	subs	r3, #48	@ 0x30
 80024ce:	60fb      	str	r3, [r7, #12]
		}

		string++;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3301      	adds	r3, #1
 80024d4:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b0a      	cmp	r3, #10
 80024dc:	d1e5      	bne.n	80024aa <string_to_int+0xe>
	}

	return number;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	b29b      	uxth	r3, r3
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <assign_filePath>:

}


char* assign_filePath(const char *filePathName)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
	 * Output: adresa char* catre calea
	 * ! alocat dinamic
	 */

	char *string;
	uint8_t i = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]


	while(filePathName[i] != '\0')
 80024fa:	e002      	b.n	8002502 <assign_filePath+0x14>
	{
		i++;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	3301      	adds	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
	while(filePathName[i] != '\0')
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f6      	bne.n	80024fc <assign_filePath+0xe>
	}

	i++;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	3301      	adds	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]

	string = (char*)malloc(sizeof(char)*i);
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	4618      	mov	r0, r3
 8002518:	f00a f900 	bl	800c71c <malloc>
 800251c:	4603      	mov	r3, r0
 800251e:	60bb      	str	r3, [r7, #8]
	memcpy(string, filePathName, i);
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	461a      	mov	r2, r3
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	68b8      	ldr	r0, [r7, #8]
 8002528:	f00a fa40 	bl	800c9ac <memcpy>

	return string;
 800252c:	68bb      	ldr	r3, [r7, #8]


}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <read_audio_file>:




void read_audio_file(char *filePathName, uint32_t *buffer, bool *flagAudioDone)
{
 8002538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800253c:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 8002540:	af00      	add	r7, sp, #0
 8002542:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002546:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800254a:	6018      	str	r0, [r3, #0]
 800254c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002550:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002554:	6019      	str	r1, [r3, #0]
 8002556:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800255a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	466b      	mov	r3, sp
 8002562:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8002564:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002568:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800256c:	f107 0020 	add.w	r0, r7, #32
 8002570:	2201      	movs	r2, #1
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	f008 ffb2 	bl	800b4dc <f_open>
 8002578:	4603      	mov	r3, r0
 800257a:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	if(res != FR_OK)
 800257e:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 8101 	bne.w	800278a <read_audio_file+0x252>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8002588:	4b83      	ldr	r3, [pc, #524]	@ (8002798 <read_audio_file+0x260>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f107 0320 	add.w	r3, r7, #32
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f009 fcb8 	bl	800bf08 <f_lseek>


	if(flagNewAudioFile == 1)
 8002598:	4b80      	ldr	r3, [pc, #512]	@ (800279c <read_audio_file+0x264>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d017      	beq.n	80025d0 <read_audio_file+0x98>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 80025a0:	4b7e      	ldr	r3, [pc, #504]	@ (800279c <read_audio_file+0x264>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 80025a6:	4b7e      	ldr	r3, [pc, #504]	@ (80027a0 <read_audio_file+0x268>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 80025ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002798 <read_audio_file+0x260>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 80025b2:	4b79      	ldr	r3, [pc, #484]	@ (8002798 <read_audio_file+0x260>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	f107 0320 	add.w	r3, r7, #32
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f009 fca3 	bl	800bf08 <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 80025c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80025c6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a75      	ldr	r2, [pc, #468]	@ (80027a4 <read_audio_file+0x26c>)
 80025ce:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 80025d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025d4:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
	unsigned int nrFrames = fileSize / n;
 80025d8:	4b72      	ldr	r3, [pc, #456]	@ (80027a4 <read_audio_file+0x26c>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

	if(fileSize%n != 0)
 80025e8:	4b6e      	ldr	r3, [pc, #440]	@ (80027a4 <read_audio_file+0x26c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80025f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80025f4:	fb01 f202 	mul.w	r2, r1, r2
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <read_audio_file+0xd0>
	{
		nrFrames++;
 80025fe:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8002602:	3301      	adds	r3, #1
 8002604:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
	}

	uint8_t index = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	char tempBuffer[n];
 800260e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8002612:	3b01      	subs	r3, #1
 8002614:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8002618:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800261c:	2200      	movs	r2, #0
 800261e:	4698      	mov	r8, r3
 8002620:	4691      	mov	r9, r2
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800262e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002636:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800263a:	2200      	movs	r2, #0
 800263c:	461c      	mov	r4, r3
 800263e:	4615      	mov	r5, r2
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	00eb      	lsls	r3, r5, #3
 800264a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264e:	00e2      	lsls	r2, r4, #3
 8002650:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8002654:	3307      	adds	r3, #7
 8002656:	08db      	lsrs	r3, r3, #3
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	ebad 0d03 	sub.w	sp, sp, r3
 800265e:	466b      	mov	r3, sp
 8002660:	3300      	adds	r3, #0
 8002662:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 8002666:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	f107 031c 	add.w	r3, r7, #28
 8002670:	f107 0020 	add.w	r0, r7, #32
 8002674:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8002678:	f009 f8ea 	bl	800b850 <f_read>
	tempBuffer[byteRead] = '\n';
 800267c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002680:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 800268a:	210a      	movs	r1, #10
 800268c:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 8002694:	e040      	b.n	8002718 <read_audio_file+0x1e0>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 8002696:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 800269a:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	2b0a      	cmp	r3, #10
 80026a2:	d011      	beq.n	80026c8 <read_audio_file+0x190>
		{
			nrCharBuffer[index] = tempBuffer[i];
 80026a4:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 80026a8:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 80026ac:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 80026b0:	5c89      	ldrb	r1, [r1, r2]
 80026b2:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80026b6:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80026ba:	54d1      	strb	r1, [r2, r3]
			index++;
 80026bc:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 80026c0:	3301      	adds	r3, #1
 80026c2:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
 80026c6:	e022      	b.n	800270e <read_audio_file+0x1d6>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 80026c8:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 80026cc:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80026d0:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80026d4:	210a      	movs	r1, #10
 80026d6:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fedd 	bl	800249c <string_to_int>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80026ea:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	601a      	str	r2, [r3, #0]
			buffer++;
 80026f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80026f6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80026fa:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80026fe:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	3204      	adds	r2, #4
 8002706:	601a      	str	r2, [r3, #0]

			index = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	for(uint16_t i=0; i< byteRead; i++)
 800270e:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 8002712:	3301      	adds	r3, #1
 8002714:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 8002718:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 800271c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002720:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d3b5      	bcc.n	8002696 <read_audio_file+0x15e>


	}


	if(currentFrame == nrFrames)
 800272a:	4b1d      	ldr	r3, [pc, #116]	@ (80027a0 <read_audio_file+0x268>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8002734:	4293      	cmp	r3, r2
 8002736:	d10f      	bne.n	8002758 <read_audio_file+0x220>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 8002738:	4b18      	ldr	r3, [pc, #96]	@ (800279c <read_audio_file+0x264>)
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
		*flagAudioDone = 1;
 800273e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002742:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]

		f_close(&file);
 800274c:	f107 0320 	add.w	r3, r7, #32
 8002750:	4618      	mov	r0, r3
 8002752:	f009 fbaf 	bl	800beb4 <f_close>
		return;
 8002756:	e018      	b.n	800278a <read_audio_file+0x252>
	}

	currentFrame++;
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <read_audio_file+0x268>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <read_audio_file+0x268>)
 8002762:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 8002764:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002768:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <read_audio_file+0x260>)
 8002770:	6013      	str	r3, [r2, #0]
	currentPosition++;
 8002772:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <read_audio_file+0x260>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	4a07      	ldr	r2, [pc, #28]	@ (8002798 <read_audio_file+0x260>)
 800277a:	6013      	str	r3, [r2, #0]

	f_close(&file);
 800277c:	f107 0320 	add.w	r3, r7, #32
 8002780:	4618      	mov	r0, r3
 8002782:	f009 fb97 	bl	800beb4 <f_close>
 8002786:	46b5      	mov	sp, r6
 8002788:	e000      	b.n	800278c <read_audio_file+0x254>
		return;
 800278a:	46b5      	mov	sp, r6


}
 800278c:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 8002790:	46bd      	mov	sp, r7
 8002792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002796:	bf00      	nop
 8002798:	2000055c 	.word	0x2000055c
 800279c:	20000008 	.word	0x20000008
 80027a0:	20000560 	.word	0x20000560
 80027a4:	20000564 	.word	0x20000564

080027a8 <read_image_file>:


void read_image_file(char *filePathName, ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 80027a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027ac:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	f507 7616 	add.w	r6, r7, #600	@ 0x258
 80027b6:	f5a6 7613 	sub.w	r6, r6, #588	@ 0x24c
 80027ba:	6030      	str	r0, [r6, #0]
 80027bc:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 80027c0:	f5a0 7014 	sub.w	r0, r0, #592	@ 0x250
 80027c4:	6001      	str	r1, [r0, #0]
 80027c6:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 80027ca:	f5a1 7115 	sub.w	r1, r1, #596	@ 0x254
 80027ce:	600a      	str	r2, [r1, #0]
 80027d0:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 80027d4:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	466b      	mov	r3, sp
 80027dc:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 80027de:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80027e2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80027e6:	f107 001c 	add.w	r0, r7, #28
 80027ea:	2201      	movs	r2, #1
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	f008 fe75 	bl	800b4dc <f_open>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 80027f8:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f040 81b0 	bne.w	8002b62 <read_image_file+0x3ba>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 8002802:	4ba9      	ldr	r3, [pc, #676]	@ (8002aa8 <read_image_file+0x300>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80d6 	beq.w	80029b8 <read_image_file+0x210>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 800280c:	4ba7      	ldr	r3, [pc, #668]	@ (8002aac <read_image_file+0x304>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8002812:	4ba6      	ldr	r3, [pc, #664]	@ (8002aac <read_image_file+0x304>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	f107 031c 	add.w	r3, r7, #28
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f009 fb73 	bl	800bf08 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8002822:	f107 0318 	add.w	r3, r7, #24
 8002826:	f107 0114 	add.w	r1, r7, #20
 800282a:	f107 001c 	add.w	r0, r7, #28
 800282e:	2204      	movs	r2, #4
 8002830:	f009 f80e 	bl	800b850 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8002834:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002838:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2200      	movs	r2, #0
 8002840:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8002842:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002846:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2200      	movs	r2, #0
 800284e:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8002850:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002854:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800285e:	461a      	mov	r2, r3
 8002860:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002864:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	4313      	orrs	r3, r2
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	b21a      	sxth	r2, r3
 8002870:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002874:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800287e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002882:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b21b      	sxth	r3, r3
 800288a:	430b      	orrs	r3, r1
 800288c:	b21b      	sxth	r3, r3
 800288e:	4313      	orrs	r3, r2
 8002890:	b21a      	sxth	r2, r3
 8002892:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002896:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 800289e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028a2:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028ac:	461a      	mov	r2, r3
 80028ae:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028b2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80028b6:	78db      	ldrb	r3, [r3, #3]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	b21a      	sxth	r2, r3
 80028be:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028c2:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80028cc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028d0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80028d4:	789b      	ldrb	r3, [r3, #2]
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	430b      	orrs	r3, r1
 80028da:	b21b      	sxth	r3, r3
 80028dc:	4313      	orrs	r3, r2
 80028de:	b21a      	sxth	r2, r3
 80028e0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028e4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 80028ec:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028f0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002900:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002912:	da1f      	bge.n	8002954 <read_image_file+0x1ac>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8002914:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002918:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002922:	461a      	mov	r2, r3
 8002924:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002928:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002932:	fb03 f202 	mul.w	r2, r3, r2
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f009 feed 	bl	800c71c <malloc>
 8002942:	4603      	mov	r3, r0
 8002944:	461a      	mov	r2, r3
 8002946:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800294a:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	e00b      	b.n	800296c <read_image_file+0x1c4>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->data = malloc(sizeof(char)*3072);
 8002954:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002958:	f009 fee0 	bl	800c71c <malloc>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002964:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 800296c:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa8 <read_image_file+0x300>)
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002972:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab0 <read_image_file+0x308>)
 8002974:	2200      	movs	r2, #0
 8002976:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8002978:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800297c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a4a      	ldr	r2, [pc, #296]	@ (8002aac <read_image_file+0x304>)
 8002984:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8002986:	4b49      	ldr	r3, [pc, #292]	@ (8002aac <read_image_file+0x304>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f107 031c 	add.w	r3, r7, #28
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f009 fab9 	bl	800bf08 <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8002996:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800299a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	3b04      	subs	r3, #4
 80029a2:	4a44      	ldr	r2, [pc, #272]	@ (8002ab4 <read_image_file+0x30c>)
 80029a4:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 80029a6:	4b43      	ldr	r3, [pc, #268]	@ (8002ab4 <read_image_file+0x30c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a43      	ldr	r2, [pc, #268]	@ (8002ab8 <read_image_file+0x310>)
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80029b2:	4a42      	ldr	r2, [pc, #264]	@ (8002abc <read_image_file+0x314>)
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e007      	b.n	80029c8 <read_image_file+0x220>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 80029b8:	4b3c      	ldr	r3, [pc, #240]	@ (8002aac <read_image_file+0x304>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f009 faa0 	bl	800bf08 <f_lseek>
	}



	if(fileSize == n)
 80029c8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab4 <read_image_file+0x30c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ab8 <read_image_file+0x310>)
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d104      	bne.n	80029de <read_image_file+0x236>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 80029d4:	4b39      	ldr	r3, [pc, #228]	@ (8002abc <read_image_file+0x314>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3b01      	subs	r3, #1
 80029da:	4a38      	ldr	r2, [pc, #224]	@ (8002abc <read_image_file+0x314>)
 80029dc:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 80029de:	4b35      	ldr	r3, [pc, #212]	@ (8002ab4 <read_image_file+0x30c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a35      	ldr	r2, [pc, #212]	@ (8002ab8 <read_image_file+0x310>)
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80029ea:	fb01 f202 	mul.w	r2, r1, r2
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <read_image_file+0x25e>
 80029f4:	4b31      	ldr	r3, [pc, #196]	@ (8002abc <read_image_file+0x314>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <read_image_file+0x25e>
	{
		nrFrames++;
 80029fc:	4b2f      	ldr	r3, [pc, #188]	@ (8002abc <read_image_file+0x314>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	4a2e      	ldr	r2, [pc, #184]	@ (8002abc <read_image_file+0x314>)
 8002a04:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 8002a06:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a0a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2200      	movs	r2, #0
 8002a12:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 8002a14:	4b28      	ldr	r3, [pc, #160]	@ (8002ab8 <read_image_file+0x310>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8002a1e:	4b26      	ldr	r3, [pc, #152]	@ (8002ab8 <read_image_file+0x310>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	2300      	movs	r3, #0
 8002a26:	4690      	mov	r8, r2
 8002a28:	4699      	mov	r9, r3
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <read_image_file+0x310>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	2300      	movs	r3, #0
 8002a46:	4614      	mov	r4, r2
 8002a48:	461d      	mov	r5, r3
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	00eb      	lsls	r3, r5, #3
 8002a54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a58:	00e2      	lsls	r2, r4, #3
 8002a5a:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <read_image_file+0x310>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3307      	adds	r3, #7
 8002a60:	08db      	lsrs	r3, r3, #3
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	ebad 0d03 	sub.w	sp, sp, r3
 8002a68:	466b      	mov	r3, sp
 8002a6a:	3300      	adds	r3, #0
 8002a6c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 8002a70:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <read_image_file+0x310>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	f107 0318 	add.w	r3, r7, #24
 8002a7a:	f107 001c 	add.w	r0, r7, #28
 8002a7e:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002a82:	f008 fee5 	bl	800b850 <f_read>
	(*indexFlag) = byteRead;
 8002a86:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a8a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a96:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8002aa4:	e020      	b.n	8002ae8 <read_image_file+0x340>
 8002aa6:	bf00      	nop
 8002aa8:	20000009 	.word	0x20000009
 8002aac:	20000568 	.word	0x20000568
 8002ab0:	2000056c 	.word	0x2000056c
 8002ab4:	20000570 	.word	0x20000570
 8002ab8:	0800d924 	.word	0x0800d924
 8002abc:	20000574 	.word	0x20000574
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->data[i] = tempBuffer[i];
 8002ac0:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8002ac4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ac8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68d9      	ldr	r1, [r3, #12]
 8002ad0:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002ada:	5c8a      	ldrb	r2, [r1, r2]
 8002adc:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 8002ade:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8002ae8:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8002aec:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002af0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3e2      	bcc.n	8002ac0 <read_image_file+0x318>

	}


	currentFrame++;
 8002afa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <read_image_file+0x3c8>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <read_image_file+0x3c8>)
 8002b04:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <read_image_file+0x3c8>)
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <read_image_file+0x3cc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d208      	bcs.n	8002b26 <read_image_file+0x37e>
 8002b14:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b18:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b24:	d20f      	bcs.n	8002b46 <read_image_file+0x39e>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 8002b26:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b2a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 8002b34:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <read_image_file+0x3d0>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f009 f9b8 	bl	800beb4 <f_close>
		return;
 8002b44:	e00d      	b.n	8002b62 <read_image_file+0x3ba>
	}


	currentPosition = f_tell(&file);
 8002b46:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b4a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <read_image_file+0x3d4>)
 8002b52:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f009 f9ab 	bl	800beb4 <f_close>
 8002b5e:	46b5      	mov	sp, r6
 8002b60:	e000      	b.n	8002b64 <read_image_file+0x3bc>
		return;
 8002b62:	46b5      	mov	sp, r6


}
 8002b64:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b6e:	bf00      	nop
 8002b70:	2000056c 	.word	0x2000056c
 8002b74:	20000574 	.word	0x20000574
 8002b78:	20000009 	.word	0x20000009
 8002b7c:	20000568 	.word	0x20000568

08002b80 <frame_number_x>:



static uint16_t frame_number_x(ENTITY *entity, const float factor)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	ed87 0a02 	vstr	s0, [r7, #8]

	uint8_t x = 1;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	75fb      	strb	r3, [r7, #23]

	if(factor > 1)
 8002b90:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	dd33      	ble.n	8002c0a <frame_number_x+0x8a>
	{
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8002ba2:	e00b      	b.n	8002bbc <frame_number_x+0x3c>
		{
			if(x == entity->y1)
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <frame_number_x+0x36>
			{
				return x;
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	e05f      	b.n	8002c76 <frame_number_x+0xf6>
			}

			x++;
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bca:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002c84 <frame_number_x+0x104>
 8002bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	d9d6      	bls.n	8002ba4 <frame_number_x+0x24>
		}


		if(x==1)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <frame_number_x+0x80>
		{
			return 1;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e03a      	b.n	8002c76 <frame_number_x+0xf6>
		}

		else
		{
			return (x-1);
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	e035      	b.n	8002c76 <frame_number_x+0xf6>
	}


	else
	{
		x = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	75fb      	strb	r3, [r7, #23]

		while((((int)(entity->x1)*x) <= (32*32)))
 8002c0e:	e016      	b.n	8002c3e <frame_number_x+0xbe>
		{
			if(x == entity->y1)
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <frame_number_x+0xa2>
			{
				return x;
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	e029      	b.n	8002c76 <frame_number_x+0xf6>
			}

			x = x + (int)(1/factor);
 8002c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c26:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c32:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c36:	793a      	ldrb	r2, [r7, #4]
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*x) <= (32*32)))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c44:	461a      	mov	r2, r3
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c50:	ddde      	ble.n	8002c10 <frame_number_x+0x90>
		}


		return (x-(1/factor));
 8002c52:	7dfb      	ldrb	r3, [r7, #23]
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c5c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002c60:	edd7 6a02 	vldr	s13, [r7, #8]
 8002c64:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c70:	ee17 3a90 	vmov	r3, s15
 8002c74:	b29b      	uxth	r3, r3

	}


}
 8002c76:	4618      	mov	r0, r3
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	44800000 	.word	0x44800000

08002c88 <read_image_file_scaling>:



void read_image_file_scaling(char *filePathName, ENTITY *entity, const float factor, uint16_t *px, bool *flagTerm)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8002c94:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8002c98:	6020      	str	r0, [r4, #0]
 8002c9a:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8002c9e:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8002ca2:	6001      	str	r1, [r0, #0]
 8002ca4:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8002ca8:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8002cac:	ed81 0a00 	vstr	s0, [r1]
 8002cb0:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8002cb4:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8002cb8:	600a      	str	r2, [r1, #0]
 8002cba:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002cbe:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8002cc2:	6013      	str	r3, [r2, #0]

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8002cc4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002cc8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002ccc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	f008 fc02 	bl	800b4dc <f_open>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 8002cde:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 81be 	bne.w	8003064 <read_image_file_scaling+0x3dc>
	static FSIZE_t currentPosition = 0;

	static uint16_t x = 0; /*Numarul de linii din M1 ai sa avem sub 32x32 pixeli de prelucrat in M2*/
	static unsigned int nrFrames = 0;

	if(flagNewImageFile == 1)
 8002ce8:	4ba9      	ldr	r3, [pc, #676]	@ (8002f90 <read_image_file_scaling+0x308>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8112 	beq.w	8002f16 <read_image_file_scaling+0x28e>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8002cf2:	4ba8      	ldr	r3, [pc, #672]	@ (8002f94 <read_image_file_scaling+0x30c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8002cf8:	4ba6      	ldr	r3, [pc, #664]	@ (8002f94 <read_image_file_scaling+0x30c>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f009 f900 	bl	800bf08 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8002d08:	f107 0320 	add.w	r3, r7, #32
 8002d0c:	f107 011c 	add.w	r1, r7, #28
 8002d10:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002d14:	2204      	movs	r2, #4
 8002d16:	f008 fd9b 	bl	800b850 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8002d1a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d1e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2200      	movs	r2, #0
 8002d26:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8002d28:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d2c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8002d36:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d3a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d4a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002d4e:	785b      	ldrb	r3, [r3, #1]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	b21a      	sxth	r2, r3
 8002d56:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d5a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8002d64:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d68:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b21b      	sxth	r3, r3
 8002d70:	430b      	orrs	r3, r1
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b21a      	sxth	r2, r3
 8002d78:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d7c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8002d84:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d88:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d98:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002d9c:	78db      	ldrb	r3, [r3, #3]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	b21a      	sxth	r2, r3
 8002da4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002da8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8002db2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002db6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002dba:	789b      	ldrb	r3, [r3, #2]
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	b21b      	sxth	r3, r3
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	b21a      	sxth	r2, r3
 8002dc6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002dca:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	811a      	strh	r2, [r3, #8]


		flagNewImageFile = 0;
 8002dd2:	4b6f      	ldr	r3, [pc, #444]	@ (8002f90 <read_image_file_scaling+0x308>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f98 <read_image_file_scaling+0x310>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	801a      	strh	r2, [r3, #0]
		flagOneFrame = 0;
 8002dde:	4b6f      	ldr	r3, [pc, #444]	@ (8002f9c <read_image_file_scaling+0x314>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]

		currentPosition = byteRead;
 8002de4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002de8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a69      	ldr	r2, [pc, #420]	@ (8002f94 <read_image_file_scaling+0x30c>)
 8002df0:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8002df2:	4b68      	ldr	r3, [pc, #416]	@ (8002f94 <read_image_file_scaling+0x30c>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f009 f883 	bl	800bf08 <f_lseek>


		x = frame_number_x(entity, factor); /*numarul de linii cuprins in fiecare frame al matricei M1*/
 8002e02:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e06:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 8002e0a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e0e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e12:	ed92 0a00 	vldr	s0, [r2]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	f7ff feb2 	bl	8002b80 <frame_number_x>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa0 <read_image_file_scaling+0x318>)
 8002e22:	801a      	strh	r2, [r3, #0]
		*px = x;
 8002e24:	4b5e      	ldr	r3, [pc, #376]	@ (8002fa0 <read_image_file_scaling+0x318>)
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e2c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	801a      	strh	r2, [r3, #0]

		if(x == entity->y1)
 8002e34:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa0 <read_image_file_scaling+0x318>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e3e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d125      	bne.n	8002e98 <read_image_file_scaling+0x210>
		{
			flagOneFrame = 1;
 8002e4c:	4b53      	ldr	r3, [pc, #332]	@ (8002f9c <read_image_file_scaling+0x314>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
			nrFrames = 1; /*Avem o imagine care scalata are mai putini de 32x32 pixeli*/
 8002e52:	4b54      	ldr	r3, [pc, #336]	@ (8002fa4 <read_image_file_scaling+0x31c>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8002e58:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e5c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e6c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e76:	fb03 f202 	mul.w	r2, r3, r2
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f009 fc4b 	bl	800c71c <malloc>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e8e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	e046      	b.n	8002f26 <read_image_file_scaling+0x29e>

		}

		else
		{
			entity->data = malloc(3*sizeof(char)*(entity->x1)*x);
 8002e98:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e9c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa0 <read_image_file_scaling+0x318>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	fb03 f202 	mul.w	r2, r3, r2
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f009 fc30 	bl	800c71c <malloc>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ec4:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60da      	str	r2, [r3, #12]

			nrFrames = (entity->y1) / x;
 8002ecc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ed0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b30      	ldr	r3, [pc, #192]	@ (8002fa0 <read_image_file_scaling+0x318>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa4 <read_image_file_scaling+0x31c>)
 8002ee8:	601a      	str	r2, [r3, #0]

			if((entity->y1) % x != 0)
 8002eea:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002eee:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ef8:	4a29      	ldr	r2, [pc, #164]	@ (8002fa0 <read_image_file_scaling+0x318>)
 8002efa:	8812      	ldrh	r2, [r2, #0]
 8002efc:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f00:	fb01 f202 	mul.w	r2, r1, r2
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <read_image_file_scaling+0x29e>
			{
				nrFrames++;
 8002f0a:	4b26      	ldr	r3, [pc, #152]	@ (8002fa4 <read_image_file_scaling+0x31c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	4a24      	ldr	r2, [pc, #144]	@ (8002fa4 <read_image_file_scaling+0x31c>)
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	e007      	b.n	8002f26 <read_image_file_scaling+0x29e>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8002f16:	4b1f      	ldr	r3, [pc, #124]	@ (8002f94 <read_image_file_scaling+0x30c>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f008 fff1 	bl	800bf08 <f_lseek>
	}


	/*Vom pune in entity->data primele valori*/

	if(flagOneFrame == 1)
 8002f26:	4b1d      	ldr	r3, [pc, #116]	@ (8002f9c <read_image_file_scaling+0x314>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03c      	beq.n	8002fa8 <read_image_file_scaling+0x320>
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*(entity->y1)), &byteRead);
 8002f2e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f32:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68d9      	ldr	r1, [r3, #12]
 8002f3a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f3e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f4e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f58:	fb03 f202 	mul.w	r2, r3, r2
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	441a      	add	r2, r3
 8002f62:	f107 0320 	add.w	r3, r7, #32
 8002f66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002f6a:	f008 fc71 	bl	800b850 <f_read>

		*flagTerm = 1;
 8002f6e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f72:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
		flagNewImageFile = 1;
 8002f7c:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <read_image_file_scaling+0x308>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8002f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f86:	4618      	mov	r0, r3
 8002f88:	f008 ff94 	bl	800beb4 <f_close>
		return;
 8002f8c:	e06b      	b.n	8003066 <read_image_file_scaling+0x3de>
 8002f8e:	bf00      	nop
 8002f90:	2000000a 	.word	0x2000000a
 8002f94:	20000578 	.word	0x20000578
 8002f98:	2000057c 	.word	0x2000057c
 8002f9c:	2000057e 	.word	0x2000057e
 8002fa0:	20000580 	.word	0x20000580
 8002fa4:	20000584 	.word	0x20000584

	}

	else
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*x), &byteRead);
 8002fa8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002fac:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68d9      	ldr	r1, [r3, #12]
 8002fb4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002fb8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003070 <read_image_file_scaling+0x3e8>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	fb03 f202 	mul.w	r2, r3, r2
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	441a      	add	r2, r3
 8002fd2:	f107 0320 	add.w	r3, r7, #32
 8002fd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002fda:	f008 fc39 	bl	800b850 <f_read>

		currentFrame++;
 8002fde:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <read_image_file_scaling+0x3ec>)
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	4b23      	ldr	r3, [pc, #140]	@ (8003074 <read_image_file_scaling+0x3ec>)
 8002fe8:	801a      	strh	r2, [r3, #0]

		if((currentFrame >= nrFrames))
 8002fea:	4b22      	ldr	r3, [pc, #136]	@ (8003074 <read_image_file_scaling+0x3ec>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4b21      	ldr	r3, [pc, #132]	@ (8003078 <read_image_file_scaling+0x3f0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d328      	bcc.n	800304a <read_image_file_scaling+0x3c2>
		{
			*px = (entity->y1) - x*(nrFrames-1); /*recalculam ultimul numar de linii de citit*/
 8002ff8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ffc:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003006:	b29a      	uxth	r2, r3
 8003008:	4b1b      	ldr	r3, [pc, #108]	@ (8003078 <read_image_file_scaling+0x3f0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3b01      	subs	r3, #1
 800300e:	b299      	uxth	r1, r3
 8003010:	4b17      	ldr	r3, [pc, #92]	@ (8003070 <read_image_file_scaling+0x3e8>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	fb11 f303 	smulbb	r3, r1, r3
 8003018:	b29b      	uxth	r3, r3
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	b29a      	uxth	r2, r3
 800301e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003022:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	801a      	strh	r2, [r3, #0]
			*flagTerm = 1;
 800302a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800302e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
			flagNewImageFile = 1;
 8003038:	4b10      	ldr	r3, [pc, #64]	@ (800307c <read_image_file_scaling+0x3f4>)
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
			f_close(&file);
 800303e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003042:	4618      	mov	r0, r3
 8003044:	f008 ff36 	bl	800beb4 <f_close>
			return;
 8003048:	e00d      	b.n	8003066 <read_image_file_scaling+0x3de>
		}



		currentPosition = f_tell(&file);
 800304a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800304e:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	4a0a      	ldr	r2, [pc, #40]	@ (8003080 <read_image_file_scaling+0x3f8>)
 8003056:	6013      	str	r3, [r2, #0]
		f_close(&file);
 8003058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800305c:	4618      	mov	r0, r3
 800305e:	f008 ff29 	bl	800beb4 <f_close>
 8003062:	e000      	b.n	8003066 <read_image_file_scaling+0x3de>
		return;
 8003064:	bf00      	nop

	}



}
 8003066:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 800306a:	46bd      	mov	sp, r7
 800306c:	bd90      	pop	{r4, r7, pc}
 800306e:	bf00      	nop
 8003070:	20000580 	.word	0x20000580
 8003074:	2000057c 	.word	0x2000057c
 8003078:	20000584 	.word	0x20000584
 800307c:	2000000a 	.word	0x2000000a
 8003080:	20000578 	.word	0x20000578

08003084 <write_image_file>:



void write_image_file(char *filePathName, uint8_t *data, size_t nrBytesData, int16_t x1, int16_t y1, bool flagTerm)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 800308a:	af00      	add	r7, sp, #0
 800308c:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8003090:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003094:	6020      	str	r0, [r4, #0]
 8003096:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800309a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800309e:	6001      	str	r1, [r0, #0]
 80030a0:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80030a4:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80030a8:	600a      	str	r2, [r1, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80030b0:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80030b4:	801a      	strh	r2, [r3, #0]


	static bool flagStart = 0;
	static FSIZE_t currentPosition = 0;

	if(flagStart == 0)
 80030b6:	4b4b      	ldr	r3, [pc, #300]	@ (80031e4 <write_image_file+0x160>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	f083 0301 	eor.w	r3, r3, #1
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d04b      	beq.n	800315c <write_image_file+0xd8>
	{

		res = f_open(&file, filePathName, FA_WRITE | FA_CREATE_ALWAYS);
 80030c4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80030c8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80030cc:	f107 001c 	add.w	r0, r7, #28
 80030d0:	220a      	movs	r2, #10
 80030d2:	6819      	ldr	r1, [r3, #0]
 80030d4:	f008 fa02 	bl	800b4dc <f_open>
 80030d8:	4603      	mov	r3, r0
 80030da:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f


		if (res != FR_OK)
 80030de:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d177      	bne.n	80031d6 <write_image_file+0x152>
		{
		    return;
		}


		currentPosition = 0;
 80030e6:	4b40      	ldr	r3, [pc, #256]	@ (80031e8 <write_image_file+0x164>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
		/*
		 * Scriem mai intai headerul anume
		 * dimensiunea imaginii asociate
		 */

		header[0] = (int8_t)(x1);
 80030ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80030f0:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80030fc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003100:	701a      	strb	r2, [r3, #0]
		header[1] = (int8_t)(x1>>8);
 8003102:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003106:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 800310a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800310e:	121b      	asrs	r3, r3, #8
 8003110:	b21b      	sxth	r3, r3
 8003112:	b2da      	uxtb	r2, r3
 8003114:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003118:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800311c:	705a      	strb	r2, [r3, #1]
		header[2] = (int8_t)(y1);
 800311e:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 8003122:	b2da      	uxtb	r2, r3
 8003124:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003128:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800312c:	709a      	strb	r2, [r3, #2]
		header[3] = (int8_t)(y1>>8);
 800312e:	f9b7 3260 	ldrsh.w	r3, [r7, #608]	@ 0x260
 8003132:	121b      	asrs	r3, r3, #8
 8003134:	b21b      	sxth	r3, r3
 8003136:	b2da      	uxtb	r2, r3
 8003138:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800313c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003140:	70da      	strb	r2, [r3, #3]

		f_write(&file, header, 4, &byteWr);
 8003142:	f107 0318 	add.w	r3, r7, #24
 8003146:	f107 0114 	add.w	r1, r7, #20
 800314a:	f107 001c 	add.w	r0, r7, #28
 800314e:	2204      	movs	r2, #4
 8003150:	f008 fcbd 	bl	800bace <f_write>

		flagStart = 1;
 8003154:	4b23      	ldr	r3, [pc, #140]	@ (80031e4 <write_image_file+0x160>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e018      	b.n	800318e <write_image_file+0x10a>
	}


	else
	{
		res = f_open(&file, filePathName, FA_WRITE | FA_OPEN_ALWAYS);
 800315c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003160:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003164:	f107 001c 	add.w	r0, r7, #28
 8003168:	2212      	movs	r2, #18
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	f008 f9b6 	bl	800b4dc <f_open>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

		if (res != FR_OK)
 8003176:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800317a:	2b00      	cmp	r3, #0
 800317c:	d12d      	bne.n	80031da <write_image_file+0x156>
		{
		    return;
		}

		f_lseek(&file, currentPosition);
 800317e:	4b1a      	ldr	r3, [pc, #104]	@ (80031e8 <write_image_file+0x164>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	f107 031c 	add.w	r3, r7, #28
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f008 febd 	bl	800bf08 <f_lseek>

	}


	if(flagTerm == 1)
 800318e:	f897 3264 	ldrb.w	r3, [r7, #612]	@ 0x264
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <write_image_file+0x118>
	{
		flagStart = 0;
 8003196:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <write_image_file+0x160>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]

	}


	f_write(&file, data, nrBytesData, &byteWr);
 800319c:	f107 0318 	add.w	r3, r7, #24
 80031a0:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80031a4:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80031a8:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80031ac:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 80031b0:	f107 001c 	add.w	r0, r7, #28
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	6809      	ldr	r1, [r1, #0]
 80031b8:	f008 fc89 	bl	800bace <f_write>
	currentPosition = f_tell(&file);
 80031bc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031c0:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	4a08      	ldr	r2, [pc, #32]	@ (80031e8 <write_image_file+0x164>)
 80031c8:	6013      	str	r3, [r2, #0]

	f_close(&file);
 80031ca:	f107 031c 	add.w	r3, r7, #28
 80031ce:	4618      	mov	r0, r3
 80031d0:	f008 fe70 	bl	800beb4 <f_close>
 80031d4:	e002      	b.n	80031dc <write_image_file+0x158>
		    return;
 80031d6:	bf00      	nop
 80031d8:	e000      	b.n	80031dc <write_image_file+0x158>
		    return;
 80031da:	bf00      	nop

}
 80031dc:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}
 80031e4:	20000588 	.word	0x20000588
 80031e8:	2000058c 	.word	0x2000058c

080031ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <HAL_MspInit+0x4c>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003238 <HAL_MspInit+0x4c>)
 80031fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003200:	6453      	str	r3, [r2, #68]	@ 0x44
 8003202:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <HAL_MspInit+0x4c>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <HAL_MspInit+0x4c>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	4a08      	ldr	r2, [pc, #32]	@ (8003238 <HAL_MspInit+0x4c>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800321c:	6413      	str	r3, [r2, #64]	@ 0x40
 800321e:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <HAL_MspInit+0x4c>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800

0800323c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	@ 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a30      	ldr	r2, [pc, #192]	@ (800331c <HAL_DAC_MspInit+0xe0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d159      	bne.n	8003312 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	4b2f      	ldr	r3, [pc, #188]	@ (8003320 <HAL_DAC_MspInit+0xe4>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	4a2e      	ldr	r2, [pc, #184]	@ (8003320 <HAL_DAC_MspInit+0xe4>)
 8003268:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800326c:	6413      	str	r3, [r2, #64]	@ 0x40
 800326e:	4b2c      	ldr	r3, [pc, #176]	@ (8003320 <HAL_DAC_MspInit+0xe4>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b28      	ldr	r3, [pc, #160]	@ (8003320 <HAL_DAC_MspInit+0xe4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	4a27      	ldr	r2, [pc, #156]	@ (8003320 <HAL_DAC_MspInit+0xe4>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6313      	str	r3, [r2, #48]	@ 0x30
 800328a:	4b25      	ldr	r3, [pc, #148]	@ (8003320 <HAL_DAC_MspInit+0xe4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003296:	2310      	movs	r3, #16
 8003298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800329a:	2303      	movs	r3, #3
 800329c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	4619      	mov	r1, r3
 80032a8:	481e      	ldr	r0, [pc, #120]	@ (8003324 <HAL_DAC_MspInit+0xe8>)
 80032aa:	f001 fa73 	bl	8004794 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80032ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 80032b0:	4a1e      	ldr	r2, [pc, #120]	@ (800332c <HAL_DAC_MspInit+0xf0>)
 80032b2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80032b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 80032b6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80032ba:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 80032be:	2240      	movs	r2, #64	@ 0x40
 80032c0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032c2:	4b19      	ldr	r3, [pc, #100]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80032c8:	4b17      	ldr	r3, [pc, #92]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 80032ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032ce:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032d0:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 80032d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032d6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032d8:	4b13      	ldr	r3, [pc, #76]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 80032da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80032de:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80032e0:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 80032e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032e6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80032e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 80032ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032ee:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80032f6:	480c      	ldr	r0, [pc, #48]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 80032f8:	f000 fe4a 	bl	8003f90 <HAL_DMA_Init>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8003302:	f7ff f8b7 	bl	8002474 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a07      	ldr	r2, [pc, #28]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	4a06      	ldr	r2, [pc, #24]	@ (8003328 <HAL_DAC_MspInit+0xec>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003312:	bf00      	nop
 8003314:	3728      	adds	r7, #40	@ 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40007400 	.word	0x40007400
 8003320:	40023800 	.word	0x40023800
 8003324:	40020000 	.word	0x40020000
 8003328:	2000009c 	.word	0x2000009c
 800332c:	40026088 	.word	0x40026088

08003330 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	@ 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 0314 	add.w	r3, r7, #20
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a31      	ldr	r2, [pc, #196]	@ (8003414 <HAL_SD_MspInit+0xe4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d15b      	bne.n	800340a <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	4b30      	ldr	r3, [pc, #192]	@ (8003418 <HAL_SD_MspInit+0xe8>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335a:	4a2f      	ldr	r2, [pc, #188]	@ (8003418 <HAL_SD_MspInit+0xe8>)
 800335c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003360:	6453      	str	r3, [r2, #68]	@ 0x44
 8003362:	4b2d      	ldr	r3, [pc, #180]	@ (8003418 <HAL_SD_MspInit+0xe8>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	4b29      	ldr	r3, [pc, #164]	@ (8003418 <HAL_SD_MspInit+0xe8>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	4a28      	ldr	r2, [pc, #160]	@ (8003418 <HAL_SD_MspInit+0xe8>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6313      	str	r3, [r2, #48]	@ 0x30
 800337e:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <HAL_SD_MspInit+0xe8>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	4b22      	ldr	r3, [pc, #136]	@ (8003418 <HAL_SD_MspInit+0xe8>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	4a21      	ldr	r2, [pc, #132]	@ (8003418 <HAL_SD_MspInit+0xe8>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6313      	str	r3, [r2, #48]	@ 0x30
 800339a:	4b1f      	ldr	r3, [pc, #124]	@ (8003418 <HAL_SD_MspInit+0xe8>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80033a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b0:	2301      	movs	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b4:	2303      	movs	r3, #3
 80033b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80033b8:	230c      	movs	r3, #12
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	4619      	mov	r1, r3
 80033c2:	4816      	ldr	r0, [pc, #88]	@ (800341c <HAL_SD_MspInit+0xec>)
 80033c4:	f001 f9e6 	bl	8004794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d6:	2303      	movs	r3, #3
 80033d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80033da:	230c      	movs	r3, #12
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033de:	f107 0314 	add.w	r3, r7, #20
 80033e2:	4619      	mov	r1, r3
 80033e4:	480d      	ldr	r0, [pc, #52]	@ (800341c <HAL_SD_MspInit+0xec>)
 80033e6:	f001 f9d5 	bl	8004794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033ea:	2304      	movs	r3, #4
 80033ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ee:	2302      	movs	r3, #2
 80033f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f6:	2303      	movs	r3, #3
 80033f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80033fa:	230c      	movs	r3, #12
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033fe:	f107 0314 	add.w	r3, r7, #20
 8003402:	4619      	mov	r1, r3
 8003404:	4806      	ldr	r0, [pc, #24]	@ (8003420 <HAL_SD_MspInit+0xf0>)
 8003406:	f001 f9c5 	bl	8004794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800340a:	bf00      	nop
 800340c:	3728      	adds	r7, #40	@ 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40023800 	.word	0x40023800
 800341c:	40020800 	.word	0x40020800
 8003420:	40020c00 	.word	0x40020c00

08003424 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	@ 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a47      	ldr	r2, [pc, #284]	@ (8003560 <HAL_SPI_MspInit+0x13c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	f040 8088 	bne.w	8003558 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	4b45      	ldr	r3, [pc, #276]	@ (8003564 <HAL_SPI_MspInit+0x140>)
 800344e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003450:	4a44      	ldr	r2, [pc, #272]	@ (8003564 <HAL_SPI_MspInit+0x140>)
 8003452:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003456:	6453      	str	r3, [r2, #68]	@ 0x44
 8003458:	4b42      	ldr	r3, [pc, #264]	@ (8003564 <HAL_SPI_MspInit+0x140>)
 800345a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	4b3e      	ldr	r3, [pc, #248]	@ (8003564 <HAL_SPI_MspInit+0x140>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346c:	4a3d      	ldr	r2, [pc, #244]	@ (8003564 <HAL_SPI_MspInit+0x140>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6313      	str	r3, [r2, #48]	@ 0x30
 8003474:	4b3b      	ldr	r3, [pc, #236]	@ (8003564 <HAL_SPI_MspInit+0x140>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003480:	23e0      	movs	r3, #224	@ 0xe0
 8003482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348c:	2303      	movs	r3, #3
 800348e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003490:	2305      	movs	r3, #5
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	4619      	mov	r1, r3
 800349a:	4833      	ldr	r0, [pc, #204]	@ (8003568 <HAL_SPI_MspInit+0x144>)
 800349c:	f001 f97a 	bl	8004794 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80034a0:	4b32      	ldr	r3, [pc, #200]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034a2:	4a33      	ldr	r2, [pc, #204]	@ (8003570 <HAL_SPI_MspInit+0x14c>)
 80034a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80034a6:	4b31      	ldr	r3, [pc, #196]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034a8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80034ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034ae:	4b2f      	ldr	r3, [pc, #188]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034b0:	2240      	movs	r2, #64	@ 0x40
 80034b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034b4:	4b2d      	ldr	r3, [pc, #180]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034ba:	4b2c      	ldr	r3, [pc, #176]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034c2:	4b2a      	ldr	r3, [pc, #168]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034c8:	4b28      	ldr	r3, [pc, #160]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80034ce:	4b27      	ldr	r3, [pc, #156]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034d4:	4b25      	ldr	r3, [pc, #148]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034da:	4b24      	ldr	r3, [pc, #144]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034dc:	2200      	movs	r2, #0
 80034de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80034e0:	4822      	ldr	r0, [pc, #136]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034e2:	f000 fd55 	bl	8003f90 <HAL_DMA_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80034ec:	f7fe ffc2 	bl	8002474 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a1e      	ldr	r2, [pc, #120]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034f4:	649a      	str	r2, [r3, #72]	@ 0x48
 80034f6:	4a1d      	ldr	r2, [pc, #116]	@ (800356c <HAL_SPI_MspInit+0x148>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80034fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 80034fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003578 <HAL_SPI_MspInit+0x154>)
 8003500:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003502:	4b1c      	ldr	r3, [pc, #112]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 8003504:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003508:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800350a:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003510:	4b18      	ldr	r3, [pc, #96]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003516:	4b17      	ldr	r3, [pc, #92]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 8003518:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800351c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800351e:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 8003520:	2200      	movs	r2, #0
 8003522:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003524:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 8003526:	2200      	movs	r2, #0
 8003528:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800352a:	4b12      	ldr	r3, [pc, #72]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 800352c:	2200      	movs	r2, #0
 800352e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003530:	4b10      	ldr	r3, [pc, #64]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 8003532:	2200      	movs	r2, #0
 8003534:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003536:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 8003538:	2200      	movs	r2, #0
 800353a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800353c:	480d      	ldr	r0, [pc, #52]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 800353e:	f000 fd27 	bl	8003f90 <HAL_DMA_Init>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003548:	f7fe ff94 	bl	8002474 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a09      	ldr	r2, [pc, #36]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 8003550:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003552:	4a08      	ldr	r2, [pc, #32]	@ (8003574 <HAL_SPI_MspInit+0x150>)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003558:	bf00      	nop
 800355a:	3728      	adds	r7, #40	@ 0x28
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40013000 	.word	0x40013000
 8003564:	40023800 	.word	0x40023800
 8003568:	40020000 	.word	0x40020000
 800356c:	200001d8 	.word	0x200001d8
 8003570:	40026458 	.word	0x40026458
 8003574:	20000238 	.word	0x20000238
 8003578:	40026410 	.word	0x40026410

0800357c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358c:	d10d      	bne.n	80035aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <HAL_TIM_Base_MspInit+0x3c>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	4a08      	ldr	r2, [pc, #32]	@ (80035b8 <HAL_TIM_Base_MspInit+0x3c>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6413      	str	r3, [r2, #64]	@ 0x40
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_TIM_Base_MspInit+0x3c>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800

080035bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	@ 0x28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003650 <HAL_UART_MspInit+0x94>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d134      	bne.n	8003648 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003654 <HAL_UART_MspInit+0x98>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003654 <HAL_UART_MspInit+0x98>)
 80035e8:	f043 0310 	orr.w	r3, r3, #16
 80035ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ee:	4b19      	ldr	r3, [pc, #100]	@ (8003654 <HAL_UART_MspInit+0x98>)
 80035f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	4b15      	ldr	r3, [pc, #84]	@ (8003654 <HAL_UART_MspInit+0x98>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	4a14      	ldr	r2, [pc, #80]	@ (8003654 <HAL_UART_MspInit+0x98>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6313      	str	r3, [r2, #48]	@ 0x30
 800360a:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <HAL_UART_MspInit+0x98>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003616:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800361a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003624:	2303      	movs	r3, #3
 8003626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003628:	2307      	movs	r3, #7
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	4619      	mov	r1, r3
 8003632:	4809      	ldr	r0, [pc, #36]	@ (8003658 <HAL_UART_MspInit+0x9c>)
 8003634:	f001 f8ae 	bl	8004794 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003638:	2200      	movs	r2, #0
 800363a:	2100      	movs	r1, #0
 800363c:	2025      	movs	r0, #37	@ 0x25
 800363e:	f000 fa48 	bl	8003ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003642:	2025      	movs	r0, #37	@ 0x25
 8003644:	f000 fa61 	bl	8003b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003648:	bf00      	nop
 800364a:	3728      	adds	r7, #40	@ 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40011000 	.word	0x40011000
 8003654:	40023800 	.word	0x40023800
 8003658:	40020000 	.word	0x40020000

0800365c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <NMI_Handler+0x4>

08003664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003668:	bf00      	nop
 800366a:	e7fd      	b.n	8003668 <HardFault_Handler+0x4>

0800366c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <MemManage_Handler+0x4>

08003674 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <BusFault_Handler+0x4>

0800367c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <UsageFault_Handler+0x4>

08003684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036b2:	f000 f8ef 	bl	8003894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80036c0:	4802      	ldr	r0, [pc, #8]	@ (80036cc <DMA1_Stream5_IRQHandler+0x10>)
 80036c2:	f000 fdfd 	bl	80042c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	2000009c 	.word	0x2000009c

080036d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036d4:	4802      	ldr	r0, [pc, #8]	@ (80036e0 <USART1_IRQHandler+0x10>)
 80036d6:	f004 fb85 	bl	8007de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200002e0 	.word	0x200002e0

080036e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80036e8:	4802      	ldr	r0, [pc, #8]	@ (80036f4 <DMA2_Stream0_IRQHandler+0x10>)
 80036ea:	f000 fde9 	bl	80042c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000238 	.word	0x20000238

080036f8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80036fc:	4802      	ldr	r0, [pc, #8]	@ (8003708 <DMA2_Stream3_IRQHandler+0x10>)
 80036fe:	f000 fddf 	bl	80042c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200001d8 	.word	0x200001d8

0800370c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003714:	4a14      	ldr	r2, [pc, #80]	@ (8003768 <_sbrk+0x5c>)
 8003716:	4b15      	ldr	r3, [pc, #84]	@ (800376c <_sbrk+0x60>)
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003720:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <_sbrk+0x64>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003728:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <_sbrk+0x64>)
 800372a:	4a12      	ldr	r2, [pc, #72]	@ (8003774 <_sbrk+0x68>)
 800372c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800372e:	4b10      	ldr	r3, [pc, #64]	@ (8003770 <_sbrk+0x64>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	429a      	cmp	r2, r3
 800373a:	d207      	bcs.n	800374c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800373c:	f009 f90a 	bl	800c954 <__errno>
 8003740:	4603      	mov	r3, r0
 8003742:	220c      	movs	r2, #12
 8003744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	e009      	b.n	8003760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800374c:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <_sbrk+0x64>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003752:	4b07      	ldr	r3, [pc, #28]	@ (8003770 <_sbrk+0x64>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	4a05      	ldr	r2, [pc, #20]	@ (8003770 <_sbrk+0x64>)
 800375c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800375e:	68fb      	ldr	r3, [r7, #12]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20020000 	.word	0x20020000
 800376c:	00000400 	.word	0x00000400
 8003770:	20000590 	.word	0x20000590
 8003774:	20000720 	.word	0x20000720

08003778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800377c:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <SystemInit+0x20>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	4a05      	ldr	r2, [pc, #20]	@ (8003798 <SystemInit+0x20>)
 8003784:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003788:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800379c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80037a0:	f7ff ffea 	bl	8003778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037a4:	480c      	ldr	r0, [pc, #48]	@ (80037d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037a6:	490d      	ldr	r1, [pc, #52]	@ (80037dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037a8:	4a0d      	ldr	r2, [pc, #52]	@ (80037e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037ac:	e002      	b.n	80037b4 <LoopCopyDataInit>

080037ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037b2:	3304      	adds	r3, #4

080037b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037b8:	d3f9      	bcc.n	80037ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ba:	4a0a      	ldr	r2, [pc, #40]	@ (80037e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037bc:	4c0a      	ldr	r4, [pc, #40]	@ (80037e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c0:	e001      	b.n	80037c6 <LoopFillZerobss>

080037c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037c4:	3204      	adds	r2, #4

080037c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037c8:	d3fb      	bcc.n	80037c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037ca:	f009 f8c9 	bl	800c960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ce:	f7fe f9ff 	bl	8001bd0 <main>
  bx  lr    
 80037d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80037e0:	0800d9ec 	.word	0x0800d9ec
  ldr r2, =_sbss
 80037e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80037e8:	2000071c 	.word	0x2000071c

080037ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037ec:	e7fe      	b.n	80037ec <ADC_IRQHandler>
	...

080037f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003830 <HAL_Init+0x40>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003830 <HAL_Init+0x40>)
 80037fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003800:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_Init+0x40>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <HAL_Init+0x40>)
 8003806:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800380a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800380c:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <HAL_Init+0x40>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a07      	ldr	r2, [pc, #28]	@ (8003830 <HAL_Init+0x40>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003818:	2003      	movs	r0, #3
 800381a:	f000 f94f 	bl	8003abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800381e:	200f      	movs	r0, #15
 8003820:	f000 f808 	bl	8003834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003824:	f7ff fce2 	bl	80031ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023c00 	.word	0x40023c00

08003834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800383c:	4b12      	ldr	r3, [pc, #72]	@ (8003888 <HAL_InitTick+0x54>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_InitTick+0x58>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	4619      	mov	r1, r3
 8003846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800384a:	fbb3 f3f1 	udiv	r3, r3, r1
 800384e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f967 	bl	8003b26 <HAL_SYSTICK_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e00e      	b.n	8003880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b0f      	cmp	r3, #15
 8003866:	d80a      	bhi.n	800387e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003868:	2200      	movs	r2, #0
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	f000 f92f 	bl	8003ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003874:	4a06      	ldr	r2, [pc, #24]	@ (8003890 <HAL_InitTick+0x5c>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	2000000c 	.word	0x2000000c
 800388c:	20000014 	.word	0x20000014
 8003890:	20000010 	.word	0x20000010

08003894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003898:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <HAL_IncTick+0x20>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_IncTick+0x24>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4413      	add	r3, r2
 80038a4:	4a04      	ldr	r2, [pc, #16]	@ (80038b8 <HAL_IncTick+0x24>)
 80038a6:	6013      	str	r3, [r2, #0]
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000014 	.word	0x20000014
 80038b8:	20000594 	.word	0x20000594

080038bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return uwTick;
 80038c0:	4b03      	ldr	r3, [pc, #12]	@ (80038d0 <HAL_GetTick+0x14>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000594 	.word	0x20000594

080038d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038dc:	f7ff ffee 	bl	80038bc <HAL_GetTick>
 80038e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d005      	beq.n	80038fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <HAL_Delay+0x44>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038fa:	bf00      	nop
 80038fc:	f7ff ffde 	bl	80038bc <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	429a      	cmp	r2, r3
 800390a:	d8f7      	bhi.n	80038fc <HAL_Delay+0x28>
  {
  }
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000014 	.word	0x20000014

0800391c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800392c:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <__NVIC_SetPriorityGrouping+0x44>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003938:	4013      	ands	r3, r2
 800393a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800394e:	4a04      	ldr	r2, [pc, #16]	@ (8003960 <__NVIC_SetPriorityGrouping+0x44>)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	60d3      	str	r3, [r2, #12]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003968:	4b04      	ldr	r3, [pc, #16]	@ (800397c <__NVIC_GetPriorityGrouping+0x18>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	0a1b      	lsrs	r3, r3, #8
 800396e:	f003 0307 	and.w	r3, r3, #7
}
 8003972:	4618      	mov	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	2b00      	cmp	r3, #0
 8003990:	db0b      	blt.n	80039aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	f003 021f 	and.w	r2, r3, #31
 8003998:	4907      	ldr	r1, [pc, #28]	@ (80039b8 <__NVIC_EnableIRQ+0x38>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	2001      	movs	r0, #1
 80039a2:	fa00 f202 	lsl.w	r2, r0, r2
 80039a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	e000e100 	.word	0xe000e100

080039bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	6039      	str	r1, [r7, #0]
 80039c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	db0a      	blt.n	80039e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	490c      	ldr	r1, [pc, #48]	@ (8003a08 <__NVIC_SetPriority+0x4c>)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	0112      	lsls	r2, r2, #4
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	440b      	add	r3, r1
 80039e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039e4:	e00a      	b.n	80039fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4908      	ldr	r1, [pc, #32]	@ (8003a0c <__NVIC_SetPriority+0x50>)
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	3b04      	subs	r3, #4
 80039f4:	0112      	lsls	r2, r2, #4
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	440b      	add	r3, r1
 80039fa:	761a      	strb	r2, [r3, #24]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000e100 	.word	0xe000e100
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	@ 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f1c3 0307 	rsb	r3, r3, #7
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	bf28      	it	cs
 8003a2e:	2304      	movcs	r3, #4
 8003a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3304      	adds	r3, #4
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d902      	bls.n	8003a40 <NVIC_EncodePriority+0x30>
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3b03      	subs	r3, #3
 8003a3e:	e000      	b.n	8003a42 <NVIC_EncodePriority+0x32>
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a44:	f04f 32ff 	mov.w	r2, #4294967295
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	401a      	ands	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a58:	f04f 31ff 	mov.w	r1, #4294967295
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	43d9      	mvns	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a68:	4313      	orrs	r3, r2
         );
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3724      	adds	r7, #36	@ 0x24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a88:	d301      	bcc.n	8003a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e00f      	b.n	8003aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab8 <SysTick_Config+0x40>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a96:	210f      	movs	r1, #15
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	f7ff ff8e 	bl	80039bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa0:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <SysTick_Config+0x40>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aa6:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <SysTick_Config+0x40>)
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	e000e010 	.word	0xe000e010

08003abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff29 	bl	800391c <__NVIC_SetPriorityGrouping>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4603      	mov	r3, r0
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae4:	f7ff ff3e 	bl	8003964 <__NVIC_GetPriorityGrouping>
 8003ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	6978      	ldr	r0, [r7, #20]
 8003af0:	f7ff ff8e 	bl	8003a10 <NVIC_EncodePriority>
 8003af4:	4602      	mov	r2, r0
 8003af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ff5d 	bl	80039bc <__NVIC_SetPriority>
}
 8003b02:	bf00      	nop
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	4603      	mov	r3, r0
 8003b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff31 	bl	8003980 <__NVIC_EnableIRQ>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff ffa2 	bl	8003a78 <SysTick_Config>
 8003b34:	4603      	mov	r3, r0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e014      	b.n	8003b7a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	791b      	ldrb	r3, [r3, #4]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fb6b 	bl	800323c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0a2      	b.n	8003ce6 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	795b      	ldrb	r3, [r3, #5]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_DAC_Start_DMA+0x28>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e09c      	b.n	8003ce6 <HAL_DAC_Start_DMA+0x162>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d129      	bne.n	8003c12 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	4a4b      	ldr	r2, [pc, #300]	@ (8003cf0 <HAL_DAC_Start_DMA+0x16c>)
 8003bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	4a4a      	ldr	r2, [pc, #296]	@ (8003cf4 <HAL_DAC_Start_DMA+0x170>)
 8003bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	4a49      	ldr	r2, [pc, #292]	@ (8003cf8 <HAL_DAC_Start_DMA+0x174>)
 8003bd4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003be4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_DAC_Start_DMA+0x70>
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d005      	beq.n	8003bfe <HAL_DAC_Start_DMA+0x7a>
 8003bf2:	e009      	b.n	8003c08 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	613b      	str	r3, [r7, #16]
        break;
 8003bfc:	e033      	b.n	8003c66 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	613b      	str	r3, [r7, #16]
        break;
 8003c06:	e02e      	b.n	8003c66 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3310      	adds	r3, #16
 8003c0e:	613b      	str	r3, [r7, #16]
        break;
 8003c10:	e029      	b.n	8003c66 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	4a39      	ldr	r2, [pc, #228]	@ (8003cfc <HAL_DAC_Start_DMA+0x178>)
 8003c18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4a38      	ldr	r2, [pc, #224]	@ (8003d00 <HAL_DAC_Start_DMA+0x17c>)
 8003c20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	4a37      	ldr	r2, [pc, #220]	@ (8003d04 <HAL_DAC_Start_DMA+0x180>)
 8003c28:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003c38:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_DAC_Start_DMA+0xc4>
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d005      	beq.n	8003c52 <HAL_DAC_Start_DMA+0xce>
 8003c46:	e009      	b.n	8003c5c <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	613b      	str	r3, [r7, #16]
        break;
 8003c50:	e009      	b.n	8003c66 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3318      	adds	r3, #24
 8003c58:	613b      	str	r3, [r7, #16]
        break;
 8003c5a:	e004      	b.n	8003c66 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	331c      	adds	r3, #28
 8003c62:	613b      	str	r3, [r7, #16]
        break;
 8003c64:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d111      	bne.n	8003c90 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6898      	ldr	r0, [r3, #8]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	f000 fa31 	bl	80040ec <HAL_DMA_Start_IT>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	75fb      	strb	r3, [r7, #23]
 8003c8e:	e010      	b.n	8003cb2 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003c9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	68d8      	ldr	r0, [r3, #12]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	f000 fa1f 	bl	80040ec <HAL_DMA_Start_IT>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2201      	movs	r2, #1
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e005      	b.n	8003ce4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f043 0204 	orr.w	r2, r3, #4
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	08003e7d 	.word	0x08003e7d
 8003cf4:	08003e9f 	.word	0x08003e9f
 8003cf8:	08003ebb 	.word	0x08003ebb
 8003cfc:	08003f25 	.word	0x08003f25
 8003d00:	08003f47 	.word	0x08003f47
 8003d04:	08003f63 	.word	0x08003f63

08003d08 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e03e      	b.n	8003d9a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6819      	ldr	r1, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43da      	mvns	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	400a      	ands	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6819      	ldr	r1, [r3, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2201      	movs	r2, #1
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43da      	mvns	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	400a      	ands	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10d      	bne.n	8003d78 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fa1b 	bl	800419c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e00c      	b.n	8003d92 <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fa0d 	bl	800419c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003d90:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b089      	sub	sp, #36	@ 0x24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_DAC_ConfigChannel+0x1c>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e042      	b.n	8003e70 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	795b      	ldrb	r3, [r3, #5]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_DAC_ConfigChannel+0x2c>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e03c      	b.n	8003e70 <HAL_DAC_ConfigChannel+0xa6>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6819      	ldr	r1, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	22c0      	movs	r2, #192	@ 0xc0
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43da      	mvns	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	400a      	ands	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003e6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3724      	adds	r7, #36	@ 0x24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff ff89 	bl	8003da2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	711a      	strb	r2, [r3, #4]
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eaa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7fd fe7f 	bl	8001bb0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f043 0204 	orr.w	r2, r3, #4
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff ff6e 	bl	8003db6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	711a      	strb	r2, [r3, #4]
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff ffd8 	bl	8003ee8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	711a      	strb	r2, [r3, #4]
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff ffd1 	bl	8003efc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f043 0204 	orr.w	r2, r3, #4
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff ffc7 	bl	8003f10 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	711a      	strb	r2, [r3, #4]
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f9c:	f7ff fc8e 	bl	80038bc <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e099      	b.n	80040e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fcc:	e00f      	b.n	8003fee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fce:	f7ff fc75 	bl	80038bc <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	d908      	bls.n	8003fee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e078      	b.n	80040e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e8      	bne.n	8003fce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4b38      	ldr	r3, [pc, #224]	@ (80040e8 <HAL_DMA_Init+0x158>)
 8004008:	4013      	ands	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800401a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	2b04      	cmp	r3, #4
 8004046:	d107      	bne.n	8004058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004050:	4313      	orrs	r3, r2
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	2b04      	cmp	r3, #4
 8004080:	d117      	bne.n	80040b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fb01 	bl	800469c <DMA_CheckFifoParam>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2240      	movs	r2, #64	@ 0x40
 80040a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80040ae:	2301      	movs	r3, #1
 80040b0:	e016      	b.n	80040e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fab8 	bl	8004630 <DMA_CalcBaseAndBitshift>
 80040c0:	4603      	mov	r3, r0
 80040c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c8:	223f      	movs	r2, #63	@ 0x3f
 80040ca:	409a      	lsls	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	f010803f 	.word	0xf010803f

080040ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004102:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_DMA_Start_IT+0x26>
 800410e:	2302      	movs	r3, #2
 8004110:	e040      	b.n	8004194 <HAL_DMA_Start_IT+0xa8>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	d12f      	bne.n	8004186 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2202      	movs	r2, #2
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fa4a 	bl	80045d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004144:	223f      	movs	r2, #63	@ 0x3f
 8004146:	409a      	lsls	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0216 	orr.w	r2, r2, #22
 800415a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0208 	orr.w	r2, r2, #8
 8004172:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e005      	b.n	8004192 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800418e:	2302      	movs	r3, #2
 8004190:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004192:	7dfb      	ldrb	r3, [r7, #23]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041aa:	f7ff fb87 	bl	80038bc <HAL_GetTick>
 80041ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d008      	beq.n	80041ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2280      	movs	r2, #128	@ 0x80
 80041c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e052      	b.n	8004274 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0216 	bic.w	r2, r2, #22
 80041dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <HAL_DMA_Abort+0x62>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0208 	bic.w	r2, r2, #8
 800420c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800421e:	e013      	b.n	8004248 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004220:	f7ff fb4c 	bl	80038bc <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b05      	cmp	r3, #5
 800422c:	d90c      	bls.n	8004248 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2203      	movs	r2, #3
 8004238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e015      	b.n	8004274 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e4      	bne.n	8004220 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425a:	223f      	movs	r2, #63	@ 0x3f
 800425c:	409a      	lsls	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d004      	beq.n	800429a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2280      	movs	r2, #128	@ 0x80
 8004294:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e00c      	b.n	80042b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2205      	movs	r2, #5
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042cc:	4b8e      	ldr	r3, [pc, #568]	@ (8004508 <HAL_DMA_IRQHandler+0x248>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a8e      	ldr	r2, [pc, #568]	@ (800450c <HAL_DMA_IRQHandler+0x24c>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	0a9b      	lsrs	r3, r3, #10
 80042d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ea:	2208      	movs	r2, #8
 80042ec:	409a      	lsls	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01a      	beq.n	800432c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d013      	beq.n	800432c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0204 	bic.w	r2, r2, #4
 8004312:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004318:	2208      	movs	r2, #8
 800431a:	409a      	lsls	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	f043 0201 	orr.w	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004330:	2201      	movs	r2, #1
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d012      	beq.n	8004362 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434e:	2201      	movs	r2, #1
 8004350:	409a      	lsls	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435a:	f043 0202 	orr.w	r2, r3, #2
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004366:	2204      	movs	r2, #4
 8004368:	409a      	lsls	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d012      	beq.n	8004398 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00b      	beq.n	8004398 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004384:	2204      	movs	r2, #4
 8004386:	409a      	lsls	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004390:	f043 0204 	orr.w	r2, r3, #4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439c:	2210      	movs	r2, #16
 800439e:	409a      	lsls	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d043      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d03c      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ba:	2210      	movs	r2, #16
 80043bc:	409a      	lsls	r2, r3
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d108      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d024      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
 80043ee:	e01f      	b.n	8004430 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01b      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e016      	b.n	8004430 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0208 	bic.w	r2, r2, #8
 800441e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004434:	2220      	movs	r2, #32
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 808f 	beq.w	8004560 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8087 	beq.w	8004560 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004456:	2220      	movs	r2, #32
 8004458:	409a      	lsls	r2, r3
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b05      	cmp	r3, #5
 8004468:	d136      	bne.n	80044d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0216 	bic.w	r2, r2, #22
 8004478:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004488:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <HAL_DMA_IRQHandler+0x1da>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0208 	bic.w	r2, r2, #8
 80044a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ae:	223f      	movs	r2, #63	@ 0x3f
 80044b0:	409a      	lsls	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d07e      	beq.n	80045cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	4798      	blx	r3
        }
        return;
 80044d6:	e079      	b.n	80045cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01d      	beq.n	8004522 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10d      	bne.n	8004510 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d031      	beq.n	8004560 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4798      	blx	r3
 8004504:	e02c      	b.n	8004560 <HAL_DMA_IRQHandler+0x2a0>
 8004506:	bf00      	nop
 8004508:	2000000c 	.word	0x2000000c
 800450c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d023      	beq.n	8004560 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
 8004520:	e01e      	b.n	8004560 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10f      	bne.n	8004550 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0210 	bic.w	r2, r2, #16
 800453e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004564:	2b00      	cmp	r3, #0
 8004566:	d032      	beq.n	80045ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d022      	beq.n	80045ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2205      	movs	r2, #5
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	3301      	adds	r3, #1
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	429a      	cmp	r2, r3
 8004596:	d307      	bcc.n	80045a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f2      	bne.n	800458c <HAL_DMA_IRQHandler+0x2cc>
 80045a6:	e000      	b.n	80045aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
 80045ca:	e000      	b.n	80045ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80045cc:	bf00      	nop
    }
  }
}
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80045f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b40      	cmp	r3, #64	@ 0x40
 8004600:	d108      	bne.n	8004614 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004612:	e007      	b.n	8004624 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	60da      	str	r2, [r3, #12]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	3b10      	subs	r3, #16
 8004640:	4a14      	ldr	r2, [pc, #80]	@ (8004694 <DMA_CalcBaseAndBitshift+0x64>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	091b      	lsrs	r3, r3, #4
 8004648:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800464a:	4a13      	ldr	r2, [pc, #76]	@ (8004698 <DMA_CalcBaseAndBitshift+0x68>)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b03      	cmp	r3, #3
 800465c:	d909      	bls.n	8004672 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	1d1a      	adds	r2, r3, #4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004670:	e007      	b.n	8004682 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800467a:	f023 0303 	bic.w	r3, r3, #3
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	aaaaaaab 	.word	0xaaaaaaab
 8004698:	0800d940 	.word	0x0800d940

0800469c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11f      	bne.n	80046f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d856      	bhi.n	800476a <DMA_CheckFifoParam+0xce>
 80046bc:	a201      	add	r2, pc, #4	@ (adr r2, 80046c4 <DMA_CheckFifoParam+0x28>)
 80046be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c2:	bf00      	nop
 80046c4:	080046d5 	.word	0x080046d5
 80046c8:	080046e7 	.word	0x080046e7
 80046cc:	080046d5 	.word	0x080046d5
 80046d0:	0800476b 	.word	0x0800476b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d046      	beq.n	800476e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e4:	e043      	b.n	800476e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046ee:	d140      	bne.n	8004772 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f4:	e03d      	b.n	8004772 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046fe:	d121      	bne.n	8004744 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d837      	bhi.n	8004776 <DMA_CheckFifoParam+0xda>
 8004706:	a201      	add	r2, pc, #4	@ (adr r2, 800470c <DMA_CheckFifoParam+0x70>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	0800471d 	.word	0x0800471d
 8004710:	08004723 	.word	0x08004723
 8004714:	0800471d 	.word	0x0800471d
 8004718:	08004735 	.word	0x08004735
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
      break;
 8004720:	e030      	b.n	8004784 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d025      	beq.n	800477a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004732:	e022      	b.n	800477a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800473c:	d11f      	bne.n	800477e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004742:	e01c      	b.n	800477e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d903      	bls.n	8004752 <DMA_CheckFifoParam+0xb6>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d003      	beq.n	8004758 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004750:	e018      	b.n	8004784 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
      break;
 8004756:	e015      	b.n	8004784 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00e      	beq.n	8004782 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
      break;
 8004768:	e00b      	b.n	8004782 <DMA_CheckFifoParam+0xe6>
      break;
 800476a:	bf00      	nop
 800476c:	e00a      	b.n	8004784 <DMA_CheckFifoParam+0xe8>
      break;
 800476e:	bf00      	nop
 8004770:	e008      	b.n	8004784 <DMA_CheckFifoParam+0xe8>
      break;
 8004772:	bf00      	nop
 8004774:	e006      	b.n	8004784 <DMA_CheckFifoParam+0xe8>
      break;
 8004776:	bf00      	nop
 8004778:	e004      	b.n	8004784 <DMA_CheckFifoParam+0xe8>
      break;
 800477a:	bf00      	nop
 800477c:	e002      	b.n	8004784 <DMA_CheckFifoParam+0xe8>
      break;   
 800477e:	bf00      	nop
 8004780:	e000      	b.n	8004784 <DMA_CheckFifoParam+0xe8>
      break;
 8004782:	bf00      	nop
    }
  } 
  
  return status; 
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop

08004794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004794:	b480      	push	{r7}
 8004796:	b089      	sub	sp, #36	@ 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	e16b      	b.n	8004a88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047b0:	2201      	movs	r2, #1
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4013      	ands	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	f040 815a 	bne.w	8004a82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d005      	beq.n	80047e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d130      	bne.n	8004848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	2203      	movs	r2, #3
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43db      	mvns	r3, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4013      	ands	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4313      	orrs	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800481c:	2201      	movs	r2, #1
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 0201 	and.w	r2, r3, #1
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4313      	orrs	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	2b03      	cmp	r3, #3
 8004852:	d017      	beq.n	8004884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	2203      	movs	r2, #3
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4013      	ands	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d123      	bne.n	80048d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	08da      	lsrs	r2, r3, #3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3208      	adds	r2, #8
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	220f      	movs	r2, #15
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4013      	ands	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	08da      	lsrs	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3208      	adds	r2, #8
 80048d2:	69b9      	ldr	r1, [r7, #24]
 80048d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	2203      	movs	r2, #3
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0203 	and.w	r2, r3, #3
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80b4 	beq.w	8004a82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	4b60      	ldr	r3, [pc, #384]	@ (8004aa0 <HAL_GPIO_Init+0x30c>)
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	4a5f      	ldr	r2, [pc, #380]	@ (8004aa0 <HAL_GPIO_Init+0x30c>)
 8004924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004928:	6453      	str	r3, [r2, #68]	@ 0x44
 800492a:	4b5d      	ldr	r3, [pc, #372]	@ (8004aa0 <HAL_GPIO_Init+0x30c>)
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004936:	4a5b      	ldr	r2, [pc, #364]	@ (8004aa4 <HAL_GPIO_Init+0x310>)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	3302      	adds	r3, #2
 800493e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	220f      	movs	r2, #15
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a52      	ldr	r2, [pc, #328]	@ (8004aa8 <HAL_GPIO_Init+0x314>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02b      	beq.n	80049ba <HAL_GPIO_Init+0x226>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a51      	ldr	r2, [pc, #324]	@ (8004aac <HAL_GPIO_Init+0x318>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d025      	beq.n	80049b6 <HAL_GPIO_Init+0x222>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a50      	ldr	r2, [pc, #320]	@ (8004ab0 <HAL_GPIO_Init+0x31c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01f      	beq.n	80049b2 <HAL_GPIO_Init+0x21e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a4f      	ldr	r2, [pc, #316]	@ (8004ab4 <HAL_GPIO_Init+0x320>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d019      	beq.n	80049ae <HAL_GPIO_Init+0x21a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a4e      	ldr	r2, [pc, #312]	@ (8004ab8 <HAL_GPIO_Init+0x324>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <HAL_GPIO_Init+0x216>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a4d      	ldr	r2, [pc, #308]	@ (8004abc <HAL_GPIO_Init+0x328>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00d      	beq.n	80049a6 <HAL_GPIO_Init+0x212>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a4c      	ldr	r2, [pc, #304]	@ (8004ac0 <HAL_GPIO_Init+0x32c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <HAL_GPIO_Init+0x20e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a4b      	ldr	r2, [pc, #300]	@ (8004ac4 <HAL_GPIO_Init+0x330>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <HAL_GPIO_Init+0x20a>
 800499a:	2307      	movs	r3, #7
 800499c:	e00e      	b.n	80049bc <HAL_GPIO_Init+0x228>
 800499e:	2308      	movs	r3, #8
 80049a0:	e00c      	b.n	80049bc <HAL_GPIO_Init+0x228>
 80049a2:	2306      	movs	r3, #6
 80049a4:	e00a      	b.n	80049bc <HAL_GPIO_Init+0x228>
 80049a6:	2305      	movs	r3, #5
 80049a8:	e008      	b.n	80049bc <HAL_GPIO_Init+0x228>
 80049aa:	2304      	movs	r3, #4
 80049ac:	e006      	b.n	80049bc <HAL_GPIO_Init+0x228>
 80049ae:	2303      	movs	r3, #3
 80049b0:	e004      	b.n	80049bc <HAL_GPIO_Init+0x228>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e002      	b.n	80049bc <HAL_GPIO_Init+0x228>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <HAL_GPIO_Init+0x228>
 80049ba:	2300      	movs	r3, #0
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	f002 0203 	and.w	r2, r2, #3
 80049c2:	0092      	lsls	r2, r2, #2
 80049c4:	4093      	lsls	r3, r2
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049cc:	4935      	ldr	r1, [pc, #212]	@ (8004aa4 <HAL_GPIO_Init+0x310>)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	089b      	lsrs	r3, r3, #2
 80049d2:	3302      	adds	r3, #2
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049da:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac8 <HAL_GPIO_Init+0x334>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049fe:	4a32      	ldr	r2, [pc, #200]	@ (8004ac8 <HAL_GPIO_Init+0x334>)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a04:	4b30      	ldr	r3, [pc, #192]	@ (8004ac8 <HAL_GPIO_Init+0x334>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a28:	4a27      	ldr	r2, [pc, #156]	@ (8004ac8 <HAL_GPIO_Init+0x334>)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a2e:	4b26      	ldr	r3, [pc, #152]	@ (8004ac8 <HAL_GPIO_Init+0x334>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a52:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac8 <HAL_GPIO_Init+0x334>)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac8 <HAL_GPIO_Init+0x334>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	4013      	ands	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a7c:	4a12      	ldr	r2, [pc, #72]	@ (8004ac8 <HAL_GPIO_Init+0x334>)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3301      	adds	r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b0f      	cmp	r3, #15
 8004a8c:	f67f ae90 	bls.w	80047b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a90:	bf00      	nop
 8004a92:	bf00      	nop
 8004a94:	3724      	adds	r7, #36	@ 0x24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40013800 	.word	0x40013800
 8004aa8:	40020000 	.word	0x40020000
 8004aac:	40020400 	.word	0x40020400
 8004ab0:	40020800 	.word	0x40020800
 8004ab4:	40020c00 	.word	0x40020c00
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40021400 	.word	0x40021400
 8004ac0:	40021800 	.word	0x40021800
 8004ac4:	40021c00 	.word	0x40021c00
 8004ac8:	40013c00 	.word	0x40013c00

08004acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	807b      	strh	r3, [r7, #2]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004adc:	787b      	ldrb	r3, [r7, #1]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ae8:	e003      	b.n	8004af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004aea:	887b      	ldrh	r3, [r7, #2]
 8004aec:	041a      	lsls	r2, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	619a      	str	r2, [r3, #24]
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e267      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d075      	beq.n	8004c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b1e:	4b88      	ldr	r3, [pc, #544]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d00c      	beq.n	8004b44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2a:	4b85      	ldr	r3, [pc, #532]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d112      	bne.n	8004b5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b36:	4b82      	ldr	r3, [pc, #520]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b42:	d10b      	bne.n	8004b5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b44:	4b7e      	ldr	r3, [pc, #504]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d05b      	beq.n	8004c08 <HAL_RCC_OscConfig+0x108>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d157      	bne.n	8004c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e242      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b64:	d106      	bne.n	8004b74 <HAL_RCC_OscConfig+0x74>
 8004b66:	4b76      	ldr	r3, [pc, #472]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a75      	ldr	r2, [pc, #468]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e01d      	b.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x98>
 8004b7e:	4b70      	ldr	r3, [pc, #448]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6f      	ldr	r2, [pc, #444]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004b98:	4b69      	ldr	r3, [pc, #420]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a68      	ldr	r2, [pc, #416]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b66      	ldr	r3, [pc, #408]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a65      	ldr	r2, [pc, #404]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d013      	beq.n	8004be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7fe fe80 	bl	80038bc <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc0:	f7fe fe7c 	bl	80038bc <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	@ 0x64
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e207      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xc0>
 8004bde:	e014      	b.n	8004c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7fe fe6c 	bl	80038bc <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fe fe68 	bl	80038bc <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	@ 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e1f3      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfa:	4b51      	ldr	r3, [pc, #324]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0xe8>
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d063      	beq.n	8004cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c16:	4b4a      	ldr	r3, [pc, #296]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c22:	4b47      	ldr	r3, [pc, #284]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d11c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b44      	ldr	r3, [pc, #272]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d116      	bne.n	8004c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	4b41      	ldr	r3, [pc, #260]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_RCC_OscConfig+0x152>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e1c7      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b3b      	ldr	r3, [pc, #236]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4937      	ldr	r1, [pc, #220]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	e03a      	b.n	8004cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c70:	4b34      	ldr	r3, [pc, #208]	@ (8004d44 <HAL_RCC_OscConfig+0x244>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fe fe21 	bl	80038bc <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7e:	f7fe fe1d 	bl	80038bc <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1a8      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c90:	4b2b      	ldr	r3, [pc, #172]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b28      	ldr	r3, [pc, #160]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4925      	ldr	r1, [pc, #148]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]
 8004cb0:	e015      	b.n	8004cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb2:	4b24      	ldr	r3, [pc, #144]	@ (8004d44 <HAL_RCC_OscConfig+0x244>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fe fe00 	bl	80038bc <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc0:	f7fe fdfc 	bl	80038bc <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e187      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d036      	beq.n	8004d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf2:	4b15      	ldr	r3, [pc, #84]	@ (8004d48 <HAL_RCC_OscConfig+0x248>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fe fde0 	bl	80038bc <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fe fddc 	bl	80038bc <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e167      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x200>
 8004d1e:	e01b      	b.n	8004d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d20:	4b09      	ldr	r3, [pc, #36]	@ (8004d48 <HAL_RCC_OscConfig+0x248>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d26:	f7fe fdc9 	bl	80038bc <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2c:	e00e      	b.n	8004d4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2e:	f7fe fdc5 	bl	80038bc <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d907      	bls.n	8004d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e150      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
 8004d40:	40023800 	.word	0x40023800
 8004d44:	42470000 	.word	0x42470000
 8004d48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	4b88      	ldr	r3, [pc, #544]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ea      	bne.n	8004d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8097 	beq.w	8004e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6a:	4b81      	ldr	r3, [pc, #516]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d86:	4b7a      	ldr	r3, [pc, #488]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b77      	ldr	r3, [pc, #476]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d118      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da2:	4b74      	ldr	r3, [pc, #464]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a73      	ldr	r2, [pc, #460]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fe fd85 	bl	80038bc <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fe fd81 	bl	80038bc <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e10c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d106      	bne.n	8004dea <HAL_RCC_OscConfig+0x2ea>
 8004ddc:	4b64      	ldr	r3, [pc, #400]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de0:	4a63      	ldr	r2, [pc, #396]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de8:	e01c      	b.n	8004e24 <HAL_RCC_OscConfig+0x324>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x30c>
 8004df2:	4b5f      	ldr	r3, [pc, #380]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	4a5e      	ldr	r2, [pc, #376]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004df8:	f043 0304 	orr.w	r3, r3, #4
 8004dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e02:	4a5b      	ldr	r2, [pc, #364]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0x324>
 8004e0c:	4b58      	ldr	r3, [pc, #352]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	4a57      	ldr	r2, [pc, #348]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e18:	4b55      	ldr	r3, [pc, #340]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	4a54      	ldr	r2, [pc, #336]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e1e:	f023 0304 	bic.w	r3, r3, #4
 8004e22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fe fd46 	bl	80038bc <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fe fd42 	bl	80038bc <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0cb      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4a:	4b49      	ldr	r3, [pc, #292]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ee      	beq.n	8004e34 <HAL_RCC_OscConfig+0x334>
 8004e56:	e014      	b.n	8004e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e58:	f7fe fd30 	bl	80038bc <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fe fd2c 	bl	80038bc <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e0b5      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e76:	4b3e      	ldr	r3, [pc, #248]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ee      	bne.n	8004e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b39      	ldr	r3, [pc, #228]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	4a38      	ldr	r2, [pc, #224]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a1 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e9e:	4b34      	ldr	r3, [pc, #208]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d05c      	beq.n	8004f64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d141      	bne.n	8004f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7fe fd00 	bl	80038bc <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fe fcfc 	bl	80038bc <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e087      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed2:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	019b      	lsls	r3, r3, #6
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	061b      	lsls	r3, r3, #24
 8004f02:	491b      	ldr	r1, [pc, #108]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f08:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fe fcd5 	bl	80038bc <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fe fcd1 	bl	80038bc <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e05c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f28:	4b11      	ldr	r3, [pc, #68]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x416>
 8004f34:	e054      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b10      	ldr	r3, [pc, #64]	@ (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fe fcbe 	bl	80038bc <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fe fcba 	bl	80038bc <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e045      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x444>
 8004f62:	e03d      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e038      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40007000 	.word	0x40007000
 8004f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <HAL_RCC_OscConfig+0x4ec>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d028      	beq.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d121      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11a      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d111      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800

08004ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0cc      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b68      	ldr	r3, [pc, #416]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d90c      	bls.n	800502c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b65      	ldr	r3, [pc, #404]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b63      	ldr	r3, [pc, #396]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0b8      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d020      	beq.n	800507a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005044:	4b59      	ldr	r3, [pc, #356]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	4a58      	ldr	r2, [pc, #352]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800504e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800505c:	4b53      	ldr	r3, [pc, #332]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a52      	ldr	r2, [pc, #328]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005068:	4b50      	ldr	r3, [pc, #320]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	494d      	ldr	r1, [pc, #308]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d044      	beq.n	8005110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b47      	ldr	r3, [pc, #284]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d119      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e07f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d003      	beq.n	80050ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ae:	4b3f      	ldr	r3, [pc, #252]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e06f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050be:	4b3b      	ldr	r3, [pc, #236]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e067      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ce:	4b37      	ldr	r3, [pc, #220]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f023 0203 	bic.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4934      	ldr	r1, [pc, #208]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e0:	f7fe fbec 	bl	80038bc <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e8:	f7fe fbe8 	bl	80038bc <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e04f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	4b2b      	ldr	r3, [pc, #172]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 020c 	and.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	429a      	cmp	r2, r3
 800510e:	d1eb      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005110:	4b25      	ldr	r3, [pc, #148]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d20c      	bcs.n	8005138 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b22      	ldr	r3, [pc, #136]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b20      	ldr	r3, [pc, #128]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e032      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005144:	4b19      	ldr	r3, [pc, #100]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4916      	ldr	r1, [pc, #88]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005162:	4b12      	ldr	r3, [pc, #72]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	490e      	ldr	r1, [pc, #56]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005176:	f000 f821 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 800517a:	4602      	mov	r2, r0
 800517c:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	490a      	ldr	r1, [pc, #40]	@ (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	5ccb      	ldrb	r3, [r1, r3]
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	4a09      	ldr	r2, [pc, #36]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005192:	4b09      	ldr	r3, [pc, #36]	@ (80051b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe fb4c 	bl	8003834 <HAL_InitTick>

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40023c00 	.word	0x40023c00
 80051ac:	40023800 	.word	0x40023800
 80051b0:	0800d928 	.word	0x0800d928
 80051b4:	2000000c 	.word	0x2000000c
 80051b8:	20000010 	.word	0x20000010

080051bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c0:	b094      	sub	sp, #80	@ 0x50
 80051c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d4:	4b79      	ldr	r3, [pc, #484]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d00d      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x40>
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	f200 80e1 	bhi.w	80053a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_RCC_GetSysClockFreq+0x34>
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d003      	beq.n	80051f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ee:	e0db      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f0:	4b73      	ldr	r3, [pc, #460]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80051f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051f4:	e0db      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051f6:	4b73      	ldr	r3, [pc, #460]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80051f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051fa:	e0d8      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051fc:	4b6f      	ldr	r3, [pc, #444]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005204:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005206:	4b6d      	ldr	r3, [pc, #436]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d063      	beq.n	80052da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005212:	4b6a      	ldr	r3, [pc, #424]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	2200      	movs	r2, #0
 800521a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800521c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800521e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005224:	633b      	str	r3, [r7, #48]	@ 0x30
 8005226:	2300      	movs	r3, #0
 8005228:	637b      	str	r3, [r7, #52]	@ 0x34
 800522a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800522e:	4622      	mov	r2, r4
 8005230:	462b      	mov	r3, r5
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f04f 0100 	mov.w	r1, #0
 800523a:	0159      	lsls	r1, r3, #5
 800523c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005240:	0150      	lsls	r0, r2, #5
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4621      	mov	r1, r4
 8005248:	1a51      	subs	r1, r2, r1
 800524a:	6139      	str	r1, [r7, #16]
 800524c:	4629      	mov	r1, r5
 800524e:	eb63 0301 	sbc.w	r3, r3, r1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005260:	4659      	mov	r1, fp
 8005262:	018b      	lsls	r3, r1, #6
 8005264:	4651      	mov	r1, sl
 8005266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800526a:	4651      	mov	r1, sl
 800526c:	018a      	lsls	r2, r1, #6
 800526e:	4651      	mov	r1, sl
 8005270:	ebb2 0801 	subs.w	r8, r2, r1
 8005274:	4659      	mov	r1, fp
 8005276:	eb63 0901 	sbc.w	r9, r3, r1
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800528a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800528e:	4690      	mov	r8, r2
 8005290:	4699      	mov	r9, r3
 8005292:	4623      	mov	r3, r4
 8005294:	eb18 0303 	adds.w	r3, r8, r3
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	462b      	mov	r3, r5
 800529c:	eb49 0303 	adc.w	r3, r9, r3
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052ae:	4629      	mov	r1, r5
 80052b0:	024b      	lsls	r3, r1, #9
 80052b2:	4621      	mov	r1, r4
 80052b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052b8:	4621      	mov	r1, r4
 80052ba:	024a      	lsls	r2, r1, #9
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c2:	2200      	movs	r2, #0
 80052c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052cc:	f7fa ff84 	bl	80001d8 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4613      	mov	r3, r2
 80052d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d8:	e058      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052da:	4b38      	ldr	r3, [pc, #224]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	099b      	lsrs	r3, r3, #6
 80052e0:	2200      	movs	r2, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	4611      	mov	r1, r2
 80052e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ea:	623b      	str	r3, [r7, #32]
 80052ec:	2300      	movs	r3, #0
 80052ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052f4:	4642      	mov	r2, r8
 80052f6:	464b      	mov	r3, r9
 80052f8:	f04f 0000 	mov.w	r0, #0
 80052fc:	f04f 0100 	mov.w	r1, #0
 8005300:	0159      	lsls	r1, r3, #5
 8005302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005306:	0150      	lsls	r0, r2, #5
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4641      	mov	r1, r8
 800530e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005312:	4649      	mov	r1, r9
 8005314:	eb63 0b01 	sbc.w	fp, r3, r1
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800532c:	ebb2 040a 	subs.w	r4, r2, sl
 8005330:	eb63 050b 	sbc.w	r5, r3, fp
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	00eb      	lsls	r3, r5, #3
 800533e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005342:	00e2      	lsls	r2, r4, #3
 8005344:	4614      	mov	r4, r2
 8005346:	461d      	mov	r5, r3
 8005348:	4643      	mov	r3, r8
 800534a:	18e3      	adds	r3, r4, r3
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	464b      	mov	r3, r9
 8005350:	eb45 0303 	adc.w	r3, r5, r3
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005362:	4629      	mov	r1, r5
 8005364:	028b      	lsls	r3, r1, #10
 8005366:	4621      	mov	r1, r4
 8005368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800536c:	4621      	mov	r1, r4
 800536e:	028a      	lsls	r2, r1, #10
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005376:	2200      	movs	r2, #0
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	61fa      	str	r2, [r7, #28]
 800537c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005380:	f7fa ff2a 	bl	80001d8 <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4613      	mov	r3, r2
 800538a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800538c:	4b0b      	ldr	r3, [pc, #44]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	3301      	adds	r3, #1
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800539c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800539e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053a6:	e002      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80053aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3750      	adds	r7, #80	@ 0x50
 80053b4:	46bd      	mov	sp, r7
 80053b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ba:	bf00      	nop
 80053bc:	40023800 	.word	0x40023800
 80053c0:	00f42400 	.word	0x00f42400
 80053c4:	007a1200 	.word	0x007a1200

080053c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053cc:	4b03      	ldr	r3, [pc, #12]	@ (80053dc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ce:	681b      	ldr	r3, [r3, #0]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	2000000c 	.word	0x2000000c

080053e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053e4:	f7ff fff0 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 80053e8:	4602      	mov	r2, r0
 80053ea:	4b05      	ldr	r3, [pc, #20]	@ (8005400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	0a9b      	lsrs	r3, r3, #10
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	4903      	ldr	r1, [pc, #12]	@ (8005404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f6:	5ccb      	ldrb	r3, [r1, r3]
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40023800 	.word	0x40023800
 8005404:	0800d938 	.word	0x0800d938

08005408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800540c:	f7ff ffdc 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 8005410:	4602      	mov	r2, r0
 8005412:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	0b5b      	lsrs	r3, r3, #13
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	4903      	ldr	r1, [pc, #12]	@ (800542c <HAL_RCC_GetPCLK2Freq+0x24>)
 800541e:	5ccb      	ldrb	r3, [r1, r3]
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005424:	4618      	mov	r0, r3
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40023800 	.word	0x40023800
 800542c:	0800d938 	.word	0x0800d938

08005430 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e022      	b.n	8005488 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d105      	bne.n	800545a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7fd ff6b 	bl	8003330 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2203      	movs	r2, #3
 800545e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f814 	bl	8005490 <HAL_SD_InitCard>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e00a      	b.n	8005488 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005490:	b5b0      	push	{r4, r5, r7, lr}
 8005492:	b08e      	sub	sp, #56	@ 0x38
 8005494:	af04      	add	r7, sp, #16
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005498:	2300      	movs	r3, #0
 800549a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80054a0:	2300      	movs	r3, #0
 80054a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80054ac:	2376      	movs	r3, #118	@ 0x76
 80054ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681d      	ldr	r5, [r3, #0]
 80054b4:	466c      	mov	r4, sp
 80054b6:	f107 0314 	add.w	r3, r7, #20
 80054ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054c2:	f107 0308 	add.w	r3, r7, #8
 80054c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054c8:	4628      	mov	r0, r5
 80054ca:	f003 fb59 	bl	8008b80 <SDIO_Init>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80054d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e04f      	b.n	8005580 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80054e0:	4b29      	ldr	r3, [pc, #164]	@ (8005588 <HAL_SD_InitCard+0xf8>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f003 fb91 	bl	8008c12 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80054f0:	4b25      	ldr	r3, [pc, #148]	@ (8005588 <HAL_SD_InitCard+0xf8>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80054f6:	2002      	movs	r0, #2
 80054f8:	f7fe f9ec 	bl	80038d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fe79 	bl	80061f4 <SD_PowerON>
 8005502:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e02e      	b.n	8005580 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fd98 	bl	8006058 <SD_InitCard>
 8005528:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e01b      	b.n	8005580 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005550:	4618      	mov	r0, r3
 8005552:	f003 fbf0 	bl	8008d36 <SDMMC_CmdBlockLength>
 8005556:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00f      	beq.n	800557e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a0a      	ldr	r2, [pc, #40]	@ (800558c <HAL_SD_InitCard+0xfc>)
 8005564:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3728      	adds	r7, #40	@ 0x28
 8005584:	46bd      	mov	sp, r7
 8005586:	bdb0      	pop	{r4, r5, r7, pc}
 8005588:	422580a0 	.word	0x422580a0
 800558c:	004005ff 	.word	0x004005ff

08005590 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b092      	sub	sp, #72	@ 0x48
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800559e:	f7fe f98d 	bl	80038bc <HAL_GetTick>
 80055a2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d107      	bne.n	80055c2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e1c5      	b.n	800594e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	f040 81b8 	bne.w	8005940 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80055d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	441a      	add	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d907      	bls.n	80055f4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e1ac      	b.n	800594e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2203      	movs	r2, #3
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2200      	movs	r2, #0
 8005602:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005608:	2b01      	cmp	r3, #1
 800560a:	d002      	beq.n	8005612 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560e:	025b      	lsls	r3, r3, #9
 8005610:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005612:	f04f 33ff 	mov.w	r3, #4294967295
 8005616:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	025b      	lsls	r3, r3, #9
 800561c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800561e:	2390      	movs	r3, #144	@ 0x90
 8005620:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005622:	2302      	movs	r3, #2
 8005624:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005626:	2300      	movs	r3, #0
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800562a:	2301      	movs	r3, #1
 800562c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f107 0214 	add.w	r2, r7, #20
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f003 fb50 	bl	8008cde <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d90a      	bls.n	800565a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2202      	movs	r2, #2
 8005648:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005650:	4618      	mov	r0, r3
 8005652:	f003 fbb4 	bl	8008dbe <SDMMC_CmdReadMultiBlock>
 8005656:	6478      	str	r0, [r7, #68]	@ 0x44
 8005658:	e009      	b.n	800566e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005666:	4618      	mov	r0, r3
 8005668:	f003 fb87 	bl	8008d7a <SDMMC_CmdReadSingleBlock>
 800566c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800566e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005670:	2b00      	cmp	r3, #0
 8005672:	d012      	beq.n	800569a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a7e      	ldr	r2, [pc, #504]	@ (8005874 <HAL_SD_ReadBlocks+0x2e4>)
 800567a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005682:	431a      	orrs	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e159      	b.n	800594e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800569e:	e061      	b.n	8005764 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d03c      	beq.n	8005728 <HAL_SD_ReadBlocks+0x198>
 80056ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d039      	beq.n	8005728 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80056b4:	2300      	movs	r3, #0
 80056b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80056b8:	e033      	b.n	8005722 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f003 fa89 	bl	8008bd6 <SDIO_ReadFIFO>
 80056c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80056c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80056ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d0:	3301      	adds	r3, #1
 80056d2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80056d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d6:	3b01      	subs	r3, #1
 80056d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80056da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056dc:	0a1b      	lsrs	r3, r3, #8
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80056e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e6:	3301      	adds	r3, #1
 80056e8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80056ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ec:	3b01      	subs	r3, #1
 80056ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80056f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80056fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fc:	3301      	adds	r3, #1
 80056fe:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005702:	3b01      	subs	r3, #1
 8005704:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005708:	0e1b      	lsrs	r3, r3, #24
 800570a:	b2da      	uxtb	r2, r3
 800570c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005712:	3301      	adds	r3, #1
 8005714:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005718:	3b01      	subs	r3, #1
 800571a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800571c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800571e:	3301      	adds	r3, #1
 8005720:	643b      	str	r3, [r7, #64]	@ 0x40
 8005722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005724:	2b07      	cmp	r3, #7
 8005726:	d9c8      	bls.n	80056ba <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005728:	f7fe f8c8 	bl	80038bc <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005734:	429a      	cmp	r2, r3
 8005736:	d902      	bls.n	800573e <HAL_SD_ReadBlocks+0x1ae>
 8005738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800573a:	2b00      	cmp	r3, #0
 800573c:	d112      	bne.n	8005764 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a4c      	ldr	r2, [pc, #304]	@ (8005874 <HAL_SD_ReadBlocks+0x2e4>)
 8005744:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e0f4      	b.n	800594e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800576a:	f240 332a 	movw	r3, #810	@ 0x32a
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d095      	beq.n	80056a0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d022      	beq.n	80057c8 <HAL_SD_ReadBlocks+0x238>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d91f      	bls.n	80057c8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578c:	2b03      	cmp	r3, #3
 800578e:	d01b      	beq.n	80057c8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4618      	mov	r0, r3
 8005796:	f003 fb79 	bl	8008e8c <SDMMC_CmdStopTransfer>
 800579a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800579c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d012      	beq.n	80057c8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a33      	ldr	r2, [pc, #204]	@ (8005874 <HAL_SD_ReadBlocks+0x2e4>)
 80057a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0c2      	b.n	800594e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_SD_ReadBlocks+0x254>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a22      	ldr	r2, [pc, #136]	@ (8005874 <HAL_SD_ReadBlocks+0x2e4>)
 80057ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	f043 0208 	orr.w	r2, r3, #8
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e0a1      	b.n	800594e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d012      	beq.n	800583e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a15      	ldr	r2, [pc, #84]	@ (8005874 <HAL_SD_ReadBlocks+0x2e4>)
 800581e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	f043 0202 	orr.w	r2, r3, #2
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e087      	b.n	800594e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d064      	beq.n	8005916 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a08      	ldr	r2, [pc, #32]	@ (8005874 <HAL_SD_ReadBlocks+0x2e4>)
 8005852:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e06d      	b.n	800594e <HAL_SD_ReadBlocks+0x3be>
 8005872:	bf00      	nop
 8005874:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f003 f9aa 	bl	8008bd6 <SDIO_ReadFIFO>
 8005882:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005886:	b2da      	uxtb	r2, r3
 8005888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800588c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588e:	3301      	adds	r3, #1
 8005890:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005894:	3b01      	subs	r3, #1
 8005896:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589a:	0a1b      	lsrs	r3, r3, #8
 800589c:	b2da      	uxtb	r2, r3
 800589e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80058a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a4:	3301      	adds	r3, #1
 80058a6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80058a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058aa:	3b01      	subs	r3, #1
 80058ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80058ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80058b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ba:	3301      	adds	r3, #1
 80058bc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80058be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c0:	3b01      	subs	r3, #1
 80058c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80058c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c6:	0e1b      	lsrs	r3, r3, #24
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058cc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80058ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d0:	3301      	adds	r3, #1
 80058d2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80058d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d6:	3b01      	subs	r3, #1
 80058d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80058da:	f7fd ffef 	bl	80038bc <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d902      	bls.n	80058f0 <HAL_SD_ReadBlocks+0x360>
 80058ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d112      	bne.n	8005916 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a18      	ldr	r2, [pc, #96]	@ (8005958 <HAL_SD_ReadBlocks+0x3c8>)
 80058f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e01b      	b.n	800594e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <HAL_SD_ReadBlocks+0x39a>
 8005924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1a6      	bne.n	8005878 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005932:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	e006      	b.n	800594e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005944:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
  }
}
 800594e:	4618      	mov	r0, r3
 8005950:	3748      	adds	r7, #72	@ 0x48
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	004005ff 	.word	0x004005ff

0800595c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b092      	sub	sp, #72	@ 0x48
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800596a:	f7fd ffa7 	bl	80038bc <HAL_GetTick>
 800596e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d107      	bne.n	800598e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e16d      	b.n	8005c6a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	f040 8160 	bne.w	8005c5c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80059a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	441a      	add	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d907      	bls.n	80059c0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e154      	b.n	8005c6a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2203      	movs	r2, #3
 80059c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2200      	movs	r2, #0
 80059ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d002      	beq.n	80059de <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80059d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059da:	025b      	lsls	r3, r3, #9
 80059dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80059de:	f04f 33ff 	mov.w	r3, #4294967295
 80059e2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	025b      	lsls	r3, r3, #9
 80059e8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80059ea:	2390      	movs	r3, #144	@ 0x90
 80059ec:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80059ee:	2300      	movs	r3, #0
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80059f6:	2301      	movs	r3, #1
 80059f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f107 0218 	add.w	r2, r7, #24
 8005a02:	4611      	mov	r1, r2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f003 f96a 	bl	8008cde <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d90a      	bls.n	8005a26 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2220      	movs	r2, #32
 8005a14:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f003 fa12 	bl	8008e46 <SDMMC_CmdWriteMultiBlock>
 8005a22:	6478      	str	r0, [r7, #68]	@ 0x44
 8005a24:	e009      	b.n	8005a3a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2210      	movs	r2, #16
 8005a2a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a32:	4618      	mov	r0, r3
 8005a34:	f003 f9e5 	bl	8008e02 <SDMMC_CmdWriteSingleBlock>
 8005a38:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d012      	beq.n	8005a66 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a8b      	ldr	r2, [pc, #556]	@ (8005c74 <HAL_SD_WriteBlocks+0x318>)
 8005a46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e101      	b.n	8005c6a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005a6a:	e065      	b.n	8005b38 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d040      	beq.n	8005afc <HAL_SD_WriteBlocks+0x1a0>
 8005a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d03d      	beq.n	8005afc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005a80:	2300      	movs	r3, #0
 8005a82:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a84:	e037      	b.n	8005af6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8e:	3301      	adds	r3, #1
 8005a90:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a94:	3b01      	subs	r3, #1
 8005a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	021a      	lsls	r2, r3, #8
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aac:	3b01      	subs	r3, #1
 8005aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	041a      	lsls	r2, r3, #16
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abe:	3301      	adds	r3, #1
 8005ac0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	061a      	lsls	r2, r3, #24
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005adc:	3b01      	subs	r3, #1
 8005ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f107 0214 	add.w	r2, r7, #20
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f003 f880 	bl	8008bf0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af2:	3301      	adds	r3, #1
 8005af4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af8:	2b07      	cmp	r3, #7
 8005afa:	d9c4      	bls.n	8005a86 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005afc:	f7fd fede 	bl	80038bc <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d902      	bls.n	8005b12 <HAL_SD_WriteBlocks+0x1b6>
 8005b0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d112      	bne.n	8005b38 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a57      	ldr	r2, [pc, #348]	@ (8005c74 <HAL_SD_WriteBlocks+0x318>)
 8005b18:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e098      	b.n	8005c6a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b3e:	f240 331a 	movw	r3, #794	@ 0x31a
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d091      	beq.n	8005a6c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d022      	beq.n	8005b9c <HAL_SD_WriteBlocks+0x240>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d91f      	bls.n	8005b9c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d01b      	beq.n	8005b9c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f003 f98f 	bl	8008e8c <SDMMC_CmdStopTransfer>
 8005b6e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d012      	beq.n	8005b9c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8005c74 <HAL_SD_WriteBlocks+0x318>)
 8005b7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e066      	b.n	8005c6a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_SD_WriteBlocks+0x25c>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d012      	beq.n	8005bde <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8005c74 <HAL_SD_WriteBlocks+0x318>)
 8005bbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc4:	f043 0208 	orr.w	r2, r3, #8
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e045      	b.n	8005c6a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d012      	beq.n	8005c12 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a20      	ldr	r2, [pc, #128]	@ (8005c74 <HAL_SD_WriteBlocks+0x318>)
 8005bf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	f043 0202 	orr.w	r2, r3, #2
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e02b      	b.n	8005c6a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d012      	beq.n	8005c46 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a13      	ldr	r2, [pc, #76]	@ (8005c74 <HAL_SD_WriteBlocks+0x318>)
 8005c26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2c:	f043 0210 	orr.w	r2, r3, #16
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e011      	b.n	8005c6a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005c4e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e006      	b.n	8005c6a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
  }
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3748      	adds	r7, #72	@ 0x48
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	004005ff 	.word	0x004005ff

08005c78 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c86:	0f9b      	lsrs	r3, r3, #30
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c92:	0e9b      	lsrs	r3, r3, #26
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ca4:	0e1b      	lsrs	r3, r3, #24
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cb6:	0c1b      	lsrs	r3, r3, #16
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc2:	0a1b      	lsrs	r3, r3, #8
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cd8:	0d1b      	lsrs	r3, r3, #20
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ce4:	0c1b      	lsrs	r3, r3, #16
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cf6:	0bdb      	lsrs	r3, r3, #15
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d08:	0b9b      	lsrs	r3, r3, #14
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d1a:	0b5b      	lsrs	r3, r3, #13
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d2c:	0b1b      	lsrs	r3, r3, #12
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d163      	bne.n	8005e10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d4c:	009a      	lsls	r2, r3, #2
 8005d4e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d52:	4013      	ands	r3, r2
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005d58:	0f92      	lsrs	r2, r2, #30
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d64:	0edb      	lsrs	r3, r3, #27
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d76:	0e1b      	lsrs	r3, r3, #24
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d88:	0d5b      	lsrs	r3, r3, #21
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d9a:	0c9b      	lsrs	r3, r3, #18
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dac:	0bdb      	lsrs	r3, r3, #15
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	7e1b      	ldrb	r3, [r3, #24]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	3302      	adds	r3, #2
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005dda:	fb03 f202 	mul.w	r2, r3, r2
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	7a1b      	ldrb	r3, [r3, #8]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	2201      	movs	r2, #1
 8005dee:	409a      	lsls	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005dfc:	0a52      	lsrs	r2, r2, #9
 8005dfe:	fb03 f202 	mul.w	r2, r3, r2
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e0e:	e031      	b.n	8005e74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d11d      	bne.n	8005e54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e1c:	041b      	lsls	r3, r3, #16
 8005e1e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e26:	0c1b      	lsrs	r3, r3, #16
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	3301      	adds	r3, #1
 8005e34:	029a      	lsls	r2, r3, #10
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e48:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e52:	e00f      	b.n	8005e74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a58      	ldr	r2, [pc, #352]	@ (8005fbc <HAL_SD_GetCardCSD+0x344>)
 8005e5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e09d      	b.n	8005fb0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e78:	0b9b      	lsrs	r3, r3, #14
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e8a:	09db      	lsrs	r3, r3, #7
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eac:	0fdb      	lsrs	r3, r3, #31
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb8:	0f5b      	lsrs	r3, r3, #29
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eca:	0e9b      	lsrs	r3, r3, #26
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005edc:	0d9b      	lsrs	r3, r3, #22
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eee:	0d5b      	lsrs	r3, r3, #21
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0a:	0c1b      	lsrs	r3, r3, #16
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1e:	0bdb      	lsrs	r3, r3, #15
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f32:	0b9b      	lsrs	r3, r3, #14
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	0b5b      	lsrs	r3, r3, #13
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5a:	0b1b      	lsrs	r3, r3, #12
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6e:	0a9b      	lsrs	r3, r3, #10
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	004005ff 	.word	0x004005ff

08005fc0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006024:	f107 030c 	add.w	r3, r7, #12
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f970 	bl	8006310 <SD_SendStatus>
 8006030:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	0a5b      	lsrs	r3, r3, #9
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800604e:	693b      	ldr	r3, [r7, #16]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006058:	b5b0      	push	{r4, r5, r7, lr}
 800605a:	b094      	sub	sp, #80	@ 0x50
 800605c:	af04      	add	r7, sp, #16
 800605e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006060:	2301      	movs	r3, #1
 8006062:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f002 fde0 	bl	8008c2e <SDIO_GetPowerState>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006074:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006078:	e0b8      	b.n	80061ec <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607e:	2b03      	cmp	r3, #3
 8006080:	d02f      	beq.n	80060e2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f002 ffc7 	bl	800901a <SDMMC_CmdSendCID>
 800608c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800608e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <SD_InitCard+0x40>
    {
      return errorstate;
 8006094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006096:	e0a9      	b.n	80061ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2100      	movs	r1, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f002 fe0a 	bl	8008cb8 <SDIO_GetResponse>
 80060a4:	4602      	mov	r2, r0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2104      	movs	r1, #4
 80060b0:	4618      	mov	r0, r3
 80060b2:	f002 fe01 	bl	8008cb8 <SDIO_GetResponse>
 80060b6:	4602      	mov	r2, r0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2108      	movs	r1, #8
 80060c2:	4618      	mov	r0, r3
 80060c4:	f002 fdf8 	bl	8008cb8 <SDIO_GetResponse>
 80060c8:	4602      	mov	r2, r0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	210c      	movs	r1, #12
 80060d4:	4618      	mov	r0, r3
 80060d6:	f002 fdef 	bl	8008cb8 <SDIO_GetResponse>
 80060da:	4602      	mov	r2, r0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d00d      	beq.n	8006106 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f107 020e 	add.w	r2, r7, #14
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f002 ffcd 	bl	8009094 <SDMMC_CmdSetRelAdd>
 80060fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <SD_InitCard+0xae>
    {
      return errorstate;
 8006102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006104:	e072      	b.n	80061ec <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610a:	2b03      	cmp	r3, #3
 800610c:	d036      	beq.n	800617c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800610e:	89fb      	ldrh	r3, [r7, #14]
 8006110:	461a      	mov	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800611e:	041b      	lsls	r3, r3, #16
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f002 ff97 	bl	8009056 <SDMMC_CmdSendCSD>
 8006128:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800612a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006132:	e05b      	b.n	80061ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f002 fdbc 	bl	8008cb8 <SDIO_GetResponse>
 8006140:	4602      	mov	r2, r0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2104      	movs	r1, #4
 800614c:	4618      	mov	r0, r3
 800614e:	f002 fdb3 	bl	8008cb8 <SDIO_GetResponse>
 8006152:	4602      	mov	r2, r0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2108      	movs	r1, #8
 800615e:	4618      	mov	r0, r3
 8006160:	f002 fdaa 	bl	8008cb8 <SDIO_GetResponse>
 8006164:	4602      	mov	r2, r0
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	210c      	movs	r1, #12
 8006170:	4618      	mov	r0, r3
 8006172:	f002 fda1 	bl	8008cb8 <SDIO_GetResponse>
 8006176:	4602      	mov	r2, r0
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2104      	movs	r1, #4
 8006182:	4618      	mov	r0, r3
 8006184:	f002 fd98 	bl	8008cb8 <SDIO_GetResponse>
 8006188:	4603      	mov	r3, r0
 800618a:	0d1a      	lsrs	r2, r3, #20
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006190:	f107 0310 	add.w	r3, r7, #16
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fd6e 	bl	8005c78 <HAL_SD_GetCardCSD>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80061a6:	e021      	b.n	80061ec <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6819      	ldr	r1, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061b0:	041b      	lsls	r3, r3, #16
 80061b2:	2200      	movs	r2, #0
 80061b4:	461c      	mov	r4, r3
 80061b6:	4615      	mov	r5, r2
 80061b8:	4622      	mov	r2, r4
 80061ba:	462b      	mov	r3, r5
 80061bc:	4608      	mov	r0, r1
 80061be:	f002 fe87 	bl	8008ed0 <SDMMC_CmdSelDesel>
 80061c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80061c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <SD_InitCard+0x176>
  {
    return errorstate;
 80061ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061cc:	e00e      	b.n	80061ec <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681d      	ldr	r5, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	466c      	mov	r4, sp
 80061d6:	f103 0210 	add.w	r2, r3, #16
 80061da:	ca07      	ldmia	r2, {r0, r1, r2}
 80061dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061e0:	3304      	adds	r3, #4
 80061e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061e4:	4628      	mov	r0, r5
 80061e6:	f002 fccb 	bl	8008b80 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3740      	adds	r7, #64	@ 0x40
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bdb0      	pop	{r4, r5, r7, pc}

080061f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	2300      	movs	r3, #0
 8006206:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f002 fe82 	bl	8008f16 <SDMMC_CmdGoIdleState>
 8006212:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <SD_PowerON+0x2a>
  {
    return errorstate;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	e072      	b.n	8006304 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f002 fe95 	bl	8008f52 <SDMMC_CmdOperCond>
 8006228:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00d      	beq.n	800624c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f002 fe6b 	bl	8008f16 <SDMMC_CmdGoIdleState>
 8006240:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	e05b      	b.n	8006304 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006256:	2b01      	cmp	r3, #1
 8006258:	d137      	bne.n	80062ca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2100      	movs	r1, #0
 8006260:	4618      	mov	r0, r3
 8006262:	f002 fe95 	bl	8008f90 <SDMMC_CmdAppCommand>
 8006266:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d02d      	beq.n	80062ca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800626e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006272:	e047      	b.n	8006304 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2100      	movs	r1, #0
 800627a:	4618      	mov	r0, r3
 800627c:	f002 fe88 	bl	8008f90 <SDMMC_CmdAppCommand>
 8006280:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <SD_PowerON+0x98>
    {
      return errorstate;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	e03b      	b.n	8006304 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	491e      	ldr	r1, [pc, #120]	@ (800630c <SD_PowerON+0x118>)
 8006292:	4618      	mov	r0, r3
 8006294:	f002 fe9e 	bl	8008fd4 <SDMMC_CmdAppOperCommand>
 8006298:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80062a4:	e02e      	b.n	8006304 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2100      	movs	r1, #0
 80062ac:	4618      	mov	r0, r3
 80062ae:	f002 fd03 	bl	8008cb8 <SDIO_GetResponse>
 80062b2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	0fdb      	lsrs	r3, r3, #31
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <SD_PowerON+0xcc>
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <SD_PowerON+0xce>
 80062c0:	2300      	movs	r3, #0
 80062c2:	613b      	str	r3, [r7, #16]

    count++;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d802      	bhi.n	80062da <SD_PowerON+0xe6>
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0cc      	beq.n	8006274 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d902      	bls.n	80062ea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80062e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062e8:	e00c      	b.n	8006304 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80062fa:	e002      	b.n	8006302 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	c1100000 	.word	0xc1100000

08006310 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006320:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006324:	e018      	b.n	8006358 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	4619      	mov	r1, r3
 8006332:	4610      	mov	r0, r2
 8006334:	f002 fecf 	bl	80090d6 <SDMMC_CmdSendStatus>
 8006338:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	e009      	b.n	8006358 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f002 fcb4 	bl	8008cb8 <SDIO_GetResponse>
 8006350:	4602      	mov	r2, r0
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e07b      	b.n	800646a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	d108      	bne.n	800638c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006382:	d009      	beq.n	8006398 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	61da      	str	r2, [r3, #28]
 800638a:	e005      	b.n	8006398 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fd f836 	bl	8003424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	431a      	orrs	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800641c:	ea42 0103 	orr.w	r1, r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006424:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	0c1b      	lsrs	r3, r3, #16
 8006436:	f003 0104 	and.w	r1, r3, #4
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643e:	f003 0210 	and.w	r2, r3, #16
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006458:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b088      	sub	sp, #32
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	603b      	str	r3, [r7, #0]
 800647e:	4613      	mov	r3, r2
 8006480:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006482:	f7fd fa1b 	bl	80038bc <HAL_GetTick>
 8006486:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006488:	88fb      	ldrh	r3, [r7, #6]
 800648a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	d001      	beq.n	800649c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006498:	2302      	movs	r3, #2
 800649a:	e12a      	b.n	80066f2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_SPI_Transmit+0x36>
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e122      	b.n	80066f2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_SPI_Transmit+0x48>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e11b      	b.n	80066f2 <HAL_SPI_Transmit+0x280>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2203      	movs	r2, #3
 80064c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	88fa      	ldrh	r2, [r7, #6]
 80064da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	88fa      	ldrh	r2, [r7, #6]
 80064e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006508:	d10f      	bne.n	800652a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006518:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006528:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006534:	2b40      	cmp	r3, #64	@ 0x40
 8006536:	d007      	beq.n	8006548 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006546:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006550:	d152      	bne.n	80065f8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <HAL_SPI_Transmit+0xee>
 800655a:	8b7b      	ldrh	r3, [r7, #26]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d145      	bne.n	80065ec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006564:	881a      	ldrh	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006570:	1c9a      	adds	r2, r3, #2
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006584:	e032      	b.n	80065ec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b02      	cmp	r3, #2
 8006592:	d112      	bne.n	80065ba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006598:	881a      	ldrh	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a4:	1c9a      	adds	r2, r3, #2
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80065b8:	e018      	b.n	80065ec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ba:	f7fd f97f 	bl	80038bc <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d803      	bhi.n	80065d2 <HAL_SPI_Transmit+0x160>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d102      	bne.n	80065d8 <HAL_SPI_Transmit+0x166>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d109      	bne.n	80065ec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e082      	b.n	80066f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1c7      	bne.n	8006586 <HAL_SPI_Transmit+0x114>
 80065f6:	e053      	b.n	80066a0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_SPI_Transmit+0x194>
 8006600:	8b7b      	ldrh	r3, [r7, #26]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d147      	bne.n	8006696 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	330c      	adds	r3, #12
 8006610:	7812      	ldrb	r2, [r2, #0]
 8006612:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800662c:	e033      	b.n	8006696 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b02      	cmp	r3, #2
 800663a:	d113      	bne.n	8006664 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	330c      	adds	r3, #12
 8006646:	7812      	ldrb	r2, [r2, #0]
 8006648:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006662:	e018      	b.n	8006696 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006664:	f7fd f92a 	bl	80038bc <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d803      	bhi.n	800667c <HAL_SPI_Transmit+0x20a>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d102      	bne.n	8006682 <HAL_SPI_Transmit+0x210>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e02d      	b.n	80066f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1c6      	bne.n	800662e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 ffb7 	bl	8007618 <SPI_EndRxTxTransaction>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10a      	bne.n	80066d4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80066f0:	2300      	movs	r3, #0
  }
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b088      	sub	sp, #32
 80066fe:	af02      	add	r7, sp, #8
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b01      	cmp	r3, #1
 8006714:	d001      	beq.n	800671a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006716:	2302      	movs	r3, #2
 8006718:	e104      	b.n	8006924 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006722:	d112      	bne.n	800674a <HAL_SPI_Receive+0x50>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10e      	bne.n	800674a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2204      	movs	r2, #4
 8006730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006734:	88fa      	ldrh	r2, [r7, #6]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	4613      	mov	r3, r2
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 f8f3 	bl	800692c <HAL_SPI_TransmitReceive>
 8006746:	4603      	mov	r3, r0
 8006748:	e0ec      	b.n	8006924 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800674a:	f7fd f8b7 	bl	80038bc <HAL_GetTick>
 800674e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <HAL_SPI_Receive+0x62>
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0e1      	b.n	8006924 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_SPI_Receive+0x74>
 800676a:	2302      	movs	r3, #2
 800676c:	e0da      	b.n	8006924 <HAL_SPI_Receive+0x22a>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2204      	movs	r2, #4
 800677a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	88fa      	ldrh	r2, [r7, #6]
 800678e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	88fa      	ldrh	r2, [r7, #6]
 8006794:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067bc:	d10f      	bne.n	80067de <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e8:	2b40      	cmp	r3, #64	@ 0x40
 80067ea:	d007      	beq.n	80067fc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d170      	bne.n	80068e6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006804:	e035      	b.n	8006872 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d115      	bne.n	8006840 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f103 020c 	add.w	r2, r3, #12
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006820:	7812      	ldrb	r2, [r2, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800683e:	e018      	b.n	8006872 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006840:	f7fd f83c 	bl	80038bc <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d803      	bhi.n	8006858 <HAL_SPI_Receive+0x15e>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d102      	bne.n	800685e <HAL_SPI_Receive+0x164>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e058      	b.n	8006924 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1c4      	bne.n	8006806 <HAL_SPI_Receive+0x10c>
 800687c:	e038      	b.n	80068f0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b01      	cmp	r3, #1
 800688a:	d113      	bne.n	80068b4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006896:	b292      	uxth	r2, r2
 8006898:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689e:	1c9a      	adds	r2, r3, #2
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80068b2:	e018      	b.n	80068e6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068b4:	f7fd f802 	bl	80038bc <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d803      	bhi.n	80068cc <HAL_SPI_Receive+0x1d2>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ca:	d102      	bne.n	80068d2 <HAL_SPI_Receive+0x1d8>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e01e      	b.n	8006924 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1c6      	bne.n	800687e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fe29 	bl	800754c <SPI_EndRxTransaction>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006922:	2300      	movs	r3, #0
  }
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	@ 0x28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800693a:	2301      	movs	r3, #1
 800693c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800693e:	f7fc ffbd 	bl	80038bc <HAL_GetTick>
 8006942:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800694a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006952:	887b      	ldrh	r3, [r7, #2]
 8006954:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006956:	7ffb      	ldrb	r3, [r7, #31]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d00c      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x4a>
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006962:	d106      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d102      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x46>
 800696c:	7ffb      	ldrb	r3, [r7, #31]
 800696e:	2b04      	cmp	r3, #4
 8006970:	d001      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006972:	2302      	movs	r3, #2
 8006974:	e17f      	b.n	8006c76 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x5c>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x5c>
 8006982:	887b      	ldrh	r3, [r7, #2]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e174      	b.n	8006c76 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <HAL_SPI_TransmitReceive+0x6e>
 8006996:	2302      	movs	r3, #2
 8006998:	e16d      	b.n	8006c76 <HAL_SPI_TransmitReceive+0x34a>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d003      	beq.n	80069b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2205      	movs	r2, #5
 80069b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	887a      	ldrh	r2, [r7, #2]
 80069c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	887a      	ldrh	r2, [r7, #2]
 80069cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	887a      	ldrh	r2, [r7, #2]
 80069d8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	887a      	ldrh	r2, [r7, #2]
 80069de:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f6:	2b40      	cmp	r3, #64	@ 0x40
 80069f8:	d007      	beq.n	8006a0a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a12:	d17e      	bne.n	8006b12 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_SPI_TransmitReceive+0xf6>
 8006a1c:	8afb      	ldrh	r3, [r7, #22]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d16c      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a26:	881a      	ldrh	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a32:	1c9a      	adds	r2, r3, #2
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a46:	e059      	b.n	8006afc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d11b      	bne.n	8006a8e <HAL_SPI_TransmitReceive+0x162>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d016      	beq.n	8006a8e <HAL_SPI_TransmitReceive+0x162>
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d113      	bne.n	8006a8e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6a:	881a      	ldrh	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a76:	1c9a      	adds	r2, r3, #2
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d119      	bne.n	8006ad0 <HAL_SPI_TransmitReceive+0x1a4>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d014      	beq.n	8006ad0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	b292      	uxth	r2, r2
 8006ab2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab8:	1c9a      	adds	r2, r3, #2
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006acc:	2301      	movs	r3, #1
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ad0:	f7fc fef4 	bl	80038bc <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d80d      	bhi.n	8006afc <HAL_SPI_TransmitReceive+0x1d0>
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae6:	d009      	beq.n	8006afc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e0bc      	b.n	8006c76 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1a0      	bne.n	8006a48 <HAL_SPI_TransmitReceive+0x11c>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d19b      	bne.n	8006a48 <HAL_SPI_TransmitReceive+0x11c>
 8006b10:	e082      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <HAL_SPI_TransmitReceive+0x1f4>
 8006b1a:	8afb      	ldrh	r3, [r7, #22]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d171      	bne.n	8006c04 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	7812      	ldrb	r2, [r2, #0]
 8006b2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b46:	e05d      	b.n	8006c04 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d11c      	bne.n	8006b90 <HAL_SPI_TransmitReceive+0x264>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d017      	beq.n	8006b90 <HAL_SPI_TransmitReceive+0x264>
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d114      	bne.n	8006b90 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	7812      	ldrb	r2, [r2, #0]
 8006b72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d119      	bne.n	8006bd2 <HAL_SPI_TransmitReceive+0x2a6>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d014      	beq.n	8006bd2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bd2:	f7fc fe73 	bl	80038bc <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d803      	bhi.n	8006bea <HAL_SPI_TransmitReceive+0x2be>
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d102      	bne.n	8006bf0 <HAL_SPI_TransmitReceive+0x2c4>
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d109      	bne.n	8006c04 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e038      	b.n	8006c76 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d19c      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x21c>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d197      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c18:	6a3a      	ldr	r2, [r7, #32]
 8006c1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 fcfb 	bl	8007618 <SPI_EndRxTxTransaction>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e01d      	b.n	8006c76 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c42:	2300      	movs	r3, #0
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	613b      	str	r3, [r7, #16]
 8006c56:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006c74:	2300      	movs	r3, #0
  }
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3728      	adds	r7, #40	@ 0x28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d001      	beq.n	8006c9e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e097      	b.n	8006dce <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <HAL_SPI_Transmit_DMA+0x2a>
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e08f      	b.n	8006dce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_SPI_Transmit_DMA+0x3c>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e088      	b.n	8006dce <HAL_SPI_Transmit_DMA+0x14e>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	88fa      	ldrh	r2, [r7, #6]
 8006cdc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	88fa      	ldrh	r2, [r7, #6]
 8006ce2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d0a:	d10f      	bne.n	8006d2c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d30:	4a29      	ldr	r2, [pc, #164]	@ (8006dd8 <HAL_SPI_Transmit_DMA+0x158>)
 8006d32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d38:	4a28      	ldr	r2, [pc, #160]	@ (8006ddc <HAL_SPI_Transmit_DMA+0x15c>)
 8006d3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d40:	4a27      	ldr	r2, [pc, #156]	@ (8006de0 <HAL_SPI_Transmit_DMA+0x160>)
 8006d42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d48:	2200      	movs	r2, #0
 8006d4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d54:	4619      	mov	r1, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006d64:	f7fd f9c2 	bl	80040ec <HAL_DMA_Start_IT>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d72:	f043 0210 	orr.w	r2, r3, #16
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e023      	b.n	8006dce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d90:	2b40      	cmp	r3, #64	@ 0x40
 8006d92:	d007      	beq.n	8006da4 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006da2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0220 	orr.w	r2, r2, #32
 8006dba:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0202 	orr.w	r2, r2, #2
 8006dca:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	080073a9 	.word	0x080073a9
 8006ddc:	080071c9 	.word	0x080071c9
 8006de0:	080073fd 	.word	0x080073fd

08006de4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d001      	beq.n	8006e02 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e0a9      	b.n	8006f56 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d110      	bne.n	8006e2c <HAL_SPI_Receive_DMA+0x48>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e12:	d10b      	bne.n	8006e2c <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2204      	movs	r2, #4
 8006e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006e1c:	88fb      	ldrh	r3, [r7, #6]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 f8a2 	bl	8006f6c <HAL_SPI_TransmitReceive_DMA>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	e094      	b.n	8006f56 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_SPI_Receive_DMA+0x54>
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e08c      	b.n	8006f56 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <HAL_SPI_Receive_DMA+0x66>
 8006e46:	2302      	movs	r3, #2
 8006e48:	e085      	b.n	8006f56 <HAL_SPI_Receive_DMA+0x172>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2204      	movs	r2, #4
 8006e56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	88fa      	ldrh	r2, [r7, #6]
 8006e6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	88fa      	ldrh	r2, [r7, #6]
 8006e70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e92:	d10f      	bne.n	8006eb4 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ea2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006eb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eb8:	4a29      	ldr	r2, [pc, #164]	@ (8006f60 <HAL_SPI_Receive_DMA+0x17c>)
 8006eba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec0:	4a28      	ldr	r2, [pc, #160]	@ (8006f64 <HAL_SPI_Receive_DMA+0x180>)
 8006ec2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec8:	4a27      	ldr	r2, [pc, #156]	@ (8006f68 <HAL_SPI_Receive_DMA+0x184>)
 8006eca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	4619      	mov	r1, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006eec:	f7fd f8fe 	bl	80040ec <HAL_DMA_Start_IT>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00b      	beq.n	8006f0e <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efa:	f043 0210 	orr.w	r2, r3, #16
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e023      	b.n	8006f56 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f18:	2b40      	cmp	r3, #64	@ 0x40
 8006f1a:	d007      	beq.n	8006f2c <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f2a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0220 	orr.w	r2, r2, #32
 8006f42:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0201 	orr.w	r2, r2, #1
 8006f52:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	080073c5 	.word	0x080073c5
 8006f64:	08007271 	.word	0x08007271
 8006f68:	080073fd 	.word	0x080073fd

08006f6c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f80:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d00c      	beq.n	8006fa8 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f94:	d106      	bne.n	8006fa4 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d102      	bne.n	8006fa4 <HAL_SPI_TransmitReceive_DMA+0x38>
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d001      	beq.n	8006fa8 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e0cf      	b.n	8007148 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006fb4:	887b      	ldrh	r3, [r7, #2]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e0c4      	b.n	8007148 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_SPI_TransmitReceive_DMA+0x60>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e0bd      	b.n	8007148 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d003      	beq.n	8006fe8 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2205      	movs	r2, #5
 8006fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	887a      	ldrh	r2, [r7, #2]
 8006ff8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	887a      	ldrh	r2, [r7, #2]
 8006ffe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	887a      	ldrh	r2, [r7, #2]
 800700a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	887a      	ldrh	r2, [r7, #2]
 8007010:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b04      	cmp	r3, #4
 8007028:	d108      	bne.n	800703c <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800702e:	4a48      	ldr	r2, [pc, #288]	@ (8007150 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8007030:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007036:	4a47      	ldr	r2, [pc, #284]	@ (8007154 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8007038:	63da      	str	r2, [r3, #60]	@ 0x3c
 800703a:	e007      	b.n	800704c <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007040:	4a45      	ldr	r2, [pc, #276]	@ (8007158 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8007042:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007048:	4a44      	ldr	r2, [pc, #272]	@ (800715c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800704a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007050:	4a43      	ldr	r2, [pc, #268]	@ (8007160 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007052:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007058:	2200      	movs	r2, #0
 800705a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	4619      	mov	r1, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007072:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007074:	f7fd f83a 	bl	80040ec <HAL_DMA_Start_IT>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007082:	f043 0210 	orr.w	r2, r3, #16
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e058      	b.n	8007148 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f042 0201 	orr.w	r2, r2, #1
 80070a4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070aa:	2200      	movs	r2, #0
 80070ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070b2:	2200      	movs	r2, #0
 80070b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ba:	2200      	movs	r2, #0
 80070bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c2:	2200      	movs	r2, #0
 80070c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ce:	4619      	mov	r1, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070dc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80070de:	f7fd f805 	bl	80040ec <HAL_DMA_Start_IT>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ec:	f043 0210 	orr.w	r2, r3, #16
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e023      	b.n	8007148 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800710a:	2b40      	cmp	r3, #64	@ 0x40
 800710c:	d007      	beq.n	800711e <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800711c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0220 	orr.w	r2, r2, #32
 8007134:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0202 	orr.w	r2, r2, #2
 8007144:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	080073c5 	.word	0x080073c5
 8007154:	08007271 	.word	0x08007271
 8007158:	080073e1 	.word	0x080073e1
 800715c:	08007319 	.word	0x08007319
 8007160:	080073fd 	.word	0x080073fd

08007164 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071d6:	f7fc fb71 	bl	80038bc <HAL_GetTick>
 80071da:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ea:	d03b      	beq.n	8007264 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0220 	bic.w	r2, r2, #32
 80071fa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0202 	bic.w	r2, r2, #2
 800720a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	2164      	movs	r1, #100	@ 0x64
 8007210:	6978      	ldr	r0, [r7, #20]
 8007212:	f000 fa01 	bl	8007618 <SPI_EndRxTxTransaction>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007220:	f043 0220 	orr.w	r2, r3, #32
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2200      	movs	r2, #0
 800724a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800725c:	6978      	ldr	r0, [r7, #20]
 800725e:	f7ff ffa9 	bl	80071b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007262:	e002      	b.n	800726a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007264:	6978      	ldr	r0, [r7, #20]
 8007266:	f7fa fc83 	bl	8001b70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800727e:	f7fc fb1d 	bl	80038bc <HAL_GetTick>
 8007282:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800728e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007292:	d03b      	beq.n	800730c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0220 	bic.w	r2, r2, #32
 80072a2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10d      	bne.n	80072c8 <SPI_DMAReceiveCplt+0x58>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072b4:	d108      	bne.n	80072c8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0203 	bic.w	r2, r2, #3
 80072c4:	605a      	str	r2, [r3, #4]
 80072c6:	e007      	b.n	80072d8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0201 	bic.w	r2, r2, #1
 80072d6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	2164      	movs	r1, #100	@ 0x64
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 f935 	bl	800754c <SPI_EndRxTransaction>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2220      	movs	r2, #32
 80072ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f7ff ff55 	bl	80071b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800730a:	e002      	b.n	8007312 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7fa fc3f 	bl	8001b90 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007326:	f7fc fac9 	bl	80038bc <HAL_GetTick>
 800732a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800733a:	d02f      	beq.n	800739c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0220 	bic.w	r2, r2, #32
 800734a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	2164      	movs	r1, #100	@ 0x64
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f961 	bl	8007618 <SPI_EndRxTxTransaction>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007360:	f043 0220 	orr.w	r2, r3, #32
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0203 	bic.w	r2, r2, #3
 8007376:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7ff ff0d 	bl	80071b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800739a:	e002      	b.n	80073a2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff fee1 	bl	8007164 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff fede 	bl	8007178 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073bc:	bf00      	nop
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7ff feda 	bl	800718c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ec:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff fed6 	bl	80071a0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007408:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0203 	bic.w	r2, r2, #3
 8007418:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800741e:	f043 0210 	orr.w	r2, r3, #16
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7ff fec0 	bl	80071b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007434:	bf00      	nop
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	603b      	str	r3, [r7, #0]
 8007448:	4613      	mov	r3, r2
 800744a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800744c:	f7fc fa36 	bl	80038bc <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	4413      	add	r3, r2
 800745a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800745c:	f7fc fa2e 	bl	80038bc <HAL_GetTick>
 8007460:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007462:	4b39      	ldr	r3, [pc, #228]	@ (8007548 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	015b      	lsls	r3, r3, #5
 8007468:	0d1b      	lsrs	r3, r3, #20
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	fb02 f303 	mul.w	r3, r2, r3
 8007470:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007472:	e054      	b.n	800751e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747a:	d050      	beq.n	800751e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800747c:	f7fc fa1e 	bl	80038bc <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	429a      	cmp	r2, r3
 800748a:	d902      	bls.n	8007492 <SPI_WaitFlagStateUntilTimeout+0x56>
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d13d      	bne.n	800750e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80074a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074aa:	d111      	bne.n	80074d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074b4:	d004      	beq.n	80074c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074be:	d107      	bne.n	80074d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074d8:	d10f      	bne.n	80074fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e017      	b.n	800753e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	3b01      	subs	r3, #1
 800751c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	4013      	ands	r3, r2
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	429a      	cmp	r2, r3
 800752c:	bf0c      	ite	eq
 800752e:	2301      	moveq	r3, #1
 8007530:	2300      	movne	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	461a      	mov	r2, r3
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	429a      	cmp	r2, r3
 800753a:	d19b      	bne.n	8007474 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3720      	adds	r7, #32
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	2000000c 	.word	0x2000000c

0800754c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af02      	add	r7, sp, #8
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007560:	d111      	bne.n	8007586 <SPI_EndRxTransaction+0x3a>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800756a:	d004      	beq.n	8007576 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007574:	d107      	bne.n	8007586 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007584:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800758e:	d12a      	bne.n	80075e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007598:	d012      	beq.n	80075c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	2180      	movs	r1, #128	@ 0x80
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f7ff ff49 	bl	800743c <SPI_WaitFlagStateUntilTimeout>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d02d      	beq.n	800760c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b4:	f043 0220 	orr.w	r2, r3, #32
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e026      	b.n	800760e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2200      	movs	r2, #0
 80075c8:	2101      	movs	r1, #1
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7ff ff36 	bl	800743c <SPI_WaitFlagStateUntilTimeout>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01a      	beq.n	800760c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075da:	f043 0220 	orr.w	r2, r3, #32
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e013      	b.n	800760e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2200      	movs	r2, #0
 80075ee:	2101      	movs	r1, #1
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f7ff ff23 	bl	800743c <SPI_WaitFlagStateUntilTimeout>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d007      	beq.n	800760c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007600:	f043 0220 	orr.w	r2, r3, #32
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e000      	b.n	800760e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af02      	add	r7, sp, #8
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2201      	movs	r2, #1
 800762c:	2102      	movs	r1, #2
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7ff ff04 	bl	800743c <SPI_WaitFlagStateUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763e:	f043 0220 	orr.w	r2, r3, #32
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e032      	b.n	80076b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800764a:	4b1b      	ldr	r3, [pc, #108]	@ (80076b8 <SPI_EndRxTxTransaction+0xa0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1b      	ldr	r2, [pc, #108]	@ (80076bc <SPI_EndRxTxTransaction+0xa4>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	0d5b      	lsrs	r3, r3, #21
 8007656:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007668:	d112      	bne.n	8007690 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2200      	movs	r2, #0
 8007672:	2180      	movs	r1, #128	@ 0x80
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fee1 	bl	800743c <SPI_WaitFlagStateUntilTimeout>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d016      	beq.n	80076ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e00f      	b.n	80076b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	3b01      	subs	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a6:	2b80      	cmp	r3, #128	@ 0x80
 80076a8:	d0f2      	beq.n	8007690 <SPI_EndRxTxTransaction+0x78>
 80076aa:	e000      	b.n	80076ae <SPI_EndRxTxTransaction+0x96>
        break;
 80076ac:	bf00      	nop
  }

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3718      	adds	r7, #24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	2000000c 	.word	0x2000000c
 80076bc:	165e9f81 	.word	0x165e9f81

080076c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e041      	b.n	8007756 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d106      	bne.n	80076ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7fb ff48 	bl	800357c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	4610      	mov	r0, r2
 8007700:	f000 f95e 	bl	80079c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b01      	cmp	r3, #1
 8007772:	d001      	beq.n	8007778 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e046      	b.n	8007806 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a23      	ldr	r2, [pc, #140]	@ (8007814 <HAL_TIM_Base_Start+0xb4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d022      	beq.n	80077d0 <HAL_TIM_Base_Start+0x70>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007792:	d01d      	beq.n	80077d0 <HAL_TIM_Base_Start+0x70>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1f      	ldr	r2, [pc, #124]	@ (8007818 <HAL_TIM_Base_Start+0xb8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d018      	beq.n	80077d0 <HAL_TIM_Base_Start+0x70>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1e      	ldr	r2, [pc, #120]	@ (800781c <HAL_TIM_Base_Start+0xbc>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d013      	beq.n	80077d0 <HAL_TIM_Base_Start+0x70>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007820 <HAL_TIM_Base_Start+0xc0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00e      	beq.n	80077d0 <HAL_TIM_Base_Start+0x70>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007824 <HAL_TIM_Base_Start+0xc4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d009      	beq.n	80077d0 <HAL_TIM_Base_Start+0x70>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a19      	ldr	r2, [pc, #100]	@ (8007828 <HAL_TIM_Base_Start+0xc8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <HAL_TIM_Base_Start+0x70>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a18      	ldr	r2, [pc, #96]	@ (800782c <HAL_TIM_Base_Start+0xcc>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d111      	bne.n	80077f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b06      	cmp	r3, #6
 80077e0:	d010      	beq.n	8007804 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f042 0201 	orr.w	r2, r2, #1
 80077f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f2:	e007      	b.n	8007804 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0201 	orr.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	40010000 	.word	0x40010000
 8007818:	40000400 	.word	0x40000400
 800781c:	40000800 	.word	0x40000800
 8007820:	40000c00 	.word	0x40000c00
 8007824:	40010400 	.word	0x40010400
 8007828:	40014000 	.word	0x40014000
 800782c:	40001800 	.word	0x40001800

08007830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_TIM_ConfigClockSource+0x1c>
 8007848:	2302      	movs	r3, #2
 800784a:	e0b4      	b.n	80079b6 <HAL_TIM_ConfigClockSource+0x186>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2202      	movs	r2, #2
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800786a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007884:	d03e      	beq.n	8007904 <HAL_TIM_ConfigClockSource+0xd4>
 8007886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800788a:	f200 8087 	bhi.w	800799c <HAL_TIM_ConfigClockSource+0x16c>
 800788e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007892:	f000 8086 	beq.w	80079a2 <HAL_TIM_ConfigClockSource+0x172>
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800789a:	d87f      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 800789c:	2b70      	cmp	r3, #112	@ 0x70
 800789e:	d01a      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0xa6>
 80078a0:	2b70      	cmp	r3, #112	@ 0x70
 80078a2:	d87b      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078a4:	2b60      	cmp	r3, #96	@ 0x60
 80078a6:	d050      	beq.n	800794a <HAL_TIM_ConfigClockSource+0x11a>
 80078a8:	2b60      	cmp	r3, #96	@ 0x60
 80078aa:	d877      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078ac:	2b50      	cmp	r3, #80	@ 0x50
 80078ae:	d03c      	beq.n	800792a <HAL_TIM_ConfigClockSource+0xfa>
 80078b0:	2b50      	cmp	r3, #80	@ 0x50
 80078b2:	d873      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078b4:	2b40      	cmp	r3, #64	@ 0x40
 80078b6:	d058      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x13a>
 80078b8:	2b40      	cmp	r3, #64	@ 0x40
 80078ba:	d86f      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078bc:	2b30      	cmp	r3, #48	@ 0x30
 80078be:	d064      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15a>
 80078c0:	2b30      	cmp	r3, #48	@ 0x30
 80078c2:	d86b      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d060      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15a>
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d867      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d05c      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15a>
 80078d0:	2b10      	cmp	r3, #16
 80078d2:	d05a      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15a>
 80078d4:	e062      	b.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078e6:	f000 f991 	bl	8007c0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	609a      	str	r2, [r3, #8]
      break;
 8007902:	e04f      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007914:	f000 f97a 	bl	8007c0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007926:	609a      	str	r2, [r3, #8]
      break;
 8007928:	e03c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007936:	461a      	mov	r2, r3
 8007938:	f000 f8ee 	bl	8007b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2150      	movs	r1, #80	@ 0x50
 8007942:	4618      	mov	r0, r3
 8007944:	f000 f947 	bl	8007bd6 <TIM_ITRx_SetConfig>
      break;
 8007948:	e02c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007956:	461a      	mov	r2, r3
 8007958:	f000 f90d 	bl	8007b76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2160      	movs	r1, #96	@ 0x60
 8007962:	4618      	mov	r0, r3
 8007964:	f000 f937 	bl	8007bd6 <TIM_ITRx_SetConfig>
      break;
 8007968:	e01c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007976:	461a      	mov	r2, r3
 8007978:	f000 f8ce 	bl	8007b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2140      	movs	r1, #64	@ 0x40
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f927 	bl	8007bd6 <TIM_ITRx_SetConfig>
      break;
 8007988:	e00c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4619      	mov	r1, r3
 8007994:	4610      	mov	r0, r2
 8007996:	f000 f91e 	bl	8007bd6 <TIM_ITRx_SetConfig>
      break;
 800799a:	e003      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	73fb      	strb	r3, [r7, #15]
      break;
 80079a0:	e000      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a46      	ldr	r2, [pc, #280]	@ (8007aec <TIM_Base_SetConfig+0x12c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079de:	d00f      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a43      	ldr	r2, [pc, #268]	@ (8007af0 <TIM_Base_SetConfig+0x130>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00b      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a42      	ldr	r2, [pc, #264]	@ (8007af4 <TIM_Base_SetConfig+0x134>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d007      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a41      	ldr	r2, [pc, #260]	@ (8007af8 <TIM_Base_SetConfig+0x138>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d003      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a40      	ldr	r2, [pc, #256]	@ (8007afc <TIM_Base_SetConfig+0x13c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d108      	bne.n	8007a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a35      	ldr	r2, [pc, #212]	@ (8007aec <TIM_Base_SetConfig+0x12c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d02b      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a20:	d027      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a32      	ldr	r2, [pc, #200]	@ (8007af0 <TIM_Base_SetConfig+0x130>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d023      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a31      	ldr	r2, [pc, #196]	@ (8007af4 <TIM_Base_SetConfig+0x134>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d01f      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a30      	ldr	r2, [pc, #192]	@ (8007af8 <TIM_Base_SetConfig+0x138>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d01b      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8007afc <TIM_Base_SetConfig+0x13c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d017      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a2e      	ldr	r2, [pc, #184]	@ (8007b00 <TIM_Base_SetConfig+0x140>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d013      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8007b04 <TIM_Base_SetConfig+0x144>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00f      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a2c      	ldr	r2, [pc, #176]	@ (8007b08 <TIM_Base_SetConfig+0x148>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00b      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8007b0c <TIM_Base_SetConfig+0x14c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d007      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a2a      	ldr	r2, [pc, #168]	@ (8007b10 <TIM_Base_SetConfig+0x150>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d003      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a29      	ldr	r2, [pc, #164]	@ (8007b14 <TIM_Base_SetConfig+0x154>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d108      	bne.n	8007a84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a10      	ldr	r2, [pc, #64]	@ (8007aec <TIM_Base_SetConfig+0x12c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_Base_SetConfig+0xf8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a12      	ldr	r2, [pc, #72]	@ (8007afc <TIM_Base_SetConfig+0x13c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d103      	bne.n	8007ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d105      	bne.n	8007ade <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f023 0201 	bic.w	r2, r3, #1
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	611a      	str	r2, [r3, #16]
  }
}
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40010000 	.word	0x40010000
 8007af0:	40000400 	.word	0x40000400
 8007af4:	40000800 	.word	0x40000800
 8007af8:	40000c00 	.word	0x40000c00
 8007afc:	40010400 	.word	0x40010400
 8007b00:	40014000 	.word	0x40014000
 8007b04:	40014400 	.word	0x40014400
 8007b08:	40014800 	.word	0x40014800
 8007b0c:	40001800 	.word	0x40001800
 8007b10:	40001c00 	.word	0x40001c00
 8007b14:	40002000 	.word	0x40002000

08007b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f023 0201 	bic.w	r2, r3, #1
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f023 030a 	bic.w	r3, r3, #10
 8007b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b087      	sub	sp, #28
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	f023 0210 	bic.w	r2, r3, #16
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	031b      	lsls	r3, r3, #12
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	621a      	str	r2, [r3, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b085      	sub	sp, #20
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	f043 0307 	orr.w	r3, r3, #7
 8007bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	609a      	str	r2, [r3, #8]
}
 8007c00:	bf00      	nop
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	021a      	lsls	r2, r3, #8
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	609a      	str	r2, [r3, #8]
}
 8007c40:	bf00      	nop
 8007c42:	371c      	adds	r7, #28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d101      	bne.n	8007c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c60:	2302      	movs	r3, #2
 8007c62:	e05a      	b.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a21      	ldr	r2, [pc, #132]	@ (8007d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d022      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb0:	d01d      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d018      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d013      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1a      	ldr	r2, [pc, #104]	@ (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00e      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a18      	ldr	r2, [pc, #96]	@ (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d009      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a17      	ldr	r2, [pc, #92]	@ (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d004      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a15      	ldr	r2, [pc, #84]	@ (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d10c      	bne.n	8007d08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40010400 	.word	0x40010400
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40001800 	.word	0x40001800

08007d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e042      	b.n	8007ddc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fb fc26 	bl	80035bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2224      	movs	r2, #36	@ 0x24
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fc85 	bl	8008698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	695a      	ldr	r2, [r3, #20]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68da      	ldr	r2, [r3, #12]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b0ba      	sub	sp, #232	@ 0xe8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10f      	bne.n	8007e4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d009      	beq.n	8007e4a <HAL_UART_IRQHandler+0x66>
 8007e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fb69 	bl	800851a <UART_Receive_IT>
      return;
 8007e48:	e25b      	b.n	8008302 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 80de 	beq.w	8008010 <HAL_UART_IRQHandler+0x22c>
 8007e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 80d1 	beq.w	8008010 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00b      	beq.n	8007e92 <HAL_UART_IRQHandler+0xae>
 8007e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8a:	f043 0201 	orr.w	r2, r3, #1
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e96:	f003 0304 	and.w	r3, r3, #4
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00b      	beq.n	8007eb6 <HAL_UART_IRQHandler+0xd2>
 8007e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eae:	f043 0202 	orr.w	r2, r3, #2
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <HAL_UART_IRQHandler+0xf6>
 8007ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed2:	f043 0204 	orr.w	r2, r3, #4
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d011      	beq.n	8007f0a <HAL_UART_IRQHandler+0x126>
 8007ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d105      	bne.n	8007efe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d005      	beq.n	8007f0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f02:	f043 0208 	orr.w	r2, r3, #8
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 81f2 	beq.w	80082f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d008      	beq.n	8007f32 <HAL_UART_IRQHandler+0x14e>
 8007f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f24:	f003 0320 	and.w	r3, r3, #32
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 faf4 	bl	800851a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f3c:	2b40      	cmp	r3, #64	@ 0x40
 8007f3e:	bf0c      	ite	eq
 8007f40:	2301      	moveq	r3, #1
 8007f42:	2300      	movne	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d103      	bne.n	8007f5e <HAL_UART_IRQHandler+0x17a>
 8007f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d04f      	beq.n	8007ffe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f9fc 	bl	800835c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f6e:	2b40      	cmp	r3, #64	@ 0x40
 8007f70:	d141      	bne.n	8007ff6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3314      	adds	r3, #20
 8007f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3314      	adds	r3, #20
 8007f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1d9      	bne.n	8007f72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d013      	beq.n	8007fee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fca:	4a7e      	ldr	r2, [pc, #504]	@ (80081c4 <HAL_UART_IRQHandler+0x3e0>)
 8007fcc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fc f952 	bl	800427c <HAL_DMA_Abort_IT>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d016      	beq.n	800800c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fec:	e00e      	b.n	800800c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f99e 	bl	8008330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff4:	e00a      	b.n	800800c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f99a 	bl	8008330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffc:	e006      	b.n	800800c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f996 	bl	8008330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800800a:	e175      	b.n	80082f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	bf00      	nop
    return;
 800800e:	e173      	b.n	80082f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008014:	2b01      	cmp	r3, #1
 8008016:	f040 814f 	bne.w	80082b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800801a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 8148 	beq.w	80082b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 8141 	beq.w	80082b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008036:	2300      	movs	r3, #0
 8008038:	60bb      	str	r3, [r7, #8]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60bb      	str	r3, [r7, #8]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	60bb      	str	r3, [r7, #8]
 800804a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008056:	2b40      	cmp	r3, #64	@ 0x40
 8008058:	f040 80b6 	bne.w	80081c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008068:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8145 	beq.w	80082fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800807a:	429a      	cmp	r2, r3
 800807c:	f080 813e 	bcs.w	80082fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008086:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008092:	f000 8088 	beq.w	80081a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	330c      	adds	r3, #12
 800809c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80080ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	330c      	adds	r3, #12
 80080be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80080c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1d9      	bne.n	8008096 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3314      	adds	r3, #20
 80080e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080f4:	f023 0301 	bic.w	r3, r3, #1
 80080f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3314      	adds	r3, #20
 8008102:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008106:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800810a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800810e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008118:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e1      	bne.n	80080e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3314      	adds	r3, #20
 8008124:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008126:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800812e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008134:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3314      	adds	r3, #20
 800813e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008142:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008144:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008146:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008148:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800814a:	e841 2300 	strex	r3, r2, [r1]
 800814e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008150:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1e3      	bne.n	800811e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2220      	movs	r2, #32
 800815a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	330c      	adds	r3, #12
 800816a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008176:	f023 0310 	bic.w	r3, r3, #16
 800817a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	330c      	adds	r3, #12
 8008184:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008188:	65ba      	str	r2, [r7, #88]	@ 0x58
 800818a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800818e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e3      	bne.n	8008164 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fb fffb 	bl	800419c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2202      	movs	r2, #2
 80081aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f8c1 	bl	8008344 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081c2:	e09b      	b.n	80082fc <HAL_UART_IRQHandler+0x518>
 80081c4:	08008423 	.word	0x08008423
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081dc:	b29b      	uxth	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 808e 	beq.w	8008300 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80081e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8089 	beq.w	8008300 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	330c      	adds	r3, #12
 80081f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008200:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008204:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	330c      	adds	r3, #12
 800820e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008212:	647a      	str	r2, [r7, #68]	@ 0x44
 8008214:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008218:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e3      	bne.n	80081ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3314      	adds	r3, #20
 800822c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	623b      	str	r3, [r7, #32]
   return(result);
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	f023 0301 	bic.w	r3, r3, #1
 800823c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3314      	adds	r3, #20
 8008246:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800824a:	633a      	str	r2, [r7, #48]	@ 0x30
 800824c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e3      	bne.n	8008226 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2220      	movs	r2, #32
 8008262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	330c      	adds	r3, #12
 8008272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	60fb      	str	r3, [r7, #12]
   return(result);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0310 	bic.w	r3, r3, #16
 8008282:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	330c      	adds	r3, #12
 800828c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008290:	61fa      	str	r2, [r7, #28]
 8008292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	69b9      	ldr	r1, [r7, #24]
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	617b      	str	r3, [r7, #20]
   return(result);
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e3      	bne.n	800826c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f847 	bl	8008344 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082b6:	e023      	b.n	8008300 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d009      	beq.n	80082d8 <HAL_UART_IRQHandler+0x4f4>
 80082c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f8ba 	bl	800844a <UART_Transmit_IT>
    return;
 80082d6:	e014      	b.n	8008302 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00e      	beq.n	8008302 <HAL_UART_IRQHandler+0x51e>
 80082e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d008      	beq.n	8008302 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f8fa 	bl	80084ea <UART_EndTransmit_IT>
    return;
 80082f6:	e004      	b.n	8008302 <HAL_UART_IRQHandler+0x51e>
    return;
 80082f8:	bf00      	nop
 80082fa:	e002      	b.n	8008302 <HAL_UART_IRQHandler+0x51e>
      return;
 80082fc:	bf00      	nop
 80082fe:	e000      	b.n	8008302 <HAL_UART_IRQHandler+0x51e>
      return;
 8008300:	bf00      	nop
  }
}
 8008302:	37e8      	adds	r7, #232	@ 0xe8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b095      	sub	sp, #84	@ 0x54
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	330c      	adds	r3, #12
 800836a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800837a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	330c      	adds	r3, #12
 8008382:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008384:	643a      	str	r2, [r7, #64]	@ 0x40
 8008386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800838a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800838c:	e841 2300 	strex	r3, r2, [r1]
 8008390:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e5      	bne.n	8008364 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3314      	adds	r3, #20
 800839e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	e853 3f00 	ldrex	r3, [r3]
 80083a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	f023 0301 	bic.w	r3, r3, #1
 80083ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3314      	adds	r3, #20
 80083b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083c0:	e841 2300 	strex	r3, r2, [r1]
 80083c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1e5      	bne.n	8008398 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d119      	bne.n	8008408 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	330c      	adds	r3, #12
 80083da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f023 0310 	bic.w	r3, r3, #16
 80083ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	330c      	adds	r3, #12
 80083f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083f4:	61ba      	str	r2, [r7, #24]
 80083f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6979      	ldr	r1, [r7, #20]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	613b      	str	r3, [r7, #16]
   return(result);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e5      	bne.n	80083d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2220      	movs	r2, #32
 800840c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008416:	bf00      	nop
 8008418:	3754      	adds	r7, #84	@ 0x54
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f7ff ff77 	bl	8008330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008442:	bf00      	nop
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b21      	cmp	r3, #33	@ 0x21
 800845c:	d13e      	bne.n	80084dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008466:	d114      	bne.n	8008492 <UART_Transmit_IT+0x48>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d110      	bne.n	8008492 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008484:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	1c9a      	adds	r2, r3, #2
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	621a      	str	r2, [r3, #32]
 8008490:	e008      	b.n	80084a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	1c59      	adds	r1, r3, #1
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	6211      	str	r1, [r2, #32]
 800849c:	781a      	ldrb	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	4619      	mov	r1, r3
 80084b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10f      	bne.n	80084d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	e000      	b.n	80084de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084dc:	2302      	movs	r3, #2
  }
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008500:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2220      	movs	r2, #32
 8008506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff fefc 	bl	8008308 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b08c      	sub	sp, #48	@ 0x30
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b22      	cmp	r3, #34	@ 0x22
 800852c:	f040 80ae 	bne.w	800868c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008538:	d117      	bne.n	800856a <UART_Receive_IT+0x50>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d113      	bne.n	800856a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800854a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	b29b      	uxth	r3, r3
 8008554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008558:	b29a      	uxth	r2, r3
 800855a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008562:	1c9a      	adds	r2, r3, #2
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	629a      	str	r2, [r3, #40]	@ 0x28
 8008568:	e026      	b.n	80085b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008570:	2300      	movs	r3, #0
 8008572:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800857c:	d007      	beq.n	800858e <UART_Receive_IT+0x74>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10a      	bne.n	800859c <UART_Receive_IT+0x82>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	b2da      	uxtb	r2, r3
 8008596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	e008      	b.n	80085ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085bc:	b29b      	uxth	r3, r3
 80085be:	3b01      	subs	r3, #1
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	4619      	mov	r1, r3
 80085c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d15d      	bne.n	8008688 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 0220 	bic.w	r2, r2, #32
 80085da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68da      	ldr	r2, [r3, #12]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	695a      	ldr	r2, [r3, #20]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0201 	bic.w	r2, r2, #1
 80085fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800860e:	2b01      	cmp	r3, #1
 8008610:	d135      	bne.n	800867e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	330c      	adds	r3, #12
 800861e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	e853 3f00 	ldrex	r3, [r3]
 8008626:	613b      	str	r3, [r7, #16]
   return(result);
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f023 0310 	bic.w	r3, r3, #16
 800862e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	330c      	adds	r3, #12
 8008636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008638:	623a      	str	r2, [r7, #32]
 800863a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	69f9      	ldr	r1, [r7, #28]
 800863e:	6a3a      	ldr	r2, [r7, #32]
 8008640:	e841 2300 	strex	r3, r2, [r1]
 8008644:	61bb      	str	r3, [r7, #24]
   return(result);
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e5      	bne.n	8008618 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0310 	and.w	r3, r3, #16
 8008656:	2b10      	cmp	r3, #16
 8008658:	d10a      	bne.n	8008670 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	60fb      	str	r3, [r7, #12]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	60fb      	str	r3, [r7, #12]
 800866e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff fe64 	bl	8008344 <HAL_UARTEx_RxEventCallback>
 800867c:	e002      	b.n	8008684 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff fe4c 	bl	800831c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	e002      	b.n	800868e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	e000      	b.n	800868e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800868c:	2302      	movs	r3, #2
  }
}
 800868e:	4618      	mov	r0, r3
 8008690:	3730      	adds	r7, #48	@ 0x30
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800869c:	b0c0      	sub	sp, #256	@ 0x100
 800869e:	af00      	add	r7, sp, #0
 80086a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80086b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b4:	68d9      	ldr	r1, [r3, #12]
 80086b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	ea40 0301 	orr.w	r3, r0, r1
 80086c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	431a      	orrs	r2, r3
 80086d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	431a      	orrs	r2, r3
 80086d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	4313      	orrs	r3, r2
 80086e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80086e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80086f0:	f021 010c 	bic.w	r1, r1, #12
 80086f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80086fe:	430b      	orrs	r3, r1
 8008700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800870e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008712:	6999      	ldr	r1, [r3, #24]
 8008714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	ea40 0301 	orr.w	r3, r0, r1
 800871e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	4b8f      	ldr	r3, [pc, #572]	@ (8008964 <UART_SetConfig+0x2cc>)
 8008728:	429a      	cmp	r2, r3
 800872a:	d005      	beq.n	8008738 <UART_SetConfig+0xa0>
 800872c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	4b8d      	ldr	r3, [pc, #564]	@ (8008968 <UART_SetConfig+0x2d0>)
 8008734:	429a      	cmp	r2, r3
 8008736:	d104      	bne.n	8008742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008738:	f7fc fe66 	bl	8005408 <HAL_RCC_GetPCLK2Freq>
 800873c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008740:	e003      	b.n	800874a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008742:	f7fc fe4d 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 8008746:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800874a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008754:	f040 810c 	bne.w	8008970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800875c:	2200      	movs	r2, #0
 800875e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008762:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800876a:	4622      	mov	r2, r4
 800876c:	462b      	mov	r3, r5
 800876e:	1891      	adds	r1, r2, r2
 8008770:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008772:	415b      	adcs	r3, r3
 8008774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800877a:	4621      	mov	r1, r4
 800877c:	eb12 0801 	adds.w	r8, r2, r1
 8008780:	4629      	mov	r1, r5
 8008782:	eb43 0901 	adc.w	r9, r3, r1
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800879a:	4690      	mov	r8, r2
 800879c:	4699      	mov	r9, r3
 800879e:	4623      	mov	r3, r4
 80087a0:	eb18 0303 	adds.w	r3, r8, r3
 80087a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80087a8:	462b      	mov	r3, r5
 80087aa:	eb49 0303 	adc.w	r3, r9, r3
 80087ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80087c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80087c6:	460b      	mov	r3, r1
 80087c8:	18db      	adds	r3, r3, r3
 80087ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80087cc:	4613      	mov	r3, r2
 80087ce:	eb42 0303 	adc.w	r3, r2, r3
 80087d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80087d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80087d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80087dc:	f7f7 fcfc 	bl	80001d8 <__aeabi_uldivmod>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4b61      	ldr	r3, [pc, #388]	@ (800896c <UART_SetConfig+0x2d4>)
 80087e6:	fba3 2302 	umull	r2, r3, r3, r2
 80087ea:	095b      	lsrs	r3, r3, #5
 80087ec:	011c      	lsls	r4, r3, #4
 80087ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80087fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008800:	4642      	mov	r2, r8
 8008802:	464b      	mov	r3, r9
 8008804:	1891      	adds	r1, r2, r2
 8008806:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008808:	415b      	adcs	r3, r3
 800880a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800880c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008810:	4641      	mov	r1, r8
 8008812:	eb12 0a01 	adds.w	sl, r2, r1
 8008816:	4649      	mov	r1, r9
 8008818:	eb43 0b01 	adc.w	fp, r3, r1
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	f04f 0300 	mov.w	r3, #0
 8008824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800882c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008830:	4692      	mov	sl, r2
 8008832:	469b      	mov	fp, r3
 8008834:	4643      	mov	r3, r8
 8008836:	eb1a 0303 	adds.w	r3, sl, r3
 800883a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800883e:	464b      	mov	r3, r9
 8008840:	eb4b 0303 	adc.w	r3, fp, r3
 8008844:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008854:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800885c:	460b      	mov	r3, r1
 800885e:	18db      	adds	r3, r3, r3
 8008860:	643b      	str	r3, [r7, #64]	@ 0x40
 8008862:	4613      	mov	r3, r2
 8008864:	eb42 0303 	adc.w	r3, r2, r3
 8008868:	647b      	str	r3, [r7, #68]	@ 0x44
 800886a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800886e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008872:	f7f7 fcb1 	bl	80001d8 <__aeabi_uldivmod>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4611      	mov	r1, r2
 800887c:	4b3b      	ldr	r3, [pc, #236]	@ (800896c <UART_SetConfig+0x2d4>)
 800887e:	fba3 2301 	umull	r2, r3, r3, r1
 8008882:	095b      	lsrs	r3, r3, #5
 8008884:	2264      	movs	r2, #100	@ 0x64
 8008886:	fb02 f303 	mul.w	r3, r2, r3
 800888a:	1acb      	subs	r3, r1, r3
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008892:	4b36      	ldr	r3, [pc, #216]	@ (800896c <UART_SetConfig+0x2d4>)
 8008894:	fba3 2302 	umull	r2, r3, r3, r2
 8008898:	095b      	lsrs	r3, r3, #5
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80088a0:	441c      	add	r4, r3
 80088a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088a6:	2200      	movs	r2, #0
 80088a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80088b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80088b4:	4642      	mov	r2, r8
 80088b6:	464b      	mov	r3, r9
 80088b8:	1891      	adds	r1, r2, r2
 80088ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80088bc:	415b      	adcs	r3, r3
 80088be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80088c4:	4641      	mov	r1, r8
 80088c6:	1851      	adds	r1, r2, r1
 80088c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80088ca:	4649      	mov	r1, r9
 80088cc:	414b      	adcs	r3, r1
 80088ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80088d0:	f04f 0200 	mov.w	r2, #0
 80088d4:	f04f 0300 	mov.w	r3, #0
 80088d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80088dc:	4659      	mov	r1, fp
 80088de:	00cb      	lsls	r3, r1, #3
 80088e0:	4651      	mov	r1, sl
 80088e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088e6:	4651      	mov	r1, sl
 80088e8:	00ca      	lsls	r2, r1, #3
 80088ea:	4610      	mov	r0, r2
 80088ec:	4619      	mov	r1, r3
 80088ee:	4603      	mov	r3, r0
 80088f0:	4642      	mov	r2, r8
 80088f2:	189b      	adds	r3, r3, r2
 80088f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088f8:	464b      	mov	r3, r9
 80088fa:	460a      	mov	r2, r1
 80088fc:	eb42 0303 	adc.w	r3, r2, r3
 8008900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008910:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008918:	460b      	mov	r3, r1
 800891a:	18db      	adds	r3, r3, r3
 800891c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800891e:	4613      	mov	r3, r2
 8008920:	eb42 0303 	adc.w	r3, r2, r3
 8008924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800892a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800892e:	f7f7 fc53 	bl	80001d8 <__aeabi_uldivmod>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4b0d      	ldr	r3, [pc, #52]	@ (800896c <UART_SetConfig+0x2d4>)
 8008938:	fba3 1302 	umull	r1, r3, r3, r2
 800893c:	095b      	lsrs	r3, r3, #5
 800893e:	2164      	movs	r1, #100	@ 0x64
 8008940:	fb01 f303 	mul.w	r3, r1, r3
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	3332      	adds	r3, #50	@ 0x32
 800894a:	4a08      	ldr	r2, [pc, #32]	@ (800896c <UART_SetConfig+0x2d4>)
 800894c:	fba2 2303 	umull	r2, r3, r2, r3
 8008950:	095b      	lsrs	r3, r3, #5
 8008952:	f003 0207 	and.w	r2, r3, #7
 8008956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4422      	add	r2, r4
 800895e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008960:	e106      	b.n	8008b70 <UART_SetConfig+0x4d8>
 8008962:	bf00      	nop
 8008964:	40011000 	.word	0x40011000
 8008968:	40011400 	.word	0x40011400
 800896c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008974:	2200      	movs	r2, #0
 8008976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800897a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800897e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008982:	4642      	mov	r2, r8
 8008984:	464b      	mov	r3, r9
 8008986:	1891      	adds	r1, r2, r2
 8008988:	6239      	str	r1, [r7, #32]
 800898a:	415b      	adcs	r3, r3
 800898c:	627b      	str	r3, [r7, #36]	@ 0x24
 800898e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008992:	4641      	mov	r1, r8
 8008994:	1854      	adds	r4, r2, r1
 8008996:	4649      	mov	r1, r9
 8008998:	eb43 0501 	adc.w	r5, r3, r1
 800899c:	f04f 0200 	mov.w	r2, #0
 80089a0:	f04f 0300 	mov.w	r3, #0
 80089a4:	00eb      	lsls	r3, r5, #3
 80089a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089aa:	00e2      	lsls	r2, r4, #3
 80089ac:	4614      	mov	r4, r2
 80089ae:	461d      	mov	r5, r3
 80089b0:	4643      	mov	r3, r8
 80089b2:	18e3      	adds	r3, r4, r3
 80089b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089b8:	464b      	mov	r3, r9
 80089ba:	eb45 0303 	adc.w	r3, r5, r3
 80089be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80089c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80089ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80089d2:	f04f 0200 	mov.w	r2, #0
 80089d6:	f04f 0300 	mov.w	r3, #0
 80089da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80089de:	4629      	mov	r1, r5
 80089e0:	008b      	lsls	r3, r1, #2
 80089e2:	4621      	mov	r1, r4
 80089e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089e8:	4621      	mov	r1, r4
 80089ea:	008a      	lsls	r2, r1, #2
 80089ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80089f0:	f7f7 fbf2 	bl	80001d8 <__aeabi_uldivmod>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4b60      	ldr	r3, [pc, #384]	@ (8008b7c <UART_SetConfig+0x4e4>)
 80089fa:	fba3 2302 	umull	r2, r3, r3, r2
 80089fe:	095b      	lsrs	r3, r3, #5
 8008a00:	011c      	lsls	r4, r3, #4
 8008a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008a14:	4642      	mov	r2, r8
 8008a16:	464b      	mov	r3, r9
 8008a18:	1891      	adds	r1, r2, r2
 8008a1a:	61b9      	str	r1, [r7, #24]
 8008a1c:	415b      	adcs	r3, r3
 8008a1e:	61fb      	str	r3, [r7, #28]
 8008a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a24:	4641      	mov	r1, r8
 8008a26:	1851      	adds	r1, r2, r1
 8008a28:	6139      	str	r1, [r7, #16]
 8008a2a:	4649      	mov	r1, r9
 8008a2c:	414b      	adcs	r3, r1
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	f04f 0200 	mov.w	r2, #0
 8008a34:	f04f 0300 	mov.w	r3, #0
 8008a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a3c:	4659      	mov	r1, fp
 8008a3e:	00cb      	lsls	r3, r1, #3
 8008a40:	4651      	mov	r1, sl
 8008a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a46:	4651      	mov	r1, sl
 8008a48:	00ca      	lsls	r2, r1, #3
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4642      	mov	r2, r8
 8008a52:	189b      	adds	r3, r3, r2
 8008a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a58:	464b      	mov	r3, r9
 8008a5a:	460a      	mov	r2, r1
 8008a5c:	eb42 0303 	adc.w	r3, r2, r3
 8008a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008a70:	f04f 0200 	mov.w	r2, #0
 8008a74:	f04f 0300 	mov.w	r3, #0
 8008a78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	008b      	lsls	r3, r1, #2
 8008a80:	4641      	mov	r1, r8
 8008a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a86:	4641      	mov	r1, r8
 8008a88:	008a      	lsls	r2, r1, #2
 8008a8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008a8e:	f7f7 fba3 	bl	80001d8 <__aeabi_uldivmod>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4611      	mov	r1, r2
 8008a98:	4b38      	ldr	r3, [pc, #224]	@ (8008b7c <UART_SetConfig+0x4e4>)
 8008a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a9e:	095b      	lsrs	r3, r3, #5
 8008aa0:	2264      	movs	r2, #100	@ 0x64
 8008aa2:	fb02 f303 	mul.w	r3, r2, r3
 8008aa6:	1acb      	subs	r3, r1, r3
 8008aa8:	011b      	lsls	r3, r3, #4
 8008aaa:	3332      	adds	r3, #50	@ 0x32
 8008aac:	4a33      	ldr	r2, [pc, #204]	@ (8008b7c <UART_SetConfig+0x4e4>)
 8008aae:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab2:	095b      	lsrs	r3, r3, #5
 8008ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ab8:	441c      	add	r4, r3
 8008aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008abe:	2200      	movs	r2, #0
 8008ac0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ac2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008ac4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008ac8:	4642      	mov	r2, r8
 8008aca:	464b      	mov	r3, r9
 8008acc:	1891      	adds	r1, r2, r2
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	415b      	adcs	r3, r3
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ad8:	4641      	mov	r1, r8
 8008ada:	1851      	adds	r1, r2, r1
 8008adc:	6039      	str	r1, [r7, #0]
 8008ade:	4649      	mov	r1, r9
 8008ae0:	414b      	adcs	r3, r1
 8008ae2:	607b      	str	r3, [r7, #4]
 8008ae4:	f04f 0200 	mov.w	r2, #0
 8008ae8:	f04f 0300 	mov.w	r3, #0
 8008aec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008af0:	4659      	mov	r1, fp
 8008af2:	00cb      	lsls	r3, r1, #3
 8008af4:	4651      	mov	r1, sl
 8008af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008afa:	4651      	mov	r1, sl
 8008afc:	00ca      	lsls	r2, r1, #3
 8008afe:	4610      	mov	r0, r2
 8008b00:	4619      	mov	r1, r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	4642      	mov	r2, r8
 8008b06:	189b      	adds	r3, r3, r2
 8008b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	460a      	mov	r2, r1
 8008b0e:	eb42 0303 	adc.w	r3, r2, r3
 8008b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008b20:	f04f 0200 	mov.w	r2, #0
 8008b24:	f04f 0300 	mov.w	r3, #0
 8008b28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	008b      	lsls	r3, r1, #2
 8008b30:	4641      	mov	r1, r8
 8008b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b36:	4641      	mov	r1, r8
 8008b38:	008a      	lsls	r2, r1, #2
 8008b3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b3e:	f7f7 fb4b 	bl	80001d8 <__aeabi_uldivmod>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4b0d      	ldr	r3, [pc, #52]	@ (8008b7c <UART_SetConfig+0x4e4>)
 8008b48:	fba3 1302 	umull	r1, r3, r3, r2
 8008b4c:	095b      	lsrs	r3, r3, #5
 8008b4e:	2164      	movs	r1, #100	@ 0x64
 8008b50:	fb01 f303 	mul.w	r3, r1, r3
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	011b      	lsls	r3, r3, #4
 8008b58:	3332      	adds	r3, #50	@ 0x32
 8008b5a:	4a08      	ldr	r2, [pc, #32]	@ (8008b7c <UART_SetConfig+0x4e4>)
 8008b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b60:	095b      	lsrs	r3, r3, #5
 8008b62:	f003 020f 	and.w	r2, r3, #15
 8008b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4422      	add	r2, r4
 8008b6e:	609a      	str	r2, [r3, #8]
}
 8008b70:	bf00      	nop
 8008b72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008b76:	46bd      	mov	sp, r7
 8008b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b7c:	51eb851f 	.word	0x51eb851f

08008b80 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008b80:	b084      	sub	sp, #16
 8008b82:	b480      	push	{r7}
 8008b84:	b085      	sub	sp, #20
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	f107 001c 	add.w	r0, r7, #28
 8008b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008b96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008b98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008b9a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008b9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008ba2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008ba6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008baa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008bba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	b004      	add	sp, #16
 8008bd4:	4770      	bx	lr

08008bd6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2203      	movs	r2, #3
 8008c1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0303 	and.w	r3, r3, #3
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c68:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008c6e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008c74:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008c84:	f023 030f 	bic.w	r3, r3, #15
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	b2db      	uxtb	r3, r3
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3314      	adds	r3, #20
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	4413      	add	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
}  
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b085      	sub	sp, #20
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d04:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d0a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d10:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0

}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b088      	sub	sp, #32
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008d44:	2310      	movs	r3, #16
 8008d46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d48:	2340      	movs	r3, #64	@ 0x40
 8008d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d56:	f107 0308 	add.w	r3, r7, #8
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7ff ff74 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d66:	2110      	movs	r1, #16
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f9d7 	bl	800911c <SDMMC_GetCmdResp1>
 8008d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d70:	69fb      	ldr	r3, [r7, #28]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3720      	adds	r7, #32
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b088      	sub	sp, #32
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008d88:	2311      	movs	r3, #17
 8008d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d8c:	2340      	movs	r3, #64	@ 0x40
 8008d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d90:	2300      	movs	r3, #0
 8008d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d9a:	f107 0308 	add.w	r3, r7, #8
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff ff52 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008daa:	2111      	movs	r1, #17
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f9b5 	bl	800911c <SDMMC_GetCmdResp1>
 8008db2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008db4:	69fb      	ldr	r3, [r7, #28]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3720      	adds	r7, #32
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b088      	sub	sp, #32
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008dcc:	2312      	movs	r3, #18
 8008dce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dd0:	2340      	movs	r3, #64	@ 0x40
 8008dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ddc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dde:	f107 0308 	add.w	r3, r7, #8
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7ff ff30 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dee:	2112      	movs	r1, #18
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f993 	bl	800911c <SDMMC_GetCmdResp1>
 8008df6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008df8:	69fb      	ldr	r3, [r7, #28]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3720      	adds	r7, #32
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b088      	sub	sp, #32
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e10:	2318      	movs	r3, #24
 8008e12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e14:	2340      	movs	r3, #64	@ 0x40
 8008e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e22:	f107 0308 	add.w	r3, r7, #8
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff ff0e 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e32:	2118      	movs	r1, #24
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f971 	bl	800911c <SDMMC_GetCmdResp1>
 8008e3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e3c:	69fb      	ldr	r3, [r7, #28]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3720      	adds	r7, #32
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b088      	sub	sp, #32
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008e54:	2319      	movs	r3, #25
 8008e56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e58:	2340      	movs	r3, #64	@ 0x40
 8008e5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e66:	f107 0308 	add.w	r3, r7, #8
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff feec 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e76:	2119      	movs	r1, #25
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f94f 	bl	800911c <SDMMC_GetCmdResp1>
 8008e7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e80:	69fb      	ldr	r3, [r7, #28]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3720      	adds	r7, #32
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008e98:	230c      	movs	r3, #12
 8008e9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e9c:	2340      	movs	r3, #64	@ 0x40
 8008e9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ea4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ea8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008eaa:	f107 0308 	add.w	r3, r7, #8
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff feca 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008eb6:	4a05      	ldr	r2, [pc, #20]	@ (8008ecc <SDMMC_CmdStopTransfer+0x40>)
 8008eb8:	210c      	movs	r1, #12
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f92e 	bl	800911c <SDMMC_GetCmdResp1>
 8008ec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3720      	adds	r7, #32
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	05f5e100 	.word	0x05f5e100

08008ed0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	@ 0x28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008ee0:	2307      	movs	r3, #7
 8008ee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ee4:	2340      	movs	r3, #64	@ 0x40
 8008ee6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008eec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ef0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ef2:	f107 0310 	add.w	r3, r7, #16
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff fea6 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f02:	2107      	movs	r1, #7
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f000 f909 	bl	800911c <SDMMC_GetCmdResp1>
 8008f0a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3728      	adds	r7, #40	@ 0x28
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b088      	sub	sp, #32
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008f26:	2300      	movs	r3, #0
 8008f28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f34:	f107 0308 	add.w	r3, r7, #8
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7ff fe85 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fb23 	bl	800958c <SDMMC_GetCmdError>
 8008f46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f48:	69fb      	ldr	r3, [r7, #28]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b088      	sub	sp, #32
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008f5a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008f5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008f60:	2308      	movs	r3, #8
 8008f62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f64:	2340      	movs	r3, #64	@ 0x40
 8008f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f72:	f107 0308 	add.w	r3, r7, #8
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff fe66 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fab6 	bl	80094f0 <SDMMC_GetCmdResp7>
 8008f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f86:	69fb      	ldr	r3, [r7, #28]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3720      	adds	r7, #32
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008f9e:	2337      	movs	r3, #55	@ 0x37
 8008fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fa2:	2340      	movs	r3, #64	@ 0x40
 8008fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fb0:	f107 0308 	add.w	r3, r7, #8
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7ff fe47 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fc0:	2137      	movs	r1, #55	@ 0x37
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f8aa 	bl	800911c <SDMMC_GetCmdResp1>
 8008fc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fca:	69fb      	ldr	r3, [r7, #28]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3720      	adds	r7, #32
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b088      	sub	sp, #32
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008fe4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008fea:	2329      	movs	r3, #41	@ 0x29
 8008fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fee:	2340      	movs	r3, #64	@ 0x40
 8008ff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ffa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ffc:	f107 0308 	add.w	r3, r7, #8
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7ff fe21 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f9bd 	bl	8009388 <SDMMC_GetCmdResp3>
 800900e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009010:	69fb      	ldr	r3, [r7, #28]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b088      	sub	sp, #32
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009026:	2302      	movs	r3, #2
 8009028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800902a:	23c0      	movs	r3, #192	@ 0xc0
 800902c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800902e:	2300      	movs	r3, #0
 8009030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009036:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009038:	f107 0308 	add.w	r3, r7, #8
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff fe03 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f957 	bl	80092f8 <SDMMC_GetCmdResp2>
 800904a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800904c:	69fb      	ldr	r3, [r7, #28]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3720      	adds	r7, #32
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b088      	sub	sp, #32
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009064:	2309      	movs	r3, #9
 8009066:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009068:	23c0      	movs	r3, #192	@ 0xc0
 800906a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800906c:	2300      	movs	r3, #0
 800906e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009070:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009074:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009076:	f107 0308 	add.w	r3, r7, #8
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7ff fde4 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f938 	bl	80092f8 <SDMMC_GetCmdResp2>
 8009088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800908a:	69fb      	ldr	r3, [r7, #28]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3720      	adds	r7, #32
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800909e:	2300      	movs	r3, #0
 80090a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80090a2:	2303      	movs	r3, #3
 80090a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090a6:	2340      	movs	r3, #64	@ 0x40
 80090a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090aa:	2300      	movs	r3, #0
 80090ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090b4:	f107 0308 	add.w	r3, r7, #8
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff fdc5 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	2103      	movs	r1, #3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f99d 	bl	8009404 <SDMMC_GetCmdResp6>
 80090ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090cc:	69fb      	ldr	r3, [r7, #28]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3720      	adds	r7, #32
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b088      	sub	sp, #32
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80090e4:	230d      	movs	r3, #13
 80090e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090e8:	2340      	movs	r3, #64	@ 0x40
 80090ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090ec:	2300      	movs	r3, #0
 80090ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090f6:	f107 0308 	add.w	r3, r7, #8
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff fda4 	bl	8008c4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009106:	210d      	movs	r1, #13
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f807 	bl	800911c <SDMMC_GetCmdResp1>
 800910e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009110:	69fb      	ldr	r3, [r7, #28]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3720      	adds	r7, #32
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b088      	sub	sp, #32
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	460b      	mov	r3, r1
 8009126:	607a      	str	r2, [r7, #4]
 8009128:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800912a:	4b70      	ldr	r3, [pc, #448]	@ (80092ec <SDMMC_GetCmdResp1+0x1d0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a70      	ldr	r2, [pc, #448]	@ (80092f0 <SDMMC_GetCmdResp1+0x1d4>)
 8009130:	fba2 2303 	umull	r2, r3, r2, r3
 8009134:	0a5a      	lsrs	r2, r3, #9
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	fb02 f303 	mul.w	r3, r2, r3
 800913c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	1e5a      	subs	r2, r3, #1
 8009142:	61fa      	str	r2, [r7, #28]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d102      	bne.n	800914e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009148:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800914c:	e0c9      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009152:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0ef      	beq.n	800913e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1ea      	bne.n	800913e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800916c:	f003 0304 	and.w	r3, r3, #4
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2204      	movs	r2, #4
 8009178:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800917a:	2304      	movs	r3, #4
 800917c:	e0b1      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	d004      	beq.n	8009194 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2201      	movs	r2, #1
 800918e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009190:	2301      	movs	r3, #1
 8009192:	e0a6      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	22c5      	movs	r2, #197	@ 0xc5
 8009198:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f7ff fd7f 	bl	8008c9e <SDIO_GetCommandResponse>
 80091a0:	4603      	mov	r3, r0
 80091a2:	461a      	mov	r2, r3
 80091a4:	7afb      	ldrb	r3, [r7, #11]
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d001      	beq.n	80091ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e099      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80091ae:	2100      	movs	r1, #0
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f7ff fd81 	bl	8008cb8 <SDIO_GetResponse>
 80091b6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	4b4e      	ldr	r3, [pc, #312]	@ (80092f4 <SDMMC_GetCmdResp1+0x1d8>)
 80091bc:	4013      	ands	r3, r2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80091c2:	2300      	movs	r3, #0
 80091c4:	e08d      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	da02      	bge.n	80091d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80091cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80091d0:	e087      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80091dc:	2340      	movs	r3, #64	@ 0x40
 80091de:	e080      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80091ea:	2380      	movs	r3, #128	@ 0x80
 80091ec:	e079      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80091f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091fc:	e071      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800920c:	e069      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800921c:	e061      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009228:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800922c:	e059      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800923c:	e051      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009248:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800924c:	e049      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009258:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800925c:	e041      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800926c:	e039      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009278:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800927c:	e031      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009288:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800928c:	e029      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009298:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800929c:	e021      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80092a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80092ac:	e019      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80092b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80092bc:	e011      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80092c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80092cc:	e009      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f003 0308 	and.w	r3, r3, #8
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80092d8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80092dc:	e001      	b.n	80092e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80092de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3720      	adds	r7, #32
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	2000000c 	.word	0x2000000c
 80092f0:	10624dd3 	.word	0x10624dd3
 80092f4:	fdffe008 	.word	0xfdffe008

080092f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009300:	4b1f      	ldr	r3, [pc, #124]	@ (8009380 <SDMMC_GetCmdResp2+0x88>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a1f      	ldr	r2, [pc, #124]	@ (8009384 <SDMMC_GetCmdResp2+0x8c>)
 8009306:	fba2 2303 	umull	r2, r3, r2, r3
 800930a:	0a5b      	lsrs	r3, r3, #9
 800930c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009310:	fb02 f303 	mul.w	r3, r2, r3
 8009314:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	1e5a      	subs	r2, r3, #1
 800931a:	60fa      	str	r2, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009320:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009324:	e026      	b.n	8009374 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800932a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009332:	2b00      	cmp	r3, #0
 8009334:	d0ef      	beq.n	8009316 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1ea      	bne.n	8009316 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009344:	f003 0304 	and.w	r3, r3, #4
 8009348:	2b00      	cmp	r3, #0
 800934a:	d004      	beq.n	8009356 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2204      	movs	r2, #4
 8009350:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009352:	2304      	movs	r3, #4
 8009354:	e00e      	b.n	8009374 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d004      	beq.n	800936c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009368:	2301      	movs	r3, #1
 800936a:	e003      	b.n	8009374 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	22c5      	movs	r2, #197	@ 0xc5
 8009370:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	2000000c 	.word	0x2000000c
 8009384:	10624dd3 	.word	0x10624dd3

08009388 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009390:	4b1a      	ldr	r3, [pc, #104]	@ (80093fc <SDMMC_GetCmdResp3+0x74>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a1a      	ldr	r2, [pc, #104]	@ (8009400 <SDMMC_GetCmdResp3+0x78>)
 8009396:	fba2 2303 	umull	r2, r3, r2, r3
 800939a:	0a5b      	lsrs	r3, r3, #9
 800939c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093a0:	fb02 f303 	mul.w	r3, r2, r3
 80093a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	1e5a      	subs	r2, r3, #1
 80093aa:	60fa      	str	r2, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093b4:	e01b      	b.n	80093ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0ef      	beq.n	80093a6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1ea      	bne.n	80093a6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d004      	beq.n	80093e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2204      	movs	r2, #4
 80093e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093e2:	2304      	movs	r3, #4
 80093e4:	e003      	b.n	80093ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	22c5      	movs	r2, #197	@ 0xc5
 80093ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	2000000c 	.word	0x2000000c
 8009400:	10624dd3 	.word	0x10624dd3

08009404 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	460b      	mov	r3, r1
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009412:	4b35      	ldr	r3, [pc, #212]	@ (80094e8 <SDMMC_GetCmdResp6+0xe4>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a35      	ldr	r2, [pc, #212]	@ (80094ec <SDMMC_GetCmdResp6+0xe8>)
 8009418:	fba2 2303 	umull	r2, r3, r2, r3
 800941c:	0a5b      	lsrs	r3, r3, #9
 800941e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009422:	fb02 f303 	mul.w	r3, r2, r3
 8009426:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	1e5a      	subs	r2, r3, #1
 800942c:	61fa      	str	r2, [r7, #28]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d102      	bne.n	8009438 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009432:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009436:	e052      	b.n	80094de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800943c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009444:	2b00      	cmp	r3, #0
 8009446:	d0ef      	beq.n	8009428 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1ea      	bne.n	8009428 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009456:	f003 0304 	and.w	r3, r3, #4
 800945a:	2b00      	cmp	r3, #0
 800945c:	d004      	beq.n	8009468 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2204      	movs	r2, #4
 8009462:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009464:	2304      	movs	r3, #4
 8009466:	e03a      	b.n	80094de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	2b00      	cmp	r3, #0
 8009472:	d004      	beq.n	800947e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2201      	movs	r2, #1
 8009478:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800947a:	2301      	movs	r3, #1
 800947c:	e02f      	b.n	80094de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f7ff fc0d 	bl	8008c9e <SDIO_GetCommandResponse>
 8009484:	4603      	mov	r3, r0
 8009486:	461a      	mov	r2, r3
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	4293      	cmp	r3, r2
 800948c:	d001      	beq.n	8009492 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800948e:	2301      	movs	r3, #1
 8009490:	e025      	b.n	80094de <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	22c5      	movs	r2, #197	@ 0xc5
 8009496:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009498:	2100      	movs	r1, #0
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff fc0c 	bl	8008cb8 <SDIO_GetResponse>
 80094a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d106      	bne.n	80094ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	0c1b      	lsrs	r3, r3, #16
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	e011      	b.n	80094de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80094c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094c8:	e009      	b.n	80094de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d002      	beq.n	80094da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80094d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094d8:	e001      	b.n	80094de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80094da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3720      	adds	r7, #32
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	2000000c 	.word	0x2000000c
 80094ec:	10624dd3 	.word	0x10624dd3

080094f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094f8:	4b22      	ldr	r3, [pc, #136]	@ (8009584 <SDMMC_GetCmdResp7+0x94>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a22      	ldr	r2, [pc, #136]	@ (8009588 <SDMMC_GetCmdResp7+0x98>)
 80094fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009502:	0a5b      	lsrs	r3, r3, #9
 8009504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009508:	fb02 f303 	mul.w	r3, r2, r3
 800950c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	1e5a      	subs	r2, r3, #1
 8009512:	60fa      	str	r2, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d102      	bne.n	800951e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009518:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800951c:	e02c      	b.n	8009578 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009522:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0ef      	beq.n	800950e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1ea      	bne.n	800950e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800953c:	f003 0304 	and.w	r3, r3, #4
 8009540:	2b00      	cmp	r3, #0
 8009542:	d004      	beq.n	800954e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2204      	movs	r2, #4
 8009548:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800954a:	2304      	movs	r3, #4
 800954c:	e014      	b.n	8009578 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009560:	2301      	movs	r3, #1
 8009562:	e009      	b.n	8009578 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2240      	movs	r2, #64	@ 0x40
 8009574:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009576:	2300      	movs	r3, #0
  
}
 8009578:	4618      	mov	r0, r3
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	2000000c 	.word	0x2000000c
 8009588:	10624dd3 	.word	0x10624dd3

0800958c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009594:	4b11      	ldr	r3, [pc, #68]	@ (80095dc <SDMMC_GetCmdError+0x50>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a11      	ldr	r2, [pc, #68]	@ (80095e0 <SDMMC_GetCmdError+0x54>)
 800959a:	fba2 2303 	umull	r2, r3, r2, r3
 800959e:	0a5b      	lsrs	r3, r3, #9
 80095a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095a4:	fb02 f303 	mul.w	r3, r2, r3
 80095a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	1e5a      	subs	r2, r3, #1
 80095ae:	60fa      	str	r2, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d102      	bne.n	80095ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095b8:	e009      	b.n	80095ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d0f1      	beq.n	80095aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	22c5      	movs	r2, #197	@ 0xc5
 80095ca:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	2000000c 	.word	0x2000000c
 80095e0:	10624dd3 	.word	0x10624dd3

080095e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80095e8:	4904      	ldr	r1, [pc, #16]	@ (80095fc <MX_FATFS_Init+0x18>)
 80095ea:	4805      	ldr	r0, [pc, #20]	@ (8009600 <MX_FATFS_Init+0x1c>)
 80095ec:	f003 f886 	bl	800c6fc <FATFS_LinkDriver>
 80095f0:	4603      	mov	r3, r0
 80095f2:	461a      	mov	r2, r3
 80095f4:	4b03      	ldr	r3, [pc, #12]	@ (8009604 <MX_FATFS_Init+0x20>)
 80095f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80095f8:	bf00      	nop
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	2000059c 	.word	0x2000059c
 8009600:	0800d948 	.word	0x0800d948
 8009604:	20000598 	.word	0x20000598

08009608 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009608:	b480      	push	{r7}
 800960a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800960c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800960e:	4618      	mov	r0, r3
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009622:	f000 f86b 	bl	80096fc <BSP_SD_IsDetected>
 8009626:	4603      	mov	r3, r0
 8009628:	2b01      	cmp	r3, #1
 800962a:	d001      	beq.n	8009630 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e005      	b.n	800963c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009630:	4804      	ldr	r0, [pc, #16]	@ (8009644 <BSP_SD_Init+0x2c>)
 8009632:	f7fb fefd 	bl	8005430 <HAL_SD_Init>
 8009636:	4603      	mov	r3, r0
 8009638:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800963a:	79fb      	ldrb	r3, [r7, #7]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	200000fc 	.word	0x200000fc

08009648 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af02      	add	r7, sp, #8
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	4806      	ldr	r0, [pc, #24]	@ (8009680 <BSP_SD_ReadBlocks+0x38>)
 8009666:	f7fb ff93 	bl	8005590 <HAL_SD_ReadBlocks>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009674:	7dfb      	ldrb	r3, [r7, #23]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	200000fc 	.word	0x200000fc

08009684 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b088      	sub	sp, #32
 8009688:	af02      	add	r7, sp, #8
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
 8009690:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	68f9      	ldr	r1, [r7, #12]
 80096a0:	4806      	ldr	r0, [pc, #24]	@ (80096bc <BSP_SD_WriteBlocks+0x38>)
 80096a2:	f7fc f95b 	bl	800595c <HAL_SD_WriteBlocks>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	200000fc 	.word	0x200000fc

080096c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80096c4:	4805      	ldr	r0, [pc, #20]	@ (80096dc <BSP_SD_GetCardState+0x1c>)
 80096c6:	f7fc fca7 	bl	8006018 <HAL_SD_GetCardState>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	bf14      	ite	ne
 80096d0:	2301      	movne	r3, #1
 80096d2:	2300      	moveq	r3, #0
 80096d4:	b2db      	uxtb	r3, r3
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	200000fc 	.word	0x200000fc

080096e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80096e8:	6879      	ldr	r1, [r7, #4]
 80096ea:	4803      	ldr	r0, [pc, #12]	@ (80096f8 <BSP_SD_GetCardInfo+0x18>)
 80096ec:	f7fc fc68 	bl	8005fc0 <HAL_SD_GetCardInfo>
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	200000fc 	.word	0x200000fc

080096fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009702:	2301      	movs	r3, #1
 8009704:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	b2db      	uxtb	r3, r3
}
 800970a:	4618      	mov	r0, r3
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
	...

08009718 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009722:	4b0b      	ldr	r3, [pc, #44]	@ (8009750 <SD_CheckStatus+0x38>)
 8009724:	2201      	movs	r2, #1
 8009726:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009728:	f7ff ffca 	bl	80096c0 <BSP_SD_GetCardState>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d107      	bne.n	8009742 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009732:	4b07      	ldr	r3, [pc, #28]	@ (8009750 <SD_CheckStatus+0x38>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	b2db      	uxtb	r3, r3
 8009738:	f023 0301 	bic.w	r3, r3, #1
 800973c:	b2da      	uxtb	r2, r3
 800973e:	4b04      	ldr	r3, [pc, #16]	@ (8009750 <SD_CheckStatus+0x38>)
 8009740:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009742:	4b03      	ldr	r3, [pc, #12]	@ (8009750 <SD_CheckStatus+0x38>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b2db      	uxtb	r3, r3
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20000015 	.word	0x20000015

08009754 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800975e:	4b0b      	ldr	r3, [pc, #44]	@ (800978c <SD_initialize+0x38>)
 8009760:	2201      	movs	r2, #1
 8009762:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009764:	f7ff ff58 	bl	8009618 <BSP_SD_Init>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d107      	bne.n	800977e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff ffd1 	bl	8009718 <SD_CheckStatus>
 8009776:	4603      	mov	r3, r0
 8009778:	461a      	mov	r2, r3
 800977a:	4b04      	ldr	r3, [pc, #16]	@ (800978c <SD_initialize+0x38>)
 800977c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800977e:	4b03      	ldr	r3, [pc, #12]	@ (800978c <SD_initialize+0x38>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b2db      	uxtb	r3, r3
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20000015 	.word	0x20000015

08009790 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff ffbb 	bl	8009718 <SD_CheckStatus>
 80097a2:	4603      	mov	r3, r0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60b9      	str	r1, [r7, #8]
 80097b4:	607a      	str	r2, [r7, #4]
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80097c0:	f04f 33ff 	mov.w	r3, #4294967295
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	68b8      	ldr	r0, [r7, #8]
 80097ca:	f7ff ff3d 	bl	8009648 <BSP_SD_ReadBlocks>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d107      	bne.n	80097e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80097d4:	bf00      	nop
 80097d6:	f7ff ff73 	bl	80096c0 <BSP_SD_GetCardState>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1fa      	bne.n	80097d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b086      	sub	sp, #24
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	603b      	str	r3, [r7, #0]
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009802:	f04f 33ff 	mov.w	r3, #4294967295
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	6879      	ldr	r1, [r7, #4]
 800980a:	68b8      	ldr	r0, [r7, #8]
 800980c:	f7ff ff3a 	bl	8009684 <BSP_SD_WriteBlocks>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d107      	bne.n	8009826 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009816:	bf00      	nop
 8009818:	f7ff ff52 	bl	80096c0 <BSP_SD_GetCardState>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1fa      	bne.n	8009818 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009826:	7dfb      	ldrb	r3, [r7, #23]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b08c      	sub	sp, #48	@ 0x30
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	603a      	str	r2, [r7, #0]
 800983a:	71fb      	strb	r3, [r7, #7]
 800983c:	460b      	mov	r3, r1
 800983e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009846:	4b25      	ldr	r3, [pc, #148]	@ (80098dc <SD_ioctl+0xac>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <SD_ioctl+0x28>
 8009854:	2303      	movs	r3, #3
 8009856:	e03c      	b.n	80098d2 <SD_ioctl+0xa2>

  switch (cmd)
 8009858:	79bb      	ldrb	r3, [r7, #6]
 800985a:	2b03      	cmp	r3, #3
 800985c:	d834      	bhi.n	80098c8 <SD_ioctl+0x98>
 800985e:	a201      	add	r2, pc, #4	@ (adr r2, 8009864 <SD_ioctl+0x34>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	08009875 	.word	0x08009875
 8009868:	0800987d 	.word	0x0800987d
 800986c:	08009895 	.word	0x08009895
 8009870:	080098af 	.word	0x080098af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800987a:	e028      	b.n	80098ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800987c:	f107 030c 	add.w	r3, r7, #12
 8009880:	4618      	mov	r0, r3
 8009882:	f7ff ff2d 	bl	80096e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009892:	e01c      	b.n	80098ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009894:	f107 030c 	add.w	r3, r7, #12
 8009898:	4618      	mov	r0, r3
 800989a:	f7ff ff21 	bl	80096e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800989e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80098ac:	e00f      	b.n	80098ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098ae:	f107 030c 	add.w	r3, r7, #12
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff ff14 	bl	80096e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80098b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ba:	0a5a      	lsrs	r2, r3, #9
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80098c6:	e002      	b.n	80098ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80098c8:	2304      	movs	r3, #4
 80098ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80098ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3730      	adds	r7, #48	@ 0x30
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000015 	.word	0x20000015

080098e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80098ea:	79fb      	ldrb	r3, [r7, #7]
 80098ec:	4a08      	ldr	r2, [pc, #32]	@ (8009910 <disk_status+0x30>)
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4413      	add	r3, r2
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	79fa      	ldrb	r2, [r7, #7]
 80098f8:	4905      	ldr	r1, [pc, #20]	@ (8009910 <disk_status+0x30>)
 80098fa:	440a      	add	r2, r1
 80098fc:	7a12      	ldrb	r2, [r2, #8]
 80098fe:	4610      	mov	r0, r2
 8009900:	4798      	blx	r3
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009906:	7bfb      	ldrb	r3, [r7, #15]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	200005c8 	.word	0x200005c8

08009914 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	4a0e      	ldr	r2, [pc, #56]	@ (8009960 <disk_initialize+0x4c>)
 8009926:	5cd3      	ldrb	r3, [r2, r3]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d114      	bne.n	8009956 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800992c:	79fb      	ldrb	r3, [r7, #7]
 800992e:	4a0c      	ldr	r2, [pc, #48]	@ (8009960 <disk_initialize+0x4c>)
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	79fa      	ldrb	r2, [r7, #7]
 800993a:	4909      	ldr	r1, [pc, #36]	@ (8009960 <disk_initialize+0x4c>)
 800993c:	440a      	add	r2, r1
 800993e:	7a12      	ldrb	r2, [r2, #8]
 8009940:	4610      	mov	r0, r2
 8009942:	4798      	blx	r3
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d103      	bne.n	8009956 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	4a03      	ldr	r2, [pc, #12]	@ (8009960 <disk_initialize+0x4c>)
 8009952:	2101      	movs	r1, #1
 8009954:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	200005c8 	.word	0x200005c8

08009964 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	4a0a      	ldr	r2, [pc, #40]	@ (80099a0 <disk_read+0x3c>)
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	689c      	ldr	r4, [r3, #8]
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	4a07      	ldr	r2, [pc, #28]	@ (80099a0 <disk_read+0x3c>)
 8009984:	4413      	add	r3, r2
 8009986:	7a18      	ldrb	r0, [r3, #8]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	68b9      	ldr	r1, [r7, #8]
 800998e:	47a0      	blx	r4
 8009990:	4603      	mov	r3, r0
 8009992:	75fb      	strb	r3, [r7, #23]
  return res;
 8009994:	7dfb      	ldrb	r3, [r7, #23]
}
 8009996:	4618      	mov	r0, r3
 8009998:	371c      	adds	r7, #28
 800999a:	46bd      	mov	sp, r7
 800999c:	bd90      	pop	{r4, r7, pc}
 800999e:	bf00      	nop
 80099a0:	200005c8 	.word	0x200005c8

080099a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80099a4:	b590      	push	{r4, r7, lr}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60b9      	str	r1, [r7, #8]
 80099ac:	607a      	str	r2, [r7, #4]
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	4603      	mov	r3, r0
 80099b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	4a0a      	ldr	r2, [pc, #40]	@ (80099e0 <disk_write+0x3c>)
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	68dc      	ldr	r4, [r3, #12]
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	4a07      	ldr	r2, [pc, #28]	@ (80099e0 <disk_write+0x3c>)
 80099c4:	4413      	add	r3, r2
 80099c6:	7a18      	ldrb	r0, [r3, #8]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	47a0      	blx	r4
 80099d0:	4603      	mov	r3, r0
 80099d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	371c      	adds	r7, #28
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd90      	pop	{r4, r7, pc}
 80099de:	bf00      	nop
 80099e0:	200005c8 	.word	0x200005c8

080099e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	603a      	str	r2, [r7, #0]
 80099ee:	71fb      	strb	r3, [r7, #7]
 80099f0:	460b      	mov	r3, r1
 80099f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80099f4:	79fb      	ldrb	r3, [r7, #7]
 80099f6:	4a09      	ldr	r2, [pc, #36]	@ (8009a1c <disk_ioctl+0x38>)
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	79fa      	ldrb	r2, [r7, #7]
 8009a02:	4906      	ldr	r1, [pc, #24]	@ (8009a1c <disk_ioctl+0x38>)
 8009a04:	440a      	add	r2, r1
 8009a06:	7a10      	ldrb	r0, [r2, #8]
 8009a08:	79b9      	ldrb	r1, [r7, #6]
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	4798      	blx	r3
 8009a0e:	4603      	mov	r3, r0
 8009a10:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	200005c8 	.word	0x200005c8

08009a20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a30:	89fb      	ldrh	r3, [r7, #14]
 8009a32:	021b      	lsls	r3, r3, #8
 8009a34:	b21a      	sxth	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	b21b      	sxth	r3, r3
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	b21b      	sxth	r3, r3
 8009a40:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a42:	89fb      	ldrh	r3, [r7, #14]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3303      	adds	r3, #3
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	021b      	lsls	r3, r3, #8
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	3202      	adds	r2, #2
 8009a68:	7812      	ldrb	r2, [r2, #0]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	021b      	lsls	r3, r3, #8
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	3201      	adds	r2, #1
 8009a76:	7812      	ldrb	r2, [r2, #0]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	021b      	lsls	r3, r3, #8
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	7812      	ldrb	r2, [r2, #0]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]
	return rv;
 8009a88:	68fb      	ldr	r3, [r7, #12]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	887a      	ldrh	r2, [r7, #2]
 8009aaa:	b2d2      	uxtb	r2, r2
 8009aac:	701a      	strb	r2, [r3, #0]
 8009aae:	887b      	ldrh	r3, [r7, #2]
 8009ab0:	0a1b      	lsrs	r3, r3, #8
 8009ab2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	607a      	str	r2, [r7, #4]
 8009aba:	887a      	ldrh	r2, [r7, #2]
 8009abc:	b2d2      	uxtb	r2, r2
 8009abe:	701a      	strb	r2, [r3, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	b2d2      	uxtb	r2, r2
 8009ae0:	701a      	strb	r2, [r3, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	0a1b      	lsrs	r3, r3, #8
 8009ae6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	607a      	str	r2, [r7, #4]
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	b2d2      	uxtb	r2, r2
 8009af2:	701a      	strb	r2, [r3, #0]
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	0a1b      	lsrs	r3, r3, #8
 8009af8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	b2d2      	uxtb	r2, r2
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	0a1b      	lsrs	r3, r3, #8
 8009b0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	607a      	str	r2, [r7, #4]
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	b2d2      	uxtb	r2, r2
 8009b16:	701a      	strb	r2, [r3, #0]
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00d      	beq.n	8009b5a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	1c53      	adds	r3, r2, #1
 8009b42:	613b      	str	r3, [r7, #16]
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	1c59      	adds	r1, r3, #1
 8009b48:	6179      	str	r1, [r7, #20]
 8009b4a:	7812      	ldrb	r2, [r2, #0]
 8009b4c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	607b      	str	r3, [r7, #4]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1f1      	bne.n	8009b3e <mem_cpy+0x1a>
	}
}
 8009b5a:	bf00      	nop
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b66:	b480      	push	{r7}
 8009b68:	b087      	sub	sp, #28
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	60f8      	str	r0, [r7, #12]
 8009b6e:	60b9      	str	r1, [r7, #8]
 8009b70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	1c5a      	adds	r2, r3, #1
 8009b7a:	617a      	str	r2, [r7, #20]
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	b2d2      	uxtb	r2, r2
 8009b80:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	607b      	str	r3, [r7, #4]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1f3      	bne.n	8009b76 <mem_set+0x10>
}
 8009b8e:	bf00      	nop
 8009b90:	bf00      	nop
 8009b92:	371c      	adds	r7, #28
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009b9c:	b480      	push	{r7}
 8009b9e:	b089      	sub	sp, #36	@ 0x24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	61fb      	str	r3, [r7, #28]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	61fa      	str	r2, [r7, #28]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	1c5a      	adds	r2, r3, #1
 8009bc2:	61ba      	str	r2, [r7, #24]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	1acb      	subs	r3, r1, r3
 8009bc8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	607b      	str	r3, [r7, #4]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <mem_cmp+0x40>
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d0eb      	beq.n	8009bb4 <mem_cmp+0x18>

	return r;
 8009bdc:	697b      	ldr	r3, [r7, #20]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3724      	adds	r7, #36	@ 0x24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009bf4:	e002      	b.n	8009bfc <chk_chr+0x12>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	607b      	str	r3, [r7, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d005      	beq.n	8009c10 <chk_chr+0x26>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d1f2      	bne.n	8009bf6 <chk_chr+0xc>
	return *str;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	781b      	ldrb	r3, [r3, #0]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60bb      	str	r3, [r7, #8]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	e029      	b.n	8009c88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009c34:	4a27      	ldr	r2, [pc, #156]	@ (8009cd4 <chk_lock+0xb4>)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	4413      	add	r3, r2
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d01d      	beq.n	8009c7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c42:	4a24      	ldr	r2, [pc, #144]	@ (8009cd4 <chk_lock+0xb4>)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	011b      	lsls	r3, r3, #4
 8009c48:	4413      	add	r3, r2
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d116      	bne.n	8009c82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009c54:	4a1f      	ldr	r2, [pc, #124]	@ (8009cd4 <chk_lock+0xb4>)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	011b      	lsls	r3, r3, #4
 8009c5a:	4413      	add	r3, r2
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d10c      	bne.n	8009c82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c68:	4a1a      	ldr	r2, [pc, #104]	@ (8009cd4 <chk_lock+0xb4>)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	011b      	lsls	r3, r3, #4
 8009c6e:	4413      	add	r3, r2
 8009c70:	3308      	adds	r3, #8
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d102      	bne.n	8009c82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c7c:	e007      	b.n	8009c8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3301      	adds	r3, #1
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d9d2      	bls.n	8009c34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d109      	bne.n	8009ca8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d102      	bne.n	8009ca0 <chk_lock+0x80>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d101      	bne.n	8009ca4 <chk_lock+0x84>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e010      	b.n	8009cc6 <chk_lock+0xa6>
 8009ca4:	2312      	movs	r3, #18
 8009ca6:	e00e      	b.n	8009cc6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d108      	bne.n	8009cc0 <chk_lock+0xa0>
 8009cae:	4a09      	ldr	r2, [pc, #36]	@ (8009cd4 <chk_lock+0xb4>)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	011b      	lsls	r3, r3, #4
 8009cb4:	4413      	add	r3, r2
 8009cb6:	330c      	adds	r3, #12
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cbe:	d101      	bne.n	8009cc4 <chk_lock+0xa4>
 8009cc0:	2310      	movs	r3, #16
 8009cc2:	e000      	b.n	8009cc6 <chk_lock+0xa6>
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	200005a8 	.word	0x200005a8

08009cd8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	607b      	str	r3, [r7, #4]
 8009ce2:	e002      	b.n	8009cea <enq_lock+0x12>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	607b      	str	r3, [r7, #4]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d806      	bhi.n	8009cfe <enq_lock+0x26>
 8009cf0:	4a09      	ldr	r2, [pc, #36]	@ (8009d18 <enq_lock+0x40>)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	011b      	lsls	r3, r3, #4
 8009cf6:	4413      	add	r3, r2
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1f2      	bne.n	8009ce4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	bf14      	ite	ne
 8009d04:	2301      	movne	r3, #1
 8009d06:	2300      	moveq	r3, #0
 8009d08:	b2db      	uxtb	r3, r3
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	200005a8 	.word	0x200005a8

08009d1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d26:	2300      	movs	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]
 8009d2a:	e01f      	b.n	8009d6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009d2c:	4a41      	ldr	r2, [pc, #260]	@ (8009e34 <inc_lock+0x118>)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	011b      	lsls	r3, r3, #4
 8009d32:	4413      	add	r3, r2
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d113      	bne.n	8009d66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009d3e:	4a3d      	ldr	r2, [pc, #244]	@ (8009e34 <inc_lock+0x118>)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	011b      	lsls	r3, r3, #4
 8009d44:	4413      	add	r3, r2
 8009d46:	3304      	adds	r3, #4
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d109      	bne.n	8009d66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d52:	4a38      	ldr	r2, [pc, #224]	@ (8009e34 <inc_lock+0x118>)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	011b      	lsls	r3, r3, #4
 8009d58:	4413      	add	r3, r2
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d006      	beq.n	8009d74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	60fb      	str	r3, [r7, #12]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d9dc      	bls.n	8009d2c <inc_lock+0x10>
 8009d72:	e000      	b.n	8009d76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009d74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d132      	bne.n	8009de2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	e002      	b.n	8009d88 <inc_lock+0x6c>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3301      	adds	r3, #1
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d806      	bhi.n	8009d9c <inc_lock+0x80>
 8009d8e:	4a29      	ldr	r2, [pc, #164]	@ (8009e34 <inc_lock+0x118>)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	011b      	lsls	r3, r3, #4
 8009d94:	4413      	add	r3, r2
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1f2      	bne.n	8009d82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d101      	bne.n	8009da6 <inc_lock+0x8a>
 8009da2:	2300      	movs	r3, #0
 8009da4:	e040      	b.n	8009e28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	4922      	ldr	r1, [pc, #136]	@ (8009e34 <inc_lock+0x118>)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	440b      	add	r3, r1
 8009db2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689a      	ldr	r2, [r3, #8]
 8009db8:	491e      	ldr	r1, [pc, #120]	@ (8009e34 <inc_lock+0x118>)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	011b      	lsls	r3, r3, #4
 8009dbe:	440b      	add	r3, r1
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	695a      	ldr	r2, [r3, #20]
 8009dc8:	491a      	ldr	r1, [pc, #104]	@ (8009e34 <inc_lock+0x118>)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	011b      	lsls	r3, r3, #4
 8009dce:	440b      	add	r3, r1
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009dd4:	4a17      	ldr	r2, [pc, #92]	@ (8009e34 <inc_lock+0x118>)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	011b      	lsls	r3, r3, #4
 8009dda:	4413      	add	r3, r2
 8009ddc:	330c      	adds	r3, #12
 8009dde:	2200      	movs	r2, #0
 8009de0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d009      	beq.n	8009dfc <inc_lock+0xe0>
 8009de8:	4a12      	ldr	r2, [pc, #72]	@ (8009e34 <inc_lock+0x118>)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	011b      	lsls	r3, r3, #4
 8009dee:	4413      	add	r3, r2
 8009df0:	330c      	adds	r3, #12
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <inc_lock+0xe0>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	e015      	b.n	8009e28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d108      	bne.n	8009e14 <inc_lock+0xf8>
 8009e02:	4a0c      	ldr	r2, [pc, #48]	@ (8009e34 <inc_lock+0x118>)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	4413      	add	r3, r2
 8009e0a:	330c      	adds	r3, #12
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	e001      	b.n	8009e18 <inc_lock+0xfc>
 8009e14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e18:	4906      	ldr	r1, [pc, #24]	@ (8009e34 <inc_lock+0x118>)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	011b      	lsls	r3, r3, #4
 8009e1e:	440b      	add	r3, r1
 8009e20:	330c      	adds	r3, #12
 8009e22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3301      	adds	r3, #1
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	200005a8 	.word	0x200005a8

08009e38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	607b      	str	r3, [r7, #4]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d825      	bhi.n	8009e98 <dec_lock+0x60>
		n = Files[i].ctr;
 8009e4c:	4a17      	ldr	r2, [pc, #92]	@ (8009eac <dec_lock+0x74>)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	011b      	lsls	r3, r3, #4
 8009e52:	4413      	add	r3, r2
 8009e54:	330c      	adds	r3, #12
 8009e56:	881b      	ldrh	r3, [r3, #0]
 8009e58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009e5a:	89fb      	ldrh	r3, [r7, #14]
 8009e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e60:	d101      	bne.n	8009e66 <dec_lock+0x2e>
 8009e62:	2300      	movs	r3, #0
 8009e64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009e66:	89fb      	ldrh	r3, [r7, #14]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <dec_lock+0x3a>
 8009e6c:	89fb      	ldrh	r3, [r7, #14]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009e72:	4a0e      	ldr	r2, [pc, #56]	@ (8009eac <dec_lock+0x74>)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	011b      	lsls	r3, r3, #4
 8009e78:	4413      	add	r3, r2
 8009e7a:	330c      	adds	r3, #12
 8009e7c:	89fa      	ldrh	r2, [r7, #14]
 8009e7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009e80:	89fb      	ldrh	r3, [r7, #14]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d105      	bne.n	8009e92 <dec_lock+0x5a>
 8009e86:	4a09      	ldr	r2, [pc, #36]	@ (8009eac <dec_lock+0x74>)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	011b      	lsls	r3, r3, #4
 8009e8c:	4413      	add	r3, r2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	737b      	strb	r3, [r7, #13]
 8009e96:	e001      	b.n	8009e9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009e98:	2302      	movs	r3, #2
 8009e9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009e9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	200005a8 	.word	0x200005a8

08009eb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	e010      	b.n	8009ee0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8009ef4 <clear_lock+0x44>)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	4413      	add	r3, r2
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d105      	bne.n	8009eda <clear_lock+0x2a>
 8009ece:	4a09      	ldr	r2, [pc, #36]	@ (8009ef4 <clear_lock+0x44>)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	011b      	lsls	r3, r3, #4
 8009ed4:	4413      	add	r3, r2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	3301      	adds	r3, #1
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d9eb      	bls.n	8009ebe <clear_lock+0xe>
	}
}
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	200005a8 	.word	0x200005a8

08009ef8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	78db      	ldrb	r3, [r3, #3]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d034      	beq.n	8009f76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7858      	ldrb	r0, [r3, #1]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	f7ff fd40 	bl	80099a4 <disk_write>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d002      	beq.n	8009f30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	73fb      	strb	r3, [r7, #15]
 8009f2e:	e022      	b.n	8009f76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	1ad2      	subs	r2, r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d217      	bcs.n	8009f76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	789b      	ldrb	r3, [r3, #2]
 8009f4a:	613b      	str	r3, [r7, #16]
 8009f4c:	e010      	b.n	8009f70 <sync_window+0x78>
					wsect += fs->fsize;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	4413      	add	r3, r2
 8009f56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7858      	ldrb	r0, [r3, #1]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f62:	2301      	movs	r3, #1
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	f7ff fd1d 	bl	80099a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	613b      	str	r3, [r7, #16]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d8eb      	bhi.n	8009f4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d01b      	beq.n	8009fd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff ffad 	bl	8009ef8 <sync_window>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d113      	bne.n	8009fd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	7858      	ldrb	r0, [r3, #1]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	f7ff fcd5 	bl	8009964 <disk_read>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d004      	beq.n	8009fca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff ff87 	bl	8009ef8 <sync_window>
 8009fea:	4603      	mov	r3, r0
 8009fec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d158      	bne.n	800a0a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	d148      	bne.n	800a08e <sync_fs+0xb2>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	791b      	ldrb	r3, [r3, #4]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d144      	bne.n	800a08e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3330      	adds	r3, #48	@ 0x30
 800a008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a00c:	2100      	movs	r1, #0
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff fda9 	bl	8009b66 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3330      	adds	r3, #48	@ 0x30
 800a018:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a01c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff fd38 	bl	8009a96 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3330      	adds	r3, #48	@ 0x30
 800a02a:	4921      	ldr	r1, [pc, #132]	@ (800a0b0 <sync_fs+0xd4>)
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff fd4d 	bl	8009acc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3330      	adds	r3, #48	@ 0x30
 800a036:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a03a:	491e      	ldr	r1, [pc, #120]	@ (800a0b4 <sync_fs+0xd8>)
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7ff fd45 	bl	8009acc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	3330      	adds	r3, #48	@ 0x30
 800a046:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	4619      	mov	r1, r3
 800a050:	4610      	mov	r0, r2
 800a052:	f7ff fd3b 	bl	8009acc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3330      	adds	r3, #48	@ 0x30
 800a05a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	4619      	mov	r1, r3
 800a064:	4610      	mov	r0, r2
 800a066:	f7ff fd31 	bl	8009acc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	7858      	ldrb	r0, [r3, #1]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a082:	2301      	movs	r3, #1
 800a084:	f7ff fc8e 	bl	80099a4 <disk_write>
			fs->fsi_flag = 0;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	785b      	ldrb	r3, [r3, #1]
 800a092:	2200      	movs	r2, #0
 800a094:	2100      	movs	r1, #0
 800a096:	4618      	mov	r0, r3
 800a098:	f7ff fca4 	bl	80099e4 <disk_ioctl>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <sync_fs+0xca>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	41615252 	.word	0x41615252
 800a0b4:	61417272 	.word	0x61417272

0800a0b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	3b02      	subs	r3, #2
 800a0c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	695b      	ldr	r3, [r3, #20]
 800a0cc:	3b02      	subs	r3, #2
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d301      	bcc.n	800a0d8 <clust2sect+0x20>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e008      	b.n	800a0ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	895b      	ldrh	r3, [r3, #10]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	fb03 f202 	mul.w	r2, r3, r2
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e8:	4413      	add	r3, r2
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b086      	sub	sp, #24
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d904      	bls.n	800a116 <get_fat+0x20>
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	695b      	ldr	r3, [r3, #20]
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d302      	bcc.n	800a11c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a116:	2301      	movs	r3, #1
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	e08e      	b.n	800a23a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a11c:	f04f 33ff 	mov.w	r3, #4294967295
 800a120:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2b03      	cmp	r3, #3
 800a128:	d061      	beq.n	800a1ee <get_fat+0xf8>
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	dc7b      	bgt.n	800a226 <get_fat+0x130>
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d002      	beq.n	800a138 <get_fat+0x42>
 800a132:	2b02      	cmp	r3, #2
 800a134:	d041      	beq.n	800a1ba <get_fat+0xc4>
 800a136:	e076      	b.n	800a226 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	085b      	lsrs	r3, r3, #1
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4413      	add	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	6a1a      	ldr	r2, [r3, #32]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	0a5b      	lsrs	r3, r3, #9
 800a14e:	4413      	add	r3, r2
 800a150:	4619      	mov	r1, r3
 800a152:	6938      	ldr	r0, [r7, #16]
 800a154:	f7ff ff14 	bl	8009f80 <move_window>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d166      	bne.n	800a22c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	60fa      	str	r2, [r7, #12]
 800a164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	4413      	add	r3, r2
 800a16c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a170:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6a1a      	ldr	r2, [r3, #32]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	0a5b      	lsrs	r3, r3, #9
 800a17a:	4413      	add	r3, r2
 800a17c:	4619      	mov	r1, r3
 800a17e:	6938      	ldr	r0, [r7, #16]
 800a180:	f7ff fefe 	bl	8009f80 <move_window>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d152      	bne.n	800a230 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	4413      	add	r3, r2
 800a194:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a198:	021b      	lsls	r3, r3, #8
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <get_fat+0xba>
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	091b      	lsrs	r3, r3, #4
 800a1ae:	e002      	b.n	800a1b6 <get_fat+0xc0>
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1b6:	617b      	str	r3, [r7, #20]
			break;
 800a1b8:	e03f      	b.n	800a23a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	6a1a      	ldr	r2, [r3, #32]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	0a1b      	lsrs	r3, r3, #8
 800a1c2:	4413      	add	r3, r2
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6938      	ldr	r0, [r7, #16]
 800a1c8:	f7ff feda 	bl	8009f80 <move_window>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d130      	bne.n	800a234 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a1e0:	4413      	add	r3, r2
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7ff fc1c 	bl	8009a20 <ld_word>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	617b      	str	r3, [r7, #20]
			break;
 800a1ec:	e025      	b.n	800a23a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	6a1a      	ldr	r2, [r3, #32]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	09db      	lsrs	r3, r3, #7
 800a1f6:	4413      	add	r3, r2
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6938      	ldr	r0, [r7, #16]
 800a1fc:	f7ff fec0 	bl	8009f80 <move_window>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d118      	bne.n	800a238 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a214:	4413      	add	r3, r2
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff fc1a 	bl	8009a50 <ld_dword>
 800a21c:	4603      	mov	r3, r0
 800a21e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a222:	617b      	str	r3, [r7, #20]
			break;
 800a224:	e009      	b.n	800a23a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a226:	2301      	movs	r3, #1
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	e006      	b.n	800a23a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a22c:	bf00      	nop
 800a22e:	e004      	b.n	800a23a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a230:	bf00      	nop
 800a232:	e002      	b.n	800a23a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a234:	bf00      	nop
 800a236:	e000      	b.n	800a23a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a238:	bf00      	nop
		}
	}

	return val;
 800a23a:	697b      	ldr	r3, [r7, #20]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a244:	b590      	push	{r4, r7, lr}
 800a246:	b089      	sub	sp, #36	@ 0x24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a250:	2302      	movs	r3, #2
 800a252:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2b01      	cmp	r3, #1
 800a258:	f240 80d9 	bls.w	800a40e <put_fat+0x1ca>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	429a      	cmp	r2, r3
 800a264:	f080 80d3 	bcs.w	800a40e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	f000 8096 	beq.w	800a39e <put_fat+0x15a>
 800a272:	2b03      	cmp	r3, #3
 800a274:	f300 80cb 	bgt.w	800a40e <put_fat+0x1ca>
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d002      	beq.n	800a282 <put_fat+0x3e>
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d06e      	beq.n	800a35e <put_fat+0x11a>
 800a280:	e0c5      	b.n	800a40e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	61bb      	str	r3, [r7, #24]
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	085b      	lsrs	r3, r3, #1
 800a28a:	69ba      	ldr	r2, [r7, #24]
 800a28c:	4413      	add	r3, r2
 800a28e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6a1a      	ldr	r2, [r3, #32]
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	0a5b      	lsrs	r3, r3, #9
 800a298:	4413      	add	r3, r2
 800a29a:	4619      	mov	r1, r3
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fe6f 	bl	8009f80 <move_window>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2a6:	7ffb      	ldrb	r3, [r7, #31]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f040 80a9 	bne.w	800a400 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	1c59      	adds	r1, r3, #1
 800a2b8:	61b9      	str	r1, [r7, #24]
 800a2ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2be:	4413      	add	r3, r2
 800a2c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00d      	beq.n	800a2e8 <put_fat+0xa4>
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	b25b      	sxtb	r3, r3
 800a2d2:	f003 030f 	and.w	r3, r3, #15
 800a2d6:	b25a      	sxtb	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	011b      	lsls	r3, r3, #4
 800a2de:	b25b      	sxtb	r3, r3
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	b25b      	sxtb	r3, r3
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	e001      	b.n	800a2ec <put_fat+0xa8>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6a1a      	ldr	r2, [r3, #32]
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	0a5b      	lsrs	r3, r3, #9
 800a2fe:	4413      	add	r3, r2
 800a300:	4619      	mov	r1, r3
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7ff fe3c 	bl	8009f80 <move_window>
 800a308:	4603      	mov	r3, r0
 800a30a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a30c:	7ffb      	ldrb	r3, [r7, #31]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d178      	bne.n	800a404 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31e:	4413      	add	r3, r2
 800a320:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d003      	beq.n	800a334 <put_fat+0xf0>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	091b      	lsrs	r3, r3, #4
 800a330:	b2db      	uxtb	r3, r3
 800a332:	e00e      	b.n	800a352 <put_fat+0x10e>
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	b25b      	sxtb	r3, r3
 800a33a:	f023 030f 	bic.w	r3, r3, #15
 800a33e:	b25a      	sxtb	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	0a1b      	lsrs	r3, r3, #8
 800a344:	b25b      	sxtb	r3, r3
 800a346:	f003 030f 	and.w	r3, r3, #15
 800a34a:	b25b      	sxtb	r3, r3
 800a34c:	4313      	orrs	r3, r2
 800a34e:	b25b      	sxtb	r3, r3
 800a350:	b2db      	uxtb	r3, r3
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	70da      	strb	r2, [r3, #3]
			break;
 800a35c:	e057      	b.n	800a40e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6a1a      	ldr	r2, [r3, #32]
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	0a1b      	lsrs	r3, r3, #8
 800a366:	4413      	add	r3, r2
 800a368:	4619      	mov	r1, r3
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f7ff fe08 	bl	8009f80 <move_window>
 800a370:	4603      	mov	r3, r0
 800a372:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a374:	7ffb      	ldrb	r3, [r7, #31]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d146      	bne.n	800a408 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a388:	4413      	add	r3, r2
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	b292      	uxth	r2, r2
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f7ff fb80 	bl	8009a96 <st_word>
			fs->wflag = 1;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2201      	movs	r2, #1
 800a39a:	70da      	strb	r2, [r3, #3]
			break;
 800a39c:	e037      	b.n	800a40e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6a1a      	ldr	r2, [r3, #32]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	09db      	lsrs	r3, r3, #7
 800a3a6:	4413      	add	r3, r2
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7ff fde8 	bl	8009f80 <move_window>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3b4:	7ffb      	ldrb	r3, [r7, #31]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d128      	bne.n	800a40c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a3ce:	4413      	add	r3, r2
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff fb3d 	bl	8009a50 <ld_dword>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a3dc:	4323      	orrs	r3, r4
 800a3de:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a3ee:	4413      	add	r3, r2
 800a3f0:	6879      	ldr	r1, [r7, #4]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff fb6a 	bl	8009acc <st_dword>
			fs->wflag = 1;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	70da      	strb	r2, [r3, #3]
			break;
 800a3fe:	e006      	b.n	800a40e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a400:	bf00      	nop
 800a402:	e004      	b.n	800a40e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a404:	bf00      	nop
 800a406:	e002      	b.n	800a40e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a408:	bf00      	nop
 800a40a:	e000      	b.n	800a40e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a40c:	bf00      	nop
		}
	}
	return res;
 800a40e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3724      	adds	r7, #36	@ 0x24
 800a414:	46bd      	mov	sp, r7
 800a416:	bd90      	pop	{r4, r7, pc}

0800a418 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d904      	bls.n	800a43e <remove_chain+0x26>
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d301      	bcc.n	800a442 <remove_chain+0x2a>
 800a43e:	2302      	movs	r3, #2
 800a440:	e04b      	b.n	800a4da <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00c      	beq.n	800a462 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a448:	f04f 32ff 	mov.w	r2, #4294967295
 800a44c:	6879      	ldr	r1, [r7, #4]
 800a44e:	69b8      	ldr	r0, [r7, #24]
 800a450:	f7ff fef8 	bl	800a244 <put_fat>
 800a454:	4603      	mov	r3, r0
 800a456:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a458:	7ffb      	ldrb	r3, [r7, #31]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <remove_chain+0x4a>
 800a45e:	7ffb      	ldrb	r3, [r7, #31]
 800a460:	e03b      	b.n	800a4da <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a462:	68b9      	ldr	r1, [r7, #8]
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f7ff fe46 	bl	800a0f6 <get_fat>
 800a46a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d031      	beq.n	800a4d6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d101      	bne.n	800a47c <remove_chain+0x64>
 800a478:	2302      	movs	r3, #2
 800a47a:	e02e      	b.n	800a4da <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a482:	d101      	bne.n	800a488 <remove_chain+0x70>
 800a484:	2301      	movs	r3, #1
 800a486:	e028      	b.n	800a4da <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a488:	2200      	movs	r2, #0
 800a48a:	68b9      	ldr	r1, [r7, #8]
 800a48c:	69b8      	ldr	r0, [r7, #24]
 800a48e:	f7ff fed9 	bl	800a244 <put_fat>
 800a492:	4603      	mov	r3, r0
 800a494:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a496:	7ffb      	ldrb	r3, [r7, #31]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <remove_chain+0x88>
 800a49c:	7ffb      	ldrb	r3, [r7, #31]
 800a49e:	e01c      	b.n	800a4da <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	691a      	ldr	r2, [r3, #16]
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	3b02      	subs	r3, #2
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d20b      	bcs.n	800a4c6 <remove_chain+0xae>
			fs->free_clst++;
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	1c5a      	adds	r2, r3, #1
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	791b      	ldrb	r3, [r3, #4]
 800a4bc:	f043 0301 	orr.w	r3, r3, #1
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d3c6      	bcc.n	800a462 <remove_chain+0x4a>
 800a4d4:	e000      	b.n	800a4d8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a4d6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3720      	adds	r7, #32
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b088      	sub	sp, #32
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10d      	bne.n	800a514 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d004      	beq.n	800a50e <create_chain+0x2c>
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	69ba      	ldr	r2, [r7, #24]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d31b      	bcc.n	800a546 <create_chain+0x64>
 800a50e:	2301      	movs	r3, #1
 800a510:	61bb      	str	r3, [r7, #24]
 800a512:	e018      	b.n	800a546 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a514:	6839      	ldr	r1, [r7, #0]
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff fded 	bl	800a0f6 <get_fat>
 800a51c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d801      	bhi.n	800a528 <create_chain+0x46>
 800a524:	2301      	movs	r3, #1
 800a526:	e070      	b.n	800a60a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52e:	d101      	bne.n	800a534 <create_chain+0x52>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	e06a      	b.n	800a60a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d201      	bcs.n	800a542 <create_chain+0x60>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	e063      	b.n	800a60a <create_chain+0x128>
		scl = clst;
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	3301      	adds	r3, #1
 800a54e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	695b      	ldr	r3, [r3, #20]
 800a554:	69fa      	ldr	r2, [r7, #28]
 800a556:	429a      	cmp	r2, r3
 800a558:	d307      	bcc.n	800a56a <create_chain+0x88>
				ncl = 2;
 800a55a:	2302      	movs	r3, #2
 800a55c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a55e:	69fa      	ldr	r2, [r7, #28]
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	429a      	cmp	r2, r3
 800a564:	d901      	bls.n	800a56a <create_chain+0x88>
 800a566:	2300      	movs	r3, #0
 800a568:	e04f      	b.n	800a60a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a56a:	69f9      	ldr	r1, [r7, #28]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7ff fdc2 	bl	800a0f6 <get_fat>
 800a572:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00e      	beq.n	800a598 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d003      	beq.n	800a588 <create_chain+0xa6>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a586:	d101      	bne.n	800a58c <create_chain+0xaa>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	e03e      	b.n	800a60a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a58c:	69fa      	ldr	r2, [r7, #28]
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	429a      	cmp	r2, r3
 800a592:	d1da      	bne.n	800a54a <create_chain+0x68>
 800a594:	2300      	movs	r3, #0
 800a596:	e038      	b.n	800a60a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a598:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a59a:	f04f 32ff 	mov.w	r2, #4294967295
 800a59e:	69f9      	ldr	r1, [r7, #28]
 800a5a0:	6938      	ldr	r0, [r7, #16]
 800a5a2:	f7ff fe4f 	bl	800a244 <put_fat>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a5aa:	7dfb      	ldrb	r3, [r7, #23]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d109      	bne.n	800a5c4 <create_chain+0xe2>
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d006      	beq.n	800a5c4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a5b6:	69fa      	ldr	r2, [r7, #28]
 800a5b8:	6839      	ldr	r1, [r7, #0]
 800a5ba:	6938      	ldr	r0, [r7, #16]
 800a5bc:	f7ff fe42 	bl	800a244 <put_fat>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a5c4:	7dfb      	ldrb	r3, [r7, #23]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d116      	bne.n	800a5f8 <create_chain+0x116>
		fs->last_clst = ncl;
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	69fa      	ldr	r2, [r7, #28]
 800a5ce:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	691a      	ldr	r2, [r3, #16]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	3b02      	subs	r3, #2
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d804      	bhi.n	800a5e8 <create_chain+0x106>
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	1e5a      	subs	r2, r3, #1
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	791b      	ldrb	r3, [r3, #4]
 800a5ec:	f043 0301 	orr.w	r3, r3, #1
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	711a      	strb	r2, [r3, #4]
 800a5f6:	e007      	b.n	800a608 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d102      	bne.n	800a604 <create_chain+0x122>
 800a5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a602:	e000      	b.n	800a606 <create_chain+0x124>
 800a604:	2301      	movs	r3, #1
 800a606:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a608:	69fb      	ldr	r3, [r7, #28]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3720      	adds	r7, #32
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a612:	b480      	push	{r7}
 800a614:	b087      	sub	sp, #28
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a626:	3304      	adds	r3, #4
 800a628:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	0a5b      	lsrs	r3, r3, #9
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	8952      	ldrh	r2, [r2, #10]
 800a632:	fbb3 f3f2 	udiv	r3, r3, r2
 800a636:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	1d1a      	adds	r2, r3, #4
 800a63c:	613a      	str	r2, [r7, #16]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <clmt_clust+0x3a>
 800a648:	2300      	movs	r3, #0
 800a64a:	e010      	b.n	800a66e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	429a      	cmp	r2, r3
 800a652:	d307      	bcc.n	800a664 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	3304      	adds	r3, #4
 800a660:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a662:	e7e9      	b.n	800a638 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a664:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	4413      	add	r3, r2
}
 800a66e:	4618      	mov	r0, r3
 800a670:	371c      	adds	r7, #28
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b086      	sub	sp, #24
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a690:	d204      	bcs.n	800a69c <dir_sdi+0x22>
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	f003 031f 	and.w	r3, r3, #31
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a69c:	2302      	movs	r3, #2
 800a69e:	e063      	b.n	800a768 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d106      	bne.n	800a6c0 <dir_sdi+0x46>
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d902      	bls.n	800a6c0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6be:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10c      	bne.n	800a6e0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	095b      	lsrs	r3, r3, #5
 800a6ca:	693a      	ldr	r2, [r7, #16]
 800a6cc:	8912      	ldrh	r2, [r2, #8]
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d301      	bcc.n	800a6d6 <dir_sdi+0x5c>
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	e048      	b.n	800a768 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	61da      	str	r2, [r3, #28]
 800a6de:	e029      	b.n	800a734 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	895b      	ldrh	r3, [r3, #10]
 800a6e4:	025b      	lsls	r3, r3, #9
 800a6e6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a6e8:	e019      	b.n	800a71e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6979      	ldr	r1, [r7, #20]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff fd01 	bl	800a0f6 <get_fat>
 800a6f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fc:	d101      	bne.n	800a702 <dir_sdi+0x88>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e032      	b.n	800a768 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d904      	bls.n	800a712 <dir_sdi+0x98>
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d301      	bcc.n	800a716 <dir_sdi+0x9c>
 800a712:	2302      	movs	r3, #2
 800a714:	e028      	b.n	800a768 <dir_sdi+0xee>
			ofs -= csz;
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	429a      	cmp	r2, r3
 800a724:	d2e1      	bcs.n	800a6ea <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a726:	6979      	ldr	r1, [r7, #20]
 800a728:	6938      	ldr	r0, [r7, #16]
 800a72a:	f7ff fcc5 	bl	800a0b8 <clust2sect>
 800a72e:	4602      	mov	r2, r0
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <dir_sdi+0xcc>
 800a742:	2302      	movs	r3, #2
 800a744:	e010      	b.n	800a768 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	69da      	ldr	r2, [r3, #28]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	0a5b      	lsrs	r3, r3, #9
 800a74e:	441a      	add	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a760:	441a      	add	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3718      	adds	r7, #24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	3320      	adds	r3, #32
 800a786:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	69db      	ldr	r3, [r3, #28]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <dir_next+0x28>
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a796:	d301      	bcc.n	800a79c <dir_next+0x2c>
 800a798:	2304      	movs	r3, #4
 800a79a:	e0aa      	b.n	800a8f2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f040 8098 	bne.w	800a8d8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10b      	bne.n	800a7d2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	095b      	lsrs	r3, r3, #5
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	8912      	ldrh	r2, [r2, #8]
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	f0c0 8088 	bcc.w	800a8d8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	61da      	str	r2, [r3, #28]
 800a7ce:	2304      	movs	r3, #4
 800a7d0:	e08f      	b.n	800a8f2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	0a5b      	lsrs	r3, r3, #9
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	8952      	ldrh	r2, [r2, #10]
 800a7da:	3a01      	subs	r2, #1
 800a7dc:	4013      	ands	r3, r2
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d17a      	bne.n	800a8d8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	4610      	mov	r0, r2
 800a7ec:	f7ff fc83 	bl	800a0f6 <get_fat>
 800a7f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d801      	bhi.n	800a7fc <dir_next+0x8c>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e07a      	b.n	800a8f2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a802:	d101      	bne.n	800a808 <dir_next+0x98>
 800a804:	2301      	movs	r3, #1
 800a806:	e074      	b.n	800a8f2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d358      	bcc.n	800a8c4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d104      	bne.n	800a822 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	61da      	str	r2, [r3, #28]
 800a81e:	2304      	movs	r3, #4
 800a820:	e067      	b.n	800a8f2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	4619      	mov	r1, r3
 800a82a:	4610      	mov	r0, r2
 800a82c:	f7ff fe59 	bl	800a4e2 <create_chain>
 800a830:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <dir_next+0xcc>
 800a838:	2307      	movs	r3, #7
 800a83a:	e05a      	b.n	800a8f2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d101      	bne.n	800a846 <dir_next+0xd6>
 800a842:	2302      	movs	r3, #2
 800a844:	e055      	b.n	800a8f2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d101      	bne.n	800a852 <dir_next+0xe2>
 800a84e:	2301      	movs	r3, #1
 800a850:	e04f      	b.n	800a8f2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f7ff fb50 	bl	8009ef8 <sync_window>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <dir_next+0xf2>
 800a85e:	2301      	movs	r3, #1
 800a860:	e047      	b.n	800a8f2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3330      	adds	r3, #48	@ 0x30
 800a866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a86a:	2100      	movs	r1, #0
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7ff f97a 	bl	8009b66 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a872:	2300      	movs	r3, #0
 800a874:	613b      	str	r3, [r7, #16]
 800a876:	6979      	ldr	r1, [r7, #20]
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f7ff fc1d 	bl	800a0b8 <clust2sect>
 800a87e:	4602      	mov	r2, r0
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a884:	e012      	b.n	800a8ac <dir_next+0x13c>
						fs->wflag = 1;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2201      	movs	r2, #1
 800a88a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f7ff fb33 	bl	8009ef8 <sync_window>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <dir_next+0x12c>
 800a898:	2301      	movs	r3, #1
 800a89a:	e02a      	b.n	800a8f2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	613b      	str	r3, [r7, #16]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	895b      	ldrh	r3, [r3, #10]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d3e6      	bcc.n	800a886 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	1ad2      	subs	r2, r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a8ca:	6979      	ldr	r1, [r7, #20]
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f7ff fbf3 	bl	800a0b8 <clust2sect>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ea:	441a      	add	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b086      	sub	sp, #24
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a90a:	2100      	movs	r1, #0
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff feb4 	bl	800a67a <dir_sdi>
 800a912:	4603      	mov	r3, r0
 800a914:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a916:	7dfb      	ldrb	r3, [r7, #23]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d12b      	bne.n	800a974 <dir_alloc+0x7a>
		n = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	4619      	mov	r1, r3
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f7ff fb2a 	bl	8009f80 <move_window>
 800a92c:	4603      	mov	r3, r0
 800a92e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a930:	7dfb      	ldrb	r3, [r7, #23]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d11d      	bne.n	800a972 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2be5      	cmp	r3, #229	@ 0xe5
 800a93e:	d004      	beq.n	800a94a <dir_alloc+0x50>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d107      	bne.n	800a95a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	3301      	adds	r3, #1
 800a94e:	613b      	str	r3, [r7, #16]
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	429a      	cmp	r2, r3
 800a956:	d102      	bne.n	800a95e <dir_alloc+0x64>
 800a958:	e00c      	b.n	800a974 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a95a:	2300      	movs	r3, #0
 800a95c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a95e:	2101      	movs	r1, #1
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7ff ff05 	bl	800a770 <dir_next>
 800a966:	4603      	mov	r3, r0
 800a968:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d0d7      	beq.n	800a920 <dir_alloc+0x26>
 800a970:	e000      	b.n	800a974 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a972:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	2b04      	cmp	r3, #4
 800a978:	d101      	bne.n	800a97e <dir_alloc+0x84>
 800a97a:	2307      	movs	r3, #7
 800a97c:	75fb      	strb	r3, [r7, #23]
	return res;
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3718      	adds	r7, #24
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	331a      	adds	r3, #26
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff f842 	bl	8009a20 <ld_word>
 800a99c:	4603      	mov	r3, r0
 800a99e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d109      	bne.n	800a9bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	3314      	adds	r3, #20
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7ff f837 	bl	8009a20 <ld_word>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	041b      	lsls	r3, r3, #16
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b084      	sub	sp, #16
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	60f8      	str	r0, [r7, #12]
 800a9ce:	60b9      	str	r1, [r7, #8]
 800a9d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	331a      	adds	r3, #26
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	b292      	uxth	r2, r2
 800a9da:	4611      	mov	r1, r2
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7ff f85a 	bl	8009a96 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	d109      	bne.n	800a9fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f103 0214 	add.w	r2, r3, #20
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	0c1b      	lsrs	r3, r3, #16
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	f7ff f84c 	bl	8009a96 <st_word>
	}
}
 800a9fe:	bf00      	nop
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b086      	sub	sp, #24
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800aa10:	2304      	movs	r3, #4
 800aa12:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800aa1a:	e03c      	b.n	800aa96 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	4619      	mov	r1, r3
 800aa22:	6938      	ldr	r0, [r7, #16]
 800aa24:	f7ff faac 	bl	8009f80 <move_window>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa2c:	7dfb      	ldrb	r3, [r7, #23]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d136      	bne.n	800aaa0 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d102      	bne.n	800aa46 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800aa40:	2304      	movs	r3, #4
 800aa42:	75fb      	strb	r3, [r7, #23]
 800aa44:	e031      	b.n	800aaaa <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	330b      	adds	r3, #11
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa52:	73bb      	strb	r3, [r7, #14]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	7bba      	ldrb	r2, [r7, #14]
 800aa58:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
 800aa5c:	2be5      	cmp	r3, #229	@ 0xe5
 800aa5e:	d011      	beq.n	800aa84 <dir_read+0x7e>
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
 800aa62:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa64:	d00e      	beq.n	800aa84 <dir_read+0x7e>
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	2b0f      	cmp	r3, #15
 800aa6a:	d00b      	beq.n	800aa84 <dir_read+0x7e>
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	f023 0320 	bic.w	r3, r3, #32
 800aa72:	2b08      	cmp	r3, #8
 800aa74:	bf0c      	ite	eq
 800aa76:	2301      	moveq	r3, #1
 800aa78:	2300      	movne	r3, #0
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d00f      	beq.n	800aaa4 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800aa84:	2100      	movs	r1, #0
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff fe72 	bl	800a770 <dir_next>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa90:	7dfb      	ldrb	r3, [r7, #23]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d108      	bne.n	800aaa8 <dir_read+0xa2>
	while (dp->sect) {
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1be      	bne.n	800aa1c <dir_read+0x16>
 800aa9e:	e004      	b.n	800aaaa <dir_read+0xa4>
		if (res != FR_OK) break;
 800aaa0:	bf00      	nop
 800aaa2:	e002      	b.n	800aaaa <dir_read+0xa4>
				break;
 800aaa4:	bf00      	nop
 800aaa6:	e000      	b.n	800aaaa <dir_read+0xa4>
		if (res != FR_OK) break;
 800aaa8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <dir_read+0xb0>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	61da      	str	r2, [r3, #28]
	return res;
 800aab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aace:	2100      	movs	r1, #0
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7ff fdd2 	bl	800a67a <dir_sdi>
 800aad6:	4603      	mov	r3, r0
 800aad8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aada:	7dfb      	ldrb	r3, [r7, #23]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <dir_find+0x24>
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
 800aae2:	e03e      	b.n	800ab62 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	4619      	mov	r1, r3
 800aaea:	6938      	ldr	r0, [r7, #16]
 800aaec:	f7ff fa48 	bl	8009f80 <move_window>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d12f      	bne.n	800ab5a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d102      	bne.n	800ab0e <dir_find+0x4e>
 800ab08:	2304      	movs	r3, #4
 800ab0a:	75fb      	strb	r3, [r7, #23]
 800ab0c:	e028      	b.n	800ab60 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a1b      	ldr	r3, [r3, #32]
 800ab12:	330b      	adds	r3, #11
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	330b      	adds	r3, #11
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	f003 0308 	and.w	r3, r3, #8
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10a      	bne.n	800ab46 <dir_find+0x86>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a18      	ldr	r0, [r3, #32]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3324      	adds	r3, #36	@ 0x24
 800ab38:	220b      	movs	r2, #11
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	f7ff f82e 	bl	8009b9c <mem_cmp>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00b      	beq.n	800ab5e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ab46:	2100      	movs	r1, #0
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff fe11 	bl	800a770 <dir_next>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ab52:	7dfb      	ldrb	r3, [r7, #23]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d0c5      	beq.n	800aae4 <dir_find+0x24>
 800ab58:	e002      	b.n	800ab60 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ab5a:	bf00      	nop
 800ab5c:	e000      	b.n	800ab60 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ab5e:	bf00      	nop

	return res;
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3718      	adds	r7, #24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ab78:	2101      	movs	r1, #1
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff febd 	bl	800a8fa <dir_alloc>
 800ab80:	4603      	mov	r3, r0
 800ab82:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d11c      	bne.n	800abc4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	68b8      	ldr	r0, [r7, #8]
 800ab92:	f7ff f9f5 	bl	8009f80 <move_window>
 800ab96:	4603      	mov	r3, r0
 800ab98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d111      	bne.n	800abc4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	2220      	movs	r2, #32
 800aba6:	2100      	movs	r1, #0
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fe ffdc 	bl	8009b66 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a18      	ldr	r0, [r3, #32]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3324      	adds	r3, #36	@ 0x24
 800abb6:	220b      	movs	r2, #11
 800abb8:	4619      	mov	r1, r3
 800abba:	f7fe ffb3 	bl	8009b24 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2201      	movs	r2, #1
 800abc2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	69db      	ldr	r3, [r3, #28]
 800abe0:	4619      	mov	r1, r3
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f7ff f9cc 	bl	8009f80 <move_window>
 800abe8:	4603      	mov	r3, r0
 800abea:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800abec:	7afb      	ldrb	r3, [r7, #11]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d106      	bne.n	800ac00 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	22e5      	movs	r2, #229	@ 0xe5
 800abf8:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2201      	movs	r2, #1
 800abfe:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800ac00:	7afb      	ldrb	r3, [r7, #11]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
	...

0800ac0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3324      	adds	r3, #36	@ 0x24
 800ac20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ac22:	220b      	movs	r2, #11
 800ac24:	2120      	movs	r1, #32
 800ac26:	68b8      	ldr	r0, [r7, #8]
 800ac28:	f7fe ff9d 	bl	8009b66 <mem_set>
	si = i = 0; ni = 8;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	613b      	str	r3, [r7, #16]
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	61fb      	str	r3, [r7, #28]
 800ac34:	2308      	movs	r3, #8
 800ac36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	61fa      	str	r2, [r7, #28]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac46:	7efb      	ldrb	r3, [r7, #27]
 800ac48:	2b20      	cmp	r3, #32
 800ac4a:	d94e      	bls.n	800acea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ac4c:	7efb      	ldrb	r3, [r7, #27]
 800ac4e:	2b2f      	cmp	r3, #47	@ 0x2f
 800ac50:	d006      	beq.n	800ac60 <create_name+0x54>
 800ac52:	7efb      	ldrb	r3, [r7, #27]
 800ac54:	2b5c      	cmp	r3, #92	@ 0x5c
 800ac56:	d110      	bne.n	800ac7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ac58:	e002      	b.n	800ac60 <create_name+0x54>
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	61fb      	str	r3, [r7, #28]
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	4413      	add	r3, r2
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b2f      	cmp	r3, #47	@ 0x2f
 800ac6a:	d0f6      	beq.n	800ac5a <create_name+0x4e>
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	4413      	add	r3, r2
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	2b5c      	cmp	r3, #92	@ 0x5c
 800ac76:	d0f0      	beq.n	800ac5a <create_name+0x4e>
			break;
 800ac78:	e038      	b.n	800acec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ac7a:	7efb      	ldrb	r3, [r7, #27]
 800ac7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac7e:	d003      	beq.n	800ac88 <create_name+0x7c>
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d30c      	bcc.n	800aca2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2b0b      	cmp	r3, #11
 800ac8c:	d002      	beq.n	800ac94 <create_name+0x88>
 800ac8e:	7efb      	ldrb	r3, [r7, #27]
 800ac90:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac92:	d001      	beq.n	800ac98 <create_name+0x8c>
 800ac94:	2306      	movs	r3, #6
 800ac96:	e044      	b.n	800ad22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ac98:	2308      	movs	r3, #8
 800ac9a:	613b      	str	r3, [r7, #16]
 800ac9c:	230b      	movs	r3, #11
 800ac9e:	617b      	str	r3, [r7, #20]
			continue;
 800aca0:	e022      	b.n	800ace8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800aca2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	da04      	bge.n	800acb4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800acaa:	7efb      	ldrb	r3, [r7, #27]
 800acac:	3b80      	subs	r3, #128	@ 0x80
 800acae:	4a1f      	ldr	r2, [pc, #124]	@ (800ad2c <create_name+0x120>)
 800acb0:	5cd3      	ldrb	r3, [r2, r3]
 800acb2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800acb4:	7efb      	ldrb	r3, [r7, #27]
 800acb6:	4619      	mov	r1, r3
 800acb8:	481d      	ldr	r0, [pc, #116]	@ (800ad30 <create_name+0x124>)
 800acba:	f7fe ff96 	bl	8009bea <chk_chr>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <create_name+0xbc>
 800acc4:	2306      	movs	r3, #6
 800acc6:	e02c      	b.n	800ad22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800acc8:	7efb      	ldrb	r3, [r7, #27]
 800acca:	2b60      	cmp	r3, #96	@ 0x60
 800accc:	d905      	bls.n	800acda <create_name+0xce>
 800acce:	7efb      	ldrb	r3, [r7, #27]
 800acd0:	2b7a      	cmp	r3, #122	@ 0x7a
 800acd2:	d802      	bhi.n	800acda <create_name+0xce>
 800acd4:	7efb      	ldrb	r3, [r7, #27]
 800acd6:	3b20      	subs	r3, #32
 800acd8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	1c5a      	adds	r2, r3, #1
 800acde:	613a      	str	r2, [r7, #16]
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	4413      	add	r3, r2
 800ace4:	7efa      	ldrb	r2, [r7, #27]
 800ace6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ace8:	e7a6      	b.n	800ac38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800acea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	441a      	add	r2, r3
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d101      	bne.n	800ad00 <create_name+0xf4>
 800acfc:	2306      	movs	r3, #6
 800acfe:	e010      	b.n	800ad22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2be5      	cmp	r3, #229	@ 0xe5
 800ad06:	d102      	bne.n	800ad0e <create_name+0x102>
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2205      	movs	r2, #5
 800ad0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ad0e:	7efb      	ldrb	r3, [r7, #27]
 800ad10:	2b20      	cmp	r3, #32
 800ad12:	d801      	bhi.n	800ad18 <create_name+0x10c>
 800ad14:	2204      	movs	r2, #4
 800ad16:	e000      	b.n	800ad1a <create_name+0x10e>
 800ad18:	2200      	movs	r2, #0
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	330b      	adds	r3, #11
 800ad1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ad20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3720      	adds	r7, #32
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	0800d95c 	.word	0x0800d95c
 800ad30:	0800cb84 	.word	0x0800cb84

0800ad34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ad48:	e002      	b.n	800ad50 <follow_path+0x1c>
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b2f      	cmp	r3, #47	@ 0x2f
 800ad56:	d0f8      	beq.n	800ad4a <follow_path+0x16>
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad5e:	d0f4      	beq.n	800ad4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	2200      	movs	r2, #0
 800ad64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b1f      	cmp	r3, #31
 800ad6c:	d80a      	bhi.n	800ad84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2280      	movs	r2, #128	@ 0x80
 800ad72:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ad76:	2100      	movs	r1, #0
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff fc7e 	bl	800a67a <dir_sdi>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	75fb      	strb	r3, [r7, #23]
 800ad82:	e043      	b.n	800ae0c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad84:	463b      	mov	r3, r7
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7ff ff3f 	bl	800ac0c <create_name>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d134      	bne.n	800ae02 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff fe91 	bl	800aac0 <dir_find>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ada8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800adaa:	7dfb      	ldrb	r3, [r7, #23]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00a      	beq.n	800adc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	2b04      	cmp	r3, #4
 800adb4:	d127      	bne.n	800ae06 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800adb6:	7afb      	ldrb	r3, [r7, #11]
 800adb8:	f003 0304 	and.w	r3, r3, #4
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d122      	bne.n	800ae06 <follow_path+0xd2>
 800adc0:	2305      	movs	r3, #5
 800adc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800adc4:	e01f      	b.n	800ae06 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800adc6:	7afb      	ldrb	r3, [r7, #11]
 800adc8:	f003 0304 	and.w	r3, r3, #4
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d11c      	bne.n	800ae0a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	799b      	ldrb	r3, [r3, #6]
 800add4:	f003 0310 	and.w	r3, r3, #16
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800addc:	2305      	movs	r3, #5
 800adde:	75fb      	strb	r3, [r7, #23]
 800ade0:	e014      	b.n	800ae0c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	695b      	ldr	r3, [r3, #20]
 800adec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf0:	4413      	add	r3, r2
 800adf2:	4619      	mov	r1, r3
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7ff fdc7 	bl	800a988 <ld_clust>
 800adfa:	4602      	mov	r2, r0
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae00:	e7c0      	b.n	800ad84 <follow_path+0x50>
			if (res != FR_OK) break;
 800ae02:	bf00      	nop
 800ae04:	e002      	b.n	800ae0c <follow_path+0xd8>
				break;
 800ae06:	bf00      	nop
 800ae08:	e000      	b.n	800ae0c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae0a:	bf00      	nop
			}
		}
	}

	return res;
 800ae0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b087      	sub	sp, #28
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ae1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d031      	beq.n	800ae90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	617b      	str	r3, [r7, #20]
 800ae32:	e002      	b.n	800ae3a <get_ldnumber+0x24>
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	3301      	adds	r3, #1
 800ae38:	617b      	str	r3, [r7, #20]
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	2b20      	cmp	r3, #32
 800ae40:	d903      	bls.n	800ae4a <get_ldnumber+0x34>
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b3a      	cmp	r3, #58	@ 0x3a
 800ae48:	d1f4      	bne.n	800ae34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	2b3a      	cmp	r3, #58	@ 0x3a
 800ae50:	d11c      	bne.n	800ae8c <get_ldnumber+0x76>
			tp = *path;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	60fa      	str	r2, [r7, #12]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	3b30      	subs	r3, #48	@ 0x30
 800ae62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2b09      	cmp	r3, #9
 800ae68:	d80e      	bhi.n	800ae88 <get_ldnumber+0x72>
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d10a      	bne.n	800ae88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d107      	bne.n	800ae88 <get_ldnumber+0x72>
					vol = (int)i;
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	617b      	str	r3, [r7, #20]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	e002      	b.n	800ae92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ae90:	693b      	ldr	r3, [r7, #16]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	371c      	adds	r7, #28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
	...

0800aea0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	70da      	strb	r2, [r3, #3]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff f860 	bl	8009f80 <move_window>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <check_fs+0x2a>
 800aec6:	2304      	movs	r3, #4
 800aec8:	e038      	b.n	800af3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3330      	adds	r3, #48	@ 0x30
 800aece:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fe fda4 	bl	8009a20 <ld_word>
 800aed8:	4603      	mov	r3, r0
 800aeda:	461a      	mov	r2, r3
 800aedc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d001      	beq.n	800aee8 <check_fs+0x48>
 800aee4:	2303      	movs	r3, #3
 800aee6:	e029      	b.n	800af3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aeee:	2be9      	cmp	r3, #233	@ 0xe9
 800aef0:	d009      	beq.n	800af06 <check_fs+0x66>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aef8:	2beb      	cmp	r3, #235	@ 0xeb
 800aefa:	d11e      	bne.n	800af3a <check_fs+0x9a>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800af02:	2b90      	cmp	r3, #144	@ 0x90
 800af04:	d119      	bne.n	800af3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	3330      	adds	r3, #48	@ 0x30
 800af0a:	3336      	adds	r3, #54	@ 0x36
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe fd9f 	bl	8009a50 <ld_dword>
 800af12:	4603      	mov	r3, r0
 800af14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800af18:	4a0a      	ldr	r2, [pc, #40]	@ (800af44 <check_fs+0xa4>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d101      	bne.n	800af22 <check_fs+0x82>
 800af1e:	2300      	movs	r3, #0
 800af20:	e00c      	b.n	800af3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3330      	adds	r3, #48	@ 0x30
 800af26:	3352      	adds	r3, #82	@ 0x52
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fe fd91 	bl	8009a50 <ld_dword>
 800af2e:	4603      	mov	r3, r0
 800af30:	4a05      	ldr	r2, [pc, #20]	@ (800af48 <check_fs+0xa8>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d101      	bne.n	800af3a <check_fs+0x9a>
 800af36:	2300      	movs	r3, #0
 800af38:	e000      	b.n	800af3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800af3a:	2302      	movs	r3, #2
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	00544146 	.word	0x00544146
 800af48:	33544146 	.word	0x33544146

0800af4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b096      	sub	sp, #88	@ 0x58
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	4613      	mov	r3, r2
 800af58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2200      	movs	r2, #0
 800af5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7ff ff58 	bl	800ae16 <get_ldnumber>
 800af66:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800af68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	da01      	bge.n	800af72 <find_volume+0x26>
 800af6e:	230b      	movs	r3, #11
 800af70:	e22d      	b.n	800b3ce <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800af72:	4aa1      	ldr	r2, [pc, #644]	@ (800b1f8 <find_volume+0x2ac>)
 800af74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800af7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <find_volume+0x3a>
 800af82:	230c      	movs	r3, #12
 800af84:	e223      	b.n	800b3ce <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800af8c:	79fb      	ldrb	r3, [r7, #7]
 800af8e:	f023 0301 	bic.w	r3, r3, #1
 800af92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800af94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d01a      	beq.n	800afd2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800af9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9e:	785b      	ldrb	r3, [r3, #1]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe fc9d 	bl	80098e0 <disk_status>
 800afa6:	4603      	mov	r3, r0
 800afa8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800afac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10c      	bne.n	800afd2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800afb8:	79fb      	ldrb	r3, [r7, #7]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d007      	beq.n	800afce <find_volume+0x82>
 800afbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800afc2:	f003 0304 	and.w	r3, r3, #4
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800afca:	230a      	movs	r3, #10
 800afcc:	e1ff      	b.n	800b3ce <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800afce:	2300      	movs	r3, #0
 800afd0:	e1fd      	b.n	800b3ce <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800afd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd4:	2200      	movs	r2, #0
 800afd6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800afd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afde:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800afe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe2:	785b      	ldrb	r3, [r3, #1]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7fe fc95 	bl	8009914 <disk_initialize>
 800afea:	4603      	mov	r3, r0
 800afec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aff0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aff4:	f003 0301 	and.w	r3, r3, #1
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800affc:	2303      	movs	r3, #3
 800affe:	e1e6      	b.n	800b3ce <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b000:	79fb      	ldrb	r3, [r7, #7]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d007      	beq.n	800b016 <find_volume+0xca>
 800b006:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b00a:	f003 0304 	and.w	r3, r3, #4
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b012:	230a      	movs	r3, #10
 800b014:	e1db      	b.n	800b3ce <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b016:	2300      	movs	r3, #0
 800b018:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b01a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b01c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b01e:	f7ff ff3f 	bl	800aea0 <check_fs>
 800b022:	4603      	mov	r3, r0
 800b024:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b028:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d149      	bne.n	800b0c4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b030:	2300      	movs	r3, #0
 800b032:	643b      	str	r3, [r7, #64]	@ 0x40
 800b034:	e01e      	b.n	800b074 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b038:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b03c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b03e:	011b      	lsls	r3, r3, #4
 800b040:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b044:	4413      	add	r3, r2
 800b046:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04a:	3304      	adds	r3, #4
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d006      	beq.n	800b060 <find_volume+0x114>
 800b052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b054:	3308      	adds	r3, #8
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe fcfa 	bl	8009a50 <ld_dword>
 800b05c:	4602      	mov	r2, r0
 800b05e:	e000      	b.n	800b062 <find_volume+0x116>
 800b060:	2200      	movs	r2, #0
 800b062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	3358      	adds	r3, #88	@ 0x58
 800b068:	443b      	add	r3, r7
 800b06a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b06e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b070:	3301      	adds	r3, #1
 800b072:	643b      	str	r3, [r7, #64]	@ 0x40
 800b074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b076:	2b03      	cmp	r3, #3
 800b078:	d9dd      	bls.n	800b036 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b07a:	2300      	movs	r3, #0
 800b07c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b07e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <find_volume+0x13e>
 800b084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b086:	3b01      	subs	r3, #1
 800b088:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b08a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	3358      	adds	r3, #88	@ 0x58
 800b090:	443b      	add	r3, r7
 800b092:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b096:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d005      	beq.n	800b0aa <find_volume+0x15e>
 800b09e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b0a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b0a2:	f7ff fefd 	bl	800aea0 <check_fs>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	e000      	b.n	800b0ac <find_volume+0x160>
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b0b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d905      	bls.n	800b0c4 <find_volume+0x178>
 800b0b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d9e2      	bls.n	800b08a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b0c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b0c8:	2b04      	cmp	r3, #4
 800b0ca:	d101      	bne.n	800b0d0 <find_volume+0x184>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e17e      	b.n	800b3ce <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b0d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d901      	bls.n	800b0dc <find_volume+0x190>
 800b0d8:	230d      	movs	r3, #13
 800b0da:	e178      	b.n	800b3ce <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0de:	3330      	adds	r3, #48	@ 0x30
 800b0e0:	330b      	adds	r3, #11
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7fe fc9c 	bl	8009a20 <ld_word>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0ee:	d001      	beq.n	800b0f4 <find_volume+0x1a8>
 800b0f0:	230d      	movs	r3, #13
 800b0f2:	e16c      	b.n	800b3ce <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f6:	3330      	adds	r3, #48	@ 0x30
 800b0f8:	3316      	adds	r3, #22
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fe fc90 	bl	8009a20 <ld_word>
 800b100:	4603      	mov	r3, r0
 800b102:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b106:	2b00      	cmp	r3, #0
 800b108:	d106      	bne.n	800b118 <find_volume+0x1cc>
 800b10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10c:	3330      	adds	r3, #48	@ 0x30
 800b10e:	3324      	adds	r3, #36	@ 0x24
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe fc9d 	bl	8009a50 <ld_dword>
 800b116:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b11c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b120:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b126:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b12a:	789b      	ldrb	r3, [r3, #2]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d005      	beq.n	800b13c <find_volume+0x1f0>
 800b130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b132:	789b      	ldrb	r3, [r3, #2]
 800b134:	2b02      	cmp	r3, #2
 800b136:	d001      	beq.n	800b13c <find_volume+0x1f0>
 800b138:	230d      	movs	r3, #13
 800b13a:	e148      	b.n	800b3ce <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13e:	789b      	ldrb	r3, [r3, #2]
 800b140:	461a      	mov	r2, r3
 800b142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b144:	fb02 f303 	mul.w	r3, r2, r3
 800b148:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b150:	461a      	mov	r2, r3
 800b152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b154:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b158:	895b      	ldrh	r3, [r3, #10]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d008      	beq.n	800b170 <find_volume+0x224>
 800b15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b160:	895b      	ldrh	r3, [r3, #10]
 800b162:	461a      	mov	r2, r3
 800b164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b166:	895b      	ldrh	r3, [r3, #10]
 800b168:	3b01      	subs	r3, #1
 800b16a:	4013      	ands	r3, r2
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <find_volume+0x228>
 800b170:	230d      	movs	r3, #13
 800b172:	e12c      	b.n	800b3ce <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b176:	3330      	adds	r3, #48	@ 0x30
 800b178:	3311      	adds	r3, #17
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe fc50 	bl	8009a20 <ld_word>
 800b180:	4603      	mov	r3, r0
 800b182:	461a      	mov	r2, r3
 800b184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b186:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18a:	891b      	ldrh	r3, [r3, #8]
 800b18c:	f003 030f 	and.w	r3, r3, #15
 800b190:	b29b      	uxth	r3, r3
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <find_volume+0x24e>
 800b196:	230d      	movs	r3, #13
 800b198:	e119      	b.n	800b3ce <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19c:	3330      	adds	r3, #48	@ 0x30
 800b19e:	3313      	adds	r3, #19
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fe fc3d 	bl	8009a20 <ld_word>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b1aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d106      	bne.n	800b1be <find_volume+0x272>
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b2:	3330      	adds	r3, #48	@ 0x30
 800b1b4:	3320      	adds	r3, #32
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fe fc4a 	bl	8009a50 <ld_dword>
 800b1bc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c0:	3330      	adds	r3, #48	@ 0x30
 800b1c2:	330e      	adds	r3, #14
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe fc2b 	bl	8009a20 <ld_word>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b1ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <find_volume+0x28c>
 800b1d4:	230d      	movs	r3, #13
 800b1d6:	e0fa      	b.n	800b3ce <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b1d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b1da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1dc:	4413      	add	r3, r2
 800b1de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1e0:	8912      	ldrh	r2, [r2, #8]
 800b1e2:	0912      	lsrs	r2, r2, #4
 800b1e4:	b292      	uxth	r2, r2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b1ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d204      	bcs.n	800b1fc <find_volume+0x2b0>
 800b1f2:	230d      	movs	r3, #13
 800b1f4:	e0eb      	b.n	800b3ce <find_volume+0x482>
 800b1f6:	bf00      	nop
 800b1f8:	200005a0 	.word	0x200005a0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b1fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b204:	8952      	ldrh	r2, [r2, #10]
 800b206:	fbb3 f3f2 	udiv	r3, r3, r2
 800b20a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <find_volume+0x2ca>
 800b212:	230d      	movs	r3, #13
 800b214:	e0db      	b.n	800b3ce <find_volume+0x482>
		fmt = FS_FAT32;
 800b216:	2303      	movs	r3, #3
 800b218:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b222:	4293      	cmp	r3, r2
 800b224:	d802      	bhi.n	800b22c <find_volume+0x2e0>
 800b226:	2302      	movs	r3, #2
 800b228:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b232:	4293      	cmp	r3, r2
 800b234:	d802      	bhi.n	800b23c <find_volume+0x2f0>
 800b236:	2301      	movs	r3, #1
 800b238:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23e:	1c9a      	adds	r2, r3, #2
 800b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b242:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b246:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b248:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b24a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b24c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b24e:	441a      	add	r2, r3
 800b250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b252:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b254:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b258:	441a      	add	r2, r3
 800b25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b25e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b262:	2b03      	cmp	r3, #3
 800b264:	d11e      	bne.n	800b2a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b268:	3330      	adds	r3, #48	@ 0x30
 800b26a:	332a      	adds	r3, #42	@ 0x2a
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7fe fbd7 	bl	8009a20 <ld_word>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <find_volume+0x330>
 800b278:	230d      	movs	r3, #13
 800b27a:	e0a8      	b.n	800b3ce <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27e:	891b      	ldrh	r3, [r3, #8]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <find_volume+0x33c>
 800b284:	230d      	movs	r3, #13
 800b286:	e0a2      	b.n	800b3ce <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28a:	3330      	adds	r3, #48	@ 0x30
 800b28c:	332c      	adds	r3, #44	@ 0x2c
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe fbde 	bl	8009a50 <ld_dword>
 800b294:	4602      	mov	r2, r0
 800b296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b298:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2a2:	e01f      	b.n	800b2e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a6:	891b      	ldrh	r3, [r3, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <find_volume+0x364>
 800b2ac:	230d      	movs	r3, #13
 800b2ae:	e08e      	b.n	800b3ce <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b2:	6a1a      	ldr	r2, [r3, #32]
 800b2b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2b6:	441a      	add	r2, r3
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ba:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b2bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d103      	bne.n	800b2cc <find_volume+0x380>
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	e00a      	b.n	800b2e2 <find_volume+0x396>
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ce:	695a      	ldr	r2, [r3, #20]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	005b      	lsls	r3, r3, #1
 800b2d4:	4413      	add	r3, r2
 800b2d6:	085a      	lsrs	r2, r3, #1
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2da:	695b      	ldr	r3, [r3, #20]
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b2e2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e6:	699a      	ldr	r2, [r3, #24]
 800b2e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2ea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b2ee:	0a5b      	lsrs	r3, r3, #9
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d201      	bcs.n	800b2f8 <find_volume+0x3ac>
 800b2f4:	230d      	movs	r3, #13
 800b2f6:	e06a      	b.n	800b3ce <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b2fe:	611a      	str	r2, [r3, #16]
 800b300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b302:	691a      	ldr	r2, [r3, #16]
 800b304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b306:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30a:	2280      	movs	r2, #128	@ 0x80
 800b30c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b30e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b312:	2b03      	cmp	r3, #3
 800b314:	d149      	bne.n	800b3aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b318:	3330      	adds	r3, #48	@ 0x30
 800b31a:	3330      	adds	r3, #48	@ 0x30
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fe fb7f 	bl	8009a20 <ld_word>
 800b322:	4603      	mov	r3, r0
 800b324:	2b01      	cmp	r3, #1
 800b326:	d140      	bne.n	800b3aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b32a:	3301      	adds	r3, #1
 800b32c:	4619      	mov	r1, r3
 800b32e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b330:	f7fe fe26 	bl	8009f80 <move_window>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d137      	bne.n	800b3aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33c:	2200      	movs	r2, #0
 800b33e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b342:	3330      	adds	r3, #48	@ 0x30
 800b344:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b348:	4618      	mov	r0, r3
 800b34a:	f7fe fb69 	bl	8009a20 <ld_word>
 800b34e:	4603      	mov	r3, r0
 800b350:	461a      	mov	r2, r3
 800b352:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b356:	429a      	cmp	r2, r3
 800b358:	d127      	bne.n	800b3aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35c:	3330      	adds	r3, #48	@ 0x30
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fb76 	bl	8009a50 <ld_dword>
 800b364:	4603      	mov	r3, r0
 800b366:	4a1c      	ldr	r2, [pc, #112]	@ (800b3d8 <find_volume+0x48c>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d11e      	bne.n	800b3aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36e:	3330      	adds	r3, #48	@ 0x30
 800b370:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b374:	4618      	mov	r0, r3
 800b376:	f7fe fb6b 	bl	8009a50 <ld_dword>
 800b37a:	4603      	mov	r3, r0
 800b37c:	4a17      	ldr	r2, [pc, #92]	@ (800b3dc <find_volume+0x490>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d113      	bne.n	800b3aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b384:	3330      	adds	r3, #48	@ 0x30
 800b386:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fe fb60 	bl	8009a50 <ld_dword>
 800b390:	4602      	mov	r2, r0
 800b392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b394:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b398:	3330      	adds	r3, #48	@ 0x30
 800b39a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fe fb56 	bl	8009a50 <ld_dword>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b3b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b3b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b3e0 <find_volume+0x494>)
 800b3b4:	881b      	ldrh	r3, [r3, #0]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	4b09      	ldr	r3, [pc, #36]	@ (800b3e0 <find_volume+0x494>)
 800b3bc:	801a      	strh	r2, [r3, #0]
 800b3be:	4b08      	ldr	r3, [pc, #32]	@ (800b3e0 <find_volume+0x494>)
 800b3c0:	881a      	ldrh	r2, [r3, #0]
 800b3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b3c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b3c8:	f7fe fd72 	bl	8009eb0 <clear_lock>
#endif
	return FR_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3758      	adds	r7, #88	@ 0x58
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	41615252 	.word	0x41615252
 800b3dc:	61417272 	.word	0x61417272
 800b3e0:	200005a4 	.word	0x200005a4

0800b3e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b3ee:	2309      	movs	r3, #9
 800b3f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d01c      	beq.n	800b432 <validate+0x4e>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d018      	beq.n	800b432 <validate+0x4e>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d013      	beq.n	800b432 <validate+0x4e>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	889a      	ldrh	r2, [r3, #4]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	88db      	ldrh	r3, [r3, #6]
 800b414:	429a      	cmp	r2, r3
 800b416:	d10c      	bne.n	800b432 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	785b      	ldrb	r3, [r3, #1]
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fe fa5e 	bl	80098e0 <disk_status>
 800b424:	4603      	mov	r3, r0
 800b426:	f003 0301 	and.w	r3, r3, #1
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <validate+0x4e>
			res = FR_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d102      	bne.n	800b43e <validate+0x5a>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	e000      	b.n	800b440 <validate+0x5c>
 800b43e:	2300      	movs	r3, #0
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	6013      	str	r3, [r2, #0]
	return res;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	4613      	mov	r3, r2
 800b45c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b462:	f107 0310 	add.w	r3, r7, #16
 800b466:	4618      	mov	r0, r3
 800b468:	f7ff fcd5 	bl	800ae16 <get_ldnumber>
 800b46c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	2b00      	cmp	r3, #0
 800b472:	da01      	bge.n	800b478 <f_mount+0x28>
 800b474:	230b      	movs	r3, #11
 800b476:	e02b      	b.n	800b4d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b478:	4a17      	ldr	r2, [pc, #92]	@ (800b4d8 <f_mount+0x88>)
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b480:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d005      	beq.n	800b494 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b488:	69b8      	ldr	r0, [r7, #24]
 800b48a:	f7fe fd11 	bl	8009eb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	2200      	movs	r2, #0
 800b492:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	490d      	ldr	r1, [pc, #52]	@ (800b4d8 <f_mount+0x88>)
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <f_mount+0x66>
 800b4b0:	79fb      	ldrb	r3, [r7, #7]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d001      	beq.n	800b4ba <f_mount+0x6a>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	e00a      	b.n	800b4d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b4ba:	f107 010c 	add.w	r1, r7, #12
 800b4be:	f107 0308 	add.w	r3, r7, #8
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff fd41 	bl	800af4c <find_volume>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b4ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3720      	adds	r7, #32
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	200005a0 	.word	0x200005a0

0800b4dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b098      	sub	sp, #96	@ 0x60
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d101      	bne.n	800b4f4 <f_open+0x18>
 800b4f0:	2309      	movs	r3, #9
 800b4f2:	e1a9      	b.n	800b848 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b4f4:	79fb      	ldrb	r3, [r7, #7]
 800b4f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b4fc:	79fa      	ldrb	r2, [r7, #7]
 800b4fe:	f107 0110 	add.w	r1, r7, #16
 800b502:	f107 0308 	add.w	r3, r7, #8
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff fd20 	bl	800af4c <find_volume>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b512:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b516:	2b00      	cmp	r3, #0
 800b518:	f040 818d 	bne.w	800b836 <f_open+0x35a>
		dj.obj.fs = fs;
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	f107 0314 	add.w	r3, r7, #20
 800b526:	4611      	mov	r1, r2
 800b528:	4618      	mov	r0, r3
 800b52a:	f7ff fc03 	bl	800ad34 <follow_path>
 800b52e:	4603      	mov	r3, r0
 800b530:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b534:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d118      	bne.n	800b56e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b53c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b540:	b25b      	sxtb	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	da03      	bge.n	800b54e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b546:	2306      	movs	r3, #6
 800b548:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b54c:	e00f      	b.n	800b56e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b01      	cmp	r3, #1
 800b552:	bf8c      	ite	hi
 800b554:	2301      	movhi	r3, #1
 800b556:	2300      	movls	r3, #0
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	461a      	mov	r2, r3
 800b55c:	f107 0314 	add.w	r3, r7, #20
 800b560:	4611      	mov	r1, r2
 800b562:	4618      	mov	r0, r3
 800b564:	f7fe fb5c 	bl	8009c20 <chk_lock>
 800b568:	4603      	mov	r3, r0
 800b56a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	f003 031c 	and.w	r3, r3, #28
 800b574:	2b00      	cmp	r3, #0
 800b576:	d07f      	beq.n	800b678 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b578:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d017      	beq.n	800b5b0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b580:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b584:	2b04      	cmp	r3, #4
 800b586:	d10e      	bne.n	800b5a6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b588:	f7fe fba6 	bl	8009cd8 <enq_lock>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d006      	beq.n	800b5a0 <f_open+0xc4>
 800b592:	f107 0314 	add.w	r3, r7, #20
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff fae7 	bl	800ab6a <dir_register>
 800b59c:	4603      	mov	r3, r0
 800b59e:	e000      	b.n	800b5a2 <f_open+0xc6>
 800b5a0:	2312      	movs	r3, #18
 800b5a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b5a6:	79fb      	ldrb	r3, [r7, #7]
 800b5a8:	f043 0308 	orr.w	r3, r3, #8
 800b5ac:	71fb      	strb	r3, [r7, #7]
 800b5ae:	e010      	b.n	800b5d2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b5b0:	7ebb      	ldrb	r3, [r7, #26]
 800b5b2:	f003 0311 	and.w	r3, r3, #17
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d003      	beq.n	800b5c2 <f_open+0xe6>
					res = FR_DENIED;
 800b5ba:	2307      	movs	r3, #7
 800b5bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b5c0:	e007      	b.n	800b5d2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b5c2:	79fb      	ldrb	r3, [r7, #7]
 800b5c4:	f003 0304 	and.w	r3, r3, #4
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d002      	beq.n	800b5d2 <f_open+0xf6>
 800b5cc:	2308      	movs	r3, #8
 800b5ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b5d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d168      	bne.n	800b6ac <f_open+0x1d0>
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	f003 0308 	and.w	r3, r3, #8
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d063      	beq.n	800b6ac <f_open+0x1d0>
				dw = GET_FATTIME();
 800b5e4:	f7fe f810 	bl	8009608 <get_fattime>
 800b5e8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ec:	330e      	adds	r3, #14
 800b5ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe fa6b 	bl	8009acc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b5f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5f8:	3316      	adds	r3, #22
 800b5fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe fa65 	bl	8009acc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b604:	330b      	adds	r3, #11
 800b606:	2220      	movs	r2, #32
 800b608:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b60e:	4611      	mov	r1, r2
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff f9b9 	bl	800a988 <ld_clust>
 800b616:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b61c:	2200      	movs	r2, #0
 800b61e:	4618      	mov	r0, r3
 800b620:	f7ff f9d1 	bl	800a9c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b626:	331c      	adds	r3, #28
 800b628:	2100      	movs	r1, #0
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fe fa4e 	bl	8009acc <st_dword>
					fs->wflag = 1;
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	2201      	movs	r2, #1
 800b634:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d037      	beq.n	800b6ac <f_open+0x1d0>
						dw = fs->winsect;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b640:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b642:	f107 0314 	add.w	r3, r7, #20
 800b646:	2200      	movs	r2, #0
 800b648:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fe fee4 	bl	800a418 <remove_chain>
 800b650:	4603      	mov	r3, r0
 800b652:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b656:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d126      	bne.n	800b6ac <f_open+0x1d0>
							res = move_window(fs, dw);
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b662:	4618      	mov	r0, r3
 800b664:	f7fe fc8c 	bl	8009f80 <move_window>
 800b668:	4603      	mov	r3, r0
 800b66a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b672:	3a01      	subs	r2, #1
 800b674:	60da      	str	r2, [r3, #12]
 800b676:	e019      	b.n	800b6ac <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b678:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d115      	bne.n	800b6ac <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b680:	7ebb      	ldrb	r3, [r7, #26]
 800b682:	f003 0310 	and.w	r3, r3, #16
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <f_open+0x1b6>
					res = FR_NO_FILE;
 800b68a:	2304      	movs	r3, #4
 800b68c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b690:	e00c      	b.n	800b6ac <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b692:	79fb      	ldrb	r3, [r7, #7]
 800b694:	f003 0302 	and.w	r3, r3, #2
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d007      	beq.n	800b6ac <f_open+0x1d0>
 800b69c:	7ebb      	ldrb	r3, [r7, #26]
 800b69e:	f003 0301 	and.w	r3, r3, #1
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <f_open+0x1d0>
						res = FR_DENIED;
 800b6a6:	2307      	movs	r3, #7
 800b6a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b6ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d126      	bne.n	800b702 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b6b4:	79fb      	ldrb	r3, [r7, #7]
 800b6b6:	f003 0308 	and.w	r3, r3, #8
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b6be:	79fb      	ldrb	r3, [r7, #7]
 800b6c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b6ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	bf8c      	ite	hi
 800b6da:	2301      	movhi	r3, #1
 800b6dc:	2300      	movls	r3, #0
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	f107 0314 	add.w	r3, r7, #20
 800b6e6:	4611      	mov	r1, r2
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7fe fb17 	bl	8009d1c <inc_lock>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d102      	bne.n	800b702 <f_open+0x226>
 800b6fc:	2302      	movs	r3, #2
 800b6fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b702:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b706:	2b00      	cmp	r3, #0
 800b708:	f040 8095 	bne.w	800b836 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b710:	4611      	mov	r1, r2
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff f938 	bl	800a988 <ld_clust>
 800b718:	4602      	mov	r2, r0
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b720:	331c      	adds	r3, #28
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe f994 	bl	8009a50 <ld_dword>
 800b728:	4602      	mov	r2, r0
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	88da      	ldrh	r2, [r3, #6]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	79fa      	ldrb	r2, [r7, #7]
 800b746:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3330      	adds	r3, #48	@ 0x30
 800b75e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b762:	2100      	movs	r1, #0
 800b764:	4618      	mov	r0, r3
 800b766:	f7fe f9fe 	bl	8009b66 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b76a:	79fb      	ldrb	r3, [r7, #7]
 800b76c:	f003 0320 	and.w	r3, r3, #32
 800b770:	2b00      	cmp	r3, #0
 800b772:	d060      	beq.n	800b836 <f_open+0x35a>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d05c      	beq.n	800b836 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	68da      	ldr	r2, [r3, #12]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	895b      	ldrh	r3, [r3, #10]
 800b788:	025b      	lsls	r3, r3, #9
 800b78a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	657b      	str	r3, [r7, #84]	@ 0x54
 800b798:	e016      	b.n	800b7c8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe fca9 	bl	800a0f6 <get_fat>
 800b7a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b7a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d802      	bhi.n	800b7b2 <f_open+0x2d6>
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b7b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b8:	d102      	bne.n	800b7c0 <f_open+0x2e4>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b7c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b7c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b7c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d103      	bne.n	800b7d8 <f_open+0x2fc>
 800b7d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b7d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d8e0      	bhi.n	800b79a <f_open+0x2be>
				}
				fp->clust = clst;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b7de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d127      	bne.n	800b836 <f_open+0x35a>
 800b7e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d022      	beq.n	800b836 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fe fc5f 	bl	800a0b8 <clust2sect>
 800b7fa:	6478      	str	r0, [r7, #68]	@ 0x44
 800b7fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d103      	bne.n	800b80a <f_open+0x32e>
						res = FR_INT_ERR;
 800b802:	2302      	movs	r3, #2
 800b804:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b808:	e015      	b.n	800b836 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b80a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b80c:	0a5a      	lsrs	r2, r3, #9
 800b80e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b810:	441a      	add	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	7858      	ldrb	r0, [r3, #1]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6a1a      	ldr	r2, [r3, #32]
 800b824:	2301      	movs	r3, #1
 800b826:	f7fe f89d 	bl	8009964 <disk_read>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <f_open+0x35a>
 800b830:	2301      	movs	r3, #1
 800b832:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b836:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d002      	beq.n	800b844 <f_open+0x368>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b844:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3760      	adds	r7, #96	@ 0x60
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08e      	sub	sp, #56	@ 0x38
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	607a      	str	r2, [r7, #4]
 800b85c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2200      	movs	r2, #0
 800b866:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f107 0214 	add.w	r2, r7, #20
 800b86e:	4611      	mov	r1, r2
 800b870:	4618      	mov	r0, r3
 800b872:	f7ff fdb7 	bl	800b3e4 <validate>
 800b876:	4603      	mov	r3, r0
 800b878:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b87c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b880:	2b00      	cmp	r3, #0
 800b882:	d107      	bne.n	800b894 <f_read+0x44>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	7d5b      	ldrb	r3, [r3, #21]
 800b888:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b88c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <f_read+0x4a>
 800b894:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b898:	e115      	b.n	800bac6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	7d1b      	ldrb	r3, [r3, #20]
 800b89e:	f003 0301 	and.w	r3, r3, #1
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d101      	bne.n	800b8aa <f_read+0x5a>
 800b8a6:	2307      	movs	r3, #7
 800b8a8:	e10d      	b.n	800bac6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	68da      	ldr	r2, [r3, #12]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	6a3b      	ldr	r3, [r7, #32]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	f240 80fe 	bls.w	800babc <f_read+0x26c>
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b8c4:	e0fa      	b.n	800babc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f040 80c6 	bne.w	800ba60 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	699b      	ldr	r3, [r3, #24]
 800b8d8:	0a5b      	lsrs	r3, r3, #9
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	8952      	ldrh	r2, [r2, #10]
 800b8de:	3a01      	subs	r2, #1
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d12f      	bne.n	800b94a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d103      	bne.n	800b8fa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8f8:	e013      	b.n	800b922 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d007      	beq.n	800b912 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	4619      	mov	r1, r3
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7fe fe82 	bl	800a612 <clmt_clust>
 800b90e:	6338      	str	r0, [r7, #48]	@ 0x30
 800b910:	e007      	b.n	800b922 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	69db      	ldr	r3, [r3, #28]
 800b918:	4619      	mov	r1, r3
 800b91a:	4610      	mov	r0, r2
 800b91c:	f7fe fbeb 	bl	800a0f6 <get_fat>
 800b920:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b924:	2b01      	cmp	r3, #1
 800b926:	d804      	bhi.n	800b932 <f_read+0xe2>
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2202      	movs	r2, #2
 800b92c:	755a      	strb	r2, [r3, #21]
 800b92e:	2302      	movs	r3, #2
 800b930:	e0c9      	b.n	800bac6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b938:	d104      	bne.n	800b944 <f_read+0xf4>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2201      	movs	r2, #1
 800b93e:	755a      	strb	r2, [r3, #21]
 800b940:	2301      	movs	r3, #1
 800b942:	e0c0      	b.n	800bac6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b948:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	69db      	ldr	r3, [r3, #28]
 800b950:	4619      	mov	r1, r3
 800b952:	4610      	mov	r0, r2
 800b954:	f7fe fbb0 	bl	800a0b8 <clust2sect>
 800b958:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d104      	bne.n	800b96a <f_read+0x11a>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2202      	movs	r2, #2
 800b964:	755a      	strb	r2, [r3, #21]
 800b966:	2302      	movs	r3, #2
 800b968:	e0ad      	b.n	800bac6 <f_read+0x276>
			sect += csect;
 800b96a:	69ba      	ldr	r2, [r7, #24]
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	4413      	add	r3, r2
 800b970:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	0a5b      	lsrs	r3, r3, #9
 800b976:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d039      	beq.n	800b9f2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b97e:	69fa      	ldr	r2, [r7, #28]
 800b980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b982:	4413      	add	r3, r2
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	8952      	ldrh	r2, [r2, #10]
 800b988:	4293      	cmp	r3, r2
 800b98a:	d905      	bls.n	800b998 <f_read+0x148>
					cc = fs->csize - csect;
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	895b      	ldrh	r3, [r3, #10]
 800b990:	461a      	mov	r2, r3
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	7858      	ldrb	r0, [r3, #1]
 800b99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99e:	69ba      	ldr	r2, [r7, #24]
 800b9a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b9a2:	f7fd ffdf 	bl	8009964 <disk_read>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d004      	beq.n	800b9b6 <f_read+0x166>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	755a      	strb	r2, [r3, #21]
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e087      	b.n	800bac6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	7d1b      	ldrb	r3, [r3, #20]
 800b9ba:	b25b      	sxtb	r3, r3
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	da14      	bge.n	800b9ea <f_read+0x19a>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6a1a      	ldr	r2, [r3, #32]
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	1ad3      	subs	r3, r2, r3
 800b9c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d90d      	bls.n	800b9ea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6a1a      	ldr	r2, [r3, #32]
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	025b      	lsls	r3, r3, #9
 800b9d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9da:	18d0      	adds	r0, r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	3330      	adds	r3, #48	@ 0x30
 800b9e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f7fe f89d 	bl	8009b24 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ec:	025b      	lsls	r3, r3, #9
 800b9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800b9f0:	e050      	b.n	800ba94 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	69ba      	ldr	r2, [r7, #24]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d02e      	beq.n	800ba5a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	7d1b      	ldrb	r3, [r3, #20]
 800ba00:	b25b      	sxtb	r3, r3
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	da18      	bge.n	800ba38 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	7858      	ldrb	r0, [r3, #1]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6a1a      	ldr	r2, [r3, #32]
 800ba14:	2301      	movs	r3, #1
 800ba16:	f7fd ffc5 	bl	80099a4 <disk_write>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d004      	beq.n	800ba2a <f_read+0x1da>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2201      	movs	r2, #1
 800ba24:	755a      	strb	r2, [r3, #21]
 800ba26:	2301      	movs	r3, #1
 800ba28:	e04d      	b.n	800bac6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	7d1b      	ldrb	r3, [r3, #20]
 800ba2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	7858      	ldrb	r0, [r3, #1]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba42:	2301      	movs	r3, #1
 800ba44:	69ba      	ldr	r2, [r7, #24]
 800ba46:	f7fd ff8d 	bl	8009964 <disk_read>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d004      	beq.n	800ba5a <f_read+0x20a>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2201      	movs	r2, #1
 800ba54:	755a      	strb	r2, [r3, #21]
 800ba56:	2301      	movs	r3, #1
 800ba58:	e035      	b.n	800bac6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	69ba      	ldr	r2, [r7, #24]
 800ba5e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba68:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ba6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ba6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d901      	bls.n	800ba7a <f_read+0x22a>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba88:	4413      	add	r3, r2
 800ba8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba90:	f7fe f848 	bl	8009b24 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ba94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba98:	4413      	add	r3, r2
 800ba9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	699a      	ldr	r2, [r3, #24]
 800baa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa2:	441a      	add	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	619a      	str	r2, [r3, #24]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baae:	441a      	add	r2, r3
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f47f af01 	bne.w	800b8c6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3738      	adds	r7, #56	@ 0x38
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b08c      	sub	sp, #48	@ 0x30
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	60f8      	str	r0, [r7, #12]
 800bad6:	60b9      	str	r1, [r7, #8]
 800bad8:	607a      	str	r2, [r7, #4]
 800bada:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2200      	movs	r2, #0
 800bae4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f107 0210 	add.w	r2, r7, #16
 800baec:	4611      	mov	r1, r2
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff fc78 	bl	800b3e4 <validate>
 800baf4:	4603      	mov	r3, r0
 800baf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bafa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d107      	bne.n	800bb12 <f_write+0x44>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	7d5b      	ldrb	r3, [r3, #21]
 800bb06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bb0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d002      	beq.n	800bb18 <f_write+0x4a>
 800bb12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb16:	e14b      	b.n	800bdb0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	7d1b      	ldrb	r3, [r3, #20]
 800bb1c:	f003 0302 	and.w	r3, r3, #2
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d101      	bne.n	800bb28 <f_write+0x5a>
 800bb24:	2307      	movs	r3, #7
 800bb26:	e143      	b.n	800bdb0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	699a      	ldr	r2, [r3, #24]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	441a      	add	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	f080 812d 	bcs.w	800bd94 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	43db      	mvns	r3, r3
 800bb40:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bb42:	e127      	b.n	800bd94 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f040 80e3 	bne.w	800bd18 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	699b      	ldr	r3, [r3, #24]
 800bb56:	0a5b      	lsrs	r3, r3, #9
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	8952      	ldrh	r2, [r2, #10]
 800bb5c:	3a01      	subs	r2, #1
 800bb5e:	4013      	ands	r3, r2
 800bb60:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d143      	bne.n	800bbf0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10c      	bne.n	800bb8a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d11a      	bne.n	800bbb2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2100      	movs	r1, #0
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fe fcae 	bl	800a4e2 <create_chain>
 800bb86:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bb88:	e013      	b.n	800bbb2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d007      	beq.n	800bba2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	699b      	ldr	r3, [r3, #24]
 800bb96:	4619      	mov	r1, r3
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7fe fd3a 	bl	800a612 <clmt_clust>
 800bb9e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bba0:	e007      	b.n	800bbb2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	4610      	mov	r0, r2
 800bbac:	f7fe fc99 	bl	800a4e2 <create_chain>
 800bbb0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 80f2 	beq.w	800bd9e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bbba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d104      	bne.n	800bbca <f_write+0xfc>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	755a      	strb	r2, [r3, #21]
 800bbc6:	2302      	movs	r3, #2
 800bbc8:	e0f2      	b.n	800bdb0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd0:	d104      	bne.n	800bbdc <f_write+0x10e>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	755a      	strb	r2, [r3, #21]
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e0e9      	b.n	800bdb0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbe0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d102      	bne.n	800bbf0 <f_write+0x122>
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	7d1b      	ldrb	r3, [r3, #20]
 800bbf4:	b25b      	sxtb	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	da18      	bge.n	800bc2c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	7858      	ldrb	r0, [r3, #1]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6a1a      	ldr	r2, [r3, #32]
 800bc08:	2301      	movs	r3, #1
 800bc0a:	f7fd fecb 	bl	80099a4 <disk_write>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d004      	beq.n	800bc1e <f_write+0x150>
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2201      	movs	r2, #1
 800bc18:	755a      	strb	r2, [r3, #21]
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e0c8      	b.n	800bdb0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	7d1b      	ldrb	r3, [r3, #20]
 800bc22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc26:	b2da      	uxtb	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	69db      	ldr	r3, [r3, #28]
 800bc32:	4619      	mov	r1, r3
 800bc34:	4610      	mov	r0, r2
 800bc36:	f7fe fa3f 	bl	800a0b8 <clust2sect>
 800bc3a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d104      	bne.n	800bc4c <f_write+0x17e>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2202      	movs	r2, #2
 800bc46:	755a      	strb	r2, [r3, #21]
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e0b1      	b.n	800bdb0 <f_write+0x2e2>
			sect += csect;
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	4413      	add	r3, r2
 800bc52:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	0a5b      	lsrs	r3, r3, #9
 800bc58:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d03c      	beq.n	800bcda <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bc60:	69ba      	ldr	r2, [r7, #24]
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	4413      	add	r3, r2
 800bc66:	693a      	ldr	r2, [r7, #16]
 800bc68:	8952      	ldrh	r2, [r2, #10]
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d905      	bls.n	800bc7a <f_write+0x1ac>
					cc = fs->csize - csect;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	895b      	ldrh	r3, [r3, #10]
 800bc72:	461a      	mov	r2, r3
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	7858      	ldrb	r0, [r3, #1]
 800bc7e:	6a3b      	ldr	r3, [r7, #32]
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	69f9      	ldr	r1, [r7, #28]
 800bc84:	f7fd fe8e 	bl	80099a4 <disk_write>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d004      	beq.n	800bc98 <f_write+0x1ca>
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2201      	movs	r2, #1
 800bc92:	755a      	strb	r2, [r3, #21]
 800bc94:	2301      	movs	r3, #1
 800bc96:	e08b      	b.n	800bdb0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6a1a      	ldr	r2, [r3, #32]
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	1ad3      	subs	r3, r2, r3
 800bca0:	6a3a      	ldr	r2, [r7, #32]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d915      	bls.n	800bcd2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6a1a      	ldr	r2, [r3, #32]
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	025b      	lsls	r3, r3, #9
 800bcb6:	69fa      	ldr	r2, [r7, #28]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	f7fd ff30 	bl	8009b24 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	7d1b      	ldrb	r3, [r3, #20]
 800bcc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bcd2:	6a3b      	ldr	r3, [r7, #32]
 800bcd4:	025b      	lsls	r3, r3, #9
 800bcd6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800bcd8:	e03f      	b.n	800bd5a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6a1b      	ldr	r3, [r3, #32]
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d016      	beq.n	800bd12 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	699a      	ldr	r2, [r3, #24]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d210      	bcs.n	800bd12 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	7858      	ldrb	r0, [r3, #1]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	f7fd fe31 	bl	8009964 <disk_read>
 800bd02:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	755a      	strb	r2, [r3, #21]
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e04e      	b.n	800bdb0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	699b      	ldr	r3, [r3, #24]
 800bd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd20:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bd24:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bd26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d901      	bls.n	800bd32 <f_write+0x264>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	699b      	ldr	r3, [r3, #24]
 800bd3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd40:	4413      	add	r3, r2
 800bd42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd44:	69f9      	ldr	r1, [r7, #28]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fd feec 	bl	8009b24 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	7d1b      	ldrb	r3, [r3, #20]
 800bd50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd54:	b2da      	uxtb	r2, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bd5a:	69fa      	ldr	r2, [r7, #28]
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5e:	4413      	add	r3, r2
 800bd60:	61fb      	str	r3, [r7, #28]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	699a      	ldr	r2, [r3, #24]
 800bd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd68:	441a      	add	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	619a      	str	r2, [r3, #24]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	68da      	ldr	r2, [r3, #12]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	699b      	ldr	r3, [r3, #24]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	bf38      	it	cc
 800bd7a:	461a      	movcc	r2, r3
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	60da      	str	r2, [r3, #12]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd86:	441a      	add	r2, r3
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	601a      	str	r2, [r3, #0]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f47f aed4 	bne.w	800bb44 <f_write+0x76>
 800bd9c:	e000      	b.n	800bda0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bd9e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	7d1b      	ldrb	r3, [r3, #20]
 800bda4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bda8:	b2da      	uxtb	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3730      	adds	r7, #48	@ 0x30
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b086      	sub	sp, #24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f107 0208 	add.w	r2, r7, #8
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff fb0b 	bl	800b3e4 <validate>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bdd2:	7dfb      	ldrb	r3, [r7, #23]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d168      	bne.n	800beaa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	7d1b      	ldrb	r3, [r3, #20]
 800bddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d062      	beq.n	800beaa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	7d1b      	ldrb	r3, [r3, #20]
 800bde8:	b25b      	sxtb	r3, r3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	da15      	bge.n	800be1a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	7858      	ldrb	r0, [r3, #1]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a1a      	ldr	r2, [r3, #32]
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	f7fd fdd1 	bl	80099a4 <disk_write>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <f_sync+0x54>
 800be08:	2301      	movs	r3, #1
 800be0a:	e04f      	b.n	800beac <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	7d1b      	ldrb	r3, [r3, #20]
 800be10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be14:	b2da      	uxtb	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800be1a:	f7fd fbf5 	bl	8009608 <get_fattime>
 800be1e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be26:	4619      	mov	r1, r3
 800be28:	4610      	mov	r0, r2
 800be2a:	f7fe f8a9 	bl	8009f80 <move_window>
 800be2e:	4603      	mov	r3, r0
 800be30:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d138      	bne.n	800beaa <f_sync+0xf2>
					dir = fp->dir_ptr;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be3c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	330b      	adds	r3, #11
 800be42:	781a      	ldrb	r2, [r3, #0]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	330b      	adds	r3, #11
 800be48:	f042 0220 	orr.w	r2, r2, #32
 800be4c:	b2d2      	uxtb	r2, r2
 800be4e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6818      	ldr	r0, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	461a      	mov	r2, r3
 800be5a:	68f9      	ldr	r1, [r7, #12]
 800be5c:	f7fe fdb3 	bl	800a9c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f103 021c 	add.w	r2, r3, #28
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	4619      	mov	r1, r3
 800be6c:	4610      	mov	r0, r2
 800be6e:	f7fd fe2d 	bl	8009acc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3316      	adds	r3, #22
 800be76:	6939      	ldr	r1, [r7, #16]
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fd fe27 	bl	8009acc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	3312      	adds	r3, #18
 800be82:	2100      	movs	r1, #0
 800be84:	4618      	mov	r0, r3
 800be86:	f7fd fe06 	bl	8009a96 <st_word>
					fs->wflag = 1;
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	2201      	movs	r2, #1
 800be8e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4618      	mov	r0, r3
 800be94:	f7fe f8a2 	bl	8009fdc <sync_fs>
 800be98:	4603      	mov	r3, r0
 800be9a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	7d1b      	ldrb	r3, [r3, #20]
 800bea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800beaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f7ff ff7b 	bl	800bdb8 <f_sync>
 800bec2:	4603      	mov	r3, r0
 800bec4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d118      	bne.n	800befe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f107 0208 	add.w	r2, r7, #8
 800bed2:	4611      	mov	r1, r2
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff fa85 	bl	800b3e4 <validate>
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bede:	7bfb      	ldrb	r3, [r7, #15]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10c      	bne.n	800befe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	4618      	mov	r0, r3
 800beea:	f7fd ffa5 	bl	8009e38 <dec_lock>
 800beee:	4603      	mov	r3, r0
 800bef0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bef2:	7bfb      	ldrb	r3, [r7, #15]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d102      	bne.n	800befe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800befe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b090      	sub	sp, #64	@ 0x40
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f107 0208 	add.w	r2, r7, #8
 800bf18:	4611      	mov	r1, r2
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff fa62 	bl	800b3e4 <validate>
 800bf20:	4603      	mov	r3, r0
 800bf22:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bf26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d103      	bne.n	800bf36 <f_lseek+0x2e>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	7d5b      	ldrb	r3, [r3, #21]
 800bf32:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bf36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d002      	beq.n	800bf44 <f_lseek+0x3c>
 800bf3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf42:	e1e6      	b.n	800c312 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 80d1 	beq.w	800c0f0 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf54:	d15a      	bne.n	800c00c <f_lseek+0x104>
			tbl = fp->cltbl;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf5a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	627a      	str	r2, [r7, #36]	@ 0x24
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	617b      	str	r3, [r7, #20]
 800bf66:	2302      	movs	r3, #2
 800bf68:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800bf70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d03a      	beq.n	800bfec <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf78:	613b      	str	r3, [r7, #16]
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf80:	3302      	adds	r3, #2
 800bf82:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800bf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf86:	60fb      	str	r3, [r7, #12]
 800bf88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fe f8af 	bl	800a0f6 <get_fat>
 800bf98:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d804      	bhi.n	800bfaa <f_lseek+0xa2>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	755a      	strb	r2, [r3, #21]
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	e1b3      	b.n	800c312 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb0:	d104      	bne.n	800bfbc <f_lseek+0xb4>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	755a      	strb	r2, [r3, #21]
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e1aa      	b.n	800c312 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d0de      	beq.n	800bf84 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bfc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d809      	bhi.n	800bfe2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd0:	1d1a      	adds	r2, r3, #4
 800bfd2:	627a      	str	r2, [r7, #36]	@ 0x24
 800bfd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfda:	1d1a      	adds	r2, r3, #4
 800bfdc:	627a      	str	r2, [r7, #36]	@ 0x24
 800bfde:	693a      	ldr	r2, [r7, #16]
 800bfe0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d3c4      	bcc.n	800bf76 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bff2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d803      	bhi.n	800c004 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800bffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffe:	2200      	movs	r2, #0
 800c000:	601a      	str	r2, [r3, #0]
 800c002:	e184      	b.n	800c30e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c004:	2311      	movs	r3, #17
 800c006:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c00a:	e180      	b.n	800c30e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	429a      	cmp	r2, r3
 800c014:	d902      	bls.n	800c01c <f_lseek+0x114>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	683a      	ldr	r2, [r7, #0]
 800c020:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	f000 8172 	beq.w	800c30e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7fe faee 	bl	800a612 <clmt_clust>
 800c036:	4602      	mov	r2, r0
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	69db      	ldr	r3, [r3, #28]
 800c042:	4619      	mov	r1, r3
 800c044:	4610      	mov	r0, r2
 800c046:	f7fe f837 	bl	800a0b8 <clust2sect>
 800c04a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d104      	bne.n	800c05c <f_lseek+0x154>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2202      	movs	r2, #2
 800c056:	755a      	strb	r2, [r3, #21]
 800c058:	2302      	movs	r3, #2
 800c05a:	e15a      	b.n	800c312 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	3b01      	subs	r3, #1
 800c060:	0a5b      	lsrs	r3, r3, #9
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	8952      	ldrh	r2, [r2, #10]
 800c066:	3a01      	subs	r2, #1
 800c068:	4013      	ands	r3, r2
 800c06a:	69ba      	ldr	r2, [r7, #24]
 800c06c:	4413      	add	r3, r2
 800c06e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	699b      	ldr	r3, [r3, #24]
 800c074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 8148 	beq.w	800c30e <f_lseek+0x406>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a1b      	ldr	r3, [r3, #32]
 800c082:	69ba      	ldr	r2, [r7, #24]
 800c084:	429a      	cmp	r2, r3
 800c086:	f000 8142 	beq.w	800c30e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	7d1b      	ldrb	r3, [r3, #20]
 800c08e:	b25b      	sxtb	r3, r3
 800c090:	2b00      	cmp	r3, #0
 800c092:	da18      	bge.n	800c0c6 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	7858      	ldrb	r0, [r3, #1]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1a      	ldr	r2, [r3, #32]
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	f7fd fc7e 	bl	80099a4 <disk_write>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d004      	beq.n	800c0b8 <f_lseek+0x1b0>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	755a      	strb	r2, [r3, #21]
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e12c      	b.n	800c312 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	7d1b      	ldrb	r3, [r3, #20]
 800c0bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	7858      	ldrb	r0, [r3, #1]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	f7fd fc46 	bl	8009964 <disk_read>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d004      	beq.n	800c0e8 <f_lseek+0x1e0>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	755a      	strb	r2, [r3, #21]
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e114      	b.n	800c312 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	69ba      	ldr	r2, [r7, #24]
 800c0ec:	621a      	str	r2, [r3, #32]
 800c0ee:	e10e      	b.n	800c30e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d908      	bls.n	800c10c <f_lseek+0x204>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	7d1b      	ldrb	r3, [r3, #20]
 800c0fe:	f003 0302 	and.w	r3, r3, #2
 800c102:	2b00      	cmp	r3, #0
 800c104:	d102      	bne.n	800c10c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c112:	2300      	movs	r3, #0
 800c114:	637b      	str	r3, [r7, #52]	@ 0x34
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c11a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f000 80a7 	beq.w	800c272 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	895b      	ldrh	r3, [r3, #10]
 800c128:	025b      	lsls	r3, r3, #9
 800c12a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d01b      	beq.n	800c16a <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	1e5a      	subs	r2, r3, #1
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	fbb2 f2f3 	udiv	r2, r2, r3
 800c13c:	6a3b      	ldr	r3, [r7, #32]
 800c13e:	1e59      	subs	r1, r3, #1
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c146:	429a      	cmp	r2, r3
 800c148:	d30f      	bcc.n	800c16a <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c14a:	6a3b      	ldr	r3, [r7, #32]
 800c14c:	1e5a      	subs	r2, r3, #1
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	425b      	negs	r3, r3
 800c152:	401a      	ands	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	683a      	ldr	r2, [r7, #0]
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c168:	e022      	b.n	800c1b0 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c172:	2b00      	cmp	r3, #0
 800c174:	d119      	bne.n	800c1aa <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2100      	movs	r1, #0
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe f9b1 	bl	800a4e2 <create_chain>
 800c180:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c184:	2b01      	cmp	r3, #1
 800c186:	d104      	bne.n	800c192 <f_lseek+0x28a>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2202      	movs	r2, #2
 800c18c:	755a      	strb	r2, [r3, #21]
 800c18e:	2302      	movs	r3, #2
 800c190:	e0bf      	b.n	800c312 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c198:	d104      	bne.n	800c1a4 <f_lseek+0x29c>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2201      	movs	r2, #1
 800c19e:	755a      	strb	r2, [r3, #21]
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e0b6      	b.n	800c312 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1a8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1ae:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d05d      	beq.n	800c272 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c1b6:	e03a      	b.n	800c22e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	603b      	str	r3, [r7, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	699a      	ldr	r2, [r3, #24]
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	441a      	add	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	7d1b      	ldrb	r3, [r3, #20]
 800c1d0:	f003 0302 	and.w	r3, r3, #2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00b      	beq.n	800c1f0 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe f980 	bl	800a4e2 <create_chain>
 800c1e2:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d108      	bne.n	800c1fc <f_lseek+0x2f4>
							ofs = 0; break;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	603b      	str	r3, [r7, #0]
 800c1ee:	e022      	b.n	800c236 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fd ff7e 	bl	800a0f6 <get_fat>
 800c1fa:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c202:	d104      	bne.n	800c20e <f_lseek+0x306>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	755a      	strb	r2, [r3, #21]
 800c20a:	2301      	movs	r3, #1
 800c20c:	e081      	b.n	800c312 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c210:	2b01      	cmp	r3, #1
 800c212:	d904      	bls.n	800c21e <f_lseek+0x316>
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	695b      	ldr	r3, [r3, #20]
 800c218:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d304      	bcc.n	800c228 <f_lseek+0x320>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2202      	movs	r2, #2
 800c222:	755a      	strb	r2, [r3, #21]
 800c224:	2302      	movs	r3, #2
 800c226:	e074      	b.n	800c312 <f_lseek+0x40a>
					fp->clust = clst;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c22c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	429a      	cmp	r2, r3
 800c234:	d8c0      	bhi.n	800c1b8 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	699a      	ldr	r2, [r3, #24]
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	441a      	add	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d012      	beq.n	800c272 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c250:	4618      	mov	r0, r3
 800c252:	f7fd ff31 	bl	800a0b8 <clust2sect>
 800c256:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d104      	bne.n	800c268 <f_lseek+0x360>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2202      	movs	r2, #2
 800c262:	755a      	strb	r2, [r3, #21]
 800c264:	2302      	movs	r3, #2
 800c266:	e054      	b.n	800c312 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	0a5b      	lsrs	r3, r3, #9
 800c26c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c26e:	4413      	add	r3, r2
 800c270:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	699a      	ldr	r2, [r3, #24]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d90a      	bls.n	800c294 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	699a      	ldr	r2, [r3, #24]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	7d1b      	ldrb	r3, [r3, #20]
 800c28a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	699b      	ldr	r3, [r3, #24]
 800c298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d036      	beq.n	800c30e <f_lseek+0x406>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a1b      	ldr	r3, [r3, #32]
 800c2a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d031      	beq.n	800c30e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	7d1b      	ldrb	r3, [r3, #20]
 800c2ae:	b25b      	sxtb	r3, r3
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	da18      	bge.n	800c2e6 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	7858      	ldrb	r0, [r3, #1]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a1a      	ldr	r2, [r3, #32]
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	f7fd fb6e 	bl	80099a4 <disk_write>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d004      	beq.n	800c2d8 <f_lseek+0x3d0>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	755a      	strb	r2, [r3, #21]
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e01c      	b.n	800c312 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	7d1b      	ldrb	r3, [r3, #20]
 800c2dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	7858      	ldrb	r0, [r3, #1]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2f4:	f7fd fb36 	bl	8009964 <disk_read>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d004      	beq.n	800c308 <f_lseek+0x400>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2201      	movs	r2, #1
 800c302:	755a      	strb	r2, [r3, #21]
 800c304:	2301      	movs	r3, #1
 800c306:	e004      	b.n	800c312 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c30c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c30e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c312:	4618      	mov	r0, r3
 800c314:	3740      	adds	r7, #64	@ 0x40
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b09e      	sub	sp, #120	@ 0x78
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800c322:	2300      	movs	r3, #0
 800c324:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c326:	f107 010c 	add.w	r1, r7, #12
 800c32a:	1d3b      	adds	r3, r7, #4
 800c32c:	2202      	movs	r2, #2
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fe fe0c 	bl	800af4c <find_volume>
 800c334:	4603      	mov	r3, r0
 800c336:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800c33e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c342:	2b00      	cmp	r3, #0
 800c344:	f040 808e 	bne.w	800c464 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c34e:	4611      	mov	r1, r2
 800c350:	4618      	mov	r0, r3
 800c352:	f7fe fcef 	bl	800ad34 <follow_path>
 800c356:	4603      	mov	r3, r0
 800c358:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800c35c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c360:	2b00      	cmp	r3, #0
 800c362:	d108      	bne.n	800c376 <f_unlink+0x5c>
 800c364:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c368:	2102      	movs	r1, #2
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fd fc58 	bl	8009c20 <chk_lock>
 800c370:	4603      	mov	r3, r0
 800c372:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800c376:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d172      	bne.n	800c464 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800c37e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c382:	b25b      	sxtb	r3, r3
 800c384:	2b00      	cmp	r3, #0
 800c386:	da03      	bge.n	800c390 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800c388:	2306      	movs	r3, #6
 800c38a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c38e:	e008      	b.n	800c3a2 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800c390:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c394:	f003 0301 	and.w	r3, r3, #1
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800c39c:	2307      	movs	r3, #7
 800c39e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800c3a2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d134      	bne.n	800c414 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fe fae9 	bl	800a988 <ld_clust>
 800c3b6:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800c3b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c3bc:	f003 0310 	and.w	r3, r3, #16
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d027      	beq.n	800c414 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800c3c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3ca:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800c3cc:	f107 0310 	add.w	r3, r7, #16
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fe f951 	bl	800a67a <dir_sdi>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800c3de:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d116      	bne.n	800c414 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800c3e6:	f107 0310 	add.w	r3, r7, #16
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fe fb0a 	bl	800aa06 <dir_read>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800c3f8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <f_unlink+0xec>
 800c400:	2307      	movs	r3, #7
 800c402:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800c406:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c40a:	2b04      	cmp	r3, #4
 800c40c:	d102      	bne.n	800c414 <f_unlink+0xfa>
 800c40e:	2300      	movs	r3, #0
 800c410:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800c414:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d123      	bne.n	800c464 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800c41c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c420:	4618      	mov	r0, r3
 800c422:	f7fe fbd4 	bl	800abce <dir_remove>
 800c426:	4603      	mov	r3, r0
 800c428:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800c42c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10c      	bne.n	800c44e <f_unlink+0x134>
 800c434:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c436:	2b00      	cmp	r3, #0
 800c438:	d009      	beq.n	800c44e <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800c43a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c43e:	2200      	movs	r2, #0
 800c440:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c442:	4618      	mov	r0, r3
 800c444:	f7fd ffe8 	bl	800a418 <remove_chain>
 800c448:	4603      	mov	r3, r0
 800c44a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800c44e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c452:	2b00      	cmp	r3, #0
 800c454:	d106      	bne.n	800c464 <f_unlink+0x14a>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fd fdbf 	bl	8009fdc <sync_fs>
 800c45e:	4603      	mov	r3, r0
 800c460:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c464:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3778      	adds	r7, #120	@ 0x78
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800c470:	b590      	push	{r4, r7, lr}
 800c472:	b0a5      	sub	sp, #148	@ 0x94
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800c47a:	463b      	mov	r3, r7
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fe fcca 	bl	800ae16 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800c482:	f107 0120 	add.w	r1, r7, #32
 800c486:	1d3b      	adds	r3, r7, #4
 800c488:	2202      	movs	r2, #2
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fe fd5e 	bl	800af4c <find_volume>
 800c490:	4603      	mov	r3, r0
 800c492:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800c496:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f040 80db 	bne.w	800c656 <f_rename+0x1e6>
		djo.obj.fs = fs;
 800c4a0:	6a3b      	ldr	r3, [r7, #32]
 800c4a2:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c4aa:	4611      	mov	r1, r2
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fe fc41 	bl	800ad34 <follow_path>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800c4b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d108      	bne.n	800c4d2 <f_rename+0x62>
 800c4c0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c4c4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <f_rename+0x62>
 800c4cc:	2306      	movs	r3, #6
 800c4ce:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800c4d2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d108      	bne.n	800c4ec <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800c4da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c4de:	2102      	movs	r1, #2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fd fb9d 	bl	8009c20 <chk_lock>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800c4ec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f040 80b0 	bne.w	800c656 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800c4f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4f8:	f103 010b 	add.w	r1, r3, #11
 800c4fc:	f107 0308 	add.w	r3, r7, #8
 800c500:	2215      	movs	r2, #21
 800c502:	4618      	mov	r0, r3
 800c504:	f7fd fb0e 	bl	8009b24 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800c508:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800c50c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c510:	2230      	movs	r2, #48	@ 0x30
 800c512:	4618      	mov	r0, r3
 800c514:	f7fd fb06 	bl	8009b24 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c51e:	4611      	mov	r1, r2
 800c520:	4618      	mov	r0, r3
 800c522:	f7fe fc07 	bl	800ad34 <follow_path>
 800c526:	4603      	mov	r3, r0
 800c528:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800c52c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10c      	bne.n	800c54e <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800c534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c538:	429a      	cmp	r2, r3
 800c53a:	d105      	bne.n	800c548 <f_rename+0xd8>
 800c53c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c53e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c540:	429a      	cmp	r2, r3
 800c542:	d101      	bne.n	800c548 <f_rename+0xd8>
 800c544:	2304      	movs	r3, #4
 800c546:	e000      	b.n	800c54a <f_rename+0xda>
 800c548:	2308      	movs	r3, #8
 800c54a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800c54e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c552:	2b04      	cmp	r3, #4
 800c554:	d168      	bne.n	800c628 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800c556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fe fb05 	bl	800ab6a <dir_register>
 800c560:	4603      	mov	r3, r0
 800c562:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800c566:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d15c      	bne.n	800c628 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800c56e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c570:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800c574:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c578:	f103 000d 	add.w	r0, r3, #13
 800c57c:	f107 0308 	add.w	r3, r7, #8
 800c580:	3302      	adds	r3, #2
 800c582:	2213      	movs	r2, #19
 800c584:	4619      	mov	r1, r3
 800c586:	f7fd facd 	bl	8009b24 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800c58a:	7a3a      	ldrb	r2, [r7, #8]
 800c58c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c590:	330b      	adds	r3, #11
 800c592:	f042 0220 	orr.w	r2, r2, #32
 800c596:	b2d2      	uxtb	r2, r2
 800c598:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800c59a:	6a3b      	ldr	r3, [r7, #32]
 800c59c:	2201      	movs	r2, #1
 800c59e:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800c5a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5a4:	330b      	adds	r3, #11
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	f003 0310 	and.w	r3, r3, #16
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d03b      	beq.n	800c628 <f_rename+0x1b8>
 800c5b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d037      	beq.n	800c628 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800c5b8:	6a3c      	ldr	r4, [r7, #32]
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fe f9e1 	bl	800a988 <ld_clust>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f7fd fd74 	bl	800a0b8 <clust2sect>
 800c5d0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800c5d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d103      	bne.n	800c5e4 <f_rename+0x174>
								res = FR_INT_ERR;
 800c5dc:	2302      	movs	r3, #2
 800c5de:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800c5e2:	e021      	b.n	800c628 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fd fcc8 	bl	8009f80 <move_window>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800c5f6:	6a3b      	ldr	r3, [r7, #32]
 800c5f8:	3330      	adds	r3, #48	@ 0x30
 800c5fa:	3320      	adds	r3, #32
 800c5fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800c600:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10f      	bne.n	800c628 <f_rename+0x1b8>
 800c608:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c60c:	3301      	adds	r3, #1
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	2b2e      	cmp	r3, #46	@ 0x2e
 800c612:	d109      	bne.n	800c628 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800c614:	6a3b      	ldr	r3, [r7, #32]
 800c616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c618:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fe f9d2 	bl	800a9c6 <st_clust>
									fs->wflag = 1;
 800c622:	6a3b      	ldr	r3, [r7, #32]
 800c624:	2201      	movs	r2, #1
 800c626:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800c628:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d112      	bne.n	800c656 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800c630:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c634:	4618      	mov	r0, r3
 800c636:	f7fe faca 	bl	800abce <dir_remove>
 800c63a:	4603      	mov	r3, r0
 800c63c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800c640:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c644:	2b00      	cmp	r3, #0
 800c646:	d106      	bne.n	800c656 <f_rename+0x1e6>
					res = sync_fs(fs);
 800c648:	6a3b      	ldr	r3, [r7, #32]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fd fcc6 	bl	8009fdc <sync_fs>
 800c650:	4603      	mov	r3, r0
 800c652:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c656:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3794      	adds	r7, #148	@ 0x94
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd90      	pop	{r4, r7, pc}
	...

0800c664 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c664:	b480      	push	{r7}
 800c666:	b087      	sub	sp, #28
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	4613      	mov	r3, r2
 800c670:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c672:	2301      	movs	r3, #1
 800c674:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c67a:	4b1f      	ldr	r3, [pc, #124]	@ (800c6f8 <FATFS_LinkDriverEx+0x94>)
 800c67c:	7a5b      	ldrb	r3, [r3, #9]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	2b00      	cmp	r3, #0
 800c682:	d131      	bne.n	800c6e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c684:	4b1c      	ldr	r3, [pc, #112]	@ (800c6f8 <FATFS_LinkDriverEx+0x94>)
 800c686:	7a5b      	ldrb	r3, [r3, #9]
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	461a      	mov	r2, r3
 800c68c:	4b1a      	ldr	r3, [pc, #104]	@ (800c6f8 <FATFS_LinkDriverEx+0x94>)
 800c68e:	2100      	movs	r1, #0
 800c690:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c692:	4b19      	ldr	r3, [pc, #100]	@ (800c6f8 <FATFS_LinkDriverEx+0x94>)
 800c694:	7a5b      	ldrb	r3, [r3, #9]
 800c696:	b2db      	uxtb	r3, r3
 800c698:	4a17      	ldr	r2, [pc, #92]	@ (800c6f8 <FATFS_LinkDriverEx+0x94>)
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	4413      	add	r3, r2
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c6a2:	4b15      	ldr	r3, [pc, #84]	@ (800c6f8 <FATFS_LinkDriverEx+0x94>)
 800c6a4:	7a5b      	ldrb	r3, [r3, #9]
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4b13      	ldr	r3, [pc, #76]	@ (800c6f8 <FATFS_LinkDriverEx+0x94>)
 800c6ac:	4413      	add	r3, r2
 800c6ae:	79fa      	ldrb	r2, [r7, #7]
 800c6b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c6b2:	4b11      	ldr	r3, [pc, #68]	@ (800c6f8 <FATFS_LinkDriverEx+0x94>)
 800c6b4:	7a5b      	ldrb	r3, [r3, #9]
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	1c5a      	adds	r2, r3, #1
 800c6ba:	b2d1      	uxtb	r1, r2
 800c6bc:	4a0e      	ldr	r2, [pc, #56]	@ (800c6f8 <FATFS_LinkDriverEx+0x94>)
 800c6be:	7251      	strb	r1, [r2, #9]
 800c6c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c6c2:	7dbb      	ldrb	r3, [r7, #22]
 800c6c4:	3330      	adds	r3, #48	@ 0x30
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	223a      	movs	r2, #58	@ 0x3a
 800c6d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	3302      	adds	r3, #2
 800c6d8:	222f      	movs	r2, #47	@ 0x2f
 800c6da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	3303      	adds	r3, #3
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	371c      	adds	r7, #28
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop
 800c6f8:	200005c8 	.word	0x200005c8

0800c6fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c706:	2200      	movs	r2, #0
 800c708:	6839      	ldr	r1, [r7, #0]
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7ff ffaa 	bl	800c664 <FATFS_LinkDriverEx>
 800c710:	4603      	mov	r3, r0
}
 800c712:	4618      	mov	r0, r3
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
	...

0800c71c <malloc>:
 800c71c:	4b02      	ldr	r3, [pc, #8]	@ (800c728 <malloc+0xc>)
 800c71e:	4601      	mov	r1, r0
 800c720:	6818      	ldr	r0, [r3, #0]
 800c722:	f000 b82d 	b.w	800c780 <_malloc_r>
 800c726:	bf00      	nop
 800c728:	20000018 	.word	0x20000018

0800c72c <free>:
 800c72c:	4b02      	ldr	r3, [pc, #8]	@ (800c738 <free+0xc>)
 800c72e:	4601      	mov	r1, r0
 800c730:	6818      	ldr	r0, [r3, #0]
 800c732:	f000 b949 	b.w	800c9c8 <_free_r>
 800c736:	bf00      	nop
 800c738:	20000018 	.word	0x20000018

0800c73c <sbrk_aligned>:
 800c73c:	b570      	push	{r4, r5, r6, lr}
 800c73e:	4e0f      	ldr	r6, [pc, #60]	@ (800c77c <sbrk_aligned+0x40>)
 800c740:	460c      	mov	r4, r1
 800c742:	6831      	ldr	r1, [r6, #0]
 800c744:	4605      	mov	r5, r0
 800c746:	b911      	cbnz	r1, 800c74e <sbrk_aligned+0x12>
 800c748:	f000 f8f4 	bl	800c934 <_sbrk_r>
 800c74c:	6030      	str	r0, [r6, #0]
 800c74e:	4621      	mov	r1, r4
 800c750:	4628      	mov	r0, r5
 800c752:	f000 f8ef 	bl	800c934 <_sbrk_r>
 800c756:	1c43      	adds	r3, r0, #1
 800c758:	d103      	bne.n	800c762 <sbrk_aligned+0x26>
 800c75a:	f04f 34ff 	mov.w	r4, #4294967295
 800c75e:	4620      	mov	r0, r4
 800c760:	bd70      	pop	{r4, r5, r6, pc}
 800c762:	1cc4      	adds	r4, r0, #3
 800c764:	f024 0403 	bic.w	r4, r4, #3
 800c768:	42a0      	cmp	r0, r4
 800c76a:	d0f8      	beq.n	800c75e <sbrk_aligned+0x22>
 800c76c:	1a21      	subs	r1, r4, r0
 800c76e:	4628      	mov	r0, r5
 800c770:	f000 f8e0 	bl	800c934 <_sbrk_r>
 800c774:	3001      	adds	r0, #1
 800c776:	d1f2      	bne.n	800c75e <sbrk_aligned+0x22>
 800c778:	e7ef      	b.n	800c75a <sbrk_aligned+0x1e>
 800c77a:	bf00      	nop
 800c77c:	200005d4 	.word	0x200005d4

0800c780 <_malloc_r>:
 800c780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c784:	1ccd      	adds	r5, r1, #3
 800c786:	f025 0503 	bic.w	r5, r5, #3
 800c78a:	3508      	adds	r5, #8
 800c78c:	2d0c      	cmp	r5, #12
 800c78e:	bf38      	it	cc
 800c790:	250c      	movcc	r5, #12
 800c792:	2d00      	cmp	r5, #0
 800c794:	4606      	mov	r6, r0
 800c796:	db01      	blt.n	800c79c <_malloc_r+0x1c>
 800c798:	42a9      	cmp	r1, r5
 800c79a:	d904      	bls.n	800c7a6 <_malloc_r+0x26>
 800c79c:	230c      	movs	r3, #12
 800c79e:	6033      	str	r3, [r6, #0]
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c87c <_malloc_r+0xfc>
 800c7aa:	f000 f869 	bl	800c880 <__malloc_lock>
 800c7ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c7b2:	461c      	mov	r4, r3
 800c7b4:	bb44      	cbnz	r4, 800c808 <_malloc_r+0x88>
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	f7ff ffbf 	bl	800c73c <sbrk_aligned>
 800c7be:	1c43      	adds	r3, r0, #1
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	d158      	bne.n	800c876 <_malloc_r+0xf6>
 800c7c4:	f8d8 4000 	ldr.w	r4, [r8]
 800c7c8:	4627      	mov	r7, r4
 800c7ca:	2f00      	cmp	r7, #0
 800c7cc:	d143      	bne.n	800c856 <_malloc_r+0xd6>
 800c7ce:	2c00      	cmp	r4, #0
 800c7d0:	d04b      	beq.n	800c86a <_malloc_r+0xea>
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	4639      	mov	r1, r7
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	eb04 0903 	add.w	r9, r4, r3
 800c7dc:	f000 f8aa 	bl	800c934 <_sbrk_r>
 800c7e0:	4581      	cmp	r9, r0
 800c7e2:	d142      	bne.n	800c86a <_malloc_r+0xea>
 800c7e4:	6821      	ldr	r1, [r4, #0]
 800c7e6:	1a6d      	subs	r5, r5, r1
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f7ff ffa6 	bl	800c73c <sbrk_aligned>
 800c7f0:	3001      	adds	r0, #1
 800c7f2:	d03a      	beq.n	800c86a <_malloc_r+0xea>
 800c7f4:	6823      	ldr	r3, [r4, #0]
 800c7f6:	442b      	add	r3, r5
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c7fe:	685a      	ldr	r2, [r3, #4]
 800c800:	bb62      	cbnz	r2, 800c85c <_malloc_r+0xdc>
 800c802:	f8c8 7000 	str.w	r7, [r8]
 800c806:	e00f      	b.n	800c828 <_malloc_r+0xa8>
 800c808:	6822      	ldr	r2, [r4, #0]
 800c80a:	1b52      	subs	r2, r2, r5
 800c80c:	d420      	bmi.n	800c850 <_malloc_r+0xd0>
 800c80e:	2a0b      	cmp	r2, #11
 800c810:	d917      	bls.n	800c842 <_malloc_r+0xc2>
 800c812:	1961      	adds	r1, r4, r5
 800c814:	42a3      	cmp	r3, r4
 800c816:	6025      	str	r5, [r4, #0]
 800c818:	bf18      	it	ne
 800c81a:	6059      	strne	r1, [r3, #4]
 800c81c:	6863      	ldr	r3, [r4, #4]
 800c81e:	bf08      	it	eq
 800c820:	f8c8 1000 	streq.w	r1, [r8]
 800c824:	5162      	str	r2, [r4, r5]
 800c826:	604b      	str	r3, [r1, #4]
 800c828:	4630      	mov	r0, r6
 800c82a:	f000 f82f 	bl	800c88c <__malloc_unlock>
 800c82e:	f104 000b 	add.w	r0, r4, #11
 800c832:	1d23      	adds	r3, r4, #4
 800c834:	f020 0007 	bic.w	r0, r0, #7
 800c838:	1ac2      	subs	r2, r0, r3
 800c83a:	bf1c      	itt	ne
 800c83c:	1a1b      	subne	r3, r3, r0
 800c83e:	50a3      	strne	r3, [r4, r2]
 800c840:	e7af      	b.n	800c7a2 <_malloc_r+0x22>
 800c842:	6862      	ldr	r2, [r4, #4]
 800c844:	42a3      	cmp	r3, r4
 800c846:	bf0c      	ite	eq
 800c848:	f8c8 2000 	streq.w	r2, [r8]
 800c84c:	605a      	strne	r2, [r3, #4]
 800c84e:	e7eb      	b.n	800c828 <_malloc_r+0xa8>
 800c850:	4623      	mov	r3, r4
 800c852:	6864      	ldr	r4, [r4, #4]
 800c854:	e7ae      	b.n	800c7b4 <_malloc_r+0x34>
 800c856:	463c      	mov	r4, r7
 800c858:	687f      	ldr	r7, [r7, #4]
 800c85a:	e7b6      	b.n	800c7ca <_malloc_r+0x4a>
 800c85c:	461a      	mov	r2, r3
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	42a3      	cmp	r3, r4
 800c862:	d1fb      	bne.n	800c85c <_malloc_r+0xdc>
 800c864:	2300      	movs	r3, #0
 800c866:	6053      	str	r3, [r2, #4]
 800c868:	e7de      	b.n	800c828 <_malloc_r+0xa8>
 800c86a:	230c      	movs	r3, #12
 800c86c:	6033      	str	r3, [r6, #0]
 800c86e:	4630      	mov	r0, r6
 800c870:	f000 f80c 	bl	800c88c <__malloc_unlock>
 800c874:	e794      	b.n	800c7a0 <_malloc_r+0x20>
 800c876:	6005      	str	r5, [r0, #0]
 800c878:	e7d6      	b.n	800c828 <_malloc_r+0xa8>
 800c87a:	bf00      	nop
 800c87c:	200005d8 	.word	0x200005d8

0800c880 <__malloc_lock>:
 800c880:	4801      	ldr	r0, [pc, #4]	@ (800c888 <__malloc_lock+0x8>)
 800c882:	f000 b891 	b.w	800c9a8 <__retarget_lock_acquire_recursive>
 800c886:	bf00      	nop
 800c888:	20000718 	.word	0x20000718

0800c88c <__malloc_unlock>:
 800c88c:	4801      	ldr	r0, [pc, #4]	@ (800c894 <__malloc_unlock+0x8>)
 800c88e:	f000 b88c 	b.w	800c9aa <__retarget_lock_release_recursive>
 800c892:	bf00      	nop
 800c894:	20000718 	.word	0x20000718

0800c898 <realloc>:
 800c898:	4b02      	ldr	r3, [pc, #8]	@ (800c8a4 <realloc+0xc>)
 800c89a:	460a      	mov	r2, r1
 800c89c:	4601      	mov	r1, r0
 800c89e:	6818      	ldr	r0, [r3, #0]
 800c8a0:	f000 b802 	b.w	800c8a8 <_realloc_r>
 800c8a4:	20000018 	.word	0x20000018

0800c8a8 <_realloc_r>:
 800c8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ac:	4680      	mov	r8, r0
 800c8ae:	4615      	mov	r5, r2
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	b921      	cbnz	r1, 800c8be <_realloc_r+0x16>
 800c8b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	f7ff bf61 	b.w	800c780 <_malloc_r>
 800c8be:	b92a      	cbnz	r2, 800c8cc <_realloc_r+0x24>
 800c8c0:	f000 f882 	bl	800c9c8 <_free_r>
 800c8c4:	2400      	movs	r4, #0
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8cc:	f000 f8c6 	bl	800ca5c <_malloc_usable_size_r>
 800c8d0:	4285      	cmp	r5, r0
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	d802      	bhi.n	800c8dc <_realloc_r+0x34>
 800c8d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c8da:	d8f4      	bhi.n	800c8c6 <_realloc_r+0x1e>
 800c8dc:	4629      	mov	r1, r5
 800c8de:	4640      	mov	r0, r8
 800c8e0:	f7ff ff4e 	bl	800c780 <_malloc_r>
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	d0ec      	beq.n	800c8c4 <_realloc_r+0x1c>
 800c8ea:	42b5      	cmp	r5, r6
 800c8ec:	462a      	mov	r2, r5
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	bf28      	it	cs
 800c8f2:	4632      	movcs	r2, r6
 800c8f4:	f000 f85a 	bl	800c9ac <memcpy>
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	f000 f864 	bl	800c9c8 <_free_r>
 800c900:	463c      	mov	r4, r7
 800c902:	e7e0      	b.n	800c8c6 <_realloc_r+0x1e>

0800c904 <memset>:
 800c904:	4402      	add	r2, r0
 800c906:	4603      	mov	r3, r0
 800c908:	4293      	cmp	r3, r2
 800c90a:	d100      	bne.n	800c90e <memset+0xa>
 800c90c:	4770      	bx	lr
 800c90e:	f803 1b01 	strb.w	r1, [r3], #1
 800c912:	e7f9      	b.n	800c908 <memset+0x4>

0800c914 <strcat>:
 800c914:	b510      	push	{r4, lr}
 800c916:	4602      	mov	r2, r0
 800c918:	7814      	ldrb	r4, [r2, #0]
 800c91a:	4613      	mov	r3, r2
 800c91c:	3201      	adds	r2, #1
 800c91e:	2c00      	cmp	r4, #0
 800c920:	d1fa      	bne.n	800c918 <strcat+0x4>
 800c922:	3b01      	subs	r3, #1
 800c924:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c928:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c92c:	2a00      	cmp	r2, #0
 800c92e:	d1f9      	bne.n	800c924 <strcat+0x10>
 800c930:	bd10      	pop	{r4, pc}
	...

0800c934 <_sbrk_r>:
 800c934:	b538      	push	{r3, r4, r5, lr}
 800c936:	4d06      	ldr	r5, [pc, #24]	@ (800c950 <_sbrk_r+0x1c>)
 800c938:	2300      	movs	r3, #0
 800c93a:	4604      	mov	r4, r0
 800c93c:	4608      	mov	r0, r1
 800c93e:	602b      	str	r3, [r5, #0]
 800c940:	f7f6 fee4 	bl	800370c <_sbrk>
 800c944:	1c43      	adds	r3, r0, #1
 800c946:	d102      	bne.n	800c94e <_sbrk_r+0x1a>
 800c948:	682b      	ldr	r3, [r5, #0]
 800c94a:	b103      	cbz	r3, 800c94e <_sbrk_r+0x1a>
 800c94c:	6023      	str	r3, [r4, #0]
 800c94e:	bd38      	pop	{r3, r4, r5, pc}
 800c950:	20000714 	.word	0x20000714

0800c954 <__errno>:
 800c954:	4b01      	ldr	r3, [pc, #4]	@ (800c95c <__errno+0x8>)
 800c956:	6818      	ldr	r0, [r3, #0]
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	20000018 	.word	0x20000018

0800c960 <__libc_init_array>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	4d0d      	ldr	r5, [pc, #52]	@ (800c998 <__libc_init_array+0x38>)
 800c964:	4c0d      	ldr	r4, [pc, #52]	@ (800c99c <__libc_init_array+0x3c>)
 800c966:	1b64      	subs	r4, r4, r5
 800c968:	10a4      	asrs	r4, r4, #2
 800c96a:	2600      	movs	r6, #0
 800c96c:	42a6      	cmp	r6, r4
 800c96e:	d109      	bne.n	800c984 <__libc_init_array+0x24>
 800c970:	4d0b      	ldr	r5, [pc, #44]	@ (800c9a0 <__libc_init_array+0x40>)
 800c972:	4c0c      	ldr	r4, [pc, #48]	@ (800c9a4 <__libc_init_array+0x44>)
 800c974:	f000 f87a 	bl	800ca6c <_init>
 800c978:	1b64      	subs	r4, r4, r5
 800c97a:	10a4      	asrs	r4, r4, #2
 800c97c:	2600      	movs	r6, #0
 800c97e:	42a6      	cmp	r6, r4
 800c980:	d105      	bne.n	800c98e <__libc_init_array+0x2e>
 800c982:	bd70      	pop	{r4, r5, r6, pc}
 800c984:	f855 3b04 	ldr.w	r3, [r5], #4
 800c988:	4798      	blx	r3
 800c98a:	3601      	adds	r6, #1
 800c98c:	e7ee      	b.n	800c96c <__libc_init_array+0xc>
 800c98e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c992:	4798      	blx	r3
 800c994:	3601      	adds	r6, #1
 800c996:	e7f2      	b.n	800c97e <__libc_init_array+0x1e>
 800c998:	0800d9e4 	.word	0x0800d9e4
 800c99c:	0800d9e4 	.word	0x0800d9e4
 800c9a0:	0800d9e4 	.word	0x0800d9e4
 800c9a4:	0800d9e8 	.word	0x0800d9e8

0800c9a8 <__retarget_lock_acquire_recursive>:
 800c9a8:	4770      	bx	lr

0800c9aa <__retarget_lock_release_recursive>:
 800c9aa:	4770      	bx	lr

0800c9ac <memcpy>:
 800c9ac:	440a      	add	r2, r1
 800c9ae:	4291      	cmp	r1, r2
 800c9b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9b4:	d100      	bne.n	800c9b8 <memcpy+0xc>
 800c9b6:	4770      	bx	lr
 800c9b8:	b510      	push	{r4, lr}
 800c9ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9c2:	4291      	cmp	r1, r2
 800c9c4:	d1f9      	bne.n	800c9ba <memcpy+0xe>
 800c9c6:	bd10      	pop	{r4, pc}

0800c9c8 <_free_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	2900      	cmp	r1, #0
 800c9ce:	d041      	beq.n	800ca54 <_free_r+0x8c>
 800c9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9d4:	1f0c      	subs	r4, r1, #4
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	bfb8      	it	lt
 800c9da:	18e4      	addlt	r4, r4, r3
 800c9dc:	f7ff ff50 	bl	800c880 <__malloc_lock>
 800c9e0:	4a1d      	ldr	r2, [pc, #116]	@ (800ca58 <_free_r+0x90>)
 800c9e2:	6813      	ldr	r3, [r2, #0]
 800c9e4:	b933      	cbnz	r3, 800c9f4 <_free_r+0x2c>
 800c9e6:	6063      	str	r3, [r4, #4]
 800c9e8:	6014      	str	r4, [r2, #0]
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9f0:	f7ff bf4c 	b.w	800c88c <__malloc_unlock>
 800c9f4:	42a3      	cmp	r3, r4
 800c9f6:	d908      	bls.n	800ca0a <_free_r+0x42>
 800c9f8:	6820      	ldr	r0, [r4, #0]
 800c9fa:	1821      	adds	r1, r4, r0
 800c9fc:	428b      	cmp	r3, r1
 800c9fe:	bf01      	itttt	eq
 800ca00:	6819      	ldreq	r1, [r3, #0]
 800ca02:	685b      	ldreq	r3, [r3, #4]
 800ca04:	1809      	addeq	r1, r1, r0
 800ca06:	6021      	streq	r1, [r4, #0]
 800ca08:	e7ed      	b.n	800c9e6 <_free_r+0x1e>
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	b10b      	cbz	r3, 800ca14 <_free_r+0x4c>
 800ca10:	42a3      	cmp	r3, r4
 800ca12:	d9fa      	bls.n	800ca0a <_free_r+0x42>
 800ca14:	6811      	ldr	r1, [r2, #0]
 800ca16:	1850      	adds	r0, r2, r1
 800ca18:	42a0      	cmp	r0, r4
 800ca1a:	d10b      	bne.n	800ca34 <_free_r+0x6c>
 800ca1c:	6820      	ldr	r0, [r4, #0]
 800ca1e:	4401      	add	r1, r0
 800ca20:	1850      	adds	r0, r2, r1
 800ca22:	4283      	cmp	r3, r0
 800ca24:	6011      	str	r1, [r2, #0]
 800ca26:	d1e0      	bne.n	800c9ea <_free_r+0x22>
 800ca28:	6818      	ldr	r0, [r3, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	6053      	str	r3, [r2, #4]
 800ca2e:	4408      	add	r0, r1
 800ca30:	6010      	str	r0, [r2, #0]
 800ca32:	e7da      	b.n	800c9ea <_free_r+0x22>
 800ca34:	d902      	bls.n	800ca3c <_free_r+0x74>
 800ca36:	230c      	movs	r3, #12
 800ca38:	602b      	str	r3, [r5, #0]
 800ca3a:	e7d6      	b.n	800c9ea <_free_r+0x22>
 800ca3c:	6820      	ldr	r0, [r4, #0]
 800ca3e:	1821      	adds	r1, r4, r0
 800ca40:	428b      	cmp	r3, r1
 800ca42:	bf04      	itt	eq
 800ca44:	6819      	ldreq	r1, [r3, #0]
 800ca46:	685b      	ldreq	r3, [r3, #4]
 800ca48:	6063      	str	r3, [r4, #4]
 800ca4a:	bf04      	itt	eq
 800ca4c:	1809      	addeq	r1, r1, r0
 800ca4e:	6021      	streq	r1, [r4, #0]
 800ca50:	6054      	str	r4, [r2, #4]
 800ca52:	e7ca      	b.n	800c9ea <_free_r+0x22>
 800ca54:	bd38      	pop	{r3, r4, r5, pc}
 800ca56:	bf00      	nop
 800ca58:	200005d8 	.word	0x200005d8

0800ca5c <_malloc_usable_size_r>:
 800ca5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca60:	1f18      	subs	r0, r3, #4
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	bfbc      	itt	lt
 800ca66:	580b      	ldrlt	r3, [r1, r0]
 800ca68:	18c0      	addlt	r0, r0, r3
 800ca6a:	4770      	bx	lr

0800ca6c <_init>:
 800ca6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6e:	bf00      	nop
 800ca70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca72:	bc08      	pop	{r3}
 800ca74:	469e      	mov	lr, r3
 800ca76:	4770      	bx	lr

0800ca78 <_fini>:
 800ca78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca7a:	bf00      	nop
 800ca7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca7e:	bc08      	pop	{r3}
 800ca80:	469e      	mov	lr, r3
 800ca82:	4770      	bx	lr
